WEBVTT

1
00:00:00.250 --> 00:00:02.065
>> Brian Holt: 因此，我们想要合并详细信息，因此
&gt;&gt; Brian Holt: So
we wanna wrap details in this, so

2
00:00:02.065 --> 00:00:05.341
如果 API 有错误，它不会崩溃。
in case there's an error from the API,
that it doesn't crash.

3
00:00:07.264 --> 00:00:10.666
>> Brian Holt: 现在，我很想把这个错误的内部
&gt;&gt; Brian Holt: Now, I would be super
tempted to wrap this inside of an error

4
00:00:10.666 --> 00:00:11.355
边界。
boundary.

5
00:00:11.355 --> 00:00:16.754
但有一件事你必须了解错误的界限
But there's a big thing that you
have to know about error boundaries,

6
00:00:16.754 --> 00:00:20.150
它只是在里面和里面的孩子一起工作
is it only works with
children inside of it.

7
00:00:20.150 --> 00:00:22.274
这是一个 ErrorBoundary 。
This was an ErrorBoundary here.

8
00:00:25.422 --> 00:00:27.149
>> Brian Holt: 或 ErrorBoundary?
&gt;&gt; Brian Holt: Or ErrorBoundary?

9
00:00:28.335 --> 00:00:29.670
>> Brian Holt: 这不起作用。
&gt;&gt; Brian Holt: This wouldn't work.

10
00:00:29.670 --> 00:00:34.750
原因是你要
And the reason being is that you would

11
00:00:34.750 --> 00:00:38.119
在轮播中捕捉到一些东西但你不能把它们抓进去
catch things in carousel, but you wouldn't
catch them inside of the class itself.

12
00:00:38.119 --> 00:00:41.359
所以它无法在它所进入的类别中捕捉它
So it can't catch it inside
of the class that it's in, so

13
00:00:41.359 --> 00:00:45.380
我们必须把它做个更高级的部分
we have to make it basically a higher
order component above details.

14
00:00:45.380 --> 00:00:47.969
我给你们展示一个真正的方法。
And I'll show you just a really
quick way of doing that.

15
00:00:47.969 --> 00:00:51.213
所以不要把细节都搞乱了
So rather than mess with details itself,

16
00:00:51.213 --> 00:00:56.780
我们要做的就是要在这里出口默认的功能
what we're gonna do is we're going
to export a default function here.

17
00:00:58.567 --> 00:01:01.323
>> Brian Holt: 函数，将会被称为 " 详细信息 " 。
&gt;&gt; Brian Holt: Function,
there it's going to be called Details.

18
00:01:04.313 --> 00:01:06.379
>> Brian Holt: WthErrorBoundary。
&gt;&gt; Brian Holt: WthErrorBoundary.

19
00:01:07.763 --> 00:01:12.019
> > Brian Holt: 它会被道具，还会回来
&gt;&gt; Brian Holt: It's gonna take in props,
and it's going to return

20
00:01:12.019 --> 00:01:18.835
ErrorBoundary， >> Brian Holt: And
an ErrorBoundary,
&gt;&gt; Brian Holt: And

21
00:01:18.835 --> 00:01:21.914
然后就会在里面呈现细节
then, it's going to render
details inside of it.

22
00:01:25.189 --> 00:01:28.245
>> Brian Holt: 因此，这会自动在此处导入 ErrorBoundary ，因此
&gt;&gt; Brian Holt: So this automatically
imported up here ErrorBoundary as well, so

23
00:01:28.245 --> 00:01:30.763
确保你能像我一样把它进口到第四行
make sure you import that
there like I did on line four.

24
00:01:32.883 --> 00:01:38.250
> > Brian Holt: 然后在这里，我们仍然有这个问题。
&gt;&gt; Brian Holt: And then down here,
we still have a problem with this.

25
00:01:38.250 --> 00:01:41.599
因此，这会在 " 详细信息" 周围正确包装 ErrorBoundary 。
So this is correctly wrapping
an ErrorBoundary around Details.

26
00:01:41.599 --> 00:01:44.289
现在这将会捕捉到各种不同的
And now this will catch all
of the various different

27
00:01:44.289 --> 00:01:46.930
在 " 详细信息 " 中可能发生的错误。
errors that could happen
inside of Details.

28
00:01:46.930 --> 00:01:48.879
但我们有这些道具
But we have these props.

29
00:01:48.879 --> 00:01:53.150
我们想把这些道具传递到细节上。
And we want to pass these
props into Details.

30
00:01:54.390 --> 00:01:55.859
我们要怎么做
How do we do that?

31
00:01:55.859 --> 00:02:00.572
我是说你可以做些像 props=props 的东西
I mean, you could do something
like props=props, but

32
00:02:00.572 --> 00:02:02.986
这不太一样
this isn't quite the same.

33
00:02:06.596 --> 00:02:13.879
>> Brian Holt: 因为现在在这里，我得说 props.props。
&gt;&gt; Brian Holt: Because now inside of here,
I would have to say this.props.props.

34
00:02:13.879 --> 00:02:16.819
会很奇怪那就不对了
It would be weird, so that's not right.

35
00:02:18.000 --> 00:02:20.920
我可以把所有细节都找出来
I could go figure out everything
that Details is getting from

36
00:02:20.920 --> 00:02:24.170
其父组件，然后按名称将其传入。
its parent components, and
then, by name, pass them in.

37
00:02:24.170 --> 00:02:26.770
但这很麻烦我也不想这么做
But that's burdensome,
I don't want to do that either.

38
00:02:26.770 --> 00:02:29.500
所以我要给你看一下你也能做的小把戏
So I'm gonna show you a little
trick that you can do as well.

39
00:02:29.500 --> 00:02:36.659
你可以把这些花括号放在这里说 {...道具} 就像这样。
You can actually just put these curly
braces here and say {...props} like that.

40
00:02:36.659 --> 00:02:40.953
这将在 " 详细信息 " 中传播道具。
This is going to spread
the props across Details.

41
00:02:40.953 --> 00:02:43.829
所以想象一个道具有一些
So imagine for
a second that props had some,

42
00:02:43.829 --> 00:02:46.403
什么是 " 详细信息 " 从道具中使用 ?
what is Details even using from props?

43
00:02:46.403 --> 00:02:47.252
普罗普斯
Props.

44
00:02:48.576 --> 00:02:49.159
>> Brian Holt: 标识，对吗 ?
&gt;&gt; Brian Holt: ID, right?

45
00:02:49.159 --> 00:02:50.307
所以它得到了 ID
So it's getting ID.

46
00:02:53.396 --> 00:02:58.574
>> Brian Holt: 因此，这等于表示 id={props.id}，
&gt;&gt; Brian Holt: So this would be
equivalent from saying id={props.id},

47
00:02:58.574 --> 00:03:02.659
然后把所有这些都写出来
and then writing out all
of those piece by piece.

48
00:03:02.659 --> 00:03:05.191
这只是一种更快的方法。
This is just a faster way of doing it.

49
00:03:09.789 --> 00:03:13.038
>> 布莱恩 - 霍尔特: 现在，让我给你一个提醒你的故事。
&gt;&gt; Brian Holt: Now,
let me offer you a cautionary tale.

50
00:03:13.038 --> 00:03:18.335
React的优点，我们使用 React 的原因是它非常明确。
The advantage of React, the reason why we
use React is because it's very explicit.

51
00:03:18.335 --> 00:03:20.658
挺容易穿过去的
It's very easy to go through and

52
00:03:20.658 --> 00:03:24.543
都能理解每一件事的一切
understand piece by piece
what everything is doing.

53
00:03:24.543 --> 00:03:28.725
这里的 ErrorBoundary 没有互动，根本不关心道具，
ErrorBoundary here has no interaction and
does not care at all about the props,

54
00:03:28.725 --> 00:03:32.793
它只是想包装点东西然后让它继续呈现
it's just trying to wrap something,
and then, let it continue rendering.

55
00:03:32.793 --> 00:03:35.884
因此 ErrorBoundary 除了捕捉错误之外没有为你做任何事
So ErrorBoundary's not doing anything for
you other than catching errors, and

56
00:03:35.884 --> 00:03:38.076
在这里做所有工作的细节
it's Details that's actually
doing all the work here.

57
00:03:38.076 --> 00:03:41.692
所以我们想成为这个 DetailsWithErrorBoundary 的通行证。
So we just want to be a pass through for
this DetailsWithErrorBoundary.

58
00:03:41.692 --> 00:03:45.231
我拼错了它是 DetailsWithErrorBoundary
I spelled that wrong,
it's DetailsWithErrorBoundary,

59
00:03:45.231 --> 00:03:50.060
不是那事，只是为了调试目的，就这样。
not that that matters, that's just for
debugging purposes, and that's all.

60
00:03:53.382 --> 00:03:55.972
>> Brian Holt: 因此，您只想在以下时间使用这些传播运算符 :
&gt;&gt; Brian Holt: So you only wanna
use these spread operators when

61
00:03:55.972 --> 00:04:00.060
组件其实并不真正在乎那些道具是什么
the component doesn't actually really
care about what those props are.

62
00:04:00.060 --> 00:04:01.900
这只是要经过一段
It's just meant to be a pass through.

63
00:04:01.900 --> 00:04:06.379
不要用这种威利的方式，让你的代码更难解读。
Don't use this willy nilly, it makes your
code harder to read for the most part.

64
00:04:07.889 --> 00:04:08.389
有道理吗
Make sense?

65
00:04:10.060 --> 00:04:10.560
好的。
Okay.

66
00:04:12.143 --> 00:04:14.653
> > Brian Holt: 那么现在，如果我们看看我们的应用程序，
&gt;&gt; Brian Holt: So now,
if we go look at our app,

67
00:04:14.653 --> 00:04:20.048
所有东西都应该是一模一样的
everything should look exactly
the same cuz this has no errors on it,

68
00:04:20.048 --> 00:04:25.182
但如果我现在进入 " 详细信息 " 页面并表示 " 详细信息 " ，会发生什么情况 ?
but what happens if I go into
the Details page now and say Details?

69
00:04:28.050 --> 00:04:32.298
>> Brian Holt: 在这里说，而不是 componentDidMount，
&gt;&gt; Brian Holt: And let's say here
instead of componentDidMount,

70
00:04:32.298 --> 00:04:36.454
我们只会说会有新的错误
we're just gonna say,
throw new Error like that.

71
00:04:40.288 --> 00:04:41.120
> > Brian Holt: 会发生什么 ?
&gt;&gt; Brian Holt: What's gonna happen?

72
00:04:42.300 --> 00:04:45.350
希望您可以说此页面存在错误。
Hopefully, you can say that there
was an error with this page.

73
00:04:45.350 --> 00:04:47.949
单击此处以返回，并等待 5 秒。
Click here to go back,
and wait five seconds.

74
00:04:47.949 --> 00:04:50.954
我们要做 5 秒的工作我们还没完成那部分
We'll go do the five seconds part,
we haven't done that part.

75
00:04:50.954 --> 00:04:55.302
您还可以在此处看到发生错误的情况。
You can also see here
that you get the error.

76
00:04:58.547 --> 00:05:01.240
>> Brian Holt: 您可以看到 ErrorBoundary 捕获到错误。
&gt;&gt; Brian Holt: And
you can see ErrorBoundary caught in error.

77
00:05:01.240 --> 00:05:05.764
所以你做了这个信息，就是我发明的这个非常描述性的错误，
So you do the message, which is this very
descriptive error that I just invented,

78
00:05:05.764 --> 00:05:10.112
它还提供了来自 componentDidMount的所有内容。
and it also gives you all of the stuff
where this came from componentDidMount.

79
00:05:10.112 --> 00:05:14.247
Blah ， blah， blah，所有这些东西 .
Blah, blah, blah, all that kind of stuff.

80
00:05:14.247 --> 00:05:18.257
>> Brian Holt: 现在，如果我们点击这里，它就会带我们回到这里。
&gt;&gt; Brian Holt: Now, if we click here,
it'll take us back here.

81
00:05:18.257 --> 00:05:22.076
现在，如果我们没有 ErrorBoundary ，这将会使整个程序崩溃。
Now, if we didn't have the ErrorBoundary,
this would just crash the entire program.

82
00:05:27.790 --> 00:05:29.089
>> Brian Holt: 这就是 ErrorBoundaries 有用的东西。
&gt;&gt; Brian Holt: So that's what
ErrorBoundaries are useful for.
