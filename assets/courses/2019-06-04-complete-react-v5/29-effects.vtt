WEBVTT

1
00:00:00.000 --> 00:00:01.627
布莱恩: 所以我们要在这里做些什么
&gt;&gt; Brian: So
what we're gonna start doing here,

2
00:00:01.627 --> 00:00:04.304
我们会开始从 API中读取实时数据
is we're actually gonna to start
reading live data from an API.

3
00:00:06.791 --> 00:00:10.067
> > 布莱恩: 这会让我们感到兴奋，所以我们会看到宠物收养她。
&gt;&gt; Brian: Which is gonna be exciting,
so we're gonna see pets to adopt her.

4
00:00:10.067 --> 00:00:13.986
所以这其实是从 Petfinder 来的
And so this is gonna actually come
from Petfinder which is like one of

5
00:00:13.986 --> 00:00:16.266
找到宠物的最简单方法
the easiest ways to find pets to adopt.

6
00:00:16.266 --> 00:00:19.637
所以如果你在这里看到的是你想要领养的
So if you see a patt here
use that you want to adopt,

7
00:00:19.637 --> 00:00:21.655
你一定要这么做
you should definitely do it.

8
00:00:21.655 --> 00:00:25.449
您在前端主斜杠宠物中所带的 Petfinder 客户机为
And the Petfinder client that you brought
in the front end master slash pet is

9
00:00:25.449 --> 00:00:26.936
都已经被安排好了
already all set up to do that.

10
00:00:26.936 --> 00:00:31.213
现在，我要展示如何处理 React 中的同步代码。
So I'm gonna show you now how to handle
a synchronous code inside of React.

11
00:00:34.219 --> 00:00:39.494
>> 布莱恩: 好的，我要你先做，我刚才说的
&gt;&gt; Brian: Okay, so what I want you to
do first, again I mentioned earlier

12
00:00:39.494 --> 00:00:45.143
虽然你可以在这里放置不同的地方
that while you can put in different
locations up here, I actually have,

13
00:00:45.143 --> 00:00:51.374
至少暂时限制在西雅图的西雅图和加利福尼亚州旧金山
at least temporarily, limited this to
Seattle, WA, and San Francisco, CA.

14
00:00:51.374 --> 00:00:56.085
原因是我们有一个开发商钥匙我们不想让他们的 API
Reason being is that we have one developer
key and we don't wanna hammer their API,

15
00:00:56.085 --> 00:00:59.853
所以我们才会把自己局限在几个
so that's why we're kind of limiting
ourselves to just a couple of

16
00:00:59.853 --> 00:01:01.152
地理区域。
geographical areas.

17
00:01:01.152 --> 00:01:04.483
如果我们能想出更好的办法，这可能会改变未来。
This might change in the future, if we
can figure out better ways of doing this.

18
00:01:04.483 --> 00:01:10.167
但现在就在安全的这边我们要这么做
But just to be on the safe side right now,
that's what we're gonna do.

19
00:01:10.167 --> 00:01:16.009
好的，让我们在这里开始使用一些数据。
Okay, so let's go ahead and
start using some data here.

20
00:01:16.009 --> 00:01:20.698
所以在 App.js 中，抱歉，这不是 App.js，
So inside of App.js,
sorry, this isn't App.js,

21
00:01:20.698 --> 00:01:24.043
这是 SearchParams.js的内部。
this is inside of SearchParams.js.

22
00:01:25.852 --> 00:01:28.031
> > 布莱恩: 我们这里已经有动物了
&gt;&gt; Brian: We've already
got an animals here, but

23
00:01:28.031 --> 00:01:30.603
我们也要把宠物客户弄上去
we're also going to get
the pet client up here.

24
00:01:33.325 --> 00:01:37.903
> > 布莱恩: 在这些使用中的下拉菜单中，
&gt;&gt; Brian: And underneath all these
use dropdowns, and things like that,

25
00:01:37.903 --> 00:01:42.673
我们要用 React 的另一个叫 " useEffect" 的东西
we're gonna use another thing
from React here called useEffect.

26
00:01:45.033 --> 00:01:47.847
> > 布莱恩: 如果你熟悉雷法的话
&gt;&gt; Brian: Now,
if you're familiar with React, already,

27
00:01:47.847 --> 00:01:52.212
useEffect 将取代几个生命周期挂钩，对吗 ?
useEffect is gonna take the place of
several of the lifecycle hooks, right?

28
00:01:52.212 --> 00:01:56.901
所以它要取代 componentDidMount
So, it's gonna take the place
of componentDidMount,

29
00:01:56.901 --> 00:02:01.397
componentWillUnmount 和 componentDidUpdate。
componentWillUnmount, and
componentDidUpdate.

30
00:02:01.397 --> 00:02:04.728
所以如果你不知道这些是什么，那就好，你可以学习这些
So if you don't know what those are,
then that's fine, you can learn these for

31
00:02:04.728 --> 00:02:05.444
第一次了
the first time.

32
00:02:05.444 --> 00:02:07.846
但如果你很熟悉的话
But if you're coming in
with some familiarity,

33
00:02:07.846 --> 00:02:09.669
这就是要取代的
that's what this is gonna replace.

34
00:02:09.669 --> 00:02:13.311
所以我要说 " useEffect " ，然后我就给它一个功能。
So here I'm gonna say useEffect, and
then I'm gonna give it a function.

35
00:02:18.135 --> 00:02:23.947
> > 布莱恩: 然后我就会说 pet.retends ，
&gt;&gt; Brian: And
then here I'm gonna say pet.breeds,

36
00:02:27.533 --> 00:02:28.770
> > 布莱恩: 狗。
&gt;&gt; Brian: dog.

37
00:02:28.770 --> 00:02:32.737
这会带来一个承诺
This is gonna return a promise.

38
00:02:32.737 --> 00:02:34.389
你可以看到它回归了一个承诺。
You can actually see that
it returns a promise.

39
00:02:36.194 --> 00:02:39.637
>> Brian: 返回一个品种响应。
&gt;&gt; Brian: That returns a breeds response.

40
00:02:39.637 --> 00:02:44.689
然后就在这里我们可以看到它在做什么
And then here, just for now so
we can see what it's doing,

41
00:02:44.689 --> 00:02:49.141
我要说 console.log 和 console.error。
I'm gonna say console.log and
console.error.

42
00:02:49.141 --> 00:02:51.067
这句话是什么意思
And what this is saying,

43
00:02:51.067 --> 00:02:56.299
如果呼叫成功，则无论响应是什么，记录输出。
if the call is successful then log
output whatever the response is,

44
00:02:56.299 --> 00:03:01.192
如果不成功，则将其发送至 console.error。
and if it's not successful,
then send it to console.error.

45
00:03:03.817 --> 00:03:06.533
> > 布莱恩: 这里发生了什么 ?
&gt;&gt; Brian: So what's happening here?

46
00:03:06.533 --> 00:03:11.620
因此，在呈现呈现时，将断开 useEffect 。
So useEffect is disconnected from
when the render is happening.

47
00:03:11.620 --> 00:03:15.225
所以这实际上是在安排这个
So what this is actually doing
is this is scheduling this

48
00:03:15.225 --> 00:03:17.996
在发生呈现之后运行。
function to run after the render happens.

49
00:03:17.996 --> 00:03:20.920
接下来要发生的事是第一次
So what's gonna happen is it's
going to render the first time,

50
00:03:20.920 --> 00:03:24.623
它将会安排使用效果来运行，但它会首先呈现。
it's going to schedule use effect to run,
but then it's going to render first.

51
00:03:24.623 --> 00:03:29.055
所有这些东西都是在任何事情发生之前
So all of this stuff gets rendered
first before anything happens inside of

52
00:03:29.055 --> 00:03:29.843
useEffect。
useEffect.

53
00:03:29.843 --> 00:03:31.056
到目前为止还好吗
Good so far?

54
00:03:31.056 --> 00:03:33.498
好吧这事不会马上发生的
All right, so
this does not happen immediately.

55
00:03:33.498 --> 00:03:38.531
一旦发生这种情况，一旦搜索参数
As soon as this happens,
as soon as searchParams renders for

56
00:03:38.531 --> 00:03:43.870
第一次，你就会有这种影响了，好吗 ?
the very first time,
t's then going to run this effect, okay?

57
00:03:43.870 --> 00:03:48.587
而且它不像这样那样同步化，然后马上
And it's not synchronized its not like
this happens and then immediately

58
00:03:48.587 --> 00:03:53.320
这种情况发生后不久，就会产生这种影响。
this happens, it happens and
then soon thereafter this effect will run.

59
00:03:53.320 --> 00:03:55.502
你为什么要这么做
Now, why do you wanna do this?

60
00:03:55.502 --> 00:04:00.693
你想这样做是因为你不想放慢第一次的速度
Well, you want to do this because you
don't wanna slow down that first render,

61
00:04:00.693 --> 00:04:01.243
对吧 ?
right?

62
00:04:01.243 --> 00:04:03.528
你想马上给你的用户展示点东西
You wanna show your users
something immediately.

63
00:04:03.528 --> 00:04:06.105
你不想让他们等着看什么
You don't want them to have
to wait to see something,

64
00:04:06.105 --> 00:04:09.507
您不希望它们等待某些类型的 Ajax 请求返回。
you don't want them to wait for
some sort of Ajax request to come back.

65
00:04:09.507 --> 00:04:13.252
您要立即显示某些内容，然后转至 API 并尝试
You want to immediately show something and
then go to the API and try and

66
00:04:13.252 --> 00:04:14.090
请求数据。
request data.

67
00:04:14.090 --> 00:04:17.002
所以我们才这么做
So that's why we're doing this.

68
00:04:17.002 --> 00:04:19.290
让我们来看看这看起来是什么样的。
So let's go take a look what
that actually looks like.

69
00:04:19.290 --> 00:04:24.832
如果你去你的佩蒂那你应该看看这个对象
If you go over here into your petinder
you should see here this object breeds,

70
00:04:24.832 --> 00:04:30.300
然后你就应该看到它现在有 257 种
breeds, and then you should see it
comes back right now with 257 breeds.

71
00:04:30.300 --> 00:04:36.555
所以如果我看其中一个你可以看到哈斯基冰岛牧羊犬
So if I look at one of these you
can see Husky, Icelandic sheepdog.

72
00:04:36.555 --> 00:04:39.682
我都不知道那是个品种但显然是吧
I didn't even know that was a breed,
but apparently it is, right?

73
00:04:39.682 --> 00:04:42.730
因此，它从 API中返回了所有这些东西。
And so it comes back with all
these things back from the API.

74
00:04:42.730 --> 00:04:50.196
如果你看看你的网络标签，你会发现这只是 JSX， XHR。
And if you look at your network tab
you'll see that this is just JSX, XHR.

75
00:04:50.196 --> 00:04:56.468
这将会转至宠物 devs dev-apis ，并从 API 中获取。
This is going to the pet devs dev-apis,
and it is getting that back from the API.

76
00:05:00.024 --> 00:05:00.766
> > 布莱恩: 这很棒，对吧 ?
&gt;&gt; Brian: Which is great, right?

77
00:05:00.766 --> 00:05:04.442
现在我们从 API 中获取所有这些信息，所以现在我们实际上可以
Now we're getting all this information
back from the API, so now we can actually

78
00:05:04.442 --> 00:05:07.706
它们都是各种不同种类的狗品种
setBreeds to be all of these various
different kinds of breeds of dogs.

79
00:05:10.579 --> 00:05:16.408
>> 布莱恩: 我们要做的不是使用效果，而是替换这个
&gt;&gt; Brian: So what we're gonna do instead
of useEffect, we'll just replace this and

80
00:05:16.408 --> 00:05:23.127
说> > 布莱恩: 我们想做的第一件事是
say,
&gt;&gt; Brian: The first thing we wanna do is,

81
00:05:23.127 --> 00:05:29.536
每当此运行通过我们要更新的品种时，都将为空数组。
whenever this run through we want to
update breeds, to be empty array.

82
00:05:29.536 --> 00:05:32.816
因为如果我们要申请新的品种并且已经有了新的品种
Because if we're requesting new breeds and
there's already breeds in that,

83
00:05:32.816 --> 00:05:34.115
那我们就想把他们清理出来
then we want to clear them out.

84
00:05:34.115 --> 00:05:35.689
我们要更新这个品种
We're gonna update the breed.

85
00:05:37.439 --> 00:05:39.425
>> Brian: 要成为空字符串。
&gt;&gt; Brian: To be an empty string.

86
00:05:39.425 --> 00:05:44.300
当我们改变品种的时候它就会开始运转
This useEffect, it's gonna get run
whenever we're changing sets of breeds,

87
00:05:44.300 --> 00:05:44.817
对吧 ?
right?

88
00:05:44.817 --> 00:05:48.225
所以如果我从猫到狗，我需要得到一套新的品种，对吗 ?
So if I go from like cats to dog,
I need to get a new set of breeds, right?

89
00:05:48.225 --> 00:05:51.057
所以我要做的第一件事就是清除任何品种
So the first thing I'm gonna do is
I'm gonna clear out whatever breeds

90
00:05:51.057 --> 00:05:51.683
都在里面
were in there.

91
00:05:51.683 --> 00:05:55.257
所以如果有胡同和狮子狗的话我要把所有的东西都清理掉
So if there's husky and poodle, I'm
gonna clear all that stuff out of there.

92
00:05:55.257 --> 00:05:59.661
如果我选 Bichon F起立或那样的话我就得
And if I've selected Bichon Frise or
something like that, then I need to

93
00:05:59.661 --> 00:06:04.516
把它设置为空字符串，因为我不能有一个 Bichon F崛起猫。
set that to be empty string, as well,
because I can't have a Bichon Frise cat.

94
00:06:04.516 --> 00:06:08.350
一旦完成了我就会说 pet.detd
So once that's done,
then I'm gonna say, pet.breeds,

95
00:06:08.350 --> 00:06:12.576
这就是从 API中检索到的功能
which is that function that's
gonna retrieve that from the API.

96
00:06:12.576 --> 00:06:16.420
我要去分析任何动物的情况
I'm gonna parse in whatever
animal is right there, so

97
00:06:16.420 --> 00:06:19.831
动物 >> Brian: And
animal
&gt;&gt; Brian: And

98
00:06:19.831 --> 00:06:25.497
然后我就会说， >> 布莱恩:
then I'm gonna say .then,
&gt;&gt; Brian: And

99
00:06:25.497 --> 00:06:30.399
这会让我们从他们的 API 中回来
that's gonna give us something
back from their API, and

100
00:06:30.399 --> 00:06:35.005
我知道这件物品里面会有品种
I know inside of that object
it's gonna have breeds.

101
00:06:38.466 --> 00:06:39.194
> > 布莱恩: 好吗 ?
&gt;&gt; Brian: Okay?

102
00:06:42.312 --> 00:06:45.762
> > 布莱恩: 所以我们正在组织这个品种的卡兹我知道
&gt;&gt; Brian: So we're just structuring out
this breed cuz I know that's gonna come

103
00:06:45.762 --> 00:06:46.704
从 API 返回。
back from the API.

104
00:06:46.704 --> 00:06:50.108
然后我会说如果你看看这些物体
And then I'm gonna say,
if you look at these objects,

105
00:06:50.108 --> 00:06:54.627
如果我们回到我们的控制台，注意它们是物体，对吧 ?
if we go back here to our console,
notice that they are objects, right?

106
00:06:54.627 --> 00:06:59.274
所以叫福克斯 - 泰里耶和其他的东西对吧
So name, Fox Terrier, links,
something else, right?

107
00:06:59.274 --> 00:07:00.338
我们只是想知道名字
We actually just want the names.

108
00:07:00.338 --> 00:07:03.062
我们想把所有链接都扔掉，我们只需要名字。
We want to throw away all those links,
we just want the names.

109
00:07:03.062 --> 00:07:06.786
因此，我们有一个对象列表，我们想将这些对象转换为字符串列表。
So we have a list of objects that we
wanna transform into a list of strings.

110
00:07:06.786 --> 00:07:08.305
那么我们是如何做到的呢 ?
So how do we do that?

111
00:07:08.305 --> 00:07:09.105
地图。
Map.

112
00:07:11.314 --> 00:07:16.574
布莱恩: 我们要做的是，我们会说 const，
&gt;&gt; Brian: So what we're gonna do is,
we're gonna say const,

113
00:07:16.574 --> 00:07:22.199
breedstrings = breeds.map ，我们将转至
breedstrings = breeds.map,
and we're gonna turn,

114
00:07:24.480 --> 00:07:28.499
>> Brian: 名称。
&gt;&gt; Brian: Name into name.

115
00:07:30.288 --> 00:07:35.795
> > 布莱恩: 在这里，我们会说， setBreeds 是 breedStrings。
&gt;&gt; Brian: And then here, we're gonna
say setBreeds to be breedStrings.

116
00:07:42.932 --> 00:07:45.278
> > 布莱恩: 怎么了 ?
&gt;&gt; Brian: So what's going on with this?

117
00:07:45.278 --> 00:07:46.702
我们只是把名字叫出来了对吧
Well, we just structured out the name,
right?

118
00:07:46.702 --> 00:07:50.350
所以我们把它从那个里拿掉，然后我们就回去了，对吧 ?
So we grab poodle out of that and then
we would just return to poodle, right?

119
00:07:50.350 --> 00:07:55.060
你也可能得花那么多时间
You also could have had
to spend like breed,

120
00:07:55.060 --> 00:08:00.161
对象，然后是 breedObj.name，对吗 ?
object, and then be breedObj.name, right?

121
00:08:00.161 --> 00:08:02.110
一样的
Same thing.

122
00:08:02.110 --> 00:08:03.519
我觉得这个有点高雅。
I just think this is
a little bit more elegant.

123
00:08:09.983 --> 00:08:12.699
>> 布莱恩: 好的，如果 API存在错误，
&gt;&gt; Brian: Okay, and just in case
there's an error from the API,

124
00:08:12.699 --> 00:08:14.538
你就把 console.error 放在那儿
you just put console.error there.

125
00:08:14.538 --> 00:08:18.824
所以它只会将错误的内容输入到 console.error中。
So it'll just feed whatever
the error is into console.error.

126
00:08:21.463 --> 00:08:28.764
>> Brian: 这将与类似错误 console.error 错误相同，对吗 ?
&gt;&gt; Brian: This would be the same as doing
like error, console.error error, right?

127
00:08:28.764 --> 00:08:29.514
一样的
Same thing.

128
00:08:39.774 --> 00:08:40.533
> > 布莱恩: 好的。
&gt;&gt; Brian: Okay.

129
00:08:46.226 --> 00:08:47.966
> > 布莱恩: 是的，我有一套，
&gt;&gt; Brian: Yeah, I have these as set,

130
00:08:47.966 --> 00:08:51.182
而不是更新 >> Brian: 因此
rather not update
&gt;&gt; Brian: So

131
00:08:51.182 --> 00:08:52.985
改变这个不是那个
change this to be set, not that.
