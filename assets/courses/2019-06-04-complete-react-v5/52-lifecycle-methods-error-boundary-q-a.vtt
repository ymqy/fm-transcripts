WEBVTT

1
00:00:00.360 --> 00:00:05.312
>> 演讲者 1: 您对 componentDidUpdate 的内容进行一些讨论
&gt;&gt; Speaker 1: You talk a little bit
about when the componentDidUpdate

2
00:00:05.312 --> 00:00:07.214
生命周期方法吗 ?
lifecycle methods?

3
00:00:07.214 --> 00:00:12.384
>> Brian Holt: 当然，让我们快速处理所有错误信息。
&gt;&gt; Brian Holt: Sure, let's get rid
of all the error stuff really quick.

4
00:00:12.384 --> 00:00:16.335
在这里， >> Brian Holt:
So here,
&gt;&gt; Brian Holt: Inside of

5
00:00:16.335 --> 00:00:20.989
componentDidUpdate，因此 componentDidUpdate 将在以下情况下被调用 :
componentDidUpdate, so componentDidUpdate
is gonna get called when

6
00:00:20.989 --> 00:00:25.019
道具改变了状态改变了对吧
props change a state change,
that's about it, right?

7
00:00:25.019 --> 00:00:27.047
这与使用效果非常相似，对吧 ?
So it's very much similar to useEffect,
right?

8
00:00:27.047 --> 00:00:29.417
因此， useEffect 会在其依赖关系更新的情况下运行。
So useEffect gets running
whatever its dependencies update.

9
00:00:29.417 --> 00:00:32.799
componentDidUpdate 将每隔一段时间运行一次，
componentDidUpdate is gonna get run
every single time that a proper or

10
00:00:32.799 --> 00:00:34.420
状态变化，对吧 ?
state changes, right?

11
00:00:34.420 --> 00:00:37.829
这就是为什么我说如果这个国家发生了错误
So that's why I say,
if this state.hasError,

12
00:00:37.829 --> 00:00:40.600
好，然后再将它设置为其他内容。
right, then set this to be something else.

13
00:00:41.640 --> 00:00:46.075
现在，我可以这样说，因为只有一个国家。
Now, I could have just said this,
because this only has one piece of state.

14
00:00:46.075 --> 00:00:47.689
但如果这个国家有更多的国家
But what happens later
if this has more state,

15
00:00:47.689 --> 00:00:51.509
你想具体就像这样对吧
you wanna be specific,
like this reacts to this, right?

16
00:00:52.909 --> 00:00:54.060
所以在这件案子里
So in this particular case,

17
00:00:54.060 --> 00:00:57.250
这是对 componentDidCatch 的反应，对吧 ?
this is reacting to componentDidCatch
gets called, right?

18
00:00:57.250 --> 00:01:02.712
或者不，对不起， getDerivedStateFromError，这会被调用，此更新
Or no, sorry, getDerivedStateFromError,
this gets called, this updates

19
00:01:02.712 --> 00:01:08.271
hasError 为 true，然后将在此处调用 componentDidUpdate 。
the hasError to be true, which is then
going to call componentDidUpdate here.

20
00:01:08.271 --> 00:01:08.995
有道理吗
Does that make sense?

21
00:01:08.995 --> 00:01:10.093
>> 扬声器 1: 是，谢谢。
&gt;&gt; Speaker 1: Yes, thank you.

22
00:01:10.093 --> 00:01:12.210
>> Brian Holt: 当然，好的问题。
&gt;&gt; Brian Holt: Of course, good question.

23
00:01:12.210 --> 00:01:17.254
>> 演讲者 3: 您是否可以实际讨论 getDerivedStateFromError?
&gt;&gt; Speaker 3: Could you actually talk
about the getDerivedStateFromError?

24
00:01:17.254 --> 00:01:18.411
那是怎么叫的
How does that get called?

25
00:01:18.411 --> 00:01:22.439
React 如何知道要运行该功能?
How does React know to run that function?

26
00:01:24.469 --> 00:01:26.549
>> Brian Holt: 对不起，这被称为
&gt;&gt; Brian Holt: Sorry, this gets called

27
00:01:27.599 --> 00:01:30.073
只要里面有错误就行了吧
whenever there's an error inside of it,
right?

28
00:01:30.073 --> 00:01:33.780
因为它是静态方法，可以在类上调用，而不是在
And so because it's a static method,
it can call it on the class and not on

29
00:01:33.780 --> 00:01:38.310
这并不是你真正在乎的事情。
the instance, not that that's really a
thing that you really care too much about.

30
00:01:38.310 --> 00:01:40.650
但它会用这个方法
But what it'll do is
it'll call this method,

31
00:01:40.650 --> 00:01:44.831
它会传入， >> 扬声器 3:
it'll pass in,
&gt;&gt; Speaker 3: Is that

32
00:01:44.831 --> 00:01:47.325
因为命名约定要通知它吗
because of the naming convention
that it knows to call it?

33
00:01:47.325 --> 00:01:48.764
> > Brian Holt: 是，我想，我不- >> 演讲者 3: 好的。
&gt;&gt; Brian Holt: Yes, I guess, I don't-
&gt;&gt; Speaker 3: Okay.

34
00:01:48.764 --> 00:01:50.620
>> Brian Holt: 是的，必须这样做。
&gt;&gt; Brian Holt: Yeah, so
it has to be called this.

35
00:01:50.620 --> 00:01:52.189
在这个意义上是一个生命周期的方法，对吧 ?
This is a lifecycle method in that sense,
right?

36
00:01:52.189 --> 00:01:52.887
>> 演讲者 3: 好的。
&gt;&gt; Speaker 3: Okay.

37
00:01:52.887 --> 00:01:54.840
> > Brian Holt: 就像我们一样，
&gt;&gt; Brian Holt: Just like we had,
what was the-

38
00:01:54.840 --> 00:01:56.719
>> 扬声器 3: 在轮播上 ?
&gt;&gt; Speaker 3: On carousel?

39
00:01:56.719 --> 00:02:00.727
>> Brian Holt: 对，在 carousel 上，也有 getDerivedStateFromProps。
&gt;&gt; Brian Holt: Yeah, on the carousel
one as well, getDerivedStateFromProps.

40
00:02:03.405 --> 00:02:05.849
>> Brian Holt: 因此，它会在此处传递错误。
&gt;&gt; Brian Holt: So yeah,
it'll pass in the error here.

41
00:02:05.849 --> 00:02:10.659
对我们来说我们知道现在有个错误所以我们要更新那个状态
For us, we just know there's an error now,
so we're gonna update that state and

42
00:02:10.659 --> 00:02:13.800
那么它就会重新呈现这个新状态
then it's going to re-render
with that new state.

43
00:02:13.800 --> 00:02:15.945
有道理吗
Does that make sense?

44
00:02:15.945 --> 00:02:16.798
太酷了
Cool.

45
00:02:19.510 --> 00:02:23.724
>> 扬声器 4: 如果生产中存在未处理的错误，
&gt;&gt; Speaker 4: If there's an error
in production that's not handled,

46
00:02:23.724 --> 00:02:25.224
React 执行什么操作 ?
what does React do?

47
00:02:25.224 --> 00:02:26.514
>> Brian Holt: 未安装。
&gt;&gt; Brian Holt: It unmounts.

48
00:02:26.514 --> 00:02:27.054
>> 演讲者 4: 对。 > > Brian Holt: 是的，
&gt;&gt; Speaker 4: Right.
&gt;&gt; Brian Holt: Yeah,

49
00:02:27.054 --> 00:02:28.930
只是把整个事情都从 DOM中取出来
it just takes the entire
thing out of the DOM.

50
00:02:30.259 --> 00:02:33.265
所以很多公司都有一个顶级的错误处理程序，
So a lot of companies will just have
one top level error handler, and

51
00:02:33.265 --> 00:02:34.758
来处理整个应用
that'll handle the entire app.

52
00:02:34.758 --> 00:02:40.349
但是，您还可以有多个级别的可能，您的页脚有很多错误。
But you can also have multiple levels of
maybe your footer has a lot of errors.

53
00:02:40.349 --> 00:02:41.939
也许你不该有那页脚
Maybe you shouldn't have that footer.

54
00:02:41.939 --> 00:02:42.800
但也许是这样
But maybe it does, right,

55
00:02:42.800 --> 00:02:44.399
但你可以专门为你的脚做的对吧
but then you could have one
specifically for your footer, right.

56
00:02:46.490 --> 00:02:47.530
是吗马克
Yeah, Mark?

57
00:02:47.530 --> 00:02:51.024
>> 标记: 是否可以将边界与功能挂钩配合使用 ?
&gt;&gt; Mark: Can error boundaries
be used with functional hooks?

58
00:02:51.024 --> 00:02:54.364
>> Brian Holt: 否，因为 getDerivedStatesFromErrors，
&gt;&gt; Brian Holt: No,
because getDerivedStatesFromErrors,

59
00:02:54.364 --> 00:02:58.329
有一个可以捕捉到这个物质的末端组件。
there is end component to catch for
that matter.

60
00:02:58.329 --> 00:03:00.819
这与挂钩没有同等的功能。
There is no equivalent for
these with hooks.

61
00:03:00.819 --> 00:03:03.039
所以这个你实际上要用分类组件。
So this one you actually
have to use class component.

62
00:03:03.039 --> 00:03:03.707
>> 标记: 当前?
&gt;&gt; Mark: Currently?

63
00:03:03.707 --> 00:03:07.891
>> Brian Holt: 目前没有计划来解决该问题，但
&gt;&gt; Brian Holt: Currently,
there's no plans to fix that, but

64
00:03:07.891 --> 00:03:12.370
这不是说不会有计划的
that isn't to say that,
there won't be plans.

65
00:03:12.370 --> 00:03:16.185
但是，目前还没有办法用钩子。
But yeah, currently there's
no way to do it with hooks.

66
00:03:16.185 --> 00:03:20.266
>> Mark: 那么您可以使用它来合并使用挂钩的组件吗 ?
&gt;&gt; Mark: So could you use it to wrap
a component that's using hooks?

67
00:03:20.266 --> 00:03:24.895
>> Brian Holt: 对，是的，因为this.propss.子代可能是什么，
&gt;&gt; Brian Holt: Right, yeah, because
this.props.children can be anything,

68
00:03:24.895 --> 00:03:25.479
对吧 ?
right?

69
00:03:25.479 --> 00:03:28.199
它对儿童所做的任何事情都没有任何意见。
It has no opinion on whatever
its children are gonna be doing.
