WEBVTT

1
00:00:00.460 --> 00:00:03.100
> > Brian: 这还会在 SearchParams中。
&gt;&gt; Brian: This is still
gonna be in SearchParams.

2
00:00:03.100 --> 00:00:10.016
所以，如果我们回到我们的网站上，就向你展示一下 localhost1234。
So if we go back to our website here,
just to show you, localhost1234.

3
00:00:12.846 --> 00:00:15.390
>> Brian: 我们需要能够搜索的所有搜索构面
&gt;&gt; Brian: We have all the search facets
that we need to be able to search for

4
00:00:15.390 --> 00:00:18.190
宠物，但是我们还不是用这个来打 API 的，对吧 ?
pets, but we're not actually using
that to hit the API yet, right?

5
00:00:19.730 --> 00:00:24.320
所以我们想做的就是增加我们可以去做的能力
So what we wanna do is we wanna
add the ability that we can go and

6
00:00:24.320 --> 00:00:28.199
点击 API 然后把宠物送回来让我们展示给他们
hit the API and get pets back so
we can display them.

7
00:00:30.219 --> 00:00:34.503
所以我们要在这里加添一个 useState
So we're gonna add another useState here,

8
00:00:34.503 --> 00:00:40.177
我们会说 [ 宠物和宠物]
we're gonna say contst [pets,
setPets] = useState,

9
00:00:40.177 --> 00:00:44.710
这会是个空虚的数组好吗
and it's gonna be an empty array,
all right?

10
00:00:44.710 --> 00:00:47.837
因为当你首次提出来自 API 的东西时，那里就没有宠物了。
Because when you first request things from
the API, there's gonna be no pets there.

11
00:00:51.051 --> 00:00:54.871
> > 布莱恩: 好的，在这里
&gt;&gt; Brian: Okay, here above the useEffect,

12
00:00:54.871 --> 00:00:59.350
我们要做一个异步功能
we're gonna make an async function, so

13
00:00:59.350 --> 00:01:02.784
async 函数 requestPets。
async function requestPets.

14
00:01:07.429 --> 00:01:10.954
> > 布莱恩: 我们要做的是说， " 动物 "，
&gt;&gt; Brian: What we're gonna do is
we're gonna say, const { animals },

15
00:01:10.954 --> 00:01:13.359
我们要去重组它对吧
which we're gonna destructure, right?

16
00:01:13.359 --> 00:01:20.927
我们知道它会被称为动物，我们会说，等待动物。
Cuz we know it's gonna be called animals,
and we're gonna say, = await pet.animals.

17
00:01:25.058 --> 00:01:29.406
布莱恩: 我们会把地点，品种和类型
&gt;&gt; Brian: And we're gonna send
the location, the breed, and the type,

18
00:01:29.406 --> 00:01:31.468
肯定会是动物
which is gonna be the animal.

19
00:01:35.634 --> 00:01:38.832
> > 布莱恩: 好的，有几件事要在这里解包，
&gt;&gt; Brian: All right, so
a couple of things to unpack here,

20
00:01:38.832 --> 00:01:43.069
这可能是您首次使用异步函数。
this may be your first time
using an async function.

21
00:01:43.069 --> 00:01:47.710
所以异步函数是保证返回承诺的函数，是吗 ?
So an async function is a function that
is guaranteed to return a promise, right?

22
00:01:47.710 --> 00:01:51.469
所以任何一个异步函数总是返回一个承诺。
So anything that's an async
function always returns a promise.

23
00:01:51.469 --> 00:01:53.390
虽然我什么都没做
Even though I'm not doing anything here,

24
00:01:53.390 --> 00:01:58.359
这将返回一个在此函数完成时将解析的承诺。
this returns a promise that will resolve
whenever this function completes.

25
00:01:58.359 --> 00:02:01.040
现在我只是在忽略这一点，但这就是重点。
Now I'm just ignoring it,
but that's beside the point.

26
00:02:02.069 --> 00:02:06.590
这就是异步函数的作用，但是你可以决定的超级大国
So that's what an async function does,
but the superpower that you can decide of

27
00:02:06.590 --> 00:02:09.400
异步函数是我获取此等待关键字。
async functions is that I
get this await keyword.

28
00:02:09.400 --> 00:02:13.379
所以动物会有自己的承诺对吗
So pet.animals returns a promise itself,
right?

29
00:02:13.379 --> 00:02:18.439
我只是说在这里等这个功能完成之前
And I'm just saying, hey, wait here in
this function until this completes and

30
00:02:18.439 --> 00:02:20.189
然后把数据给我
then give me back the data.

31
00:02:20.189 --> 00:02:25.090
所以我可以说点动物然后在里面做所有东西
So I could say pet.animals.then and
then do all that stuff inside of there,

32
00:02:25.090 --> 00:02:27.810
但我只是在说等这个完成然后把数据还给我
but here I'm just saying wait for
this to finish and give me back the data.

33
00:02:29.050 --> 00:02:33.629
所以它让这个异步代码在这里，等等，在这里，等等，
So it makes this asynchronous code of
go to here, wait, go to here, wait,

34
00:02:33.629 --> 00:02:35.610
到这来，等等，然后做完，对吧 ?
go to here, wait, and then finish, right?

35
00:02:37.129 --> 00:02:41.780
所以我是一个异步等待的大粉丝，这只会让这个代码看起来真的很棒。
So I'm a big fan of async await, this just
makes this code look really, really nice.

36
00:02:41.780 --> 00:02:46.819
所以现在我有动物了我保证动物会被
So now I have animals, I'm guaranteed
that animals will be done by

37
00:02:46.819 --> 00:02:51.969
我到这儿的时候我就能跟动物说几个 setPets
the time I get down here and
I can just say setPets with the animals.

38
00:02:53.199 --> 00:02:55.360
或者如果它没有来自 API的任何内容
Or if it comes back with
nothing from the API,

39
00:02:55.360 --> 00:02:58.500
只要将它设置为空的数组，好吗 ?
just set it to continue to be
an empty array, all right?

40
00:02:58.500 --> 00:03:02.530
如果我请求什么也没有动物回来把它设置为空的阵列
If I request something and no animals
come back, set it to be an empty array,

41
00:03:02.530 --> 00:03:06.150
这就是这个或运营商要为我们做的
and that's what this or
operator is gonna do for us.

42
00:03:06.150 --> 00:03:08.045
无论在动物或动物中
Either it's gonna be
whatever is in animals or

43
00:03:08.045 --> 00:03:09.413
它将会是一个空的阵列
it's going to be an empty array.

44
00:03:15.122 --> 00:03:15.733
> > 布莱恩: 很酷，对吧 ?
&gt;&gt; Brian: Pretty cool, right?

45
00:03:15.733 --> 00:03:17.370
我觉得挺酷的
I think it's pretty cool.

46
00:03:20.741 --> 00:03:23.536
> > 布莱恩: 现在我可以做的是，我可以去做表格。
&gt;&gt; Brian: So now what I can do
is I can go down to the form.

47
00:03:26.134 --> 00:03:31.312
>> 布莱恩: 所以我们放进来的这个表格，可以说不提，
&gt;&gt; Brian: So this form that we put
in here, and I can say unsubmit =,

48
00:03:31.312 --> 00:03:36.308
我要在这里做两件事情
and I need to do two things
here inside of this function.

49
00:03:42.522 --> 00:03:46.612
>> 布莱恩: 第一件事是我不希望它提交表格，对，
&gt;&gt; Brian: The first thing is I don't want
it to actually submit a form, right,

50
00:03:46.612 --> 00:03:47.750
就像 HTML 一样
like an HTML form.

51
00:03:47.750 --> 00:03:50.163
所以我想说防止违约
So I'm gonna say e.preventDefault,

52
00:03:50.163 --> 00:03:55.000
你们可能在你的 JavaScript 生涯中有一点做过
which you all have probably done at one
point in your JavaScript career or not.

53
00:03:56.360 --> 00:03:59.402
如果不是，上帝保佑你，你错过了一个非常黑暗的时刻。
If not, then God bless you,
you've missed a really dark time.

54
00:03:59.402 --> 00:04:03.903
[ LAUGH] 开个玩笑， >> 布莱恩: 但是
[LAUGH] Just kidding,
&gt;&gt; Brian: But

55
00:04:03.903 --> 00:04:07.150
这会阻止它提交 HTML 发布表单。
this will prevent it from
submitting a HTML post form.

56
00:04:08.659 --> 00:04:10.413
然后我们要做的就是要说要求者
And then all we're gonna do here
is we're gonna say requestPets.

57
00:04:18.062 --> 00:04:22.406
>> 布莱恩: 如果我们现在就把它转过去，现在，默认情况下，
&gt;&gt; Brian: So if we try to transpile
this right now, right now, by default,

58
00:04:22.406 --> 00:04:26.120
帕塞尔正在为 Internet Explorer 11做这个工作。
Parcel is making this work for
Internet Explorer 11.

59
00:04:26.120 --> 00:04:30.757
作为微软的代表我很抱歉
As a representative of Microsoft,
I'm sorry

60
00:04:30.757 --> 00:04:35.000
我们不需要那样的对吧
[LAUGH]
we don't need that, right?

61
00:04:35.000 --> 00:04:38.519
这只是一个演示应用程序，您和我正在为取乐而工作，因此
This is just a demo application that
you and I are working on for fun, so

62
00:04:38.519 --> 00:04:40.319
我们就能瞄准现代的浏览器，对吧 ?
we can just target modern browsers, right?

63
00:04:40.319 --> 00:04:43.369
我们可以确定最后两个版本的 Firefox 和 Chrome ，并将其称为 " 好" 。
We're okay to target the last two versions
of Firefox and Chrome and call it good.

64
00:04:44.600 --> 00:04:48.240
很明显你得迎合你的观众对吧
Obviously, you need to cater
this to your audience, right?

65
00:04:48.240 --> 00:04:50.860
所以请确保您正在查看您的分析以了解
So make sure you're looking at
your analytics to figure out

66
00:04:51.980 --> 00:04:56.290
这个应该是 99% 的用户或者类似的。
this should work for 99% of my users or
something like that.

67
00:04:56.290 --> 00:05:01.048
但对我们来说我们只能说让它为最新的浏览器工作
But for us, we're just gonna say make
it work for the latest browsers and

68
00:05:01.048 --> 00:05:01.920
就这样了
that's it.

69
00:05:01.920 --> 00:05:05.620
所以在我的笔记里我有个很好的名单
So actually here inside of my notes,
I have a really good list for

70
00:05:05.620 --> 00:05:09.293
您可以点击所有最新的浏览器。
you to hit all the latest browsers.

71
00:05:09.293 --> 00:05:14.250
所以请你把它复制到那里，或者你可以把它输入出去，
So go ahead and just copy that right
there, or you can type it out,

72
00:05:14.250 --> 00:05:15.526
但这很多
but it's a lot.

73
00:05:17.413 --> 00:05:22.552
>> 布莱恩: 再一次，这就是处理 Async的问题。
&gt;&gt; Brian: So again,
this is in the Handling Async.

74
00:05:22.552 --> 00:05:26.206
所以就在这里处理好第九号
So Handling Async right there,
number nine, down here,

75
00:05:26.206 --> 00:05:28.154
这个浏览器的清单
this browser's lists thing.

76
00:05:31.829 --> 00:05:36.639
> > 布莱恩: 好的，然后我把这个放在我的包里。
&gt;&gt; Brian: Okay, and then I'm gonna
put this inside of my package.json.

77
00:05:36.639 --> 00:05:39.201
你可以把它放在任何地方，但是在这里，依赖关系是好的。
You can put it really anywhere, but
here, underneath dependencies is good.

78
00:05:42.334 --> 00:05:46.750
>> 布莱恩: 这都是各种各样的
&gt;&gt; Brian: And so all this is is this
is an array of various kinds of

79
00:05:46.750 --> 00:05:50.284
我想要的浏览器巴贝尔和 PostCSS
browsers that I want, Babel and PostCSS,

80
00:05:50.284 --> 00:05:55.192
都是在包裹在包裹里的幕后主使
which are both running behind
the scenes inside of Parcel,

81
00:05:55.192 --> 00:05:58.850
编译我的代码以用于这些浏览器。
compile my code to work for
these browsers.

82
00:06:00.350 --> 00:06:02.045
帕塞尔已经知道来看看这很酷
And Parcel already knows to look here,
which is cool.

83
00:06:05.218 --> 00:06:09.029
>> Brian: 因此，让我们看看最后两个 Chrome 版本， Chrome， Android和 Firefox。
&gt;&gt; Brian: So let's look at the last two
Chrome versions, Chrome, Android, Firefox.

84
00:06:09.029 --> 00:06:12.209
这些都是 " 引用 " ， " 无引号 " ， " 活动" 和 " 常绿浏览器" 。
These are all of the, quote-unquote,
alive, evergreen browsers.

85
00:06:13.420 --> 00:06:16.180
现在我之所以想这样做是因为
Now, the reason I wanted to
do this is because only very,

86
00:06:16.180 --> 00:06:19.300
非常现代的浏览器支持异步
very modern browsers support async await.

87
00:06:19.300 --> 00:06:22.819
否则它会把它变成一个叫做再生器的东西
Otherwise, it's going to transform this
into something called a regenerator,

88
00:06:22.819 --> 00:06:25.430
我们根本不想和你交易相信我
which we just don't even wanna deal with,
believe me.
