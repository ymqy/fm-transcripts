WEBVTT

1
00:00:00.300 --> 00:00:04.876
>> 演讲者 1: 为什么要培养不是依赖关系 ?
&gt;&gt; Speaker 1: So
why is breeds not a dependency?

2
00:00:04.876 --> 00:00:06.969
> > Brian Holt: 所以，就像这里的品种一样。
&gt;&gt; Brian Holt: So breeds,
as in this breeds right here.

3
00:00:09.210 --> 00:00:10.272
>> Brian Holt: 不是依赖关系。
&gt;&gt; Brian Holt: Is not a dependency.

4
00:00:10.272 --> 00:00:15.121
我想这里的名字有点不正确
I guess this is kind of misnamed
right here, breeds right there.

5
00:00:15.121 --> 00:00:18.931
我们可以称这类品种如 API 品种或类似的
We could call this breeds,
like API breeds or something like that

6
00:00:22.097 --> 00:00:24.609
>> Brian Holt: 我们开始吧。
&gt;&gt; Brian Holt: There we go.

7
00:00:24.609 --> 00:00:27.594
这可能是你之前很困惑的
So that could've been
confusing to you before.

8
00:00:27.594 --> 00:00:31.332
这不依赖于品种因为这些品种
It doesn't depend on
breeds because this breeds

9
00:00:31.332 --> 00:00:35.811
在此处未使用此 useEffect 的任何位置。
is not used anywhere inside
of this useEffect right here.

10
00:00:35.811 --> 00:00:40.405
从这个效应的任何地方都没有读出来，对吧 ?
It's not read from anywhere
inside of this effect, right?

11
00:00:40.405 --> 00:00:41.823
现在设定品种是吧
Now set breeds is, right?

12
00:00:41.823 --> 00:00:44.232
所以这才是这里的原因
So that's why this is in here.

13
00:00:44.232 --> 00:00:49.911
但 API我只想让你记住这些品种和品种是分开的
But API, I just want you to keep in mind
this breeds and that breeds are separate.

14
00:00:49.911 --> 00:00:53.064
他们不一样对吧
They're different things, right?

15
00:00:53.064 --> 00:00:56.527
因此，它从未在使用中使用，因此它不依赖于它。
So this is never used inside of use effect
so therefore it's not dependent on.

16
00:00:57.909 --> 00:01:00.095
>> Brian Holt: 是吗 ?
&gt;&gt; Brian Holt: Yeah?

17
00:01:00.095 --> 00:01:04.661
>> 扬声器 1: 组件中的任何问题是否都不构成这些生命周期
&gt;&gt; Speaker 1: Was there any problem
with component did not amount those life

18
00:01:04.661 --> 00:01:05.902
循环方法?
cycle methods?

19
00:01:05.902 --> 00:01:07.823
为什么会创建挂钩 ?
Why did hooks get created?

20
00:01:12.081 --> 00:01:13.867
> > Brian Holt: 好的。
&gt;&gt; Brian Holt: Well, okay.

21
00:01:13.867 --> 00:01:16.902
>> 演讲者 1: [COUGH] >> Brian Holt: 相信挂钩
&gt;&gt; Speaker 1: [COUGH]
&gt;&gt; Brian Holt: There's a belief that hooks

22
00:01:16.902 --> 00:01:21.472
比要了解组件的生命周期更简单
are simpler than having to learn
the life cycle of components and

23
00:01:21.472 --> 00:01:26.311
要理解像上下文之类的事情
having to understand like context and
some other things like that.

24
00:01:26.311 --> 00:01:30.319
你可以注意到我的语言不是很拘谨
And you can notice I'm being
non-committal with my language.

25
00:01:30.319 --> 00:01:34.811
因为我对这些 API 的效果有多大的怀疑
It's because I have my doubts about which
of these APIs is gonna be for the better,

26
00:01:34.811 --> 00:01:39.383
也许我们会在稍后谈论分类组件时讨论这个问题。
and like maybe we'll address that a bit
later when we talk about class components.

27
00:01:39.383 --> 00:01:41.000
可能是这样吧
That's probably the better so

28
00:01:41.000 --> 00:01:43.682
每个人都能站在同一网页上
that everyone can kind of
get on the same page here.

29
00:01:43.682 --> 00:01:48.299
但简单的答案是人们认为这很容易，而且
But the short answer to that is
people think that this is easier, and

30
00:01:48.299 --> 00:01:53.646
那我就教你们俩，你可以是你想用的法官。
then I'll teach you both, and you can be
the judge of which one you want to use.

31
00:01:53.646 --> 00:01:57.051
但是，没有，阶级成分也没有固有的问题。
But no, there's no there's no inherent
problem with class components.

32
00:01:58.962 --> 00:01:59.780
>> Brian Holt: 没有限制。
&gt;&gt; Brian Holt: There's no limitations.

33
00:01:59.780 --> 00:02:03.155
实际上，类组件可以做更多的挂钩。
Actually, class components
can do more than hooks can.

34
00:02:03.155 --> 00:02:05.900
>> 演讲者 1: 当前 >> Brian Holt: 当前。
&gt;&gt; Speaker 1: Currently
&gt;&gt; Brian Holt: Currently.

35
00:02:05.900 --> 00:02:11.028
他们有计划弥补缺口但现在
They have plans to fix the gaps,
but as of right now

36
00:02:11.028 --> 00:02:16.173
还有一些钩子不可能做到的
there's still some things
that hooks can't do.

37
00:02:16.173 --> 00:02:18.354
所以我们应该把它叫做我们在这里做的事情。
So one more thing we should
call it that we did here.

38
00:02:18.354 --> 00:02:22.485
所以如果我选择像美国的爱斯基摩犬然后切换到猫
So if I go and select like American Eskimo
dog and then switch to Cat,

39
00:02:22.485 --> 00:02:27.127
很快就会把它转换成默认选项，对吧 ?
notice it very quickly switches that
back to be the default option, right?

40
00:02:27.127 --> 00:02:32.834
这是我们在这里用空字符串做的事情。
That's something that we did
here with this empty string.

41
00:02:36.064 --> 00:02:38.979
>> Brian Holt: 通常这只是一种理解，但我只想说
&gt;&gt; Brian Holt: Normally it's just kind
of understood, but I just wanna call out

42
00:02:38.979 --> 00:02:42.265
一旦我把它调为空字符串就因为
the fact that as soon as I call setBreed
here to be empty string, because of

43
00:02:42.265 --> 00:02:45.673
这种反应的方式和我们在思考的方式
the way of the reactive stretch and
the way that we're thinking about this.

44
00:02:45.673 --> 00:02:51.146
这一情况一旦确定，这一动物就会被下降到这里。
As soon as this is set, this is synced
to this animal drop down down here.

45
00:02:51.146 --> 00:02:55.156
或者说是在我把它送到空串的情况下
Or rather the breed drop down, that as
soon as I send that to empty string,

46
00:02:55.156 --> 00:02:57.953
它马上就会在这里繁殖对吧
it immediately updates breed right here,
right?

47
00:02:57.953 --> 00:03:01.528
所以这些是连接在一起的，我们一起克隆在一起。
So those are connected together,
we've clung that together.

48
00:03:01.528 --> 00:03:05.752
所以现在真的很酷只要我们确定我们是在
So now it's really cool as long as we're
making sure that we're calling setBreed in

49
00:03:05.752 --> 00:03:09.438
在适当的地方，它将这种效应从所有地方
the right places, that it cascades that
effect down to all the places that

50
00:03:09.438 --> 00:03:11.706
取决于这些信息对吧
are depending on that information, right?

51
00:03:11.706 --> 00:03:16.393
那就是钩子之类的东西只要你在玩
So that's the power of hooks and stuff
like that is as long as you're playing by

52
00:03:16.393 --> 00:03:19.812
React 规则，您可以免费获取此传播状态。
the React rules you get this
propagation state for free.

53
00:03:19.812 --> 00:03:22.835
所以我想告诉你
So I wanna tell you that useAffect and

54
00:03:22.835 --> 00:03:27.721
useState 是您要使用的两个主挂钩。
useState are the two primary
hooks that you're gonna use.

55
00:03:27.721 --> 00:03:33.311
这将覆盖 90 % 的用例。
That's gonna cover about
90% of your use cases.

56
00:03:33.311 --> 00:03:38.115
所以 useState 很明显，最常见的使用效果也是相当普遍的，
So useState obviously the most common
use effect also being quite common, and

57
00:03:38.115 --> 00:03:40.735
也许就像 useRef 偶尔
then maybe like useRef occasionally, and

58
00:03:40.735 --> 00:03:45.131
还有一长尾的钩子你可能永远不知道
then there's a long tail of other
hooks that you may never have to know.

59
00:03:45.131 --> 00:03:52.296
所以我们肯定还是会谈他们的，我们会进入一个中间的反应。
So we'll definitely still talk about them,
we'll get into an intermediate React.

60
00:03:52.296 --> 00:03:55.432
我想我们还是会在这里谈的，但那就好了
I think we'll still talk about Ref
in here, but that'll be it for

61
00:03:55.432 --> 00:03:58.289
React 主机的 React 生命周期以及类似的内容。
the React life cycle of the React host and
things like that.
