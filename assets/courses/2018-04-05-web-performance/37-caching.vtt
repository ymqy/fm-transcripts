WEBVTT

1
00:00:00.160 --> 00:00:02.290
&gt；&gt；steve kinney：所以另一个问题，或者另一个解决方案，
&gt;&gt; Steve Kinney: So the other problem,
or the other solution,

2
00:00:02.290 --> 00:00:06.980
这就是我们需要发送一些东西的时候，是的，让浏览器去获取它。
to this is when we need to send something,
yes, have the browser go get it.

3
00:00:06.980 --> 00:00:10.529
但是如果我们可以让浏览器不问我们东西，并且
But if we can have the browser
not ask us for stuff, and

4
00:00:10.529 --> 00:00:14.130
只是利用它已经有的东西，那会更快，对吧？
just use the stuff it already has,
that's gonna be faster, right?

5
00:00:14.130 --> 00:00:16.859
因此，实现这一点的一种方法是利用HTTP缓存。
And so a way to do that is
to make use of HTTP caching.

6
00:00:18.280 --> 00:00:21.998
所以想象一下，这一年是1997年。
So imagine for
a second that the year is 1997.

7
00:00:23.699 --> 00:00:26.699
那年我们收到了很多很棒的礼物。
We received a lot of
great gifts that year.

8
00:00:26.699 --> 00:00:31.280
我们收到了“泡芙爸爸”和“家庭无路”。
We received Puff Daddy and
the Family's No Way Out.

9
00:00:31.280 --> 00:00:35.250
我们还接收到HTTP/1.1中的Cache-Control响应头。
We also received Cache-Control
response headers in HTTP/1.1.

10
00:00:35.250 --> 00:00:38.429
可以说，其中一个比另一个产生了更大的影响。
Arguably one of those had more
of an impact than the other.

11
00:00:38.429 --> 00:00:42.020
我将把它作为练习留给观众去找出哪一个更多
I'll leave it as an exercise to the viewer
to figure out which one of those was more

12
00:00:42.020 --> 00:00:44.259
对我的童年发展很重要。
important in my childhood development.

13
00:00:44.259 --> 00:00:48.700
但是，是的，我们有这些Cache-Control响应头，我们放进去了。
But yeah, we've got these Cache-Control
response headers, that we put.

14
00:00:48.700 --> 00:00:50.899
你要求的东西，我们发给你了，
You asked for something,
we sent it to you,

15
00:00:50.899 --> 00:00:55.259
我们有一些标题，可以为您提供一些有关它的额外信息。
we have some headers that give you a
little bit of extra information about it.

16
00:00:55.259 --> 00:00:57.200
缓存并不能解决所有问题。
And caching is not gonna do everything.

17
00:00:57.200 --> 00:01:00.640
你发送一个POST或PUT，这些就像，嘿，在服务器上改变这个数据。
You send a post or a put, those are like,
hey, change this data on the server.

18
00:01:00.640 --> 00:01:01.929
我们不缓存那些。
We don't cache those.

19
00:01:01.929 --> 00:01:03.119
但是，嘿，你想要这个资源，
But hey, you want this resource,

20
00:01:03.119 --> 00:01:06.359
你想要这只猫GIF，你想要这个JavaScript文件？
you want this cat GIF,
you want this JavaScript file?

21
00:01:06.359 --> 00:01:07.609
CSS文件？
The CSS file?

22
00:01:07.609 --> 00:01:10.150
就像，如果你已经有了，就用你现有的，不要问我
Like, if you already have it just use
the one you have, don't ask me for

23
00:01:10.150 --> 00:01:10.920
又一个。
another one.

24
00:01:10.920 --> 00:01:13.159
因为我要把这东西带到地球的另一端。
Cuz I gotta get the thing
half way around the world.

25
00:01:13.159 --> 00:01:16.659
这根管子只有这么大，它在漏水，它是有问题的。
This pipe is only so big,
it's leaking, it's problematic.

26
00:01:16.659 --> 00:01:20.859
因此，可以对这些HTTP方法进行缓存、GET、Options和Head。
So these HTTP methods can be cached,
Get, Options, and Head.

27
00:01:20.859 --> 00:01:23.019
一堆其他的改变服务器上的东西，
A bunch of other ones that
change stuff on the server,

28
00:01:23.019 --> 00:01:26.250
你不会想要缓存它们，对吧，就像你不想让它们更新一样。
you wouldn't want them cached, right,
like you wouldn't want them updating.

29
00:01:26.250 --> 00:01:30.670
像缓存这样的东西，你想让它去服务器，所以有点道理。
Something like cache, you want that to
go to the server, so kinda makes sense.

30
00:01:30.670 --> 00:01:33.960
还有一堆不同的设置。
And there's a bunch of
difference settings.

31
00:01:33.960 --> 00:01:35.740
我们不会谈论太多不可变的，
We're not gonna talk too
much about immutable,

32
00:01:35.740 --> 00:01:39.240
因为我相信现在只有Firefox支持它，
because I believe right now
it's only supported in Firefox,

33
00:01:39.240 --> 00:01:43.159
不是其余的浏览器，但我们将讨论前四个浏览器。
not the rest of the browsers, but
we will talk about these first four.

34
00:01:44.909 --> 00:01:47.650
因此，想象一下使用浏览器缓存时，我们所处的环境之一
So imagine with browser
cache that we're in one of

35
00:01:47.650 --> 00:01:49.819
任意给定点的三个条件。
three conditions at any given point.

36
00:01:49.819 --> 00:01:51.780
我们没有把它放在缓存里，这很容易。
We don't have it in cache, that's easy.

37
00:01:51.780 --> 00:01:54.289
如果缓存中没有它，请转到服务器并
If you don't have it in cache,
go to the server and

38
00:01:54.289 --> 00:01:56.575
明白了，对，这就说得通了。
get it, right, that makes sense.

39
00:01:58.129 --> 00:02:02.829
陈旧的，这是检查，但让我们看看你是否有。
Stale, which is check but
let's see if you have.

40
00:02:02.829 --> 00:02:05.549
你在缓存中有一些东西，但它已经过期了。
You have something in cache but
it's out of date.

41
00:02:05.549 --> 00:02:06.650
对，你需要新的。
Right, you need the new one.

42
00:02:06.650 --> 00:02:08.919
并且有效，也就是你在缓存中有这个。
And valid which is you have this in cache.

43
00:02:08.919 --> 00:02:10.020
这是正确的。
It's the right one.

44
00:02:10.020 --> 00:02:11.199
别跟电视网说话。
Don't talk to the network.

45
00:02:11.199 --> 00:02:12.189
就用你现有的吧。
Just use the one you have.

46
00:02:12.189 --> 00:02:14.770
我们都知道
And we all know that

47
00:02:14.770 --> 00:02:18.579
不与服务器交谈将比与服务器交谈更快。
not talking to a server is going to
be faster than talking to a server.

48
00:02:18.579 --> 00:02:20.490
我们知道金科玉律，对吧？
We understand the golden rules, right?

49
00:02:20.490 --> 00:02:22.909
就像跳过整个，让我问问服务器。
Like skipping the entire,
let me ask the server.

50
00:02:22.909 --> 00:02:24.310
让我获取这些TCP数据包。
Let me get these TCP packets.

51
00:02:24.310 --> 00:02:26.370
那些东西一遍又一遍。
All that stuff over and
over and over again.

52
00:02:26.370 --> 00:02:29.240
不这样做会更快。
It is going to be faster to not do that.

53
00:02:29.240 --> 00:02:34.552
在一个非常简单的Express服务器中，您可以调整其中的每一个，
In a very simple express server
you could tweak each one of these,

54
00:02:34.552 --> 00:02:37.354
从无存储到缓存缺失或
from no-store to cache missing or

55
00:02:37.354 --> 00:02:42.300
no-store到no-cache to max-age，依此类推。
no-store to no-cache to max-age,
and so on and so forth.

56
00:02:42.300 --> 00:02:44.354
每一个都试一试。
Try each of these out.

57
00:02:44.354 --> 00:02:47.189
没有商店，就像不商店一样。
No-store which is like don't store.

58
00:02:47.189 --> 00:02:48.659
和你想的一模一样，对吧？
It's exactly what you think it is, right?

59
00:02:48.659 --> 00:02:51.139
像浏览器一样，每次都去获取一个新版本。
Like browser,
go get a new version every time.

60
00:02:51.139 --> 00:02:54.039
这可能是，您可能希望您的HTML页面使用此功能，对吗？
This could be, you might want this for
your HTML page, right?

61
00:02:54.039 --> 00:02:57.250
特别是如果它是一个客户端设置，只是指向一些bundle。
Especially if it's a client setup
that's just pointing at some bundles.

62
00:02:57.250 --> 00:03:00.419
不，我需要你看看这个的新版本是什么。
No, I need you to see what
the new version of this one is.

63
00:03:00.419 --> 00:03:01.509
我更新了这个。
I updated this.

64
00:03:01.509 --> 00:03:03.974
请去获取HTML页面。
Please go get the HTML page.

65
00:03:03.974 --> 00:03:08.000
no-cache意味着您可以存储副本，但是
No-cache means you can store a copy, but

66
00:03:08.000 --> 00:03:10.780
至少和我核实一下，看看你有没有最新的版本。
at least check with me to see if
you have the most recent version.

67
00:03:10.780 --> 00:03:12.900
它将执行我们称为条件GET的操作，
It will do what we call a conditional get,

68
00:03:12.900 --> 00:03:16.259
嘿，有这个版本，这个版本对吗？
hey, have this version,
is this the right version?

69
00:03:16.259 --> 00:03:18.479
对，这是有代价的，因为你仍然需要检查。
Right, there's a cost to that,
because you still need to check.

70
00:03:18.479 --> 00:03:20.710
但如果服务器运行是的，那就是正确的版本，
But if the server goes yeah,
that's the right version,

71
00:03:20.710 --> 00:03:22.768
那么它就不需要给你发那个文件了。
then it doesn't need
to send you that file.

72
00:03:22.768 --> 00:03:27.750
另一个是max-age，你会说，听着，我刚刚发送的这个文件
And the other one is max-age, which you
say like, listen, this file I just sent

73
00:03:27.750 --> 00:03:33.650
你，下一秒不管它是有效的，只要相信它，对吧。
you, for the next however many seconds
it's valid, just trust it, right.

74
00:03:33.650 --> 00:03:40.090
不要问我，就像也许十分钟后你可以再问我一次，一年，随便什么。
Don't ask me, like maybe in a ten minutes
you can ask me again, a year, whatever.

75
00:03:40.090 --> 00:03:43.110
我们可以做这些事情中的任何一件，因为缓存很棒，除非它搞砸了
We can do any of those things because
caching is great unless it messes

76
00:03:43.110 --> 00:03:44.349
向上，对吗？
up, right?

77
00:03:44.349 --> 00:03:50.159
我们可以说，缓存很长时间，然后我们发布一些糟糕的JavaScript文件。
We can say, cache this for a long time,
and then we ship some bad JavaScript file.

78
00:03:50.159 --> 00:03:53.069
我们想要某种破解宝藏的方法。
We wanna have some kind
ofway of busting the cache.

79
00:03:53.069 --> 00:03:56.370
因为否则我们可以说，浏览器，保留这个损坏的JavaScript文件
Because otherwise we can say, browser,
hold on to this broken JavaScript file and

80
00:03:56.370 --> 00:03:57.579
永远不要再向我要一个。
never ask me for another one.

81
00:03:59.069 --> 00:04:01.945
这就是所谓的不再是客户[笑]对吗？
That's called no longer
a customer [LAUGH] right?

82
00:04:01.945 --> 00:04:04.169
这叫做放弃你的用户。
That's called a user who
has given up on you.

83
00:04:04.169 --> 00:04:07.658
那可不好。
That's not great.

84
00:04:07.658 --> 00:04:09.795
并且用户必须进行我们称为硬刷新的操作，
And the user would have to do
what we call a hard refresh,

85
00:04:09.795 --> 00:04:11.729
这在每个浏览器中都有一点不同。
which is a little bit
different in every browser.

86
00:04:11.729 --> 00:04:12.689
但这不是刷新。
But it's not a refresh.

87
00:04:12.689 --> 00:04:14.039
它涉及到按住Shift或
It involves holding shift or

88
00:04:14.039 --> 00:04:18.870
敲击其他键的鸡尾酒来清理缓存并做一些事情。
hitting some other cocktail of keys
to clear out the cache and do stuff.

89
00:04:18.870 --> 00:04:19.949
你知道谁会这么做吗？
And you know who's gonna do that?

90
00:04:21.399 --> 00:04:22.709
没有你的用户。
None of your users.

91
00:04:22.709 --> 00:04:24.310
你的用户都不会是，你知道吗？
None of your users are gonna be,
you know what?

92
00:04:24.310 --> 00:04:26.449
我可能有一些双层缓存资产。
I've probably got some bunk cache assets.

93
00:04:26.449 --> 00:04:28.060
如果我进行硬刷新呢？
What if I do a hard refresh?

94
00:04:28.060 --> 00:04:29.790
[笑]没人会这么做。
[LAUGH] No one's going to do that.

95
00:04:29.790 --> 00:04:31.730
我不会那么做的，对吧？
I'm not even going to do that, right?

96
00:04:31.730 --> 00:04:32.639
这从来都不是一个想法
That is never a thought,

97
00:04:32.639 --> 00:04:35.519
当某件事不起作用时，我就会想到这一点。
when something has not worked,
that has ever crossed my mind.

98
00:04:35.519 --> 00:04:36.279
我就这么走了
I just go,

99
00:04:36.279 --> 00:04:39.939
就像，还有其他东西可以让我去看看多巴胺。
like, there's something else that can
give me a dopamine hit to go look at.

100
00:04:39.939 --> 00:04:41.029
我要去做那件事。
I'm gonna go do that instead.

101
00:04:42.180 --> 00:04:43.490
所以有一个解决方案
So one solution for

102
00:04:43.490 --> 00:04:48.340
这就是我们所说的内容可寻址存储，这是一种非常奇特的方式
this is what we call Content-Addressable
Storage, which is a very fancy way

103
00:04:48.340 --> 00:04:52.470
将一堆垃圾添加到我们的文件名的末尾，对吗？
of adding a bunch of garbage to
the end of our file name, right?

104
00:04:52.470 --> 00:04:56.803
它所做的是有效地重建它，我们检查一些文件，
What this does is effectively rebuild it,
we check some of the file,

105
00:04:56.803 --> 00:05:00.911
我们给它一个唯一的标识符，我们说，去拿那个文件，然后
we give it a unique identifier,
and we say, go get that file, and

106
00:05:00.911 --> 00:05:05.204
如果我们构建一个新版本的应用程序，什么是新的数字？
if we build a new version of our
application, what has a new number?

107
00:05:05.204 --> 00:05:10.091
对，如果有人问你，你可以告诉浏览器
Right, you can tell the browser
if somebody asks you for

108
00:05:10.091 --> 00:05:17.593
main.567ee7aa72b3ee48649.js，保持一年，对。
main.567ee7aa72b3ee48649.js, hold
onto that for a year, right.

109
00:05:17.593 --> 00:05:20.137
我们可以把它放在我们的索引研究SMIL文件中，如果我们更新我们的应用程序，
We can put that on our index study
SMIL file and if we update our app,

110
00:05:20.137 --> 00:05:23.379
我们更新了索引研究SMIL文件，我们会说，好的，这是新版本。
we updated the index study SMIL file,
we'd be like, okay here's the new version.

111
00:05:23.379 --> 00:05:27.879
因此，我们有效地获得了免费的缓存破坏。
So we effectively get cache-busting for
free with that.

112
00:05:27.879 --> 00:05:30.920
使用CDN也可以做一些有趣的事情，对吧？
There's some interesting things you
can do with CDNs, as well, right?

113
00:05:30.920 --> 00:05:34.750
因为CDN也将缓存内容，这通常是，如果CDN，
Because the CDN will also cache stuff,
which is normally, if a CDN,

114
00:05:34.750 --> 00:05:39.800
它的工作方式是你把你的酷文件放在互联网上，在云中。
the way that it works is you put your
cool file on the internet, in the Cloud.

115
00:05:39.800 --> 00:05:43.579
它要么在您的服务器上，要么在S3存储桶中，或者其他什么地方。
That's either on your server, or
in an S3 bucket, or whatever.

116
00:05:43.579 --> 00:05:48.769
用户去CDN，嘿CDN，你有名字吗。567eea。
The user goes to the CDN, and
hey CDN, do you have name.567eea.

117
00:05:48.769 --> 00:05:53.209
我不能，我的记忆力不是很好。
I can't, my memory's not that good.

118
00:05:53.209 --> 00:05:55.290
它要么拥有它，要么不拥有它。
And it will either have it or
it won't have it.

119
00:05:55.290 --> 00:05:57.279
如果它没有它，它会去你的服务器并得到它，
If it doesn't have it,
it will go to your server and get it,

120
00:05:57.279 --> 00:06:01.550
然后它会在世界的那个地区保存一份拷贝，所以
and then it will keep a copy of that
in that region of the world, so

121
00:06:01.550 --> 00:06:06.540
下一个人要求它，他们得到了快速版本。
the next person asks for it,
they get the fast version.

122
00:06:06.540 --> 00:06:11.529
所以我们可以告诉CDN，嘿，拿着这个
So we can tell the CDN,
hey, hold on to this and

123
00:06:11.529 --> 00:06:13.540
给它一个最大年龄，它就会做到这一点。
give it a max-age and it will do that.

124
00:06:13.540 --> 00:06:16.040
然后浏览器可以保留它，所以浏览器不会询问。
The browser can then hold on to it,
so the browser won't ask.

125
00:06:16.040 --> 00:06:19.689
如果浏览器需要询问，它会去询问CDN，希望CDN有一个版本。
If the browser has to ask, it will go ask
the CDN which hopefully has a version.

126
00:06:21.386 --> 00:06:24.149
我们不想用这个来永远保留一切，因为如果我们发送给他们
We don't wanna use this to hold on to
everything forever because if we send them

127
00:06:24.149 --> 00:06:26.108
一个糟糕的版本我们有点穷困潦倒。
a bad version we're kind of up the creek.

128
00:06:26.108 --> 00:06:31.182
但是，这个s-maxage仅用于CDN，因为如果我们发布CDN的版本不好，
But, this s-maxage is for CDNs only
because if we ship the CDN a bad version,

129
00:06:31.182 --> 00:06:34.225
我们可以联系CDN，然后就像，哟，
we could reach out to that CDN and
be like, yo,

130
00:06:34.225 --> 00:06:37.375
丢失那个版本，从你的缓存中清除它。
lose that version,
clear it from your caches.

131
00:06:37.375 --> 00:06:42.220
因此，这是另一种不同于您在CDN上设置的最大寿命的方法。
So it's another way to have a different
max-age from what you set on the CDN.

132
00:06:42.220 --> 00:06:44.850
人们只需要走到CDN与他们保留的内容之间的距离
People only have to go as far
as the CDN versus what they keep

133
00:06:44.850 --> 00:06:45.363
在他们的浏览器里，对。
in their browser, right.

134
00:06:46.610 --> 00:06:50.000
把这些都弄好是一门很好的艺术。
And getting these right is
a little bit of a fine art.

135
00:06:50.000 --> 00:06:53.019
一般来说，如果您使用web pack或
Generally speaking, if you use web pack or

136
00:06:53.019 --> 00:06:59.100
很多其他的构建工具，文件命名部分都是为您完成的。
a lot of the other build tools,
the file naming part is done for you.

137
00:06:59.100 --> 00:07:02.769
对，之后通常会使用主和字符串。
Right, it'll usually use that main and
that string afterwards.

138
00:07:02.769 --> 00:07:05.454
对，就是一般来说，
Right, and that is, generally speaking,

139
00:07:05.454 --> 00:07:11.029
除了一些很酷的未来技术，处理它的一个很好的方法。
with barring some cool new future
technologies, a great way of handling it.

140
00:07:11.029 --> 00:07:13.300
如果文件更改，它将具有不同的文件名。
If the file changes,
it will have a different file name.

141
00:07:13.300 --> 00:07:16.959
因此，您可以存储，可以在服务器上设置max-age，用于
So you can store,
you can set the max-age on the server, for

142
00:07:16.959 --> 00:07:19.050
很长的文件名到一年。
that very long file name to a year.

143
00:07:19.050 --> 00:07:20.470
这是你能做的最大限度。
That is the maximum you can do.

144
00:07:20.470 --> 00:07:21.980
听着，如果你还在要求
Listen if you are like still asking for

145
00:07:21.980 --> 00:07:24.920
这个文件，对，因为对于该版本的文件来说是唯一的。
this file, right, cuz that's unique
to that version of the file.

146
00:07:24.920 --> 00:07:26.699
就用你现有的，好吗？
Just use the one you have, right?

147
00:07:26.699 --> 00:07:31.360
这是修复负载性能的第一步，
And that is kind of the first step
in fixing your load performances,

148
00:07:31.360 --> 00:07:33.399
确保设置了缓存头。
making sure you have cache headers set.

149
00:07:33.399 --> 00:07:34.790
拿着这个对吧？
Hold onto this, right?

150
00:07:34.790 --> 00:07:35.776
别再问我要了。
And don't ask me for it again.

151
00:07:35.776 --> 00:07:39.600
现在，对于我们作为前端工程师来说，它总是悬而未决，无论是还是
Now, for us as frontend engineers,
it's always up in the air, and whether or

152
00:07:39.600 --> 00:07:42.540
不是我们能控制的，只要我不能控制那些东西，
not we control that,
wherever I don't control those things,

153
00:07:42.540 --> 00:07:44.360
就像行动部门控制所有的人一样。
like the ops department
controls all of them.

154
00:07:44.360 --> 00:07:46.420
我问他们，已经完成了。
I ask them, it is done.

155
00:07:46.420 --> 00:07:49.449
希望，或者它还没有完成，或者其他类似的事情，对吧？
Hopefully, or it's not done, or
something along those lines, right?

156
00:07:49.449 --> 00:07:52.877
但是前端工程师我们并不总是能控制这些东西。
But the frontend engineer we don't
always have control of those things.

157
00:07:52.877 --> 00:07:55.915
但还有其他事情是我们可以控制的，
But there are other things
that we do have control over,

158
00:07:55.915 --> 00:08:00.259
我会花更多的时间在上面，而不是像那些步骤。
that I'm gonna kinda spend a little bit
more time on, versus like those steps.

159
00:08:00.259 --> 00:08:04.365
所以，是的，我们可以重申我在发货前说的，因为有一个糟糕的版本，
So yep, we can reiterate I said before
we ship because there is a bad version,

160
00:08:04.365 --> 00:08:06.660
我们真的没有很好的选择。
we don't really have a great choice.

161
00:08:06.660 --> 00:08:09.089
我们给CDN提供了一个不好的版本，我们不能和CDN说话。
We ship the CDN a bad version,
we can't talk to the CDN.

162
00:08:09.089 --> 00:08:13.040
然而，我们不能触及每个人的所有浏览器
We can't however,
reach into all the browsers of everyone

163
00:08:13.040 --> 00:08:16.069
谁曾经访问过我们的网站，因为我们推出了糟糕的版本。
who has ever accessed our websites
as we push out the bad version.

164
00:08:16.069 --> 00:08:19.259
就像，哟，浏览器，清除掉。
It'd be like, yo, browser, clear that out.

165
00:08:19.259 --> 00:08:20.574
网络不是这样运作的。
That's not how the web works.
