WEBVTT

1
00:00:00.030 --> 00:00:01.840
&gt；&gt；steve kinney：还有一个是实验性的
&gt;&gt; Steve Kinney: There's one other
one that's kind of experimental that

2
00:00:01.840 --> 00:00:02.770
我想谈谈。
I wanna talk about.

3
00:00:02.770 --> 00:00:04.710
这是一个叫做Prepack的想法。
And it's the idea called prepack.

4
00:00:04.710 --> 00:00:08.460
所以准备，我的意思是，我可以，你知道，我是一个青少年。
And so prepack, I mean,
I can, you know, I'm a teen.

5
00:00:08.460 --> 00:00:11.419
它说是一个使Java代码运行得更快的工具。
It says a tool for
making Java's code run faster.

6
00:00:11.419 --> 00:00:13.119
强调跑这个词。
Emphasis on the word run.

7
00:00:13.119 --> 00:00:16.359
它可能并不总是使您的代码更小。
It might not always
make your code smaller.

8
00:00:16.359 --> 00:00:18.899
但我的项目就是这么有趣的。
But it's that kind of
interesting in my project.

9
00:00:18.899 --> 00:00:21.809
它肯定还没有准备好投入生产，但玩起来很有趣。
It's definitely not ready for production
but it's interesting to play around with.

10
00:00:23.129 --> 00:00:28.989
所以，这里有一个循环，但是这个循环从0开始，到10，然后做一件事。
And so, here's a loop but this loop
starts at 0, goes to 10 and does a thing.

11
00:00:28.989 --> 00:00:32.619
所以发生的是解析器解析这个循环，
And so what happens is
the parser parses this loop,

12
00:00:32.619 --> 00:00:37.439
将其编译出来，就像重新运行它一样，但实际上发生的情况是这样的。
compiles it out like re-run through it but
effectively what happens is this.

13
00:00:37.439 --> 00:00:41.530
所以，一个Prepack所做的就是它接受这个，并在构建时将它转换成这样
So, a prepack does is that it takes this
and at build time turns it into this so

14
00:00:41.530 --> 00:00:43.590
浏览器永远不必这么做。
the browser never has to do it.

15
00:00:43.590 --> 00:00:47.659
对，它做了所有那些马上就会发生的事情。
Right, it does all of those things
that gonna happen anyway immediately.

16
00:00:47.659 --> 00:00:51.299
但就像，这个代码比这个代码短，对吧？
But like, this code is shorter
than this code, right?

17
00:00:51.299 --> 00:00:52.810
所以这里有一些权衡。
So there's some trade offs there.

18
00:00:52.810 --> 00:00:57.020
但有时你可以做一些有趣的事情，比如这是一个斐波那契数列。
But sometimes you can do some interesting
things like here's a Fibonacci sequence.

19
00:00:57.020 --> 00:01:02.133
你可以看到，如果你把它放在Prepack中，它就会及时执行它。
And you can see if you put it in prepack,
it executes it in time.

20
00:01:03.920 --> 00:01:07.170
然后吐出结果。
And just spits out the result.

21
00:01:07.170 --> 00:01:10.159
所以现在浏览器永远不会经历这个斐波那契序列。
So now the browser will never go
through this Fibonacci sequence.

22
00:01:10.159 --> 00:01:13.530
它只会吐出55，因为这是无论如何都会出现的。
It's just gonna spit out 55 cuz that's
what was gonna come out anyway.

23
00:01:13.530 --> 00:01:15.560
让你们用户做这件事是没有意义的。
There's no point making you users do it.

24
00:01:15.560 --> 00:01:18.140
绝对是实验工具，但有点有趣。
Definitely experimental tool but
kind of interesting.

25
00:01:18.140 --> 00:01:21.219
我展示了更多的喜欢框架的方式，你的想法。
I showed more to like frame
the way you think about.

26
00:01:21.219 --> 00:01:23.769
比如我们在构建时在计算机上做什么
Like what do we do it on
our computers at build time

27
00:01:23.769 --> 00:01:25.730
我们是否将它发送给我们的用户来做。
whether we ship it out
to our users to do it.

28
00:01:25.730 --> 00:01:28.840
这是像我一样的主要目标，我不使用这个。
That's the main goal like I,
I don't use this.

29
00:01:28.840 --> 00:01:31.840
我认为在这一点上甚至不推荐使用它。
I don't think it's even recommended
to be used at this point.

30
00:01:31.840 --> 00:01:33.569
但我认为这是一个有趣的想法
But I think it's an interesting idea for

31
00:01:33.569 --> 00:01:36.390
构筑我们思考我们做时间的方式。
framing the way we think
about do we do time.

32
00:01:36.390 --> 00:01:41.109
还是我们把它交付给用户，让他们在编译时做？
Or do we ship it to users for
them to do at their compile time?

33
00:01:41.109 --> 00:01:45.359
通过找出有趣的方式，我们可以在我们的用户端获得很多好处
We can get a lot of winds on our user
side by figuring out interesting ways

34
00:01:45.359 --> 00:01:48.210
在我们必须建立资产的时候做到这一点。
to do this at the one time that
we ever have to build that asset.

35
00:01:48.210 --> 00:01:50.079
然后把它推到S3之类的地方。
And push it up to S3 or whatever.
