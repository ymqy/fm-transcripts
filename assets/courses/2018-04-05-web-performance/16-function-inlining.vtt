WEBVTT

1
00:00:00.070 --> 00:00:03.020
&gt；&gt；Steve Kinney：我们谈论的第一个是函数内联。
&gt;&gt; Steve Kinney: First one we talk
about is thisFunction Inlining.

2
00:00:03.020 --> 00:00:06.522
这是我想指出的观点之一，有时你可以
And this is one of the ones where I want
to make the point that sometimes you can

3
00:00:06.522 --> 00:00:09.397
四处移动代码，这并不重要，对吧？
go around moving around code and
it doesn't matter, right?

4
00:00:09.397 --> 00:00:12.742
因为我们从优化编译器中学到的一件事就是
Because one of the things we've learned
from the optimizing compiler is just turn

5
00:00:12.742 --> 00:00:14.250
不管怎么说你自己变成了机器代码。
yourself into machine code anyway.

6
00:00:14.250 --> 00:00:17.739
您编写的代码并不总是V8执行的代码。
The code you write is not always
the code that V8 executes.

7
00:00:17.739 --> 00:00:21.649
有时V8会继续为您重写代码，对吗？
Sometime V8 will go ahead and
rewrite your code for you, right?

8
00:00:21.649 --> 00:00:26.060
因此，您的工作是使可读性最强、人类友好的代码成为可能。
So your job is to make the most readable,
human-friendly code possible.

9
00:00:26.060 --> 00:00:32.100
V8的工作，也是Chrome团队的工作，就是让代码尽可能快地运行。
V8's job, and the Chrome team's job, is to
make that code run as fast as possible.

10
00:00:32.100 --> 00:00:34.100
所以我们只看另一个简单的例子，
So we'll just look at
one other quick example,

11
00:00:34.100 --> 00:00:37.039
然后我们就可以完成编译程序了，我向你保证。
and then we're done with compiler
land after that, I promise you.

12
00:00:38.079 --> 00:00:41.255
你说，我喜欢编译器的土地，我现在住在这里。
You're like, I love compiler land,
I live here now.

13
00:00:41.255 --> 00:00:44.590
[笑]酷
[LAUGH] Cool.

14
00:00:44.590 --> 00:00:51.551
好的，让我们做一个代码方块，
All right, so
let's just make a code square,

15
00:00:51.551 --> 00:00:55.655
它将需要一个数字和
and it will take a number and

16
00:00:55.655 --> 00:00:59.417
它将返回x乘以x。
it will return x times x.

17
00:00:59.417 --> 00:01:02.375
我们将创建另一个名为sumOfSquares的函数。
We'll make another one
called sumOfSquares.

18
00:01:04.301 --> 00:01:10.390
&gt；&gt；steve kinney：那将需要一个a和a b，然后像方块a一样说，
&gt;&gt; Steve Kinney: That will take an a and
a b, and say like square a,

19
00:01:14.507 --> 00:01:18.225
&gt；&gt；steve kinney：加上b的平方，
&gt;&gt; Steve Kinney: plus square of b,

20
00:01:22.409 --> 00:01:23.525
&gt；&gt；Steve Kinney：sumOfSquares，
&gt;&gt; Steve Kinney: sumOfSquares,

21
00:01:23.525 --> 00:01:26.400
语法正确，是的。
grammatically correct, yeah.

22
00:01:26.400 --> 00:01:32.414
&gt；&gt；steve kinney：我会说迭代，
&gt;&gt; Steve Kinney: I will say iteration,

23
00:01:32.414 --> 00:01:37.485
迭代次数+1。
iterations + 1.

24
00:01:37.485 --> 00:01:43.203
好的，我们继续说节点和
Okay, we'll go ahead and
we'll say node and

25
00:01:43.203 --> 00:01:46.520
我们会说，基准。
we'll say, benchmark.

26
00:01:48.698 --> 00:01:50.180
&gt；&gt；Steve Kinney：大约花了8毫秒。
&gt;&gt; Steve Kinney: Took
about eight milliseconds.

27
00:01:52.379 --> 00:01:57.143
现在，你会说，嘿，我必须做这个函数，我必须调用这个函数，
Now, you'll be like, hey, I had to make
this function, I gotta call this function,

28
00:01:57.143 --> 00:02:01.584
这意味着编译器必须继续查找平方函数是什么，
which means the compiler has to go ahead
and look up what's the square function,

29
00:02:01.584 --> 00:02:02.847
然后把东西传进去。
and pass the thing in.

30
00:02:02.847 --> 00:02:06.469
我一直在听金科玉律
I've been listening to the golden rules,

31
00:02:06.469 --> 00:02:11.813
我明白这样做应该比做这件事要慢。
I understand that doing that
should be slower than doing this.

32
00:02:11.813 --> 00:02:15.492
a乘以a，b乘以b，看看这个。
a times a, b times b, look at that.

33
00:02:15.492 --> 00:02:16.949
嘣，我现在要测量一下。
Boom, I'm gonna measure it now.

34
00:02:19.539 --> 00:02:21.400
差不多一样。
It's like around the same.

35
00:02:21.400 --> 00:02:23.199
对，就像我们两个都跑了几次。
Right, like we ran them both a few times.

36
00:02:23.199 --> 00:02:26.229
他们在八点到十点左右徘徊。
They're hovering around eight to ten.

37
00:02:26.229 --> 00:02:26.939
没什么不同。
It's no different.

38
00:02:28.150 --> 00:02:29.569
真奇怪。
That's weird.

39
00:02:29.569 --> 00:02:32.780
是不是应该像，Beckett的技术上比较慢。
Shouldn't it be like,
Beckett's was technically slower.

40
00:02:34.229 --> 00:02:37.240
原来我们有一个叫做内联的东西。
Turns out we have this
thing called Inlining.

41
00:02:37.240 --> 00:02:40.849
所以你做了跟踪涡轮内联(trace-turbo-inlining)。
So you do trace-turbo-inlining.

42
00:02:40.849 --> 00:02:43.520
你就像什么涡轮内联？
You're like what is turbo inlining?

43
00:02:43.520 --> 00:02:46.710
曲轴做了一种方式，涡轮风扇做了另一种方式。
Well crank shaft did it one way,
turbo fan does it another way.

44
00:02:46.710 --> 00:02:48.234
所以这只是涡轮风扇的内联。
So it's just turbo fans inlining.

45
00:02:48.234 --> 00:02:51.554
如果你去寻找跟踪内联，你什么都看不到，所以
You'll see nothing if you go looking for
trace inlining so

46
00:02:51.554 --> 00:02:53.990
我们现在追踪涡轮内联。
we traced turbo-inlining now.

47
00:02:53.990 --> 00:02:55.520
我就是其中之一，我已经报名了。
I for one, I'm signed up.

48
00:02:57.689 --> 00:03:02.849
看，它正在将square内联到sumOfSquares中。
Look it's inlining square
into sumOfSquares.

49
00:03:02.849 --> 00:03:06.550
所以你知道我之前做的那个很酷的优化，对吧？
So you know that cool
optimization I did before, right?

50
00:03:06.550 --> 00:03:09.009
之前是8岁，这次是12岁，最后一次是10岁。
Before it was like 8, this time it was 12,
and the last time it was 10.

51
00:03:09.009 --> 00:03:12.900
它看起来大致相同，就像针是这样来回移动的。
It looks like it's roughly the same, like
the needle goes back and forth like this.

52
00:03:12.900 --> 00:03:18.969
所以发生的事情是Chrome就像，嘿，我必须继续调用这个函数。
So what happened was Chrome is like, hey,
I have to keep calling this function.

53
00:03:18.969 --> 00:03:23.409
如果我只是把我们第一次所拥有的重写成第二次所拥有的呢？
What if I just rewrote what we had the
first time to what we had the second time?

54
00:03:23.409 --> 00:03:24.997
它代表你做这件事。
And it does that for you on your behalf.

55
00:03:24.997 --> 00:03:28.174
对，所以它会运行，它会看到您正在调用相同的函数，然后
Right, so it'll go and it sees you're
calling the same function over and

56
00:03:28.174 --> 00:03:30.992
一次又一次，它基本上会重写你的代码
over and over again, it'll basically
go and rewrite your code so

57
00:03:30.992 --> 00:03:32.599
你不能调用那个函数。
you're not calling that function.

58
00:03:33.620 --> 00:03:36.069
好的，你不用担心这个，它会做到的，你得到它是为了
Right, you don't have to worry about this,
it'll just do it, you get it for

59
00:03:36.069 --> 00:03:37.900
自由快乐的一天。
free, happy day.

60
00:03:37.900 --> 00:03:40.849
你可以稍后再感谢本尼迪克特和弗朗西斯卡。
You can thank Benedict and
Francisca about that later.
