WEBVTT

1
00:00:00.070 --> 00:00:02.279
&gt；&gt；steve kinney：但是你在想，我怎么避免绘画呢？
&gt;&gt; Steve Kinney: But you're thinking,
how do I avoid painting?

2
00:00:02.279 --> 00:00:05.014
当我想在屏幕上获得像素时，这不就是生活的现实吗？
Isn't that fact of life when I'd
like to get pixels on the screen?

3
00:00:05.014 --> 00:00:10.526
这就是你现在的想法，我可以读懂你的思想，结果。
That's you all right now thinking,
I can read your minds, turns out.

4
00:00:10.526 --> 00:00:13.089
我的问题是，让合成器线程处理这些东西。
My thing is, let the Compositor Thread
handle that stuff.

5
00:00:13.089 --> 00:00:14.519
你说，那是什么意思？
You're like, well what does that mean?

6
00:00:14.519 --> 00:00:19.271
所以这里有一些与GPU一起工作的合成器线程真正的东西
So here are some things that compositor
thread that works with the GPU is really

7
00:00:19.271 --> 00:00:19.850
擅长。
good at.

8
00:00:19.850 --> 00:00:23.832
它不擅长绘制位图，但它非常擅长获取
It's not good at drawing bitmaps, but
it's very good at taking a bitmap that

9
00:00:23.832 --> 00:00:27.277
以前画过，画在更多不同的地方，对吧？
was drawn before and drawing it
in more different places, right?

10
00:00:27.277 --> 00:00:30.359
它擅长缩放和旋转位图。
It's good at scaling and rotating bitmaps.

11
00:00:30.359 --> 00:00:35.490
它擅长让它们变得透明，并对它们应用Instagram过滤器。
It's good at making them transparent and
applying Instagram filters to them.

12
00:00:35.490 --> 00:00:37.600
它也擅长挖掘比特币，对吧？
It's also good at mining Bitcoin, right?

13
00:00:37.600 --> 00:00:40.240
你可以在一个合成器线程上做很多事情，你可以在上面发布
There's lots of stuff you can do on
a compositor thread that you can ship on

14
00:00:40.240 --> 00:00:42.320
去吧。
over to it.

15
00:00:42.320 --> 00:00:45.899
所以一般来说，每当我们做这些事情的时候，如果我们能通过
So generally speaking, whenever we're
doing some of these things, if we can pass

16
00:00:45.899 --> 00:00:50.799
把它转移到不太忙的线程，它只有好的，超好的几件事，
it off to the less-busy thread that's
only good, super good at a few things and

17
00:00:50.799 --> 00:00:54.219
而不是在非常繁忙的线程上做那些不太擅长的事情，
not do those on the very busy thread
that's not as good at those things,

18
00:00:54.219 --> 00:00:56.179
我们完全应该这么做。
we should totally do that.

19
00:00:56.179 --> 00:00:59.238
所以浏览器这样做，它创建了这些称为层的东西。
So the browser does that and
it creates these things called layers.

20
00:01:00.390 --> 00:01:02.780
现在这是一个单一的网站，我们有一个粘滞的标题。
Now this is a single website
where we have a sticky header.

21
00:01:02.780 --> 00:01:05.659
在Chrome开发工具的这个小3D视图中，
And in this little 3D view
in the Chrome Dev tools,

22
00:01:05.659 --> 00:01:08.989
你可以看到它在自己的图层上。
you can see that it's on its own layer.

23
00:01:08.989 --> 00:01:11.810
所以，如果你曾经使用过Photoshop，并且你在图层上有一些东西，
So if you've ever used Photoshop and
you have something on a layer and

24
00:01:11.810 --> 00:01:14.510
您可以在不破坏其下方像素的情况下移动它。
you can move it around without
destroying the pixels underneath it.

25
00:01:14.510 --> 00:01:16.680
这是完全相同的概念，对吧？
It's the exact same concept, right?

26
00:01:16.680 --> 00:01:18.750
所以顶部的横杆有点漂浮在上面，而且
So the top bar kinda floats above, and

27
00:01:18.750 --> 00:01:22.349
我们基本上不是在不同的文本上重新绘制顶部栏，
we basically instead of repainting the top
bar over different pieces of text,

28
00:01:22.349 --> 00:01:26.159
我们基本上是将页面的其余部分滑动到它下面。
we're basically sliding the rest
of the page underneath it.

29
00:01:26.159 --> 00:01:28.384
我们可以这样做。
And we can have it like that.

30
00:01:28.384 --> 00:01:31.081
这真的很酷，这就是为什么如果你看着视网膜屏幕
And this is really kinda cool, and it's
why if you are looking at a retina screen

31
00:01:31.081 --> 00:01:33.216
在此之前，当你带着这个去兜风，你看到了这一切的发生，
before when you took this for
a spin and you saw this happening,

32
00:01:33.216 --> 00:01:35.954
你以前没见过颜料，因为它就像视网膜上的自动，
you didn't see the paint before, because
it was like automatically on retina,

33
00:01:35.954 --> 00:01:38.269
它将采取任何位置固定，并将其移动到自己的层。
it will take anything on position
fixed and move it to its own layer.

34
00:01:38.269 --> 00:01:42.066
对，你没有看到，但是
Right, and you didn't see it but

35
00:01:42.066 --> 00:01:47.222
在非视网膜屏幕上，我们不会这样做。
on a non-retina screen, we don't do that.

36
00:01:47.222 --> 00:01:50.555
原因是当你把它移动到它自己的层时，
The reason for
that is when you move it to its own layer,

37
00:01:50.555 --> 00:01:54.996
你丢失了一些像素锯齿，这使得你的字体看起来很平滑，对吗？
you lose some pixel aliasing which
makes your font look smooth, right?

38
00:01:54.996 --> 00:01:58.787
在视网膜上，你永远不会注意到，在非视网膜上，你可能会注意到这一点
On Retina, you will never notice that,
on non-retina you could notice that so

39
00:01:58.787 --> 00:02:01.052
浏览器不会自动执行此操作，并且
the browser doesn't automatically do it,
and

40
00:02:01.052 --> 00:02:03.709
这就是为什么你有不同之处。
that's why you have the difference there.

41
00:02:03.709 --> 00:02:06.650
所以就像，我想知道所有关于如何把东西
So it's like, I wanna know
everything about how to get stuff to

42
00:02:06.650 --> 00:02:08.449
合成器线程。
the compositor thread.

43
00:02:08.449 --> 00:02:14.449
这是不可能的或有用的，因为合成是一种黑客。
That's not possible or useful because
the compositing is kind of a hack.

44
00:02:14.449 --> 00:02:16.597
这不像W3C规范中的那样。
It's not like, in the W3C spec.

45
00:02:16.597 --> 00:02:19.485
Java脚本被规范出来，DOM被规范出来，
Java Script is specced out,
the dom is specced out,

46
00:02:19.485 --> 00:02:21.334
CSS对象模型检查器。
the CSS object model Inspector.

47
00:02:21.334 --> 00:02:23.790
这些东西的行为是有规则的。
There are rules for
how these things behave.

48
00:02:23.790 --> 00:02:25.715
合成在某种程度上是由浏览器完成的，
Compositing is kinda done by browsers,

49
00:02:25.715 --> 00:02:27.983
无论如何，他们希望有权更改它。
however they want with
the rights to change it.

50
00:02:27.983 --> 00:02:31.550
我们只需要知道它的存在，我们将讨论如何
We just need to know that it exists and
we're gonna talk about how to make

51
00:02:31.550 --> 00:02:35.603
向浏览器提出这样的建议：嘿，为什么你要把这层设置为自己的层？
suggestions to the browser like hey, hey,
why do you make this it's own layer?

52
00:02:35.603 --> 00:02:37.060
我想会很好的，对吧？
I think it will be good, right?

53
00:02:37.060 --> 00:02:39.829
浏览器可以选择听我们的或者不听我们的。
And the browser can choose to either
listen to us or not listen to us.

54
00:02:39.829 --> 00:02:41.889
其他类型的用例。
Some other kind of use cases.

55
00:02:41.889 --> 00:02:46.189
我们做我们的事情，这是我们的代码区，有一个并排的代码和
We do our thing, this is our code
area with a side by side code and

56
00:02:46.189 --> 00:02:50.810
然后是Visual Studio端，我们有这样的设置，它可以滑过它。
then the Visual Studio Side and we have
this settings that slides out over it.

57
00:02:50.810 --> 00:02:53.650
所以那会引起一大堆重漆，但是
So that would cause a whole
bunch of repaints, but

58
00:02:53.650 --> 00:02:56.780
因为它是自己的一层，所以它在前面滑出来。
because it's its own layer,
it slides out in front.

59
00:02:56.780 --> 00:02:59.719
完成后我们把它滑回去，你看到的唯一的重新粉刷
We slide it back when it's done,
the only repainting that you saw

60
00:02:59.719 --> 00:03:05.039
有齿轮的转动。
there was the turning of the gear.

61
00:03:06.189 --> 00:03:11.848
然后选择我想要讨论的下拉列表，但jQuery插件没问题
And select to drop down that I wanna talk
about, but jQuery plugin that's fine

62
00:03:11.848 --> 00:03:17.522
是的，这个东西滑出来了，我们不会重新粉刷那些非常酷的部分。
yeah the thing slides out we don't repaint
any of those parts which very cool.

63
00:03:17.522 --> 00:03:21.227
所以好吧，我想通过每件事使用图层，这很好。
So all right I wanna use layers
through everything, that's great.

64
00:03:21.227 --> 00:03:23.270
人们并不是简单地使用图层，对吗？
One does not simply use layers, right?

65
00:03:23.270 --> 00:03:29.020
你可以说我希望这是它自己的一层，你可能不应该。
You can say I want this to be it's
own layer, you probably shouldn't.

66
00:03:29.020 --> 00:03:31.180
稍后我们将讨论原因。
We'll talk about why in a second.

67
00:03:31.180 --> 00:03:33.490
但你并不是真的负责层级。
But you're not really in charge of layers.

68
00:03:33.490 --> 00:03:34.900
那不是你的事。
That's not your thing.

69
00:03:34.900 --> 00:03:37.259
你可以简单地提出建议。
You can simply make recommendations.

70
00:03:37.259 --> 00:03:40.115
浏览器在幕后为您做了一些优化。
There are optimizations that the browser
does for you under the hood.

71
00:03:40.115 --> 00:03:41.204
再说一次，他们没有被指定出来。
Again they're not specced out.

72
00:03:41.204 --> 00:03:44.685
你不能真正控制他们，但你可以影响他们。
You don't really have any control
over them but you can influence.

73
00:03:44.685 --> 00:03:47.805
[笑]你可以在排字师王面前鞠躬。
[LAUGH] You can bow before
the compositor king.

74
00:03:47.805 --> 00:03:51.604
并要求成为一个层，浏览器可以决定是否或
And ask to become a layer and
the browser can decide whether or

75
00:03:51.604 --> 00:03:53.944
不是你配得上成为一名。
not you're worthy of becoming one.

76
00:03:53.944 --> 00:03:58.314
所以开箱即可看到，现在那些顶层的酒吧都有自己的层次，
So out of the box we saw that right now
those top bars got their own layers,

77
00:03:58.314 --> 00:04:00.064
其他一些事情也可以。
a few other things do as well.

78
00:04:00.064 --> 00:04:03.759
页面根对象获得它自己的层，因为您至少需要一个层，
The root object of a page gets its own
layer cuz you need at least one layer,

79
00:04:03.759 --> 00:04:05.199
对，你需要一些东西。
right, you need something.

80
00:04:06.599 --> 00:04:09.780
具有特定CSS位置的对象，如位置固定，
Objects that have specific CSS
positions like position fixed,

81
00:04:09.780 --> 00:04:11.900
所以那就是那个时候，那只是在视网膜上。
so that's when, that's only on Retina.

82
00:04:11.900 --> 00:04:14.719
这就是你看到头标漂浮在上面的时候。
That's when you saw that
header float above.

83
00:04:14.719 --> 00:04:19.319
具有CSS转换的对象，具有溢出的对象
Objects with CSS transforms,
objects that have overflow so

84
00:04:19.319 --> 00:04:22.360
如果他们可以滚动，这些通常是在他们自己的线程上，因为你不想
if they can scroll those are usually
on their own thread cuz you don't wanna

85
00:04:22.360 --> 00:04:26.699
重新粉刷，想保留每个部分，基本上就是从下面滑动。
repaint, wanna keep each part,
just basically slide it from underneath.

86
00:04:26.699 --> 00:04:29.160
一堆东西会有自己的一层，对吧？
A bunch of stuff will get its own layer,
right?

87
00:04:29.160 --> 00:04:31.029
再说一次，这是浏览器的事情。
Again it's a browser thing.

88
00:04:31.029 --> 00:04:32.709
不一定是给你的，但是
It's not necessarily for you, but

89
00:04:32.709 --> 00:04:35.009
它在我们所做的一些工作中真的很有用。
it can be really useful in
some of work that we do.

90
00:04:35.009 --> 00:04:38.290
如果你想知道所有的事情，你可以成为一个优秀的黑客
If you wanna know all the things,
you can be an elite hacker and

91
00:04:38.290 --> 00:04:40.307
去阅读Chromium源代码，然后
go read the Chromium source code, and

92
00:04:40.307 --> 00:04:43.668
看，字面上有一个叫做合成原因的文件。
see, there's literally a file
called compositing reasons.

93
00:04:43.668 --> 00:04:48.034
[笑]你可以坐下来喝杯咖啡或喝一杯，然后坐在那里
[LAUGH] And you can sit down with a cup
of coffee or a drink and sit there and

94
00:04:48.034 --> 00:04:52.252
通读此文件，但一般说来，较短的列表
read through this file but
generally speaking the shorter list that

95
00:04:52.252 --> 00:04:55.079
我之前给你看过可能是个好的开始。
I showed you before is
probably a good start.

96
00:04:56.230 --> 00:04:59.680
因此，不属于compositingasons.h的对象是
So an object that doesn't fall
under compositingreasons.h is

97
00:04:59.680 --> 00:05:02.970
不会有自己的一层，这可能是一件好事。
not going to get its own layer and
that's probably a good thing.

98
00:05:02.970 --> 00:05:04.762
我们以后再谈，对吧？
We'll talk about that, right?

99
00:05:04.762 --> 00:05:10.137
它将与最后一个有价值的元素位于同一层。
It will be on the same layer as
the last element that did get worthy.

100
00:05:10.137 --> 00:05:11.120
所以它会去找它的父母。
So it will go up to its parents.

101
00:05:11.120 --> 00:05:12.233
有人有自己的一层。
Somebody got their own layer.

102
00:05:12.233 --> 00:05:14.062
如果没有人有自己的一层，那么，
If nobody got their own layer, well,

103
00:05:14.062 --> 00:05:16.819
根对象在层的一个平面上，对吗？
the root object is on the layer's
one flat page, right?

104
00:05:16.819 --> 00:05:19.149
它将只是加入上一层，这是有意义的。
It will just join the previous layer,
which makes sense.
