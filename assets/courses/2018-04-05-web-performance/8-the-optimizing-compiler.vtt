WEBVTT

1
00:00:00.110 --> 00:00:02.120
&gt；&gt；steve kinney：它运行得很好，对吧，
&gt;&gt; Steve Kinney: It runs okay, right,

2
00:00:02.120 --> 00:00:05.160
不是很好，这不是JavaScript真正快速的原因。
not great that's not what
makes JavaScript really fast.

3
00:00:05.160 --> 00:00:07.960
使JavaScript真正快速的是那个绿色的箭头。
What makes JavaScript really
fast is that green arrow.

4
00:00:07.960 --> 00:00:12.643
我们能越过那个绿色箭头到涡轮风扇的任何东西都是好的，对吧？
Anything we can get across that green
arrow to turbo fan is good, right?

5
00:00:12.643 --> 00:00:15.881
[笑]只要我们能做到这一点，那就是我们想要做的事情。
[LAUGH] Whenever we can do that,
that is a thing that we want to do.

6
00:00:15.881 --> 00:00:17.065
这是件好事。
That is a good thing.

7
00:00:17.065 --> 00:00:20.750
因此，它提出了一个问题，我们如何做到这一点？
So then it raises the question,
how do we do that?

8
00:00:21.760 --> 00:00:26.905
有很多，&gt；&gt；steve kinney：涡轮风扇和
There is a lot of the,
&gt;&gt; Steve Kinney: Turbo Fan and

9
00:00:26.905 --> 00:00:31.449
V8作为一个整体主要是在德国制造的，[笑]尤其是慕尼黑。
V8 as a whole is mostly made in Germany,
[LAUGH] particularly Munich.

10
00:00:31.449 --> 00:00:34.390
大部分的团队合作都在那里，这是一群非常好的人
Most of the teamwork's there, and
it's a bunch of really nice and

11
00:00:34.390 --> 00:00:38.579
聪明人，我在那里工作的朋友，他们有博士和
smart people, friends of mine that
work there, and they have PhDs and

12
00:00:38.579 --> 00:00:40.780
他们正在做一些非常技术性的事情。
they're doing some very technical stuff.

13
00:00:40.780 --> 00:00:44.270
我们会像一个高级版本那样做，因为我
We're gonna do it like a high-level
version of that because I

14
00:00:44.270 --> 00:00:45.850
渴望教你很多网络表现。
aspire to teach you a lot
of web performance.

15
00:00:45.850 --> 00:00:48.170
如果我们都能带着博士离开这里，我绝对会这么做，但是
If we could all leave here with
PhDs I would totally do that, but

16
00:00:48.170 --> 00:00:49.409
这可能不会发生。
that's probably not gonna happen.

17
00:00:49.409 --> 00:00:54.631
所以我们将看看涡扇做的一些事情以及它是如何工作的。
So we're gonna look at a few of the things
that TurboFan does and how it works.

18
00:00:54.631 --> 00:00:58.384
我们要看的三件事都是推测的。
The three things that we're
gonna look at are speculative.

19
00:00:58.384 --> 00:01:00.112
我迫不及待地想说很多次
I can't wait to say that
a bunch of times in front of

20
00:01:00.112 --> 00:01:01.439
一间满是人的房间被录音。
a room full of people being recorded.

21
00:01:01.439 --> 00:01:06.617
推测性优化，隐藏类
Speculative optimization,
hidden classes for

22
00:01:06.617 --> 00:01:11.045
动态查找和函数内联。
dynamic lookups and function inlining.

23
00:01:11.045 --> 00:01:15.569
因为使优化编译器更快的原因是
Because the reason that what makes
the optimizing compiler faster is

24
00:01:15.569 --> 00:01:19.870
类似的删除使解释器速度变慢的东西。
the like removal of the things
that make the interpreter slower.

25
00:01:19.870 --> 00:01:25.951
因为JavaScript很难，JavaScript是动态的，JavaScript有很多规则。
Cuz JavaScript is hard and JavaScript is
dynamic and JavaScript has a lot of rules.

26
00:01:25.951 --> 00:01:30.700
假设我们得到一个加法函数，对，加法x和y，它返回x+y。
So let's say we get an add function,
right, add x and y it returns x plus y.

27
00:01:30.700 --> 00:01:33.289
你说是啊，这有什么难的？
You're like yeah, why is that hard?

28
00:01:33.289 --> 00:01:35.801
加号运算符是做什么的？
Well, what does a plus operator do?

29
00:01:35.801 --> 00:01:39.810
你就像是它增加了数字，我想，是的，如果我给它一些字符串呢？
You're like it adds numbers, I'm like,
yeah, what if I give it strings?

30
00:01:39.810 --> 00:01:44.359
它将它们连接起来，好吧，如果我给它一个字符串和一个对象呢？
It concatenates them, okay,
what if I give it a string and an object?

31
00:01:44.359 --> 00:01:46.566
嗯，它调用对象上的两个字符串，并且
Well, it calls two string on the object,
and

32
00:01:46.566 --> 00:01:48.725
然后将其与第一个连接。
then concatenates that with the first one.

33
00:01:48.725 --> 00:01:51.210
如果我给它一个数字和一串数字呢？
What if I give it a number and
a string of numbers?

34
00:01:51.210 --> 00:01:55.266
JavaScript规范中有很多规则，对吧
There's a lot of rules, right,
in the JavaScript spec, and

35
00:01:55.266 --> 00:02:00.030
翻译不知道，[笑]这里会发生什么，对吗？
the interpreter has no idea,
[LAUGH] what's gonna happen here, right?

36
00:02:00.030 --> 00:02:04.195
它知道它必须添加x和y，它不一定知道x和y是什么，
It knows it has to add x and y, it doesn't
necessarily know what x and y are yet,

37
00:02:04.195 --> 00:02:08.769
直到程序实际运行，所以它基本上必须遵循规则手册。
until the program's actually running, so
it basically has to follow the rule book.

38
00:02:08.769 --> 00:02:13.587
但希望是，如果我们编写相同的函数1000，
But the hope is that,
if we are writing the same function, 1000,

39
00:02:13.587 --> 00:02:18.241
10000，一百万次，我们可以开始做一些
10000, a million times,
that we can start to do like make some

40
00:02:18.241 --> 00:02:23.241
猜测这里发生了什么，也许会跳过一些规则，对吧？
guesses on what's happening here,
and maybe skip some rules, right?

41
00:02:23.241 --> 00:02:26.318
因为，有什么比做事情更快呢？
Because, what is faster than doing stuff?

42
00:02:27.800 --> 00:02:31.396
不做事情，对吧，如果我们可以跳过所有那些疯狂的规则
Not doing stuff, right, and if we can
skip all of those kinda crazy rules and

43
00:02:31.396 --> 00:02:34.562
串联和我是否需要抛出一个错误并为此做好准备。
concatenation and do I need to throw
an error and be ready for that.

44
00:02:34.562 --> 00:02:36.843
如果我们能消除所有这些
If we can eliminate all of that,

45
00:02:36.843 --> 00:02:41.581
我们可以更快地执行JavaScript，好吧，非常酷。
we can execute the JavaScript way faster,
all right, very cool.

46
00:02:41.581 --> 00:02:44.960
因此，我们将继续查看一些代码。
So, we're gonna go ahead and
look at some code.

47
00:02:44.960 --> 00:02:47.930
在，只是我们早些时候送出的
In the,
just that we've send out earlier for

48
00:02:47.930 --> 00:02:51.319
观看这个然后它应该像下面的视频链接。
watching this then it should be
like a link below the video.

49
00:02:51.319 --> 00:02:54.813
有一个叫做web-performance的回购，里面有一堆代码。
There is a repo called web-performance
with a bunch of code in it.

50
00:02:54.813 --> 00:02:56.372
我们要玩弄这玩意儿
We're gonna play around with that for

51
00:02:56.372 --> 00:03:04.215
等一下。&gt；&gt；steve kinney：在这里，
a second.
&gt;&gt; Steve Kinney: Here,

52
00:03:04.215 --> 00:03:10.227
我有一个小文件，这是在该回购的基准目录中。
I have a little file this is in
the benchmarks directory in that repo.

53
00:03:10.227 --> 00:03:11.923
这是一个名为Benchmark.js的文件，
This is a file called benchmark.js,

54
00:03:11.923 --> 00:03:14.909
如你所知，我很擅长命名事物。
I'm very good with naming
things as you can tell.

55
00:03:14.909 --> 00:03:20.120
我们实际上要看一些代码，那么这段代码中发生了什么？
And we're gonna actually look at some
code, so what's going on in this code?

56
00:03:20.120 --> 00:03:23.657
第一件事是我们要把这个表演对象拉进来，
The first thing is we're gonna
pull in this performance object,

57
00:03:23.657 --> 00:03:26.693
这不是一个MPM模块或沿这些路线的任何东西。
this is not an MPM module or
anything along those lines.

58
00:03:26.693 --> 00:03:30.533
如果对于LTS的节点8.5和更高版本，
If you have for
the LTS's node 8.5 and later,

59
00:03:30.533 --> 00:03:35.227
你有这个，我运行9.8，我有这个，对吧。
you have this, I'm running 9.8,
I have this, right.

60
00:03:35.227 --> 00:03:38.711
因此，如果您有较早的版本，8.5和更高版本应该具有此功能，
So 8.5 and later should have this
if you have an earlier version,

61
00:03:38.711 --> 00:03:40.007
你可能没有这个。
you might not have this.

62
00:03:40.007 --> 00:03:43.424
你可能需要在休息时更新，我们一起做
And you might need to update during
the break and we'll do it together and

63
00:03:43.424 --> 00:03:44.500
会很有趣的。
it'll be a lot of fun.

64
00:03:44.500 --> 00:03:48.703
但是这个性能对象给了我们一大堆，它基本上实现了
But this performance object gives us
a whole bunch, it's basically implementing

65
00:03:48.703 --> 00:03:52.378
所谓的用户计时API，在Chrome中也受支持。
what's called the user timing API,
which is also supported in Chrome.

66
00:03:52.378 --> 00:03:55.679
所以，是的，如果您有现代版本的，这是特定于Node的版本
So yeah this is version is specific to
Node if you have a modern version of

67
00:03:55.679 --> 00:03:57.878
Chrome你也有这些
Chrome you also have these
available as well and

68
00:03:57.878 --> 00:04:00.079
你可以在你的控制台中运行其中的一些。
you can run some of these
maybe in your console.

69
00:04:01.770 --> 00:04:05.539
酷，所以我们要把它放进去，然后我的基准测试中有一个小小的设置阶段
Cool, so we gonna pull that in, then I
have a little setup phase in my benchmark

70
00:04:05.539 --> 00:04:10.740
在这里我要做一些科学记数法。
here where I'm gonna do one
some scientific notation a lot.

71
00:04:10.740 --> 00:04:14.652
我是文科专业的，就像你刚从我可以翻译的事实中发现的那样
I'm a liberal arts major as you just found
out from the fact that I can translate

72
00:04:14.652 --> 00:04:16.326
飞行中的科学记数法。
scientific notation on the fly.

73
00:04:16.326 --> 00:04:21.201
我们做了很多次，我们只需要加1和2。
We did this a bunch of times and
we're just gonna add 1 and 2.

74
00:04:21.201 --> 00:04:24.584
我们会循环一遍，把它们加在一起，
And we'll kinda go through in a loop,
add them together,

75
00:04:24.584 --> 00:04:28.797
我们将结束性能基准测试，然后我们将度量它，并且
we'll end the performance benchmark,
and then we'll measure it, and

76
00:04:28.797 --> 00:04:32.129
然后我们将控制台记录下测量结果，听起来不错吧？
then we'll console log that measurement,
sound good?

77
00:04:33.456 --> 00:04:42.064
酷毙了。&gt；&gt；Steve Kinney：所以
Cool.
&gt;&gt; Steve Kinney: So

78
00:04:42.064 --> 00:04:45.338
我将继续，我将运行节点，我将只运行基准测试。
I'll go ahead and I'll run node,
and I'll just run the benchmarks.

79
00:04:45.338 --> 00:04:49.300
酷，所以我在33毫秒内完成了所有这些。
Cool, so I did all of that
in about 33 milliseconds.

80
00:04:49.300 --> 00:04:54.055
我将为用户计时API做一些快速的PSA
I'm gonna do a little kinda quick PSA for
the user timing API and

81
00:04:54.055 --> 00:04:55.863
为什么它真的很酷。
why it's really cool.

82
00:04:55.863 --> 00:04:59.677
我将采用这个代码，除了所需的普通js之外，
Which I'm gonna take this code,
other than the common js required,

83
00:04:59.677 --> 00:05:02.480
因为我们知道这在浏览器中不受支持。
cuz we know that's not
supported in the browser.

84
00:05:02.480 --> 00:05:06.065
我要拿走剩下的。&gt；&gt；steve kinney：和
I'm gonna take the rest of it.
&gt;&gt; Steve Kinney: And

85
00:05:06.065 --> 00:05:08.365
我要进入Chrome。
I'm gonna go ahead into Chrome.

86
00:05:08.365 --> 00:05:14.093
转到大约空白。&gt；&gt；steve kinney：我会
Go to about blank.
&gt;&gt; Steve Kinney: I'll

87
00:05:14.093 --> 00:05:18.893
打开这里的工具，我可以贴进去，
open up the tools here,
and I could paste it in,

88
00:05:18.893 --> 00:05:22.855
它运行，同样的时间，很好。
it runs, same amount of time, great.

89
00:05:22.855 --> 00:05:25.911
但我想告诉你的是，我要去性能标签，
But what I wanna show you is,
I'm gonna go to the Performance tab,

90
00:05:25.911 --> 00:05:27.338
我要开始录音了
I'm gonna start a recording.

91
00:05:27.338 --> 00:05:29.928
这将是我们今天的朋友，我们会花很多时间
This is gonna be our friend today,
we're gonna spend a lot of time in

92
00:05:29.928 --> 00:05:31.853
性能标签这是我们第一次尝试它。
the Performance tab this
is our first taste of it.

93
00:05:31.853 --> 00:05:35.418
我要录音，然后我要去控制台。
I'm gonna record,
then I'm gonna go to Console.

94
00:05:35.418 --> 00:05:38.922
不，我实际上你知道选择这里的控制台，我要录音，
No I actually you know pick
the console here, I'm gonna record,

95
00:05:38.922 --> 00:05:43.605
我要把这个贴进去。&gt；&gt；Steve Kinney：我要
I'm gonna paste this in.
&gt;&gt; Steve Kinney: I'm gonna

96
00:05:43.605 --> 00:05:47.810
刷新页面，因为我使用了Constance，它不喜欢这样，再试一次。
refresh the page because I used constance
and it doesn't like that, one more try.

97
00:05:49.790 --> 00:05:54.728
所以我们会录制，&gt；&gt；Steve Kinney：我们会把它粘贴进去
So we'll record,
&gt;&gt; Steve Kinney: We'll paste it in

98
00:05:54.728 --> 00:05:56.800
点击Run我们会停下来。
hit Run we'll stop.

99
00:05:56.800 --> 00:06:00.310
很酷，所以你可以看到我在这里做的这个JavaScript的尖峰。
Cool, so you can see I have this spike
of JavaScript that I'm doing here.

100
00:06:00.310 --> 00:06:03.946
你可以看到它正在评估一个脚本，因为我刚刚把它粘贴到了
You can see it's evaluating a script
that's cuz I just pasted it into

101
00:06:03.946 --> 00:06:07.156
控制台，所以它并不真正知道它是从哪里来的。
the console, so
it doesn't really know where it came from.

102
00:06:07.156 --> 00:06:12.088
但我想提请你注意的是这里，对吧？
But what I want to draw your
attention to is right here, right?

103
00:06:12.088 --> 00:06:14.716
我可以将自己的条目放入所谓的
I can put my own entries
into what's called

104
00:06:14.716 --> 00:06:18.524
联合开发工具的用户计时部分，对吗？
the user timing portion of
the co-developer tools, right?

105
00:06:18.524 --> 00:06:23.035
所以记得当我把这个敲回家的时候，嘿，让我们测量一下东西，
So remember when I was hammering home
this, hey, let's measure things,

106
00:06:23.035 --> 00:06:26.915
你说，太好了，是的，我不知道怎么做整洁。
you're like, great, yeah,
I don't know how to do that neat.

107
00:06:26.915 --> 00:06:28.548
如果计时真的有用，就使用计时
Use the timing if it has really useful for

108
00:06:28.548 --> 00:06:31.572
这是因为你基本上可以设置你的标记开始时间，你标记结束时间，
this cuz you can basically set your
mark a start time, you mark an end time,

109
00:06:31.572 --> 00:06:34.644
然后你可以做这个措施，你可以给它起任何你想要的名字。
and then you can do this measure where
you can give it whatever name you want.

110
00:06:34.644 --> 00:06:38.108
我把它称为我的特别基准，让你相信我把这个放进去了
I called it my special benchmark to
have you believed me that I put this in

111
00:06:38.108 --> 00:06:40.470
在那里，这不是Chrome的东西。
there and this was not a Chrome thing.

112
00:06:40.470 --> 00:06:45.363
但实际上您可以将所有这些基准放入，以查看给定的
But you can actually put in all of these
benchmarks to see exactly how long a given

113
00:06:45.363 --> 00:06:47.786
您的应用程序的操作正在进行。
action of your application is taking.

114
00:06:47.786 --> 00:06:51.112
所以我想知道，嘿，我想这里有一些伤害，你可以放一个，
So I wanna know like, hey, I think some
of the hurt is here, you can put a,

115
00:06:51.112 --> 00:06:54.100
你可以标记你认为正在受伤的事情的开始时间。
you can mark the start time of
the thing that you think is hurting.

116
00:06:54.100 --> 00:06:57.569
你可以标记结束时间，实际上你可以把它放入Chrome
You can mark the end time and
you can actually put that into the Chrome

117
00:06:57.569 --> 00:07:01.680
开发人员工具，做一个性能记录，然后看看这些事情
developer tools, do a performance
recording and then see when those things

118
00:07:01.680 --> 00:07:05.105
正在发生，他们需要多长时间，对，这是非常有趣的。
are happening and how long they are
taking, right, which is super interesting.

119
00:07:05.105 --> 00:07:06.663
也是一种非常好的调试方式，
And a really great way to debug,

120
00:07:06.663 --> 00:07:10.663
我们稍后会看到，开发模式中的REACTION实际上使用了这个开箱即用的功能。
we'll see later that react actually in
development mode uses this out of the box.

121
00:07:10.663 --> 00:07:14.430
因此，您可以实际看到组件何时开始安装，何时最终安装，
So you can actually see when a component
started mounting, when it finally mounted,

122
00:07:14.430 --> 00:07:17.167
所有这些东西，它实际上也会在这里记录这些东西。
all those thing, it will actually
log those all here as well.

123
00:07:17.167 --> 00:07:18.408
这对
Which is super useful for

124
00:07:18.408 --> 00:07:22.023
弄清楚是不是你的反应代码里有什么东西在做这件事。
figuring out if it's something in
your reacticode that's doing this.

125
00:07:22.023 --> 00:07:26.783
但是，是的，这真的是一个很好的工具，可以找出为什么某些东西
But yeah this is a really great tool for
figuring out why something that's taking

126
00:07:26.783 --> 00:07:31.343
只要它是，如果它是需要很长时间的事情，等等。
as long as it is, if it's the thing taking
a long time, and so on and so forth.

127
00:07:31.343 --> 00:07:35.762
但是回到我们的主要活动，所以在这里，我们运行它，
But back to our main event,
so here, we ran it,

128
00:07:35.762 --> 00:07:43.290
如果我们知道这里发生了什么，比如这个代码，那就太好了？
it'd be really great if we knew like what
was happening here, like is this code?

129
00:07:43.290 --> 00:07:45.276
我的意思是，有人会争论这个代码，
I mean, one would argue this code,

130
00:07:45.276 --> 00:07:49.980
我们只是用相同的变量运行相同的函数，很多次，
that we're just running the same function
with the same variables, a lot of times,

131
00:07:49.980 --> 00:07:54.634
感觉它是去优化编译器的一个很好的候选者，对吧。
it feels like it's a good candidate for
going to the optimizing compiler, right.

132
00:07:54.634 --> 00:07:58.237
我们如何知道它是否会进入优化编译器，我们知道吗？
How do we know if it's going to
the optimizing compiler, do we know?

133
00:07:58.237 --> 00:08:01.300
是不是就像史蒂夫告诉我们的那样
Is it just like,
Steve told us that things go there and

134
00:08:01.300 --> 00:08:04.036
他看起来很有信心，因此它必须，对吧。
he seems confident,
thereby it must, right.

135
00:08:04.036 --> 00:08:08.230
或者，我们如何判断是否有东西进入了优化编译器？
Or how can we tell if something's
going to the optimizing compiler?

136
00:08:08.230 --> 00:08:11.615
事实证明，V8有一堆标志，您可以
It turns out that V8 has
a bunch of flags that you can

137
00:08:11.615 --> 00:08:15.529
设置以获取关于正在发生的事情的更多信息。
set to get more information
about what's going on.

138
00:08:15.529 --> 00:08:19.303
例如，我们可以做节点并获得这个标志跟踪opy，
So for instance we could do node and
get this flag trace opy,

139
00:08:19.303 --> 00:08:24.653
有人猜到traced opt代表什么了吗？&gt；&gt；Steve Kinney：trace
anyone guessed what traced opt stands for?
&gt;&gt; Steve Kinney: Trace

140
00:08:24.653 --> 00:08:29.024
优化。&gt；&gt；steve kinney：会更容易
optimizations.
&gt;&gt; Steve Kinney: There will be an easier

141
00:08:29.024 --> 00:08:32.350
稍后的问题，你们都可以用来救赎自己。
question later that you can all
like redeem yourselves with.

142
00:08:33.580 --> 00:08:39.850
很酷，你可以看到这里有一些东西被记录到控制台上。
Cool, and you can see there's some
stuff being logged to the console here.

143
00:08:39.850 --> 00:08:43.052
我对第一个很感兴趣
I'm kind of interested
in this first one which

144
00:08:43.052 --> 00:08:46.427
是否标记JavaScript函数add。
is the JavaScript function
add is being marked.

145
00:08:46.427 --> 00:08:50.554
我们将add函数标记为优化重新编译，原因是什么？
We're marking the add function for
optimized recompilation, reasons?

146
00:08:50.554 --> 00:08:53.696
这是一个小函数，有内联缓存，
It's a small function,
there's in-line caching,

147
00:08:53.696 --> 00:08:56.529
我们一会儿再谈。
which we'll talk about in a second.

148
00:08:56.529 --> 00:09:00.548
所以，是的，我们做了，我们用Turbo Fan编译它，
So yeah, we do it,
we compile it with Turbo Fan,

149
00:09:00.548 --> 00:09:03.881
它完成了优化很酷。
it completes the optimizing very cool.

150
00:09:03.881 --> 00:09:04.903
还有一些其他的事情。
There's some other things.

151
00:09:04.903 --> 00:09:12.148
有一个调试工具叫D8，用于调试V8，CATE。
There is a debugging tool called D8
which is used for debugging V8, cute.

152
00:09:12.148 --> 00:09:16.710
它更加专业，但你必须下载它，编译Chrome和
That it was much more specialized but you
have to download it, compile Chrome and

153
00:09:16.710 --> 00:09:17.419
一堆东西。
a bunch of stuff.

154
00:09:17.419 --> 00:09:20.706
如果你真的喜欢这个，这绝对是你想要的方向，
If you get really into this that's
definitely the way you wanna go,

155
00:09:20.706 --> 00:09:23.195
因为Node不仅仅是V8，它也是Node。
because Node is not just V8,
but it's also Node.

156
00:09:23.195 --> 00:09:26.654
所以这里的其他东西实际上是Node发生的。
So this other stuff here
is actually Node happening.

157
00:09:26.654 --> 00:09:30.153
因此，如果我们是命令行向导，可以做的一件有用的事情就是运行它。
So a useful thing to do, if we're
command-line wizards, is to run it.

158
00:09:30.153 --> 00:09:34.165
我们可以执行grep add，它将查找具有函数名称的每一行
And we can do grep add, which will find
every line with the name of the function

159
00:09:34.165 --> 00:09:37.059
在里面，我们会得到更少的噪音。
in it, and
we'll get a little bit less noise.

160
00:09:37.059 --> 00:09:41.388
所以在这里你可以看到之前信息的子集，好吗？
So here you can see the Subset of
the previous information, okay?

161
00:09:41.388 --> 00:09:46.019
我们为重新编译优化了add，我们现在知道它去了turbofan，
We optimized add for recompilation,
we now know that it went to TurboFan,

162
00:09:46.019 --> 00:09:47.203
它得到了优化。
it got optimized.

163
00:09:47.203 --> 00:09:49.970
它去了优化编译器很好，摇滚乐。
It went to to the optimizing
compiler good, rock and roll.
