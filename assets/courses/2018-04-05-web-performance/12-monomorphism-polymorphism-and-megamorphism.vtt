WEBVTT

1
00:00:00.210 --> 00:00:03.770
&gt；&gt；steve kinney：但就像他们都有一个财产一样，有什么区别，对吧？
&gt;&gt; Steve Kinney: But like they all have an
a property, what's the difference, right?

2
00:00:03.770 --> 00:00:08.321
显然，如果我们考虑尝试删除点属性时发生的情况
Clearly, if we think about what happened
when we tried to delete points properties

3
00:00:08.321 --> 00:00:12.820
从点类开始，我们考虑当我们获得不同的对象时会发生什么。
from the point class, we think about what
happens when we get different objects.

4
00:00:12.820 --> 00:00:17.643
我们绝对可以测量出发生了一定程度的差异。
We can definitely measure that there is
some amount of difference that happens.

5
00:00:17.643 --> 00:00:22.913
而且这真的没有任何意义，因为为什么这些中的一个会更快
And it doesn't really make any sense
because why would one of these be faster

6
00:00:22.913 --> 00:00:30.818
如果它们是幻灯片就好了。&gt；&gt；Steve Kinney：所以
than the other, if only they were slides.
&gt;&gt; Steve Kinney: So

7
00:00:30.818 --> 00:00:35.018
原来在V8中有一个类型系统。
it turns out that there
is a type system in V8.

8
00:00:35.018 --> 00:00:37.720
JavaScript中没有，但V8中有一个。
There's not in JavaScript,
but there's one in V8.

9
00:00:37.720 --> 00:00:40.746
当我们看到字符串和数字时，我们对此产生了怀疑，
We had suspicions of that when we
saw the strings and the numbers,

10
00:00:40.746 --> 00:00:42.512
我们的怀疑得到了证实。
our suspicions have been confirmed.

11
00:00:42.512 --> 00:00:46.152
是的，数字和字符串，它会记录这些，很酷，但是
Yeah, numbers and strings,
it keeps track of those, cool, but

12
00:00:46.152 --> 00:00:49.805
很明显，也有涉及物体的东西，对吧。
clearly there's something
involving objects as well, right.

13
00:00:49.805 --> 00:00:55.067
我们使用的术语是态射
And the terminology we use is the morphism

14
00:00:55.067 --> 00:00:59.281
那个对象，对吗？&gt；&gt；组：[笑声]
of that object, right?
&gt;&gt; Group: [LAUGH]

15
00:00:59.281 --> 00:01:01.045
&gt；&gt；steve kinney：是的，每个人都回来了，
&gt;&gt; Steve Kinney: Yeah, everyone's back,

16
00:01:01.045 --> 00:01:03.197
大家又来了，酷。
everyone's here again, cool.

17
00:01:03.197 --> 00:01:09.222
所以我们可以说，在函数可以是单态的情况下，对吧。
And so we can say that in the case that
a function could be monomorphic, right.

18
00:01:09.222 --> 00:01:12.632
还记得我们在哪里传递了一大堆只有A属性的对象，
Remember where we passed a whole bunch
of objects that only had an A property,

19
00:01:12.632 --> 00:01:13.950
一个财产就是一个数字。
that A property was a number.

20
00:01:13.950 --> 00:01:18.278
单形，每次都是一样的。
Monomorphic, it's the same
thing every time.

21
00:01:18.278 --> 00:01:24.981
这是多态的，也就是我看到了很多东西，或者看到了一些东西。
There's polymorphic, which is I see
many things or see a few things.

22
00:01:24.981 --> 00:01:30.984
有时有B，有时有C，一般都是一样的。
Sometimes there's a B on it, sometimes
there's a C, it's generally the same.

23
00:01:30.984 --> 00:01:33.111
我已经看到了它的一个子集，我基本上可以在这种情况下，
I've seen it just a subset of things,
I can basically go in this case,

24
00:01:33.111 --> 00:01:33.953
我要优化这里。
I'm gonna optimize here.

25
00:01:33.953 --> 00:01:38.798
在另一种情况下，我将在那里进行优化，我会想出办法的。
In this other case I'm gonna
optimize there, I'll figure it out.

26
00:01:38.798 --> 00:01:41.364
最后是巨型变态，
And then finally there's megamorphism,

27
00:01:41.364 --> 00:01:44.006
这是一大堆不同的东西。
which is a whole bunch
of different things.

28
00:01:44.006 --> 00:01:46.753
我不知道发生了什么，我不知道会发生什么。
I don't know what's happening,
I don't know what to expect.

29
00:01:46.753 --> 00:01:49.730
我不会优化这种情况，对吧。
I'm not gonna optimize this situation,
right.

30
00:01:49.730 --> 00:01:54.598
你可以幸运地猜一下，你想在这个频谱上处于什么位置，
You can take a lucky guess on like,
where you wanna be on this spectrum of,

31
00:01:54.598 --> 00:01:58.917
我是高度优化的一种东西，主要是优化
I'm highly optimized for
one kinda thing, mostly optimized for

32
00:01:58.917 --> 00:02:02.156
有几种东西没有优化，对吧。
a few kinds of things are not optimized,
right.

33
00:02:02.156 --> 00:02:04.653
在这种情况下，你可以幸运地猜一猜你想在哪里。
You can take a lucky guess on
where you wanna be in that case.

34
00:02:04.653 --> 00:02:08.312
这不仅适用于对象，就像我们之前看到的加号运算符。
This is not just for objects,
like the plus operator we saw before.

35
00:02:08.312 --> 00:02:11.134
它的行为方式与它的行为方式不同，
Behaves way differently than it would,

36
00:02:11.134 --> 00:02:14.792
当我们总是有数字的时候，有很多东西。
when we always got numbers
there's a lot of things.

37
00:02:14.792 --> 00:02:17.930
一般来说，比较一致的东西是，
Generally speaking,
the more consistent stuff is,

38
00:02:17.930 --> 00:02:22.330
可以进行的推测性优化越多，代码就越快。
the more speculative optimizations
can be done, the faster your code is.

39
00:02:22.330 --> 00:02:25.780
所以，是的，这是总结，单形。
So yeah, here's the summary again,
monomorphic.

40
00:02:25.780 --> 00:02:29.317
这就是我所知道的一切，我已经见过这种类型的物体百万次了。
This is all I know, I've seen this
type of object a million times.

41
00:02:29.317 --> 00:02:31.626
我准备好了，我知道该怎么做，这是我的事情。
I'm ready, I know what to do,
this is my thing.

42
00:02:31.626 --> 00:02:36.049
多态基本上是，我见过一些不同的，
Polymorphic is basically,
I've seen a few different ones,

43
00:02:36.049 --> 00:02:39.798
好的，这实际上是一个切换语句。
all right,
it's effectively a switch statement.

44
00:02:39.798 --> 00:02:41.985
好吧，如果是这种事，就这么做。
Okay, if it's this kinda thing, do this.

45
00:02:41.985 --> 00:02:44.331
如果是另一种事情，那就做另一件事，对吧。
If it's this other kind of thing,
do the other thing, right.

46
00:02:44.331 --> 00:02:47.947
你可以做其中的一些，这不是免费的，开关语句。
And you can do a few of those,
that's not free, that switch statement.

47
00:02:47.947 --> 00:02:49.920
如果switch语句变得太大，
And if the switch
statement gets too large,

48
00:02:49.920 --> 00:02:51.795
就像不值得了，对吧。
it's like not worth it anymore, right.

49
00:02:51.795 --> 00:02:54.099
突然之间，我们都写好了代码，
All of a sudden it's like,
we've all written the code,

50
00:02:54.099 --> 00:02:57.271
您可以将条件放在条件内，
where you can put a conditional inside
a conditional, inside a conditional,

51
00:02:57.271 --> 00:03:00.269
内部有条件，但最终变得站不住脚，对吧。
inside a conditional, but
eventually that becomes untenable, right.

52
00:03:00.269 --> 00:03:05.417
也许你们都是比我更好的程序员，但还没有做到这一点。
Maybe you're all better programmers
than me and haven't done that.

53
00:03:05.417 --> 00:03:06.740
所以我们知道这并不是真正的可伸缩性。
So we know that doesn't really scale.

54
00:03:06.740 --> 00:03:09.239
所以最终它放弃了，我看到了很多东西。
So eventually it gives up and
I've seen a lot of things.

55
00:03:09.239 --> 00:03:13.919
我不是专业的，我只是做正常的事情，对吧。
I'm not specialized in any of them,
I'm just gonna do the normal thing, right.

56
00:03:13.919 --> 00:03:15.974
我们越接近单态，我们得到的就越好。
The closer we can stay to monomorphic,
the better we get.

57
00:03:15.974 --> 00:03:21.134
但这是个很好的建议，但那是不可行的，
But that's neat advice,
but that's not actionable,

58
00:03:21.134 --> 00:03:24.331
这些东西是怎么工作的，对吧？
how does any of this work, right?

59
00:03:24.331 --> 00:03:26.740
所以我们会稍微探索一下
So we'll kind of explore
that a little bit.

60
00:03:26.740 --> 00:03:28.406
所以我们问题，
So we ask question of,

61
00:03:28.406 --> 00:03:32.631
浏览器如何判断某物的类型？
how does the browser figure
out the type of something is?

62
00:03:32.631 --> 00:03:36.188
我们要做的是，我们会回去做更多的实验。
And what we'll do is, we're gonna
go back to more a few experiments.

63
00:03:36.188 --> 00:03:41.156
我们将看看另一个类似于特殊隐藏函数的函数
We're gonna take a look at another one of
those like special hidden functions that

64
00:03:41.156 --> 00:03:44.478
基本上可以说，你们两个是一样的，对吧？
can basically say like,
are you two the same, right?

65
00:03:44.478 --> 00:03:49.182
在Chrome中，每一个被称为不同的东西，
In Chrome it's called something
different in each one,

66
00:03:49.182 --> 00:03:52.122
在其中一个浏览器中，形状。
in one of the browsers, the shape.

67
00:03:52.122 --> 00:03:55.335
Chrome内部称它们为隐藏类或映射。
Chrome calls them hidden classes or
maps internally.

68
00:03:55.335 --> 00:03:57.925
有一大堆不同的名字但是
There's a whole bunch
of different names but

69
00:03:57.925 --> 00:04:01.066
大多数引擎都有一些这样的概念，对吧。
most of the engines have
some concept of this, right.

70
00:04:01.066 --> 00:04:05.669
这是一种跟踪什么类型的东西是完全无类型的
It's a way of keeping track what type
something is in a completely untyped

71
00:04:05.669 --> 00:04:06.419
语言。
language.
