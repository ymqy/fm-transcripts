WEBVTT

1
00:00:00.200 --> 00:00:02.016
&gt；&gt；steve kinney：好的，所以我们将通过这个的每个部分。
&gt;&gt; Steve Kinney: All right, so we're
going to go through each part of this.

2
00:00:02.016 --> 00:00:07.099
解析，所以团队相信源代码是真实的
Parsing, so it's team's belief
that the source code is the true

3
00:00:07.099 --> 00:00:12.611
应用程序的意图，但然后您需要弄清楚这意味着什么。
intention of the application, but then
you need to figure out what that means.

4
00:00:12.611 --> 00:00:14.460
解析很慢。
Parsing is slow.

5
00:00:14.460 --> 00:00:19.269
解析需要花费大量的时间来处理您的10，000行响应应用程序和
Parsing takes a lot of time to take your
like 10,000 line react application and

6
00:00:19.269 --> 00:00:20.974
弄清楚这一切意味着什么。
figure out what it all means.

7
00:00:20.974 --> 00:00:25.339
如果我的意思是你去看看一些精简的代码，看看你是否能找到它。
If I mean you go look at some minified
code and see if you can figure it out.

8
00:00:25.339 --> 00:00:30.664
解析可能会非常慢，在移动设备上可能会慢到每秒1兆字节，对吧？
Parsing can be so slow it can be as slow
as one megabyte a second on mobile, right?

9
00:00:30.664 --> 00:00:33.555
所以如果你的目标是一秒钟的加载时间，比如
So if you're aiming for
that one second load time like

10
00:00:33.555 --> 00:00:37.109
你必须把它交给用户，你必须把它全部解析出来。
you've gotta get it to the user
you've gotta parse it all.

11
00:00:37.109 --> 00:00:39.299
如果你有一个巨大的应用程序就不会发生。
Not gonna happen if you
have a giant application.

12
00:00:41.939 --> 00:00:44.840
因此，一种减少解析时间的方法，再一次，
So one way to reduce the parsing time,
again,

13
00:00:44.840 --> 00:00:46.337
这是金科玉律，对吧？
this is the golden rule thing, right?

14
00:00:46.337 --> 00:00:49.648
是[笑]有更少的代码需要解析。
Is [LAUGH] to have less code to parse.

15
00:00:49.648 --> 00:00:52.805
另一个金科玉律是根据需要进行尽可能多的解析，并且
The other golden rule is to do
as much parsing as you need and

16
00:00:52.805 --> 00:00:54.679
只要你能逃脱惩罚。
as little as you can get away with.

17
00:00:54.679 --> 00:00:57.058
如果有可以稍后解析的东西，我们该怎么做？
If there's things you can parse later,
what do we do?

18
00:00:58.380 --> 00:01:00.020
以后再分析，所以，
Parse it later, so,

19
00:01:00.020 --> 00:01:03.850
V8解析的工作方式是分两个阶段实现的。
the way that V8 parsing works is
it's implemented in two phases.

20
00:01:03.850 --> 00:01:06.269
有急切的解析，这就是你所想的。
There's eager parsing,
which is what you think about.

21
00:01:06.269 --> 00:01:10.090
就像，拿着密码，把它变成ST，我们准备好摇滚了，对吧？
Like, take the code, turn it into the ST,
we're ready to rock, right?

22
00:01:11.280 --> 00:01:15.530
那就是，你想要解析的任何东西，如果你想要解析的话，
That's, anything you think about parsing,
if you think about parsing at all,

23
00:01:15.530 --> 00:01:18.129
就像你想的那样。
like it's what you think of.

24
00:01:18.129 --> 00:01:22.545
然后是懒惰解析，对吧，谁不喜欢懒惰呢？
Then there is lazy parsing, right,
and who doesn't like laziness right?

25
00:01:22.545 --> 00:01:26.823
这就是将拼写错误的单词裸露出来。
Which is to do the misspelled word bare.

26
00:01:26.823 --> 00:01:30.450
当我练习的时候，我也注意到了这一点，并且从未改变过。
When I was practicing I also
noticed that and never changed it.

27
00:01:30.450 --> 00:01:34.650
拼写错误的单词裸露喜欢做你能做的，喜欢做这个如果你需要现在。
Misspelled word bare like do what you can,
like do this if you need now.

28
00:01:34.650 --> 00:01:36.629
任何你现在不需要解析的东西。
Anything that you don't
need to parse right now.

29
00:01:36.629 --> 00:01:39.520
现在不要解析，以后再解析，对吧？
Don't parse it right now,
parse it later, right?

30
00:01:39.520 --> 00:01:43.240
因为这会使您的应用程序更快，所以您无法控制这一点。
Cuz that will make your application
faster, you have no control over this.

31
00:01:43.240 --> 00:01:46.020
这实际上就是
This is effectively what

32
00:01:46.020 --> 00:01:49.879
Chrome正在幕后努力让你的应用程序更快。
Chrome is doing under the hood to try
make your application faster for you.

33
00:01:49.879 --> 00:01:53.329
有很多表演的东西，这是两个人在中间相遇。
With a lot of this performance stuff,
it's two people meeting in the middle.

34
00:01:53.329 --> 00:01:56.469
因此，您所做的事情使您的应用程序更快，
So you doing things that make
your application faster and

35
00:01:56.469 --> 00:02:00.689
它是浏览器供应商做的事情，也使浏览器更快。
it is the browser vendors doing things
to also make the browsers faster.

36
00:02:00.689 --> 00:02:04.799
希望我们能一起跟上Java脚本不断上涨的成本。
And hopefully, together, we can keep
up with the rising cost of JAVA Script.

37
00:02:06.280 --> 00:02:09.419
一般来说，惰性解析是一件好事，对吧？
Generally speaking,
lazy parsing is a good thing, right?

38
00:02:09.419 --> 00:02:13.310
它遵循黄金法则，它是有意义的，它应该是好的。
It follows the golden rules,
it makes sense, it should be good.

39
00:02:13.310 --> 00:02:17.740
因为做更少的工作更快，那么它是如何工作的呢？
Cuz doing less work is faster,
so how does it work?

40
00:02:17.740 --> 00:02:19.170
我们扫描顶层范围，
We scan through the top level scope,

41
00:02:19.170 --> 00:02:20.990
我们解析所有真正要做某事的代码。
we parse all the code that's
actually gonna do something.

42
00:02:20.990 --> 00:02:25.129
就像如果有一个varx等于2，是的，我们需要我们在顶级。
Like if there's a varx equals 2, yeah,
we need that we're in the top level.

43
00:02:25.129 --> 00:02:27.340
但是如果有一些功能，比如那个功能，
But if there's some function,
like that function,

44
00:02:27.340 --> 00:02:28.639
我们不知道什么时候会被叫醒。
we don't know when it's gonna get called.

45
00:02:28.639 --> 00:02:30.530
它可以在Ajax请求后被调用。
It could get called after an ajax request.

46
00:02:30.530 --> 00:02:33.439
我们需要知道它现在做什么的所有细节吗？
Do we need to know all the details
about what it does right now?

47
00:02:33.439 --> 00:02:38.846
不，跳过它，我们稍后再做，我们需要的时候会解析它，让我们开始
No, skip it, we'll do it later, we'll
parse it when we need it, let's get to

48
00:02:38.846 --> 00:02:43.956
现在关键的东西，我们以后再担心其他的东西。
the critical stuff right now and
we'll worry about the other stuff later.

49
00:02:43.956 --> 00:02:46.329
但那可能会咬我们，对吧？
But that could bite us, right?

50
00:02:46.329 --> 00:02:47.939
这里有一个例子。
Here's an example.

51
00:02:47.939 --> 00:02:54.569
好吧，超级，是的，这很天真，但是常量a是1，b是2，很好，对吧？
All right, super, yeah, it's naive but
const a is 1, b is 2, fine, right?

52
00:02:54.569 --> 00:02:56.971
解析这些，我需要这些值。
Parse those, I'm gonna need those values.

53
00:02:56.971 --> 00:02:58.860
然后我遇到了这个函数。
Then I come across this function.

54
00:02:58.860 --> 00:03:01.990
我想，这是一个函数声明，我会跳过它。
I'm like, that's a function declaration,
I'm gonna skip that.

55
00:03:01.990 --> 00:03:04.680
那之后直接发生了什么？
Then what happens directly afterwards?

56
00:03:04.680 --> 00:03:06.569
你需要这个功能。
You need the function.

57
00:03:06.569 --> 00:03:11.979
那么这里真正发生的是什么？&gt；&gt；Steve Kinney：我们
So what really happens here is what?
&gt;&gt; Steve Kinney: We

58
00:03:11.979 --> 00:03:13.960
想想我们懒惰的解析。
think about we lazy parse.

59
00:03:13.960 --> 00:03:16.479
当我们需要一个函数时，我们会急切地解析它。
And when we need a function
we eager parse it.

60
00:03:16.479 --> 00:03:20.193
那么代码中发生了什么呢？&gt；&gt；扬声器2：它没有顺序
So what's happening in that code?
&gt;&gt; Speaker 2: It's out of order

61
00:03:20.193 --> 00:03:21.610
&gt；&gt；steve kinney：它坏了，但是
&gt;&gt; Steve Kinney: It's out of order but

62
00:03:21.610 --> 00:03:27.128
我们也在懒惰地解析它，然后我们必须立即急切地解析它，对吗？
we're also lazy parsing it and then we
have to immediately eager parse it, right?

63
00:03:27.128 --> 00:03:31.868
如果不做事情比做事情快
And if not doing stuff is
faster than doing stuff doing

64
00:03:31.868 --> 00:03:36.569
事情做两次比做一次更慢。
stuff twice is slower
than doing it once right.

65
00:03:36.569 --> 00:03:38.520
所以让我们的代码更快和
So the thing that makes
our code faster and

66
00:03:38.520 --> 00:03:42.819
理所当然的是，就像一个人为的例子，绝对正确。
granted is that like a contrived example,
absolutely right.

67
00:03:42.819 --> 00:03:47.840
但是我们会看到每个人为的例子都有一定的含义
But we'll see that every contrived example
has some amount of implication for

68
00:03:47.840 --> 00:03:49.620
现实世界的应用程序，对吧？
real world applications, right?

69
00:03:49.620 --> 00:03:52.326
它们不是您下次进行代码审查时应该引用的内容，并且
They are not the thing you should cite
next time you do a code review and

70
00:03:52.326 --> 00:03:54.437
你想让某人在事物周围加上圆括号。
you want somebody to add
parentheses around things.

71
00:03:54.437 --> 00:03:57.247
但它们绝对是值得思考的事情
But they are definitely things
that are worth thinking

72
00:03:57.247 --> 00:03:58.942
关于。&gt；&gt；steve kinney：那么，
about.
&gt;&gt; Steve Kinney: So,

73
00:03:58.942 --> 00:04:02.854
如果我们真的把一些东西放在括号里，就像我刚才提到的，
if we actually wrap something in
parentheses, as I mentioned a second ago,

74
00:04:02.854 --> 00:04:04.699
它实际上会得到急切的解析。
it will actually get eager parsed.

75
00:04:06.080 --> 00:04:08.520
这是不是意味着你应该继续
Does that mean that you
should go ahead and

76
00:04:08.520 --> 00:04:10.838
是否将应用程序中的每个函数都放在括号中？
wrap every function in your
application in parentheses?

77
00:04:13.219 --> 00:04:15.187
没有权利？
No right?

78
00:04:15.187 --> 00:04:17.139
知道会发生这种事是有帮助的。
It's helpful to know that happens.

79
00:04:17.139 --> 00:04:22.417
我们称之为微观优化，这是一个很长的花哨词汇
One that's we we call micro-optimatization
which is a long fancy word for

80
00:04:22.417 --> 00:04:26.019
说我想让我的同事恨我。
saying I wanna get my
co-workers to hate me.

81
00:04:26.019 --> 00:04:30.221
但是两个，就像这些东西加起来我就像他们完全一样但是两个，
But two, like these things add up
I'm like they totally do but two,

82
00:04:30.221 --> 00:04:33.836
有一种算法试图帮助你
there's an algorithm that's
trying to help you there and

83
00:04:33.836 --> 00:04:38.629
如果您将每个函数都放在圆括号中，那么您基本上就是在选择退出所有函数
if you wrap every function in parentheses
you're basically opting out of all

84
00:04:38.629 --> 00:04:41.826
懒惰解析，这有点违背了目的。
lazy parsing,
which kind of defeats the purpose.

85
00:04:41.826 --> 00:04:47.560
如果你注意到有问题，它在大多数情况下都能很好地工作，对吗？
It works well most of the time if you
notice there is a problem, right?

86
00:04:47.560 --> 00:04:51.949
理论上你可以这样解决，比那更好，
You could theoretically solve it this way,
better than that,

87
00:04:51.949 --> 00:04:53.480
通常会有图书馆帮助你。
there's usually libraries
that will help you.

88
00:04:53.480 --> 00:04:57.360
这个叫做OptomizeJS，你可以想象它的作用，
This one is called OptomizeJS,
you can imagine what it does,

89
00:04:57.360 --> 00:05:01.970
它在解析的帮助下优化了JS。
it optimizes JS with the help of parsing.

90
00:05:03.120 --> 00:05:08.360
我认为这里的有趣之处在于它将通过
And I think what's kind of interesting
here is that it will go through and

91
00:05:08.360 --> 00:05:11.040
试着弄清楚，而不是每次都要把所有东西都放在括号里，
try to figure out, not every time,
to wrap everything in parentheses,

92
00:05:11.040 --> 00:05:13.089
因为那会很糟糕，但就像是，已知的案例。
because that would be bad,
but like, known cases.

93
00:05:13.089 --> 00:05:14.839
它所做的就是继续前进
What it does is it goes ahead and

94
00:05:14.839 --> 00:05:20.110
解析您的代码以找出一些常见的情况，我必须去哪里，
parses your code to figure out some of the
common cases where did I have to go and

95
00:05:20.110 --> 00:05:22.759
事后立即急于解析，对吧？
immediately eager parse it afterwards,
right?

96
00:05:22.759 --> 00:05:25.449
它会帮你修好一些东西。
And it'll go and
fix some of these things for you.
