WEBVTT

1
00:00:00.210 --> 00:00:01.480
&gt；&gt；steve kinney：那么我们如何改进呢？
&gt;&gt; Steve Kinney: So
how do we improve that?

2
00:00:01.480 --> 00:00:05.370
我们必须测量。
We have to measure.

3
00:00:05.370 --> 00:00:07.940
我没有必要做这个性能优化。
There's no point like I'm gonna
do this performance optimization.

4
00:00:07.940 --> 00:00:12.500
你怎么知道A它起作用了还是B你实际上没有放慢速度，对吗？
How do you know that A it worked or B you
didn't actually slow things down, right?

5
00:00:12.500 --> 00:00:15.519
因为如果你不知道自己在做什么，这有时是可能的。
Cuz that is sometimes possible if you
don't actually know what you're doing.

6
00:00:15.519 --> 00:00:16.867
所以我们总是想先测量一下。
So we always want to measure first.

7
00:00:16.867 --> 00:00:21.210
这是Rob Pike的一句话，这是Measure。
This is a quote from Rob Pike,
which is measure.

8
00:00:21.210 --> 00:00:23.670
在测量之前不要调整速度，并且
Don't tune for
speed until you've measured, and

9
00:00:23.670 --> 00:00:27.269
即使这样，除非其中一部分压倒了其余的部分，否则不要这样做。
even then don't unless one
part overwhelms the rest.

10
00:00:27.269 --> 00:00:31.655
从第一页开始很容易，而且存在性能瓶颈，但是
It's easy to start with the first page,
and there's a performance bottle neck, but

11
00:00:31.655 --> 00:00:33.624
这可能不是最重要的。
it might not be the most important one.

12
00:00:33.624 --> 00:00:38.271
有一个叫做Skylight的应用程序，它是Rails性能监控
There's this application called Skylight,
which is rails performance monitoring

13
00:00:38.271 --> 00:00:41.052
东西，它所做的就是根据痛苦对东西进行评级。
thing, and
what it does is it rates stuff by agony.

14
00:00:41.052 --> 00:00:44.807
痛苦度量是页面有多慢，
The agony metric is how slow that page is,

15
00:00:44.807 --> 00:00:49.359
乘以访问该页面的人数。
multiplied by how many
people visit that page.

16
00:00:49.359 --> 00:00:52.929
因此，如果您的服务条款页面加载缓慢，
So if your terms of service
page is slow to load,

17
00:00:52.929 --> 00:00:57.503
这是你应该对主页进行优化的第一件事吗？
is that the first thing you
should optimize vs the home page?

18
00:00:57.503 --> 00:01:00.479
主页可能不会是。
The home page probably won't be.

19
00:01:00.479 --> 00:01:03.399
就像是主页，它获得了所有的流量与服务条款
Like yeah the home page which gets all
this traffic versus the terms of service

20
00:01:03.399 --> 00:01:05.469
没人读对吗？
which nobody reads right?

21
00:01:05.469 --> 00:01:09.257
你应该喜欢优化那些比较重要的事情，然后从那里开始。
You should like optimize the things that
are kind of important and start there.

22
00:01:09.257 --> 00:01:13.593
所以，是的，我们不想盲目地去，就像你可以看到这个，然后去，就像我知道
So yeah we don't wanna go just blindly
like you can see this and go like I know

23
00:01:13.593 --> 00:01:18.620
所有这些事情，现在我要去，然后实现它，我的应用程序，但喜欢。
all these things now I'm gonna go and
then implement it my application but like.

24
00:01:18.620 --> 00:01:21.510
我们想确保我们知道发生了什么，因为每个
We want to make sure we know
what's happening because every

25
00:01:21.510 --> 00:01:23.430
抽象有某种取舍。
abstraction has some kind of trade-off.

26
00:01:23.430 --> 00:01:27.060
我们将在今天的课程中看到一些东西，就像Chrome团队
We'll see things in this course today
where it's like the Chrome team

27
00:01:27.060 --> 00:01:31.569
实现了这一特性，以便在大多数情况下使事情更快，但是
implemented this one feature to make
things faster most of the time, but

28
00:01:31.569 --> 00:01:35.090
事实证明，有些时候它会让一些事情变得更慢。
it turns out that some of the time
it makes some of the things slower.

29
00:01:35.090 --> 00:01:38.579
除非你在测量，否则你无法知道这一点。
Unless you're measuring you're
gonna have no way of knowing that.

30
00:01:38.579 --> 00:01:42.090
你可能会对你的应用程序做一件坏事，
And you could be doing quote unquote
a bad thing to your application,

31
00:01:42.090 --> 00:01:44.409
以做好事的名义，对吗？
in the name of doing a good thing, right?

32
00:01:44.409 --> 00:01:45.819
所以测量很重要，因为就像，
So it's important to measure because like,

33
00:01:45.819 --> 00:01:50.229
是的，它真的很容易看到你的应用程序上的下一个拉请求，而且
yeah, it gets really like easy to see the
very next pull request on your app, and

34
00:01:50.229 --> 00:01:54.020
就像你在博客上读到的关于表现的建议一样，
start like dispensing advice that you
read on a blog post about performance,

35
00:01:54.020 --> 00:01:56.069
当我们实际上没有任何真正的数据可以谈论的时候。
when we don't actually have
any real data to talk about.

36
00:01:58.020 --> 00:02:00.700
这是我认为我们确实需要定期寻找的事情之一
And it is one of those things where I do
think we do need to regularly be looking

37
00:02:00.700 --> 00:02:02.689
因为如果我们不是，是的，
at performance,
because if we're not, yeah,

38
00:02:02.689 --> 00:02:06.730
是的，它足够快，直到它不是，然后它通常不是一个大的
yeah it's fast enough, until it's not,
and then it's usually not one big

39
00:02:06.730 --> 00:02:11.139
性能问题是你的问题，但这就像千刀之死。
performance thing that is your problem,
but it's like death by a thousand cuts.

40
00:02:11.139 --> 00:02:15.259
这是一千件事情，花费的时间大约是它们应有时间的两倍，
It's a thousand things that take
about twice as long as they should,

41
00:02:15.259 --> 00:02:19.478
这最终会将您的应用程序搞得一团糟，我可以证明这一点。
that end up bringing your application
to a crawl and I can testify to that.

42
00:02:21.050 --> 00:02:22.990
所以，只是有一些事情需要考虑。
So, just some things to think about.

43
00:02:22.990 --> 00:02:27.340
我们是在测试花哨的Macbook Pro还是消费级硬件？
Are we testing on fancy Macbook Pros or
consumer grade hardware?

44
00:02:27.340 --> 00:02:29.650
我们是否模拟了不完美的网络条件？
Are we simulating less than
perfect network conditions?

45
00:02:29.650 --> 00:02:34.400
我们将讨论一下wi-fi实际上有多慢是非常糟糕的
We'll talk a little bit about how slow
wi-fi is actually phenomenally worse

46
00:02:34.400 --> 00:02:38.819
比喜欢或不一致的WiFi甚至比一致的慢WiFi更糟糕，
than like or inconsistent WiFi is even
worst than a consistent slow WiFi,

47
00:02:38.819 --> 00:02:41.379
但是，即使是对用户来说，缓慢的WiFi也只是普通的。
but slow WiFi even for
users is just general.

48
00:02:41.379 --> 00:02:43.050
我宁愿没有WiFi也不愿使用慢WiFi。
I'd rather have no WiFi than slow WiFi.

49
00:02:43.050 --> 00:02:46.513
我宁愿没事，没有互联网，我要读一本书。
I'd rather be okay, there's no Internet,
I'm gonna read a book.

50
00:02:46.513 --> 00:02:50.189
我可以看到时间线正在加载。
I can see the timeline loading.

51
00:02:52.699 --> 00:02:53.430
就像不酷一样。
Like not cool.

52
00:02:53.430 --> 00:02:56.052
然后最后考虑绩效预算。
And then finally thinking
about performance budgets.

53
00:02:56.052 --> 00:02:58.435
我认为这是一种非常有用的技术，
I think this is a really
useful technique of like,

54
00:02:58.435 --> 00:03:00.509
这是我们的应用程序的状态。
this is the state of our application.

55
00:03:00.509 --> 00:03:02.090
我们不希望它变得这么慢。
We don't want it to get this much slower.

56
00:03:02.090 --> 00:03:03.639
我们希望它能更快
We'd like it to get this much faster and

57
00:03:03.639 --> 00:03:06.810
从那里开始，然后在你改进一些东西的时候设置那些新的预算。
starting there and then setting those
new budgets as you improve some stuff.

58
00:03:09.689 --> 00:03:14.530
所以最后一件要考虑的事情是，测量不是免费的。
So the one last thing to think about is,
measuring is not free.

59
00:03:14.530 --> 00:03:18.396
我会把一堆控制台日志放在我的应用程序中，他们会记录时间
I'm gonna put a bunch of console logs in
my application, they're gonna log the time

60
00:03:18.396 --> 00:03:21.402
除了那些控制台日志之外的每一秒都需要执行，对吗？
every second except those console
logs need to execute, right?

61
00:03:21.402 --> 00:03:23.800
而你正在通过查看它来减慢你的应用程序的速度。
And you are slowing down
your app by looking at it.

62
00:03:23.800 --> 00:03:26.360
这是另一种需要记住的重要事情，
And that's another kind of
important thing to keep in mind,

63
00:03:26.360 --> 00:03:30.370
你可以把所有这些报告矩阵放在任何地方。
is you can put all these
reporting matrix everywhere.

64
00:03:30.370 --> 00:03:35.012
但是这样做也会减慢应用程序的速度，所以
But you will also slow down
the application by doing that, so

65
00:03:35.012 --> 00:03:37.022
别得意忘形。
don't get carried away.

66
00:03:37.022 --> 00:03:41.062
最后一条建议是，很多这些东西会考虑什么
And one final piece of advice is a lot of
this stuff is gonna is thinking about what

67
00:03:41.062 --> 00:03:42.789
我们称之为微观优化。
we call micro-optimizations.

68
00:03:42.789 --> 00:03:46.599
这些小小的东西，我们会得到这个按钮，只是去一点点
These tiny little things we would get
the this button to go just a little bit

69
00:03:46.599 --> 00:03:47.527
快点，对。
faster, right.

70
00:03:47.527 --> 00:03:51.735
在我们有前端大师的国家管理课程中，我们谈了一点
In the state management course that we
have on Front End Masters we talk a little

71
00:03:51.735 --> 00:03:55.370
有点关于这样一个事实，有时仅仅是你存储数据的方式和
bit about the fact that sometimes
just the way you store your data and

72
00:03:55.370 --> 00:03:57.590
不是做一堆疯狂的事情。
not doing a bunch of crazy stuff.

73
00:03:57.590 --> 00:04:02.250
而且您构建应用程序本身的方式可以让事情变得更快
And the way you architect the application,
itself, can make stuff faster

74
00:04:02.250 --> 00:04:05.960
甚至在您担心实际的部件和编译性能之前。
before you even worry about the actual
parts and compilation performance.

75
00:04:05.960 --> 00:04:09.939
有时它就像，嘿，你真的有一个页面上有1000行的表。
Sometimes it's like, hey, you actually
have a table with 1000 rows on the page.

76
00:04:09.939 --> 00:04:13.759
在DOM中拥有所有这些行是很慢的。
And having all those
rows in the DOM is slow.

77
00:04:13.759 --> 00:04:16.230
如果只是添加分页呢？
What if you just added pagination?

78
00:04:16.230 --> 00:04:19.269
有时候，答案并不是我们今天要讨论的一些东西。
Sometimes the answer is not some of
the stuff we're going to talk about today.

79
00:04:19.269 --> 00:04:21.394
我现在想做那个免责声明。
I want to make that disclaimer now.

80
00:04:21.394 --> 00:04:24.778
有时只考虑应用程序的设计，
Sometimes just thinking about
the design of your application,

81
00:04:24.778 --> 00:04:27.790
在应用程序中管理状态的方式。
the way you manage the state
in your application.

82
00:04:27.790 --> 00:04:32.090
没有一颗银弹可以解决你所有的性能问题，
There's not one silver bullet that's going
to solve all your performance problems,

83
00:04:32.090 --> 00:04:36.670
这就是为什么我们都能拿到钱，对吧。
which is why we all get paid Money, right.

84
00:04:36.670 --> 00:04:41.659
因为如果是一个简单的方法，只要应用这个规则，我们就会让计算机来做，对吧。
Cuz if was an easy, just apply this rule,
we'd have computers do it, right.

85
00:04:41.659 --> 00:04:45.180
我们可以自动化到没有批判性思维的程度
Everything that we can automate to the
point where there's no critical thinking

86
00:04:45.180 --> 00:04:48.949
关于它，我们已经加入了算法，这就是那些
about it, we have put into algorithms,
and that's how the ones and

87
00:04:48.949 --> 00:04:53.069
零来了，错误进入我的电脑，让事情发生。
zeroes that come over, the error
into my computer, make stuff happen.

88
00:04:53.069 --> 00:04:53.569
好吧。
All right.

89
00:04:54.649 --> 00:04:58.459
我们最后的免责声明是有三个层次的建议，
Final disclaimer as we go through this
is that there are three tiers of advice,

90
00:04:58.459 --> 00:05:00.480
一定要这么做。
definitely do this.

91
00:05:00.480 --> 00:05:03.040
也许这样做，但测量之前和之后。
Maybe do this, but
measure before and after.

92
00:05:03.040 --> 00:05:06.550
只有当你有需要解决的问题时才这样做，对吧？
And only do this if you have
a problem that needs solving, right?

93
00:05:06.550 --> 00:05:10.740
因此，我们使用这些作为我们的三个基准，因为我们谈论不同的
And so, we kind of use these as our three
benchmarks as we talk about different

94
00:05:10.740 --> 00:05:14.759
技术，因为我再说一遍，今天我要说100遍。
techniques cuz again I'll say this,
I'm going to say this 100 times today.

95
00:05:14.759 --> 00:05:20.810
有些事情可能会使您的应用程序在某些情况下变得更快，在另一些情况下变得更慢。
Some things might make your application
faster in some cases or slower in another.

96
00:05:20.810 --> 00:05:24.220
就像，除非你知道问题是什么，否则你不知道会发生什么。
And like, unless you know what the problem
is, you don't know what's going to happen.

97
00:05:26.490 --> 00:05:31.569
现在，我很高兴向你们展示这门课程的TLDR，
Now, I'm happy to unveil to you,
the TLDR of this course,

98
00:05:31.569 --> 00:05:33.569
这是我的两条金科玉律。
which are my two golden
rules of performance.

99
00:05:33.569 --> 00:05:37.519
你们都准备好了吗？
Are you all prepared for this?

100
00:05:38.519 --> 00:05:42.284
第一条，做的事情越少，花的时间就越少。
Rule number one,
doing less stuff takes less time.

101
00:05:42.284 --> 00:05:45.060
[笑]你笑，但就像字面上说的，
[LAUGH] You laugh but like literally,

102
00:05:45.060 --> 00:05:49.470
[笑]这就是我们今天所做的，就像我们怎么做更少的东西？
[LAUGH] this is all we're doing today,
is like how do we do less stuff?

103
00:05:49.470 --> 00:05:52.459
因为任何时候你做的东西越少，速度就越快。
Cuz anytime you do less stuff it's faster.

104
00:05:52.459 --> 00:05:55.259
不做某事比做某事快得多。
Not doing something is way
faster than doing something.

105
00:05:57.495 --> 00:05:58.060
&gt；&gt；steve kinney：酷。
&gt;&gt; Steve Kinney: Cool.

106
00:05:59.430 --> 00:06:00.519
我毁了这张幻灯片。
I ruined this slide.

107
00:06:00.519 --> 00:06:01.375
我们会继续的。
We'll go on.

108
00:06:01.375 --> 00:06:06.629
[笑]对于第二个，有人会争辩说，这是一个[INAUDIBLE]
[LAUGH] To the second one which is,
one would argue, this is a [INAUDIBLE] to

109
00:06:06.629 --> 00:06:12.610
第一个，那就是，以后做事情比现在做好。
the first one, which is, doing stuff
later is better than doing it now.

110
00:06:12.610 --> 00:06:14.449
对吧？但以后再做，
Right?
But doing it later,

111
00:06:14.449 --> 00:06:16.720
你现在不能这么做。
you're not doing it now.

112
00:06:17.949 --> 00:06:19.329
还有什么比做事情更快？
And what's faster than doing stuff?

113
00:06:20.399 --> 00:06:21.790
什么都不做。
Not doing stuff.

114
00:06:21.790 --> 00:06:25.689
所以，当你有疑问的时候，如果你可以不去做，那就不要去做。
So, when in doubt, if you can get
away with not doing it, don't do it.

115
00:06:25.689 --> 00:06:29.127
如果你必须做这件事，你可以以后再做，以后再做。
If you have to do it and
you can do it later, do it later.

116
00:06:29.127 --> 00:06:31.627
有人会认为这是绩效建议，
One would argue this
is performance advice,

117
00:06:31.627 --> 00:06:34.331
另一个人可能会认为这是生活建议。
another person might argue
this is life advice.

118
00:06:34.331 --> 00:06:36.610
我让你来评判这件事。
I'll let you be the judge of that.

119
00:06:36.610 --> 00:06:41.829
我不打算走这条路，但对于网络性能来说，这绝对是真的。
I'm not going to go down that road but
it's definitely true for web performance.

120
00:06:42.920 --> 00:06:44.350
好的，今天的大致轮廓。
All right, rough outline of the day.

121
00:06:44.350 --> 00:06:46.653
谈谈JavaScript性能。
Talk about JavaScript performance.

122
00:06:46.653 --> 00:06:49.639
有人会争辩说，如果我们按照时间顺序来做这件事，我们就会
One would argue that if we were doing this
in chronological order we were going to

123
00:06:49.639 --> 00:06:51.153
首先讨论负载性能，但是
talk about load performance first, but

124
00:06:51.153 --> 00:06:52.949
我们不是按时间顺序来做这件事的。
we're not doing this in
chronological order.

125
00:06:52.949 --> 00:06:54.040
我们按我的顺序来做，
We're doing this in my order,

126
00:06:54.040 --> 00:06:56.370
这就是我们将要讨论的JavaScript性能。
which is we're going to talk
about JavaScript performance.

127
00:06:56.370 --> 00:07:00.480
我们希望编写运行更快、更晚或根本不运行的代码，对吗？
We wanna write code that runs faster,
later, or not at all, right?

128
00:07:00.480 --> 00:07:02.274
因为不做事更快。
Cuz not doing stuff is faster.

129
00:07:02.274 --> 00:07:07.449
明白了，所以我们将讨论一下JavaScript是如何编译的。
Got it, so we'll talk a little bit
about how your JavaScript is compiled.

130
00:07:07.449 --> 00:07:11.470
我们把这个文本文件发送到浏览器，然后呢？
We send this text file over
to the browser, then what?

131
00:07:11.470 --> 00:07:13.819
我们将讨论一下那里发生的事情。
We'll talk a little bit
about what happens there.

132
00:07:13.819 --> 00:07:17.425
因为如果你只用谷歌的JavaScript性能，一半的东西
Because if you just Google JavaScript
performance, half the stuff

133
00:07:17.425 --> 00:07:21.737
在那些博客帖子是真的，当博客帖子被写的时候，不再是真的了。
in those blog posts was true when the blog
post was written, is not true anymore.

134
00:07:21.737 --> 00:07:26.156
它可能会变得很难弄清楚什么是真的，
And it can become very difficult to
figure out like what actually is true,

135
00:07:26.156 --> 00:07:27.480
什么不是真的。
what's not true.

136
00:07:27.480 --> 00:07:30.350
在你的应用程序中什么是真的，什么在你的应用程序中不是真的，所以
What true in your application,
what's not true in your application, so

137
00:07:30.350 --> 00:07:34.170
实际上，我们讨论的是JavaScript引擎的工作原理。
actually we talk about how
JavaScript engine works.

138
00:07:34.170 --> 00:07:35.439
我们将具体查看V8。
We'll look at V8 in specific.

139
00:07:36.540 --> 00:07:40.310
我们会看到你发送代码的整个过程。
We'll actually see how the entire
process of, you sent code.

140
00:07:40.310 --> 00:07:43.779
页面上有代码，实际上是在引擎盖下发生的。
There is code on page,
actually happens under the hood.

141
00:07:43.779 --> 00:07:47.620
我们会自己进行基准测试，并尝试优化和
And we'll actually benchmark it
ourselves and try to optimize and

142
00:07:47.620 --> 00:07:50.279
取消优化，看看会发生什么。
unoptimize stuff and see what happens.

143
00:07:50.279 --> 00:07:51.879
那么，好吧，我们已经运行了代码。
Then, okay, we've run code.

144
00:07:51.879 --> 00:07:54.079
我们准备好构建应用程序了。
We're ready to build app.

145
00:07:54.079 --> 00:07:55.500
我们需要考虑渲染性能。
We need to think about
rendering performance.

146
00:07:55.500 --> 00:07:59.279
因为JavaScript代码，正如我前面所说的，并不存在于真空中。
Cuz that JavaScript code, as I said
earlier, does not exist in a vacuum.

147
00:07:59.279 --> 00:08:01.889
它必须与。
It has to interact with the.

148
00:08:01.889 --> 00:08:05.050
除非你只是在写代码，在他们的浏览器中挖掘比特币，而
Unless you're just writing code that's
mining Bitcoin in their browser while

149
00:08:05.050 --> 00:08:10.439
他们正在做其他的事情，很可能你正在改变用户界面。
they're doing something else, likely
you are changing the user interface.

150
00:08:10.439 --> 00:08:13.019
这其中有我们需要考虑的含义。
There are implications to that
that we need to think about.

151
00:08:14.050 --> 00:08:15.259
最后，负载性能。
Lastly, load performance.

152
00:08:15.259 --> 00:08:18.839
如果您没有将应用程序提供给用户，则其他两个应用程序是不相关的。
If you do not get the application to
the user, the other two are irrelevant.
