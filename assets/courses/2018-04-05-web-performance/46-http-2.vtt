WEBVTT

1
00:00:00.310 --> 00:00:03.369
&gt；&gt；steve kinney：我想谈的其他几件事
&gt;&gt; Steve Kinney: So a few other
things that I wanna talk about on

2
00:00:03.369 --> 00:00:08.118
主题是网络负载，然后是我们提供的代码量，
the topic of network load and
then also the amount of code that we ship,

3
00:00:08.118 --> 00:00:10.372
我们有越来越多的支持
is we have increasing support for

4
00:00:10.372 --> 00:00:15.874
一种叫做HTTP/2的东西，令人震惊的是HTTP/1的后继者。
something called HTTP/2 which shock
surprise is the successor for HTTP/1.

5
00:00:15.874 --> 00:00:19.170
而且它有一些独特的特点，对吧？
And it has some unique characteristics,
right?

6
00:00:19.170 --> 00:00:23.158
再一次，这就像，我是不是应该完全优化我的策略
And again, it's like, should I
totally optimize my strategies for

7
00:00:23.158 --> 00:00:25.050
一切都基于HTTP/2？
everything based on HTTP/2?

8
00:00:25.050 --> 00:00:28.250
答案是，你测量你的流量，然后给你打电话，对吗？
The answer is, you measure your traffic
and then make you the call, right?

9
00:00:28.250 --> 00:00:30.679
如果您没有发现有很多HTTP/2流量，
If you don't find you have
a lot of HTTP/2 traffic,

10
00:00:30.679 --> 00:00:32.415
也许现在还不是时候，对吧？
maybe it's not the time yet, right?

11
00:00:32.415 --> 00:00:36.795
因为我们会看到HTTP/2的很多最佳实践都是字面上的
Cuz like we're gonna see that a lot of
the best practices of HTTP/2 are literally

12
00:00:36.795 --> 00:00:39.661
什么叫做HTTP/1的反模式。
what are called like
the anti-pattern to HTTP/1.

13
00:00:39.661 --> 00:00:43.750
所以这是你必须做决定的事情之一。
So it's one of those things where you
have to kind of like make a decision.

14
00:00:43.750 --> 00:00:49.539
有时，是否支持HTTP/2并不是由您决定的。
Sometimes whether or not you support
HTTP/2 is not your call to make.

15
00:00:49.539 --> 00:00:54.503
所以举个例子，就像我说的，我们现在一堆系统上，不能
So for instance, like I said, we are on
a bunch of systems right now that don't

16
00:00:54.503 --> 00:00:57.902
支持HTTP/2，我们正在向支持HTTP/2的一群移动。
support HTTP/2,
we're moving to a bunch that do.

17
00:00:57.902 --> 00:01:01.000
[笑]好像那只是一件正在发生的事情，对吗？
[LAUGH] Like that's just a thing
that's happening, right?

18
00:01:01.000 --> 00:01:03.268
所以我现在没有必要为他们优化，但是
So I have no point optimizing for
them now, but

19
00:01:03.268 --> 00:01:06.650
这是我可能在不久的将来会做的一件事。
this is a thing that I will likely
do in the very near future.

20
00:01:06.650 --> 00:01:07.450
所以这是升级。
So it's an upgrade.

21
00:01:07.450 --> 00:01:09.003
最重要的是这个多路复用的想法。
The big thing is this
idea of multiplexing.

22
00:01:09.003 --> 00:01:12.579
稍后我们将讨论为什么这一点很重要，并且
We'll talk about why that's
important in a second, and

23
00:01:12.579 --> 00:01:17.807
而且，该服务可以在请求资产之前将资产推送到客户端，对吗？
also that service can push assets to the
client before they're asked for, right?

24
00:01:17.807 --> 00:01:21.796
所以你可以理论上把它绑在一起，而不是解析HTML，
So you can kind of like theoretically tie
this in, like rather than parse the HTML,

25
00:01:21.796 --> 00:01:23.310
我需要去拿CSS文件
I need to go get the CSS file.

26
00:01:23.310 --> 00:01:26.569
服务器可以知道这里是HTML文件，这里是CSS文件，
The server can know here's the HTML file,
here's the CSS file,

27
00:01:26.569 --> 00:01:29.864
我知道你下一个需要，现在开始服用。
I know you're gonna need next,
start taking it now.

28
00:01:29.864 --> 00:01:33.560
所以，是的，它解决了我们在HTTP/1中遇到的所有问题。
So yeah, it solves all
the problem we have in HTTP/1.

29
00:01:33.560 --> 00:01:37.359
我们做了很多像奇怪的黑客使HTTP/1工作。
We do a lot of like weird
hacks to make HTTP/1 work.

30
00:01:37.359 --> 00:01:40.890
带宽变得更好了，但延迟却没有，
Bandwidth has gone better but
latency hasn't,

31
00:01:40.890 --> 00:01:44.340
因为再一次，电子穿过行星周围的铜线，也就是
cuz like again, electrons going through
copper wire around the planet, that is

32
00:01:44.340 --> 00:01:49.069
我不认为我们很快就能解决的物理问题，据我所知。
a physics problem that I don't think we're
gonna solve any time soon, that I know of.

33
00:01:49.069 --> 00:01:53.661
我相信有人在做这方面的工作，但这不是我的专业领域。
I'm sure there are people working on that,
but that's not my domain of expertise.

34
00:01:53.661 --> 00:01:56.593
但是使用HTTP/1，我们可以一次发送一个文件。
But with HTTP/1,
we can send one file at a time.

35
00:01:56.593 --> 00:01:59.500
这意味着理论上，我会向你展示我们用来
That means while theoretically, and
I'll show you the cheat that we use for

36
00:01:59.500 --> 00:02:00.530
马上就来。
this in a second.

37
00:02:00.530 --> 00:02:04.742
但是您可以发送CSS文件或JavaScript文件，或者其他任何文件。
But you can send the CSS file or
the JavaScript file, or one of whatever.

38
00:02:04.742 --> 00:02:08.384
因此，像将内容分解成许多小CSS文件通常不是一个好方法
So like breaking stuff up into a lot of
small CSS files is usually not a good

39
00:02:08.384 --> 00:02:11.611
想法，因为你必须让任何连接都很昂贵，
idea, cuz you'd have to like
make any connections expensive,

40
00:02:11.611 --> 00:02:13.727
把它们合在一起，发送过来。
jam it all together in one, send it over.

41
00:02:16.158 --> 00:02:17.814
&gt；&gt；steve kinney：所以它的工作方式通常是，你得到一个东西，
&gt;&gt; Steve Kinney: So the way it
works is normally, you get a thing,

42
00:02:17.814 --> 00:02:19.283
你向服务器要一样东西，你就得到了。
you ask the server for
a thing, you get it.

43
00:02:19.283 --> 00:02:20.764
你向服务器要一样东西，你就得到了。
You ask the server for
a thing, you get it.

44
00:02:21.935 --> 00:02:26.115
就像浏览器通过打开给定的六个连接有点欺骗，并且
Like browsers cheat a little bit by they
open like six connections to a given, and

45
00:02:26.115 --> 00:02:29.650
我认为这取决于浏览器的变化，Firefox可能会做八个。
I think that changes depending on
the browser, Firefox might do eight.

46
00:02:29.650 --> 00:02:31.099
别引用那些数字中的任何一个。
Don't quote me on any of those numbers.

47
00:02:31.099 --> 00:02:33.662
在六到八个连接之间，所以
Somewhere between six and
eight connections, so

48
00:02:33.662 --> 00:02:35.741
它可以同时得到东西，对吧？
it can get stuff concurrently, right?

49
00:02:35.741 --> 00:02:39.716
然后当它使用了所有的六个，它可以去得到其他的东西，但是
And then when it uses all the six and
it can go get other stuff, but

50
00:02:39.716 --> 00:02:41.960
你一次六点就会筋疲力尽。
you're maxed out at six at a time.

51
00:02:41.960 --> 00:02:45.680
所以我要把我的CSS分成40个文件。
So I'm gonna break my CSS into 40 files.

52
00:02:45.680 --> 00:02:49.579
这不是个好主意，因为你一次只能得到六个，对吧？
That's a bad idea, because you can
only get six at a time, right?

53
00:02:49.579 --> 00:02:53.495
因此，通常我们会经历这些干扰我们所有文件的过程
And so, normally we would go through these
processes of jamming all of our files

54
00:02:53.495 --> 00:02:56.475
把它们连在一起，创造出这些大的，
together and concatenating them and
creating these large,

55
00:02:56.475 --> 00:02:57.711
大捆，对吧？
large bundles, right?

56
00:02:57.711 --> 00:03:02.443
我们在另一边看到了与之相关的某种成本
Which we've seen has a certain cost
associated with it on the other side of

57
00:03:02.443 --> 00:03:04.596
管，当用户得到它。
the tube, when the user gets it.

58
00:03:04.596 --> 00:03:08.240
另一方面，HTTP/2可以同时发送多个东西。
HTTP/2 on the other hand,
can send multiple things at the same time.

59
00:03:08.240 --> 00:03:11.856
所以我们建立了连接，我们看到的只是抽出所有的资产，然后
So we make connections that we saw
just pumping all the assets, and

60
00:03:11.856 --> 00:03:14.901
当它们在浏览器中时，它们会重新组合在一起。
they get put back together
when they are in the browser.

61
00:03:14.901 --> 00:03:17.375
所以这就像是主要的区别，
So that's like major difference,

62
00:03:17.375 --> 00:03:21.665
使一些HTTP/1实践不是好的HTTP/2实践。
makes some HTTP/1 practices
not good HTTP/2 practices.

63
00:03:21.665 --> 00:03:24.902
和一些HTTP/2实践不好的HTTP/1实践，
And some HTTP/2 practices
not good HTTP/1 practices,

64
00:03:24.902 --> 00:03:28.155
只是关于这些技术如何工作的本质。
just on the very nature of
how the technologies work.

65
00:03:28.155 --> 00:03:29.905
所以，是的，连接所有的JavaScript和
So yeah,
concatenating all of your JavaScript and

66
00:03:29.905 --> 00:03:31.474
CSS到大型单个文件中。
CSS into large single files.

67
00:03:31.474 --> 00:03:35.677
当您只能同时拥有一定数量的连接时，
Useful when you can only have a certain
number of connections at the same time,

68
00:03:35.677 --> 00:03:39.246
当您可以同时发送多个东西和
not useful when you can like
concurrently send multiple things and

69
00:03:39.246 --> 00:03:41.298
然后再把它们拉回来。
then like pull them back apart later.

70
00:03:41.298 --> 00:03:45.581
将图像内联为数据URL，而不是发送图像，您可能会
Inlining images as data URLs instead
of sending the image, you might make

71
00:03:45.581 --> 00:03:50.259
基本的64编码，并将其作为一个巨大的长字符串放入您的CSS文件中。
the basic 64 encoding and put in your
CSS file as a giant, long string.

72
00:03:50.259 --> 00:03:53.920
但是当你可以一次发送多个东西并且你可以有预见性地推送东西时，
But when you can send multiple things at
once and you can predictively push things,

73
00:03:53.920 --> 00:03:58.069
您不能预测性地只推送64位编码的字符串，但是
you can't predictively push just
that 64 bit encoded string, but

74
00:03:58.069 --> 00:03:59.810
你可以有预见性地推送图像。
you could predictively push the image.

75
00:04:01.219 --> 00:04:02.520
那你是做什么的？
So what do you do?

76
00:04:02.520 --> 00:04:04.990
就像，老实说，你测量，对吧？
Like, honestly, you measure, right?

77
00:04:04.990 --> 00:04:07.909
而对于你们，作为前端工程师，
And for you, as front end engineers, for

78
00:04:07.909 --> 00:04:12.039
我们作为前端工程师，我更关心我们的资产战略。
us as front end engineers,
I care more about our asset strategy.

79
00:04:12.039 --> 00:04:13.150
我们制作巨型文件吗？
Do we make giant files?

80
00:04:13.150 --> 00:04:14.889
我们能做小的，对吗？
Do we make tiny little ones, right?

81
00:04:14.889 --> 00:04:16.870
这是关于测量和计算的。
It's about measuring and figuring out.

82
00:04:16.870 --> 00:04:21.420
这不像你打开还是关闭HTTP/1，因为它是向后兼容的。
It's not like do you turn HTTP/1 on or
off, because it is backwards compatible.

83
00:04:21.420 --> 00:04:23.170
就像如果你的服务器支持它，它是不是或者
Like if your server supports it,
it's whether or

84
00:04:23.170 --> 00:04:25.060
不是你选择利用它。
not you choose to take advantage of it.

85
00:04:25.060 --> 00:04:28.012
所以，你测量并计算出来。
And so, you measure and you figure it out.

86
00:04:28.012 --> 00:04:29.793
那么如何获得HTTP/2呢？
So how do you get HTTP/2?

87
00:04:29.793 --> 00:04:34.930
这也是问题的答案，我如何获得CDN？
And this is also the answer to
the question of, how do I get a CDN?

88
00:04:34.930 --> 00:04:36.579
就是你用别人的。
Is you use somebody else's.

89
00:04:36.579 --> 00:04:40.343
所以有一堆服务，你把你的代码放在那里，
So there's a bunch of services,
where you put your code up there,

90
00:04:40.343 --> 00:04:44.731
它是在CDN上，它支持HTTP/2，你可以开箱即用。
it is on a CDN, it is supporting HTTP/2,
you get everything out of the box.

91
00:04:44.731 --> 00:04:50.021
所以剩下的两个是现在的.sh和netlify。
So the left two is now.sh and Netlify.

92
00:04:50.021 --> 00:04:52.110
现在.sh为您提供了一个命令行工具。
Now .sh gives you a command line tool.

93
00:04:52.110 --> 00:04:57.300
您确实喜欢Now Deploy，并且您的应用程序进入云中。
You do like now deploy, and
your app goes up into the cloud.

94
00:04:57.300 --> 00:05:01.110
Netlify实际上也很酷，这就像你可以安装GitHub hook和
Netlify is actually pretty cool too, which
is like you can install GitHub hook and

95
00:05:01.110 --> 00:05:04.560
每当您合并到master中时，它都会部署您的代码。
whenever you merge into master,
it deploys your code.

96
00:05:04.560 --> 00:05:07.339
这就像是我使用的东西，比如我自己的项目和诸如此类的东西。
That is like kind of the things I use
like my own projects and stuff like that.

97
00:05:07.339 --> 00:05:11.528
这可能不是，我肯定有像大公司一样使用这两个
That's probably not, I'm sure there
are like large companies using both these

98
00:05:11.528 --> 00:05:14.440
服务，好像那不是我们七年级时用的。
services, like that's not
what we used in 7th grade.

99
00:05:14.440 --> 00:05:17.082
我们使用亚马逊的云端，这是亚马逊的，
We use Amazon cloud
front which is Amazon's,

100
00:05:17.082 --> 00:05:20.139
我之前给你看的图片是亚马逊CDN。
the picture I showed you
earlier that's Amazon CDN.

101
00:05:20.139 --> 00:05:23.269
你把东西放在S3桶里，你所有的流量都去了云端。
You put stuff in S3 bucket,
all your traffic goes to cloud front.

102
00:05:23.269 --> 00:05:26.350
就像一般情况下一样，您可以配置，可以或
Like generally speaking,
you can configure, you can or

103
00:05:26.350 --> 00:05:29.540
你的应用程序团队或其他什么，可以配置这些后端服务。
your app's team or whatever,
can configure these back end service.

104
00:05:29.540 --> 00:05:31.949
但你也可以直接从货架上拿出解决方案。
But you can also just pull
a solution off the shelf.

105
00:05:31.949 --> 00:05:33.449
CloudFlare是另一个伟大的
Cloudflare is another great

106
00:05:34.819 --> 00:05:38.590
提供支持HTTP/2的CDN的服务。
service that provides a CDN
that is supportive of HTTP/2.

107
00:05:38.590 --> 00:05:43.199
所以就像，你基本上可以选择使用这些服务中的一种，
So like, you can basically if you
choose to use one of these services,

108
00:05:43.199 --> 00:05:44.790
他们都有一些免费的层次。
all of them have some kind of free tier.

109
00:05:44.790 --> 00:05:46.500
但如果你选择使用其中一项服务，
But if you choose to use
one of these services,

110
00:05:46.500 --> 00:05:48.240
基本上就是把这些东西从盒子里拿出来。
you basically get these
things out of the box.

111
00:05:48.240 --> 00:05:51.079
作为前台工程师，你的工作就是思考，好吧，
Your job as a front engineer
is to think about like, okay,

112
00:05:51.079 --> 00:05:53.620
你现在建设的资产是什么，对吗？
what are the assets you're building now,
right?

113
00:05:53.620 --> 00:05:58.310
如果存在这些特性，您还可以利用哪些其他东西？
What other things can you take advantage
of should these features exist?

114
00:05:58.310 --> 00:06:02.069
这张幻灯片在这里，基本上是因为没有人能够看到这些屏幕
This slide is here basically cuz no one's
going to be able to look at those screen

115
00:06:02.069 --> 00:06:04.579
镜头，放大到足够近以获取URL。
shots, zoom in close
enough to get the URLs.

116
00:06:04.579 --> 00:06:08.240
因此，如果您希望稍后引用此内容，请参阅以下URL
So in case you wanna reference this later,
here are URLs for

117
00:06:08.240 --> 00:06:09.290
我刚才说的所有事情。
all the things I just talked about.
