WEBVTT

1
00:00:00.200 --> 00:00:02.330
&gt；&gt；Steve Kinney：所以我们的代码被解析了，太棒了，
&gt;&gt; Steve Kinney: So
our code is parsed, awesome,

2
00:00:02.330 --> 00:00:06.320
我们一起完成了，我们解析了代码。
we've done it together,
we've parsed the code.

3
00:00:06.320 --> 00:00:07.599
然后呢？
Then what?

4
00:00:07.599 --> 00:00:11.169
您只需将其转换为抽象语法树，
You just turn it into
an abstract syntax tree,

5
00:00:11.169 --> 00:00:14.619
我会给你看维基百科的一句话，尽管我知道这就像
I'm gonna show you a quote from Wikipedia,
even though I understand that that is like

6
00:00:14.619 --> 00:00:18.239
人们做演讲的比喻就像引用维基百科，但是
a trope of people making presentations
just like quote Wikipedia, but

7
00:00:18.239 --> 00:00:20.750
这个很棒，我想我们都应该分享它。
this one is amazing and
I thought we should all share it.

8
00:00:22.120 --> 00:00:25.809
这是维基百科对抽象语法树的定义。
This is Wikipedia's definition
of an abstract syntax tree.

9
00:00:25.809 --> 00:00:30.890
在计算机科学中，抽象语法树AST是
In computer science, an abstract syntax
tree, AST, is a tree representation of

10
00:00:30.890 --> 00:00:35.280
用编程语言编写的源代码的抽象语法结构。
the abstract syntactic structure of source
code written in a programming language.

11
00:00:35.280 --> 00:00:38.439
我们现在都清楚AST是什么了吗？
Are we all clear on what AST is now?

12
00:00:39.600 --> 00:00:42.460
情感上它是什么，就像我们拿了一串文本，
Affectively what it is,
is like we took the string of text,

13
00:00:42.460 --> 00:00:45.090
我们制作了一个数据结构，基本上显示
we made a data structure
that basically shows

14
00:00:45.090 --> 00:00:48.130
实际代码的结构，因为它将被执行。
the structure of the actual
code as it's gonna be executed.

15
00:00:48.130 --> 00:00:51.859
这就是ADD函数的AST。
So this is what an AST for
an add function would be.

16
00:00:51.859 --> 00:00:55.020
在更简单的编程语言中，您实际上只看到蓝色和
In a simpler programming language,
you'd actually only see the blue and

17
00:00:55.020 --> 00:00:55.954
绿色零件，对。
green parts, right.

18
00:00:55.954 --> 00:00:58.380
因为你有一个函数，它有一个返回语句，
Cuz you've got a function,
it has a return statement,

19
00:00:58.380 --> 00:01:00.219
这是你在那里看到的第一个词。
that's the first word that you saw there.

20
00:01:00.219 --> 00:01:03.640
然后它解析该行的其余部分，它看到两个标识符，
Then it parses the rest of that line,
it sees two identifiers,

21
00:01:03.640 --> 00:01:05.450
它看到加法符号。
it sees the addition symbol.

22
00:01:05.450 --> 00:01:09.710
所以我们知道我们将添加x和y，然后解释器可以继续
So we know we're gonna add x and y, and
then the interpreter can go ahead and

23
00:01:09.710 --> 00:01:11.299
开始做所有这些。
start doing all of that.

24
00:01:11.299 --> 00:01:15.189
这里的另一个黄色橙色部分，是JavaScript是硬的。
The other yellow orange part over here,
is JavaScript is hard.

25
00:01:15.189 --> 00:01:17.438
还有像可变吊装之类的东西
And there's things like
variable hoisting and

26
00:01:17.438 --> 00:01:20.759
翻译员需要注意的一大堆其他东西。
a whole bunch of other stuff that
the interpreter needs to be aware of.

27
00:01:20.759 --> 00:01:25.024
以便它还跟踪函数体中的参数和x和y，
So that it also keeps track of the params
and the x and y in the function body,

28
00:01:25.024 --> 00:01:26.581
指向这些参数，然后
point to those params, and

29
00:01:26.581 --> 00:01:30.442
一大堆东西，如果你读过JavaScript规范，并且
a whole bunch of stuff that if you
ever read the JavaScript spec, and

30
00:01:30.442 --> 00:01:34.689
事后醒来，这是有记录的，不用担心。
wake up afterwards, it's documented
in there, don't worry about it.

31
00:01:34.689 --> 00:01:37.460
如果您选择阅读JavaScript规范，
If you ever do choose to
read the JavaScript spec,

32
00:01:37.460 --> 00:01:40.120
第一部分是令人难以置信的有趣和容易阅读。
the first part is incredibly
interesting and easy to read.

33
00:01:40.120 --> 00:01:42.719
但接下来是所有的浏览器实现和所有的规则
But then it's all browser
implementation and all the rules and

34
00:01:42.719 --> 00:01:43.530
沿着这条线的东西。
stuff along those lines.

35
00:01:43.530 --> 00:01:46.076
但我不想劝阻你读它，因为第一部分实际上是
But I don't wanna dissuade you from
reading it, cuz the first part is actually

36
00:01:46.076 --> 00:01:49.706
写得非常好。&gt；&gt；steve kinney：所以我们有AST，
incredibly well-written.
&gt;&gt; Steve Kinney: So we have the AST,

37
00:01:49.706 --> 00:01:52.479
我们拥有制作字节码所需的一切。
we have everything we
need to make byte code.

38
00:01:52.479 --> 00:01:55.969
太好了，好的，让我们把它传给点火，让我们做这件事。
Great, right, let's pass it to ignition,
let's do the thing.

39
00:01:55.969 --> 00:02:00.269
基线编译器获取AST，翻译它，就是这里的这个部分。
Baseline compiler takes that AST,
translates it, it's this part right here.

40
00:02:00.269 --> 00:02:03.989
理想情况下，对，故事结束了，我们不能优化它。
Ideally, right, the story ends,
and we can't optimize it.

41
00:02:03.989 --> 00:02:06.060
它转到字节码，它运行
It goes to byte code, it runs
