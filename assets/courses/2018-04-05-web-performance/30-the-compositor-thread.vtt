WEBVTT

1
00:00:00.030 --> 00:00:01.191
&gt；&gt；steve kinney：让我们谈谈这个，
&gt;&gt; Steve Kinney: So let's talk about that,

2
00:00:01.191 --> 00:00:03.470
谈论这个叫做排版线程的东西。
talk about this thing called
the compositor thread.

3
00:00:03.470 --> 00:00:09.009
过度简化是说浏览器有三个线程。
An oversimplification is to say
that a browser has three threads.

4
00:00:09.009 --> 00:00:10.339
那已经不是真的了
That's not really true anymore,

5
00:00:10.339 --> 00:00:12.880
有些浏览器有其他各种各样的东西，比如特殊的线程。
some browsers have all sorts
of other like special threads.

6
00:00:12.880 --> 00:00:18.390
但是让我们简单一点，假设有三个。
But let's oversimplify for
a second and say that there's three.

7
00:00:18.390 --> 00:00:20.469
UI线程不关我们的事。
The UI thread is none of our business.

8
00:00:20.469 --> 00:00:22.420
UI线程，你就像，我写UI。
The UI thread, you're like, I write UIs.

9
00:00:22.420 --> 00:00:23.890
这更像是Chrome的UI。
This is more Chrome's UI.

10
00:00:23.890 --> 00:00:28.859
这就像标签栏和位置栏以及所有类似的东西。
This is like the tab bar and the location
bar and all of that kind of stuff.

11
00:00:28.859 --> 00:00:30.649
这就是Chrome本身。
That is Chrome itself.

12
00:00:30.649 --> 00:00:31.300
你不能碰那个。
You don't touch that.

13
00:00:31.300 --> 00:00:32.679
你不能接触到它。
You don't have access to it.

14
00:00:32.679 --> 00:00:33.679
那是存在的。
That exists.

15
00:00:33.679 --> 00:00:36.630
渲染器线程是我们大部分时间居住的地方。
The renderer thread is where
we live most of the time.

16
00:00:36.630 --> 00:00:39.159
那是我们的Javascript运行的地方，也是我们绘画发生的地方，
That's where our Javascript runs,
that's where our painting happens,

17
00:00:39.159 --> 00:00:41.740
那里就是布局颠覆发生的地方，对吗？
that's where layout thrashing happens,
right?

18
00:00:41.740 --> 00:00:44.158
我们在那里做的所有有趣的事情。
All of the fun stuff that we do in there.

19
00:00:44.158 --> 00:00:47.280
这就是所有HTML有时会被解析的地方
That's where all the HTML
gets parsed sometimess and

20
00:00:47.280 --> 00:00:49.189
像那样的东西。
stuff along those like there.

21
00:00:49.189 --> 00:00:54.729
Chrome或Firefox、Safari中的每个标签都有这些线程之一。
Every tab in Chrome or Firefox,
Safari has one of these threads.

22
00:00:54.729 --> 00:00:57.920
过去他们都共享一个，这意味着一个网页将会
It used to be that they all shared one,
which meant one webpage would take

23
00:00:57.920 --> 00:01:02.700
放下所有的标签，现在，一个网页只能取下自己的标签。
down all the tabs, now, one webpage
can only take down its own tab.

24
00:01:02.700 --> 00:01:04.391
我们生活在更好的时代。
We live in better times.

25
00:01:04.391 --> 00:01:07.599
所以每个页面都有一个这样的页面，这就是我们所有JavaScript运行的地方。
So there's one of these per page, and
it's where all of our JavaScript runs.

26
00:01:07.599 --> 00:01:09.780
我们所做的一切，几乎所有的事情都发生在那里。
Everything we're doing,
almost everything happens there.

27
00:01:10.780 --> 00:01:13.030
然后我们还有另一个叫做合成器线程的东西。
Then we have this other thing
called the compositor thread.

28
00:01:14.090 --> 00:01:18.974
它唯一的工作就是绘制位图，获取位图，然后将它们发送到GPU，
Its sole job is to draw bitmaps,
take the bitmaps, send them to GPU,

29
00:01:18.974 --> 00:01:20.674
把它们放在屏幕上。
put them on the screen.

30
00:01:20.674 --> 00:01:23.789
所以请记住，绘画制作了一堆位图。
So remember,
painting makes a bunch of bitmaps.

31
00:01:23.789 --> 00:01:27.704
排字员的工作就是把这些东西扔到屏幕上，所以
The compositor's job is to take those and
toss them onto the screen, so

32
00:01:27.704 --> 00:01:31.239
我们把它们交出来，一会儿再谈。
we hand them over, we'll talk
a little bit about it in a second.

33
00:01:31.239 --> 00:01:32.579
因此，当我们绘制时，我们创建位图。
So when we paint, we create the bitmaps.

34
00:01:32.579 --> 00:01:35.759
绘制后，与合成器线程共享位图，
After painting, the bitmaps are shared
with the compositor thread,

35
00:01:35.759 --> 00:01:38.460
有一行共享内存空间使用了一些OpenGL。
there is a line of shared memory
space that uses some OpenGL.

36
00:01:38.460 --> 00:01:40.900
我现在的手波浪，但它是好的手波浪。
I am now getting hand wavy,
but it's fine hand wavy.

37
00:01:40.900 --> 00:01:42.680
以前，它是不可接受的手波浪。
Before, it was unacceptable hand wavy.

38
00:01:42.680 --> 00:01:45.250
这是可以接受的手波浪，因为它是OpenGL。
This is acceptable hand
wavy cuz it's OpenGL.

39
00:01:45.250 --> 00:01:49.710
很酷，所以主线程是CPU密集型的，对吗？
Cool, so
the main thread is CPU intensive, right?

40
00:01:49.710 --> 00:01:53.289
你今天看到我多次固定CPU了，对吧？
You saw me peg the CPU at
multiple times today, right?

41
00:01:53.289 --> 00:01:55.400
当我们阻止它时，什么都不会发生。
When we block it, nothing happens.

42
00:01:55.400 --> 00:01:58.700
合成器线程是GPU密集型的，对吗？
The compositor thread is GPU intensive,
right?

43
00:01:58.700 --> 00:02:02.480
我们可以带走的所有东西都有隐藏的一部分
There's, like, a hidden part here
of everything that we can take away

44
00:02:02.480 --> 00:02:06.319
并将其传递给GPU线程。
from that main renderer thread and
pass it over to the GPU thread.

45
00:02:06.319 --> 00:02:09.969
就像主线程一样，渲染器线程有更多的责任。
Like the main thread has, the renderer
thread, has way more responsibilities.

46
00:02:09.969 --> 00:02:14.259
它必须解析一切，计算样式，绘画，布局，JavaScript。
It's got to parse everything, calculate
styles, paint, layout, JavaScript.

47
00:02:14.259 --> 00:02:18.879
任何我们可以卸载到其他线程的东西，就像做GPU一样，
Anything that we can offload to this
other thread that's like doing GPU stuff,

48
00:02:18.879 --> 00:02:21.639
对，我们应该继续做这件事。
right, we should go ahead and do that.

49
00:02:23.689 --> 00:02:25.810
所以，是的，有很多事情要负责。
So, yeah,
there's a lot of stuff responsible for.

50
00:02:25.810 --> 00:02:28.300
所以我们可以说，嘿，GPU处理这个。
So anything we can say,
hey, GPU handle this.

51
00:02:28.300 --> 00:02:30.110
它会让我们更快。
It's going to make us faster.

52
00:02:31.129 --> 00:02:31.659
那我们该怎么做？
So how do we do that?

53
00:02:31.659 --> 00:02:34.199
我们在管理图层。
We're managing layers.

54
00:02:34.199 --> 00:02:37.370
我马上就会讲到那是什么。
I'll get to what that is in a second.

55
00:02:37.370 --> 00:02:39.389
绘画是超级昂贵的，我们应该避免它。
Painting is super expensive,
we should avoid it.
