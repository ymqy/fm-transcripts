WEBVTT

1
00:00:00.230 --> 00:00:01.125
&gt；&gt；Steve Kinney：酷，让我们开始吧。
&gt;&gt; Steve Kinney: Cool,
so let's get started.

2
00:00:01.125 --> 00:00:05.969
谈谈我们所说的工作表现是什么意思？
Talk a little bit about what do
we mean by the work performance?

3
00:00:05.969 --> 00:00:10.570
为什么这很重要，除了在幻灯片上看起来很好之外，我实际上
And why it matters, except that seemed
good on the slide, I'm actually

4
00:00:10.570 --> 00:00:14.419
我要回答为什么它很重要，然后我们将讨论如何思考它。
gonna answer the why it matters and then
we'll talk about how to think about it.

5
00:00:14.419 --> 00:00:19.260
大多数情况下，这是一个自我推销，让你在接下来的几个时间里保持兴趣
Mostly it's a self pitch to keep
you interested over the next few

6
00:00:19.260 --> 00:00:23.000
几个小时就像是给你一个关于为什么它很重要的说辞
hours it's kind of like giving you
the pitch on why it's important and

7
00:00:23.000 --> 00:00:25.289
然后我们将讨论如何处理它。
then we'll talk about what to do about it.

8
00:00:25.289 --> 00:00:28.089
那么，为什么性能如此重要呢？
So why does performance matter?

9
00:00:28.089 --> 00:00:32.149
我认为目前的行业标准是
I think the industry
standard at this point is

10
00:00:32.149 --> 00:00:37.340
浏览一大堆统计数据幻灯片作为对权威的巨大呼吁，
to go through a bunch of slides of
statistics as a large appeal to authority,

11
00:00:37.340 --> 00:00:43.210
就像这些东西真的很重要，你已经在看这个课程了。
like this stuff is really important also
you're already watching this course.

12
00:00:43.210 --> 00:00:46.259
是的，公平地说，我是在向唱诗班布道。
Si it's fair to say that I
am preaching to the choir.

13
00:00:46.259 --> 00:00:51.176
但是你有一个产品经理或一个工程经理并不是不可能的
But it is not unlikely that you have a
product manager or an engineering manager

14
00:00:51.176 --> 00:00:55.954
这也需要，[笑]这将受益于这一销售宣传。
that would also need to be, [LAUGH] that
would benefit from this sales pitch.

15
00:00:55.954 --> 00:00:57.481
所以我们一起做
So we'll do it together, and

16
00:00:57.481 --> 00:01:00.508
在这背后的一些研究中武装我们自己。
arm ourselves in kind of some
of the research behind this.

17
00:01:00.508 --> 00:01:06.420
Jakob Nielsen在用户界面和性能方面做了大量研究。
Jakob Nielsen did a bunch of research
on User interfaces and performance.

18
00:01:06.420 --> 00:01:08.890
很多事情真的很有趣。
A lot of it was really
kind of interesting.

19
00:01:08.890 --> 00:01:15.900
在大约十分之一秒时，用户感觉系统是瞬时的，对吗？
At about a tenth of a second, users feel
that the system is instantaneous, right?

20
00:01:15.900 --> 00:01:18.569
他们采取行动，应用程序做出响应。
They take an action and
the application has responded.

21
00:01:18.569 --> 00:01:20.310
他们没有注意到任何形式的滞后。
They don't notice any kind of lag.

22
00:01:20.310 --> 00:01:21.951
这就是理想。
That is the ideal.

23
00:01:21.951 --> 00:01:25.620
所以十分之一秒，100毫秒就是我们的目标
So a 10th of a second, 100 milliseconds
is kind of what we aim for.

24
00:01:25.620 --> 00:01:27.079
这是不是一直都有可能？
Now is that always possible?

25
00:01:27.079 --> 00:01:30.430
我们需要通过网络请求来做这件事吗？
Do we need to make a network
request to do the thing, right?

26
00:01:30.430 --> 00:01:33.079
要考虑的因素很多。
There's a lot of
considerations to think about.

27
00:01:33.079 --> 00:01:36.680
但我们知道用户什么都不能说，
But we know that users
can not tell anything,

28
00:01:36.680 --> 00:01:41.340
我认为微软已经做了研究，他们使之变得越来越快。
I think Microsoft has done research where
they make that even faster and faster.

29
00:01:41.340 --> 00:01:45.780
并且有一些不可察觉的，用户可以注意到，但是对于我们的目的，
And there are imperceptible,
users can notice, but for our purposes,

30
00:01:45.780 --> 00:01:48.588
100毫秒是黄金标准。
100 milliseconds is the gold standard.

31
00:01:50.079 --> 00:01:51.799
大约一秒钟后，
After about a second,

32
00:01:51.799 --> 00:01:56.609
用户的思想流动被打断了，他们注意到了，对吗？
user's flow of thought is interrupted,
they notice it, right?

33
00:01:56.609 --> 00:01:59.539
他们可能会分心，他们可能会失去应用程序的感觉
They could get distracted, they can
lose the feeling that the application

34
00:01:59.539 --> 00:02:03.590
响应并做他们要求的事情。
is responsive and
doing the things that they're asking for.

35
00:02:03.590 --> 00:02:06.409
然后大约十秒钟后
And then after about ten seconds

36
00:02:06.409 --> 00:02:10.110
要保持用户的注意力几乎是不可能的。
it's almost impossible to
keep a user's attention.

37
00:02:10.110 --> 00:02:10.659
对吧？
Right?

38
00:02:10.659 --> 00:02:16.729
在这一点上，一个闪亮的物体出现在角落里，用户离开了。
At that point, a shiny object in the
corner has appeared and the user is gone.

39
00:02:16.729 --> 00:02:17.550
对吧？现在被允许，
Right?
Now granted,

40
00:02:17.550 --> 00:02:21.069
如果页面上的交互时间超过10秒
if you have interactions on your
page that take more than ten seconds

41
00:02:21.069 --> 00:02:22.520
我们应该谈谈，对吧？
we should talk, right?

42
00:02:22.520 --> 00:02:24.699
十秒是一段很长的时间。
Ten seconds is a very long period of time.

43
00:02:24.699 --> 00:02:28.909
但是加载一个页面需要多长时间，这也不是很离谱，对吧？
But it's also not outrageous for
how long it takes a page to load, right?

44
00:02:28.909 --> 00:02:31.900
在很多情况下，如果我们正在编写JavaScript应用程序，对吗？
In a lot of cases if we are writing
JavaScript applications, right?

45
00:02:31.900 --> 00:02:35.090
我们不仅需要将这些位传送到浏览器，而且
We not only have to get those
bits to the browser, but

46
00:02:35.090 --> 00:02:38.340
然后我们还必须在他们的机器上构建应用程序。
we also then have to build
the application on their machines.

47
00:02:38.340 --> 00:02:41.680
所以这十秒对于互动来说都是，但是
And so that ten seconds is both for
an interaction but going and

48
00:02:41.680 --> 00:02:46.710
一开始访问页面，也是与页面的互动，对吧？
visiting the page in the beginning, is
also an interaction with the page, right?

49
00:02:46.710 --> 00:02:48.960
所以我们也要记住这一点。
So we want to keep that in mind as well.

50
00:02:48.960 --> 00:02:52.319
因为我们知道，通过大量的研究，如果我们的页面花费太长时间
Because we know that with a lot of
research that if our page takes too long

51
00:02:52.319 --> 00:02:56.009
加载它将对用户参与产生影响。
to load it will have
impacts on user engagement.

52
00:02:56.009 --> 00:02:56.889
酷毙了。所以我要展示
Cool.
So I'm going to show

53
00:02:56.889 --> 00:02:59.710
你有更多的数据让我看起来很聪明，但是
you some more statistics that
make myself seem smart but

54
00:02:59.710 --> 00:03:03.409
真的，收集别人非常聪明的作品。
really, collecting other
people's really smart work.

55
00:03:03.409 --> 00:03:08.171
Aberdeen Group发现，1秒的减速会导致11%
The Aberdeen Group found that a 1
second slow down resulted in 11%

56
00:03:08.171 --> 00:03:11.509
页面浏览量减少，转换率减少7%。
fewer page views and 7% less conversion.

57
00:03:11.509 --> 00:03:12.150
对吧？
Right?

58
00:03:12.150 --> 00:03:16.240
许多应用程序的页面查看和转换都变成了美元和美分。
Page views and conversions for a lot of
applications turn into dollars and cents.

59
00:03:16.240 --> 00:03:16.877
对吧？还有
Right?
And,

60
00:03:16.877 --> 00:03:20.027
我写软件是因为我真的很喜欢写软件，但是
I write software because I really
enjoy writing software but

61
00:03:20.027 --> 00:03:22.942
我也真的很喜欢通过编写软件获得报酬。
I also really enjoy getting paid for
writing software.

62
00:03:22.942 --> 00:03:25.079
这样我就不用做其他事情了。
So I don't have to do other things.

63
00:03:25.079 --> 00:03:28.926
而且我也喜欢我工作的公司，我赚的钱足够付我钱。
And I also enjoy the company I work for
making enough money to pay me.

64
00:03:28.926 --> 00:03:33.078
所以很多时候，我们的表现和我们直接关心的东西
So a lot of times, the performance and
our care about that stuff directly

65
00:03:33.078 --> 00:03:37.859
转化为我们所做的工作，这也是为了取悦用户，对吧？
translates into the work that we do and
it's also about delighting users, right?

66
00:03:37.859 --> 00:03:42.521
Akamai发现网页加载时间增加了2秒的延迟
Akamai found that a 2 second delay
in web page load time increased

67
00:03:42.521 --> 00:03:44.509
弹跳率高达103%。
bounce rates by 103%.

68
00:03:44.509 --> 00:03:47.086
所以离开的人数是现在的两倍
So double the amount of people are leaving

69
00:03:47.086 --> 00:03:49.742
如果页面加载速度慢两秒。
if your page is two
seconds slower to load.

70
00:03:49.742 --> 00:03:54.341
400毫秒的性能提高导致9%的
A 400 millisecond improvement in
performance resulted in a 9% increase in

71
00:03:54.341 --> 00:03:55.929
雅虎的流量，对吧？
traffic at Yahoo, right?

72
00:03:55.929 --> 00:03:59.262
所以我们可以看到在性能之间存在这种相关性
So we can see that there is this
correlation between the performance

73
00:03:59.262 --> 00:04:02.719
我们的申请，并有效地支付账单。
of our application and
effectively paying the bills.

74
00:04:02.719 --> 00:04:08.009
谷歌发现，页面速度慢2%会导致搜索量减少2%，
Google found that a 2% slower page
resulted in 2% fewer searches,

75
00:04:08.009 --> 00:04:13.379
考虑到谷歌的商业模式，这意味着所显示的广告减少了2%
which given Google's business
model means 2% fewer ads shown and

76
00:04:13.379 --> 00:04:18.829
你可以看到那种Fike是如何沿着整个东西流下来的。
you can see how that kind of fike
trickles down the entire thing.

77
00:04:18.829 --> 00:04:22.329
性能提高100毫秒，结果为1%
100 millisecond improvement in
performance results in a 1%

78
00:04:22.329 --> 00:04:24.807
亚马逊整体收入的增长。
increase in the overall revenue at Amazon.

79
00:04:24.807 --> 00:04:28.555
现在1%，通常看起来不是很大的影响，
Now 1%,
normally doesn't seem like a big impact,

80
00:04:28.555 --> 00:04:33.316
但是当你在亚马逊规模下运营时，1%是很多的，对吧？
but when you're operating at Amazon scale,
1% is a lot, right?

81
00:04:33.316 --> 00:04:35.957
所以肯定有，我们可以追踪，
So there's definitely, we can trace,

82
00:04:35.957 --> 00:04:40.168
对业绩的关心很多次都是业务成果。
the care about performance to
a lot of times business outcomes.

83
00:04:40.168 --> 00:04:45.740
如果加载时间超过3秒，53%的用户会离开移动站点，
53% of users will leave a mobile site if
it takes more than 3 seconds to load,

84
00:04:45.740 --> 00:04:46.334
对吧？
right?

85
00:04:46.334 --> 00:04:48.862
所以我们把所有的工作和关怀投入到这个网站的建设中，并且
So we put all this work and
care into building this website, and

86
00:04:48.862 --> 00:04:51.209
他们甚至不会看到它，因为它花了太长时间。
they're not even going to see
it because it took too long.

87
00:04:51.209 --> 00:04:56.468
我认为一个普通的在研究中是很有意义的
And I think the one general one
makes a lot of sense in the research

88
00:04:56.468 --> 00:05:01.733
如果您希望您的应用程序或站点感觉更快，
is that if you want your application or
your site to feel faster,

89
00:05:01.733 --> 00:05:07.199
你需要比你的竞争对手快20%左右，对吗？
you need to be about 20% faster
than your competitors, right?

90
00:05:07.199 --> 00:05:10.629
所以你需要保留这一点，我们知道现在会有所不同。
So you need to keep that,
we know that that now makes a difference.

91
00:05:12.069 --> 00:05:15.100
所以快速是很重要的，对吧？
So being in fast is important, right?

92
00:05:15.100 --> 00:05:17.600
是的，让我们做这件事，对吧？
Yeah, let's do the thing, right?

93
00:05:17.600 --> 00:05:23.851
我们有这些经过试验的真实的东西，比如减少你的资产和东西，
We have these tried and true things like
minify your assets and of things and

94
00:05:23.851 --> 00:05:30.300
通过网络发送它，自从我开始编程以来，这些都是真的。
send it across the wire and those have
been true since I started programming.

95
00:05:30.300 --> 00:05:30.860
对吧？
Right?

96
00:05:30.860 --> 00:05:33.750
但在我们的领导下，事情也发生了变化。
But things have changed from
out from under us as well.

97
00:05:33.750 --> 00:05:36.620
所以与此同时，快速是非常重要的，
So at the same time while being
fast is really important,

98
00:05:36.620 --> 00:05:40.050
成为一个快速的应用程序也要困难得多。
it's also a lot harder to
be a fast application.

99
00:05:41.819 --> 00:05:44.319
应用程序变得越来越大。
Applications keep getting bigger and
bigger and bigger.

100
00:05:44.319 --> 00:05:48.069
几年前，一般的Web应用程序
A few years ago,
the average web application

101
00:05:48.069 --> 00:05:51.625
打到了比电子游戏“末日”更大的地方，对吧？
hIt the point where it was bigger
than the video game Doom, right?

102
00:05:52.680 --> 00:05:56.649
所以有效地，我们正在发送一个完整的视频游戏
So effectively,
we are sending an entire video game

103
00:05:56.649 --> 00:06:01.769
几十年前，每次有人访问我们的页面。
from a few decades ago every time
someone goes to visit our page.

104
00:06:01.769 --> 00:06:03.716
这不仅是一个有趣的事实，而且
Not only is that a fun factoid, but

105
00:06:03.716 --> 00:06:07.410
我认为看着图表看它不是很重要，
I think looking at the graph is
kind of important to see it's not,

106
00:06:07.410 --> 00:06:11.850
它是在几年前跳出来的，现在我们正处于Web应用领域。
it jumped off a few years ago and
here we are now in web application land.

107
00:06:11.850 --> 00:06:17.879
随着时间的推移，它越来越多。
It's increasingly
increasing as time goes on.

108
00:06:17.879 --> 00:06:23.377
所以这是beta.httparchive.org实际上有一堆
So this is beta.httparchive.org
actually has a bunch of

109
00:06:23.377 --> 00:06:31.574
数据的平均网页的基本大小牵引从2010年开始。
data on the basic size of the average web
page traction from about 2010 on forward.

110
00:06:31.574 --> 00:06:37.120
你可以看到我在2013年3月15日左右徘徊。
And you can see that I hovered
around March 15, 2013.

111
00:06:37.120 --> 00:06:38.718
所以五年前的今天。
So five years ago today.

112
00:06:38.718 --> 00:06:45.079
你可以看到，第50个百分位数的平均值大约是864千字节，对吧？
And you can see that the average, the 50th
percentile was about 864 kilobytes, right?

113
00:06:45.079 --> 00:06:46.393
那里有一个范围。
And there's a range there.

114
00:06:46.393 --> 00:06:50.350
但你可以看到，今天台式机上的平均值几乎是这个数字的两倍。
But you can see that the average today
on desktop is almost double that.

115
00:06:50.350 --> 00:06:54.531
两倍多，在手机上，十倍大小，对吧？
More than double that and on mobile,
ten times that size, right?

116
00:06:54.531 --> 00:06:57.909
所以，是的，手机变得越来越快，诸如此类。
So as, yeah phones are getting faster and
stuff like that.

117
00:06:57.909 --> 00:07:02.189
与我们向浏览器发送越来越多代码的速度不同。
Not at the same rate that we are shipping
more and more code to the browser.

118
00:07:02.189 --> 00:07:05.668
所以这意味着我们需要开始关心表现，如果我们希望跟上的话。
So it means that we need to start caring
about performance if we hope to keep up.

119
00:07:06.970 --> 00:07:13.089
同时，LTE变得越来越慢，特别是在两个网络上。
At the same time, LTE is getting slower,
on two networks in particular.

120
00:07:13.089 --> 00:07:15.310
但总的来说，随着越来越多的人使用LTE，
But in general, as more and
more people get LTE,

121
00:07:15.310 --> 00:07:20.589
网络越来越陷入困境。
the networks are getting more and
more increasingly bogged down.

122
00:07:20.589 --> 00:07:25.167
这意味着随着我们发布越来越多的代码，获取代码的时间是
Which means that as we ship more and
more code, the time to get that code is

123
00:07:25.167 --> 00:07:29.314
时间越来越长，可能会有点失控。
taking longer and longer,
which can get a little out of control.

124
00:07:29.314 --> 00:07:33.795
所以，我们需要，再一次我们需要处理这些东西，因为
So, we need to, again we need to
be dealing with this stuff because

125
00:07:33.795 --> 00:07:36.918
它不会神奇地变得更好。
it's not going to just
magically get better.

126
00:07:36.918 --> 00:07:39.862
浏览器会变得更快下一代iPhone会更好
The browser is gonna get faster and
the next iPhone is gonna be way better,

127
00:07:39.862 --> 00:07:41.494
我不需要担心这些
I don't have to worry about any of this.

128
00:07:41.494 --> 00:07:45.747
虽然这些事情是真的，但它们不一定，
While those things are true,
they don't necessarily,

129
00:07:45.747 --> 00:07:49.689
在这里，利率是一个更大的问题。
the rate, is kind of a bigger issue here.

130
00:07:49.689 --> 00:07:52.840
所以好吧，表现很重要，我有没有说过这一点？
So all right, performance is important,
have I made that point?

131
00:07:52.840 --> 00:07:54.430
感觉好吗？
Feel good about that?

132
00:07:54.430 --> 00:07:55.509
相信吗？太好了。
Convinced?
Sweet.

133
00:07:55.509 --> 00:07:59.029
所以最大的问题是我们如何看待性能，对吗？
So the big question is how do we
think about performance, right?

134
00:07:59.029 --> 00:08:01.954
我之前开玩笑说你可以压缩你的资产
I joked before that you
can gzip your assets and

135
00:08:01.954 --> 00:08:04.579
缩小它们并沿着这些线进行填充。
minify them and stuff along those lines.

136
00:08:04.579 --> 00:08:06.180
对吧？这很好。
Right?
And that's great.

137
00:08:06.180 --> 00:08:09.129
但我认为这真的很有趣，我认为这很重要
But I think it's really interesting,
I think it's important

138
00:08:09.129 --> 00:08:13.220
考虑您正在工作的应用程序以及它的需求是什么。
to think about the application that
you're working on and what are its needs.

139
00:08:13.220 --> 00:08:15.759
一个非常好的例子是，如果你想到一个内容网站，比如
A really great example is if you
think about a content website like

140
00:08:15.759 --> 00:08:17.600
“纽约时报”或“赫芬顿邮报”或
the New York Times or
the Huffington Post or

141
00:08:17.600 --> 00:08:20.110
沿着这些路线的任何事情，他们需要做什么？
anything along those lines,
what do they need to do?

142
00:08:20.110 --> 00:08:21.329
他们最优先考虑的是什么？
What is their biggest priority?

143
00:08:22.490 --> 00:08:23.920
让你满意，对吧？
Showing you content, right?

144
00:08:23.920 --> 00:08:26.939
他们需要尽快做到这一点。
And they need to do that as
instantaneously as possible.

145
00:08:26.939 --> 00:08:29.843
有人会说，Twitter或Facebook也是如此。
One would argue that's true for
Twitter, or Facebook as well.

146
00:08:29.843 --> 00:08:32.169
是，您登录是为了查看您的时间线，并且
Is, you logged in to see your timeline,
and

147
00:08:32.169 --> 00:08:35.919
他们需要尽快向你展示。
they need to show it to you as
quickly as they possibly can.

148
00:08:35.919 --> 00:08:39.225
向您显示加载栏是不可接受的。
Showing you a load bar is not acceptable.

149
00:08:39.225 --> 00:08:39.870
对吧？
Right?

150
00:08:39.870 --> 00:08:40.620
你会离开的。
You will leave.

151
00:08:40.620 --> 00:08:44.629
你会觉得我应该做点别的事情而不是看新闻。
You'll be like I should be doing something
else rather than checking on the news.

152
00:08:44.629 --> 00:08:46.610
我要回去做真正的工作了。
I'm gonna go back to that real work.

153
00:08:46.610 --> 00:08:48.110
我不需要这么做，对吧？
I don't need to do this, right?

154
00:08:48.110 --> 00:08:50.769
这就是我们正在谈论的
And that's kind of what we're
talking about with those like

155
00:08:50.769 --> 00:08:53.184
明显的百分比，对吧？
noticeable percentages, right?

156
00:08:53.184 --> 00:08:56.369
当人们离开的时候，我实际上不需要现在就这么做。
That's when people go, I don't actually
need to be doing this right now.

157
00:08:56.369 --> 00:08:57.389
我的老板来了。
There is my boss coming.

158
00:08:57.389 --> 00:08:59.836
Command+Tab返回到我的文本编辑器，对吗？
Command+Tab back to my text editor, right?

159
00:08:59.836 --> 00:09:02.150
但是Gmail如果你仔细想想
But Gmail if you think about it,

160
00:09:02.150 --> 00:09:06.715
我们可以容忍每次登录Gmail时都会有一个加载栏，对吧？
we tolerate a loading bar every
time we log into Gmail, right?

161
00:09:06.715 --> 00:09:08.049
因为这是有区别的。
Because there is a difference.

162
00:09:08.049 --> 00:09:11.057
在内容集上，您可能会从一个页面跳到另一个页面。
On a content set you might be
jumping from page to page to page.

163
00:09:11.057 --> 00:09:13.777
另一方面，在像Gmail这样的网站上，
On a site like Gmail on the other hand,

164
00:09:13.777 --> 00:09:18.197
你打开Gmail，一天的大部分时间都在里面生活。
you open up Gmail and you live in it for
the majority of the day.

165
00:09:18.197 --> 00:09:22.724
也许你要换到另一个帐单，但我们愿意支付一次费用，
Maybe you're switching to another tab,
but we're willing to pay that cost once,

166
00:09:22.724 --> 00:09:27.251
因为我们知道，一旦我们支付了加载应用程序的成本，它就在那里
because we know that once we pay the cost
for loading the application it's there and

167
00:09:27.251 --> 00:09:30.730
它是活的，所以它更像是单页面应用程序的感觉。
it's alive so
it's more of the of single page app feel.

168
00:09:30.730 --> 00:09:35.509
但对于Gmail来说，他们需要更多地关注内存链接，对吗？
But for Gmail they need to be a much more
concerned about like memory links, right?

169
00:09:35.509 --> 00:09:38.470
因为如果随着应用程序的存在，随着时间的推移，速度变慢
Because if it get slower over time
as the application exist as they're

170
00:09:38.470 --> 00:09:42.500
把越来越多的东西加到某某上，这变得站不住脚。
adding more and more to the so and
so forth, that becomes untenable.

171
00:09:42.500 --> 00:09:45.950
当像“纽约时报”这样的页面有人从一个页面跳到另一个页面时
While a page like The New York Times
someone's bouncing from page to page to

172
00:09:45.950 --> 00:09:46.674
佩奇，对吧？
page, right?

173
00:09:46.674 --> 00:09:50.540
应用程序的优先级非常不同，对吧？
The priorities are very different for
the applications, right?

174
00:09:50.540 --> 00:09:53.780
所以我们可以容忍这一点，但我们不会容忍来自“纽约时报”的报道。
So we can tolerate this, but
we would not tolerate from New York Times.

175
00:09:53.780 --> 00:09:55.684
我们必须，管理好这些。
We have to, manage those.

176
00:09:55.684 --> 00:10:01.548
所以今天我要争论的是有三种不同的表演。
So I'm gonna argue today that there
are three different kinds of performance.

177
00:10:01.548 --> 00:10:04.967
我们将逐个讨论，而不是仅仅说，
And we're gonna talk about each one
individually rather than just say,

178
00:10:04.967 --> 00:10:08.908
性能做这些事情，可以是一个20个项目的博客帖子，对吗？
performance do these things that could
have been a blog post of 20 items, right?

179
00:10:08.908 --> 00:10:12.070
我们要转身，弄清楚我们是如何看待性能的。
We're going to turn,
figure out how we think about performance.

180
00:10:12.070 --> 00:10:14.700
其中一些东西是如何在引擎盖下工作的
How some of these things
work under the hood and

181
00:10:14.700 --> 00:10:18.100
然后用它来告诉我们该怎么做。
then use that to inform
what we do about it.

182
00:10:18.100 --> 00:10:22.450
所以我想要论证的三种表现类型是存在的
So the three types of performance
that I want to argue exist

183
00:10:22.450 --> 00:10:23.789
是网络负载性能。
are network load performance.

184
00:10:23.789 --> 00:10:27.312
所以，好吧，我们构建客户端应用程序。
So, okay,
we build client side applications.

185
00:10:27.312 --> 00:10:31.977
就这一点而言，您希望使用此应用程序，这是一个独特的问题？
Which is a unique problem insofar that,
you would like this application?

186
00:10:31.977 --> 00:10:34.761
让我将源代码发送给您的应用程序和
Let me send you the source
code to the application and

187
00:10:34.761 --> 00:10:36.412
你可以应付一切。
you can deal with everything.

188
00:10:36.412 --> 00:10:39.580
所以我们需要在用户看到任何东西之前将其传递给他们。
So we need to get that to the user
before they see anything.

189
00:10:39.580 --> 00:10:42.019
所以这显然很重要，我们需要处理这个问题。
So that's obviously important and
we need to deal with that.

190
00:10:42.019 --> 00:10:45.779
这通常是当人们谈论他们所谈论的性能时
And that is normally when people talk
about performance they're talking about

191
00:10:45.779 --> 00:10:47.399
缓存标头和所有这些类型和
caching headers and all those kinds and

192
00:10:47.399 --> 00:10:49.539
我怎样才能让你尽快进入这个页面？
how do I get you to this
page as fast as possible?

193
00:10:49.539 --> 00:10:51.029
这一点很重要。
And that's important.

194
00:10:51.029 --> 00:10:55.789
但我也认为，特别是在现代单页应用程序的世界中，
But I also think that especially in the
world of modern single page applications,

195
00:10:55.789 --> 00:10:59.799
我们需要考虑的好吧，你有申请，现在怎么办？
that we need to think about okay,
you have the application, now what?

196
00:10:59.799 --> 00:11:00.320
对吧？
Right?

197
00:11:00.320 --> 00:11:03.850
因此，我们还将讨论解析和JavaScript，以及
So we're also gonna talk about parsing and
JavaScript, and

198
00:11:03.850 --> 00:11:05.355
编译性能，对吗？
compilation performance, right?

199
00:11:05.355 --> 00:11:08.000
因为同样，特别是在单页面应用程序的情况下，
Because again, especially in
the case of a single page app,

200
00:11:08.000 --> 00:11:11.629
我们将整个应用程序发送给您，您继续并编译它。
we are sending you this entire
application, you go ahead and compile it.

201
00:11:11.629 --> 00:11:15.240
您继续解析整个源代码，并找出它的全部含义和
You go ahead and parse the entire source
code, and figure out what it all means and

202
00:11:15.240 --> 00:11:16.830
然后构建应用程序。
then build the application.

203
00:11:16.830 --> 00:11:20.389
如果我们发送的代码很难解析和编译。
If we send code that is very
hard to parse and compile.

204
00:11:20.389 --> 00:11:22.960
我们写在一台3000美元的MacBook上。
We wrote it on a $3,000 MacBook.

205
00:11:22.960 --> 00:11:27.245
这不是3000美元的MacBook，而是我的作品，
This is not a $3,000 MacBook,
but my work one,

206
00:11:27.245 --> 00:11:31.831
我没有付钱，但我认为它很贵。
I didn't pay for it, but
I assume that it's expensive.

207
00:11:31.831 --> 00:11:35.511
我们有这些昂贵的机器，拥有这些高性能的计算机。
We have these expensive machines that
have these high-powered computers.

208
00:11:35.511 --> 00:11:40.602
但然后我们可以将其发送到移动设备，该设备的解析速度要慢得多
But we then can send it to a mobile device
that is a lot slower at parsing and

209
00:11:40.602 --> 00:11:42.116
编译，对吧？
compiling, right?

210
00:11:42.116 --> 00:11:44.346
但我们这边不能这么做。
But we can't do that on our side.

211
00:11:44.346 --> 00:11:47.123
然后我们必须将其发送给用户，并希望他们也可以解析和
We have to then send it to the user and
hope that they can also parse and

212
00:11:47.123 --> 00:11:48.029
快速编译。
compile it quickly.

213
00:11:48.029 --> 00:11:51.759
因此，了解这些东西在引擎盖下是如何工作的，可以让我们进行某种程度的分析和
So learning how that stuff works under the
hood allows us to kind of one analyze and

214
00:11:51.759 --> 00:11:56.340
做出一些决定，看看伤害在哪里，两个重构我们的代码
make some decisions and see where
the hurt is, and two refactor our code in

215
00:11:56.340 --> 00:12:00.909
这样的方式使得解析器和编译器以及所有这些东西都变得更容易。
such a way that it is easier on the parser
and compiler and all those things.

216
00:12:00.909 --> 00:12:03.110
最后，我们有渲染性能。
Finally, we have rendering performance.

217
00:12:03.110 --> 00:12:04.629
所以我们把它放在页面上了。
So we have it on the page.

218
00:12:04.629 --> 00:12:08.980
我们的JavaScript不仅仅是一个在他们的浏览器中运行的无JS程序，而是
Our JavaScript is not just simply a no JS
program that runs in their browser, but

219
00:12:08.980 --> 00:12:13.375
它还操纵页面，显示用户界面。
also it is manipulating the page,
it's displaying a user interface.

220
00:12:13.375 --> 00:12:15.990
对吧？我们的JavaScript不是生活在真空中，
Right?
Our JavaScript does not live in a vacuum,

221
00:12:15.990 --> 00:12:19.110
而是必须处理dom和浏览器，
but instead has to deal with the dom and
the browser and

222
00:12:19.110 --> 00:12:21.009
所有这些其他组件。
all of these other components.

223
00:12:21.009 --> 00:12:23.600
所以弄清楚整个系统是如何工作的
So figuring out how that
entire system works and

224
00:12:23.600 --> 00:12:26.200
如何确保我们不会碰到那里的大路障。
how to make sure we don't
hit large roadblocks there.

225
00:12:26.200 --> 00:12:30.669
那么三种不同的表演，它们是否同样重要？
So three different kinds of performance,
are they equally as important?

226
00:12:30.669 --> 00:12:33.326
我会争辩说是，但真正的答案是不，对吗？
I would argue yes, but
the real answer is no, right?

227
00:12:33.326 --> 00:12:37.240
因为同样，应用程序需要做什么很重要，对吗？
Because again, it matters what your
application needs to do, right?

228
00:12:37.240 --> 00:12:39.710
以及应用程序中的具体位置。
And where the pinpoints
in your application.

229
00:12:39.710 --> 00:12:41.639
所以我们也会讲一点关于测量和
So we'll also talk a little
bit about measuring and

230
00:12:41.639 --> 00:12:43.610
如何弄清楚这些事情。
how to figure those things out.

231
00:12:43.610 --> 00:12:44.929
好的，非常酷。
All right, very cool.

232
00:12:44.929 --> 00:12:48.080
所以我们将讨论一些需要考虑的数字。
So we're gonna talk a little bit about
some numbers to just think about.

233
00:12:48.080 --> 00:12:50.889
我们今天不会对数字太着迷，因为我认为
We're not gonna obsessed to much about
numbers today, because I think it's

234
00:12:50.889 --> 00:12:54.309
真的很难，好吧，每次互动都需要100毫秒。
really hard to, okay, every interaction
need to be 100 milliseconds.

235
00:12:54.309 --> 00:12:56.740
你启动你的应用程序，然后你就有了两秒钟的互动。
You fire up your app and then you've
a got a two second interaction.

236
00:12:56.740 --> 00:13:00.889
我放弃了，我要回家一天。
I give up, I'm going home for the day.

237
00:13:00.889 --> 00:13:04.210
但心里有一些目标，我认为真的很有用。
But having some goals in mind is,
I think really useful.

238
00:13:04.210 --> 00:13:08.139
所以Google有一个首字母缩写叫做RAIL。
So Google has this acronym called RAIL.

239
00:13:08.139 --> 00:13:11.799
我猜他们可能还有其他人，比如骗子，或者其他类似的人，
I guess they could have had other ones
like liar, or anything along those lines,

240
00:13:11.799 --> 00:13:14.200
但铁路是他们追求的目标。
but RAIL is the one they went for.

241
00:13:14.200 --> 00:13:18.840
它基本上是一组考虑性能的基准，
And it's basically a set of benchmarks
to think about performance,

242
00:13:18.840 --> 00:13:19.739
有效的目标。
effectively goals.

243
00:13:21.549 --> 00:13:27.379
因此，Rails代表Response Animation Idle and Load。
So, RAIL stands for
Response Animation Idle and Load.

244
00:13:27.379 --> 00:13:29.159
我们一会儿再看一遍。
And we'll look at those again in a second.

245
00:13:29.159 --> 00:13:31.649
但这里又是回应部分。
But here's that response part again.

246
00:13:31.649 --> 00:13:34.370
这就是人类感知相互作用的方式。
This is how humans perceive interactions.

247
00:13:34.370 --> 00:13:35.509
我们以前见过。
We saw it before.

248
00:13:35.509 --> 00:13:37.830
0到100毫秒，瞬时。
0 to 100 milliseconds, instantaneous.

249
00:13:37.830 --> 00:13:40.590
十秒钟后，我要去别的地方，但是
After ten seconds,
I'm going somewhere else, but

250
00:13:40.590 --> 00:13:43.289
即使在一秒钟之后，心理环境也会发生变化。
even after a second there's
a mental context switch.

251
00:13:43.289 --> 00:13:46.230
这又是说也许我应该做些其他的事情。
Which again is that maybe I
should be doing something else.

252
00:13:46.230 --> 00:13:46.936
所以我们要瞄准
So we wanna aim for

253
00:13:46.936 --> 00:13:51.326
低于100毫秒。&gt；&gt；Steve Kinney：动画，
under 100 milliseconds.
&gt;&gt; Steve Kinney: Animations,

254
00:13:51.326 --> 00:13:55.342
大多数屏幕，我认为新的iPad Pro有点不同，但是
most screens, I think the new iPad
Pro is a little bit different, but

255
00:13:55.342 --> 00:13:58.389
我们的大多数屏幕以每秒60帧的速度刷新，
most of our screens refresh
at 60 frames a second,

256
00:13:58.389 --> 00:14:02.375
在每一帧之间变成大约16毫秒。
which turns into about 16
milliseconds in between every frame.

257
00:14:02.375 --> 00:14:05.595
这就是屏幕刷新的频率，所以你走得更快，
So that's how often the screen refreshes,
so you go any faster than that,

258
00:14:05.595 --> 00:14:08.019
没关系，屏幕不会显示任何东西。
it doesn't matter,
the screen's not gonna show anything.

259
00:14:08.019 --> 00:14:09.389
但你变得更慢，
But you get slower than that,

260
00:14:09.389 --> 00:14:12.299
并且用户可以开始知道滚动变得有点不稳定。
and users can start to know that
the scrolling is getting a little janky.

261
00:14:12.299 --> 00:14:13.090
或者拖拽和
Or the dragging and

262
00:14:13.090 --> 00:14:16.279
掉下来，我工作的编辑变得有点怪异。
dropping, the editor that I worked
on is getting a little weird.

263
00:14:16.279 --> 00:14:20.700
所以16毫秒真的很重要，
So it's like 16 milliseconds is really
kind of important to think about,

264
00:14:20.700 --> 00:14:23.049
就是你想要一个新的画面出现在屏幕上，
is that you wanna get
a new frame to the screen,

265
00:14:23.049 --> 00:14:25.980
如果你想让任何东西都有动画效果，让它看起来很好。
if you're trying to animate anything and
have it look good.

266
00:14:25.980 --> 00:14:29.190
但那16毫秒都不是你的
But all those 16
milliseconds are not yours.

267
00:14:29.190 --> 00:14:32.259
浏览器正在做其他事情，一些正在运行的Chrome扩展
The browser's doing other stuff,
some Chrome extensions that are running

268
00:14:32.259 --> 00:14:36.110
正在做其他的事情，所以你必须分享这段时间。
are doing other stuff, so
you have to share that time.

269
00:14:36.110 --> 00:14:39.889
IDLE是它的另一个部分，它基本上是任何不需要的东西
Idle is another part of it which is
basically anything that doesn't need to be

270
00:14:39.889 --> 00:14:42.740
立即完成，尝试在用户什么都不做的时候做。
done immediately, try to do when
the user's not doing anything.

271
00:14:42.740 --> 00:14:47.559
好的，现在他们正在阅读文章，现在去找任何令人毛骨悚然的跟踪软件
Okay, now they're reading the article, now
go get whatever creepy tracking software

272
00:14:47.559 --> 00:14:50.240
你想放在那里弄清楚他们在做什么，对吗？
that you wanna put on there to figure
out what they are doing, right?

273
00:14:50.240 --> 00:14:51.960
不要在初始页面加载时这样做，或者
Don't do that for the initial page load or

274
00:14:51.960 --> 00:14:55.019
否则就没有什么可以追踪的了，因为他们已经走了。
else there is gonna be nothing
to track because they're gone.

275
00:14:55.019 --> 00:14:59.820
如果你能在15毫秒内完成，很好，
And if you can get that done in
15 millisecond chunks, great,

276
00:14:59.820 --> 00:15:04.250
因为如果他们做了什么，你就准备好了。
because then if they do do something,
you're ready to deal with that.

277
00:15:04.250 --> 00:15:04.940
最后，加载。
Finally, Load.

278
00:15:04.940 --> 00:15:07.879
如果我们能在一秒钟内看到整页那就太好了，
It would be great if we could get
the entire page under a second,

279
00:15:07.879 --> 00:15:10.850
但除此之外，它是第一个有意义的油漆的理想选择。
but otherwise it's ideal for
first meaningful paint.

280
00:15:10.850 --> 00:15:12.129
那么，第一幅有意义的画是什么呢？
So what is a first meaningful paint?

281
00:15:12.129 --> 00:15:13.929
这真的取决于你的申请。
It really depends on your application.

282
00:15:13.929 --> 00:15:18.889
如果你是推特，可能是中间时间线，或者提到或者其他什么，
If you are Twitter maybe it's that middle
timeline, or mentions or whatever first,

283
00:15:18.889 --> 00:15:22.740
然后你可以得到小的侧边栏和搜索以及所有这些东西。
and then you can get the little sidebars
and the search and all of those things.

284
00:15:22.740 --> 00:15:26.169
试图在不到一秒的时间内到达第一个非常重要的事情。
Trying to get to the first very
important thing in under a second.

285
00:15:27.289 --> 00:15:28.580
这些都是需要考虑的重要问题。
Those are important to think about.

286
00:15:28.580 --> 00:15:31.370
我们不会，就像我之前说的，
We're not going to, like I said before,

287
00:15:31.370 --> 00:15:35.846
痴迷于他们，因为我可以告诉你，我拿了整个铁路模型。
obsess over them because I can tell
you I took the whole rail model.

288
00:15:35.846 --> 00:15:39.712
我看着我工作的应用程序，几乎哭了，对吧？
I looked at the application I
worked on and almost cried, right?

289
00:15:39.712 --> 00:15:44.677
因为这些都不是我喜欢的大型桌面应用的方式
Because like those were not anywhere near
the way that I like large desktop apps in

290
00:15:44.677 --> 00:15:47.289
网络浏览器正常工作，对吧？
the web browser was working, right?

291
00:15:47.289 --> 00:15:52.590
所以我会争辩说这是关于逐渐变好的，对吗？
So I would argue it's about progressively
getting a little better, right?

292
00:15:52.590 --> 00:15:56.519
找出应用程序中受伤害的区域。
Figuring out where the areas of
hurt are in your application.

293
00:15:56.519 --> 00:15:58.850
想办法，好吧，我知道这很慢。
Figuring out how to, okay,
I know this is slow.

294
00:15:58.850 --> 00:16:00.259
这是第一步对吧？
That's step one, right?

295
00:16:00.259 --> 00:16:05.639
第二步是弄清楚，好的，我知道如何在Chrome中读取性能时间表
Step two is figuring out, okay I know how
to read the performance timeline in Chrome

296
00:16:05.639 --> 00:16:09.720
然后找出，想出一些假设来对它做些什么。
and figure out, come up with some
hypothesis of what to do about it.

297
00:16:09.720 --> 00:16:13.003
然后第三步是对该做什么有一些想法，然后第四步是测量
And then step three is having some ideas
of what to do, and four is then measuring

298
00:16:13.003 --> 00:16:15.551
看看它是变好了还是变坏了，以及沿着这些路线的东西。
to see if it got better or worse,
and stuff along those lines.

299
00:16:15.551 --> 00:16:18.804
所以当我准备这个研讨会的时候，我写了这个简介
So when I was preparing this workshop,
I wrote this blurb of

300
00:16:18.804 --> 00:16:22.398
原来是关于它的，并发送给我的一些同事。
originally what it was about and
sent it to some of my colleagues.

301
00:16:22.398 --> 00:16:26.971
我的一位前同事，罗密卡，想出了另一个头衔
And one of my former co workers, Romeeka,
came up with an alternative title for

302
00:16:26.971 --> 00:16:31.275
该研讨会名为“优化Web性能的策略当，
this workshop called, Strategies for
Optimizing Web Performance When,

303
00:16:31.275 --> 00:16:33.940
老实说，你今天有5个会议
Honestly, You Have Like
5 Meetings Today and

304
00:16:33.940 --> 00:16:37.789
必须选择正确的山丘来策略性地死亡。
Have to Choose the Correct Hills
upon Which to Strategically Die.

305
00:16:37.789 --> 00:16:39.389
[笑]对吧？
[LAUGH] Right?

306
00:16:39.389 --> 00:16:45.585
观看一些Google IO演示文稿是非常容易的，
It's very easy for, to watch some
Google IO presentation where it's like,

307
00:16:45.585 --> 00:16:50.830
是的，我们将整个应用程序重写为一个进步的Web应用程序
yes we rewrote the entire application
as a progressive web app and

308
00:16:50.830 --> 00:16:52.663
现在超快了
now it's super fast.

309
00:16:52.663 --> 00:16:55.309
进步的网络应用程序实际上很酷，你完全应该在它们上看我的课程。
Progressive web apps are actually cool you
should totally watch my course on them.

310
00:16:55.309 --> 00:16:59.138
但就好像这通常不是大改写不是的东西
But it's like that is usually not
something the big rewrite is not

311
00:16:59.138 --> 00:17:02.419
你明天就能做的事，对吧？
something you're gonna be
able to do tomorrow right?

312
00:17:02.419 --> 00:17:05.380
所以这里的目标是，考虑到当前的世界，考虑到当前的状态
So the goal here is, given the current
world, given the current state of

313
00:17:05.380 --> 00:17:07.869
你正在做的事情，我们怎么让它更快？
the thing that you're working on,
how do we make it faster?

314
00:17:07.869 --> 00:17:08.982
我们怎样才能让它变得更好？
How do we make it better?

315
00:17:08.982 --> 00:17:11.396
我们怎样才能慢慢地重复这一点
And how do we repeat that until slowly but

316
00:17:11.396 --> 00:17:14.311
我们肯定已经开始接近这些基准了吗？
surely we start approaching
those benchmarks?

317
00:17:14.311 --> 00:17:16.669
所以重要的是要考虑什么对你来说是重要的。
So it's important to think
about what matters to you.

318
00:17:16.669 --> 00:17:19.826
然后找出如何测量它，对吗？
And then figuring out how to measure it,
right?

319
00:17:19.826 --> 00:17:24.961
所以我谈到，也许显示内容而不是泄漏内存，
So I talked about, maybe showing
content versus not leaking memory,

320
00:17:24.961 --> 00:17:30.029
这很酷，但也很难作为一个已知的东西来表达，对吧？
that's cool, but it's also hard to
express as a known thing, right?

321
00:17:30.029 --> 00:17:34.779
所以在你的应用程序中弄清楚什么是真正重要的事情，对吗？
So figure out in your application what
is actually the important thing, right?

322
00:17:34.779 --> 00:17:37.839
因此，“纽约时报”可能会再一次关注第一个头条新闻的时间。
So again, New York Times might care
about the time to first headline.

323
00:17:37.839 --> 00:17:41.160
Twitter可能会关心你写一条tweet需要多长时间。
Twitter might care about how long it
takes you to be able to write a tweet.

324
00:17:41.160 --> 00:17:43.673
也许下次对我来说应该更长一些，对吧？
Maybe that should be longer for
me some other time, right?

325
00:17:43.673 --> 00:17:46.337
也许我需要延迟一下，在我打字之前想一想我在推特上写的是什么
Maybe I need a delay to think about
what I'm tweeting before I type it

326
00:17:46.337 --> 00:17:46.960
放进那个盒子里。
into that box.

327
00:17:46.960 --> 00:17:52.190
但对于推特，他们可能想让我尽可能快地发推文。
But for Twitter they wanna probably
get me to tweet as fast as possible.

328
00:17:52.190 --> 00:17:55.529
不管应用程序是什么，所以我在一个大的电子邮件编辑器上工作，对吗？
Whatever the application is, so
I work on a big email editor, right?

329
00:17:55.529 --> 00:17:58.109
编辑器加载的时间，以便您可以开始拖动和
Time for the editor to load up so
you can start dragging and

330
00:17:58.109 --> 00:18:00.500
加入你用来创建电子邮件的模块，对吗？
dropping in the modules that you
use to create the email, right?

331
00:18:00.500 --> 00:18:02.970
这可能是我们最重要的部分，需要多长时间
That might be the important part for
us, how long does it take

332
00:18:02.970 --> 00:18:06.700
在登录到您正在创建新的营销活动的点之间？
between log in to get to the point where
you're creating a new marketing campaign?

333
00:18:06.700 --> 00:18:09.440
这将是一个重要的例子
That would be an example of something
that would be important for

334
00:18:09.440 --> 00:18:10.220
我工作的应用程序。
the application that I work on.
