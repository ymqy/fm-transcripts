WEBVTT

1
00:00:00.048 --> 00:00:03.408
&gt；&gt；steve：那么让我们做另一件事来玩玩。
&gt;&gt; Steve: So let's do one other
thing to play around with.

2
00:00:03.408 --> 00:00:07.209
这就像我们的倒数第二个科学实验就在这片土地上
It'll be like our kind of second to last
science experiment just in the land of

3
00:00:07.209 --> 00:00:08.849
JavaScript浏览器引擎。
the JavaScript browser engine.

4
00:00:09.919 --> 00:00:11.560
我们试试别的。
Let's try something else.

5
00:00:14.859 --> 00:00:19.225
&gt；&gt；Steve：事实证明，如何确定JavaScript的范围可能有一些重要的意义
&gt;&gt; Steve: It turns out that how you scope
your JavaScript can have some important

6
00:00:19.225 --> 00:00:21.449
对事物运行方式的影响。
implications into how things run.

7
00:00:21.449 --> 00:00:24.570
让我们回到我们的好朋友基准测试。
Let’s go back to our
good friend benchmark.

8
00:00:27.230 --> 00:00:31.750
我要做一个小小的测试函数，因为发生了很多事情。
I’m gonna make a little test function just
cuz there’s a lot of stuff happening.

9
00:00:33.880 --> 00:00:39.359
我们会有我们的测试功能，好的，整齐。
We’ll have our test function,
all right, neat.

10
00:00:39.359 --> 00:00:44.691
我们会说就像它会拿到一分一样
We’ll say like it'll take a point and

11
00:00:44.691 --> 00:00:50.531
它会加上它的x和y，我不知道。
it'll add its x and its y, I don't know.

12
00:00:50.531 --> 00:00:55.683
point.x+point.y，
point.x + point.y,

13
00:00:55.683 --> 00:01:00.320
我们会继续，
and we'll go ahead,

14
00:01:00.320 --> 00:01:08.725
做x和y，所以this.x=x。
make that x and y, so this.x = x.

15
00:01:08.725 --> 00:01:14.609
this.y=y，非常酷。
This.y = y, very cool.

16
00:01:14.609 --> 00:01:19.950
然后在这个函数中，我们将创建一个新的点。
And then in this function,
we'll make a new point.

17
00:01:27.000 --> 00:01:29.450
&gt；&gt；Steve：我们将在点上添加x和y。
&gt;&gt; Steve: And we'll add the x and
y at the point.

18
00:01:29.450 --> 00:01:36.420
好的，制作一个对象，它有一个x和y，创建其中一个。
All right, make an object,
it's got an x and y, create one of them.

19
00:01:36.420 --> 00:01:37.129
我们会把它们加在一起。
We'll add them together.

20
00:01:38.979 --> 00:01:40.329
&gt；&gt；steve：所以我们要进去。
&gt;&gt; Steve: So we'll go in here.

21
00:01:41.689 --> 00:01:46.745
我们只是说，每次都调用那个测试函数。
And we'll just say,
call that test function every time.

22
00:01:46.745 --> 00:01:50.060
我不想衡量我做了整件事。
I don't wanna measure me
making the whole thing.

23
00:01:50.060 --> 00:01:53.090
我只是想在练习部分运行它。
I'm just gonna run it
in the exercise part.

24
00:01:53.090 --> 00:01:56.209
不是为了破坏惊喜，但我要把这个数字调低一点。
And not to ruin the surprise, but I'm
gonna turn this number down a little bit.

25
00:02:02.234 --> 00:02:07.661
&gt；&gt；Steve：800毫秒，似乎相当
&gt;&gt; Steve: 800 milliseconds,
that seems like quite

26
00:02:07.661 --> 00:02:14.084
考虑到我有更大的迭代
a bit considering I had that
much larger iteration for

27
00:02:14.084 --> 00:02:18.949
只是加了两个东西，结果是47。
just adding 2 things, and it was 47.

28
00:02:18.949 --> 00:02:24.002
我想这大概会持续8秒钟，
I think this would go for
about eight seconds,

29
00:02:24.002 --> 00:02:27.259
如果我真的听之任之。
if I let it really go for it.

30
00:02:27.259 --> 00:02:28.829
这似乎是不可接受的。
That seems unacceptable.

31
00:02:28.829 --> 00:02:30.800
对我来说很奇怪，对吧？
And it’s like weird to me, right?

32
00:02:30.800 --> 00:02:31.479
这有什么不同？
How is this that much different?

33
00:02:31.479 --> 00:02:33.829
我不知道。
I don’t know.

34
00:02:33.829 --> 00:02:34.590
我量过了。
I’ve measured.

35
00:02:34.590 --> 00:02:35.639
我知道这很糟糕。
I know that it’s bad.

36
00:02:35.639 --> 00:02:36.629
我只是要移动一些代码。
I’m just gonna move some code around.

37
00:02:36.629 --> 00:02:37.129
别管我。
Don’t mind me.

38
00:02:38.469 --> 00:02:41.460
让我们继续把这个放在这里，好吗？
Let's go ahead and
put this up here, right?

39
00:02:41.460 --> 00:02:43.360
我不需要在每次迭代中都定义类。
I don't need to define
the class in every iteration.

40
00:02:46.329 --> 00:02:53.219
&gt；&gt；Steve：9毫秒，[笑]这稍微快了一点。
&gt;&gt; Steve: Nine milliseconds,
[LAUGH] that's a wee bit faster.

41
00:02:53.219 --> 00:03:00.979
好的，现在有人会争辩说，好吧，你在每次运行中都创建了一个类。
Okay, now one would argue, well,
you are creating a class in every run.

42
00:03:00.979 --> 00:03:05.520
我不认为这是让我从9毫秒到800毫秒的原因，对吧？
I don't think that's what got me
from 9 milliseconds to 800, right?

43
00:03:05.520 --> 00:03:10.650
看起来这里可能有别的事情发生。
It seems like there might be
something else going on here.

44
00:03:10.650 --> 00:03:14.129
所以我有些怀疑。
And so I have some suspicions.

45
00:03:14.129 --> 00:03:16.520
所以我要做的就是再试一件事。
So what I'm gonna do is I'm
gonna just try one more thing.

46
00:03:16.520 --> 00:03:18.979
还记得我比较所有这些类型的时候吗？
Remember when I was
comparing all those types?

47
00:03:18.979 --> 00:03:21.296
我想试试另一件事。
I wanna try one other thing.

48
00:03:21.296 --> 00:03:25.896
我要继续我要抓住这一点
I'm gonna go ahead and
I'm gonna grab this point and

49
00:03:25.896 --> 00:03:28.829
把它带回一班。
bring it back to the classes one.

50
00:03:28.829 --> 00:03:30.590
我要在这里做些科学研究。
I'm gonna do some science here.

51
00:03:30.590 --> 00:03:32.300
我已经有了，太好了。
I had it already, that's great.

52
00:03:32.300 --> 00:03:38.000
所以在另一种情况下，我做了一个这样的
So in the other case,
I was making one of these

53
00:03:38.000 --> 00:03:40.960
在测试函数中，另一个我把它放在了一个作用域上。
inside the test function, and
the other one I had it up a scope.

54
00:03:40.960 --> 00:03:45.400
我有相同的点类，我不是一直在重写它。
I had it the same point class,
I wasn't rewriting it all the time.

55
00:03:45.400 --> 00:03:48.870
所以我运行了这段代码，我知道这些都是相同的类型。
So I've run this code,
I know that these are the same type.

56
00:03:48.870 --> 00:03:50.319
如果我有一个
What if I had a,

57
00:03:58.622 --> 00:04:00.639
&gt；&gt；Steve：我们将返回一个新的点。
&gt;&gt; Steve: We'll return a new point.

58
00:04:05.962 --> 00:04:08.650
&gt；&gt；steve：我们会说做一个重点。
&gt;&gt; Steve: And we'll say make a point.

59
00:04:13.935 --> 00:04:15.409
&gt；&gt；steve：我们会说做一个重点。
&gt;&gt; Steve: And we'll say make a point.

60
00:04:19.920 --> 00:04:21.649
&gt；&gt；steve：我们会看看他们是否有相同的地图。
&gt;&gt; Steve: And
we'll see if they have the same map.

61
00:04:23.689 --> 00:04:28.060
&gt；&gt；Steve：它们没有，但它们是由相同的基础设施构成的
&gt;&gt; Steve: They don't, but they were made
from the same infrastructure that worked

62
00:04:28.060 --> 00:04:29.779
最后一次对吧？
last time, right?

63
00:04:29.779 --> 00:04:30.579
我们看到了。
We saw it.

64
00:04:30.579 --> 00:04:32.009
我不会失去它，对吧？
I'm not losing it, right?

65
00:04:32.009 --> 00:04:37.569
我们看到，当我上次使用点类时，它们是相同的。
We saw that when I used the point class
last time that they were the same.

66
00:04:39.110 --> 00:04:41.600
现在我在这个函数中做，它们是不同的。
And now I'm doing it inside this
function and they're different.

67
00:04:41.600 --> 00:04:42.858
而且，它要慢得多。
Also, it's way slower.

68
00:04:42.858 --> 00:04:44.909
比如9毫秒对800毫秒
Like 9 milliseconds versus 800.

69
00:04:44.909 --> 00:04:48.949
有猜想吗？
Any guesses?

70
00:04:48.949 --> 00:04:54.569
当我们在函数内部表达观点时，理论上它不是解析。
When we make the point inside of a
function, it's not parsing, theoretically.

71
00:04:54.569 --> 00:04:56.909
我们每一次都在这样做，这是真的。
We are doing it every time, that is true.

72
00:04:56.909 --> 00:04:58.699
但并不是解析造成了很大的不同。
But it's not the parsing
making the big difference.

73
00:05:00.300 --> 00:05:04.019
我们每次都将这个类作为一个不同的原型链，对吧，
We're making this class as a different
prototype chain every time, right,

74
00:05:04.019 --> 00:05:06.899
这意味着从这里出来的每一个点都指向
which means that each one of these
points that come out of here points to

75
00:05:06.899 --> 00:05:08.639
一个不同的原型对象。
a different prototype object.

76
00:05:08.639 --> 00:05:12.879
我们每次都做一个新的点函数，以此类推。
We're making a fresh point function
every time, so on and so forth.

77
00:05:12.879 --> 00:05:16.560
我们可以看到我把代码放在哪里的这个细微的差别
And we can see that this little, tiny
difference in where I've put that code

78
00:05:18.279 --> 00:05:21.500
显然对我的代码有多慢产生了戏剧性的影响。
clearly had dramatic effects
on how slow my code was.

79
00:05:21.500 --> 00:05:24.910
9毫秒，800毫秒，对吧？
9 milliseconds, 800 milliseconds, right?

80
00:05:24.910 --> 00:05:28.470
现在，这是否意味着在今天的午餐期间，我们会检查我们的代码库和
Now, does this mean that during lunch
today we go through our code bases and

81
00:05:28.470 --> 00:05:31.180
每次我在另一个函数中有一个类的时候，我们都在寻找？
we look for every time I've got
a class inside another function?

82
00:05:31.180 --> 00:05:33.810
不，但它会注意到你敞开心扉
No, but it does notice you open up

83
00:05:33.810 --> 00:05:36.860
您的Web应用程序在生产模式下运行时。
your web application while it's
running in production mode.

84
00:05:36.860 --> 00:05:39.879
你晚点去看，你做表演的事情，你就像，哇，
You go later and see, you run
the performance thing, you're like, wow,

85
00:05:39.879 --> 00:05:42.930
这需要很长的时间，对吧？
that's taking a really long time, right?

86
00:05:42.930 --> 00:05:44.579
然后，你开始钻进去。
Then, you begin to spelunk in there.

87
00:05:44.579 --> 00:05:48.206
至少你可以对这些东西是如何工作的有一些假设，所以
And at least you can have some hypotheses
about how this stuff actually works, so

88
00:05:48.206 --> 00:05:50.829
你不是在往墙上扔东西，对吧？
that you're not just throwing
stuff at the wall, right?

89
00:05:50.829 --> 00:05:54.420
我知道如果我在一个函数内部制作东西，它可以有一个不同的链，
I know that if I'm making stuff inside of
a function it can have a different chain,

90
00:05:54.420 --> 00:05:58.519
我知道如果他们通过不同的途径到达同一个物体，
I know if they went through different
paths to get to the same object,

91
00:05:58.519 --> 00:06:00.110
这可能就是问题所在对吧？
that can be the problem, right?

92
00:06:00.110 --> 00:06:03.553
不要推测性地遍历您的代码库，并在任何地方都这样做。
Do not speculatively go through your
code base and do this everywhere.

93
00:06:03.553 --> 00:06:06.589
但我想，这个加载时间太长了。
But I'm like,
this is taking too long to load.

94
00:06:06.589 --> 00:06:09.060
或者就像我在那里看到的红色小三角形。
Or like I see the little
red triangle there.

95
00:06:09.060 --> 00:06:11.970
或者我看到我正沿着这条线钉住CPU或其他什么东西。
Or I see that I'm pegging the CPU or
something along those lines.

96
00:06:11.970 --> 00:06:17.194
现在，是的，我们对这里发生的事情有一些假设，对吗？
Now, yes, we have some hypotheses
on what's happening here, right?

97
00:06:17.194 --> 00:06:18.975
我们甚至还没有接触到浏览器的土地，
We haven't even touched
the browser land yet,

98
00:06:18.975 --> 00:06:20.995
这可能会有一大堆其他的含义。
which can have a whole bunch
of other implications.

99
00:06:20.995 --> 00:06:24.285
但是我们知道并不是所有的JavaScript都是平等的。
But we do know that not all
JavaScript is created equal.

100
00:06:24.285 --> 00:06:28.555
而且我们知道我们的代码是如何构造的，可能会有一些非常戏剧性的东西
And we know that how our code is
structured can have some pretty dramatic

101
00:06:28.555 --> 00:06:29.990
对此的影响。
impacts on that.

102
00:06:29.990 --> 00:06:36.625
我们现在再看一件，涡扇对你做的一件事。
We're gonna look at one more now,
one more thing that turbofan does to you.

103
00:06:36.625 --> 00:06:40.175
好消息是它就像，嘿，它做这件事
And the good news is it's like,
hey, it does this thing for

104
00:06:40.175 --> 00:06:44.507
我和它只是工作的大部分时间，一切都很好，对吗？
me and it just works out most of
the time and everything is great, right?

105
00:06:44.507 --> 00:06:47.590
没有行动项目给你，这是一个很大的解脱之后，
There's no action item for you,
which is big relief after,

106
00:06:47.590 --> 00:06:51.720
我必须担心作用域和我的对象是如何制作的以及诸如此类的事情。
I have to worry about scoping and how my
objects are made and all that kinda stuff.

107
00:06:51.720 --> 00:06:54.740
所以下一个会更有趣。
So this next one'll be
a little bit more fun.

108
00:06:54.740 --> 00:06:57.040
当我们谈论JavaScript编译器时，有趣是一个很强的词。
Fun is a strong word when we're
talking about JavaScript compilers.

109
00:06:58.439 --> 00:07:02.259
所以，是的，但是上一节的要点是，涡扇能够
So, yeah, but the takeaways from
the previous section, turbofan is able to

110
00:07:02.259 --> 00:07:06.079
如果传递一致的值，则以实质性的方式优化代码。
optimize your code in substantial ways
if you pass it consistent values.

111
00:07:06.079 --> 00:07:08.420
那么这对我们来说到底意味着什么呢？
So what does that really mean for us?

112
00:07:08.420 --> 00:07:11.269
如果你可以有一个创建对象的函数，而不是
If you can have a function that
creates the object, rather

113
00:07:11.269 --> 00:07:15.269
比你每次手工做的都要好，如果你总是做一个对象的字面意思，
than you doing it by hand every time,
if you're always making a object literal,

114
00:07:15.269 --> 00:07:18.480
是的，您可以键入花括号和属性，对吗？
yes, you could type the curly braces and
the properties, right?

115
00:07:18.480 --> 00:07:21.634
但是如果你知道如果你使用的很多，它可能是有意义的，使一个函数
But if you know if you're using a lot, it
might make sense to make a function that

116
00:07:21.634 --> 00:07:24.480
为您提供了一个一致的对象，每次都是以相同的方式创建的。
gives you a consistent object that
was created the same way every time.

117
00:07:24.480 --> 00:07:27.360
那样的话，你就不必去想这件事了。
And that way,
you don't have to think about this.

118
00:07:27.360 --> 00:07:31.279
你每时每刻都在想我们刚刚谈到的事情，
Every moment you're thinking about all
the stuff that we just kinda talked about,

119
00:07:31.279 --> 00:07:35.550
就像您可能需要在架构中进行一些更改
it's like you probably have some changes
you need to make in the architecture

120
00:07:35.550 --> 00:07:37.040
你的代码。
of your code.

121
00:07:37.040 --> 00:07:38.920
并且尽量不要在事后修改它们。
And try not to modify them after the fact.

122
00:07:38.920 --> 00:07:42.069
也许以同样的方式创建一个新对象是有意义的。
Maybe it makes sense to make a new
object that gets created the same way.

123
00:07:42.069 --> 00:07:46.069
因为这样做的所有其他物体都会有相同的地图。
Cuz that will have the same map as
all the other objects made that way.

124
00:07:46.069 --> 00:07:50.141
但可能真正容易做到这一点的方法是我们都很高兴
But probably the real easy way to do
this is we all get really happy about

125
00:07:50.141 --> 00:07:53.319
打字稿或流程，就像，是的，我要去做。
TypeScript or Flow and like,
yeah, I'm gonna do it.

126
00:07:53.319 --> 00:07:56.199
然后我必须打字，我不懂打字稿或流程，
And then I have to make a type and
I don't understand TypeScript or Flow and

127
00:07:56.199 --> 00:07:57.459
我对自己说，你知道吗？
I say to myself, you know what?

128
00:07:57.459 --> 00:07:58.439
我只是用JavaScript写这个。
I'm just writing this in JavaScript.

129
00:07:58.439 --> 00:08:01.220
对我来说不值得，[笑]对吗？
It's not worth it for me, [LAUGH] right?

130
00:08:01.220 --> 00:08:05.800
这些系统具有一定的优点，可以避免运行时错误和
There are certain advantages that these
systems above avoiding runtime errors and

131
00:08:05.800 --> 00:08:09.790
诸如此类的事情，有一些优化程序可以做好准备的事情
stuff like that, there are things to
do that the optimizer can get ready for

132
00:08:09.790 --> 00:08:15.163
如果你遵循这个道德准则，一直都有相同的类型，对吗？
if you follow this code of ethics by
having the same types all the time, right?

133
00:08:15.163 --> 00:08:19.689
所以这里的大多数答案要么是测量，然后看看发生了什么，
So most of the answers here are either
measure and see what's happening and,

134
00:08:19.689 --> 00:08:22.269
希望你现在能更好地做出假设。
hopefully, you're a little bit
better at making hypotheses now.

135
00:08:22.269 --> 00:08:24.843
或者，b，在一天结束的时候我要说的是，
Or, b, the point I'm gonna end
with at the end of the day is,

136
00:08:24.843 --> 00:08:27.600
如果我们可以让工具为我们做这些事情，那就太好了，对吧？
be great if we could just have
tools do this stuff for us, right?

137
00:08:27.600 --> 00:08:29.480
这才是最终正确的答案。
That is ultimately the right answer.
