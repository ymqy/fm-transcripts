WEBVTT

1
00:00:00.270 --> 00:00:02.379
&gt；&gt；steve kinney：那么让我们回去做一些更多的实验。
&gt;&gt; Steve Kinney: So let's go back and
let's do a few more experiments.

2
00:00:04.219 --> 00:00:07.650
&gt；&gt；Steve Kinney：让我们看看，我有一个名为Classes的类，看起来很有用。
&gt;&gt; Steve Kinney: Let's take a look, I have
one called classes, that seems useful.

3
00:00:07.650 --> 00:00:13.189
所以你可以看到我们隐藏了另一个这样的东西
And so you can see we have
another one of these hidden

4
00:00:13.189 --> 00:00:18.120
VA特殊函数，这个函数叫做HaveSameMap。
VA special functions, and
this one is called HaveSameMap.

5
00:00:18.120 --> 00:00:20.199
对，就是它们有相同的形状吗？
Right, which is,
do they have the same shape?

6
00:00:20.199 --> 00:00:25.589
他们两个是单形的，对吗？
Are the two of them monomorphic, right?

7
00:00:25.589 --> 00:00:27.929
所以，让我们继续，让我们尝试一下这段代码。
So let's go ahead and let's try this code.

8
00:00:27.929 --> 00:00:31.879
所以如果我不使用Allow-Native-语法，它就会崩溃。
And so it will crash if I don't use
that allow-natives-syntax thing.

9
00:00:31.879 --> 00:00:39.006
所以我会说node，&gt；&gt；Steve Kinney：allow-local-语法
So I'll say node,
&gt;&gt; Steve Kinney: allow-natives-syntax

10
00:00:39.006 --> 00:00:43.049
说classes.js，我是如何得到false的？
Say classes.js And how did I get false?

11
00:00:43.049 --> 00:00:46.289
这就说得通了，其中一个有a属性，一个有b属性，
Which makes sense, one of them has an a
property, one of them has a b property,

12
00:00:46.289 --> 00:00:47.240
它们是不一样的。
they are not the same.

13
00:00:47.240 --> 00:00:51.969
好吧，酷，如果它们是一样的呢？
All right cool,
what if they were the same?

14
00:00:54.780 --> 00:00:57.770
是的，好吧，就像他们在这个世界上的理智一样，
True, all right,
like their sanity in the world,

15
00:00:57.770 --> 00:00:59.359
我们知道一切都会好起来的。
we know that everything is gonna be okay.

16
00:01:02.659 --> 00:01:05.108
好吧，那么价值重要吗？
All right, so does the value matter?

17
00:01:09.692 --> 00:01:10.329
&gt；&gt；steve kinney：让我们来看看。
&gt;&gt; Steve Kinney: Let's check it out.

18
00:01:12.789 --> 00:01:17.039
对，这个价值显然让它有所不同，但是
Right, that value clearly made
it something different but

19
00:01:17.039 --> 00:01:17.859
这是一个相当大的数字。
that's a pretty large number.

20
00:01:17.859 --> 00:01:22.310
让我们使用一个更像公平的数字。
Let's use use a more like fair number.

21
00:01:24.329 --> 00:01:25.829
现在是真的了。
Now it's true.

22
00:01:25.829 --> 00:01:27.189
我现在就会毁了那一个
I will spoil that one now just so

23
00:01:27.189 --> 00:01:31.049
在我稍后解释之前，你不必活在你心中挥之不去的疑虑中。
you don't have to live with that lingering
doubt in you until I explain it later.

24
00:01:31.049 --> 00:01:36.590
也就是说，在传递一个32位整数后，它不再是相同的小数字了。
Which is, after you pass a 32 bit integer,
it's not the same small number anymore.

25
00:01:36.590 --> 00:01:40.219
就像，在一定的尺寸之后，它们是不同的类型。
Like, after a certain size,
they are a different type.

26
00:01:40.219 --> 00:01:44.090
对，但如果你保持，如果你低于32位数字，
Right, but if you keep,
if you're under a 32 bit number like,

27
00:01:44.090 --> 00:01:45.840
如果你保持你的数字小，他们是相同的类型。
if you keep your numbers small,
they are the same type.

28
00:01:45.840 --> 00:01:48.579
我们将看一个小图表，稍后会有一大堆意义。
We'll look at a little chart and
it'll make a bunch of sense later.

29
00:01:48.579 --> 00:01:52.090
但是，是的，所以一般说来，价值必须是相同的，
But, yeah, so generally speaking,
the values have to be the same,

30
00:01:52.090 --> 00:01:56.030
很明显，如果这是一个字符串，我们可以预期是假的，对吗？
clearly if this was a string,
we can expect false, right?

31
00:01:57.129 --> 00:01:59.210
所以，中心有一个很长的数字，但是
So, the center with a very long number but

32
00:01:59.210 --> 00:02:04.140
在正常数字的范围内，比如五万，这是真的，对吗？
in the range of normal numbers like
five 50,000, it's true, right?

33
00:02:05.799 --> 00:02:07.829
他们是一样的。
They're the same.

34
00:02:07.829 --> 00:02:08.800
好的，酷。
All right, cool.

35
00:02:08.800 --> 00:02:11.394
如果我们把这个像x属性一样给它会发生什么呢？
What happens if we give
this one like a x property?

36
00:02:15.634 --> 00:02:16.770
&gt；&gt；steve kinney：假的，对吗？
&gt;&gt; Steve Kinney: False, right?

37
00:02:16.770 --> 00:02:17.400
它们不一样。
They're not the same.

38
00:02:17.400 --> 00:02:18.579
他们不再有相同的形状了。
They don't have the same shape anymore.

39
00:02:18.579 --> 00:02:21.710
其中一个有x属性，另一个没有，对吧？
One of them has an x property,
one of the doesn't, right?

40
00:02:21.710 --> 00:02:27.849
所以看起来V8在某种程度上一直在跟踪这个很酷的东西。
So it seems like V8 has in some way
that it's keeping track of this cool.

41
00:02:27.849 --> 00:02:28.800
如果他们也有一样的呢？
What if they had the same?

42
00:02:28.800 --> 00:02:30.865
所以给定X，A和X。
So given X, an A and an X.

43
00:02:30.865 --> 00:02:35.823
[噪音]好的
[NOISE]
Okay.

44
00:02:35.823 --> 00:02:37.670
没错，这就是我们所期望的。
True that's what we would expect.

45
00:02:37.670 --> 00:02:39.250
它们具有相同的属性。
They have the same properties.

46
00:02:39.250 --> 00:02:41.129
它们是相同的价值观，对吗？
They are the same values right?

47
00:02:41.129 --> 00:02:42.620
是世界上某种程度上的理智。
Is some amount of sanity in the world.

48
00:02:45.740 --> 00:02:48.129
但是发生了什么，让我们去同一个地方。
But what happens,
let's get to the same place.

49
00:02:48.129 --> 00:02:54.219
所以第一个将有一个A和一个X，第二个将有一个A。
So the first one is gonna have an A and
an X, the second one is gonna have an A.

50
00:02:56.079 --> 00:02:57.719
我们将为其添加一个X。
We'll add an X to it.

51
00:02:57.719 --> 00:02:59.288
所以应该是一回事，对吗？
So that should be the same thing right?

52
00:03:02.635 --> 00:03:03.135
&gt；&gt；steve kinney：不是。
&gt;&gt; Steve Kinney: It's not.

53
00:03:04.939 --> 00:03:06.819
很有趣，所以如果他们开始的时候一样，
Interesting, so if they start the same,

54
00:03:06.819 --> 00:03:10.939
如果我做的方式完全一样，它们也是一样的。
if I'm making the exact same way,
they're the same.

55
00:03:10.939 --> 00:03:16.020
但如果我以不同的方式开始，他们的结局就不一样了，有趣。
But if I start differently,
they don't end up the same, interesting.

56
00:03:17.069 --> 00:03:22.566
如果我做同样的事情，
What happens if I do the same thing,

57
00:03:22.566 --> 00:03:29.161
就像如果我继续说像S[声音]，
like what if I go ahead and
say like S [SOUND],

58
00:03:29.161 --> 00:03:33.390
他们走的是同一条路。
they follow the same path.

59
00:03:33.390 --> 00:03:36.329
因此，我们将它们的x属性都设置为Numbers。
So, we’ll set the x property
on both them to numbers.

60
00:03:36.329 --> 00:03:37.889
他们一开始就只是一个A级的财产。
They’ll start out as just an A property.

61
00:03:37.889 --> 00:03:40.329
我们将在他们两个上设置一个x属性，对吗？
We’ll set an x property on both of them,
right?

62
00:03:42.289 --> 00:03:43.389
现在他们又回到了地图上。
Now they’re the same the map again.

63
00:03:44.569 --> 00:03:48.240
好的，所以他们开始一样，他们开始不同
Okay so they start the same the same,
they start different and

64
00:03:48.240 --> 00:03:50.259
结果是一样的，他们是不一样的。
end up the same they are not the same.

65
00:03:50.259 --> 00:03:55.420
但如果他们一起走过相同的道路，他们就是一样的。
But if they go through the same
path together, they are the same.

66
00:03:55.420 --> 00:03:59.401
好吧，我还不明白这是怎么回事，但我只是在做一些科学研究。
Okay, I don't understand how this works
yet, but I'm just doing some science.

67
00:03:59.401 --> 00:04:02.609
好的，我们再做一件事
All right we'll one more thing

68
00:04:04.599 --> 00:04:08.599
我们将从这个a开始，我们将使用我们的好朋友对象out赋值。
We'll start out with this a and we'll
use our good friend object out assign.

69
00:04:08.599 --> 00:04:12.469
Object Out Assign用于制作对象。
Object out assign is used for
making objects.

70
00:04:12.469 --> 00:04:16.810
我们要做的就是拿a，然后复制它，对吗？
And what we'll do is we'll just take
the a and we'll copy it, right?

71
00:04:16.810 --> 00:04:19.079
如果您想要保持不可变的数据结构和
If you ever want to keep
immutable data structures and

72
00:04:19.079 --> 00:04:21.029
反应你可以使用对象输出分配。
react you can use object out assign.

73
00:04:21.029 --> 00:04:23.980
或者如果你曾经使用过扩散运算符，比如这三个点，
Or if you ever used a spread operator,
like those three dots,

74
00:04:23.980 --> 00:04:29.149
那是为了战斗它分配的对象。
that's to battle it's
object that assigned.

75
00:04:29.149 --> 00:04:31.959
它对于克隆对象很有用，对吧？
It's a useful for cloning objects, right?

76
00:04:33.850 --> 00:04:36.740
假的，那不是克隆人吗？
False, isn't that a clone?

77
00:04:36.740 --> 00:04:38.319
我想是因为我们从这个物体开始
I guess because we started
with this object and

78
00:04:38.319 --> 00:04:41.000
然后我们添加了所有的属性，它走了一条不同的道路。
then we added all the properties,
it went down a different path.

79
00:04:41.000 --> 00:04:43.762
这就是我猜的，我们走着瞧。
That's what I'm guessing, we'll see.

80
00:04:43.762 --> 00:04:47.435
好吧，但是如果康斯特
All right, But what happens if did const

81
00:04:47.435 --> 00:04:52.235
C，&GT；&GT；史蒂夫·金尼：我们会看到B和
c,
&gt;&gt; Steve Kinney: And we'll see are b and

82
00:04:52.235 --> 00:04:52.824
一样吗？
c the same?

83
00:04:56.944 --> 00:05:00.829
&gt；&gt；Steve Kinney：它们是，因为它们是以相同的方式创建的，对吗？
&gt;&gt; Steve Kinney: They are, cuz they
were created in the same way, right?

84
00:05:00.829 --> 00:05:03.370
所以这里有一些关于它是如何被创造的东西，
So there's something
about how it was created,

85
00:05:03.370 --> 00:05:05.819
它在修改时所经过的路径。
the path that it went
down as it was modified.

86
00:05:05.819 --> 00:05:07.589
属性以相同的顺序添加。
The properties are added
in the same order.

87
00:05:07.589 --> 00:05:10.790
看起来他们确实有同样的地图。
It seems like they do have the same map.

88
00:05:10.790 --> 00:05:14.569
最终相同但它们以不同的顺序放置在那里的属性，
The properties that end up the same but
they are put there in a different order,

89
00:05:14.569 --> 00:05:16.480
看起来他们没有相同的地图。
seems like they don't have the same map.

90
00:05:16.480 --> 00:05:19.410
对，我们还没有弄清楚为什么会发生这样的事情。
Right, we don't have the words to
figure out why this is happening yet.

91
00:05:19.410 --> 00:05:21.759
但我们绝对是在经验上注意到了一些事情。
But we're definitely
empirically noticing things.

92
00:05:22.980 --> 00:05:26.759
好了，不要再玩对象分配的把戏了。
All right,
No more tricks with object assignment.

93
00:05:26.759 --> 00:05:30.500
我给你看一个应该很直接的。
I'll just show you one that should
be pretty straight forward.

94
00:05:30.500 --> 00:05:32.514
我们将从以前做我们的点类。
We'll make our point class from before.

95
00:05:41.430 --> 00:05:46.149
&gt；&gt；Steve Kinney：this.x-x；this.y=y；非常酷。
&gt;&gt; Steve Kinney: This.x-
x; this.y=y; Very cool.

96
00:05:46.149 --> 00:05:50.629
我们会说A是新的
And we'll say A is new

97
00:05:50.629 --> 00:05:56.560
1.2分，
Point 1.2,

98
00:05:56.560 --> 00:06:00.620
B是新的点，我们会幸运地猜一猜。
and B is new Point, and
we'll take a lucky guess.

99
00:06:00.620 --> 00:06:01.399
这些会是一样的吗？
Are these gonna be the same?

100
00:06:03.220 --> 00:06:04.228
你们不必马上回答。
You don't all have to answer at once.

101
00:06:07.134 --> 00:06:09.560
&gt；&gt；steve kinney：幸运的猜测。
&gt;&gt; Steve Kinney: Lucky guesses.

102
00:06:09.560 --> 00:06:10.089
我看到你在点头。
I see nodding.

103
00:06:10.089 --> 00:06:12.449
我要把点头当作一样，我听到的也是一样。
I'm gonna take the nodding as same,
I heard a same.

104
00:06:12.449 --> 00:06:14.610
我们准备好了，我们投票决定了整个房间都是一样的。
We're ready,
we've voted this entire room same.

105
00:06:16.329 --> 00:06:18.339
我们赢了对吧？
We win, right?

106
00:06:18.339 --> 00:06:21.459
是的，它们的构造方式相同，它们通过构造函数。
Yeah, they're constructed the same way,
they go through a constructor.

107
00:06:21.459 --> 00:06:22.670
酷吧？
Cool, right?

108
00:06:22.670 --> 00:06:25.879
所以它看起来像是开始于相同或
So it looks like objects that
either start the same or

109
00:06:25.879 --> 00:06:28.230
经历相同的制作过程，而不是相同的。
go through the same process of
being made and not be the same.

110
00:06:28.230 --> 00:06:31.870
即使他们以同样的方式结束，他们也走过了一条不同的道路。
Even if they end up the same they
went through a different path.

111
00:06:31.870 --> 00:06:34.600
就像V8似乎并不相信它们是同一个对象。
Like V8 doesn't seem to believe
they are the same object.

112
00:06:36.319 --> 00:06:39.019
这是一种有趣的，酷的。
Which is kind of interesting, cool.

113
00:06:39.019 --> 00:06:41.721
如果我们将其中一个属性设置为未定义，
And if we were to set one of
these properties to undefined,

114
00:06:41.721 --> 00:06:42.721
喜欢同样的东西。
like the same thing.

115
00:06:42.721 --> 00:06:44.665
他们将不再拥有[INAUDIBLE]。
They would no longer have the [INAUDIBLE].

116
00:06:44.665 --> 00:06:47.740
你修改这两个中的任何一个，它们最终都不会有相同的地图。
You modify either one of these they
end up not having the same map.

117
00:06:49.779 --> 00:06:50.680
来来回回对吧？
Back and forth, right?

118
00:06:50.680 --> 00:06:53.399
但是如果你对他们两个做同样的事情，他们就会，对吗？
But if you were to do the same thing
to both of them, they do, right?

119
00:06:53.399 --> 00:06:57.360
我们可以通过那个，我会让你免于死亡的进军
We could go through that,
I'll spare you the march of death

120
00:06:57.360 --> 00:07:01.810
通过我们所看到的一切的各种组合。
through every kind of combination
of everything that we've seen.

121
00:07:01.810 --> 00:07:03.470
好吧，这真的很有趣。
Okay, that's really interesting.

122
00:07:03.470 --> 00:07:05.920
要是我们知道发生了什么就好了。
If only we knew what was happening.
