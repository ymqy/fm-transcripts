WEBVTT

1
00:00:00.370 --> 00:00:02.819
杰森 · 兰斯托夫: 现在，我们看到的是,
&gt;&gt; Jason Lengstorf: And so,
now what we've got here,

2
00:00:02.819 --> 00:00:08.410
当这个结果组件加载时，它会收到一个名字道具。
is when this result component loads,
it's gonna receive a name prop.

3
00:00:08.410 --> 00:00:14.397
在安装时，它将运行这个 useQuery 和
Upon mounting,
it's going to run this useQuery and

4
00:00:14.397 --> 00:00:19.579
Usequery 将决定什么显示。
that useQuery will determine what display.

5
00:00:19.579 --> 00:00:24.268
因此，我们要么显示加载阶段，要么显示错误阶段，要么显示结果，或者
So we'll either show a loading stage,
an error stage, or the results, or

6
00:00:24.268 --> 00:00:26.734
如果没有结果，就是一个空的状态。
an empty state if there's no results.

7
00:00:26.734 --> 00:00:33.326
所以让我们继续运行它，看看会发生什么。
So let's go ahead and
run it and see what happens.

8
00:00:33.326 --> 00:00:35.060
我们要用 netlify dev。
We're gonna use netlify dev.

9
00:00:40.761 --> 00:00:44.347
所以要使用它，我们必须导入它,
&gt;&gt; Jason Lengstorf: So
to use it we are gonna have to import it,

10
00:00:44.347 --> 00:00:47.529
我们来看看结果吧。
so let's grab results and results.

11
00:00:47.529 --> 00:00:52.463
然后你可以把这个放在这里。
And then you can drop this in here.

12
00:00:52.463 --> 00:00:55.857
它需要一个名字，所以我们现在只需要一个硬编码，我们就叫它 rick。
And it needs a name, so let's just
hard code one for now, we'll say rick.

13
00:01:05.099 --> 00:01:09.534
杰森 · 兰斯托夫: 我们有一个问题，这个问题是我们安装的
&gt;&gt; Jason Lengstorf: And we've got
an issue, and that issue is we installed

14
00:01:09.534 --> 00:01:14.367
但我们实际上并没有配置它。
the Apollo plugin, but
we didn't actually configure it.

15
00:01:14.367 --> 00:01:21.442
所以在我们的盖茨比配置中，我们将-Jason Lengstorf: set
So in our gatsby config, we're going to-
&gt;&gt; Jason Lengstorf: set

16
00:01:21.442 --> 00:01:27.811
模块化，导出，然后我们设置插件。
up module.exports and
then we will set up our plugins.

17
00:01:27.811 --> 00:01:32.361
我们要解决盖茨比插件阿波罗
And we're gonna resolve
gatsby-plugin-apollo, and

18
00:01:32.361 --> 00:01:35.685
对于我们的选择，我们要设置一个 uri。
for our options, we're gonna set a uri.

19
00:01:35.685 --> 00:01:45.091
这个 uri 就是 rickandmortyapi.com/graphql。
And that uri is going to be
the rickandmortyapi.com/graphql.

20
00:01:45.091 --> 00:01:48.513
我们正在做的是，我们正在告诉阿波罗建立一个客户。
And what we're doing is,
we're telling Apollo to set up a client.

21
00:01:48.513 --> 00:01:50.793
我们想要成立的客户,
And the client that we wanna set up,

22
00:01:50.793 --> 00:01:55.689
将尝试连接到一个 GraphQL 端点进行查询。
is going to try to attach to a GraphQL
endpoint to make queries against.

23
00:01:55.689 --> 00:01:57.569
所以我们这么做,
So the way that we're doing this,

24
00:01:57.569 --> 00:02:00.150
我们用了 gatsby-plugin-apollo 的助手。
we're using a helper in
the gatsby-plugin-apollo.

25
00:02:00.150 --> 00:02:03.670
这样我们就不用设置供应商
So that we don't have to
set up the provider and

26
00:02:03.670 --> 00:02:06.810
配置客户端。
mess with getting the client configured.

27
00:02:06.810 --> 00:02:09.659
只有在最幸福的路上才行得通,
This is only gonna work
in the happiest of paths,

28
00:02:09.659 --> 00:02:14.469
如果你做什么自定义，中间件之类的东西。
if you're doing anything custom,
middleware, anything like that.

29
00:02:14.469 --> 00:02:17.960
您可能会发现自己必须手动配置 Apollo 客户机。
You'll probably find yourself having to
manually configure the Apollo client.

30
00:02:17.960 --> 00:02:22.250
但是对于你的 GraphQL 端点非常简单的例子,
But for simple examples where your GraphQL
endpoint is pretty straightforward,

31
00:02:22.250 --> 00:02:25.060
你没有做任何交叉起源的事情。
you're not doing any kind
of cross origin stuff.

32
00:02:25.060 --> 00:02:29.728
你会发现这是一个非常好的方式，非常快速地设置
You're gonna find that this is a really
nice way to very quickly set up

33
00:02:29.728 --> 00:02:31.183
Graphql 客户机。
the GraphQL client.

34
00:02:31.183 --> 00:02:36.727
现在这个配置好了，我们应该可以重新启动它了,
So now that this is configured,
we should be able to start it again,

35
00:02:36.727 --> 00:02:41.710
现在还有一个 Apollo 的客户要竞争。
and now it'll actually have
a Apollo client to run against.

36
00:02:41.710 --> 00:02:43.082
让我们做 netlify dev。
Let's do netlify dev.

37
00:02:54.792 --> 00:02:55.536
杰森 · 兰斯托夫: 好的。
&gt;&gt; Jason Lengstorf: Okay.

38
00:02:57.338 --> 00:03:01.266
杰森 · 兰斯托夫: 好吧，那么-杰森 · 兰斯托夫: 我们还不错
&gt;&gt; Jason Lengstorf: All right, so-
&gt;&gt; Jason Lengstorf: We're kind of okay

39
00:03:01.266 --> 00:03:05.817
但是出了点问题，因为我们应该有结果。
here, but something went wrong,
because we should have results.

40
00:03:05.817 --> 00:03:07.693
那么为什么它不喜欢我们的结果呢？
So why doesn't it like our results?

41
00:03:13.264 --> 00:03:14.646
杰森 · 兰斯托夫: 我们正在得到它们，所以
&gt;&gt; Jason Lengstorf: And
we're getting them, so

42
00:03:14.646 --> 00:03:17.823
这是我最喜欢的黑客，当你做客户端的东西。
this is my favorite hack when
you're doing client-side stuff.

43
00:03:17.823 --> 00:03:20.647
你可以进入网络选项卡，看看发生了什么，等等
Is you can go to the Network tab and
see what's happening, and so

44
00:03:20.647 --> 00:03:22.170
我们知道我们得到了数据。
we know we're getting data.

45
00:03:22.170 --> 00:03:26.228
所以错误在我的代码中，而不是网络的问题。
So the error is in my code,
not a problem with the network.

46
00:03:26.228 --> 00:03:32.067
所以我们可以回顾一下我们的研究结果，看看我们漏掉了什么。
So we can go back and look at our results,
and figure out what was missed.

47
00:03:34.444 --> 00:03:41.909
Jason Lengstorf: 如果我们有数据，我们有数据字符。
&gt;&gt; Jason Lengstorf: So we've got if we've
got data, and we've got data characters.

48
00:03:44.814 --> 00:03:48.949
杰森 · 兰斯托夫: 但我们需要结果的长度,
&gt;&gt; Jason Lengstorf: But
we need the results length,

49
00:03:48.949 --> 00:03:54.469
不是字符的长度，所以这是我。
not the characters length, so that is me.

50
00:03:54.469 --> 00:03:56.168
我们走吧。
Hey, there we go.

51
00:03:56.168 --> 00:04:00.263
所以我们现在可以看到的是我们正在做一个搜索，并且
So what we can see now is that
we are doing a search, and

52
00:04:00.263 --> 00:04:03.454
我们正在寻找我们想要的东西。
we're getting a search for what we want.

53
00:04:03.454 --> 00:04:08.721
好了，一切顺利，我们去找瑞克，去找莫蒂。
Okay, this is all good, so let's search
for Rick, let's search for Morty.

54
00:04:08.721 --> 00:04:11.983
好吧，我们还没有取出任何东西，我们已经把名字硬编码了。
Okay, so we're not pulling anything
out yet, we've hard-coded our name.

55
00:04:11.983 --> 00:04:14.562
所以我们最不想做的就是,
So the last thing that we wanna do here,

56
00:04:14.562 --> 00:04:18.951
就是从州里提取那个问题，如果我们在本地做的话。
is extract that query from the state,
if we're doing it locally.

57
00:04:18.951 --> 00:04:23.300
或者如果我们和它有联系的话。
Or from the Path if we're
being linked to it.

58
00:04:23.300 --> 00:04:27.055
确保我们真的在寻找我们想要寻找的东西,
And make sure that we're actually
searching for what we wanna search for,

59
00:04:27.055 --> 00:04:28.615
而不是什么硬编码。
and not what's hard-coded.

60
00:04:28.615 --> 00:04:36.939
为了做到这一点，我们将打开我们的搜索组件,
So to do that, we're going to
open up our search component,

61
00:04:36.939 --> 00:04:41.362
我需要重命名为搜索。
I need to rename that to Search.

62
00:04:41.362 --> 00:04:46.704
在里面我们要把它变成一个完整的函数,
And inside of it we are going to
turn this into a full function,

63
00:04:46.704 --> 00:04:50.627
这样我们就可以对其进行查询管理。
so that we can do some
query management in it.

64
00:04:50.627 --> 00:04:54.933
我们要把查询从这个地方拿出来。
And we're gonna get the query
out of the location.

65
00:04:54.933 --> 00:04:58.293
所以盖茨比要写进每一页的东西
So something that Gatsby is
gonna pass into every page, and

66
00:04:58.293 --> 00:04:59.978
再说一遍，这只是几页。
again this is only for pages.

67
00:04:59.978 --> 00:05:04.754
所以任何在《了不起的盖茨比》中创造页面的动作,
So anything that's created with
the Create Page action in Gatsby,

68
00:05:04.754 --> 00:05:07.778
也就是 pages 目录中的任何内容。
which is anything in the pages directory.

69
00:05:07.778 --> 00:05:15.673
或者任何使用盖茨比操作创建页面的模板。
Or anything that's created as a template
using like Gatsby actions Create Page.

70
00:05:15.673 --> 00:05:20.548
这个位置会以一个对象的形式出现，给我们一些关于这个位置的元数据
The location is gonna come in as an object
that gives us some metadata about where

71
00:05:20.548 --> 00:05:21.072
是的。
we are.

72
00:05:21.072 --> 00:05:26.019
在这个案子里我们想要的是,
And what we want
specifically in this case,

73
00:05:26.019 --> 00:05:30.444
我们想知道地点，国家。
is we want to get the location.state.

74
00:05:30.444 --> 00:05:37.490
如果已经设置好了，我们希望得到查询，所以 location.state.query。
And if that's set, we wanna get the query
out of it, so location.state.query.

75
00:05:37.490 --> 00:05:40.920
如果没有设置，那么我们可以跳下去
And if that's not set,
then we can jump down and

76
00:05:40.920 --> 00:05:44.689
让我们找到路径，路径名。
say let's get the location.pathname.

77
00:05:44.689 --> 00:05:50.627
所以 location.pathname 就像 Search / Morty。
So the location.pathname is
gonna be like Search /Morty.

78
00:05:50.627 --> 00:05:57.877
所以我们可以替换，我们再一次进入了正则表达式的领域。
So we can replace, and again we're
getting into regular expression land.

79
00:05:57.877 --> 00:06:02.637
所以任何开始搜索的东西，我们都要-
So anything starting with search,
we are going to-

80
00:06:06.322 --> 00:06:09.065
Jason Lengstorf: 删除 / search 和
&gt;&gt; Jason Lengstorf: remove the /search and

81
00:06:09.065 --> 00:06:15.519
在那之后，我们就什么都不用了。
the \ after that, and
we will replace it with nothing.

82
00:06:15.519 --> 00:06:20.110
如果这不起作用，我们将它设置为空字符串。
And if that doesn't work,
we will set it to be an empty string.

83
00:06:21.769 --> 00:06:27.670
然后为了得到名字，我们要做一个 query.replace。
And then to get the name,
we're going to do a query.replace.

84
00:06:27.670 --> 00:06:34.384
我们只想用连字符
And we just wanna take any hyphens and

85
00:06:34.384 --> 00:06:41.322
用空格字符替换它们。
replace them with a space character.

86
00:06:41.322 --> 00:06:47.237
所以我们在这里使用正则表达式。
And so
we're using regular expressions here.

87
00:06:47.237 --> 00:06:51.771
所以任何连字符，加号意味着一个或多个，所以我们要找一个或多个连字符。
So any hyphen, the plus means one or more,
so we're looking for one or more hyphens.

88
00:06:51.771 --> 00:06:54.620
然后我们把它们压缩成一个空格字符。
And then we'll collapse those down
into a single space character.

89
00:06:56.189 --> 00:06:59.720
这意味着我们现在有了一个名字
That means that we have a name now, and

90
00:06:59.720 --> 00:07:03.139
这也意味着我们可以提供一些有用的信息。
it also means that we can show
a little more helpful information.

91
00:07:03.139 --> 00:07:08.473
让我们开始，我们引用这个，如果名字设置好了。
So let's start, we'll quote this and
we'll say that if the name is set.

92
00:07:08.473 --> 00:07:15.598
我们要说的是显示“{ name }”和
We're going to say Showing results for
"{name}" and

93
00:07:15.598 --> 00:07:21.250
这需要一个模板文字。
that's gonna need to
be a template literal.

94
00:07:22.800 --> 00:07:26.235
否则，显示搜索里克和莫蒂。
Otherwise, show Search for Rick and Morty.

95
00:07:26.235 --> 00:07:29.136
因此，首先它应该告诉我们当前的搜索查询是正确的
So first it should show us what our
current Search query is right in

96
00:07:29.136 --> 00:07:29.829
标题。
the headline.

97
00:07:31.000 --> 00:07:36.069
接下来，我们要说如果我们
Next, we're going to say if we have

98
00:07:36.069 --> 00:07:40.639
一个名字，然后显示结果。
a name, then show the results.

99
00:07:45.274 --> 00:07:47.822
杰森 · 兰斯托夫: 我们在这里应该看到的是,
&gt;&gt; Jason Lengstorf: And so
what we should see here,

100
00:07:47.822 --> 00:07:54.199
现在它给我们显示了 morty 的结果，它会从这里拉出来。
is now it's showing us results for
morty and it will pull that from here.

101
00:07:54.199 --> 00:07:59.399
所以如果我再做一次搜索，假设是外星人，它会载入外星人。
So if I do another search,
let's say alien, it loads aliens.

102
00:08:00.490 --> 00:08:04.148
如果我搜索 Rick 就会找到 Rick。
And if I search for
rick, it pulls up Rick.

103
00:08:04.148 --> 00:08:07.533
如果我拿这样的东西
And then if I take something like this,
and

104
00:08:07.533 --> 00:08:12.531
我把它直接输入网址，它会搜索裁判。
I throw it right into the URL,
it will search for Adjudicator.

105
00:08:12.531 --> 00:08:18.014
所以我们现在可以通过更新 URL 来搜索内容。
So we can now search for
things by updating the URL.

106
00:08:18.014 --> 00:08:20.697
我们可以分享这些链接，有人可以点击它
We can share these links around and
someone could click it and

107
00:08:20.697 --> 00:08:22.029
看到那些结果了吗。
see those results.

108
00:08:22.029 --> 00:08:25.980
所有这些都是通过前端使用阿波罗来完成的
And all of that's done by using
Apollo on the frontend, and

109
00:08:25.980 --> 00:08:28.750
然后在盖茨比设立客户路线。
then setting up client routes in Gatsby.

110
00:08:28.750 --> 00:08:30.466
处理所有的路由和
To handle all of the routing and

111
00:08:30.466 --> 00:08:33.899
确保事情按计划进行。
making sure that things end up
where they're supposed to be.
