WEBVTT

1
00:00:00.380 --> 00:00:06.469
演讲者1: 还有一个关于你最初设置重定向的方法的问题。
&gt;&gt; Speaker 1: And a question about the way
that you setup the redirect, initially.

2
00:00:06.469 --> 00:00:12.960
我想我的问题是，我以前见过一个只针对客户的路线的例子。
And I guess my question is, I've seen
an example of client-only routes before.

3
00:00:12.960 --> 00:00:18.750
如果有人使用的路由器库，我认为这是达到路由器。
Where someone used the router library
that's in, I think it's Reach Router.

4
00:00:18.750 --> 00:00:19.250
杰森 · 兰斯托夫: 是的。
&gt;&gt; Jason Lengstorf: Yeah.

5
00:00:20.730 --> 00:00:23.170
演讲者1: 相对于你在这里所做的，你设置了一个重定向
&gt;&gt; Speaker 1: Versus what you did
here where you set up a redirect

6
00:00:24.390 --> 00:00:26.370
对其中一个或另一个的想法。
thoughts about one or the other.

7
00:00:26.370 --> 00:00:29.030
Jason Lengstorf: 这是一种基于用例的东西
&gt;&gt; Jason Lengstorf: It's kind
of a use case based thing so

8
00:00:29.030 --> 00:00:32.179
如果你使用达到路由器，你能做的是说,
if you use reach router,
what you're able to do is say,

9
00:00:32.179 --> 00:00:36.719
根据我看到的 URL，显示一个不同的组件。
based on the URL that I'm seeing,
show me a different component.

10
00:00:36.719 --> 00:00:40.701
这是一个很好的 API，但是在这个特殊的情况下,
And it's a really nice API but
in this particular case,

11
00:00:40.701 --> 00:00:44.860
我们实际上想做的事情并不完全一样。
what we were actually trying
to do wasn't quite the same.

12
00:00:44.860 --> 00:00:48.192
所以我们一直想展示相同的部分,
So we were looking at like, we wanna
show the same component all the time,

13
00:00:48.192 --> 00:00:50.308
我们只是从网址中提取一些东西。
we're just pulling
something out of the URL.

14
00:00:50.308 --> 00:00:54.396
如果 URL 是设置好的，那么我们就会显示不同类型的输出
And if the URL is set, then we're
showing a different kind of output so

15
00:00:54.396 --> 00:00:58.923
没有什么对错之分，只是个案分析而已。
there's no really like a right or
wrong way, it's just a case by case basis.

16
00:01:05.625 --> 00:01:08.831
Jason Lengstorf: 好的，现在 FEM 进度分支被推到了
&gt;&gt; Jason Lengstorf: Okay, so now the
the FEM progress branch is pushed up to

17
00:01:08.831 --> 00:01:12.750
Github，已经完成了，我们今天所做的一切。
GitHub, it's done,
everything that we've done today.

18
00:01:12.750 --> 00:01:17.230
而且你应该能够逐步提交，看看到底发生了什么。
And you should be able to step through
the commits and see exactly what happened.

19
00:01:17.230 --> 00:01:22.069
在 GitHub 上还有一个叫 Chichi 的分支
There's also a branch on
GitHub called Chichi that

20
00:01:22.069 --> 00:01:27.039
有链接到每个步骤之间的比较，所以
has links to comparisons
between each step of the way so

21
00:01:27.039 --> 00:01:30.590
你可以看到代码一整天的演变过程。
you can see the code as it
evolved throughout the day.

22
00:01:30.590 --> 00:01:32.759
还有其他问题吗？
Any other questions?

23
00:01:32.759 --> 00:01:34.420
聊天有什么收获吗？
Anything coming from the chat?

24
00:01:34.420 --> 00:01:38.408
说话人3: 如果我们使用的 API 需要一个 EMVA 变量,
&gt;&gt; Speaker 3: If the API that we
are consuming requires an EMVA variable,

25
00:01:38.408 --> 00:01:41.609
你要在盖茨比配置中指定它们吗？
are you going to specify
them in Gatsby config?

26
00:01:43.490 --> 00:01:49.057
如果是的话，它不会被发布到终端用户的浏览器上吗？
And if yes, it's not going to be
shipped to the end user browser?

27
00:01:49.057 --> 00:01:53.652
Jason Lengstorf: 所以如果你想使用一个需要
&gt;&gt; Jason Lengstorf: So
if you want to use an API that needs

28
00:01:53.652 --> 00:01:58.039
就像打电话的秘密一样。
like a secret to make calls.

29
00:01:58.039 --> 00:02:00.859
你可能会想要研究一些类似无服务器的东西
You would probably want to look
into something like serverless

30
00:02:00.859 --> 00:02:03.819
来处理这个问题。
functions to handle that.

31
00:02:03.819 --> 00:02:09.069
因为客户端请求的条件是
Because the the catch with
client side request is that

32
00:02:09.069 --> 00:02:11.879
如果你必须发送一个令牌沿，令牌将是可见的。
if you have to send a token along
that token is gonna be visible.

33
00:02:11.879 --> 00:02:14.210
你可能会对这个请求嗤之以鼻,
You could be sniffed out of the request,

34
00:02:14.210 --> 00:02:16.280
它可能从源代码中被剪掉了。
it could be snipped out
of the source code.

35
00:02:16.280 --> 00:02:21.300
所以你可能不想这么做，但是如果你使用一个无服务器的函数。
And so you probably don't want to do that,
but if you use a serverless function.

36
00:02:21.300 --> 00:02:30.021
你可以把电话中敏感的部分抽象出来。
You are able to kind of abstract away
the the sensitive part of the call.

37
00:02:30.021 --> 00:02:35.729
相反，你可以说只有这个函数只能从我的域调用。
And instead you can say only this function
can only be called from my domain.

38
00:02:35.729 --> 00:02:39.370
所以我的网站会向那个域名发出请求,
And so my website will make
a request to that domain,

39
00:02:39.370 --> 00:02:44.449
通过呼叫限制或跨站点请求问题。
which passes the call restrictions or
the cross site request issues.

40
00:02:44.449 --> 00:02:49.020
然后它会以你的名义发出认证请求
And then it will make that authenticated
request on your behalf and

41
00:02:49.020 --> 00:02:51.050
把你需要的结果发回来。
send back the results you need.

42
00:02:51.050 --> 00:02:55.671
所以这是一种保护这些凭证的方法，如果你有不真实的。
So that's a way to protect those
credentials, if you have unauthentic.

43
00:02:55.671 --> 00:02:58.489
或者像不安全，像一个公钥，你需要通过,
Or like unsecure,
like a public key that you need to pass,

44
00:02:58.489 --> 00:03:01.139
那么是的，你可以通过盖茨比的配置来设置它。
then yes,
you would set that through Gatsby config.

45
00:03:01.139 --> 00:03:05.689
演讲者3: 同样的事情也适用于任何类型的认证吗？
&gt;&gt; Speaker 3: Will the same thing go for
like any type of authentication?

46
00:03:07.080 --> 00:03:10.780
我的意思是，一般来说，当你看到客户端的应用程序时。
&gt;&gt; Jason Lengstorf: I mean, in general,
when you're looking at client side apps.

47
00:03:10.780 --> 00:03:14.930
任何不应该被客户看到的东西都不应该出现在
Anything that shouldn't be visible to
the client probably shouldn't end up in

48
00:03:14.930 --> 00:03:16.039
客户端代码。
client side code.

49
00:03:16.039 --> 00:03:20.360
一般来说，如果你在《盖茨比》中用到这个词,
And as a general rule,
if you're working with it in Gatsby,

50
00:03:20.360 --> 00:03:25.465
这是建造步骤，不是公开的，不会创造出艺术品。
it's the build step, isn't public
that doesn't create artifacts.

51
00:03:25.465 --> 00:03:30.145
但是你要尽量避免把敏感数据
But you wanna try to avoid
putting sensitive data

52
00:03:30.145 --> 00:03:33.349
任何类型的建造艺术品。
into any type of build artifact.

53
00:03:33.349 --> 00:03:37.550
所以如果它开始反应如果它进入你的元数据或者类似的东西,
So if it gets to react, if it goes into
your metadata or anything like that,

54
00:03:37.550 --> 00:03:40.579
你最好小心点。
you wanna be pretty careful about that.

55
00:03:40.579 --> 00:03:46.449
它可以是有用的，只是不这样设置
It can be useful to
just not set like it so

56
00:03:46.449 --> 00:03:51.420
作为一个例子，我们在 Gatsby 配置中设置了 Cloudinary API secret。
as an example, we set the Cloudinary API
secret in Gatsby config.

57
00:03:52.710 --> 00:03:56.280
另一种方法，你可以处理真正敏感的东西
Another way that you can approach
that with really sensitive stuff

58
00:03:56.280 --> 00:03:58.930
你可以说它需要在环境中存在。
is you can say it needs to be
available in the environment.

59
00:03:58.930 --> 00:04:03.069
但是它实际上从来没有在配置中设置，代码只是期望,
But it never actually gets set in
the config the code will just expect that,

60
00:04:03.069 --> 00:04:05.030
环境变量已经设定好了。
that environment variable is set.

61
00:04:05.030 --> 00:04:08.889
这样就可以避免任何泄漏的可能性
And that would avoid it getting
any potential for a leakage or

62
00:04:08.889 --> 00:04:11.729
这样的事情，所以如果你想真正确定。
things like that so
if you want to be really sure.

63
00:04:11.729 --> 00:04:15.039
您只需确保它不会在任何配置的或
You can just make sure that it doesn't
gets set in any of the configured or

64
00:04:15.039 --> 00:04:18.120
除了真正需要的东西，任何地方都可以使用。
use anywhere other than
exactly what's needed.

65
00:04:19.459 --> 00:04:25.457
演讲者3: 那么认证模板和未认证模板如何？
&gt;&gt; Speaker 3: So how about authenticated
templates versus unauthenticated?

66
00:04:25.457 --> 00:04:29.754
所以身份验证模板，作为一般规则,
&gt;&gt; Jason Lengstorf: So authenticated
templates, as a general rule,

67
00:04:29.754 --> 00:04:37.548
我的建议是不要预先建立，任何不应该公开的数据。
my recommendation is don't pre-build any
data that shouldn't be publicly available.

68
00:04:37.548 --> 00:04:43.360
这意味着如果你有一个用户指示板。
So what that means is if
you have a user dashboard.

69
00:04:43.360 --> 00:04:45.740
里面有任何敏感数据,
And that's got any kind
of sensitive data on it,

70
00:04:45.740 --> 00:04:47.848
你不会想提前做好的。
You don't wanna build that ahead of time.

71
00:04:47.848 --> 00:04:51.000
你不会想把这些都写进《了不起的盖茨比》的
You don't wanna put that into Gatsby's

72
00:04:51.000 --> 00:04:55.840
因为任何静态资产都可能被泄露。
pipeline at all because any kind of
static asset can be compromised.

73
00:04:55.840 --> 00:04:58.689
而且不这样做会更容易些
And it's just easier to not
try to play that game so

74
00:04:58.689 --> 00:05:04.110
更简单的做法是让某人在 OAuth 工作流中登录。
what's easier to do is to have someone
login within an OAuth workflow.

75
00:05:04.110 --> 00:05:08.810
然后，如果他们有一个有效的令牌并且
And then only send back that data
if they have a valid token and

76
00:05:08.810 --> 00:05:10.740
只需在客户端异步完成。
just do it all on the client
side asynchronously.

77
00:05:12.560 --> 00:05:13.699
演讲者4: 事实上我有一个问题。
&gt;&gt; Speaker 4: Actually i have a question.

78
00:05:13.699 --> 00:05:14.220
杰森 · 兰斯托夫: 是的，当然。
&gt;&gt; Jason Lengstorf: Yeah, sure.

79
00:05:14.220 --> 00:05:17.720
说话人4: 关于服务器端的重定向。
&gt;&gt; Speaker 4: Regarding
the server side redirecting.

80
00:05:17.720 --> 00:05:20.930
杰森 · 兰斯托夫: 是的 议长4: 你在这里无效了，但是
&gt;&gt; Jason Lengstorf: Yeah.
&gt;&gt; Speaker 4: You had nullified here, but

81
00:05:20.930 --> 00:05:24.089
如果你用的是像 AWSS3这样的东西呢？
what if you were using
something like AWSS3?

82
00:05:25.930 --> 00:05:30.230
杰森 · 兰斯托夫: 你可以设置它，我已经做了它，我用什么,
&gt;&gt; Jason Lengstorf: You can set it up,
I've done it and what did I use,

83
00:05:31.730 --> 00:05:37.899
我想是53号公路，对吗？
Route 53, I think, is that right?

84
00:05:37.899 --> 00:05:42.620
有一种方法可以做到这一点，我不记得我的头顶，但它是什么
There is a way to do it, I cannot remember
off the top of my head what it is but

85
00:05:42.620 --> 00:05:45.819
你设置了同样的重定向。
you set up the same sort of redirect.

86
00:05:45.819 --> 00:05:51.409
但我不记得 AWS 服务套件的哪一部分实际上处理了这个问题。
But I don't remember which part of the AWS
suite of services actually handled it.

87
00:05:51.409 --> 00:05:54.470
但是如果你正在使用，比如你正在部署到 DigitalOcean。
But if you were using,
like if you're deploying to DigitalOcean.

88
00:05:54.470 --> 00:05:57.920
或者另一种基于容器的服务，你可以使用 Apache 或者
Or another kind of container based
service, you would use Apache or

89
00:05:57.920 --> 00:05:59.920
Nginx 建立这些路线。
NGINX to set up these routes.

90
00:05:59.920 --> 00:06:04.040
像 nullfy 这样的托管服务倾向于使用基于配置的重定向。
Managed services like Nullify tend to
have configuration based redirects.

91
00:06:04.040 --> 00:06:06.800
所以无论你去哪里
So anywhere where you're gonna

92
00:06:06.800 --> 00:06:09.279
部署它最有可能，你能做到这一点。
deploy it most likely you'll
be able to make it happen.

93
00:06:09.279 --> 00:06:13.560
这只取决于您的特定部署方式
It's just a matter of what your
particular flavor of deployment

94
00:06:15.360 --> 00:06:18.040
需要重定向。
requires for redirects.

95
00:06:18.040 --> 00:06:21.279
演讲者4: 我想我的问题，谢谢你
&gt;&gt; Speaker 4: I guess my question,
thank you for

96
00:06:21.279 --> 00:06:24.910
答案对我来说很明显你说对了,
the answer, it's entirely obvious
to me now that you said it right,

97
00:06:24.910 --> 00:06:28.399
你必须做服务器端的配置。
you have to do the server
side configuration for that.

98
00:06:28.399 --> 00:06:33.090
但是很多服务器就像如果它不能识别路径，对吧,
But a lot of servers will just like if
it doesn't recognize the path, right,

99
00:06:33.090 --> 00:06:36.459
它返回像 HTML 一样的索引点。
it returns index dot
whatever like that HTML.

100
00:06:36.459 --> 00:06:38.259
杰森 · 兰斯托夫: 好的 演讲者4: 你是不是有一个盖茨比配置
&gt;&gt; Jason Lengstorf: All right.
&gt;&gt; Speaker 4: Is there a Gatsby config you

101
00:06:38.259 --> 00:06:43.240
可以用在那种情况下，你知道吗，什么时候？
can use in that scenarios,
you know what, when?

102
00:06:44.340 --> 00:06:48.680
杰森 · 兰斯托夫: 这样的路线,
&gt;&gt; Jason Lengstorf: Well, so
the thing is with routes like that,

103
00:06:48.680 --> 00:06:55.896
如果盖茨比只是为了这样的狂风暴雨而建立起来的话，你永远也无法了解盖茨比。
you'll never get to Gatsby so if Gatsby
is only set up for like slash surge.

104
00:06:55.896 --> 00:07:01.610
那么文件系统中唯一存在的东西就是文件夹 / 搜索索引. html。
Then the only thing that exists in the
file system is a folder/search index.html.

105
00:07:01.610 --> 00:07:05.877
所以服务器本身需要处理这个重定向，否则,
So the server itself needs to handle
that redirect because otherwise,

106
00:07:05.877 --> 00:07:09.588
像盖茨比一样，我们必须公布每一条可能的路线。
like Gatsby, we would have to
declare every possible route.

107
00:07:09.588 --> 00:07:13.300
每一个可能的角色组合来管理它。
And every possible combination
of characters to manage that.

108
00:07:13.300 --> 00:07:18.990
我是说，这显然是不可行的。
And it's, I mean, that's obviously
gonna be very not feasible.

109
00:07:18.990 --> 00:07:21.384
如果你使用无服务器,
If you're using serverless,

110
00:07:21.384 --> 00:07:26.456
你不必站在一个有 NGINX 代理的数字海洋盒子上。
you don't have to stand up
a Digital Ocean box with a NGINX proxy.

111
00:07:26.456 --> 00:07:30.168
它包装了为静态资产服务的节点服务器,
That wraps your node server
that serves your static assets,

112
00:07:30.168 --> 00:07:34.079
这些问题就这么消失了，对吧？
those sorts of problems just
kind of disappear, right?

113
00:07:34.079 --> 00:07:35.579
这并不意味着它们会消失,
And that doesn't mean they go away,

114
00:07:35.579 --> 00:07:38.360
它们现在在别人的电脑上，而不是你的。
they're now on somebody else's
computer and not yours.

115
00:07:38.360 --> 00:07:41.682
但是，这些服务正变得非常稳定和可靠
But the services are becoming
very stable and reliable and

116
00:07:41.682 --> 00:07:45.156
这意味着我们作为前端开发商。
affordable which means that for
us as front end developers.

117
00:07:45.156 --> 00:07:48.620
我们只需要把大量的问题转交给别人。
We just get to hand off a huge
number of our problems.

118
00:07:48.620 --> 00:07:53.266
相信那些可能比我们在后台做得更好的人
And trust that someone who is
probably better at back end than we

119
00:07:53.266 --> 00:07:56.519
都是用他们最好的方式做的。
are is doing it in the best
way they know how.

120
00:07:57.689 --> 00:07:59.675
所以这总是有利有弊，但是
So there are always
trade offs with this but

121
00:07:59.675 --> 00:08:01.725
对我来说这真的很令人兴奋，因为。
to me it's really exciting because again.

122
00:08:01.725 --> 00:08:05.831
就像盖茨比从车前端拿走所有的锅炉牌一样,
The same way that Gatsby takes all this
boiler plate out of the front end,

123
00:08:05.831 --> 00:08:07.726
果酱堆栈，无服务器。
the jam stack, the serverless.

124
00:08:07.726 --> 00:08:13.021
而基础设施作为服务的东西，在那里消除了需要
And the infrastructure as a service stuff
that's out there is removing the need for

125
00:08:13.021 --> 00:08:16.810
后面还有一大堆锅炉板。
a whole bunch of boiler plate
on the back end as well.

126
00:08:16.810 --> 00:08:19.329
这就给了我们,
And that gives us just, I mean,

127
00:08:19.329 --> 00:08:21.939
我们可以得到完全平等，与你过去必须建立。
we can get complete parity with
what you used to have to build.

128
00:08:21.939 --> 00:08:23.329
一个成熟的服务器和
A full fledged server and

129
00:08:23.329 --> 00:08:27.889
4加上几行 JavaScript 代码和一个无服务器的函数。
API 4 with a couple lines of JavaScript
and a serverless function now.

130
00:08:27.889 --> 00:08:31.745
演讲者4: 对打字稿的支持---- 只有盖茨比会马上做到。
&gt;&gt; Speaker 4: TypeScript support,
just Gatsby'll do it out of the box.

131
00:08:31.745 --> 00:08:34.716
有没有一个配置-Jason Lengstorf: 有一个插件和
Is there a configuration that-
&gt;&gt; Jason Lengstorf: There's a plugin and

132
00:08:34.716 --> 00:08:36.870
它叫做盖茨比插件打字稿。
it's called Gatsby plugin TypeScript.

133
00:08:36.870 --> 00:08:41.984
这应该会增加支持，就像配置一行一样。
That should add support,
like with one line of config.

134
00:08:41.984 --> 00:08:46.779
我不是一个打字稿开发者，所以我不确定是否完全诚实。
I'm not a TypeScript developer, so
I'm not sure to be completely honest.
