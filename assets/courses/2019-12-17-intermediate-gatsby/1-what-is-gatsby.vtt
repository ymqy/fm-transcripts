WEBVTT

1
00:00:00.440 --> 00:00:03.020
詹森 · 兰斯托夫: 另一种看法是，它是一个进步的 Web 应用程序
&gt;&gt; Jason Lengstorf: Another way to think
of it is that it's a Progressive Web App

2
00:00:03.020 --> 00:00:03.595
发电机。
generator.

3
00:00:03.595 --> 00:00:07.972
所以因为我们正在运送静态资产，在反应应用程序中重新水化,
So because we are shipping static assets
that rehydrate in the react apps,

4
00:00:07.972 --> 00:00:12.695
这也意味着使用诸如服务工作者之类的东西可以让我们离线捕捉
that also means that using things like
service workers allows us to catch offline

5
00:00:12.695 --> 00:00:17.350
然后上传一个显能者插件，用于这两种事情
versions and upload a manifester plug-ins
for both of those things that make it

6
00:00:17.350 --> 00:00:22.100
相对直接地使你的应用程序可以离线使用盖茨比。
relatively straight forward to make your
apps available offline using Gatsby.

7
00:00:23.160 --> 00:00:25.960
这显然不能解决客户网站的问题，但是
That obviously isn't gonna solve
the client site problem, but

8
00:00:25.960 --> 00:00:30.410
它将使所有的构建时间数据和所有静态资产可用，因此
it will make all of the build time data
and all of your static assets available so

9
00:00:30.410 --> 00:00:32.420
有人可以把它保存下来以备后用。
that someone could save it offline for
use later.

10
00:00:34.259 --> 00:00:37.719
最终，盖茨比的目标是让正确的事情变得简单。
Ultimately, the goal with Gatsby is to
make the right thing the easy thing.

11
00:00:37.719 --> 00:00:42.320
我们的想法是设置好的默认值，这样如果有人
The idea is to set good defaults so
that if somebody just

12
00:00:42.320 --> 00:00:45.829
就这样，他们会得到一个好结果。
leaves it as is out of the box,
they're gonna get a good result.

13
00:00:45.829 --> 00:00:50.060
另一种说法是，我们试图设计工具
Another way to say that is that we're
trying to design tools so that somebody

14
00:00:50.060 --> 00:00:54.590
他完全处于截稿压力之下，走了书中所有的捷径,
who is completely under deadline pressure
and takes every shortcut in the book,

15
00:00:54.590 --> 00:00:57.779
为使用者提供了一个绝佳的体验。
delivers an excellent experience
to the people using the website.

16
00:00:59.560 --> 00:01:02.020
所以盖茨比在引擎盖下面设置了很好的缺省值。
So Gatsby under the hood
is setting good defaults.

17
00:01:02.020 --> 00:01:05.280
它是按照紫色图案设计的，如果你跟着艾迪 · 奥斯马尼，或者
It's following the purple pattern,
which if you follow Addy Osmani, or

18
00:01:05.280 --> 00:01:09.210
的 Chrome 开发团队,
the Google Chrome dev team,

19
00:01:09.210 --> 00:01:13.879
我认为是谁能把这一切都是关于喜欢。
I think is who could put this
out which is all about like.

20
00:01:13.879 --> 00:01:17.649
如何构造预加载和渲染的数据请求
How to structure data request for
pre-loading and rendering in

21
00:01:17.649 --> 00:01:22.268
背景和很多东西让它在网站上表现得更好。
the background and lots of things that
make it more performing on the website.

22
00:01:22.268 --> 00:01:24.304
我不想谈细节,
I'm not gonna go into the details of that,

23
00:01:24.304 --> 00:01:26.575
不过这个紫色图案值得一看。
the purple pattern is
worth looking up though.

24
00:01:26.575 --> 00:01:29.930
它也只生成静态资产，这再次从服务器中删除
It also generates only static assets
which again taking the server out of

25
00:01:29.930 --> 00:01:30.646
方程式,
the equation,

26
00:01:30.646 --> 00:01:33.729
这样用户获取数据就少了一个跳跃。
that's one less hop that your users
have to make to get to the data.

27
00:01:35.189 --> 00:01:39.439
然后 Gatsby 会优化一个延迟装载的资产，所以你可以使用，而不是
And then Gatsby will optimize an lazy-load
assets, so you can take, instead of

28
00:01:39.439 --> 00:01:43.909
你上传到博客的一张3mb 的手机图片。
a single three megabyte image off of your
phone that you've uploaded to your blog.

29
00:01:43.909 --> 00:01:47.460
这将得到压缩，削减，变成适当大小的图像为
That'll get compressed, cut down,
turned into the right size image for

30
00:01:47.460 --> 00:01:50.870
当它出现在 viewport 中时，它才会被加载,
the viewport loading it, and it only gets
loaded when it shows up in the viewport,

31
00:01:50.870 --> 00:01:55.340
这将为您的用户节省兆字节的数据传输和
which saves your users
megabytes of data transfer and

32
00:01:55.340 --> 00:01:58.590
如果他们不滚动到页面的那一部分，可能根本不会载入。
potentially never loads it at all if they
don't scroll to that part of the page.

33
00:02:00.420 --> 00:02:02.359
它也会使第三方数据正常化。
It'll normalize third party data as well.

34
00:02:02.359 --> 00:02:06.012
因此，我们再次讨论了通过 GraphQL 进行数据访问。
So again, we talked about
the data access through GraphQL.

35
00:02:06.012 --> 00:02:10.634
通过这样做，您不必弄清楚如何异步加载
By doing that, you don't have to
figure out how to asynchronously load

36
00:02:10.634 --> 00:02:14.730
一堆第三方的 API，并尝试使性能。
a bunch of third party API's and
try to make that performance.

37
00:02:14.730 --> 00:02:18.521
如果你最终处于进行大量异步调用的情况下,
If you end up in a situation where you're
making lots of asynchronous calls,

38
00:02:18.521 --> 00:02:21.490
你可能会想使用异步等待。
you're probably gonna be
tempted to use async await.

39
00:02:21.490 --> 00:02:25.639
但是如果你使用了 async await，并且你没有像 promise dot all 那样设置,
But if you use async await, and you're
not setting up like a promise dot all,

40
00:02:25.639 --> 00:02:28.090
然后它们实际上是按顺序运行的。
then they're actually blocking and
running sequentially.

41
00:02:28.090 --> 00:02:30.879
所以不经意间，你会让你的页面变得非常慢。
So inadvertently,
you'll make your pages really slow.

42
00:02:30.879 --> 00:02:35.310
通过将这些数据规范化为 GraphQL，盖茨比可以为您处理所有这些数据。
By normalizing that data into GraphQL,
Gatsby handles all of that for you.

43
00:02:35.310 --> 00:02:38.829
所以你实际上不需要考虑如何快速获取数据。
So you don't actually have to think
about how to get that data in quickly.

44
00:02:38.829 --> 00:02:42.639
因为你是在构建的时候做的，所以作为一个开发人员你会感到痛苦,
And because you're doing it at build time,
you feel that pain as a developer,

45
00:02:42.639 --> 00:02:47.039
如果你因为构建缓慢而做了一些不能执行的事情。
if you do something that's not
performing because the build is slow.

46
00:02:47.039 --> 00:02:49.699
但是产生的静态资产速度很快。
But the static assets that
get generated are fast.

47
00:02:49.699 --> 00:02:52.900
因此，如果你做了一些愚蠢的事情，你的用户不会感到痛苦
And so your users don't feel the pain
if you do something silly with

48
00:02:52.900 --> 00:02:53.659
你的数据管理。
your data management.

49
00:02:54.810 --> 00:03:00.377
我的意思是，你显然想要解决这个问题，但这成为你的问题，而不是他们的，对不对？
I mean, you wanna fix that obviously, but
it becomes your problem not theirs, right?

50
00:03:00.377 --> 00:03:03.318
另一件我认为很重要的事情是,
The other thing that I think is
really important about this is that,

51
00:03:03.318 --> 00:03:06.169
而盖茨比有很多的观点，建立了一系列的默认值。
while Gatsby has a lot of opinions and
sets up a bunch of defaults.

52
00:03:06.169 --> 00:03:08.599
它也给了你巨大的控制力。
It also gives you a huge
amount of control.

53
00:03:08.599 --> 00:03:10.849
所以你可以直接进入 Webpack 配置,
So you can get all the way
down to the Webpack config,

54
00:03:10.849 --> 00:03:13.650
你可以一直到巴别塔的配置。
you can get all the way
down to the Babel config.

55
00:03:13.650 --> 00:03:17.250
但重要的是，盖茨比使用了我创立的一个模型
But the thing that's important is that
Gatsby uses a model that I I've started

56
00:03:17.250 --> 00:03:19.620
称之为复杂性的渐进揭示。
calling progressive
disclosure of complexity.

57
00:03:19.620 --> 00:03:22.183
我不认为这个术语是我编造的，但是我把它加进去了。
I don't think I made up that term but
I've co-opted it.

58
00:03:23.379 --> 00:03:27.329
也就是说，当你想要修改某个东西时,
Which is the idea that,
when you want to modify something,

59
00:03:27.329 --> 00:03:30.379
你只需要弹出你想修改的部分。
you should only have to eject
the piece that you want to modify.

60
00:03:30.379 --> 00:03:33.960
我们可能都已经看到这一点，当你使用某种锅炉镀工具
We've probably all seen this when you
use some kind of a boiler plated tool

61
00:03:33.960 --> 00:03:37.319
它可以做任何我们想做的事情，然后我们遇到了一个边缘案例
that it does all the things that we
want and then we hit an edge case and

62
00:03:37.319 --> 00:03:40.289
突然间，所有的配置都由我们来管理。
suddenly, all of the config
is managed by us.

63
00:03:40.289 --> 00:03:44.240
整个应用程序变得客观，现在任何发生在上游的变化,
The entire app becomes objective, and
now any change that happens upstream,

64
00:03:44.240 --> 00:03:45.800
我们必须手动迁移。
we have to manually migrate.

65
00:03:45.800 --> 00:03:48.259
这其中有很多痛苦的地方。
There are a lot of pain
points involved in that.

66
00:03:48.259 --> 00:03:52.909
所以盖茨比试图通过一次只展示一部分作品来摆脱这一点。
So Gatsby tries to get rid of that by only
exposing pieces one section at a time.

67
00:03:52.909 --> 00:03:55.069
如果你对巴别塔进行了调整,
If you make a Babel adjustment,

68
00:03:55.069 --> 00:03:58.329
你不需要排出整个盖茨比建造的管道。
you don't have to eject
the entire Gatsby build pipeline.

69
00:03:58.329 --> 00:04:02.338
你只是注入了一小块巴别塔配置。
You're just injecting that one
little piece of Babel config.

70
00:04:02.338 --> 00:04:06.606
总结一下，盖茨比速度很快，所有的方法都很重要,
So, to kind of recap this, Gatsby is
fast and all the ways that matter,

71
00:04:06.606 --> 00:04:10.034
作为开发人员，它能让你更快，让你更快。
it makes you faster as a developer,
it makes you faster.

72
00:04:10.034 --> 00:04:14.617
您的用户将看到的体验更快。
The experience that your
users will see is faster.

73
00:04:14.617 --> 00:04:19.137
开始的速度很快，发布和重复的速度也很快。
And it's fast to get started,
fast to ship and iterate.

74
00:04:19.137 --> 00:04:21.471
这些都是非常重要的事情。
And those are all really important things.

75
00:04:21.471 --> 00:04:24.336
并允许您从任何地方带入数据，因为它可以使用该文件
And lets you bring in your data from
anywhere because it can use the file

76
00:04:24.336 --> 00:04:26.290
系统、 API、软件即服务。
system, API, software as a service.

77
00:04:26.290 --> 00:04:29.730
它不会限制你作为一个开发人员可以构建什么或者
It doesn't restrict you as
a developer on what you can build or

78
00:04:29.730 --> 00:04:31.326
你可以从哪里开始建造。
where you can build it from.

79
00:04:31.326 --> 00:04:35.911
默认情况下，它通过默认设置良好的防护栏来做正确的事情,
It does the right thing by default by
setting up good guard rails in defaults,

80
00:04:35.911 --> 00:04:39.872
你可以省去大部分的麻烦，仍然可以得到一个好的结果。
you're able to cut most of the corners and
still get a good result.

81
00:04:39.872 --> 00:04:42.509
我认为这可能是对我来说最重要的事情。
And I think this is probably
the most important thing for me.

82
00:04:42.509 --> 00:04:47.420
如果我有一个愚蠢的想法的话，盖茨比实际上又让我觉得网络开发很有趣了
Gatsby actually made web development fun
for me again, if I have a silly idea for

83
00:04:47.420 --> 00:04:50.000
一个项目，我实际上现在建立它。
a project, I actually build it now.

84
00:04:50.000 --> 00:04:53.139
因为在我完成一个 web pack 配置的一半之前
Because before I would get halfway
through a web pack config, and

85
00:04:53.139 --> 00:04:55.800
然后我就会灰心丧气，再也不想这么做了。
then I would get disheartened, and
I wouldn't wanna do it anymore.

86
00:04:55.800 --> 00:05:00.160
所以在《了不起的盖茨比》中，当你说《了不起的盖茨比》采用了你的模板,
And so with Gatsby, when you just
say Gatsby new use your template,

87
00:05:00.160 --> 00:05:02.949
它只是给你一些东西，你可以运行盖茨比发展。
it will just give you something that
you can run Gatsby development.

88
00:05:02.949 --> 00:05:06.670
它已经在浏览器中运行了，我马上就开始编写 UI 代码。
It's in the browser and it's working and
I'm immediately writing UI code.

89
00:05:06.670 --> 00:05:10.430
我不是在试图弄明白如何让我的样板文件如此工作
I'm not trying to figure out how
to get my boilerplate to work so

90
00:05:10.430 --> 00:05:11.430
我可以运送一些东西。
that I can ship something.

91
00:05:12.870 --> 00:05:14.932
这就是大致情况，对吧？
So, that's kind of the overview, right?

92
00:05:14.932 --> 00:05:18.795
这就是为什么《了不起的盖茨比》值得一看的原因
That's my pitch on why Gatsby
is worth looking into and

93
00:05:18.795 --> 00:05:22.668
为什么它值得认真对待，作为一个网络技术。
why it's worth taking
seriously as a web technology.

94
00:05:22.668 --> 00:05:25.581
但是兔子洞越陷越深，这就是我们今天要做的。
But the rabbit hole goes so much deeper
and that's what we're gonna do today.
