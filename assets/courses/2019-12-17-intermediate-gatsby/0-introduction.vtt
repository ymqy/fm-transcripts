WEBVTT

1
00:00:00.190 --> 00:00:01.395
大家好。
&gt;&gt; Jason Lengstorf: Hi everyone.

2
00:00:01.395 --> 00:00:03.120
很高兴你们今天能来到这里。
Super excited for
you all to be here today.

3
00:00:03.120 --> 00:00:06.532
我们将学习中级
And we're gonna be learning
about intermediate, and

4
00:00:06.532 --> 00:00:10.329
然后在小括号里加上了今天先进的盖茨比。
then in tiny parenthetical slash,
advanced Gatsby today.

5
00:00:11.763 --> 00:00:14.189
杰森 · 兰斯托夫: 我们将进入一些边缘
&gt;&gt; Jason Lengstorf: We're gonna get
into some of the kinda edges and

6
00:00:14.189 --> 00:00:16.201
你可以对盖茨比做些什么。
corners of what you can do with Gatsby.

7
00:00:16.201 --> 00:00:17.724
进入一些更强大的东西,
Get into some more powerful stuff,

8
00:00:17.724 --> 00:00:21.480
移动到你通常认为一组网站能够做到的范围之外。
moving outside of what you would typically
think a set of site is capable of.

9
00:00:21.480 --> 00:00:24.379
我真的很期待这样做。
And I'm really really
looking forward to doing it.

10
00:00:24.379 --> 00:00:26.320
关于我，我是杰森。
So, a little bit about me I'm Jason.

11
00:00:26.320 --> 00:00:32.201
我是一个，我已经把学习作为我的职业，我真的很喜欢这样做。
I am kind of a, I've made it my career to
learn, I really really like doing that.

12
00:00:32.201 --> 00:00:36.015
我学习的方式之一就是教书，所以我尽可能经常这样做,
And one of the ways I learn is by
teaching, so I do that as often as I can,

13
00:00:36.015 --> 00:00:39.049
这也是我今天来这里的部分原因。
which is part of the reason
why I'm here today.

14
00:00:39.049 --> 00:00:43.500
我目前是 Netlify 的首席开发人员体验工程师。
I'm currently a principal developer
experience engineer at Netlify.

15
00:00:43.500 --> 00:00:46.219
在此之前，我是盖茨比的开发者关系部门的负责人
Prior that I was head of
Developer Relations at Gatsby and

16
00:00:46.219 --> 00:00:49.600
在那之前，我是 IBM 的前端架构师。
then I was a front end
architect at IBM before that.

17
00:00:49.600 --> 00:00:53.840
我住在俄勒冈州的波特兰市，也是一名教师
I live in Portland,
Oregon and also I teach a or

18
00:00:53.840 --> 00:00:57.590
我每周都在现场直播特维奇。
I run a weekly live stream on Twitch.

19
00:00:57.590 --> 00:01:00.396
每周有几次我和某人一起编程
A couple of times a week I
pair program with somebody and

20
00:01:00.396 --> 00:01:02.170
我们白手起家。
we build something from scratch.

21
00:01:02.170 --> 00:01:05.090
它叫做“和杰森一起学习” ，非常有趣。
It's called Learn with Jason,
it's a lot of fun.

22
00:01:05.090 --> 00:01:08.585
它充满了愚蠢的声音效果，你可以随时聊天,
And it's full of silly sound
effects you can chat along live,

23
00:01:08.585 --> 00:01:11.545
如果你想学点什么，这是个好机会
it's a good time if you wanna
learn something and and

24
00:01:11.545 --> 00:01:14.793
也希望我那些糟糕的笑话能让你笑一笑。
also hopefully giggle a little
bit at my terrible jokes.

25
00:01:15.906 --> 00:01:18.850
杰森 · 兰斯托夫: 在我们开始之前，我想先说明一下是谁
&gt;&gt; Jason Lengstorf: So, before we get
started I wanna set a little bit of who

26
00:01:18.850 --> 00:01:23.210
这个研讨会只是为了确保我们的假设是正确的。
this workshop is for just to make sure
that we've got our assumptions straight.

27
00:01:24.689 --> 00:01:26.140
我有两个假设。
I'm gonna make two assumptions.

28
00:01:26.140 --> 00:01:28.689
一是你以前至少建过一个简单的盖茨比遗址,
One is that you've built at least
a simple Gatsby site before,

29
00:01:28.689 --> 00:01:32.990
我们将会讨论很多盖茨比的内部细节。
we're gonna be talking about
a lot of the internals of Gatsby.

30
00:01:32.990 --> 00:01:37.587
我也不会再重复那些文件的名字,
And I'm not gonna go over things
like what the files are named,

31
00:01:37.587 --> 00:01:39.506
或诸如此类的事情。
or those sorts of things.

32
00:01:40.533 --> 00:01:44.468
所以，一定要问我是否做了一些你不清楚的事情。
&gt;&gt; Jason Lengstorf: So, definitely ask if
I do something that you're not clear on.

33
00:01:44.468 --> 00:01:47.484
但我假设你至少
But I will be assuming
that you've at least

34
00:01:47.484 --> 00:01:51.270
我以前见过一些盖茨比的发展过程。
seen some of the Gatsby
development process before.

35
00:01:52.310 --> 00:01:54.909
而且我还假设你们至少对“反应”有点熟悉。
And I'll also be assuming that you're
at least a little familiar with React.

36
00:01:54.909 --> 00:01:58.305
所以我们要做一些事情，比如使用反应钩。
So we're going to be doing
things like using React Hooks.

37
00:01:58.305 --> 00:02:02.911
我们今天要管理国家和处理表格。
We're going to be managing state today and
handling forms.

38
00:02:02.911 --> 00:02:07.353
所以，如果你从来没有使用过反应或者你对反应感到不舒服,
So, if you've never used React or
you're not super comfortable with React,

39
00:02:07.353 --> 00:02:10.853
你可能想回去看 Brian Holt 的《反应简介》或者
you may want to go back and
watch Brian Holt's Intro to React or

40
00:02:10.853 --> 00:02:14.377
另一个课程可以帮助你加快速度。
another course that'll kind of
bring you up to speed on that.

41
00:02:14.377 --> 00:02:18.460
如果你对盖茨比感到不舒服，那么你可能想回去
If you're uncomfortable with Gatsby,
then you may want to go back and

42
00:02:18.460 --> 00:02:22.141
观看我的前端大师课程，有点像初学者盖茨比。
watch my front end Masters course
on kind of a Beginner Gatsby.

43
00:02:23.812 --> 00:02:26.245
杰森 · 兰斯托夫: 话虽如此，我认为我们已经准备好加入了。
&gt;&gt; Jason Lengstorf: With that being said,
I think we're ready to jump in.

44
00:02:26.245 --> 00:02:28.423
所以在我们讨论盖茨比之前,
So before we talk about what Gatsby is,

45
00:02:28.423 --> 00:02:32.912
了解它所解决的问题是很重要的。
it's kind of important to understand
what the problems are that it's solving.

46
00:02:32.912 --> 00:02:36.776
所以第一件事就是对现代社会的挑战做一个概述
So the first thing is just to kind of get
an overview of the challenges of modern

47
00:02:36.776 --> 00:02:37.735
网页开发。
web development.

48
00:02:39.405 --> 00:02:42.527
我看到的最大的问题，特别是最近,
&gt;&gt; Jason Lengstorf: The biggest problem
that I've seen, especially lately,

49
00:02:42.527 --> 00:02:46.533
在现代网络开发中的起步是非常艰难的。
is that getting started in modern web
development is really overwhelming.

50
00:02:46.533 --> 00:02:50.687
有很多选择，有很多很多件。
There are tons of options,
there are lots and lots of pieces.

51
00:02:50.687 --> 00:02:56.908
而且他们也不一定清楚他们是如何组合在一起的。
And they don't necessarily feel
clear as to how they fit together.

52
00:02:56.908 --> 00:02:59.014
感觉好像发生了很多事情。
It feels like a lot of stuff going on.

53
00:02:59.014 --> 00:03:02.640
这个生态系统非常嘈杂，每个人都说他们
It's very noisy in the ecosystem with
everybody saying that they've got

54
00:03:02.640 --> 00:03:05.973
偏好和那些偏好通常是像事实一样陈述的
preferences and those preferences
are usually stated like facts so

55
00:03:05.973 --> 00:03:10.141
很难理解什么是最佳实践。
it can be really difficult to understand
what the quote unquote best practices are.

56
00:03:12.156 --> 00:03:14.900
杰森 · 兰斯托夫: 最重要的是，我们管理数据的方式在不断发展。
&gt;&gt; Jason Lengstorf: On top of that
the way we manage data is evolving.

57
00:03:14.900 --> 00:03:18.609
我的意思是，过去是这样，至少在我刚开始的时候是这样
I mean, it used to be, back in the day,
at least when I was getting started that

58
00:03:18.609 --> 00:03:21.379
你会有某种集中存储的数据。
you'd have some kind of
a centralized store of your data.

59
00:03:21.379 --> 00:03:25.075
你会有一个 API 或者你会有你的 WordPress 实例或者
You would have an API or
you would have your WordPress instance or

60
00:03:25.075 --> 00:03:26.719
你的 Drupal 实例。
your Drupal instance.

61
00:03:26.719 --> 00:03:28.090
这样就可以解决一切问题了。
And that would manage everything.

62
00:03:28.090 --> 00:03:30.490
如果你在 WordPress 中有一个博客。
If you had a blog that was in WordPress.

63
00:03:30.490 --> 00:03:32.729
如果你有电子商务，那是在 WordPress 中。
If you had e-commerce,
that was in WordPress.

64
00:03:32.729 --> 00:03:34.889
如果你有一个表单，那就是在 WordPress 中。
If you had a form, that was in WordPress.

65
00:03:34.889 --> 00:03:37.788
所以你们的 CMS 就像是一个整体,
And so
your CMS was kind of this monolithic,

66
00:03:39.079 --> 00:03:42.319
一刀切的数据管理方法。
one size fits all approach
to data management.

67
00:03:42.319 --> 00:03:44.764
现在这种情况正在改变，所以它开始分崩离析。
And that's changing now so
it's starting to come apart.

68
00:03:44.764 --> 00:03:46.754
我们一会儿再谈这个问题。
We'll talk a little bit more
about that in a minute.

69
00:03:47.901 --> 00:03:50.259
杰森 · 兰斯托夫: 然后把它做对是很困难的。
&gt;&gt; Jason Lengstorf: And
then just getting it right is hard.

70
00:03:50.259 --> 00:03:54.481
现代网络开发的任何一个特定的细节都可能成为年和年的职业
Any particular tiny sliver of modern web
development could become a career in and

71
00:03:54.481 --> 00:03:56.788
我们看到了这种情况的发生。
of itself, and we're seeing that happen.

72
00:03:56.788 --> 00:04:01.127
像哈利 · 罗宾逊这样的人就是通过优化网络来完成他的整个职业生涯的
People like Harry Robinson have made an
entire career just out of optimizing web

73
00:04:01.127 --> 00:04:01.979
性能。
performance.

74
00:04:01.979 --> 00:04:04.835
而其他人，比如瑞秋 · 安德鲁,
And other people, like Rachel Andrew,

75
00:04:04.835 --> 00:04:08.953
在教授 CSS 和 CSS Grid 方面取得了一定的成就。
have made a career out of
teaching people CSS and CSS Grid.

76
00:04:08.953 --> 00:04:13.031
你可以在这些东西中的任何一个进入兔子洞，这是一个完全
You can go down the rabbit hole in any
one of these things and it's a completely

77
00:04:13.031 --> 00:04:17.230
有效的职业，需要获得和分享大量的知识。
valid profession with a huge amount
of knowledge to acquire and share.

78
00:04:17.230 --> 00:04:21.930
所以对于我们这些在公司工作的普通开发人员来说,
So for us, the average
developer working in a company,

79
00:04:21.930 --> 00:04:25.500
我们怎么才能把这些事情都做对呢？
how do we expect to get
all of these things right?

80
00:04:25.500 --> 00:04:29.810
我们怎样才能不仅建立一个好的应用程序
How do we expect to not
only build a good app and

81
00:04:29.810 --> 00:04:32.149
提供良好的功能，但性能是否正确？
deliver good features,
but get performance right?

82
00:04:33.220 --> 00:04:34.697
可维护性是否正确？
Get maintainability right?

83
00:04:34.697 --> 00:04:40.406
确保我们运送的是现代化的应用程序和我们一起扩展,
Make sure that we're shipping modern and
apps that are gonna scale with us,

84
00:04:40.406 --> 00:04:45.221
有太多不同的事情需要我们去了解
and there are just so many different
things that we need to know in

85
00:04:45.221 --> 00:04:49.514
为了做好这件事，这是超级无法抗拒的。
order to get this right and
that's super overwhelming.

86
00:04:50.620 --> 00:04:54.000
杰森 · 兰斯托夫: 《了不起的盖茨比》试图解决其中的一些问题
&gt;&gt; Jason Lengstorf: So Gatsby is
an attempt to address some of these

87
00:04:54.000 --> 00:04:59.909
其中一种思考方式就是这是条捷径，对吗？
challenges and one of the ways to think
about it is that it's a shortcut, right?

88
00:04:59.909 --> 00:05:04.286
因此，《了不起的盖茨比》是开发人员快速开发优秀应用程序的捷径
So Gatsby is a shortcut to allow
developers to quickly build excellent apps

89
00:05:04.286 --> 00:05:04.987
和网站。
and sites.

90
00:05:04.987 --> 00:05:09.709
这意味着它试图设置一些默认值
And what that means is that it's
trying to set some defaults and

91
00:05:09.709 --> 00:05:16.185
一些途径，这样你不得不做出更少的决定，以获得一个好的结果。
some pathways so that you have to make
fewer decisions to get a good outcome.

92
00:05:16.185 --> 00:05:18.475
杰森 · 兰斯托夫: 为了说明这意味着什么,
&gt;&gt; Jason Lengstorf: So to give
an illustration of what that means,

93
00:05:18.475 --> 00:05:21.766
许多工作流程需要大量的样板文件才能开始，而且
a lot of workflows involve a ton
of boilerplate to get started, and

94
00:05:21.766 --> 00:05:23.319
我们来举例说明一下。
let's just illustrate that.

95
00:05:23.319 --> 00:05:25.529
假设我有，我想写一些代码
So let's say I've got,
I wanna write some code and

96
00:05:25.529 --> 00:05:27.639
我想把密码传到网上，对吧？
I wanna get that code on to the internet,
right?

97
00:05:27.639 --> 00:05:31.250
那看起来像是一步到位的事情但是当你开始深入研究的时候,
That's, that seems like a one step thing,
but when you start to dig into it,

98
00:05:31.250 --> 00:05:34.600
如果你要从头开始，开始你自己的事业，你最终会。
if you're going from scratch and rolling
your own thing, you're gonna end up.

99
00:05:34.600 --> 00:05:37.840
好的，我需要建立一些网络包，我想使用现代的功能。
Okay, I need to set up some web packs,
I wanna use modern features.

100
00:05:37.840 --> 00:05:41.069
好吧，这意味着我必须拥有巴别塔，因为我需要透露这些特征
Okay, well that means I have to have Babel
because I need to transpile those features

101
00:05:41.069 --> 00:05:42.899
变成浏览器能理解的东西。
into something that
the browser understands.

102
00:05:42.899 --> 00:05:46.879
然后你需要张贴 CSS，这样你就可以使用现代的 CSS 特性。
Then you need post CSS so
that you can use modern CSS features.

103
00:05:46.879 --> 00:05:48.110
现在你看到的是 node so
Now you're looking at node so

104
00:05:48.110 --> 00:05:51.620
你可以在某个地方建立一个服务器来承载这些代码。
that you can actually set up a server
that hosts that code somewhere.

105
00:05:51.620 --> 00:05:54.956
然后你可能会进入像库伯内特斯这样的集装箱。
Then you might be getting into
containers like Kubernetes.

106
00:05:54.956 --> 00:05:59.175
然后 NginX，如果你想设置反向代理，因为你的容器
Then NginX if you want to set up
reverse proxies because your containers

107
00:05:59.175 --> 00:06:01.651
管理应用程序的不同部分。
are managing different parts of the app.

108
00:06:01.651 --> 00:06:05.839
您需要一个 CDN 像快速，以便您可以得到您的用户的东西快速。
You need a CDN like fastly so that you
can get things to your users quickly.

109
00:06:05.839 --> 00:06:09.089
如果你感到不知所措，我的意思是，这是压倒性的。
And if you're feeling overwhelmed,
I mean, this is overwhelming.

110
00:06:09.089 --> 00:06:11.410
这些事情中的每一件都可以成为一种职业，对吗？
Each one of these things
could be a career, right?

111
00:06:11.410 --> 00:06:14.529
我的意思是，当我在 IBM 工作的时候，有些人的整个工作
I mean, there were people when I
worked at IBM whose entire job

112
00:06:14.529 --> 00:06:16.910
只是在处理集装箱。
was just dealing with the containers.

113
00:06:16.910 --> 00:06:21.690
反向代理让他们在我们部署的服务上保持活力。
And the reverse proxies that kept them
alive on the services that we deployed.

114
00:06:21.690 --> 00:06:26.466
因此，有大量的复杂因素会随着你的介绍而出现
So there are a huge number of
complexities that get introduced as you

115
00:06:26.466 --> 00:06:28.829
开始在现代网络应用程序上运行。
start to work on modern web apps.

116
00:06:30.009 --> 00:06:34.706
所以，为了简化盖茨比所采取的方法，让我们来看看
So to simplify that Gatsby kind of
takes an approach of let's take all of

117
00:06:34.706 --> 00:06:35.735
这些东西。
these things.

118
00:06:35.735 --> 00:06:40.836
只要设置一些快乐的默认路径，就可以为绝大多数网站设置这样的路径
And just set up some happy path defaults
and say that for the vast majority of web

119
00:06:40.836 --> 00:06:46.300
应用程序有一种方法来运输这些，将大多数时候是正确的。
apps there's a way to ship these that
will be mostly right most of the time.

120
00:06:46.300 --> 00:06:50.050
这样我们就可以去掉大量的样板文件。
And that allows us to remove
a ton of boilerplate.

121
00:06:50.050 --> 00:06:54.050
因此，我们可以开始并部署一些东西到生产中，这将开始
So we can get started and deploy something
to production that will start out

122
00:06:54.050 --> 00:06:56.814
通过了所有灯塔的绩效审核。
passing all the lighthouse audits for
performance.

123
00:06:56.814 --> 00:07:00.271
它将开始得到全 a 的网页测试。
It'll start out getting
straight A's on web page test.

124
00:07:00.271 --> 00:07:04.596
作为一个网页开发者，你不必成为一个专家,
And that puts you, as a web developer in a
position to not have to become an expert,

125
00:07:04.596 --> 00:07:08.925
但是要注意你在做什么，确保你没有
but just to pay attention to what you're
doing to make sure that you're not having

126
00:07:08.925 --> 00:07:10.060
回归。
regressions.

127
00:07:10.060 --> 00:07:13.199
所以一般的网络应用，如果你开始添加一些东西
So the average web app,
if you start you add something and

128
00:07:13.199 --> 00:07:15.180
那你就得想想为什么这么慢。
then you have to go
figure out why it's slow.

129
00:07:15.180 --> 00:07:19.800
这故意采取了大量的样板，并说，如果你做它喜欢
This intentionally takes a lot of
the boilerplate and says if you do it like

130
00:07:19.800 --> 00:07:24.740
这个，你会没事的，然后当你开始添加东西的时候
this, you're gonna be okay and then as you
start to add things you just have to be

131
00:07:24.740 --> 00:07:28.649
而不是提出所有的样板文件。
watching as opposed to kind of bringing
up the whole boilerplate just enough.

132
00:07:29.740 --> 00:07:34.019
它看起来有点像这样，你有了你的代码，你在《了不起的盖茨比》里写了这个代码
And it looks kind of like this, you have
your code, you write that in Gatsby and

133
00:07:34.019 --> 00:07:38.300
你把它推到 Netlify，然后连接到 Github 和
you push it up to Netlify
which hooks up to Github and

134
00:07:38.300 --> 00:07:41.840
把它放在互联网上，所以这是一个更简单的过程。
that puts it on the Internet,
so it's a much simpler process.

135
00:07:41.840 --> 00:07:45.329
在盖茨比工作流中，你使用 React 和 GraphQL。
And inside that Gatsby workflow,
you're using React and GraphQL.

136
00:07:45.329 --> 00:07:51.290
所以你不需要编排那么多的工具,
So you're not doing quite as
much orchestration of tools,

137
00:07:51.290 --> 00:07:55.649
你做的更多的是你真正想做的事情。
you're doing more building the actual
thing that you want to work on.

138
00:07:55.649 --> 00:07:59.401
因此，这需要花费大量的工作，让你集中精力
And so it takes a lot of that work out
of the way and allows you to focus on

139
00:07:59.401 --> 00:08:04.088
航运功能，而不是建立航运功能的基础。
shipping features, as opposed to setting
up the foundation for shipping features.

140
00:08:05.331 --> 00:08:08.127
杰森 · 兰斯托夫: 另一种看待盖茨比的方式是，它是一种编曲
&gt;&gt; Jason Lengstorf: Another way to think
about Gatsby is that it's an orchestration

141
00:08:08.127 --> 00:08:10.189
图层用于驯服内容网格。
layer for taming the Content Mesh.

142
00:08:10.189 --> 00:08:12.790
内容网格是盖茨比编造的一个时髦词汇
The Content Mesh is a buzzword
that Gatsby made up but

143
00:08:12.790 --> 00:08:16.740
我喜欢它是因为它描述了
Iove it because it kind of
describes what's happening in

144
00:08:16.740 --> 00:08:21.839
前端的景观现在，如果你看看单片 CMS
the the front end landscape right now,
if you look at monolithic CMS

145
00:08:21.839 --> 00:08:26.139
他们都开始放弃我们能处理一切的想法。
is they're all starting to back away from
this idea that we can handle everything.

146
00:08:26.139 --> 00:08:29.569
有一个无头的实现，Drupal 称之为
WordPress has a headless implementation,
Drupal calls it

147
00:08:29.569 --> 00:08:33.490
分离的 Drupal，它不再有关于前端的意见。
decoupled Drupal where it no longer
has opinions about the front end.

148
00:08:33.490 --> 00:08:38.429
大多数主要的服务都开始通过 API 发布他们的数据
Most major services are starting to
ship all of their data via API so

149
00:08:38.429 --> 00:08:41.009
你可以在上面建造自己的前端。
that you can build your own
front end on top of it.

150
00:08:41.009 --> 00:08:46.336
这意味着我们正在远离一刀切或者
That means that we're moving away from
this idea of one size fits all or

151
00:08:46.336 --> 00:08:48.334
一个统治他们的工具。
one tool to rule them all.

152
00:08:48.334 --> 00:08:52.210
我们正开始朝着内容网格的想法前进。
And we're starting to move toward
this idea of the Content Mesh.

153
00:08:52.210 --> 00:08:57.610
你可以把不同的服务整合在一起，使用它们来做它们最擅长的事情。
Where you pull different services together
to use them for what they're best at.

154
00:08:57.610 --> 00:09:00.201
一个思考这个问题的方法是，如果你看一个普通的网站,
A way to think about this is,
if you look at the average website,

155
00:09:00.201 --> 00:09:03.866
你有你的图片，你有你的搜索功能，你有内容。
you've got your images, you've got your
search functionality, you've got content.

156
00:09:03.866 --> 00:09:05.960
也许你有你卖的产品。
Maybe you've got products that you sell.

157
00:09:05.960 --> 00:09:09.899
这些东西都会从不同的服务中提取出来。
And each of those things is going to
be pulled from a different service.

158
00:09:09.899 --> 00:09:12.169
所以也许你的图像就在你附近的云端。
So maybe you've got your
images on cloud near you.

159
00:09:12.169 --> 00:09:15.764
也许你正在使用 Algolia 进行搜索，Contentful 管理你的内容,
Maybe you're using Algolia for search,
Contentful to manage your content,

160
00:09:15.764 --> 00:09:17.461
管理你的电子商务。
Stripe to manage your e-commerce.

161
00:09:17.461 --> 00:09:18.500
这是一件好事。
And that's a good thing.

162
00:09:18.500 --> 00:09:21.370
也就是说你使用的这些工具,
That means that you're using
each of these tools which,

163
00:09:21.370 --> 00:09:24.809
这取决于你问的是班上最好的学生。
depending on who you ask is
best in class at what it does.

164
00:09:24.809 --> 00:09:27.062
你使用它只是为了它能做什么。
And you're using it only for what it does.

165
00:09:27.062 --> 00:09:30.110
你并不是想把 Contentful 变成一个电子商务平台。
You're not trying to make Contentful
into an e-commerce platform.

166
00:09:30.110 --> 00:09:31.330
它不是用来干这个的。
That's not what it's for.

167
00:09:31.330 --> 00:09:34.413
你不是要把 Stripe 变成一个内容管理系统,
You're not trying to make Stripe
into a content management system,

168
00:09:34.413 --> 00:09:36.176
因为那不是用来干这个的。
because that's not what that's for.

169
00:09:36.176 --> 00:09:38.903
你只是使用他们最擅长的工具，而且
You just use the tools for
what they're best at, and

170
00:09:38.903 --> 00:09:41.019
把它们缝在你的前端。
stitch them together in your front end.

171
00:09:41.019 --> 00:09:44.019
现在，你可以想象，这可能会变得有点复杂，因为我们现在正在讨论
Now, as you can imagine, this can get kind
of complicated because now we're talking

172
00:09:44.019 --> 00:09:48.850
在这个简单的例子中，我们看到了四个不同的 api
about just in this simple example we're
looking four different APIs that we have

173
00:09:48.850 --> 00:09:53.120
要求的东西，把东西放在一起，坚持到网页和
to request things from, put together,
stick on to the page and

174
00:09:53.120 --> 00:09:55.639
确保我们没有把一切都搞得太慢。
make sure that we didn't make everything
horribly slow in the process.

175
00:09:56.649 --> 00:10:01.205
所以盖茨比所做的就是集中式的 GraphQL 层。
So what Gatsby does is it has this
idea of a centralized GraphQL layer.

176
00:10:01.205 --> 00:10:04.388
它会从你能想到的任何来源获取数据
And it will pull data from any
source that you can think of

177
00:10:04.388 --> 00:10:07.979
无论是文件系统，软件即服务，还是 API,
whether that's a file system,
software as a service and API,

178
00:10:07.979 --> 00:10:12.552
类似的东西，把它拉进来，放到集中的 GraphQL 层中。
something like that, pull it in and
put it into the centralized GraphQL layer.

179
00:10:12.552 --> 00:10:16.100
然后在 React 中查询 GraphQL 层。
Then you query that
GraphQL layer in React.

180
00:10:16.100 --> 00:10:17.240
这就意味着
And that means that for

181
00:10:17.240 --> 00:10:22.250
开发人员的数据访问保持不变，无论您使用的是什么来源。
developers data access stays the same
no matter what source you're using.

182
00:10:22.250 --> 00:10:26.147
您将需要一个 GraphQL API，并且它开始让您感到熟悉
You're going to be requiring a GraphQL
API, and it starts to feel familiar as you

183
00:10:26.147 --> 00:10:29.414
对盖茨比导入数据的方式越来越满意,
get more and more comfortable with
the way the Gatsby imports data,

184
00:10:29.414 --> 00:10:31.621
所以一切都开始变得一样了。
so everything starts to
feel about the same.

185
00:10:31.621 --> 00:10:34.962
你总是会得到所有满意的数据和节点,
You're always gonna get all
Contentful data, and the nodes,

186
00:10:34.962 --> 00:10:38.149
然后你会在里面找到一些磁场。
and then you'll get some fields inside.

187
00:10:38.149 --> 00:10:40.389
这一点在所有服务中都是正确的。
And that stays true across services.

188
00:10:40.389 --> 00:10:45.149
一旦你做到了一旦你让一切运转起来,
Once you've done,
once you've got everything working,

189
00:10:45.149 --> 00:10:48.690
构建它并输出一个装满静态资产的文件夹。
you build it and that outputs
a folder full of static assets.

190
00:10:48.690 --> 00:10:53.659
静态资产可以上传到 Amazon S3 bucket 中以取消
The static assets can be uploaded
to an Amazon S3 bucket to nullify

191
00:10:53.659 --> 00:10:59.169
任何 CDN 类型的对象存储，你想，这是伟大的，因为
to whatever CDN kind of object storage
that you want, which is great because

192
00:10:59.169 --> 00:11:02.860
这意味着你不必保持一个活着的运行服务器，你只需要 CDN。
that means you don't have to keep a live
running server, you just need the CDN.

193
00:11:02.860 --> 00:11:06.115
至于保持东西的价格和便宜，一个 CDN 大约是
And as far as keeping things up and
inexpensive, a CDN is about

194
00:11:06.115 --> 00:11:09.821
最好的方法就是保持东西的可用性，而不是花一大笔钱。
the best way to keep things available and
not spend a fortune doing it.

195
00:11:11.004 --> 00:11:14.470
杰森 · 兰斯托夫: 然后当它进入浏览器时，它就会重新水合成一个 React 应用程序。
&gt;&gt; Jason Lengstorf: And then when it hits
the browser rehydrates into a React app.

196
00:11:14.470 --> 00:11:18.700
这意味着你不会失去任何动态功能，你仍然可以
And that means that you don't lose any
dynamic capabilities, you can still make

197
00:11:18.700 --> 00:11:22.549
异步请求，你仍然可以做客户端路由，你仍然可以
asynchronous requests, you can still
do client side routing, you can still

198
00:11:22.549 --> 00:11:26.419
你可以使用 React 应用程序做所有的事情。
do authentication, all the things that
you would do with the regular React app.

199
00:11:26.419 --> 00:11:30.432
但是你已经省去了很多把 React 应用放到网上的复杂性。
But you've cut out a lot of the complexity
of getting that React app up onto the web.

200
00:11:30.432 --> 00:11:35.018
你不需要发送一个节点服务器来服务那个响应装载到你
You don't have to ship a node server to
serve that did that React mounts into you

201
00:11:35.018 --> 00:11:39.065
可以只是把一些静态资产和反应将处理为您。
can just put some static assets up and
React will handle that for you.

202
00:11:39.065 --> 00:11:43.664
作为一个例子，这可能看起来在一个真正的网站，这是一个旧的截图
As an example of how this might look in a
real website, this is an old screenshot of

203
00:11:43.664 --> 00:11:48.809
在盖茨比的摇钱树店，用户界面已经更新，但概念是一样的。
the Gatsby's Swag Store, the UI has been
updated but the concepts are the same.

204
00:11:48.809 --> 00:11:51.889
当你加载这个网站的时候,
How this works is that
when you load this site,

205
00:11:51.889 --> 00:11:53.629
你看到的是来自多个来源的数据。
you're looking at data
from multiple sources.

206
00:11:53.629 --> 00:11:56.508
所以第一个来源是 Shopify
So the first source is
gonna be Shopify and

207
00:11:56.508 --> 00:12:00.135
Shopify 保存这些产品的库存。
Shopify keeps inventory of
each of these products.

208
00:12:00.135 --> 00:12:03.431
上面有照片价钱和尺寸,
It has the photos and
the price and the sizes,

209
00:12:03.431 --> 00:12:07.975
所有你在电子商务商店里能想到的东西。
all the things that you would
expect in an e-commerce store.

210
00:12:07.975 --> 00:12:12.562
然后，我们在客户端，卸载零的身份验证，并
Then, we on the client side,
load off zero for authentication, and

211
00:12:12.562 --> 00:12:16.279
我们使用 Shopify 的 Buy SDK 动态加载是否或
we use Shopify's Buy SDK to
dynamically load whether or

212
00:12:16.279 --> 00:12:19.783
没有存货，也没有购物车。
not a thing is in stock and
to manage a shopping cart.

213
00:12:21.995 --> 00:12:26.350
然后，一旦你登录，你就可以看到你的 GitHub 数据。
&gt;&gt; Jason Lengstorf: Then once you're
logged in, you can see your GitHub data.

214
00:12:26.350 --> 00:12:31.179
所以我们使用 GitHub 来决定你是否有资格使用折扣码。
So we use GitHub to decide whether or not
you have qualified for the discount codes.

215
00:12:31.179 --> 00:12:36.169
如果你向盖茨比提出一个拉请求，你将得到一个10美元的折扣码。
If you do one pull request to Gatsby,
you get a $10 discount code.

216
00:12:36.169 --> 00:12:38.909
如果你做了5次，你会得到一个25美元的折扣代码,
If you do five you get
a $25 discount code,

217
00:12:38.909 --> 00:12:42.549
这是盖茨比感谢参与开源项目的一种方式。
it's kind of Gatsby's way of saying
thanks for participating in open source.

218
00:12:42.549 --> 00:12:47.360
所以他们用这个来计算贡献的数量。
And so they pull this to
get the contribution count.

219
00:12:47.360 --> 00:12:51.129
然后在下面，你可以看到你最近的贡献。
And then below that, you can also
see your most recent contributions.

220
00:12:51.129 --> 00:12:55.070
所以这是一种很酷的使用实时数据的方式。
So it's kind of a cool
way to use live data.

221
00:12:55.070 --> 00:12:57.200
但是你必须被认证才有这个权利。
But you have to be authenticated for
that right.

222
00:12:57.200 --> 00:12:58.559
这一切都是动态的。
This is all dynamic.

223
00:12:58.559 --> 00:13:01.009
所以它在客户端运行。
So it runs on the client side.

224
00:13:01.009 --> 00:13:06.210
这是一个很好的例子，说明盖茨比不仅仅是一个静态的地点，对吗？
And this is a good example of Gatsby being
more than just like static sites, right?

225
00:13:06.210 --> 00:13:07.190
它可以是动态的。
It can be dynamic.

226
00:13:07.190 --> 00:13:08.259
它只是静态资产。
It's just static assets.
