WEBVTT

1
00:00:00.170 --> 00:00:01.850
一旦我们有了模板,
&gt;&gt; Jason Lengstorf: Once
we have the template,

2
00:00:01.850 --> 00:00:06.660
我们可以定义组件来使用查询。
we can define component to use the query.

3
00:00:06.660 --> 00:00:10.289
这样就会得到这个查询的结果作为数据。
And so that is gonna get
the result of this query as data.

4
00:00:10.289 --> 00:00:13.199
盖茨比在建造过程中的工作方式
So the way that Gatsby works during
the build is it's gonna look for

5
00:00:13.199 --> 00:00:14.910
这个导出的查询。
this exported query.

6
00:00:14.910 --> 00:00:18.010
它实际上会执行它，得到数据,
And it will actually execute it,
get the data,

7
00:00:18.010 --> 00:00:22.480
然后将这些数据作为数据支撑注入到这个组件中。
and then inject that data as
a data prop to this component.

8
00:00:23.750 --> 00:00:24.989
这些都是在构建过程中完成的。
This is all done during the build.

9
00:00:24.989 --> 00:00:27.250
这是一个重写的过程。
So there's kind of a rewrite process.

10
00:00:27.250 --> 00:00:29.750
同样，保持这些模板分离的另一个原因是
Again, another reason to keep
these templates separate so

11
00:00:29.750 --> 00:00:31.539
很明显他们得到了特殊处理。
that it's clear that they
get special handling.

12
00:00:32.979 --> 00:00:37.259
然后这些数据会被放在某个地方。
That data then is going
to be put somewhere.

13
00:00:37.259 --> 00:00:42.868
我想做的是直接将它传递给将要使用它的组件。
And what I like to do is just pass it
directly to a component that will use it.

14
00:00:42.868 --> 00:00:44.167
所以我要这么做。
And so I'm just gonna do that.

15
00:00:44.167 --> 00:00:51.539
我直接去数据库看看 docspage 可以进去了。
I'm gonna go straight into
the data.docsPage, can go in.

16
00:00:52.770 --> 00:00:54.840
现在我们必须定义它。
And now we have to define that.

17
00:00:54.840 --> 00:00:57.950
但首先，让我们出口这个 DocsPage。
But first, let's export this DocsPage.

18
00:00:59.789 --> 00:01:02.869
我们得把这个医生页面弄出来。
Okay, so we're gonna need to
go get this this docs page.

19
00:01:02.869 --> 00:01:08.269
我要把它放在组件里，我们称之为文档页。 Js.
I'm gonna put it in components,
we'll call it docs-page.js.

20
00:01:08.269 --> 00:01:12.319
在这个里面，我们要从‘ react’进口 react。
And inside of this one,
we're going to import react from 'react'.

21
00:01:12.319 --> 00:01:15.189
我们将导入 MDXRenderer。
We will import the MDXRenderer.

22
00:01:16.329 --> 00:01:22.620
Mdxrenderer 实际上用于将其转换成可读的内容。
And the MDXRenderer is used to actually
make this into something readable.

23
00:01:22.620 --> 00:01:27.521
所以所有这些 MDX 生成的代码，我们希望能够使用它
So all of these code that MDX generates,
we wanna be able to use it and

24
00:01:27.521 --> 00:01:30.789
Mdxrenderer 为我们提供了这种可能。
the MDXRenderer makes that possible for
us.

25
00:01:33.180 --> 00:01:37.829
我还要调出我们用过的布局。
I'm also gonna pull in
the layout that we used.

26
00:01:37.829 --> 00:01:41.986
让我来开门。
So let me get that.

27
00:01:41.986 --> 00:01:46.454
然后，我们可以做一个 DocsPage 组件。
And then, we can do a DocsPage component.

28
00:01:49.679 --> 00:01:54.200
我们将把这个布局放在这里。
&gt;&gt; Jason Lengstorf: We will
then put this layout in here.

29
00:01:54.200 --> 00:01:58.703
1，Do page.title and then put in
Do an h1, do page.title and then put in

30
00:01:58.703 --> 00:02:04.718
2.1.1.1.1.2.1.2.1.2.1.2.2.1.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2
the MDXRenderer,
&gt;&gt; Jason Lengstorf: page.body

31
00:02:04.718 --> 00:02:05.930
进到里面。
goes inside of that.

32
00:02:07.049 --> 00:02:10.868
然后我们在底部放一张小纸条，上面写着这一页
And then we'll put a little note at
the bottom that says this page was

33
00:02:10.868 --> 00:02:15.163
更新，Jason Lengstorf: 每当更新
updated,
&gt;&gt; Jason Lengstorf: Whenever the updated

34
00:02:15.163 --> 00:02:15.691
价值是。
value is.

35
00:02:15.691 --> 00:02:19.310
再说一次，这是很简单的语言，所以我们可以直接把它放到句子里。
And again, it's plain language so we can
just drop it right into the sentence.

36
00:02:20.389 --> 00:02:23.650
所以我们要导出默认的 DocsPage。
So we're gonna export default DocsPage.

37
00:02:23.650 --> 00:02:28.603
然后我可以保存它，回到这里，让我们导入这个
And then I can save that,
come back here and let's import this so

38
00:02:28.603 --> 00:02:30.080
我们可以利用它。
that we can use it.

39
00:02:30.080 --> 00:02:37.373
从... / components / docs-page 导入 DocsPage。
import DocsPage from
.../components/ docs-page.

40
00:02:37.373 --> 00:02:39.860
现在，如果我停下来
And now, if I stop and

41
00:02:39.860 --> 00:02:45.210
重新启动，在我们停止和重新启动，我们需要实际使用这些模板。
restart, before we stop and restart,
we need to actually use these templates.

42
00:02:45.210 --> 00:02:52.699
所以我们已经定义了它们，但是现在我们需要运行 Create Page API 钩子。
So we've defined them but now we need
to run the Create Page API hook.

43
00:02:52.699 --> 00:02:57.420
回到我们的盖茨比节点，一直到底部。
So back in our Gatsby node,
all the way down at the bottom here.

44
00:02:57.420 --> 00:03:02.659
我们要用 exports.createPages。
We're going to use exports.createPages.

45
00:03:04.319 --> 00:03:06.639
因为我们要求提供数据,
And because we're gonna make a request for
data,

46
00:03:06.639 --> 00:03:08.610
我们把它标记为异步函数。
we're gonna mark this
as an async function.

47
00:03:11.419 --> 00:03:14.340
创建页面 API 给我们提供了一些东西。
And the create pages API
gives us a few things.

48
00:03:14.340 --> 00:03:18.532
第一个是一个 actions 对象，它给我们提供了一系列辅助函数。
The first is an actions object that
gives us a bunch of helper functions.

49
00:03:18.532 --> 00:03:22.189
一个 graphql 函数，允许我们获取一些数据。
A graphql function that'll
allow us to get some data.

50
00:03:22.189 --> 00:03:26.139
然后我们还有一个记者，如果我们想帮助把任何东西
And then we also have a reporter in case
we want to help put anything to the to

51
00:03:26.139 --> 00:03:26.924
控制台。
the console.

52
00:03:26.924 --> 00:03:31.682
第二个论点是主题中的选项。
And then the second argument is
gonna be the options from the theme.

53
00:03:31.682 --> 00:03:36.477
所以，詹森 · 兰斯托夫: 我们不是真的
So,
&gt;&gt; Jason Lengstorf: We're not really

54
00:03:36.477 --> 00:03:37.853
利用这些选项。
using the options.

55
00:03:37.853 --> 00:03:41.908
所以我想，杰森 · 兰斯托夫: 跳过这个。
So I'm gonna just,
&gt;&gt; Jason Lengstorf: Skip that actually.

56
00:03:44.008 --> 00:03:47.167
杰森 · 兰斯托夫: 我们会得到一个充满动作的对象,
&gt;&gt; Jason Lengstorf: So
we're gonna get an object full of actions,

57
00:03:47.167 --> 00:03:50.409
graphql 功能和记者功能。
the graphql function and
a reporter function.

58
00:03:51.840 --> 00:03:58.829
然后在内部，我们从获取数据开始，所以我们要做一个 graphql 查询。
And then inside, we start out by getting
our data, so we wanna do a graphql query.

59
00:03:58.829 --> 00:04:03.300
在 createPages 内部，graphql 是一个函数，而不是模板标记。
And inside the createPages,
graphql is a function, not a template tag.

60
00:04:03.300 --> 00:04:06.789
刚开始的时候，这有点让人捉摸不透。
That's a little bit of
a gotcha at the beginning.

61
00:04:07.909 --> 00:04:12.729
在里面，我要得到所有的 DocsPages，我想要所有的节点。
And inside, I'm gonna get all
the DocsPages and I want all the nodes.

62
00:04:12.729 --> 00:04:14.949
我在这里需要的就是身份和路径。
And all I need in here is the id and
the path.

63
00:04:14.949 --> 00:04:19.060
所以在这个上下文中，我要用来传递的 id。
So the id,
I'm gonna use to pass in this context.

64
00:04:19.060 --> 00:04:24.959
这个路径，我将用作 URL 的定义。
And the path,
I'm gonna use as definition for the URL.

65
00:04:27.139 --> 00:04:29.579
所以我们一直在等待这个结果。
So we've awaited that result.

66
00:04:29.579 --> 00:04:31.730
然后我们要做个快速检查看看有没有什么问题。
And then we're just gonna do a quick
check to see if anything wrong.

67
00:04:31.730 --> 00:04:35.970
因此，如果结果错误，我们将会恐慌。
So, if result.errors, we will panic.

68
00:04:37.310 --> 00:04:41.870
所以我要做记者恐慌我们会说装载文件时出错,
So I'll do reporter.panic and
we'll say error loading docs,

69
00:04:43.490 --> 00:04:46.579
然后把错误传过去。
and just pass in the errors.

70
00:04:48.819 --> 00:04:51.610
如果我们度过了这个难关，我们就可以假设一切正常。
If we get through that,
we can assume everything's okay.

71
00:04:51.610 --> 00:04:55.949
因此，只要抓住我们的网页，潜入我们的数据在这里。
So just grab out our pages by
diving into our data here.

72
00:04:55.949 --> 00:05:02.086
所以我们要做 result.data.allDocsPages.nodes。
So we'll do
result.data.allDocsPages.nodes.

73
00:05:02.086 --> 00:05:04.329
然后一旦我们得到了这些页面，我们就可以循环遍历它们。
And then once we've got those pages,
we can loop through them.

74
00:05:04.329 --> 00:05:08.370
所以我们要做一个 forEach，因为我们不返回任何东西。
So we'll do a forEach because
we're not returning anything.

75
00:05:08.370 --> 00:05:13.420
在 forEach 页面中，我们将运行一个名为 createPage 的操作。
And forEach page, we're going to
run an action called createPage.

76
00:05:13.420 --> 00:05:17.689
接受一个有两个必填字段的对象
And that accepts an object which
has two required fields and

77
00:05:17.689 --> 00:05:19.509
一个可选字段，我们要用到。
one optional field that we're gonna use.

78
00:05:19.509 --> 00:05:22.129
第一个必需的字段是 path。
The first required field is path.

79
00:05:22.129 --> 00:05:24.420
为此，我们将使用页面路径。
And for that,
we're gonna use the page path.

80
00:05:24.420 --> 00:05:29.350
这也是我们希望用基本路径定义的,
And that's again what we desire
defined using the base path,

81
00:05:29.350 --> 00:05:30.850
相对目录，然后是文件名。
the relative directory and
then the file name.

82
00:05:32.610 --> 00:05:35.600
接下来，我们需要给它一个组件
Next, we need to give it a component and

83
00:05:35.600 --> 00:05:38.970
这个分量就是我们刚才定义的模板。
that component is gonna be
the template that we just defined.

84
00:05:38.970 --> 00:05:44.110
因此，我们将做一个要求点解决，进入我们的源模板和
So we'll do a require dot resolve,
go into our source templates and

85
00:05:44.110 --> 00:05:46.149
文档页面模板。
the docs page template.

86
00:05:46.149 --> 00:05:48.550
最后，我们需要设定一些背景。
And finally we need to set some context.

87
00:05:48.550 --> 00:05:51.750
上下文是一个对象，这是任意的，我们可以放任何我们想要的东西。
And the context is an object, this is
arbitrary, we can put whatever we want.

88
00:05:51.750 --> 00:05:56.649
有一些保留的字段，但大多数情况下，应该没问题。
There are a few reserved fields but
for the most part, it should be okay.

89
00:05:58.060 --> 00:06:01.879
在上下文中，如果您使用保留字段，您将得到一个很大的警告。
In the context, you'll get a big
warning if you use a reserved field.

90
00:06:01.879 --> 00:06:05.829
所以在上下文中，我要通过这个 pageID
So in the context,
I'm gonna pass in this pageID and

91
00:06:05.829 --> 00:06:10.129
我希望那是 page.id。
I want that to be the page.id.

92
00:06:10.129 --> 00:06:15.120
不管我现在给它取什么名字，它都会变成一个 graphql 变量。
And whatever name I give it now, it will
become available as a graphql variable.

93
00:06:15.120 --> 00:06:19.120
我们在这里定义了 pageID。
So, we defined in here, pageID.

94
00:06:20.360 --> 00:06:24.300
因此，通过在上下文中定义 pageID，我们就能够访问它。
So by defining pageID in the context,
we're able to access it.

95
00:06:26.430 --> 00:06:31.740
现在，一旦我们做到了这一点，我们就，祈祷，准备摇滚起来。
Now once we've done this, we are,
fingers crossed, ready to rock and roll.

96
00:06:31.740 --> 00:06:33.579
那么，让我们来构建一些页面。
So let's build some pages.

97
00:06:37.009 --> 00:06:37.610
很有希望。
That's promising.

98
00:06:37.610 --> 00:06:38.590
我们得到了两页。
We're getting two pages.

99
00:06:39.939 --> 00:06:40.600
让我们来看看。
And let's give it a look.

100
00:06:42.139 --> 00:06:43.170
我们走吧。
Hey, there we go.

101
00:06:43.170 --> 00:06:45.800
现在，我们有了自己的主页。
So now, we've got our homepage.

102
00:06:45.800 --> 00:06:48.230
它显示 MDX 内容。
It shows the MDX content.

103
00:06:48.230 --> 00:06:52.000
它显示了我们的布局，也显示了页面更新的时间。
It shows our layout, and
it shows us when the page was updated.

104
00:06:52.000 --> 00:06:56.819
这意味着我们得到了数据,
So that means that we've
got data coming in,

105
00:06:56.819 --> 00:07:00.180
通过 Gatsby 的数据层进行定制，现在已经出现在屏幕上了。
getting customized through Gatsby's
data layer and now is on the screen.

106
00:07:00.180 --> 00:07:01.430
所以这是非常强大的，对吧？
So this is pretty powerful, right?

107
00:07:01.430 --> 00:07:03.279
我们现在状态很好。
We're in pretty good shape here.

108
00:07:03.279 --> 00:07:06.620
所以我们接下来要做的就是
So our next move here, is going to be

109
00:07:07.839 --> 00:07:12.079
让它看起来不那么可怕，并且更具可扩展性。
to make this look slightly less terrible
and in a way that's more extensible.

110
00:07:12.079 --> 00:07:13.480
怎么了？
What's up?

111
00:07:13.480 --> 00:07:14.920
演讲者2: 为什么印了两页？
&gt;&gt; Speaker 2: Why did
it put out two pages?

112
00:07:14.920 --> 00:07:17.759
我以为只有一个 MDX 文件。
I thought it was only the one MDX file.

113
00:07:17.759 --> 00:07:19.319
Jason Lengstorf: 所以，只有一个 MDX 文件,
&gt;&gt; Jason Lengstorf: So,
there's only the one MDX file,

114
00:07:19.319 --> 00:07:21.730
但是盖茨比总是会给你404页。
but Gatsby will always
give you a 404 page.

115
00:07:22.980 --> 00:07:25.610
所以，如果我们去一个页面，我没有禁用。
So, if we go to a page
that I haven't disabled.

116
00:07:25.610 --> 00:07:28.557
如果我们去一个不存在的页面，所以
If we go to a page that doesn't exist, so

117
00:07:28.557 --> 00:07:33.317
让我启动它，杰森 · 兰斯托夫: 它会的
let me boot this up,
&gt;&gt; Jason Lengstorf: It will

118
00:07:33.317 --> 00:07:36.590
还有这404页。
also give us this 404 page.

119
00:07:36.590 --> 00:07:39.649
这是第二个被引用的页面。
So this is the page that's being
referenced as the second one.

120
00:07:41.579 --> 00:07:44.970
这在开发过程中是一件非常好的事情，因为特别是如果
And that's a really nice thing to have
during development because especially if

121
00:07:44.970 --> 00:07:46.269
你还没有设置导航系统
you haven't set up your navigation or

122
00:07:46.269 --> 00:07:50.569
然而，你可以得到的点，你已经创建了一堆网页，但
something yet, you can get to the point
where you've created a bunch of pages but

123
00:07:50.569 --> 00:07:53.639
你还没有列出清单给他们看。
you haven't built the list
to show them all.

124
00:07:53.639 --> 00:07:54.959
这个会给你那个名单。
Well this will give you that list.

125
00:07:54.959 --> 00:07:58.990
所以这是一个很好的小方便的东西，当你仍然在进行和
So it's a nice little convenience thing
to have when you're still in progress and

126
00:07:58.990 --> 00:08:03.389
事情在不同的变化阶段，以确保你不会忘记链接
things are kinda in various stages of flux
to make sure that you don't forget to link

127
00:08:03.389 --> 00:08:04.160
某些页面。
to certain pages.

128
00:08:05.500 --> 00:08:08.160
演讲者2: 那么你是在导出页面查询,
&gt;&gt; Speaker 2: So
were you exporting the page queries,

129
00:08:08.160 --> 00:08:11.259
还需要导出到静态查询吗？
do you need that export to
static queries as well?

130
00:08:11.259 --> 00:08:12.019
杰森 · 兰斯托夫: 不，所以
&gt;&gt; Jason Lengstorf: No, so

131
00:08:12.019 --> 00:08:16.839
页面查询是我们向盖茨比表示的特殊情况
the the page query is our special case
where we are signifying to Gatsby

132
00:08:16.839 --> 00:08:21.410
在构建过程中，特别是在创建页面。
that during the build process
specifically during on create pages.

133
00:08:21.410 --> 00:08:25.670
这个模板将被使用，并且这个查询应该被视为一个页面查询,
This template is gonna be used, and this
query should be treated as a page query,

134
00:08:26.879 --> 00:08:31.178
这使得它可以访问上下文，就像变量之类的东西。
that gives it access to the context which
is the like the variables and stuff.

135
00:08:32.470 --> 00:08:34.679
在静态查询中。
In a static query.

136
00:08:34.679 --> 00:08:37.659
静态查询就是
A static query is just any use of

137
00:08:37.659 --> 00:08:41.279
组件内部的 usestatic 查询将被提取。
usestatic query inside of
a component will be picked up.

138
00:08:41.279 --> 00:08:44.490
但是这里的限制仍然是我们不能使用变量。
But again the limitation here
is that we can't use variables.

139
00:08:44.490 --> 00:08:46.870
我们无法了解外部环境。
There's is no access to outside context.

140
00:08:46.870 --> 00:08:50.659
我们甚至可以添加一个数据，我不能采取一个道具和
We can even interpolate a data,
I couldn't take a prop and

141
00:08:50.659 --> 00:08:52.539
那就把道具放在这里。
then put that prop in here.

142
00:08:52.539 --> 00:08:56.460
因此，静态查询需要在构建时进行硬编码。
So a static query needs to
be hard coded at build time.

143
00:08:56.460 --> 00:09:01.450
原因就在于盖茨比处理图层的方式
And the reason for that is that the way
that gatsby's handling the graphql layer

144
00:09:01.450 --> 00:09:05.870
在引擎盖下，一旦网站建成，graphql 层就不能继续工作了。
under the hood, that graphql layer doesn't
continue to work once the site is built.

145
00:09:05.870 --> 00:09:08.240
它只是在那里，在建造和
It's only there during the built and

146
00:09:08.240 --> 00:09:11.620
这意味着所有这些查询实际上都被编译走了。
that means that all of these queries
are actually getting compiled away.

147
00:09:11.620 --> 00:09:17.192
这些都是通过抽象语法树转换完成的。
And that's being done using abstract
syntax tree transformations.

148
00:09:17.192 --> 00:09:20.460
这就是巴别塔在引擎盖下的工作方式，它需要代码和
It's kinda how Babel works under the hood,
it takes the code and

149
00:09:20.460 --> 00:09:23.073
它把它分解成组成部分和标记。
it breaks it into its component pieces and
tokens.

150
00:09:23.073 --> 00:09:26.625
然后它可以理解这些作为一种编程语言。
And then it kind of understands
those as a programming language.

151
00:09:26.625 --> 00:09:29.721
然后对 AST 进行修改。
And then the AST gets modified.

152
00:09:29.721 --> 00:09:34.227
所以 Gatsby 将采用组件，寻找这些使用静态查询实例,
So Gatsby will take the component,
look for these use static query instances,

153
00:09:34.227 --> 00:09:38.395
将其分解为 AST，用查询结果替换它，然后
break that down into an AST, replace
it with the results of the query, and

154
00:09:38.395 --> 00:09:41.690
然后用适当的数据重写那个组件。
then rewrite that component
with the data in place.

155
00:09:41.690 --> 00:09:44.840
这就是为什么有限制的原因，因为当你进入
So that's why there are restrictions
on it because when you get into

156
00:09:44.840 --> 00:09:46.470
转换,
AST transformations,

157
00:09:46.470 --> 00:09:50.340
追踪一个变量到它被声明的地方是很有挑战性的。
trying to chase down a variable to where
it's declared is really challenging.

158
00:09:50.340 --> 00:09:54.179
这是团队正在努力解决的问题，但还没有到位。
That is something that the team is
working on but it is not in place yet.

159
00:09:54.179 --> 00:09:59.169
议长2: 他想知道我们是否只能输出一页的文件或者
&gt;&gt; Speaker 2: He wants to know if we can
export only one page brief on page file or

160
00:09:59.169 --> 00:10:01.419
可以导出多个查询。
you can export multiple queries.

161
00:10:01.419 --> 00:10:04.059
每个页面文件只能导出一个查询。
&gt;&gt; Jason Lengstorf: You can only
export one query per page file.

162
00:10:04.059 --> 00:10:06.831
但这实际上不是一个问题。
But that actually isn't a problem.

163
00:10:06.831 --> 00:10:12.875
因为您可以随心所欲地在每个查询之间添加任意多的查询。
Because you can just add as many
queries as you want next to each other.

164
00:10:12.875 --> 00:10:18.889
它就是 data.docspage data.allfile。
And it would just be
data.docspage data.allfile.

165
00:10:18.889 --> 00:10:20.860
所以你只能做一个查询，但是
So you can only do one query, but

166
00:10:20.860 --> 00:10:24.169
这个查询可以有任意多的子查询。
that query can have as many
sub queries in it as you want.
