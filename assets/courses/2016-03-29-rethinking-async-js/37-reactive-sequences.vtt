WEBVTT

1
00:00:00.025 --> 00:00:03.950
&gt；&gt；[音乐]
&gt;&gt; [MUSIC]

2
00:00:03.950 --> 00:00:07.910
&gt；&gt；Kyle Simpson：我确实说过RxJS非常标准化，它是
&gt;&gt; Kyle Simpson: I did say that RxJS is pretty well standardized it's

3
00:00:07.910 --> 00:00:08.949
A这真是个好主意。
a it's a really good idea.

4
00:00:08.949 --> 00:00:13.160
这可能是一种很好的感觉，我们最终会得到什么或者
It's probably a pretty good sense of what we're going to end up with or

5
00:00:13.160 --> 00:00:15.250
非常接近的东西。
something very close to it.

6
00:00:15.250 --> 00:00:16.978
如果我们在JavaScript中获得了观察值。
If we get observables in JavaScript.

7
00:00:18.910 --> 00:00:22.989
老实说，我已经尝试了很多次来学习RxJS。
I've tried a number of times to learn RxJS honestly I have.

8
00:00:25.339 --> 00:00:26.660
我从来没有足够的时间
I've never had enough time

9
00:00:27.809 --> 00:00:32.409
为了通过所有这些文档，我所经历过的培训课程。
to get through all of that documentation the training courses I've gone through.

10
00:00:32.409 --> 00:00:36.810
这需要很大的努力，相对而言，
It takes a lot of effort and, comparatively speaking,

11
00:00:36.810 --> 00:00:41.829
如果我试图分析我在程序中所做的基于异步事件的编码，
if I try to analyze the asynchronous event based coding that I do in my programs,

12
00:00:41.829 --> 00:00:46.060
实际上，有一小部分事情是我真正在共同的基础上做的。
there's actually kind of a small subset of things that I really do on a common basis.

13
00:00:47.770 --> 00:00:52.859
所以我突然想到，如果我已经非常熟悉使用异步
So it occurred to me that if I'm already pretty familiar with using asynquence for

14
00:00:52.859 --> 00:00:54.560
我的发电机和我的承诺
my generators and my promises,

15
00:00:54.560 --> 00:01:00.149
为什么不具有异步的反应式编程能力。
why not have reactive programming capabilities with an asynquence.

16
00:01:00.149 --> 00:01:02.950
这实际上非常适合，因为我已经在处理序列了。
That actually fits pretty well ,because I'm already dealing with sequences.

17
00:01:02.950 --> 00:01:06.927
这是我的抽象，所以我需要做的就是能够做出可重复的序列。
That's my abstraction, so all I need to do is be able to make repeatable sequences.

18
00:01:06.927 --> 00:01:11.149
然后它恰好与已经创建和创建的相同的抽象相适应
And then it fits right in with the same abstractions that have already created and

19
00:01:11.149 --> 00:01:13.819
我所拥有的所有相同的方法和实用程序，
all the same methods and utilities that I've got,

20
00:01:13.819 --> 00:01:16.609
他们也都在做反应。
they all work on reactive as well.

21
00:01:16.609 --> 00:01:19.299
所以我所做的就是将反应序列添加到文库中。
So what I did was add reactive sequences to the library.

22
00:01:20.640 --> 00:01:23.829
为了我们的目的，而不是我试图让你陷入学习
For our purposes, rather than me trying to get you bogged down into learning all

23
00:01:23.829 --> 00:01:28.870
RxJS的复杂性，我将向你们展示非常有效的反应序列，
the complexities of RxJS, I'm gonna show you reactive sequences which work very,

24
00:01:28.870 --> 00:01:32.750
非常类似于RxJS观测值。
very similarly to the RxJS observables.

25
00:01:32.750 --> 00:01:36.000
我实际上要向你展示，你可以透明地在两者之间穿梭。
And I'm actually gonna show you that you can transparently go between the two.

26
00:01:36.000 --> 00:01:40.879
所以，你可以采取反应序列，使RxJS可观察到，
So, you can take in a reactive sequence and make an RxJS observable and

27
00:01:40.879 --> 00:01:42.049
如果需要的话，反之亦然。
vice versa if you need to.

28
00:01:43.799 --> 00:01:48.740
但这就像，就像五个或
But this is just like, it's like the five or

29
00:01:48.740 --> 00:01:52.900
你需要在一个很小的实现中放入六个最常见的方法。
six most common ones you need put down and inside of a tiny little implementation.

30
00:01:52.900 --> 00:01:56.085
所以不需要带一个20万的图书馆，
So instead of having to bring in a 200k library,

31
00:01:56.085 --> 00:01:58.659
你只需花3k的异步时间就能得到这个。
you get this for like 3k in asynquence.

32
00:01:58.659 --> 00:02:03.010
所以这就是它想要做的所有事情
So that's really all it is trying to make it a little

33
00:02:03.010 --> 00:02:04.390
让你的大脑更容易缠绕。
little easier to wrap your brain around.

34
00:02:06.120 --> 00:02:10.532
所以我可以创建一个类似于fromEvent的实用程序，它看起来与
So I can make a utility like fromEvent which looks exactly like the one

35
00:02:10.532 --> 00:02:15.479
由采用Done元素的Observables提供，它采用事件名称并
provided by the observables that takes an done element takes an event name and

36
00:02:15.479 --> 00:02:16.468
它连接和
it attaches and

37
00:02:16.468 --> 00:02:21.896
这里我使用JQuery只是为了节省幻灯片上的空间，当然我们不使用JQuery。
here I'm using JQuery just to save room on the slides of course we don't use JQuery.

38
00:02:21.896 --> 00:02:25.818
[咳嗽]所以从通风口实用程序是我如何使一个可观察的和
[COUGH] So from a vent utility is how I make an observable and

39
00:02:25.818 --> 00:02:27.740
你看，我是在第8行做的。
you see I do that on line 8.

40
00:02:27.740 --> 00:02:31.680
现在我要叫我的，我用反应序列而不是可观察的
Now I'm gonna call mine I use the term reactive sequence instead of observable

41
00:02:31.680 --> 00:02:33.189
我是故意的。
I did that on purpose.

42
00:02:33.189 --> 00:02:35.729
因为它不是可观察到的
Because it's not an observable

43
00:02:37.079 --> 00:02:42.139
它与可观测的物体是同构的，它们可以来回移动。
it's isomorphic with observables they can go back and forth.

44
00:02:42.139 --> 00:02:46.170
但它不是一个可观察到的，它是我自己的小东西，它是一个小得多的简单
But it's not an observable it's my own little thing it's a much smaller simpler

45
00:02:46.170 --> 00:02:50.229
事情就是这样，而不是说它是可观察的，让人们抱怨
thing so rather than calling it an observable and having people complain

46
00:02:50.229 --> 00:02:54.650
它所做的事情与我们的RxJS观测值并不完全相同。
that it doesn't do exactly the same thing that our RxJS observables do.

47
00:02:54.650 --> 00:02:58.879
这是一个反应序列，但它显然非常相似。
It's a reactive sequence, but it's transparently very similar.

48
00:02:58.879 --> 00:03:00.219
这样你就可以来回走了。
So you can go back and forth.

49
00:03:00.219 --> 00:03:05.856
所以我把它叫做rsq，为了清楚起见，这是一个反应序列。
So I'm going to call it rsq, just to keep things clear, it's a reactive sequence.

50
00:03:05.856 --> 00:03:10.856
然后你会注意到我就像我一样开始用链子把它脱下来
And then you'll notice I just start chaining off of it exactly like I do

51
00:03:10.856 --> 00:03:12.590
任何其他的不同步。
any other asynquence.

52
00:03:12.590 --> 00:03:15.293
使用过的.flations和.thens和.seqs。
Used .vals and .thens and .seqs.

53
00:03:15.293 --> 00:03:19.858
我可以使用.runners，我可以使用提供给我的任何抽象
I can use .runners, I can use any of the abstractions provided to me

54
00:03:19.858 --> 00:03:24.360
由异步文库直接脱离反应序列。
by the asynchronous library directly off of a reactive sequence.

55
00:03:25.542 --> 00:03:30.000
在幕后，反应序列负责重复所有这些步骤
And under the covers the reactive sequence takes care of repeating all those steps

56
00:03:30.000 --> 00:03:31.969
每次都有新的数据流过，所以
every time a new piece of data flows through, so

57
00:03:31.969 --> 00:03:34.379
你不必担心整个重复的事情。
you don't have to worry about that whole repeating thing.

58
00:03:34.379 --> 00:03:36.949
它知道如何一遍又一遍地重复这个链条。
It figures out how to repeat the chain over, and over, and over again.

59
00:03:39.300 --> 00:03:42.848
你可以把反应序列想成序列模板。
You could sort of think about a reactive sequences like a sequence template.

60
00:03:44.030 --> 00:03:48.490
您声明序列模板看起来像异步序列将重复，
You declare what the sequence template looks like an asynquence will repeat,

61
00:03:48.490 --> 00:03:51.069
它将在每次需要时克隆并重复该模板。
it will clone and repeat that template every time it needs to.

62
00:03:56.319 --> 00:04:00.409
所以这是一种非常轻量级的开始使用Observable的方法
So that's a pretty lightweight way of getting started playing with observables

63
00:04:00.409 --> 00:04:02.219
你不需要什么大图书馆。
you don't need some big library.

64
00:04:02.219 --> 00:04:04.460
你只需要获取你已经拥有的知识，
You just take knowledge that you already have,

65
00:04:04.460 --> 00:04:07.699
一点点关于异步的知识，然后把它连接起来。
a little bit of a knowledge about asynquence, and hook it up.

66
00:04:07.699 --> 00:04:11.164
主要的是，正如你在2号线上看到的那样，
And the main thing, as you can see up there on line 2,

67
00:04:11.164 --> 00:04:15.324
我们创建反应序列的主要方式是ASQ.React。
the main way we create a reactive sequence is to say ASQ.react.

68
00:04:15.324 --> 00:04:17.980
这给了我们一个函数，我称之为继续。
And that gives us a function, which I call proceed.

69
00:04:17.980 --> 00:04:19.870
每次那个东西被调用，
And every time that thing is called,

70
00:04:19.870 --> 00:04:22.470
无论您传递给它的是沿链向下泵送的数据。
whatever you pass to it is data that gets pumped down the chain.

71
00:04:23.870 --> 00:04:25.060
这真的很简单。
It's really pretty straightforward.

72
00:04:29.069 --> 00:04:33.610
我想指出From Event的另一种实现方式
I want to point out an alternate implementation of that from event

73
00:04:33.610 --> 00:04:36.259
向你展示一种不同的思考反应序列的方式。
to show you a different way of thinking about a reactive sequence.

74
00:04:36.259 --> 00:04:42.380
在这里，我通过只说ASQ.react.of来制作一个空的反应序列
Here, I make an empty reactive sequence by just saying ASQ.react.of

75
00:04:42.380 --> 00:04:47.795
其中没有数据，这与RxJS使用的语法完全相同。
with no data in it that's exactly the same syntax as RxJS uses.

76
00:04:47.795 --> 00:04:52.286
它们有一个.of方法，您可以不向其中传递任何内容或向其中传递数据，因此
They have a .of method that you can pass nothing into it or pass data into it so

77
00:04:52.286 --> 00:04:54.120
完全一样。
it's exactly the same thing.

78
00:04:55.389 --> 00:04:59.840
但是您注意到，我在第3行引用了一个push方法。
But you notice that I have a push method that I'm referencing on line 3.

79
00:04:59.840 --> 00:05:03.129
因此您可以手动将数据泵入您的反应序列
So you can manually pump data into your reactive sequences

80
00:05:04.319 --> 00:05:05.350
这就是我在这里做的。
which is what I'm doing here.

81
00:05:05.350 --> 00:05:08.819
我正在使事件绑定手动抽出数据，它
I'm making the event binding manually pump data and it's

82
00:05:08.819 --> 00:05:12.370
将完成与另一边的代码完全相同的事情，但它显示
gonna accomplish exactly the same thing as the code on the other side but it shows

83
00:05:12.370 --> 00:05:16.060
反应序列是指如果你愿意，你可以将数据泵入其中的东西。
you the reactive sequences are things that you can pump data into if you want to.

84
00:05:16.060 --> 00:05:19.199
实际上，我最终使用了相当多的东西。
I actually end up using that quite a bit.

85
00:05:27.189 --> 00:05:29.430
这里有一个简单的例子。
So here's a quick example.

86
00:05:29.430 --> 00:05:32.978
我在第1行创建了一个名为RSQ1的空序列，然后
I make an empty sequence up on line 1 called rsq1, and

87
00:05:32.978 --> 00:05:36.990
我制作了另一个名为rsq2的文件，我在其中预置了一些数据，
I make another one called rsq2, which I preset some data in,

88
00:05:36.990 --> 00:05:42.182
我预抽了三个数据，三个数字，1，2，3。
I pre-pumped some data in three pieces of data, three numbers, 1, 2, 3.

89
00:05:42.182 --> 00:05:44.930
然后我给自己安排了一段时间。
And then I set myself up with an interval.

90
00:05:44.930 --> 00:05:45.959
所以我打算
So I'm just going to,

91
00:05:45.959 --> 00:05:49.579
每500毫秒向下推送一些更多的数据。
every 500 milliseconds push some more data down that stream.

92
00:05:49.579 --> 00:05:52.290
每一条流，我都会往下推一些数字。
Each one of those streams, I'm gonna push some numbers down.

93
00:05:52.290 --> 00:05:55.370
所以这些是从6和7行的10和11开始的，值10和
So those are starting out at 10 and 11 there on line 6 and 7, the values 10 and

94
00:05:55.370 --> 00:05:57.159
11随着它们的增加。
11 as they increment.

95
00:05:58.250 --> 00:06:01.069
在我的计划的其他地方，我将订阅这两个
Elsewhere in my program I'm going to subscribe to those two

96
00:06:01.069 --> 00:06:02.899
观察到这两个反应序列。
observables those two reactive sequences.

97
00:06:04.029 --> 00:06:08.819
第十行我订阅了RSQ1，然后打印出我在那里得到的任何内容
Line ten I subscribe to rsq1 and I print out whatever I'm getting there and

98
00:06:08.819 --> 00:06:12.290
您会注意到，如果您在那里跟随流程，因为RSQ1没有任何数据
you notice if you follow the flow there because rsq1 didn't have any data

99
00:06:12.290 --> 00:06:15.220
流中得到的第一个数据片段是值10。
the first piece of data gets down the stream is the value ten.

100
00:06:16.290 --> 00:06:20.089
然后500毫秒后，它得到值12，然后是值14。
And then 500 milliseconds later, it gets the value 12, and then the value 14.

101
00:06:20.089 --> 00:06:25.060
那么rsq2呢？它在流中已经有三个数据段了。
What about rsq2 it already had three pieces of data in the stream.

102
00:06:25.060 --> 00:06:29.250
所以1，2和3马上就会出来，就像我们在第18行看到的那样。
So the 1, 2 and 3 are gonna come out right away as we see on line 18.

103
00:06:29.250 --> 00:06:32.449
然后我们将开始每500毫秒获得值11，13，
And then we're gonna start every 500 milliseconds getting the values 11, 13,

104
00:06:32.449 --> 00:06:33.199
15等等。
15 and so forth.

105
00:06:35.819 --> 00:06:38.009
所以这些就是我们可以将数据注入其中的流
So these are just streams we can pump data into them and

106
00:06:38.009 --> 00:06:40.389
在另一端获取数据，仅此而已。
get data out on the other end that's all.

107
00:06:40.389 --> 00:06:42.266
这就是理解这里发生的一切。
That's all it takes to understand what's happening here.

108
00:06:51.298 --> 00:06:53.052
&gt；&gt；Kyle Simpson：因为这些只是
&gt;&gt; Kyle Simpson: Because these are just

109
00:06:53.052 --> 00:06:59.860
流，我们可以定义更高级别的操作，流操作。
streams, we can define higher level operations, the stream operations.

110
00:06:59.860 --> 00:07:02.490
这可能是我要教你的最重要的事情
This is maybe the most important thing that I'm going to teach you about all of

111
00:07:02.490 --> 00:07:04.240
反应式编程。
reactive programming.

112
00:07:04.240 --> 00:07:07.550
这才是真正解锁反应式编程的魔力。
This is what really unlocks the magic of reactive programming.

113
00:07:07.550 --> 00:07:11.189
如果您将它们视为流，我们可以定义某些操作
If you think about them as streams, we can define certain operations for

114
00:07:11.189 --> 00:07:13.170
将流组合在一起。
composing streams together.

115
00:07:13.170 --> 00:07:16.271
这里我有两个不同的流，我有一个rsq1和rsq2。
So here I have two different streams, I have an rsq1 and rsq2.

116
00:07:16.271 --> 00:07:18.449
它们都来自不同的DOM事件。
They're both coming from different DOM events.

117
00:07:18.449 --> 00:07:19.879
其中之一是点击按钮
One of them is clicks on a button and

118
00:07:19.879 --> 00:07:23.199
其中之一是输入框中的按键，好吗？
one of them is key presses in an input box, okay?

119
00:07:23.199 --> 00:07:25.199
我们可以单独订阅这些
We could individually subscribe to those and

120
00:07:25.199 --> 00:07:27.360
当这些事件中的任何一个发生时，都会得到通知。
be notified when any one of those events happen.

121
00:07:27.360 --> 00:07:31.949
但是如果我想听一种合成的事件流，告诉我
But what if I wanted to listen to a sort of synthetic event stream that told me

122
00:07:31.949 --> 00:07:34.680
当这两件事同时发生的时候？
whenever those two things happened at exactly the same time?

123
00:07:37.040 --> 00:07:40.959
我可以听一下.all操作员。
I could listen for the .all operator.

124
00:07:40.959 --> 00:07:45.720
这是一个流运算符，它说我只会在rsq3上激发一个事件。
That's a stream operator that says I'm only gonna fire an event on rsq3.

125
00:07:45.720 --> 00:07:49.459
每当我有来自所有输入流的事件时。
Whenever I have an event from all of my input streams.

126
00:07:50.600 --> 00:07:54.840
所以如果按键是先发生的，我会等到按钮被点击，
So if the key press happens first, I'm gonna wait until I get the button click,

127
00:07:54.840 --> 00:07:58.100
现在我有了这两个事件，我将把这两个事件放在一起
and now that I have these two events I'm gonna put those two together and

128
00:07:58.100 --> 00:08:00.279
在rsq3流上激发它们。
fire them out on the rsq3 stream.

129
00:08:00.279 --> 00:08:03.069
所以我创建了一个合成事件流
So I've created a synthetic event stream

130
00:08:03.069 --> 00:08:05.750
基于两个较低级别流的组合。
based on the composition of two lower level streams.

131
00:08:06.970 --> 00:08:12.564
这就是.all，顺便说一下，在RxJS术语中，.all被称为.zip，所以
That's .all, and by the way in RxJS terminology .all is called .zip so

132
00:08:12.564 --> 00:08:14.379
在RxJS他们有一个拉链。
in RxJS they have a zip.

133
00:08:15.720 --> 00:08:20.687
有一个别名，如果你喜欢RxJS术语，你可以在这里使用点zip，我只是，
There's an alias if you like the RxJS terms, you can use dot zip here, I just,

134
00:08:20.687 --> 00:08:22.812
ZIP对我来说很奇怪，所以我用.all。
zip is weird to me so I used .all.

135
00:08:22.812 --> 00:08:27.466
在RxJS中还有一个叫做Merge的，我把它叫做。Any，意思是，
And there's another one called merge in RxJS, which I called .any that says,

136
00:08:27.466 --> 00:08:29.898
我有两个或更多的流入流
I've got two or more incoming streams and

137
00:08:29.898 --> 00:08:34.179
我想在任何时候从他们那里得到任何东西都可以触发一个事件。
I want to fire an event any time I get anything from any of them.

138
00:08:34.179 --> 00:08:37.788
所以只要我从任何一条流中找到一条就把他赶出去
So just fire him out as quick as soon as I get one from any stream fired it back out

139
00:08:37.788 --> 00:08:38.480
顺流而下。
down the stream.

140
00:08:38.480 --> 00:08:41.809
这被称为弧机会世界中的合并。
And that's called the merge in the arcs chance world.

141
00:08:43.559 --> 00:08:47.220
如果你想回去看看，这是Rx弹珠。
Here's the Rx marbles if you want to go back and look.

142
00:08:47.220 --> 00:08:53.370
所以zip是流操作的RxJS术语。
So zip is the RxJS terminology for that stream operation.

143
00:08:53.370 --> 00:08:56.100
你可以看到一个从一条小溪中出来
And you can see that one comes out on one stream and

144
00:08:56.100 --> 00:08:58.418
A一出现就来了另一个。
A comes in another as soon as A shows up.

145
00:08:59.570 --> 00:09:05.259
在名为1A的输出流上激发一个事件，其中包含数据1A，并且
An event is fired on the output stream called 1 A with the data 1 A in it and

146
00:09:05.259 --> 00:09:08.190
然后当2和B出现时，然后2B出去。
then when 2 and B show up then 2 B goes out.

147
00:09:08.190 --> 00:09:11.840
C和D走到了一起，但我们仍在等待3和
C and D come together but we're still waiting on a 3 and

148
00:09:11.840 --> 00:09:14.340
然后我们得到3C和4D。
then we get 3 C and 4 D.

149
00:09:17.600 --> 00:09:22.450
所以向下的复合流有一个更高阶流
So that composite stream down there is a higher order stream to

150
00:09:22.450 --> 00:09:26.019
定义为两个或多个输入流的组合。
defined as a composition of two or more input streams.

151
00:09:27.269 --> 00:09:30.440
这是您可以学习的最强大的技术之一。
This is one of the most powerful techniques that you can learn.

152
00:09:30.440 --> 00:09:33.710
了解如何对流经应用程序的数据进行建模或
Is understanding how to model the data that's flowing through your app or

153
00:09:33.710 --> 00:09:36.539
操作，你的申请。
operation, your application.

154
00:09:36.539 --> 00:09:38.190
作为一系列流操作
As a series of stream operations

155
00:09:42.879 --> 00:09:47.009
如果不练习我所说的，它会感觉非常深奥
without practicing what I'm saying it's going to feel very esoteric and

156
00:09:47.009 --> 00:09:49.240
我们对你来说是我理解的。
we are to you I understand that.

157
00:09:49.240 --> 00:09:53.340
但我向你保证，如果你开始练习定向你的应用程序
But I promise you if you start practicing orienting your application around

158
00:09:53.340 --> 00:09:57.070
异步事件并使用这些高阶流操作。
asynchronous events and using these higher order stream operations.

159
00:09:57.070 --> 00:09:59.129
这就像生活中的另一组灯泡熄灭了。
It's like another set of light bulbs go off in life.

160
00:09:59.129 --> 00:10:00.850
哇，我是怎么得到一切的？
Wow, how did I ever get all?

161
00:10:00.850 --> 00:10:04.500
我怎么才能不使用它作为我的数据流建模方法呢？
How do I ever get around not using that as my way of modeling data flow?

162
00:10:06.909 --> 00:10:10.830
所以人们对此非常兴奋
So it's right that people are super excited about this

163
00:10:10.830 --> 00:10:12.320
反应式编程。
reactive programming thing.

164
00:10:12.320 --> 00:10:15.690
它将彻底改变我们一直以来的一大堆糟糕的事情
It's gonna completely change a whole bunch of really crappy stuff that we've been

165
00:10:15.690 --> 00:10:16.529
做了很长一段时间。
doing for a long time.

166
00:10:17.700 --> 00:10:22.330
Freddy Mausers的其他工作坊喜欢Jeff的工作坊，非常棒的工作坊。
The other workshops from Freddy Mausers like Jeff's workshop, fantastic workshop.

167
00:10:22.330 --> 00:10:23.830
都在观察点上。
It's all in on observables.

168
00:10:23.830 --> 00:10:26.629
它一直都是可观察的，而且很棒。
It's all observables all the time and it's great.

169
00:10:26.629 --> 00:10:28.519
Netflix正在使用它，微软正在使用它
Netflix is using it, Microsoft's using it,

170
00:10:28.519 --> 00:10:31.559
每个人都很喜欢这个可观察的东西。
everybody's really in on this observables thing.

171
00:10:31.559 --> 00:10:33.870
所以我认为我们应该给予它一些关注。
So I think we should we owe it some attention.

172
00:10:33.870 --> 00:10:36.100
我们应该把注意力放在学习和看到这一点上。
We owe it our attention to kind of learn that and see that.

173
00:10:36.100 --> 00:10:40.298
我认为如果承诺和生成器代表基线，那就是
I think if promises and generators represent the baseline, the thing that's

174
00:10:40.298 --> 00:10:44.379
即将出现的是每个人都在使用的可观察到的东西。
right over the horizon is observables are gonna be what everybody is using.

175
00:10:44.379 --> 00:10:46.734
这并不意味着承诺会消失，但是
It doesn't mean that promises are gonna go away but

176
00:10:46.734 --> 00:10:50.480
这意味着，在我们的工具带中，观察表将成为一个非常强大的工具。
it means that observables are going to be a really powerful tool in our tool belt.
