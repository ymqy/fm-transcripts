WEBVTT

1
00:00:00.000 --> 00:00:03.968
[音乐]
[MUSIC]

2
00:00:03.968 --> 00:00:09.869
&gt；&gt；Kyle Simpson：生成器是ES6中引入的一种新的奇异形式的函数。
&gt;&gt; Kyle Simpson: A generator is a new exotic form of function introduced in ES6.

3
00:00:09.869 --> 00:00:14.529
我们先来看看实际的机制，
And we're going to look at the actual mechanism first,

4
00:00:14.529 --> 00:00:17.649
了解它的一些工作原理和诸如此类的事情。
understanding some of how it works and that kind of thing.

5
00:00:17.649 --> 00:00:21.140
一开始当我们看到它的时候，它不会
And at first as we're looking at it, it's not gonna

6
00:00:21.140 --> 00:00:24.629
看起来这与异步编程有任何关系。
look like this has anything at all to do with asynchronous programming.

7
00:00:24.629 --> 00:00:27.579
这看起来会有点奇怪和不合时宜。
It's going to seem a bit strange and out of place.

8
00:00:27.579 --> 00:00:29.571
我保证我们经历这一切是有原因的。
I promise there's a reason why we're going through it.

9
00:00:29.571 --> 00:00:34.310
这是整个图景的基本部分。
This is a fundamental part of the whole picture.

10
00:00:34.310 --> 00:00:38.484
如果承诺是关于解决回调中的控制反转问题
If promises were about solving the inversion of control issue in callback

11
00:00:38.484 --> 00:00:41.570
见鬼，发电机是用来解决非本地的，
hell, generators are about solving the non-local,

12
00:00:41.570 --> 00:00:43.854
非顺序合理性问题。
non-sequential reasonability problem.

13
00:00:44.899 --> 00:00:48.140
所以他们会为我们提供一个非常强大的模式。
So they are gonna provide us a really powerful pattern for that.

14
00:00:48.140 --> 00:00:51.182
但我们需要理解，我们需要穿过管道
But we need to understand, we need to kinda walk through the plumbing of

15
00:00:51.182 --> 00:00:53.070
来了解它是如何工作的。
the stuff to understand how it's working.

16
00:00:54.890 --> 00:00:58.979
你可能从来没有意识到的一件事
One of the things that you may not have ever realized about

17
00:00:58.979 --> 00:01:01.619
你对JavaScript的假设。
your assumptions with JavaScript.

18
00:01:01.619 --> 00:01:06.629
所有的函数，所有的正常函数都有它们的特征
Is that all functions, all normal functions have a characteristic of them

19
00:01:06.629 --> 00:01:11.590
其奇特的说法是，它们具有run-to-complete语义。
which the fancy way of saying it is that they have a run-to-completion semantic.

20
00:01:11.590 --> 00:01:14.719
这意味着当函数开始运行时，
What that means is that when a function starts running,

21
00:01:14.719 --> 00:01:17.659
它将始终运行到该函数的末尾，并且
it will always run to the end of that function and

22
00:01:17.659 --> 00:01:22.579
在任何其他功能有机会进入并开始运行之前完成。
finish before any other function has an opportunity to come in and start running.

23
00:01:22.579 --> 00:01:25.370
在任何给定的时刻，只有一个函数在积极执行。
At any given moment, only one function is actively executing.

24
00:01:25.370 --> 00:01:27.734
这并不意味着它不能调用其他函数。
And that doesn't mean it can't call to other functions.

25
00:01:27.734 --> 00:01:29.942
但这意味着没有人可以进来
But it means that nobody can come in and

26
00:01:29.942 --> 00:01:33.756
预先中断此函数以运行其他功能。
pre-emptively interrupt this function to run something else.

27
00:01:33.756 --> 00:01:36.590
它是Run-to-Complete语义。
It's a run-to-completion semantic.

28
00:01:36.590 --> 00:01:39.409
这在本质上可能看起来很学术性，但是
And that may seem very academic in nature, but

29
00:01:39.409 --> 00:01:42.829
这实际上是JavaScript最重要的特征之一。
it's actually one of the most important characteristics of JavaScript.

30
00:01:42.829 --> 00:01:46.479
它允许我们以单线程的方式对事物进行推理。
It's what allows us to reason about things in a single threaded fashion.

31
00:01:46.479 --> 00:01:50.740
不用担心两个功能，一个中断另一个
Never having to worry about two functions, one interrupting the other one and

32
00:01:50.740 --> 00:01:54.900
以我们无法理解的方式破坏我们的共享记忆。
corrupting our shared memory in ways that we don't understand.

33
00:01:54.900 --> 00:01:57.259
在线程编程中必须处理的所有问题都得到了
All the problems that you have to deal with in threaded programming get

34
00:01:57.259 --> 00:02:01.930
当你没有Run-to-Complete语义时引入，好吗？
introduced when you don't have that run-to-completion semantic, okay?

35
00:02:01.930 --> 00:02:04.750
所以这是我们建造的最基本的东西之一
So it's one of the most fundamental things that we've built all of

36
00:02:04.750 --> 00:02:08.419
我们对JavaScript的理解结束了。
our understanding on JavaScript over.

37
00:02:08.419 --> 00:02:13.263
所以当我告诉你发电机时，可能会在这里引起一些警告
So that might raise a few warning flags in here when I tell you generators

38
00:02:13.263 --> 00:02:16.420
没有Run-to-Complete语义。
do not have a run-to-completion semantic.

39
00:02:17.759 --> 00:02:19.800
它们是一种完全不同的功能。
They're a different kind of function altogether.

40
00:02:19.800 --> 00:02:21.340
这是一种非常不同的野兽。
It's a very different kind of beast.

41
00:02:22.734 --> 00:02:27.009
现在，这并不是为了在你的程序中引入混乱而设计的。
Now that's not designed to introduce chaos into your program.

42
00:02:27.009 --> 00:02:30.500
它的设计目的是引入一种行为，我们
It's designed to introduce a behavior that we

43
00:02:31.610 --> 00:02:35.620
以前不得不去做大量的工作来模拟。
previously had to go to a lot of work to simulate.

44
00:02:35.620 --> 00:02:39.960
所以，如果你愿意，它在我们的行为之上添加了一种句法糖分
So it's adding a syntactic sugar, if you will, on top of a behavior that we would

45
00:02:39.960 --> 00:02:46.150
不得不花费相当多的时间和精力去尝试模仿，好吗？
have had to spend quite a bit of time and effort to try to emulate, okay?

46
00:02:46.150 --> 00:02:51.520
所以，我们尝试用生成器的语法创建的东西，
So, the thing that we are attempting to create with the syntax of a generator,

47
00:02:51.520 --> 00:02:53.310
顺便说一下，JavaScript没有发明生成器，
by the way JavaScript didn't invent generators,

48
00:02:53.310 --> 00:02:55.030
它们来自其他语言，如Python。
they come from other languages like Python.

49
00:02:55.030 --> 00:02:58.780
但是我们试图用JavaScript生成器创建的东西，
But the thing that we're trying to create with the JavaScript generator,

50
00:02:59.810 --> 00:03:03.710
是声明状态机的语法形式。
is a syntactic form of declaring a state machine.

51
00:03:05.150 --> 00:03:09.729
对于那些没有意识到的人来说，状态机是一种具有模式的方式
State machines are, for those of you that aren't aware, a way of having a patterned

52
00:03:09.729 --> 00:03:14.360
从一种状态到另一种状态的一系列流动。
series of flow from one state to another state to another state.

53
00:03:14.360 --> 00:03:19.069
并声明性地列出所有那些状态和那些转换输出。
And declaratively listing all those states and those transitions out.

54
00:03:20.259 --> 00:03:23.219
所以我们可以在没有生成器的情况下实现状态机。
So we can implement state machines without generators.

55
00:03:23.219 --> 00:03:25.520
我已经做过很多次了。
And I've done that many times.

56
00:03:25.520 --> 00:03:27.900
你们中的一些人可能已经实现了自己的状态机。
Some of you may have implemented your own state machines.

57
00:03:27.900 --> 00:03:31.680
但是你必须去做大量的工作，而且你最终不得不使用闭包
But you have to go to a lot of work, and you have to end up using closure

58
00:03:31.680 --> 00:03:36.420
围绕一个函数，以便在反复调用时记住状态。
around a function to remember the state as it gets recalled over and over again.

59
00:03:36.420 --> 00:03:39.099
每次它被召回时，它都会记得它以前的状态，而且
And each time it's recalled it remembers its previous state, and

60
00:03:39.099 --> 00:03:40.050
它会进行这种转变。
it does this transition.

61
00:03:40.050 --> 00:03:44.569
所以这是可能的，但难度更大，而且发生了什么还不太清楚。
So it's possible but it's harder, and it's a lot less clear what's going on.

62
00:03:44.569 --> 00:03:48.099
生成器是状态机的语法形式。
A generator is a syntactic form of a state machine.

63
00:03:49.379 --> 00:03:50.159
虽然那不会
And while that won't

64
00:03:50.159 --> 00:03:52.550
似乎这与异步编程有关。
seem like that has anything to do with asynchronous programming.

65
00:03:52.550 --> 00:03:55.789
它实际上是一把神奇的钥匙，可以打开我们的一个
It's actually a magical key that will unlock one of our

66
00:03:55.789 --> 00:03:58.370
我们要追求的非常重要的特征。
really important characteristics that we're going for.

67
00:03:58.370 --> 00:04:02.810
所以为了达到这一点，我们想从发电机的最开始看。
So to get there, we wanna start looking right at the very beginning at generators.

68
00:04:02.810 --> 00:04:06.030
我们将要看到的是，有一个新的特殊关键字叫做产量。
And what we're gonna see is that there's this new special keyword called yield.

69
00:04:07.139 --> 00:04:11.812
YOURE关键字有点像老式VCR上的暂停按钮。
The yield keyword is kind of like the Pause button on an old school VCR.

70
00:04:11.812 --> 00:04:16.576
你正在看一部电影，你点击暂停按钮，字面上的暂停
You're watching a movie and you click the Pause button, literally pauses

71
00:04:16.576 --> 00:04:21.502
就在中帧，没有什么变化，你可以等很长时间，你想等多久就等多久。
right in mid-frame, nothing changes and you can wait as long as you want to.

72
00:04:21.502 --> 00:04:24.579
然后你可以稍后过来，按下播放按钮并继续。
And then you can come along later and press the Play button and resume.

73
00:04:25.730 --> 00:04:29.170
所以你可以把生成器看作是一个可暂停的函数。
So you can think of a generator as a pausable function.

74
00:04:30.180 --> 00:04:33.930
一个函数，当它运行时，会遇到一个YERUND关键字，并且
A function that when it's running, would run across a yield keyword and

75
00:04:33.930 --> 00:04:37.750
在那一刻，只要产量关键字出现，
at that moment, where ever the yield keyword shows up,

76
00:04:37.750 --> 00:04:39.769
即使是在表达的中间。
even right in the middle of an expression.

77
00:04:41.129 --> 00:04:44.470
一切都真的冻结了，它暂停了。
Everything just literally freezes, it pauses.

78
00:04:44.470 --> 00:04:47.860
并且生成器进入这个暂停状态。
And the generator enters this paused state.

79
00:04:47.860 --> 00:04:53.500
它将无限期地等待暂停状态，直到其他参与者
And it will wait for that pause state indefinitely until some other actor

80
00:04:53.500 --> 00:04:57.740
走过来说是时候继续了，然后他们又按了播放按钮。
comes along and says it's time to resume, and they press the Play button again.

81
00:04:57.740 --> 00:05:00.839
所以你可以把一个生成器想象成一个函数，它可以暂停并
So you can think about a generator as a function that can pause and

82
00:05:00.839 --> 00:05:04.439
恢复，暂停和恢复，需要多少次都可以。
resume, pause and resume, as many times as necessary.

83
00:05:06.300 --> 00:05:08.480
当发电机暂停时，
While a generator is paused,

84
00:05:08.480 --> 00:05:12.920
在发电机的内部，所有东西都被完全阻塞了。
on the inside of the generator, everything is completely blocked.

85
00:05:12.920 --> 00:05:14.600
什么都没发生。
Nothing is happening.

86
00:05:14.600 --> 00:05:17.439
但这并没有阻碍整个计划。
But that's not blocking the overall program.

87
00:05:17.439 --> 00:05:19.360
这是局部阻挡。
It's a localized blocking.

88
00:05:19.360 --> 00:05:21.350
只在发电机内部。
Only inside of the generator.

89
00:05:21.350 --> 00:05:24.300
这是一个非常关键的问题，所以即使我将要向你们展示的将
That's a really key issue, so even though what I'm about to show you will

90
00:05:24.300 --> 00:05:29.110
看起来我们正在创建一种阻塞的东西，它是非常本地化的。
look like we're creating a blocking sort of a thing, it's extremely localized.

91
00:05:29.110 --> 00:05:30.899
它没有阻止整个程序。
It's not blocking the entire program.

92
00:05:32.199 --> 00:05:33.860
这里有一个发电机的例子。
So, here's an example of a generator.

93
00:05:33.860 --> 00:05:38.449
你注意到在第1行，我们有一个小星星符号，因为我们需要
You notice on line 1, we have that little star symbol there because we need to

94
00:05:38.449 --> 00:05:42.959
向其引入具有不同行为集的不同类型的函数。
introduce a different kind of function with a different set of behavior to it.

95
00:05:42.959 --> 00:05:45.199
所以需要有一个引擎的语法线索。
So there needs to be a syntactic clue to the engine.

96
00:05:45.199 --> 00:05:47.409
这是一种不同的东西。
This is a different sort of a thing.

97
00:05:47.409 --> 00:05:51.829
所以它的函数*，这就是我们如何表示它是一个生成器。
So its function*, that's how we indicate that it's a generator.

98
00:05:51.829 --> 00:05:54.663
[咳嗽]你会注意到第3行，我们在那里有产量关键字。
[COUGH] You'll notice on line 3 that we have the yield keyword there.

99
00:05:54.663 --> 00:05:58.620
而放弃的关键字是暂停按钮。
And that yield keyword is the pause button.

100
00:05:58.620 --> 00:06:03.420
所以就像发电机决定什么时候暂停一样。
So it's like the generator gets to decide when it wants to pause.

101
00:06:03.420 --> 00:06:06.620
外面没有人可以告诉发电机什么时候暂停，所以
Nobody on the outside gets to tell the generator when to pause, so

102
00:06:06.620 --> 00:06:09.949
它不能被先发制人地打断。
it cannot be pre-emptively interrupted.

103
00:06:11.160 --> 00:06:15.100
这就是我们所说的合作并发，
This is what we call cooperative concurrency,

104
00:06:15.100 --> 00:06:17.939
而不是先发制人的并发。
rather than preemptive concurrency.

105
00:06:17.939 --> 00:06:20.290
所以先发制人意味着外面有人，
So preemptive means somebody else on the outside,

106
00:06:20.290 --> 00:06:24.139
在任何给定的时刻，一些外部力量都会进来打断你。
some outside force can come in and interrupt you at any given moment.

107
00:06:24.139 --> 00:06:28.100
这就是导致线程语言混乱和破坏的原因。
That's the thing that causes chaos and havoc in threaded languages.

108
00:06:28.100 --> 00:06:28.649
我们没有那个。
We don't have that.

109
00:06:28.649 --> 00:06:32.425
我们拥有的是生成器通过调用来决定
What we have is that the generator gets to decide by virtue of calling

110
00:06:32.425 --> 00:06:36.379
YOVER关键字，何时何地以及以什么方式它想要放弃自己，
a yield keyword, when and where and in what manner it wants to yield itself,

111
00:06:36.379 --> 00:06:38.699
当它想要暂停自己的时候。
when it wants to pause itself.

112
00:06:38.699 --> 00:06:41.250
现在，发电机的另一个不同之处在于
Now, another thing that's different about a generator from

113
00:06:41.250 --> 00:06:43.235
审美用法视角。
the esthetic usage perspective.

114
00:06:43.235 --> 00:06:45.000
在第7行，当我给gen打电话时，
On line 7, when I call gen,

115
00:06:45.000 --> 00:06:48.090
我调用的通常看起来像是执行一个函数。
I'm calling what normally looks like just executing a function.

116
00:06:48.090 --> 00:06:52.207
我们通常希望它执行整个过程，但是
And we typically would expect for it to execute the whole thing, but

117
00:06:52.207 --> 00:06:55.324
实际上，在这一点上没有一个发电机运行。
actually none of the generator runs at that point.

118
00:06:55.324 --> 00:06:59.471
执行生成器实际上并不运行其任何代码，
Executing a generator does not actually run any of its code,

119
00:06:59.471 --> 00:07:01.839
相反，它生成一个迭代器。
instead it produces an iterator.

120
00:07:04.471 --> 00:07:06.331
&gt；&gt；Kyle Simpson：希望你们中的一些人听说过迭代器。
&gt;&gt; Kyle Simpson: Some of you hopefully have heard about iterators.

121
00:07:06.331 --> 00:07:08.824
迭代器是单步执行的模式化方式，
Iterators are a patterned way of stepping through,

122
00:07:08.824 --> 00:07:11.569
通常单步执行一组数据。
typically stepping through a set of data.

123
00:07:11.569 --> 00:07:13.911
例如，来自数据库查询的结果，
For example, the results from a database query,

124
00:07:13.911 --> 00:07:16.214
您将逐个通过它们，一次只有一个结果。
you would step through them one result at a time.

125
00:07:16.214 --> 00:07:18.600
你会打电话给.Next，.Next，和
You'd call .next, .next, .next, and

126
00:07:18.600 --> 00:07:22.959
不断从列表中获取值结果，直到没有结果返回。
keep getting value results from a list until there were no results to come back.

127
00:07:22.959 --> 00:07:25.089
这是迭代器模式。
That's the iterator pattern.

128
00:07:25.089 --> 00:07:28.620
迭代器是我们能够在JavaScript中自己做的事情
And iterators are something that we've been able to do ourselves in JavaScript

129
00:07:28.620 --> 00:07:29.220
很长一段时间。
for a long time.

130
00:07:29.220 --> 00:07:32.899
但他们现在已经被直接作为头等公民添加到语言中。
But they've now been added directly as first class citizens to the language.

131
00:07:32.899 --> 00:07:34.680
我们可以创造我们自己的，并且
We can create our own, and

132
00:07:34.680 --> 00:07:37.590
我们可以使用其他机制产生的发电机。
we can use generators that are produced by other mechanisms.

133
00:07:37.590 --> 00:07:42.957
在这种情况下，调用生成器会生成迭代器。
In this case, calling a generator produces an iterator.

134
00:07:42.957 --> 00:07:46.566
并且在这种情况下迭代器的目的不是逐步遍历数据，
And the purpose of the iterator in this case is not to step through data,

135
00:07:46.566 --> 00:07:50.310
而是从外部逐步通过我们发电机的控制。
but rather to step through the control of our generator from the outside.

136
00:07:51.560 --> 00:07:53.730
同样，我们不能暂停发电机，但是
So again, we can't pause the generator, but

137
00:07:53.730 --> 00:07:57.779
我们可以要求发电机运行，直到它想要暂停。
we can ask the generator to run until it wants to pause.

138
00:07:57.779 --> 00:08:01.382
然后当我们调用。下一次，我们可以恢复它，然后它会再次暂停，并且
And then when we call .next again, we can resume it and then it'll pause again, and

139
00:08:01.382 --> 00:08:04.300
我们可以打电话。下一步，它会继续，然后它会再次暂停。
we can call .next and it'll resume, and then it'll pause again.

140
00:08:04.300 --> 00:08:07.990
所以在第7行，当我调用gen时，没有任何代码运行。
So here on line 7 when I called gen, none of the codes run.

141
00:08:07.990 --> 00:08:12.420
但在8号线上，当我打第一个电话时。下一个电话，我在2号线上启动，
But on line 8 when I call the first .next call, I started up on line 2 and

142
00:08:12.420 --> 00:08:13.668
我开始运行发电机。
I start running the generator.

143
00:08:13.668 --> 00:08:17.089
所以我要打印出你在那里看到的Hello。
So I'm gonna print out the Hello that you see there.

144
00:08:17.089 --> 00:08:21.129
当它到达第3行上的YERENCE关键字时，它将暂停并
And when it gets to the yield keyword on line 3, it's going to pause and

145
00:08:21.129 --> 00:08:24.240
将控制权返回到第8行。
return control back to line 8.

146
00:08:24.240 --> 00:08:28.970
然后，第8行可以立即转到第9行，并再次调用.Next并恢复它。
Line 8 could then proceed immediately to line 9 and call .next again and resume it.

147
00:08:28.970 --> 00:08:31.300
这样你就可以同步通过它了。
So you can synchronously step through it.

148
00:08:31.300 --> 00:08:32.769
但当然，可能会有休息，
But of course, there could be a break,

149
00:08:32.769 --> 00:08:36.700
可能存在间隙，在第8行和第9行之间可能存在时间延迟。
there could be a gap, there could be a delay in time between lines 8 and 9.

150
00:08:36.700 --> 00:08:42.700
在这段时间内，整个程序继续不变地运行。
And in that period of time, the overall program continues to run without change.

151
00:08:42.700 --> 00:08:46.559
但不同的是，在这个生成器内部，它处于暂停状态。
But what's different is that inside of this generator, it's in this paused state.

152
00:08:47.600 --> 00:08:50.389
它阻塞了，它在等待某人的到来
It's blocking, it's waiting for somebody to come along and

153
00:08:50.389 --> 00:08:52.720
再次调用.Next方法以继续。
call the .next method again to resume.
