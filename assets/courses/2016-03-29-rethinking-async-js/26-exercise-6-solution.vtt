WEBVTT

1
00:00:00.069 --> 00:00:03.837
[音乐]
[MUSIC]

2
00:00:03.837 --> 00:00:09.087
&gt；&gt；Kyle：所以我现在要开始一个练习
&gt;&gt; Kyle: So I'm now going to open an exercise

3
00:00:09.087 --> 00:00:14.163
这边有四个固定版本
four fixed version on this side and

4
00:00:14.163 --> 00:00:19.253
我要开始练习6。
I'm going to open up exercise 6.

5
00:00:19.253 --> 00:00:24.036
再一次，向你展示处理EX6的并排方式。
And again, show you the side by side way of dealing with ex6.

6
00:00:24.036 --> 00:00:29.367
因此，我们仍然有与EX5相同的get文件。
So, we still have our same get file the way we did with ex5.

7
00:00:29.367 --> 00:00:34.667
但我们如何处理这个地图减少的事情。
But how are we going to handle this map reduce thing.

8
00:00:34.667 --> 00:00:41.491
好吧，我将从“file1”列表开始，
Well, I'm gonna start with a list of "file1",

9
00:00:41.491 --> 00:00:46.908
“二号文件”，“三号文件”，好吗？
"file two", "file three", okay?

10
00:00:46.908 --> 00:00:52.170
现在我仍然要做一个.map调用和调用.map，这是数组映射。
Now I'm still going to do a .map call and call .map, this is the array map.

11
00:00:52.170 --> 00:00:54.799
普通的普通数组传递给getFile。
Plain old normal array pass it getFile.

12
00:00:56.320 --> 00:00:58.759
最后，我现在有了一个序列数组。
And the end of that I now have an array of sequences.

13
00:00:58.759 --> 00:01:02.066
是不是每个人都意识到这不再是一系列的承诺了。
Does everybody catch that it's not an array of Promises anymore.

14
00:01:02.066 --> 00:01:03.770
它是异步序列的数组。
It's an array of async sequences.

15
00:01:05.409 --> 00:01:08.180
我想把这些序列
And I want to turn those sequences

16
00:01:08.180 --> 00:01:10.659
变成我可以链接成序列的东西。
into something that I can chain into a sequence.

17
00:01:10.659 --> 00:01:13.159
所以我可以在这里做一个.Reduce呼叫
So I could do a .reduce call here and

18
00:01:13.159 --> 00:01:18.819
采用完全相同的方法用.seq和.val链接东西。
take the exact same approach of chaining things in with .seq and .val.

19
00:01:18.819 --> 00:01:20.920
所以我可以做和我在前4所做的完全一样的事情
So I could do exactly the same thing I did in EX-4 and

20
00:01:20.920 --> 00:01:22.849
它的工作方式将完全相同。
it would work exactly the same way.

21
00:01:25.060 --> 00:01:29.219
但是有一个更简单的方法通过认识到一个事实
But there's an even easier way of doing it by recognizing the fact that one of

22
00:01:29.219 --> 00:01:34.319
如果你愿意的话，诺言图书馆的美德再一次给你一些额外的糖。
the virtues again of a Promise library giving you some extra sugar if you will.

23
00:01:34.319 --> 00:01:39.530
其中的一种糖是，异步方法至少有一些方法。
One of the sugars is that the asynquence methods at least some of the methods.

24
00:01:40.609 --> 00:01:43.870
许多方法将接收多个项目
Many of the methods will receive multiple items

25
00:01:43.870 --> 00:01:46.635
好像你给那东西打了好几次电话。
as if you called the thing multiple times.

26
00:01:46.635 --> 00:01:49.879
因此，使用.seq，我可以将多个序列传递到其中
So with .seq I can pass multiple sequences into it and

27
00:01:49.879 --> 00:01:53.000
我不必为每个序列调用一次seq。
I don't have to call seq once for each sequence.

28
00:01:53.000 --> 00:01:55.500
我可以向它传递多个序列。
I can pass multiple sequences into it.

29
00:01:55.500 --> 00:01:57.498
所以如果我这里有这组序列。
So if I have this set of sequences here.

30
00:01:59.469 --> 00:02:05.540
我可以直接将它们传递到.seq调用中。
I could just pass them directly into a .seq call.

31
00:02:07.120 --> 00:02:12.780
不幸的是，事情没那么简单，因为seq不加薪，
Now unfortunately, it's not as simple as that, because seq doesn't take a raise,

32
00:02:12.780 --> 00:02:16.620
因为无法知道您是否希望该数组为值或
cuz there's no way to know whether or not you want that array to be a value or

33
00:02:16.620 --> 00:02:18.800
是否希望它是序列数组。
whether you want it to be an array of sequences.

34
00:02:18.800 --> 00:02:20.680
所以在这个意义上它不是多态的，但是
So it's not polymorphic in that sense but

35
00:02:20.680 --> 00:02:25.370
有了ES6，我们所需要的就是在阵列中展开的点。
with the ES6 all we need is the dot dot dot to spread out in array.

36
00:02:25.370 --> 00:02:28.608
所以我们要展开一系列的序列。
So we are spreading out an array of sequences.

37
00:02:47.902 --> 00:02:49.947
&GT；&GT；Kyle：但这里还有最后一个小细节，
&gt;&gt; Kyle: But there's one last little detail here,

38
00:02:49.947 --> 00:02:52.800
那就是我们还没有对这些输出进行排序，是吗？
which is we're not sequencing in those outputs yet are we?

39
00:02:54.509 --> 00:02:59.460
因此我们可以通过识别将输出排序为这些单独的序列
So we could sequence in the outputs into these individual sequences by recognizing

40
00:02:59.460 --> 00:03:04.159
另一个转变需要发生，因为我需要每个
that another transformation needs to occur as I need to take each

41
00:03:04.159 --> 00:03:07.939
单步序列并将其转换为两步序列。
single step sequence and turn it into a two step sequence.

42
00:03:07.939 --> 00:03:12.180
等待事件、等待文本并打印的顺序。
A sequence of waiting for the event, waiting for the text and printing it.

43
00:03:12.180 --> 00:03:15.969
所以我要做另一个.map调用，不是为了减少，而是
So I'm gonna do another .map call, not to reduce but

44
00:03:15.969 --> 00:03:22.229
另一个.map调用需要一个序列。
another .map call which takes a sequence.

45
00:03:25.009 --> 00:03:28.770
为了简短和清晰，我将其命名为SQ。
I'll call it sq just for shortness and clarity.

46
00:03:28.770 --> 00:03:32.340
它需要一个序列并需要对其进行转换，对吗？
It takes a sequence and needs to do a transformation on it, right?

47
00:03:32.340 --> 00:03:33.711
我们的转变是什么？
What's our transformation?

48
00:03:40.640 --> 00:03:42.139
&GT；&GT；Kyle：这将是一个转变。
&gt;&gt; Kyle: That would be a transformation.

49
00:03:43.250 --> 00:03:46.920
这将把序列推入更大序列
That will push that sequence into the bigger sequence and

50
00:03:46.920 --> 00:03:51.490
把它推到更大的序列中，把它推到更大的序列中。
push it into the bigger sequence and push it into the bigger sequence.

51
00:03:51.490 --> 00:03:56.789
为了进一步明确我们
To make that further clear we're

52
00:03:56.789 --> 00:04:01.520
在这里将这些作为一组函数传递并不是严格必要的，但是
going to pass these as a set of functions in this isn't strictly necessary but

53
00:04:01.520 --> 00:04:06.370
现在这是一组被推入seq的函数，所以
now this is a set of functions being pushed into the seq so

54
00:04:06.370 --> 00:04:10.740
他们会在适当的时间被召唤，好吗？
that they will be called at the appropriate time, okay?

55
00:04:10.740 --> 00:04:14.840
所以他们应该在没有函数包装器的情况下工作，只是为了
So this would they should work without the function wrapper here but just to make

56
00:04:14.840 --> 00:04:20.579
很明显，我们可以将其转换为生成序列的函数组。
it clear we can turn this into a array of functions that produce a sequence.

57
00:04:20.579 --> 00:04:23.779
这就是sequence传统上所期望的。
That's what sequenced traditionally expects.

58
00:04:23.779 --> 00:04:26.586
或者我们可以简单地将其转换为序列数组。
Or we can just simply turn it into an array of sequences.

59
00:04:29.899 --> 00:04:32.909
&gt；&gt；kyle：实际上，如果，让我后退，会发生什么。
&gt;&gt; Kyle: And what's gonna happen if, actually, so let me back up.

60
00:04:32.909 --> 00:04:37.240
如果我们把它变成一组独立的序列会发生什么
So what's gonna happen if we turn this into an array of independent sequences

61
00:04:37.240 --> 00:04:41.230
我们可能会在file1之前打印file2，因为
is that we might get file2 printed before file1 because

62
00:04:41.230 --> 00:04:43.439
这些仍然是独立的序列。
these are still independent sequences.

63
00:04:43.439 --> 00:04:46.610
我们使它们依赖的方式是按照函数包装器和
The way we make them dependent is to defer with the function wrappers and

64
00:04:46.610 --> 00:04:49.000
这就是这次活动的目的，好吗？
that was the purpose for the function, okay?

65
00:04:49.000 --> 00:04:56.196
我们已经将字符串数组转换为序列数组
We've turned an array of strings into an array of sequences and

66
00:04:56.196 --> 00:05:01.759
然后我们将序列数组转换为
then we turn an array of sequences into an array of

67
00:05:01.759 --> 00:05:07.129
将返回这些序列的函数。
functions that will return those sequences.

68
00:05:07.129 --> 00:05:10.439
&gt；&gt；演讲者2：我的问题是我们不能用同样的
&gt;&gt; Speaker 2: My question is can we not implement that previous one with the same

69
00:05:10.439 --> 00:05:14.720
在打印输出时映射并延迟它。
map and defer it when we print the output.

70
00:05:14.720 --> 00:05:18.529
&gt；&gt；Kyle：承诺的问题，这种技术不起作用的原因
&gt;&gt; Kyle: The problem with Promises, the reason why that technique doesn't work

71
00:05:18.529 --> 00:05:24.795
在这里承诺，是他们不能接受多种功能。
over here with Promises, is that they can't accept multiple functions.

72
00:05:24.795 --> 00:05:28.670
Asynquence可以接受多个函数，它知道如何处理它。
Asynquence can accept multiple functions and it knows what to do with it.

73
00:05:28.670 --> 00:05:32.557
但在这里你不能这样做，所以你实际上必须手动链接它们
But you can't do that over here, so you actually have to manually chain them

74
00:05:32.557 --> 00:05:35.064
这就是为什么我们需要减少呼叫。
together which is why we need to the reduce call.

75
00:05:35.064 --> 00:05:37.723
减少可能对你的大脑有更好的效果，如果是这样，那很好，
Reduce may work better for your brain and if so that's great,

76
00:05:37.723 --> 00:05:39.730
你可以用异步的方式做到这一点。
you can do that with asynquence.

77
00:05:39.730 --> 00:05:43.091
但我只是想告诉你我们可以摆脱复杂性
But I'm just trying to show you that we can get rid of the complexity

78
00:05:43.091 --> 00:05:45.680
减少和简单地做两个map调用。
of reduce and simply do two map calls.

79
00:05:45.680 --> 00:05:48.810
利用这一事实，我们可以访问接收函数组。
Taking advantage of the fact that we can access receive an array of functions.

80
00:05:55.970 --> 00:05:56.730
我失去了所有人吗？
Did I lose everybody?

81
00:06:00.889 --> 00:06:06.310
我能不能竖起大拇指，如果它至少有一半的意义，好吧，对吧。
Can I get a thumbs up if it's making at least half sense, okay, right.

82
00:06:06.310 --> 00:06:08.240
我知道这里有点复杂。
I get that there's a little bit of complexity here.

83
00:06:08.240 --> 00:06:11.550
我呈现给你的任何东西都不应该像你立即成为它的大师一样。
Nothing that I'm presenting to you should be like immediately you're a master on it.

84
00:06:11.550 --> 00:06:15.629
这都是给你的东西，它给你灵感去挖掘和
This is all presenting you stuff that it's giving you the inspiration to go dig and

85
00:06:15.629 --> 00:06:17.540
学习并实践这些东西。
learn these things and practice them.

86
00:06:17.540 --> 00:06:19.266
没有什么可以替代
There's no substitute for

87
00:06:19.266 --> 00:06:23.778
练习到东西舒服的地步，好吗？
the practice to get to the point where the stuff is comfortable, okay?

88
00:06:28.923 --> 00:06:33.673
&gt；&gt；Kyle：好的，这是练习五和
&gt;&gt; Kyle: All right, so that's exercise five and

89
00:06:33.673 --> 00:06:37.970
我们下一个讨论的话题。
six our next topic of discussion.

90
00:06:37.970 --> 00:06:40.500
我要说的最后一点。
My last point to make.

91
00:06:40.500 --> 00:06:45.850
如果你想了解更多关于异步的知识，甚至比文档更多，我写道
If you want to know more about asynquence, more than even the documentation, I wrote

92
00:06:45.850 --> 00:06:50.019
关于它的两三部分的博客系列，你可以阅读更多关于异步和
two or three part blog series on it and you can read more about asynquence and

93
00:06:50.019 --> 00:06:53.659
它的设计原则和考虑使用它的方式。
its design principles and ways to think about using it.

94
00:06:53.659 --> 00:06:55.889
所以，如果你有兴趣了解更多，请随意。
So if you're interested in learning more be my guest.

95
00:06:55.889 --> 00:06:56.750
请随意阅读它们。
Feel free to read about them.

96
00:06:57.909 --> 00:07:02.189
在休息期间，有几个问题让我觉得我可能会
Over the break, there were several questions where it felt like I might have

97
00:07:02.189 --> 00:07:08.500
在我们关于EX6，练习6的讨论结束时，造成了一点混乱。
created a little bit of confusion at the end of our discussion on ex6, exercise 6.

98
00:07:08.500 --> 00:07:10.920
所以我想回到这一点，并确保我有一点清楚。
So I wanted to circle back to that and make sure I was a little bit clear.

99
00:07:10.920 --> 00:07:14.420
这样，我们就不会把困惑留在周围。
That way, we didn't leave the confusion around it.

100
00:07:14.420 --> 00:07:18.339
首先，让我说，我们将要讨论的一切都是真的
At the outset, let me say that everything that we're about to discuss is really

101
00:07:18.339 --> 00:07:21.009
更多的是关于JavaScript的，更少的是关于异步的。
more about JavaScript and much less about asynquence.

102
00:07:21.009 --> 00:07:23.350
所以这不是关于异步的一些复杂性。
So this isn't some complexity about asynquence.

103
00:07:23.350 --> 00:07:27.949
它只是了解JavaScript中发生的机制。
It's just understanding the mechanisms that are are happening in JavaScript.

104
00:07:27.949 --> 00:07:31.660
但我所做的是我已经勾勒出了我们最初谈论的内容，
But what I've done is I've sketched out what we were originally talking about,

105
00:07:31.660 --> 00:07:35.930
就在右边，你可以看到我直接回来了
which was over here on the right, you can see that I'm returning directly

106
00:07:35.930 --> 00:07:41.050
带有val输出的序列放在上面。
the sequence with the val output put onto it.

107
00:07:41.050 --> 00:07:45.149
所以当你在想象或者理解上有困难的时候
So any time you're having trouble picturing or understanding or

108
00:07:45.149 --> 00:07:50.310
弄清楚什么是地图或地图，减少或它正在做的任何事情。
sussing out what a map or map and reduce or whatever it is doing.

109
00:07:50.310 --> 00:07:53.240
我鼓励你在头脑中展开它，至少展开几个
I encourage you to unroll that in your mind at least unroll a few

110
00:07:53.240 --> 00:07:57.060
你脑海中的每一步甚至都是这样打出来的
steps of it in your mind even type it out that way you have

111
00:07:57.060 --> 00:07:58.740
更清楚地了解正在发生的事情。
a clearer picture of what's happening.

112
00:07:58.740 --> 00:08:02.850
[咳嗽]所以我所做的就是在左边做这件事。
[COUGH] So what I've done is do that over here on the left.

113
00:08:02.850 --> 00:08:05.959
我已经展示了右边正在发生的事情，当我们直接
I've unrolled what was happening over there on the right when we directly

114
00:08:05.959 --> 00:08:09.060
返回序列和val输出。
returned the sequence and val output.

115
00:08:09.060 --> 00:08:12.959
您注意到，我从一个字符串数组开始。
You notice that I start out with an array of strings.

116
00:08:12.959 --> 00:08:16.970
这个map调用将其更改为序列数组。
This map call changes it into an array of sequences.

117
00:08:16.970 --> 00:08:21.089
这个map调用将其更改为其他序列的数组。
This map call changes it into an array of other sequences.

118
00:08:21.089 --> 00:08:22.990
具有.val和输出的序列，但
Sequences which have .val and output but

119
00:08:22.990 --> 00:08:26.339
仍然有三个独立的序列，这意味着它们
there are still three independent sequences, which means they're

120
00:08:26.339 --> 00:08:30.620
能够独立进行，独立不是我们想要的。
going to be able to independently proceed and independence is not what we want here.

121
00:08:30.620 --> 00:08:34.750
我们试图在它们之间建立依赖性，以便它们正确排序。
We're trying to create dependence between them so that they sequence correctly.

122
00:08:34.750 --> 00:08:37.019
所以如果我们想象左边这里发生的事情，
So if we visualize what's happening over here on the left,

123
00:08:37.019 --> 00:08:41.850
你可以看到它就像在三个独立的序列中传递。
you can see that on it's like passing in three independent sequences.

124
00:08:41.850 --> 00:08:45.259
所以每一个都能在它完成后立即进入它的输出，
So each one of those is able to go to its output as soon as it finishes,

125
00:08:45.259 --> 00:08:47.649
也就是说我们不协调
which means we're not coordinating

126
00:08:47.649 --> 00:08:51.289
S1输出发生在S2输出之前，S3输出之前。
the s1 output to happen before the s2 output before the s3 output.

127
00:08:52.970 --> 00:08:56.240
这实际上是所有的JavaScript，与异步没有任何关系。
That's really all JavaScript, that's got nothing to do with asynquence.

128
00:08:56.240 --> 00:08:59.789
只是这三样东西现在是独立的。
It's just that these things these three things are independent right now.

129
00:08:59.789 --> 00:09:01.730
我们希望他们能够依赖。
And we want them to be dependent.

130
00:09:03.350 --> 00:09:05.620
也要指出这个点，点。
Also to point out this dot, dot, dot.

131
00:09:05.620 --> 00:09:09.292
它发生在我们产生了一个数组之后，所以我继续
Its happening after we've produced an array so I went ahead and

132
00:09:09.292 --> 00:09:13.240
在这里放入包装圆括号，以清楚地显示出那个圆点
put in the wrapping parentheses here to make it clear that dot dot dot

133
00:09:13.240 --> 00:09:16.470
这里使用的是展开阵列。
being used here is spreading out an array.

134
00:09:16.470 --> 00:09:17.899
所以我们从一个数组开始
So we started out with an array and

135
00:09:17.899 --> 00:09:21.539
我们把它作为一系列实际的论点展开。
we spread it out as a series of actual arguments.

136
00:09:21.539 --> 00:09:24.639
如果.seq方法采用数组。
If the .seq method took an array.

137
00:09:24.639 --> 00:09:29.576
那么我们在这里所做的一切都将是完全相同的，除了我们会
Then everything that we did over here would be exactly the same except we'd take

138
00:09:29.576 --> 00:09:30.466
走出.。
out the...

139
00:09:30.466 --> 00:09:34.418
Sequence不采用数组，因为无法了解多态
Sequence doesn't take an array because there's no way polymorphically to know

140
00:09:34.418 --> 00:09:37.673
无论您是否打算将其作为传递的单一值或
whether or not you intend that to be a single value passed through or

141
00:09:37.673 --> 00:09:41.350
是否希望它是要解释的值的数组。
whether you intend it to be an array of values to be interpreted.

142
00:09:41.350 --> 00:09:44.409
所以正因为如此，我之前说过，
So because of that I said earlier,

143
00:09:44.409 --> 00:09:49.039
我不喜欢多态，我不喜欢混淆传统的多态。
I don't like polymorphism I don't like confusing conventional polymorphism.

144
00:09:49.039 --> 00:09:51.570
所以它不是多态的。
So it's just not polymorphic in that way.

145
00:09:51.570 --> 00:09:53.528
这意味着你不能传递一个数组。
Meaning you can't pass on an array.

146
00:09:53.528 --> 00:09:55.320
你必须把它们分开传递。
You have to pass them in separately.

147
00:09:55.320 --> 00:09:59.350
正如您将在解决方案文件中看到的那样，老式的方法可以使用该方法。
The old school way as you'll see in the solution files to use that apply.

148
00:09:59.350 --> 00:10:03.259
我试图帮助你理解ES6是如何让这些事情变得清晰的。
I'm trying to help you understand how ES6 helps makes these things clear.

149
00:10:03.259 --> 00:10:06.669
所以这是一个展开的阵列，现在应该很清楚了，
So that's a spreading out an array and it should be clear now that,

150
00:10:06.669 --> 00:10:11.120
这就是为什么这是不够，因为这是三个独立的序列
that's why this is not sufficient, cuz these are three independent sequences

151
00:10:11.120 --> 00:10:14.419
这将独立输出，这不是我们想要的。
that will output independently, and that's not what we want.

152
00:10:14.419 --> 00:10:16.710
所以如果我们回到我们结束的地方，
So if we go back to where we did end up,

153
00:10:16.710 --> 00:10:21.299
也就是说，我们返回的是一个返回这些序列的函数。
which is that we're returning a function that returns those sequences.

154
00:10:21.299 --> 00:10:24.500
那就相当于我们展开它时所发生的事情
Then the equivalent of what's happening when we unroll it

155
00:10:24.500 --> 00:10:27.940
传入了三个独立的函数。
is that there are three independent functions being passed in.

156
00:10:27.940 --> 00:10:32.485
所以我们所做的是从一个字符串数组开始产生一个
So what we've done is start with an array of strings produce an array of

157
00:10:32.485 --> 00:10:36.661
序列，现在我们将其映射到函数组。
sequences and now we're mapping that to an array of functions.

158
00:10:36.661 --> 00:10:41.037
然后我们当然把函数组作为单独的点展开
And then we of course dot dot dot spread out the array of functions as individual

159
00:10:41.037 --> 00:10:42.307
函数参数。
function arguments.

160
00:10:42.307 --> 00:10:45.690
这里有一个函数，这里有一个函数。
So I have a function here, a function here, and a function here.

161
00:10:45.690 --> 00:10:50.879
现在我们确实需要了解一些关于异步如何工作的具体内容。
Now we do need to understand something specific about how asynquence works.

162
00:10:50.879 --> 00:10:54.269
这不应该令人困惑，但这是我们应该特别指出的事情。
It shouldn't be confusing but it's something we should call out specifically.

163
00:10:54.269 --> 00:11:00.149
这就是说，大多数接受一个或多个函数的方法。
And that is that most of the methods that take one or more functions.

164
00:11:00.149 --> 00:11:05.100
如果你传递两个或三个函数，就像我们在这里传递三个函数一样。
If you pass two or three functions like we're passing three functions here.

165
00:11:05.100 --> 00:11:08.440
API将运行第一个函数，并且
The API will run the first function and

166
00:11:08.440 --> 00:11:11.889
然后，只有在第一个函数完成后才继续执行第二个函数，依此类推。
then go on to the second function only after the first one finished and so forth.

167
00:11:11.889 --> 00:11:13.789
所以每件事都是连续的。
So does everything serially.

168
00:11:13.789 --> 00:11:16.649
所以这三个函数即使它们被传递到相同的
So these three functions even though they're being passed into the same

169
00:11:16.649 --> 00:11:20.840
Sequence方法仍将完全运行此方法，
sequence method are still going to run this one entirely to its completion,

170
00:11:20.840 --> 00:11:23.529
这意味着等待该序列完成。
which means wait for that sequence to finish.

171
00:11:23.529 --> 00:11:27.779
然后，运行此函数并完全运行该序列。
And then, run this function and run that sequence entirely to completion.

172
00:11:27.779 --> 00:11:30.659
然后，这个功能和那个序列完全完成。
And then, this function and that sequence entirely to completion.

173
00:11:30.659 --> 00:11:35.009
所以这就是展开我们在右手边生产的东西的方式，
So that is the way to unroll what we've produced over here on the right-hand side,

174
00:11:35.009 --> 00:11:37.440
我们已经创建了一个函数列表
is that we've created a list of functions and

175
00:11:37.440 --> 00:11:40.340
将这些函数扩展到序列调用。
spread those functions out to the sequence call.

176
00:11:40.340 --> 00:11:45.768
而这个，如果将多个函数传递到.seq中会让人感到困惑，
And this, if that's confusing passing multiple functions into .seq,

177
00:11:45.768 --> 00:11:51.296
您也可以将其可视化为三个单独的.seq调用。
you can also alternatively visualize that as three separate .seq calls.

178
00:11:58.004 --> 00:12:00.539
&gt；&gt；Kyle：希望这能让它更清晰。
&gt;&gt; Kyle: So hopefully that makes it clearer.

179
00:12:00.539 --> 00:12:03.559
但其中的每一个都将依次发生，连续发生。
But each one of those is going to happen in sequence, serially.

180
00:12:05.789 --> 00:12:08.370
希望，这消除了一些我们可能已经造成的混乱
Hopefully, that cleared up some of the confusion that we might have wrought by

181
00:12:08.370 --> 00:12:12.490
尝试快速通过解决方案的一次性部分
trying to go through quickly the throwaway parts of the solution for

182
00:12:12.490 --> 00:12:17.070
练习六，它让我们更清楚为什么会在这里结束。
exercise six, and it makes it more clear why we ended up over here.

183
00:12:17.070 --> 00:12:19.100
再一次只是克制。
And again just to refrain.

184
00:12:19.100 --> 00:12:23.409
其中绝大多数是使用JavaScript机制的理解。
The vast majority of that is understanding using JavaScript mechanisms.

185
00:12:23.409 --> 00:12:26.769
它与异步本身几乎没有关系。
It has very, very little to do with asynquence itself.

186
00:12:26.769 --> 00:12:31.320
唯一特定于异步的部分是它期望个体的值和
The only part that's asynquence specific is that it expects individual values and

187
00:12:31.320 --> 00:12:32.230
它将连续执行这些操作。
it will do them serially.
