WEBVTT

1
00:00:00.000 --> 00:00:03.858
[音乐]
[MUSIC]

2
00:00:03.858 --> 00:00:06.700
&gt；&gt；Kyle：那么，如果你还记得以前的话，回到我们的跟踪结帐，
&gt;&gt; Kyle: So, back to our track checkout if you recall from before,

3
00:00:06.700 --> 00:00:08.801
关于电子商务的愚蠢场景。
that silly scenario about the eCommerce.

4
00:00:08.801 --> 00:00:13.416
并且不是传递我的回调，如果我们将该API修改为
And rather than passing my callback in, what if we were to modify that API such

5
00:00:13.416 --> 00:00:16.115
它向我们返回一个事件侦听器？
that it returns back an event listener to us?

6
00:00:16.115 --> 00:00:18.071
正如你在第11行我听到的，
As you see on line 11 I listen to,

7
00:00:18.071 --> 00:00:22.664
我收到了一个从track check out函数返回的侦听器，然后在第13行。
I receive a listener back from the track check out function and then on line 13.

8
00:00:22.664 --> 00:00:28.199
我收听完成事件，当它结束时，我继续前进。
I listen to the completion event and when it finishes I move on.

9
00:00:28.199 --> 00:00:30.769
我听错误事件，当它结束时，我继续前进。
And I listen to the error event and when it finishes I move on.

10
00:00:33.469 --> 00:00:36.759
你能看到这是一个倒置的控制反转吗？
Can you see how that is an inverted the inversion of control or

11
00:00:36.759 --> 00:00:39.079
而只是简单地保持控制？
rather just simply retain control?

12
00:00:39.079 --> 00:00:42.619
因为现在不是将我的调用传递回那个实用程序，
Because now rather than passing my call back into that utility,

13
00:00:42.619 --> 00:00:45.969
给他们王国的钥匙，让他们可以为所欲为
giving them the keys to the kingdom by which they can do whatever they want and

14
00:00:45.969 --> 00:00:49.009
我不能相信他们不会做我意想不到的事。
I can't trust that they won't do what I don't expect.

15
00:00:50.189 --> 00:00:50.923
我保留了控制权。
I've retained control.

16
00:00:50.923 --> 00:00:53.118
我只是简单地说不，你只需要给我一个事件监听器，
I've simply said no you just give me an event listener,

17
00:00:53.118 --> 00:00:54.247
我会想办法的。
I'll figure out what to do.

18
00:00:54.247 --> 00:00:58.402
好的，我会听那个事件，我们可以把它连接起来，这样我们就可以听
Well I'll listen for that event and we could wire it such that we listen for

19
00:00:58.402 --> 00:01:02.423
事件，然后在事件第一次发生时取消订阅该事件
the event and then unsubscribe to the event the first time it happens for

20
00:01:02.423 --> 00:01:05.859
例如，就像我们完全控制了那个范例一样。
example, like we are in complete control of that paradigm.

21
00:01:08.230 --> 00:01:12.769
所以，我们已经正常化，我们为这个过程带来了更多的理智，
So, we've normalized, we've brought more sanity back to this process,

22
00:01:12.769 --> 00:01:14.340
而不是传递回调用。
rather than passing the call back in.

23
00:01:14.340 --> 00:01:16.670
这是对承诺的重要理解，
That's an important understanding of promises,

24
00:01:16.670 --> 00:01:19.469
就是他们颠倒了控制反转问题。
is that they uninvert the inversion of control problem.

25
00:01:21.739 --> 00:01:22.560
这是件大事。
That's a big deal.

26
00:01:23.799 --> 00:01:26.409
这不是一个小问题，这是最重要的问题之一。
That's not a small point, that's one of the most important points.

27
00:01:28.090 --> 00:01:31.539
承诺的目的是为了扭转这种控制的反转。
Promises were designed to un-invert that inversion of control.

28
00:01:31.539 --> 00:01:36.430
更确切地说，是为了保持这种控制权，以便所有这些信任问题
Rather, to retain that control, so that all of those trust issues

29
00:01:36.430 --> 00:01:41.099
我们之前谈到的有一种有序和模式化的解决方法。
that we were talking about before have an ordered and patterned way of being solved.

30
00:01:41.099 --> 00:01:43.829
现在，我们实际上并不是这样听的。
Now, we don't actually listen this way.

31
00:01:43.829 --> 00:01:46.140
这不是大多数API的设计方式，不是。
This isn't how most APIs design, no.

32
00:01:46.140 --> 00:01:49.340
虽然，这是一个我们至少可以理解的既定模式，但是
Although, it's an established pattern that we can at least understand, but

33
00:01:49.340 --> 00:01:52.079
这是一种对承诺的思考的比喻。
it's It's a metaphor for thinking about a promise.

34
00:01:53.210 --> 00:01:55.656
承诺就像一个事件侦听器。
A promise is like an event listener.

35
00:01:55.656 --> 00:02:00.792
但是，不存在完成事件，我们将该事件称为Then事件。
But rather than there being a completion event, we call that event the then event.

36
00:02:00.792 --> 00:02:03.510
这就是我们开始讨论承诺的API的地方。
And that's where we start to talk about the API of a promise.

37
00:02:03.510 --> 00:02:05.140
所以，在卡车结账工具里。
So, in that truck checkout utility.

38
00:02:06.920 --> 00:02:10.610
我们可以简单地创建承诺，而不是将回调作为参数接收
Rather than receiving a callback as a parameter we can simply create a promise

39
00:02:10.610 --> 00:02:13.780
正如您在构建Promise实例的第二行中看到的那样。
as you see on line two on constructing a promise instance.

40
00:02:13.780 --> 00:02:17.750
承诺的构造函数收到了两种方法：Resolve和Reject。
The constructor for the promise received two methods the resolve and the reject.

41
00:02:17.750 --> 00:02:21.810
通过我给它们命名的方式，很清楚它们做了什么。
It's pretty clear what those do by the way I named them.

42
00:02:21.810 --> 00:02:25.710
如果你想要解决承诺，如果你想完全履行承诺，你可以调用Resolve
You call resolve if you wanna resolve the promise if you want to fill it completely

43
00:02:25.710 --> 00:02:29.349
或者是正确的，如果你需要拒绝承诺，你就叫拒绝。
or correctly and you call reject if you need to reject the promise.

44
00:02:29.349 --> 00:02:32.829
回到我未来的芝士汉堡，这是唯一的两个选择。
Back to my future cheeseburger this is the only two options.

45
00:02:32.829 --> 00:02:36.819
要么我最终会拿到我的芝士汉堡，要么这位女士会打电话给我
Either I'm eventually gonna get my cheeseburger or, the lady is going to call

46
00:02:36.819 --> 00:02:40.349
我回到柜台，说这是个悲剧，但我们完全没有
me back up to the counter and say this is a tragedy but we are completely out of

47
00:02:40.349 --> 00:02:43.099
芝士汉堡，我要把你的钱还给你。
cheeseburgers, I'm gonna have to give you your money back.

48
00:02:43.099 --> 00:02:44.430
这是唯一的两个选择，对吧？
This is the only two options, right?

49
00:02:45.509 --> 00:02:47.459
要么我拿到我的芝士汉堡要么拿回我的钱。
Either I get my cheeseburger or get my money back.

50
00:02:48.479 --> 00:02:51.819
因此，我们既可以履行诺言召唤决心，也可以拒绝它。
So, we can either fulfill the promise calling resolve or we can reject it.

51
00:02:53.620 --> 00:02:56.719
这是一个承诺所能产生的唯一两个结果。
Those are the only two outcomes that a promise can have.

52
00:02:57.889 --> 00:03:01.550
所以，不管那个魔力是什么，我都会发布这些信息，因为那不是
So, whatever that magic is I'm alighting that information because that isn't

53
00:03:01.550 --> 00:03:04.750
重要部分，但不管跟踪中逻辑是什么，检查和
the important part but whatever that logic is inside of track check out and

54
00:03:04.750 --> 00:03:06.318
即使这是一个电话解决或拒绝。
even if it's a call resolve or reject.

55
00:03:08.020 --> 00:03:11.141
现在，您注意到我们返回了Promise实例，所以
Now, you notice that we're returning that promise instance, so

56
00:03:11.141 --> 00:03:14.500
当我们返回那个Promise实例时，我们将在代码中使用它。
when we return that promise instance we're going to use it in our code.

57
00:03:15.849 --> 00:03:18.969
就像我在11号线上做的一样，我收到了一个承诺
Just like I'm doing here on line 11 I receive a promise back and

58
00:03:18.969 --> 00:03:22.490
通知我们的第13行，而不是在完成时说点。
the notice our line 13 instead of saying dot on completion.

59
00:03:22.490 --> 00:03:24.450
我说的是点，然后我要注册
I'm saying dot then I'm registering for

60
00:03:24.450 --> 00:03:29.144
然后事件&gt；&gt；Kyle：Then事件将被调用
then event &gt;&gt; Kyle: The then event is gonna be called

61
00:03:29.144 --> 00:03:33.860
当RESOLE或REJECT违背该承诺时。
when either resolve or reject is fired against that promise.

62
00:03:33.860 --> 00:03:37.199
它将发射然后事件，如果你将比喻和
It will fire then event if you will metaphorically and

63
00:03:37.199 --> 00:03:39.759
传递给它的两个函数中的一个将被调用。
one of those two functions passed into it's gonna get called.

64
00:03:39.759 --> 00:03:43.030
如果成功履行承诺，将调用Finish
Finish will be called if the promise was fulfilled successfully

65
00:03:43.030 --> 00:03:44.099
如果被拒绝，则出错。
error if it was rejected.

66
00:03:46.110 --> 00:03:49.259
因此，我们实际上有一个很好的清洁机制
So, we have actually a nice clean mechanism for

67
00:03:49.259 --> 00:03:51.960
被告知它是成功的或者是失败的。
being notified that it was either a success or that it was a failure.

68
00:03:54.810 --> 00:04:02.159
这一点非常重要，向前迈进一步，进行控制反转。
It's incredibly important, step forward for an inversion of inversion of control.

69
00:04:02.159 --> 00:04:07.527
控制反转有时是故意使用的。
Inversion of control is sometimes used in an intentional way.

70
00:04:07.527 --> 00:04:12.435
框架设计作者有时会用到实际上，控制反转就是其中之一
Framework design author sometimes will use in fact, inversion of control is one

71
00:04:12.435 --> 00:04:17.197
典型地被用来定义某事的关键特征
of the key characteristics that has classically been used to define something

72
00:04:17.197 --> 00:04:21.814
作为一个框架，当您传入内容时，它会反转控制，它会调用
as a framework as when it inverts control when you pass in stuff in it calls for

73
00:04:21.814 --> 00:04:24.002
是你而不是你在胡说八道。
you instead of you calling things.

74
00:04:24.002 --> 00:04:27.939
我不知道你们中有多少人熟悉那些更经典的
I don't know how many of you are familiar with some of those more classical

75
00:04:27.939 --> 00:04:32.512
关于软件设计的思考，但这是划分的特征之一
thinkings about software design but that's one of the characteristics that divides

76
00:04:32.512 --> 00:04:36.000
库之间的框架是控制的反转。
between a library a framework is that inversion of control.

77
00:04:36.000 --> 00:04:38.750
所以，有些人会告诉你，控制反转是故意的
So, some people will tell you that inversion of control is an intentional

78
00:04:38.750 --> 00:04:39.870
设计功能和
design feature and

79
00:04:39.870 --> 00:04:42.968
我会告诉你，就异步而言，这是一个糟糕的想法。
I would tell you as far as asynchronicity is concerned it's a terrible idea.

80
00:04:45.240 --> 00:04:48.189
控制反转是通向黑暗面的途径，这里是
Inversion of control is the path to the dark side here it is

81
00:04:48.189 --> 00:04:51.740
在我们的程序中，我们完全失去了所有的合理性的道路。
the path by which we completely lose all reasonability in our program.

82
00:04:53.259 --> 00:04:57.480
所以，我们有意识地、积极地、有目的地尝试
So, we are trying intentionally actively on purpose

83
00:04:57.480 --> 00:05:00.839
去颠覆这种模式，把它带回我们的控制之中。
to uninvert that paradigm to bring it back into our control.

84
00:05:00.839 --> 00:05:03.209
这就是承诺为我们做的事情。
That's what promises are doing for us.

85
00:05:03.209 --> 00:05:05.329
所以，这实际上根本不是关于API的。
So, this isn't actually about an API at all.

86
00:05:06.490 --> 00:05:09.379
这不是缺少凹痕的问题。
This isn't about lack of indentation.

87
00:05:09.379 --> 00:05:11.500
其实如果你密切关注，
In fact if you pay close attention,

88
00:05:11.500 --> 00:05:13.259
你注意到这里仍然有大量的回调。
you notice there's still a ton of callbacks here.

89
00:05:15.250 --> 00:05:18.180
事实上，这里的回调比以前更多。
In fact there's more callbacks here than they were before.

90
00:05:18.180 --> 00:05:20.750
等一下，等等。
Wait a minute, hold up.

91
00:05:20.750 --> 00:05:24.879
我以为承诺都是为了解决回调错误，摆脱回调
I thought promises were all about solving callback error, getting rid of callbacks

92
00:05:24.879 --> 00:05:28.509
如果还牵涉到回调，他们到底要怎么修复任何东西？
how on earth are they fixing anything if there's still callbacks involved?

93
00:05:30.029 --> 00:05:31.170
非常重要的问题。
Really important question.

94
00:05:32.170 --> 00:05:35.759
如果仍然涉及回调，这个承诺系统如何
If there's still callbacks involved how does this promise system

95
00:05:35.759 --> 00:05:37.620
给我们提供什么解决方案吗？
offer any solutions to us?

96
00:05:37.620 --> 00:05:40.100
你可能会问，这是理所当然的。
You might ask and rightly so.

97
00:05:40.100 --> 00:05:42.610
但是等等，如果我把我的回调传递到那个承诺中，
But wait, if I passed my callback into that promise,

98
00:05:42.610 --> 00:05:45.069
承诺就不能多次给我回电吗？
can't the promise just call my callback a bunch of times?

99
00:05:46.329 --> 00:05:48.759
我怎么能相信这个承诺去做它应该做的事情呢？
How can I trust the promise to do what it's supposed to do?

100
00:05:50.350 --> 00:05:53.920
这是在这一点上可以提出的最重要的问题。
That's the most important question that can be asked at this point.

101
00:05:53.920 --> 00:05:56.550
因为你需要明白承诺是设计好的
Because you need to understand that promises were designed

102
00:05:56.550 --> 00:05:58.699
将信任灌输到此交易中。
to instill trust into this transaction.

103
00:05:59.889 --> 00:06:05.399
它们只解决一次的基本设计原则，
The fundamental design principle that they're only resolved once,

104
00:06:05.399 --> 00:06:07.449
它们只能作为成功解决，或者
they can only be resolved as a success, or

105
00:06:07.449 --> 00:06:11.660
传递给承诺的消息总是保留的错误。
an error the messages that get passed to a promise are always kept.

106
00:06:11.660 --> 00:06:15.550
它变得不可变，总是捕获异常，并且
It becomes immutable, exceptions are always caught and

107
00:06:15.550 --> 00:06:19.240
变成了总是可以观察到的错误，没有任何东西被吞噬。
turned into errors that are always observable there's nothing swallowed.

108
00:06:19.240 --> 00:06:21.540
如果你选择不观察是因为你懒惰或者
If you choose not to observe because you're lazy or

109
00:06:21.540 --> 00:06:25.230
你犯了一个错误，那么它可能看起来像是被吞噬了，但它肯定是
you make a mistake, then it might look like it was swallowed but it definitely

110
00:06:25.230 --> 00:06:28.475
并不是说你没有机会观察它们。
was not swallowed in the sense that you had no opportunity to observe them.

111
00:06:28.475 --> 00:06:31.279
这是件大事。
This is a huge deal.

112
00:06:31.279 --> 00:06:35.750
这是带回来的一大堆神志正常的人
This is a whole bunch of sanity brought back to

113
00:06:35.750 --> 00:06:39.860
一个从根本上很难理解的过程
a process that has fundamentally been rather hard to understand and

114
00:06:39.860 --> 00:06:42.850
很难维护整个JavaScript历史。
rather hard to maintain for the entirety of JavaScript history.

115
00:06:45.170 --> 00:06:48.620
因此，在这里，我们确实开始看到API的一些好处。
So, here and we do start to see some of the benefits of the API.

116
00:06:48.620 --> 00:06:52.569
这些都是超越时间独立状态这一概念的东西。
These are things above and beyond this notion of time independent state.

117
00:06:53.949 --> 00:06:55.978
我说这很重要，这是我们的基础。
I said that was important, that's our foundation.

118
00:06:55.978 --> 00:06:59.093
在此基础上，我们增加了所有的信任。
Built upon that, we have all of this trust added to it.

119
00:06:59.093 --> 00:07:02.761
这主要是我们所得到的API中的机制，
And that is primarily the mechanism in the API that we've been given,

120
00:07:02.761 --> 00:07:06.120
旨在以特定的方式组织我们的回调。
is designed to organize our callbacks in that certain way.

121
00:07:06.120 --> 00:07:09.350
事实上，第三种思考承诺是什么的方式，
In fact, a third way of thinking about what a promise is,

122
00:07:10.399 --> 00:07:11.629
它是一个回拨管理器。
is that it's a callback manager.

123
00:07:13.050 --> 00:07:17.766
这是一种以可信的方式管理回调的模式。
It's a pattern for managing our callbacks in a trustable fashion.

124
00:07:20.079 --> 00:07:20.980
&GT；&GT；Kyle：这是一件大事。
&gt;&gt; Kyle: That's a big deal.

125
00:07:22.149 --> 00:07:24.490
这就是为什么承诺很重要，其实并不是那么重要
That's why promises matter, it's not really so

126
00:07:24.490 --> 00:07:27.230
关于你是否喜欢闪亮的API。
much about whether you like the shiny API or not.

127
00:07:27.230 --> 00:07:31.500
这并不是真的关于你是否想要摆脱嵌套或缩进。
It's not really about whether you wanna get rid of nesting or indentation.

128
00:07:31.500 --> 00:07:35.709
有一个承诺地狱，很容易进入或没有银弹。
There is a promise hell and it's easy to get into or no silver bullet.

129
00:07:37.029 --> 00:07:40.329
但有一件非常重要的事情是他们被设计来做的，那就是
But there's a really important thing that they've been designed to do that is to

130
00:07:40.329 --> 00:07:42.699
重新向我们的系统灌输信任。
instill trust back into our systems.

131
00:07:42.699 --> 00:07:45.237
甚至不仅仅是这样的信任。
Even more than just trust in this way.

132
00:07:45.237 --> 00:07:49.872
现在我的值是不变的，我特意标记了这个值，因为现在请注意我的
Now that my value is immutable I mark that one on purpose because now mind that my

133
00:07:49.872 --> 00:07:53.326
值从外部是不可变的，它不能更改。
value is immutable from the outside it cannot be changed.

134
00:07:53.326 --> 00:07:58.218
这意味着我可以将该容器发送到我系统的任何端口，甚至可以发送到
That means I can send that container to any port of my system or even outside of

135
00:07:58.218 --> 00:08:02.422
我的系统给其他第三方，我可以说，这是我的价值和
my system to other third parties and I can say, here is my value and

136
00:08:02.422 --> 00:08:07.790
我不需要担心他们会改变我下面的价值。
I do not have to worry that they're gonna change that value out from underneath me.

137
00:08:09.670 --> 00:08:11.939
还记得我们在另一个研讨会上讨论过不变性的问题吗？
Remember we talked about immutability in the other workshop and

138
00:08:11.939 --> 00:08:13.420
这有多重要。
how important that is.

139
00:08:13.420 --> 00:08:15.350
这是这些基本的进口之一。
That's one of these fundamental import.

140
00:08:15.350 --> 00:08:19.170
事实上，最重要的事情之一是有外部不可变的。
In fact, one of the most important things is that there are externally immutable.

141
00:08:20.290 --> 00:08:22.882
这里没有远距离的行动。
There's no action at a distance concern here.

142
00:08:22.882 --> 00:08:26.994
如果你不知道“远距离行动”这个短语，那就是
If you don't know that phrase, action at a distance, that's one of the evils of

143
00:08:26.994 --> 00:08:31.165
设计系统时的软件体系结构，远方的其他人可以
software architecture when you design a system, where somebody else far away can

144
00:08:31.165 --> 00:08:34.028
在你不认识他的情况下做一些影响你的事情。
do something that affects you without you knowing him.

145
00:08:34.028 --> 00:08:34.950
这不是个好主意。
It's a bad idea.

146
00:08:36.659 --> 00:08:38.370
就像这里的一个小附注。
Just as a little side note here.

147
00:08:38.370 --> 00:08:42.190
有关于未来版本的承诺的讨论
There are discussions happening around promises that in a future version of

148
00:08:42.190 --> 00:08:45.720
JavaScript，我们可以让它成为可取消承诺的概念。
JavaScript, we can make it this notion of a cancellable promise.

149
00:08:48.289 --> 00:08:49.919
我不会进入所有的政治
I'm not gonna go into all the politics and

150
00:08:49.919 --> 00:08:53.159
所有围绕可取消承诺的疯狂。
all the craziness that's around cancelable promises.

151
00:08:53.159 --> 00:08:58.029
简单地说，在我看来，这是一种摇摆狗的尾巴。
Just briefly to state to you, it's kind of a tail wagging the dog as far as I see it.

152
00:08:58.029 --> 00:09:00.980
他们还有其他想要控制的东西
They have this other sort of thing that they want to control and

153
00:09:00.980 --> 00:09:04.947
他们想要控制的东西只会暴露出承诺。
that thing that they want to control only exposes promises.

154
00:09:04.947 --> 00:09:09.049
所以，让我们把承诺变成可取消的，这样我们就可以控制这件事。
And so, let's make promises cancelable so that we can control that thing.

155
00:09:10.299 --> 00:09:11.909
而不是让那东西变得可控。
Instead of making that thing controllable.

156
00:09:13.110 --> 00:09:17.600
这对我来说很疯狂，但你知道可取消的小承诺有什么不好吗？
It's crazy to me but you know what's bad about cancellable little promises?

157
00:09:17.600 --> 00:09:18.370
远距离行动。
Action at a distance.

158
00:09:18.370 --> 00:09:21.649
我有一个尚未解决的承诺。
I have a promise that's not yet resolved.

159
00:09:21.649 --> 00:09:25.009
我把它传递给其他人，他们可以从我下面取消它。
I pass it to somebody else and they can cancel it out from underneath me.

160
00:09:25.009 --> 00:09:29.010
怎么了？胡说八道。
What? That's nonsense.

161
00:09:29.010 --> 00:09:32.859
这侵蚀了这些东西赖以建立的整个基础。
That erodes the entire foundation upon which these things are built.

162
00:09:34.220 --> 00:09:37.200
所以，如果你看到我对可取消的承诺咆哮，这就是原因。
So, if you see me ranting about cancellable promises this is why.

163
00:09:37.200 --> 00:09:40.370
我很认真地对待它，因为这是一件重要的事情。
I take it seriously because this is an important thing.

164
00:09:40.370 --> 00:09:45.059
我们不应该仅仅因为我们沉迷于漂亮的API这个想法就把它扔掉。
We shouldn't throw it away just because we're drunk on this idea of pretty APIs.
