WEBVTT

1
00:00:00.180 --> 00:00:03.718
[音乐]
[MUSIC]

2
00:00:03.718 --> 00:00:09.529
&GT；&GT；Kyle：是时候进入一些真正的大脑弯曲的东西了。
&gt;&gt; Kyle: Time to move in to some really brain bending stuff.

3
00:00:09.529 --> 00:00:15.419
如果你认为我们讨论的东西是脑筋急转弯，
If you thought the stuff that we went over was brain bending,

4
00:00:15.419 --> 00:00:17.966
系好安全带。
buckle up your seat belt.

5
00:00:17.966 --> 00:00:18.911
并发。
Concurrency.

6
00:00:18.911 --> 00:00:21.193
这就是我们一直在讨论的整个研讨会。
That's what we've been talking about this entire workshop.

7
00:00:21.193 --> 00:00:25.410
这个穷人对我所说的并发的定义是什么？
What was the poor man's definition for what I meant by concurrency?

8
00:00:26.690 --> 00:00:28.910
基本上，管理流量控制。
Basically, managing the flow control.

9
00:00:28.910 --> 00:00:31.190
管理所有这些正在发生的事情
Managing all these things that are happening and

10
00:00:31.190 --> 00:00:33.280
按正确的顺序对事物作出反应。
responding to things in the proper order.

11
00:00:36.369 --> 00:00:40.399
我们知道，当只有一个请求和一个响应时，承诺就会起作用。
We know that Promises work when there's a single request and a single response.

12
00:00:41.840 --> 00:00:45.780
当我们即将到来的信息来源，
What happens when the source of our information that's coming,

13
00:00:45.780 --> 00:00:50.234
实际上是不断出现的信息流？
is actually a repeated stream of information that's coming?

14
00:00:50.234 --> 00:00:53.994
例如，我们能否将承诺连接到事件流中？
Can we wire Promises into an event stream, for example?

15
00:00:53.994 --> 00:00:57.895
因为坦率地说，如果我们真的看它，大部分
Because frankly speaking, if we really look at it, most of

16
00:00:57.895 --> 00:01:02.994
在我们的程序中发生的异步性实际上是面向事件的。
the asynchronicity that's happening in our programs is actually event oriented.

17
00:01:02.994 --> 00:01:05.814
我们所有的UI几乎都是面向事件的。
All of our UI is almost entirely event oriented.

18
00:01:05.814 --> 00:01:07.295
这是来自服务器的事件。
It's events coming from the server.

19
00:01:07.295 --> 00:01:08.555
这是来自用户的事件。
It's events coming from the user.

20
00:01:08.555 --> 00:01:09.539
我们到处都有活动。
We have events everywhere.

21
00:01:10.909 --> 00:01:15.219
一旦你开始尝试插入承诺，你可能会开始看到一些问题。
Soon as you start trying to plug Promises in you might start to see some issues.

22
00:01:16.980 --> 00:01:18.299
让我试着说明一下。
Let me try to illustrate that for a moment.

23
00:01:18.299 --> 00:01:19.980
假设我的页面上有一个按钮
Let's say that I had a button on my page and

24
00:01:19.980 --> 00:01:23.960
我想通过承诺的方式来表示对该按钮的点击。
I wanted to represent the click of that button by way of a promise.

25
00:01:25.039 --> 00:01:28.013
我已经知道我可以构建一个承诺，就像我在第一行所做的那样。
I already know I can construct a promise like I'm doing on line 1.

26
00:01:29.230 --> 00:01:33.009
我可以在里面设置我的点击处理程序。
And I can set up my click handler inside of it.

27
00:01:33.009 --> 00:01:35.170
我有按钮点点击。
I have button dot click.

28
00:01:35.170 --> 00:01:39.109
我做了一些额外的逻辑只是为了说明有额外的步骤
And I'm doing some extra logic just to illustrate that there's extra steps that

29
00:01:39.109 --> 00:01:42.020
我们可能会使用，我要测试它的类名，如果它
we might use, I'm going to test its class name and if it

30
00:01:42.020 --> 00:01:46.099
匹配那个正则表达式FUBAR，然后我要解决这个承诺。
matches that regular expression FUBAR then I'm going to resolve the Promise.

31
00:01:46.099 --> 00:01:47.390
否则我会拒绝这个承诺。
Otherwise I'm going to reject the Promise.

32
00:01:49.020 --> 00:01:51.490
然后在我的程序中的其他地方，
And then down somewhere else in my program,

33
00:01:51.490 --> 00:01:53.819
第13行表示我的程序中的不同位置，
line 13 represents a different place in my program,

34
00:01:53.819 --> 00:01:58.479
我将通过打印出任何被点击的内容来回应这一承诺。
I'm going to respond to that Promise by printing out whatever was clicked on.

35
00:01:58.479 --> 00:02:01.170
现在的精神是每次我点击按钮，
Now the spirit of this is that every time I click on the button,

36
00:02:01.170 --> 00:02:05.969
我会得到我打印出来的，或者如果我点击了一个按钮，
I'm going to get either that I printed it out or if I clicked a button that,

37
00:02:05.969 --> 00:02:08.680
如果它与FUBAR匹配，我将打印出一个className，但是
I'm going to print out a className if it matched FUBAR but

38
00:02:08.680 --> 00:02:10.990
如果我点击一个没有这个功能的按钮，什么都不会发生。
if I clicked a button that didn't have that, nothing would happen.

39
00:02:10.990 --> 00:02:12.669
这就是它的精神。
That's the spirit of it.

40
00:02:12.669 --> 00:02:14.330
有人发现这个代码有问题吗？
Does anybody spot a problem with this code?

41
00:02:16.500 --> 00:02:17.180
怎么了？
What?

42
00:02:17.180 --> 00:02:18.620
&gt；&gt；扬声器2：它只会发射一次。
&gt;&gt; Speaker 2: It's only gonna fire once.

43
00:02:18.620 --> 00:02:20.310
&gt；&gt；Kyle：承诺只能解决一次。
&gt;&gt; Kyle: Promises can only be resolved once.

44
00:02:22.610 --> 00:02:24.879
第一次单击按钮时，无论是哪个按钮，
The very first time you click a button, whichever button it is,

45
00:02:24.879 --> 00:02:27.289
它将解决或拒绝承诺。
it's going to resolve or reject the Promise.

46
00:02:27.289 --> 00:02:30.479
每次当你点击按钮的时候，什么都不会发生。
And every time else when you click the button, nothing's gonna happen.

47
00:02:30.479 --> 00:02:34.569
哦，我们该怎么办？
Uh-oh, what do we do?

48
00:02:34.569 --> 00:02:38.840
我们如何使用承诺，我们已经建立了自己的承诺和发电机。
How do we use Promises, we've built ourselves up to Promises and generators.

49
00:02:38.840 --> 00:02:41.599
我们已经给自己提供了几层更高阶的抽象。
We've given ourselves several layers of higher order abstractions.

50
00:02:42.819 --> 00:02:46.310
但现在我们面临着一件极其常见的事情，即将发生在我们的
But now we're faced with an extremely common thing that's gonna happen in our

51
00:02:46.310 --> 00:02:50.490
对事件作出响应的程序重复正在发生的事情和
programs that is responding to events repeated things that are happening and

52
00:02:50.490 --> 00:02:52.289
突如其来的承诺似乎分崩离析。
all of sudden Promises seem to fall apart.

53
00:02:52.289 --> 00:02:54.479
我们该怎么办？
What do we do?

54
00:02:54.479 --> 00:03:00.300
嗯，你可以做的一件事就是倒置。
Well, one thing you might do is to invert.

55
00:03:01.650 --> 00:03:03.270
你可以说，而不是创造我的承诺和
You might say instead of creating my Promise and

56
00:03:03.270 --> 00:03:05.310
然后我的按钮处理程序在里面做相反的事情。
then my button handler inside do it the other way around.

57
00:03:05.310 --> 00:03:09.979
制作我的按钮处理程序，单击处理程序，然后在内部创建承诺。
Make my button handler, click handler and then create a Promise inside.

58
00:03:11.810 --> 00:03:14.289
接下来会发生的是我会得到一个全新的承诺
What's gonna happen here is I'm gonna get a whole new Promise for

59
00:03:14.289 --> 00:03:15.500
发射的每个事件。
each event that's fired.

60
00:03:17.409 --> 00:03:18.090
听起来不错。
That sounds great.

61
00:03:19.569 --> 00:03:20.930
除了为什么？
Except, why?

62
00:03:22.789 --> 00:03:24.689
因为一旦通风口已经被发射，
Because once the vents already been fired,

63
00:03:24.689 --> 00:03:26.300
那么这里的承诺的目的是什么。
then what's the purpose of the Promise here.

64
00:03:27.449 --> 00:03:28.090
你看到我在做什么了吗？
You see what I'm doing?

65
00:03:28.090 --> 00:03:31.919
我立即解决了一个承诺，然后立即在上面打一个点。
I'm immediately resolving a Promise ,and then immediately calling a dot then on it.

66
00:03:31.919 --> 00:03:34.840
这有多大意义？
How much sense does that make?

67
00:03:34.840 --> 00:03:38.514
不过，还有更深层次的原因，因为我们真正做的事情
There's something even deeper though, because what we've really done when we

68
00:03:38.514 --> 00:03:41.540
倒过来，我们做了一个简单的小把戏，我把它倒过来
inverted, we made that little simple trick where I inverted it and

69
00:03:41.540 --> 00:03:44.207
我在另一个里面做了一个，而不是反过来。
I did one inside the other instead of the other way around.

70
00:03:44.207 --> 00:03:47.915
现在我们已经合并了我们的关注点分离。
Now we have conflated our separation of concerns.

71
00:03:47.915 --> 00:03:52.198
在前面的代码中，我可以巧妙地设置
In the previous code, subtly I was able to set up

72
00:03:52.198 --> 00:03:57.030
我的来源在一个位置，并有我的回应。
my source in one location and have my response to it.

73
00:03:57.030 --> 00:03:58.211
我能够订阅和
I was able to subscribe and

74
00:03:58.211 --> 00:04:01.020
我有我的来源，它在不同的位置，我的应用程序。
I have my source to it in a different location of my application.

75
00:04:01.020 --> 00:04:05.740
这是两个独立的功能，但当我倒置时，猜猜发生了什么？
Those are two separate capabilities, but when I invert, guess what's happened?

76
00:04:05.740 --> 00:04:09.740
我必须在同一地点设置源和订阅。
I have to set up the source and the subscription all in the same spot.

77
00:04:11.490 --> 00:04:13.840
我把这两种责任混为一谈。
I have conflated those two responsibilities together.

78
00:04:13.840 --> 00:04:17.199
而你必须通过一大堆的圈子才能得到那些承诺
And you gonna have to jump through a whole bunch of hoops to get those Promises

79
00:04:17.199 --> 00:04:18.800
超出您的单击处理程序。
out of your click handler.

80
00:04:18.800 --> 00:04:21.939
每次他开枪，如果你需要那些承诺在其他地方回应
Every time he fired if you need those Promises to respond in other places

81
00:04:21.939 --> 00:04:25.819
你必须将它们保存到某个共享闭包变量中，或者
you're gonna have to save them off into some shared closure variable or

82
00:04:25.819 --> 00:04:26.730
一些荒谬的事情。
some ridiculous thing.

83
00:04:26.730 --> 00:04:29.949
突然之间你会回到过去，回到开始的时候
And all of a sudden you're going to be way back, right back at the beginning all

84
00:04:29.949 --> 00:04:36.569
同样的怪异和难以理解的代码问题。
the same problems of weirdness and hard to understand code.

85
00:04:38.519 --> 00:04:42.547
我们马上就看到了至少是他们自己的承诺，
Right off the bat we see that Promises at least by themselves,

86
00:04:42.547 --> 00:04:46.115
在一个以事件为导向的世界里不能很好地建模。
are not going to model well in an event oriented world.

87
00:04:46.115 --> 00:04:48.800
我们需要更好的东西。
We're going to need something better.

88
00:04:50.850 --> 00:04:53.990
现在你可以观察到
Now you could observe that

89
00:04:53.990 --> 00:04:58.620
实际上，这根本不是一组异步的步骤。
actually that wasn't fundamentally an asynchronous set of steps anyway.

90
00:04:59.629 --> 00:05:03.480
我们可以回到对我们来说更熟悉的事情，比如列表
And we could fall back to things that are a little more familiar to us like a list

91
00:05:03.480 --> 00:05:08.149
我将事件放入数组的上下文，就像我在3，3和
context where I put my event into an array as I'm doing on 3 three and

92
00:05:08.149 --> 00:05:11.060
然后我调用map、约简和过滤器。
then I call maps and reduces and filters.

93
00:05:11.060 --> 00:05:13.250
你可能会回到同步编程的思维模式
You might go back to a synchronous programming mindset and

94
00:05:13.250 --> 00:05:15.509
说，谁在乎诺言。
say, who cares about the promise.

95
00:05:15.509 --> 00:05:19.509
但我们基本上还是有一个倒置的系统，
But we've still fundamentally got an inverted system here,

96
00:05:19.509 --> 00:05:23.370
其中必须将对事件的响应与事件的设置合并。
where the response to the event has to be conflated with the setup for the event.

97
00:05:23.370 --> 00:05:26.653
我们有生产者和消费者在同一地点。
We have producer and consumer in the same spot.

98
00:05:26.653 --> 00:05:28.170
这不是我们想要的。
And that's not what we want.

99
00:05:28.170 --> 00:05:31.370
我们需要一些东西来弥合差距，以便我们可以将这些担忧分开。
We need something to bridge the gap so that we can separate those concerns.
