WEBVTT

1
00:00:00.025 --> 00:00:03.823
[音乐]
[MUSIC]

2
00:00:03.823 --> 00:00:07.309
&GT；&GT；Kyle：从现场人群中的一些表情判断。
&gt;&gt; Kyle: Judging from some of the looks on the faces in the crowd here in person.

3
00:00:08.779 --> 00:00:09.990
这很有挑战性对吧？
This was challenging right?

4
00:00:11.349 --> 00:00:15.160
我保证这会很有挑战性，我不想轻易放过你。
I promised that it would be challenging, I didn't want to let you off easy.

5
00:00:15.160 --> 00:00:20.019
但实际上，当你意识到这是多么愚蠢的简单时，你可能会踢自己。
But actually you might kick yourself when you realize how stupidly simple this is.

6
00:00:20.019 --> 00:00:22.719
它只需要你训练你的大脑
It just requires you to train your brain to

7
00:00:22.719 --> 00:00:24.379
对这些问题有一些不同的看法。
think a little differently about these problems.

8
00:00:24.379 --> 00:00:25.809
所以我要这么做
So here's what I'm gonna do.

9
00:00:25.809 --> 00:00:28.019
我实际上要反向解决这个问题。
I'm actually gonna solve the problem in reverse.

10
00:00:28.019 --> 00:00:31.370
因为我发现这样做更容易理解。
Cuz I find it easier to understand when I do that.

11
00:00:31.370 --> 00:00:33.909
所以我要做的是假设我有一个getFile
So what I'm gonna do is I'm going to assume that I have a getFile

12
00:00:33.909 --> 00:00:35.649
实现这种魔力的函数。
function that does that magic.

13
00:00:35.649 --> 00:00:38.170
会回来想办法让它变得神奇，但是
And will come back and figure out how to make it do that magic, but

14
00:00:38.170 --> 00:00:40.380
我要谈谈我是如何使用这个函数的。
I'm gonna talk about how I use the function.

15
00:00:41.520 --> 00:00:45.549
所以我需要从getFile中获取一些信息，并且
So I'm going to need to get something back from getFile, and

16
00:00:45.549 --> 00:00:47.100
我拿回来的那件事就是一声巨响。
that thing that I get back is a thunk.

17
00:00:47.100 --> 00:00:50.497
我会有三个，因为我要做三个单独的Ajax
And I'm gonna have three of them because I'm gonna make three separate AJAX

18
00:00:50.497 --> 00:00:51.740
请求。
requests.

19
00:00:51.740 --> 00:00:57.481
所以我把它叫做th1，thunk one，is getFile，file1。
So I'm gonna call it th1, thunk one, is getFile, file1.

20
00:00:57.481 --> 00:01:02.567
Th2是getFile，
And th2 is getFile,

21
00:01:02.567 --> 00:01:08.626
文件2。&gt；&gt；Kyle：和
file2. &gt;&gt; Kyle: And

22
00:01:08.626 --> 00:01:14.299
Th3是getFile，file3，好吗？
th3 is getFile, file3, okay?

23
00:01:16.760 --> 00:01:18.870
现在，这可以解决提出请求的问题，但是
Now, that takes care of making the request, but

24
00:01:18.870 --> 00:01:23.120
它没有考虑到协调他们的反应。
it doesn't take care of coordinating their responses.

25
00:01:23.120 --> 00:01:24.183
所以我要协调他们
So I'm going to coordinate their

26
00:01:24.183 --> 00:01:29.618
回应。&gt；&gt；Kyle：使用
responses. &gt;&gt; Kyle: Using

27
00:01:29.618 --> 00:01:32.319
就像我们知道Thunks的工作方式一样。
exactly the way we know how thunks work.

28
00:01:32.319 --> 00:01:33.729
什么是thunk？
What is a thunk?

29
00:01:33.729 --> 00:01:34.909
它需要一个回调，对吗？
It takes a callback, right?

30
00:01:34.909 --> 00:01:39.930
所以我要调用th1，并给它一个回调，它给我一些文本。
So I'm gonna call th1 and give it a callback which gives me some text.

31
00:01:41.420 --> 00:01:43.770
为了清楚起见，我将其命名为Text1。
And for just clarity's sake I'm gonna call it text1.

32
00:01:43.770 --> 00:01:45.289
我们叫它什么并不重要。
It doesn't matter what we call it.

33
00:01:46.409 --> 00:01:49.549
但我知道当存在Text1时将调用此回调
But I know that this callback will be called when there is a text1

34
00:01:50.719 --> 00:01:51.490
回应。
to respond to.

35
00:01:51.490 --> 00:01:53.640
大家都同意吗？
Does everybody agree with that?

36
00:01:53.640 --> 00:02:00.085
所以我可以在这一点上简单地输出它。&gt；&gt；Kyle：和
So I can simply output it at that point. &gt;&gt; Kyle: And

37
00:02:00.085 --> 00:02:03.549
然后我知道我可以调用Th2并传递一个回调。
then I know I can call th2 and pass in a callback.

38
00:02:09.764 --> 00:02:11.633
&gt；&gt；kyle：在这一点上我知道我可以
&gt;&gt; Kyle: And at this point I know I can

39
00:02:11.633 --> 00:02:16.290
打印出内容。&gt；&gt；Kyle：和
print out the contents. &gt;&gt; Kyle: And

40
00:02:16.290 --> 00:02:18.739
然后我知道我可以用回调来调用它。
then I know I can call th3 with a callback.

41
00:02:22.730 --> 00:02:25.276
&gt；&gt；kyle：并打印出内容，
&gt;&gt; Kyle: And print out the contents,

42
00:02:25.276 --> 00:02:30.412
哎哟。&gt；&gt；Kyle：和
oops. &gt;&gt; Kyle: And

43
00:02:30.412 --> 00:02:36.062
最后打印出我的完整信息。&GT；&GT；Kyle：好的，
finally print out my complete message. &gt;&gt; Kyle: Okay,

44
00:02:36.062 --> 00:02:40.099
现在如果我的思维是懒惰的。
now if my thunk was lazy.

45
00:02:40.099 --> 00:02:45.849
每个人都明白为什么我不并行发出Ajax请求了吗？
Does everybody see why I would not be making my AJAX request in parallel?

46
00:02:47.479 --> 00:02:51.610
如果我的thunks是懒惰的，如果它直到那时才发出这个Ajax请求，
If my thunks were lazy, if it did not make this AJAX request until that point,

47
00:02:51.610 --> 00:02:54.670
它直到Th1完成之后才会提出该请求。
it would not make that request until after th1 had finished.

48
00:02:55.810 --> 00:02:57.050
这是一个有效的解决方案吗？
Is that a valid solution?

49
00:02:57.050 --> 00:03:01.539
是的，除了它违反了我们平行要求的原则。
Yes, except for the fact that it violates our principle of parallel requests.

50
00:03:01.539 --> 00:03:04.870
它可以工作，但不能满足问题的要求。
It would work, but it would not fulfill the requirements of the problem.

51
00:03:04.870 --> 00:03:09.525
所以这个问题的要求是要求我们以某种方式拉一只兔子
So the requirements of the problem are going to ask us to somehow pull a rabbit

52
00:03:09.525 --> 00:03:13.074
脱帽而出，创造出的不是懒惰的思维，而是积极的思维。
out of the hat and create not a lazy thunk, but an active thunk.

53
00:03:14.215 --> 00:03:15.594
好吧。
Okay.

54
00:03:15.594 --> 00:03:18.384
但如果我们真的有一个活跃的思维，大家能明白这是为什么吗？
But if we do have an active thunk, can everybody see why this is

55
00:03:18.384 --> 00:03:22.194
总是要确保它们的响应顺序正确吗？
always going to make sure that they are responded to in the correct order?

56
00:03:23.634 --> 00:03:24.935
这里有几个选择。
There's a couple of options here.

57
00:03:24.935 --> 00:03:30.300
如果我运行th1并打印出其中一个的文本，然后我运行th2。
If I run th1 and I print out the text for one, and then I run th2.

58
00:03:30.300 --> 00:03:35.150
一种选择是Th2已经准备好了，它已经有了响应。
One option is that th2 is already ready to go, it already has a response.

59
00:03:35.150 --> 00:03:38.389
在这种情况下，它马上就会用text2打电话给我，
In which case it's right away gonna call me with text2,

60
00:03:38.389 --> 00:03:41.360
这是一个选项，因为它已经有了那个选项。
that's one option, cuz it already had that one there.

61
00:03:41.360 --> 00:03:42.860
另一种选择是还没有
Another option is that it's not yet

62
00:03:42.860 --> 00:03:46.819
文本2准备好了，这种情况下我会继续等待。
got the text2 ready, which case I'm just gonna keep waiting.

63
00:03:46.819 --> 00:03:50.789
但无论是哪种情况，我都知道一旦它着火了，我确实有一个text2。
But in either case I know that once it does fire I do have a text2.

64
00:03:50.789 --> 00:03:54.460
一旦我到了3，只有两个选择之一。
And once I get to th3 there's only one of two options.

65
00:03:54.460 --> 00:03:56.300
要么是Th3已经完成了，
Either th3 is already finished,

66
00:03:56.300 --> 00:03:59.900
在这种情况下，当我调用它时，我会立即提取值。
in which case when I call it I'm gonna get the value extracted right away.

67
00:03:59.900 --> 00:04:02.949
否则我不会马上提取价值，但是
Or I'm not gonna get the value extracted right away but

68
00:04:02.949 --> 00:04:04.870
我会等到我有了一个值。
I'll wait until I do have a value.

69
00:04:04.870 --> 00:04:09.139
所以在所有可能的组合中，这个表达式，
So in all possible combinations this expression,

70
00:04:09.139 --> 00:04:13.409
这个嵌套的回调表达式将对我的输出进行排序。
this nested callback expression, is going to sequence my output.

71
00:04:13.409 --> 00:04:17.449
我不需要担心任何类型的循环通过某个数组或
And I don't have to worry about any kind of looping through some array or

72
00:04:17.449 --> 00:04:18.670
对象来查找东西。
object to find stuff.

73
00:04:18.670 --> 00:04:20.872
我知道他们会被正确排序的结果。
I know that they're going to be sequenced correctly as a result.

74
00:04:20.872 --> 00:04:23.470
每个人都听我的这个推理，好吗？
Does everybody follow me on that reasoning, okay?

75
00:04:26.329 --> 00:04:30.879
无论你是否意识到，这是一个巨大的巨大进步，我们的
Whether you realize it or not, that's a huge massive improvement over our

76
00:04:30.879 --> 00:04:34.680
之前，我们没有调用任何类型的库或任何奇特的东西。
previous, and we didn't invoke any kind of library or any fancy thing at all.

77
00:04:34.680 --> 00:04:37.129
我们只是以不同的方式使用函数。
We're just using functions in a different way.

78
00:04:37.129 --> 00:04:41.079
当我第一次意识到这一直都是可能的时，这让我大吃一惊。
This blew me away when I first realized that this was possible all along.

79
00:04:41.079 --> 00:04:43.459
我到底为什么写了这么多年，
Why on Earth did I write so many years,

80
00:04:43.459 --> 00:04:47.930
几十年的垃圾代码没有意识到如何更有效地使用我的工具？
decades of crappy code not realizing how to use my tools more effectively?

81
00:04:50.069 --> 00:04:54.029
因为这明显更干净，更容易理解。
Cuz this is significantly more clean and understandable.

82
00:04:54.029 --> 00:04:57.230
它并不完美，但它比我们在练习一中写的要好得多。
It's not perfect, but it's way better than what we wrote in exercise one.

83
00:04:58.990 --> 00:05:03.009
现在我知道这就是我需要想出来的
Now that I know that that's what I need to come up with,

84
00:05:03.009 --> 00:05:05.899
我需要弄清楚是否有可能解决。
I need to figure out whether it's even possible to solve.

85
00:05:05.899 --> 00:05:08.709
这颗银弹，这颗活跃的子弹。
This silver bullet, this active thunk.

86
00:05:10.360 --> 00:05:11.430
所以我们要这么做
So here's how we're gonna do that.

87
00:05:12.850 --> 00:05:16.800
我们将观察到，每个thunk都有两种可能的情况。
We're going to observe that there are two possible cases for every thunk.

88
00:05:18.120 --> 00:05:22.800
首先，我们知道自己是一个活跃的Thunk
First of all we know to be an active thunk

89
00:05:22.800 --> 00:05:26.002
我们需要立即调用假Ajax调用。
we are going to need to call the fake AJAX call right away.

90
00:05:26.002 --> 00:05:27.970
大家都同意吗？
Does everybody agree with that?

91
00:05:27.970 --> 00:05:29.040
使用文件URL，以及
With the file URL, and

92
00:05:29.040 --> 00:05:35.389
我们需要向它传递一些获得响应的回调。
we're going to need to pass it some callback that gets a response.

93
00:05:35.389 --> 00:05:38.600
这必须发生在我们调用getFile的时候。
That's gonna have to happen right at the time we call getFile.

94
00:05:38.600 --> 00:05:44.569
如果后来发生了这种情况，那么我们就会有一个懒惰的想法，我们的解决方案就失败了，好吧。
If that happens later then we have a lazy thunk and we've failed our solution, okay.

95
00:05:44.569 --> 00:05:47.319
我们还知道thunk必须返回一个函数。
We also know that a thunk has to return a function.

96
00:05:48.879 --> 00:05:51.406
并且该函数只需要接收一个参数，即
And that function needs to receive only one argument which is

97
00:05:51.406 --> 00:05:53.519
回拨。&gt；&gt；Kyle：所以
a callback. &gt;&gt; Kyle: So

98
00:05:53.519 --> 00:05:57.209
大家都明白这个道理吗？
everybody understand that reasoning?

99
00:05:59.199 --> 00:06:03.990
因此，通过这种设置，我们需要获得第24行和第28行
So with this setup we have line 24 and line 28 need to get

100
00:06:03.990 --> 00:06:08.120
以某种方式连接在一起。
bridged together in some way.

101
00:06:08.120 --> 00:06:11.170
要么第24行运行在第28行之前，
Either line 24 is going to run before line 28,

102
00:06:11.170 --> 00:06:13.819
或者第28行将在第24行之前运行。
or line 28 is going to run before line 24.

103
00:06:13.819 --> 00:06:16.764
这是仅有的两种可能的结果。
Those are the only two possible outcomes.

104
00:06:18.845 --> 00:06:20.245
所以我们需要在两者之间架起桥梁
So we need to bridge the two and

105
00:06:20.245 --> 00:06:24.415
我们将通过独立地查看这两个场景来实现这一点。
we're gonna do that by looking at both scenarios independently.

106
00:06:24.415 --> 00:06:30.485
因此，让我们想象一个例子，第24行首先运行，然后是第28行。
So let's imagine for an example that line 24 runs first, before line 28.

107
00:06:30.485 --> 00:06:35.170
假设第24行已经运行，这意味着我们得到了响应。
So let's say line 24 has run, that means we got the response back.

108
00:06:35.170 --> 00:06:36.959
但是我们还没有叫我们的thunk。
But we have not yet called our thunk.

109
00:06:38.420 --> 00:06:40.129
我们需要保持这种反应，
We're gonna need to hold onto that response,

110
00:06:40.129 --> 00:06:41.509
每个人都同意这个推理吗？
does everybody agree with that reasoning?

111
00:06:42.740 --> 00:06:43.889
所以我要这么做
So here's what I'm gonna do.

112
00:06:43.889 --> 00:06:47.350
在我的闭包中，我将有一个称为text的变量。
I'm going to, in my closure, have a variable called text.

113
00:06:48.639 --> 00:06:54.430
我要说的是文本=响应。
And what I'm going to say is text = response.

114
00:06:54.430 --> 00:06:59.540
现在第30行，这是之前的第28行。
Now on line 30 now, which was the previous line 28.

115
00:06:59.540 --> 00:07:05.699
当第30行稍后运行时，我有一个回调和一些响应文本。
When line 30 runs at a later time, I have a callback and I have some response text.

116
00:07:06.910 --> 00:07:08.579
所以我不能只说cb(文字)吗。
So couldn't I just say cb(text).

117
00:07:08.579 --> 00:07:11.930
大家都看到我是怎么做到的了吗？
Does everybody see how I did that?

118
00:07:13.949 --> 00:07:16.000
这只是我们两个场景中的一个，但是
That's only one of our two scenarios but

119
00:07:16.000 --> 00:07:18.089
我只想让你明白我们是如何沟通的。
I just want you to understand how we're bridging.

120
00:07:18.089 --> 00:07:22.000
在一个场景中，我们通过保存文本和
In the one scenario we're bridging by saving the text and

121
00:07:22.000 --> 00:07:24.839
然后稍后将其传递到回调中。
then passing it into the callback at a later time.

122
00:07:24.839 --> 00:07:28.319
好了，现在让我退后。
Okay, now let me back up.

123
00:07:28.319 --> 00:07:35.740
现在让我们想象一下，在第26行之前，首先运行的是第30行。
Let's imagine that now instead that it's line 30 that runs first, before line 26.

124
00:07:35.740 --> 00:07:39.759
所以第30行得到了一个回调，但是
So Line 30 gets a callback but

125
00:07:39.759 --> 00:07:43.970
我们还没有准备好使用那个回调，是吗？
we're not ready to use that callback yet, are we?

126
00:07:43.970 --> 00:07:46.836
所以如果我们把它保存下来，如果我们说fn=
So what if we save it off, what if we say fn =

127
00:07:46.836 --> 00:07:52.175
CB。&gt；&gt；Kyle：和
cb. &gt;&gt; Kyle: And

128
00:07:52.175 --> 00:07:57.784
然后，当这26行运行时，我有一个回调要传递我的东西，我可以
then when this line 26 runs I have a callback to pass my stuff to, I can just

129
00:07:57.784 --> 00:08:03.413
只需将响应直接传递到fn。&gt；&gt；Kyle：Do
simply pass response directly into fn. &gt;&gt; Kyle: Does

130
00:08:03.413 --> 00:08:08.939
大家都看到了吗？&gt；&gt；Kyle：所以在这两种情况中的任何一种
everybody see that? &gt;&gt; Kyle: So in either of

131
00:08:08.939 --> 00:08:14.896
这两个场景我有办法弥合差距，而这个桥梁就是结束。
those two scenarios I have a way to bridge the gap and that bridge is closure.

132
00:08:14.896 --> 00:08:18.495
现在我只需要把这两个解决方案放在一起，好吧。
Now I just need to put those two solutions together, okay.

133
00:08:18.495 --> 00:08:21.153
所以我要做的，我会从头开始。
So what I'm going to do, I'll start back at scratch.

134
00:08:21.153 --> 00:08:26.600
我要做的是设置一个if语句来请求这两个条件。
What I'm going to do is set up an if statement to ask for these two conditions.

135
00:08:26.600 --> 00:08:33.600
所以在第26行，我要问的是fn是否已经设置。
So on line 26 what I'm going to ask is if fn has been set.

136
00:08:35.259 --> 00:08:37.580
那我知道另一个先叫了，对吧，
Then I know that the other one has been called first, right,

137
00:08:37.580 --> 00:08:39.529
因为这是唯一的方法。
cuz that's the only way it gets set.

138
00:08:39.529 --> 00:08:42.169
这意味着我可以用我刚刚得到的东西直接调用它。
Which means I can simply call it right away with what I just got.

139
00:08:44.009 --> 00:08:45.711
如果尚未设置fn，
If fn has not been set,

140
00:08:45.711 --> 00:08:52.422
我需要保存响应。&gt；&gt；Kyle：在这里，
I need to save the response. &gt;&gt; Kyle: Down here,

141
00:08:52.422 --> 00:08:54.399
我们要做相反的逻辑。
we're gonna do the reverse if logic.

142
00:08:55.679 --> 00:09:01.950
如果文本已设置，则我知道我可以继续并将其发送给CB。
If the text has been set, then I know I can just go ahead and send it to cb.

143
00:09:03.309 --> 00:09:05.873
否则，我需要保存我的回拨。
Otherwise, I need to save off my callback.

144
00:09:14.722 --> 00:09:15.929
&GT；&GT；Kyle：你们中很少有人有这种感觉。
&gt;&gt; Kyle: Few of you had that.

145
00:09:15.929 --> 00:09:17.857
我让那个矿井像[声音]一样爆炸了。
I had that mine exploding like [SOUND].

146
00:09:17.857 --> 00:09:18.649
怎么了？
What?

147
00:09:18.649 --> 00:09:22.590
怎么会有这样的事而我根本不知道呢？
How has this been around and I just never even knew it?

148
00:09:22.590 --> 00:09:26.009
在我多年的JavaScript生涯中，为什么从来没有人教过我这一点呢？
Why didn't anybody ever teach me this in all my years of JavaScript?

149
00:09:27.350 --> 00:09:28.500
我不需要什么图书馆。
I don't need some library.

150
00:09:29.519 --> 00:09:33.698
我只需要知道如何更好地使用我已经拥有的工具。
I just need to know how to better use the tools I already have.

151
00:09:39.154 --> 00:09:40.586
&GT；&GT；Kyle：我看了，
&gt;&gt; Kyle: I've looked, and looked,

152
00:09:40.586 --> 00:09:45.190
并为这两个国家的闭合的这种模式寻找了一个名字。
and looked for a name for this pattern of bridging the closure of these two states.

153
00:09:45.190 --> 00:09:48.639
实际上，我问过函数式编程开发人员和
And really, I've asked functional programming developers and

154
00:09:48.639 --> 00:09:51.090
其他人我怎么称呼这个模式？
other people what do I call this pattern?

155
00:09:51.090 --> 00:09:53.129
没有人能给它起个好名字。
Nobody has any good name for it.

156
00:09:53.129 --> 00:09:57.879
所以我把它叫做主动对被动，或者主动对懒惰。
So I just call it active versus passive, or active versus lazy thunks.

157
00:09:57.879 --> 00:10:00.379
因为我没有更好的术语来形容它。
Cuz I don't have any better term for it.

158
00:10:00.379 --> 00:10:02.070
但几年前当我发现这个的时候，
But when I discovered this a few years ago,

159
00:10:03.809 --> 00:10:05.350
我开始到处使用它。
I started using it all over the place.

160
00:10:05.350 --> 00:10:09.929
事实上，我意识到我之前已经摸索到了这个解决方案
And in fact, I realized I'd already kind of fumbled upon that solution before

161
00:10:09.929 --> 00:10:11.669
在我早期的一些图书馆里。
in some of my earlier libraries.

162
00:10:11.669 --> 00:10:15.450
因为在我有承诺之前我需要一些像承诺一样的东西。
Because I needed something like a promise before I had promises.

163
00:10:15.450 --> 00:10:20.279
我在过去偶然发现了一些类似的东西。
And I had accidentally stumbled upon something kind of like this in the past.

164
00:10:20.279 --> 00:10:23.822
然后我意识到，哇，这实际上是我在里面到处使用的模式
And then I realized, wow, that's actually a pattern I use all over place inside of

165
00:10:23.822 --> 00:10:31.304
那里的各种图书馆，对。&gt；&gt；Kyle：所以
the various libraries there, right. &gt;&gt; Kyle: So

166
00:10:31.304 --> 00:10:34.051
这是使用回调和
it's a more effective way of using the callbacks and

167
00:10:34.051 --> 00:10:36.558
我们在语言中已经有的闭包。
closures that we already have in the language.

168
00:10:37.970 --> 00:10:39.100
再一次，带走。
And again, the take away.

169
00:10:40.129 --> 00:10:44.029
我们已经完全将时间作为方程之外的状态考虑在内。
We have completely factored time as a state out of the equation.

170
00:10:44.029 --> 00:10:44.990
我们不用担心。
We don't have to worry about it.

171
00:10:44.990 --> 00:10:50.070
我们设置这个代码一次，这就像管道。
We set this code up once, this is like plumbing.

172
00:10:51.860 --> 00:10:55.269
这是我们反复编写的程序代码。
This is the program code that we write over, and over, and over, and over again.

173
00:10:56.460 --> 00:10:58.480
这就是我们不必担心时间的地方。
And this is the part where we don't have to worry about time.

174
00:10:58.480 --> 00:11:02.009
因为那部分已经为我们处理好了。
Cuz that part's already been taken care of for us.

175
00:11:03.549 --> 00:11:06.583
因此，它使我们的代码从根本上更容易推理。
So it makes our code fundamentally easier to reason about.

176
00:11:15.890 --> 00:11:16.878
&GT；&GT；Kyle：好的，
&gt;&gt; Kyle: Okay,

177
00:11:16.878 --> 00:11:20.799
所以&gt；&gt；Kyle：那是雷声。
so &gt;&gt; Kyle: that's thunks.

178
00:11:22.490 --> 00:11:27.799
下一步，当我们重归于好时，就是理解承诺是如何实现的
The next step, when we get back together, is to understand how promises

179
00:11:27.799 --> 00:11:32.009
再加上这个模式，给我们提供更多的解决方案。
add on to that pattern and give us even more of a solution.

180
00:11:32.009 --> 00:11:34.600
承诺不能代替雷霆。
Promises are not a replacement for thunks.

181
00:11:34.600 --> 00:11:38.639
因为在我的图书馆里，我在制造雷声，我的意思是我在做出承诺，
Cuz inside of my libraries that I'm making thunks, I mean that I'm making promises,

182
00:11:38.639 --> 00:11:39.159
我用雷鸣。
I use thunks.

183
00:11:40.279 --> 00:11:41.830
雷鸣是你可以使用的东西，
Thunks are things that you can use,

184
00:11:41.830 --> 00:11:45.740
这是解决异步排序问题的一种非常轻量级的方法。
it's a very lightweight way of solving asynchronous sequencing issues.

185
00:11:45.740 --> 00:11:49.940
而不必调用一些巨大的库或一些疯狂的API或
Without having to invoke some huge library or some crazy API or

186
00:11:49.940 --> 00:11:53.082
类似这样的东西，这是一种非常轻便，简单的方式。
something like that, it's a very lightweight, easy way of doing it.

187
00:11:53.082 --> 00:11:56.899
需要一些练习才能让你的大脑绕过那个模式，
It's gonna take some practice to wrap your brain around that pattern,

188
00:11:56.899 --> 00:11:58.090
我花了不少时间练习。
it took me quite a bit of practice.

189
00:11:58.090 --> 00:12:02.750
会高度鼓励你从现在到下一次我们聚在一起
Would highly encourage you between now and the next time we get together for

190
00:12:02.750 --> 00:12:05.529
这个车间，花点时间回顾一下。
this workshop, spend some time going back over that.

191
00:12:05.529 --> 00:12:06.970
从空白文件尝试
Try that from blank file and

192
00:12:06.970 --> 00:12:10.009
看看你能不能重现我刚才重现的那个推理。
see if you can recreate that same reasoning that I just recreated.

193
00:12:11.470 --> 00:12:15.210
如果你这样做，我们对承诺的探索将会有更多的成果。
It'll make our exploration of promises a lot more fruitful for you if you do.
