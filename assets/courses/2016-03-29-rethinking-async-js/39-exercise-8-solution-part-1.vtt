WEBVTT

1
00:00:00.230 --> 00:00:06.339
&gt；&gt；Kyle Simpson：有几个不同的
&gt;&gt; Kyle Simpson: There are several different

2
00:00:06.339 --> 00:00:12.199
你可以尝试从流的角度来模拟我所要求的，
ways that you could try to model what I asked for from a stream's perspective,

3
00:00:12.199 --> 00:00:16.769
我尝试了几种不同的建模方法。
and I have attempted several different ways of modeling this.

4
00:00:16.769 --> 00:00:20.390
因此，我将向您介绍一种建模方法
And so, I'm gonna walk you through one way of modeling it and

5
00:00:20.390 --> 00:00:25.370
然后告诉你为什么这不是一个好主意，然后告诉你第二种方法，好吗？
then show you why that's not a good idea and then show you a second way, okay.

6
00:00:25.370 --> 00:00:28.160
但这并不是唯一的方法。
But that's not at all the only ways to do it.

7
00:00:28.160 --> 00:00:32.320
对此有不同的思考方式，其中一件事就是成为
There are different ways of thinking about it and one of the things about becoming

8
00:00:32.320 --> 00:00:36.189
一个好的反应式编程开发人员应该了解所有
a good reactive programming developer is understanding all

9
00:00:36.189 --> 00:00:38.979
您可以使用的工具来了解我们如何混合和
the tools that are available to you in understanding how we can mix and

10
00:00:38.979 --> 00:00:44.570
匹配这些不同的更高级别的流操作以实现我们的目标。
match these different higher level stream operations to accomplish our goals.

11
00:00:44.570 --> 00:00:49.479
老实说，这仍然是我正在积极学习的一条道路。
That is still a path that I am actively learning on, to be completely honest.

12
00:00:49.479 --> 00:00:53.829
我不会以任何方式，形状或形式表明我是这方面的大师。
And I wouldn't in any way, shape or form suggest that I'm a master of that.

13
00:00:53.829 --> 00:00:58.079
我仍然在尝试更好地学习如何在流中对这些类型的东西进行建模。
I am still trying to learn better how to model these sorts of things in streams.

14
00:00:59.079 --> 00:01:03.509
因此，思考这个问题的一种方式是我们可以将点击看作单个
So, one way of thinking about this is we could think about the clicks as a single

15
00:01:03.509 --> 00:01:08.700
数据流和作为第二个流行进的计时器。
stream of data and the timer that's marching as a second stream.

16
00:01:08.700 --> 00:01:13.289
我们可以说，如果我把这两个流组合在一起，我会做什么。
And we could say what am I gonna do if I compose those two streams together.

17
00:01:13.289 --> 00:01:15.480
所以，让我们开始吧，让我们看看它是如何工作的。
So, let's start that and let's see how that works.

18
00:01:15.480 --> 00:01:19.280
让我们调用，让我们为我们的点击创建一个流。
Let's call let's make one stream for our clicks.

19
00:01:19.280 --> 00:01:21.140
我在幻灯片中向你们展示了最简单的，
And I showed you in the slides that the simplest,

20
00:01:21.140 --> 00:01:26.980
创建我们可以将数据推送到其中的空流的最简单方法是说.of。
easiest way to make an empty stream that we can push data into is to say .of.

21
00:01:26.980 --> 00:01:33.640
让我们制作另一个计时器，因为计时器是ASQ.react.of。
And let's make another one for the timer is ASQ.react.of.

22
00:01:33.640 --> 00:01:36.189
让我们看看这对我们来说是怎样的，看看是否
Let's just see how this works out for us and see whether or not

23
00:01:40.090 --> 00:01:43.947
这就是我们想要走的路。
This is gonna be the path that we wanna go down.

24
00:01:43.947 --> 00:01:50.270
所以每次我收到Click事件时，我都可以说Clicks.push和
So clicks, every time I get a click event, I could say clicks.push and

25
00:01:50.270 --> 00:01:55.159
将事件推入管道末端，流的末端。
push an event into the end of the pipe, into the end of the stream.

26
00:01:55.159 --> 00:01:58.599
然后，在外面我会收到那个事件，
And then, on the outside of it I'm gonna receive that event,

27
00:01:58.599 --> 00:02:00.890
当然，这是一种方法。
of course, that's one way of doing that.

28
00:02:00.890 --> 00:02:05.090
我可以给自己设定一个间隔，让自己每隔一段时间就跑一次
And I could set myself up an interval to run every

29
00:02:05.090 --> 00:02:09.700
1000毫秒&gt；&gt；Kyle Simpson：以及
1000 milliseconds. &gt;&gt; Kyle Simpson: And

30
00:02:09.700 --> 00:02:11.960
我可以把它的定时器推下来。
I could push a timer of that down.

31
00:02:13.530 --> 00:02:17.250
事实上，你可以说这是一个很常见的模式，我应该有一些
In fact, you could say that's such a common pattern I ought to have some little

32
00:02:17.250 --> 00:02:19.960
用于将计时器事件向下推的适配器，对吗？
adapter for pushing timer events down, right?

33
00:02:19.960 --> 00:02:24.229
所以，是的，我们可能想为我们自己创造一个小工具
So yeah, we might wanna create ourselves a little utility for

34
00:02:24.229 --> 00:02:29.759
制作定时器流以将定时器事件向下推。
making a timer stream to push timer events down.

35
00:02:29.759 --> 00:02:33.860
但是也许我们不会去推动任何事情，仅仅是有一个事实，那就是有一个事件
But maybe we're not going to push anything that just the fact that there's an event

36
00:02:33.860 --> 00:02:37.870
没有数据可以推送，所以在称为点推送的过程中，这里没有事件。
that there's no data to push along so in that called dot push was no events here.

37
00:02:37.870 --> 00:02:40.439
所以现在，我有两个不同的流，我可以考虑
So now, I have two different streams and I could think about

38
00:02:40.439 --> 00:02:45.500
我有什么可能的方式将两个流合并成一个合成的第三个流。
what are my possible ways of merging two streams into a synthetic third stream.

39
00:02:45.500 --> 00:02:50.900
嗯，我真正想要的是我想发送一个活动
Well, what I really want is I want to send an event out

40
00:02:50.900 --> 00:02:55.069
只要这两件事都发生过一次。
whenever both of those things have happened once.

41
00:02:55.069 --> 00:02:59.789
或者无论何时只要有一个事件准备好了，这两个都是我想要的
Or whenever there is an event ready with both of those that's when I want

42
00:02:59.789 --> 00:03:03.129
我的合成事件将被激发，这将是我发出的消息。
my synthetic event to fire which is gonna be my messages that go out.

43
00:03:03.129 --> 00:03:07.689
因此，您可以将其建模为与其在反应中称为Zip的方式相同
So, you could model this the same that by the way it's called Zip in the reacts

44
00:03:07.689 --> 00:03:09.650
反应式扩展世界。
the reactive extensions world.

45
00:03:09.650 --> 00:03:12.270
如果你喜欢这里，你可以使用.zip或者
You can used .zip if you like here or

46
00:03:12.270 --> 00:03:16.060
我喜欢把它叫做dot all，因为它正在等待它们全部出现。
I like to call it dot all because it is waiting for all of them to show up.

47
00:03:17.210 --> 00:03:22.099
因此，我们可以将其建模为ASQ.react.all和
So, we could model this is saying ASQ.react.all And

48
00:03:22.099 --> 00:03:25.079
给它两个流，给它点击和定时器流。
give it both streams give it the clicks and the timer stream.

49
00:03:26.139 --> 00:03:29.719
这将是我们称之为的新闻流，
And that's going to be a NEWS STREAM that we call,

50
00:03:33.689 --> 00:03:35.770
我不知道我不会给它起个好名字所以
I don't know I'm not coming up with a good name for it so

51
00:03:35.770 --> 00:03:38.680
我们就叫它准备好了，我准备打印出一条消息或者
let's just call it ready I'm ready to print out a message or

52
00:03:38.680 --> 00:03:42.490
也许我就把它叫做消息流，好吧。
maybe I'll just call it the messages stream, okay.

53
00:03:42.490 --> 00:03:44.400
这就是我的新消息流，并且
So that's my new messages stream, and

54
00:03:44.400 --> 00:03:48.000
我可以说消息流将接收
I could say the messages stream is going to receive

55
00:03:48.000 --> 00:03:53.050
每次队列中有来自这两个流的东西时都会发生事件。
an event every time there's something in the queue from both of these two streams.

56
00:03:53.050 --> 00:03:54.280
那就是它将继续前进的时候。
That's when it's going to move on.

57
00:03:55.710 --> 00:03:59.699
但是它将要打印出来的东西或者它将要继续的东西
But the thing that it's going to print out or the thing that it's going to move on

58
00:03:59.699 --> 00:04:03.090
将是事件对象和
is going to be a combination of an event object and

59
00:04:03.090 --> 00:04:05.620
一个未定义的值，因为我在这里不推送任何东西。
an undefined value because I don't push anything in here.

60
00:04:07.539 --> 00:04:12.960
因此，我可以通过这样的方式订阅该流，即每次出现新事件时都会这样说。
So, I could subscribe to that stream by saying every time a new event comes in.

61
00:04:12.960 --> 00:04:16.384
我知道我会在这里得到一些数据，但我实际上并不关心
I know I'm gonna get some data in here but I actually don't really care about

62
00:04:16.384 --> 00:04:21.822
数据。&gt；&gt；Kyle Simpson：那么，
the data. &gt;&gt; Kyle Simpson: So,

63
00:04:21.822 --> 00:04:26.237
我知道每次合成消息时都会调用这个val函数
I know that this val function is gonna get called every time the message's synthetic

64
00:04:26.237 --> 00:04:28.012
流有东西可以给我。
stream has something to give me.

65
00:04:28.012 --> 00:04:33.941
我可以拿到$.list
And I could take $.list and

66
00:04:33.941 --> 00:04:40.856
我可以在名单上加上一个部门
I could append to that list a Div,

67
00:04:40.856 --> 00:04:45.303
上面写着点击
that says clicked for

68
00:04:45.303 --> 00:04:49.019
举个例子好吗？
example, okay?

69
00:04:50.189 --> 00:04:51.170
现在，如果你运行这个代码，
Now, if you ran this code,

70
00:04:51.170 --> 00:04:54.240
你会得到一些接近你所希望的东西。
you're going to get something approximating what you were hoping for.

71
00:04:54.240 --> 00:04:57.629
但这里有更深层次的东西我想让我们
But there's something deeper here that I want us to

72
00:04:57.629 --> 00:05:00.410
开始发展一些本能。
begin to develop some instinct about.

73
00:05:00.410 --> 00:05:02.420
首先，有没有人试图沿着这条路走下去？
First of all, did anybody try to go down this path?

74
00:05:02.420 --> 00:05:04.819
这是你走过的路吗？
Is this the path that you went down anybody?

75
00:05:04.819 --> 00:05:07.709
好的，所以你做到了。
Okay, so you did.

76
00:05:07.709 --> 00:05:11.660
接下来会发生的是我们正在注入
What's gonna happen here is that we're pumping in

77
00:05:11.660 --> 00:05:15.680
点击进入这个管道的末端，没有任何东西会丢弃事件。
the clicks into the end of this pipe and there's nothing throwing away events.

78
00:05:17.720 --> 00:05:22.689
这并不是真正的采样，因为我们没有等待的东西
This isn't really sampling in the sense that the stuff that we're not waiting for

79
00:05:22.689 --> 00:05:23.920
被丢弃了。
is getting thrown away.

80
00:05:23.920 --> 00:05:28.370
所以，这里会排起长队
So, there's gonna be a queue inside of here that's gonna be stacking up

81
00:05:28.370 --> 00:05:31.970
这些事件中有多少将会堆积起来。
how many of those events are firing is going to be stacking those up.

82
00:05:31.970 --> 00:05:34.879
因此，如果您尝试这样做，如果您单击该按钮，将会发生什么情况
So ,what would happen if you tried this is if you click the button

83
00:05:34.879 --> 00:05:37.423
一大堆时间，然后停止点击。
a whole bunch of times and then stopped clicking.

84
00:05:37.423 --> 00:05:41.250
你将开始看到每秒一次的点击
You're gonna start just seeing the click happen once a second

85
00:05:41.250 --> 00:05:45.199
因为它排出了已经堆积起来的点击队列。
as it drains out that queue of clicks that have piled up.

86
00:05:47.029 --> 00:05:50.480
这并不是我们想要的采样
Which isn't really exactly what we're wanting we're wanting sampling

87
00:05:50.480 --> 00:05:52.230
掉东西的地方不在那里。
which is dropping stuff isn't there.

88
00:05:52.230 --> 00:05:58.310
我们看到了特定流操作的概念性问题，因为
We see the conceptual problem there with that particular stream operation because

89
00:05:58.310 --> 00:06:03.810
我们可以用.zip提供的是它不会为我们丢弃东西。
what we have available to us with the .zip is it's not gonna drop stuff for us.

90
00:06:03.810 --> 00:06:06.279
这不是那个特定流的定义
That's not the definition of that particular stream

91
00:06:06.279 --> 00:06:06.850
手术。&gt；&gt；扬声器2：那么，
operation. &gt;&gt; Speaker 2: So,

92
00:06:06.850 --> 00:06:08.829
这不像是很难观察到的
this isn't like a hard observable and

93
00:06:08.829 --> 00:06:10.509
黑克斯椅&GT；&GT；凯尔·辛普森：那么，
hacks chair &gt;&gt; Kyle Simpson: So,

94
00:06:10.509 --> 00:06:13.930
RxJS确实有一个想法，我不想陷入所有的复杂性。
RxJS does have a notion, I didn't wanna get into all the complexities that.

95
00:06:13.930 --> 00:06:18.240
它们确实有热与冷可观测的概念，并且
They do have a notion of hot versus cold observables, and

96
00:06:18.240 --> 00:06:23.420
在RxJS术语中，这意味着什么，让我确保我做对了。
in RxJS terminology what that means is, let me make sure I get this right.

97
00:06:23.420 --> 00:06:26.060
如果你有一个寒冷的观察者。
If you have a cold observable.

98
00:06:26.060 --> 00:06:31.439
然后，除非有人在另一端观察，否则不会有任何东西进入流中
Then, nothing goes into the stream unless somebody is on the other end observing it

99
00:06:31.439 --> 00:06:32.959
如果你有一个热的可观察到的。
and if you have a hot observable.

100
00:06:32.959 --> 00:06:36.670
我不知道我可能会把它倒过来，但他们确实有这样的想法
I don't know I might be getting that backwards but they do have this notion of

101
00:06:36.670 --> 00:06:40.959
处理这种堆积如山的事件，没有人观察它。
dealing with this piling up of events of nobody's observing it.

102
00:06:40.959 --> 00:06:43.779
但在我们的特殊情况下，这实际上并不重要，因为
But in our particular case, it actually wouldn't matter because

103
00:06:43.779 --> 00:06:46.249
不管你在这里看到的是热的还是冷的。
whatever whether you had a hot or a cold observable here.

104
00:06:47.850 --> 00:06:50.545
你还在你的.all上观察它。
You're still observing it on your .all.

105
00:06:50.545 --> 00:06:54.149
你的.zip正在观察你的观察值。
Your .zip is observing your observables.

106
00:06:54.149 --> 00:06:57.519
所以，在这个特殊的情况下，它是冷的还是热的都没有关系。
So, it wouldn't matter whether it was cold or hot in this particular case.

107
00:06:57.519 --> 00:07:00.250
所以，RxJS就是这样的世界。
So, there is that world in RxJS.

108
00:07:00.250 --> 00:07:04.149
这是您在学习RxJS时必须学习的另一个复杂性
That's another one of those complexities you have to learn when you learn RxJS is

109
00:07:04.149 --> 00:07:05.920
热观测和冷观测之间的区别。
the difference between hot and cold observables.

110
00:07:08.100 --> 00:07:13.040
基本上，我试图从反应序列中去掉同样多的区别，
Basically, I tried to remove as much of that distinction from reactive sequences,

111
00:07:13.040 --> 00:07:15.670
因为我发现这比好处更复杂。
because I find that to be more complex than beneficial.

112
00:07:16.889 --> 00:07:21.319
但是，好的，所以这种思考事情的方式并不是真正完成我们的
But, okay, so this way of thinking about things is not really accomplishing our

113
00:07:21.319 --> 00:07:24.569
总体目标是从流中丢弃东西进行采样。
overall goal of sampling with throwing things away from the stream.

114
00:07:24.569 --> 00:07:28.660
我们能不能用另一种东西来手动排干溪流？
Could we set ourselves up with another thing that manually drains the stream?

115
00:07:29.980 --> 00:07:34.899
就像每当这个计时器启动时，我们可以手动做梦
Like whenever this timer fires we could manually dream

116
00:07:34.899 --> 00:07:38.189
排干点击流，直到有一个，然后将其推回。
drain the click stream until there was one and push it back in.

117
00:07:38.189 --> 00:07:40.350
是的，我们可以去那个方向。
Yeah, we could go that direction.

118
00:07:40.350 --> 00:07:44.319
我试过一次，我真的这么做了，我只是想
And I tried that one time I actually did that I just would

119
00:07:44.319 --> 00:07:46.949
近似这个我就像我会排干这条小溪
approximate this I was like I'll drain the stream and

120
00:07:46.949 --> 00:07:50.370
然后，不管最后一个是什么，我都会再推回去，然后。
then whatever that last one is I'll push it right back again and then.

121
00:07:50.370 --> 00:07:54.870
所以这是一种方式，但这并不是真正的接受成语
So that is one way of going about it but that's not really embracing the idiom of

122
00:07:54.870 --> 00:07:57.889
以你可能想要的方式进行反应式编程，好吗？
reactive programming the way you probably want to, okay?

123
00:07:57.889 --> 00:08:00.389
所以，我想说的是有很多不同的方式
So, the point I'm trying to make is there's a lot of different ways

124
00:08:00.389 --> 00:08:02.470
穿着这个出去。
to go out in this.

125
00:08:02.470 --> 00:08:04.550
我要向你建议
I'm going to suggest to you

126
00:08:06.410 --> 00:08:09.810
实现采样目标的另一种方法。
another way of approaching this that accomplishes our goal of sampling.

127
00:08:12.000 --> 00:08:13.199
所以我要做的是。
So, what I'm gonna do.

128
00:08:13.199 --> 00:08:17.000
我仍然会点击它，但我不会做定时器流。
I'm still gonna have a clicks of it but I'm not gonna do a timer stream.

129
00:08:17.000 --> 00:08:18.750
我要做一个信息流。
I am gonna do a messages stream.

130
00:08:22.509 --> 00:08:26.779
我会跟踪最新的
And I'm gonna keep track of the latest

131
00:08:26.779 --> 00:08:28.910
从点击流下来的事件消息。
event message to come down the click stream.

132
00:08:28.910 --> 00:08:31.410
我将在一个自由变量中跟踪它，
I'm gonna keep track of that in a free variable,

133
00:08:31.410 --> 00:08:32.870
在我的闭包中的变量中。
in a variable that's in my closure.

134
00:08:32.870 --> 00:08:33.879
我就叫它最新的。
I'm just gonna call it latest.

135
00:08:35.549 --> 00:08:38.429
我可以把它包在它自己的外壳里，
I could wrap that up inside of its own enclosure,

136
00:08:38.429 --> 00:08:39.929
就像我们在函数式编程中做的那样。
like we did in functional programming.

137
00:08:39.929 --> 00:08:43.970
我可以做一个纯净的包装纸，但我在这里太懒了，我只是试着
I could make a pure wrapper around it, but I'm being lazy here, and I'm just trying

138
00:08:43.970 --> 00:08:50.730
为了说明一个概念，我可以跟踪最近发生的事件。
to illustrate a concept, that I could keep track of the latest event that's happened.

139
00:08:50.730 --> 00:08:55.529
所以举个例子，我可以说的是每次
So for example, what I could say is every time that

140
00:08:55.529 --> 00:08:59.539
这已经发生了，我可以说最新的等于EVT。
this has happened, I can say latest is equal to EVT.

141
00:08:59.539 --> 00:09:03.750
然后，在我设定的时间间隔内，
And then, inside of my set interval,

142
00:09:03.750 --> 00:09:09.870
不会再推了，但是
not gonna be pushing on that anymore, but

143
00:09:09.870 --> 00:09:15.480
在我设置的时间间隔内，我要做的是，无论何时触发，如果是最新的
inside of my set interval, what I'm going to do is if whenever this fires, if latest

144
00:09:15.480 --> 00:09:21.480
已经设置了，也就是说，我知道队列中有一个等待单击事件。
has been set, that is, I know that there's a waiting click event in the queue.

145
00:09:21.480 --> 00:09:23.023
然后，我会继续
Then, I'm going to go ahead and

146
00:09:23.023 --> 00:09:26.903
推入消息队列。&gt；&gt；Kyle Simpson：以及
push into the messages queue. &gt;&gt; Kyle Simpson: And

147
00:09:26.903 --> 00:09:30.460
我只需继续并推送单击的消息。
I'll just go ahead and push the message clicked.

148
00:09:30.460 --> 00:09:32.933
这样我就可以推送那个信息了
That way I actually can push that message

149
00:09:32.933 --> 00:09:37.729
一起去。&gt；&gt；Kyle Simpson：那
along. &gt;&gt; Kyle Simpson: That

150
00:09:37.729 --> 00:09:41.855
部分并不是严格必需的，但它确实说明了一个事实
part's not strictly necessary, but it does illustrate the fact that I

151
00:09:41.855 --> 00:09:45.129
可以在其中生成包含其他数据片段的流。
can make a stream with other pieces of data in it.

152
00:09:45.129 --> 00:09:47.370
所以，我会这样做，然后我会将最新的重置为
So, I'm gonna do that, and then I'm going to reset latest back to

153
00:09:47.370 --> 00:09:52.138
空。&gt；&gt；Kyle Simpson：这意味着
null. &gt;&gt; Kyle Simpson: Which means

154
00:09:52.138 --> 00:09:56.929
下一次计时器触发时，如果没有发生点击，我只会继续过去。
the next time the timer fires if no click is happen I'm just gonna go on past it.

155
00:09:56.929 --> 00:10:00.480
但如果有任何一直在等待的点击，我基本上会告诉它，
But if there's any click that's been waiting that I'm basically gonna tell it,

156
00:10:00.480 --> 00:10:03.470
有东西在等着你，去把消息推出去吧。
there is something waiting for you go ahead and push out the message.

157
00:10:05.549 --> 00:10:11.000
因此，我基本上是将布尔变量ish设置为
So, I'm basically making a boolean variable ish Into

158
00:10:11.000 --> 00:10:12.799
我把它当做一条小溪。
something I'm treating as a stream.

159
00:10:12.799 --> 00:10:16.669
因为在这种特殊的情况下，做布尔运算比做布尔运算更容易
Because in this particular case it's easier to do a boolean operation than it

160
00:10:16.669 --> 00:10:19.409
就是做一个布尔流运算。
is to do a boolean stream operation.

161
00:10:19.409 --> 00:10:23.889
有一些方法可以对布尔流操作进行建模，但它们要复杂得多。
There are ways to model boolean stream operations, but they're much more complex.

162
00:10:23.889 --> 00:10:27.460
所以，我不认为你应该走这条路，因为有更简单的
So, I don't think you should go down that route when there's a simpler

163
00:10:27.460 --> 00:10:29.179
选项可用。
option available.

164
00:10:29.179 --> 00:10:33.200
这可能不是最完美和纯粹的反应式编程。
This isn't maybe the most perfect and pure reactive programming.

165
00:10:33.200 --> 00:10:38.230
但在幕后，如果您有像RXGS和RXGS这样的反应式实用程序
But under the covers, if you have a reactive utility like RXGS and

166
00:10:38.230 --> 00:10:40.950
我认为他们有一个取样的流操作。
I think they have a sampled stream operation.

167
00:10:40.950 --> 00:10:42.759
他们有办法对流操作进行采样。
They have a way to sample a stream operation.

168
00:10:42.759 --> 00:10:44.320
猜猜他们在做什么？
Guess what they're doing?

169
00:10:44.320 --> 00:10:48.360
他们把它保存到一个变量中，所以我们只需要去掉中间商
They're saving it into a variable, so we're just cutting out the middleman and

170
00:10:48.360 --> 00:10:50.720
我们自己做的。&gt；&gt；演讲者2：那时你不会黯然失色，
doing that ourself. &gt;&gt; Speaker 2: You wouldn't eclipse then,

171
00:10:50.720 --> 00:10:53.152
你会吗？&gt；&gt；扬声器3：流进来，
would you? &gt;&gt; Speaker 3: Stream in,

172
00:10:53.152 --> 00:10:54.703
不是吗？&gt；&gt；扬声器2：是的。
don't you? &gt;&gt; Speaker 2: Yeah.

173
00:11:02.619 --> 00:11:04.629
&GT；&GT；Kyle Simpson：所以我知道，好的，是的。
&gt;&gt; Kyle Simpson: So I know, okay, yes.

174
00:11:04.629 --> 00:11:08.360
所以，我的本意是，很抱歉我在这里有点偏离了轨道。
So, my intended, I'm sorry I did get a little slightly off track here.

175
00:11:08.360 --> 00:11:13.399
我的本意是不要，也在这里，我试图分开关注和
My intended thing was to not, too had here I was trying to separate concerns and

176
00:11:13.399 --> 00:11:14.879
然后我忘了回去做那件事。
then I forgot to go back and do that.

177
00:11:14.879 --> 00:11:18.090
我的目的是观察点击的事情，并设置最新。
My intended thing was to observe the clicks thing and set latest.

178
00:11:18.090 --> 00:11:19.679
所以，我打算观察Clickes事件
So, I was going to observe the clicks event and

179
00:11:19.679 --> 00:11:24.190
我不想将dom事件处理与流事件处理混合在一起。
I don't want to be mixing my dom event handling with my stream event handling.

180
00:11:24.190 --> 00:11:27.700
当我们想把事情分开时，这是一种混合的顾虑。
That's a mixture of concerns when we want to keep things separate.

181
00:11:27.700 --> 00:11:30.139
建立这些流的全部目的是这样的
The whole purpose of setting up these streams is so

182
00:11:30.139 --> 00:11:36.000
我可以在一个流中产生事件，然后在不同的地方观察它们。
that I can produce events in one stream and observe them in a different place.

183
00:11:36.000 --> 00:11:39.070
在这个不同的地方，也就是我的代码第20行，我什么都不知道
In this different place which is line 20 of my code I don't know anything at all

184
00:11:39.070 --> 00:11:40.350
关于点击是从哪里来的。
about where the clicks are coming from.

185
00:11:40.350 --> 00:11:44.190
我不知道什么DOM元素正在处理这些，所以我希望能够
I don't know what DOM element is handling those, so I want to be able to

186
00:11:44.190 --> 00:11:48.590
在很远的地方观察，所以这就是我要观察发生的事件的地方。
observe that at a far, so that's where I'm gonna observe the event happening here.

187
00:11:51.269 --> 00:11:55.874
说最新的等于事件。&gt；&gt；Kyle Simpson：所以基本上，
And say latest is equal to event. &gt;&gt; Kyle Simpson: So basically,

188
00:11:55.874 --> 00:11:57.429
从概念上思考。
think conceptually.

189
00:11:59.000 --> 00:12:01.389
这里有一条分界线
There is a dividing line here where

190
00:12:01.389 --> 00:12:04.509
这是我们应用程序的两个完全不同的部分。
these are two entirely different parts of our application.

191
00:12:04.509 --> 00:12:10.720
我们的溪流的生产和消费我们的溪流和这里。
The production of our streams and the consumption of our streams and down here.

192
00:12:10.720 --> 00:12:12.860
在这些事情中，我们对DOM元素一无所知
In these things we don't know anything at all about the DOM elements

193
00:12:12.860 --> 00:12:13.460
正在发生的事情。
that are occurring.
