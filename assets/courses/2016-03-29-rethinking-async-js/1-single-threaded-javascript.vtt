WEBVTT

1
00:00:00.000 --> 00:00:03.911
[音乐]
[MUSIC]

2
00:00:03.911 --> 00:00:04.960
&GT；&GT；Kyle：好吧，让我们跳进去吧。
&gt;&gt; Kyle: All right, so let's jump in.

3
00:00:04.960 --> 00:00:06.790
让我们谈谈并行与异步。
Let's talk about parallel versus async.

4
00:00:07.799 --> 00:00:11.580
打个比方，如果我们试图理解什么是平行与异步，
Metaphorically, if we try to understand what parallel is versus async,

5
00:00:11.580 --> 00:00:14.775
大多数人把它们混为一谈，认为它们基本上是一回事
most people conflate those and think that they're basically the same thing or

6
00:00:14.775 --> 00:00:18.670
JavaScripts版本的Parallel被称为Async或其他什么。
JavaScripts version of parallel is called async or whatever.

7
00:00:18.670 --> 00:00:20.100
事实并非如此。
It's not really the case.

8
00:00:20.100 --> 00:00:24.329
只有在最高的地方，如果你真的从50，000英尺的高度眯着眼睛的话。
Only at the highest level if you really squinted from 50,000 feet up.

9
00:00:24.329 --> 00:00:26.614
你会不会考虑并行性和异步性
Might you look at parallelism and asynchronicity and

10
00:00:26.614 --> 00:00:28.530
说他们是一回事。
say they're the same thing.

11
00:00:28.530 --> 00:00:29.550
有重要的区别。
There's important differences.

12
00:00:29.550 --> 00:00:34.753
所以，让我给你一个比喻，如何解决这个问题。
So let me give you metaphorically how to kind of work through that.

13
00:00:34.753 --> 00:00:39.664
并行性与非并行性，我们将分组异步
Parallelism versus non-parallelism, which we'll sort of group asynchronicity

14
00:00:39.664 --> 00:00:43.729
现在变成非并行性，我会更多地解释这一点。
into non-parallelism for now and I'll explain that more.

15
00:00:43.729 --> 00:00:48.438
所以非并行性就像你在
So non-parallelism would be like you waiting in line at

16
00:00:48.438 --> 00:00:51.649
过山车游乐园。
amusement park for a roller coaster.

17
00:00:51.649 --> 00:00:54.520
排队的人很多，你终于排到了队伍的前面。
Lots of people in line and you finally get up to the front of the line.

18
00:00:54.520 --> 00:00:58.420
那里有一个有30个座位的过山车，但他们只让你上车。
There's a roller coaster there with 30 seats on it but they only let you on.

19
00:00:58.420 --> 00:01:01.229
而且你是唯一一个可以在任何特定地点骑马的人。
And you're the only person that can ride at any given point.

20
00:01:01.229 --> 00:01:04.819
所以即使有30个人乘坐的能力，在任何给定的时刻，
So even though there's capacity for 30 people to ride, at any given moment,

21
00:01:04.819 --> 00:01:06.530
只有一个人在骑车。
only one person is riding the ride.

22
00:01:08.210 --> 00:01:10.260
这将是不平行的。
That would be non-parallel.

23
00:01:10.260 --> 00:01:12.269
我们稍后会给出这些不同的术语。
We'll give those different terms in a moment.

24
00:01:12.269 --> 00:01:15.109
它们将是不平行的，而如果你排队的话。
They'd be non-parallel versus if you waited in line.

25
00:01:15.109 --> 00:01:17.780
你到了那里，然后30个人上了过山车。
You got up there and then 30 people loaded onto the roller coaster.

26
00:01:17.780 --> 00:01:19.260
当过山车运行时，
And when the roller coaster is running,

27
00:01:19.260 --> 00:01:23.900
你们所有30个人都在完全相同的时刻经历着过山车。
all 30 of you are experiencing the roller coaster at exactly the same instant.

28
00:01:23.900 --> 00:01:24.900
这是更多的并行性。
That's more parallelism.

29
00:01:24.900 --> 00:01:28.989
所以在计算的意义上，并行性是通过线程来表达的。
So in a computing sense, parallelism is expressed through threads.

30
00:01:28.989 --> 00:01:31.239
最常见的表达方式是线程。
Most commonly expressed through threads.

31
00:01:31.239 --> 00:01:35.840
我可以在我的系统中的一个CPU核心上有一个线程的想法。
The idea that I could have one thread on one CPU core in my system.

32
00:01:35.840 --> 00:01:36.990
还有另一条线。
And another thread.

33
00:01:36.990 --> 00:01:40.770
它们有点像需要发生的操作的队列，或者操作和
They're are kind of like queues of actions that need to happen, or operations and

34
00:01:40.770 --> 00:01:41.900
必须发生。
need to happen.

35
00:01:41.900 --> 00:01:45.469
在任何给定的时刻，一个核心都可以执行这些操作中的一个，并且
At any given instant, one core could be doing one of those operations, and

36
00:01:45.469 --> 00:01:47.500
就在同一时刻，
in exactly that same moment,

37
00:01:47.500 --> 00:01:50.250
另一个操作可能正在不同的核心上进行。
another operation could be happening on a different core.

38
00:01:50.250 --> 00:01:51.250
那是真的。
That's true.

39
00:01:51.250 --> 00:01:52.819
诚实与善良的并行性。
Honest to goodness parallelism.

40
00:01:54.379 --> 00:01:57.126
现在，即使有你可能拥有的最强大的机器。
Now, even with the most powerful of the machines that you may have out there.

41
00:01:57.126 --> 00:02:00.359
你可能有一个16核，或者你有一个32核。
You may have a 16 core, or maybe you have a 32.

42
00:02:00.359 --> 00:02:04.147
我们中的大多数人可能在我们的计算机中有4，8个内核。
Most of us probably have 4, 8 cores in our computers.

43
00:02:04.147 --> 00:02:08.643
32个线程远远不足以运行具有以下类型的现代操作系统
32 threads is not nearly enough to run a modern operating system with the types of

44
00:02:08.643 --> 00:02:12.698
事情，我们在运行我们运行的所有程序时所做的多任务处理。
thing, the multitasking that we do with running all the programs we run.

45
00:02:12.698 --> 00:02:17.235
即使是您的浏览器，您的单个浏览器也可能仅占用10或15个线程
Even your browser, your single browser might take up 10 or 15 threads just for

46
00:02:17.235 --> 00:02:19.780
它在网页上执行的基本操作。
basic operations that it does on a web page.

47
00:02:19.780 --> 00:02:22.340
所以如果你曾经打开过Chrome的任务管理器
So if you've ever opened up the Task Manager of Chrome and

48
00:02:22.340 --> 00:02:27.370
看到所有正在运行的进程，它会并行运行大量内容。
seen all the processes that are running, it runs an awful lot of stuff In parallel.

49
00:02:27.370 --> 00:02:31.509
所以因为我们没有无限数量的内核，操作系统实际上
So because we don't have infinite numbers of cores, the operating system actually

50
00:02:31.509 --> 00:02:34.400
有一个我们称之为虚拟线程的层。
has a layer that we would call sort of virtual threads.

51
00:02:34.400 --> 00:02:37.150
并且它负责调度虚拟线程。
And it takes care of scheduling the virtual threads.

52
00:02:37.150 --> 00:02:39.199
它可以分发数万个这样的东西。
It can hand out tens of thousands of those.

53
00:02:39.199 --> 00:02:42.270
并且它负责尝试跨核心安排这些任务，因此
And it takes care of trying to schedule those across the cores so

54
00:02:42.270 --> 00:02:46.079
他们在尽可能多的同时发生。
that they're happening as and as much in parallel as possible.

55
00:02:46.079 --> 00:02:48.960
从您的编程角度来看，您并不真正关心这一点，或者
From the perspective of your programming, you don't really care about that or

56
00:02:48.960 --> 00:02:50.719
甚至知道他们在什么内核上运行。
even know what cores they're running on.

57
00:02:50.719 --> 00:02:55.259
您只需假设这两件事在不同的线程上，操作
You just assume that these two things are on separate threads, that the operating

58
00:02:55.259 --> 00:02:57.689
系统将做正确的事情，并确保它们分别运行。
system will do the right thing and make sure that they're running separately.

59
00:02:59.259 --> 00:03:02.939
对，所以显然并行性是关于优化的，对吧？
Right, so obviously parallelism is about optimization, right?

60
00:03:02.939 --> 00:03:04.725
如果我有一大堆事情要做。
If I've got a bunch of things to do.

61
00:03:04.725 --> 00:03:09.599
我不想等到第一组任务
I don't wanna wait to do the second set of tasks until the first set of tasks is

62
00:03:09.599 --> 00:03:13.389
完成了，如果可以同时做这两件事，如果我能更快完成，
finished, if it's possible to do both at the same time, if I can get done faster,

63
00:03:13.389 --> 00:03:14.250
好多了。
that's much better.

64
00:03:14.250 --> 00:03:16.659
并行性是关于优化的。
Parallelism is about optimization.

65
00:03:16.659 --> 00:03:18.170
好的，这就解释了并行性。
All right, so that explains parallelism.

66
00:03:18.170 --> 00:03:20.090
那么异步性呢？
What about asynchronicity?

67
00:03:20.090 --> 00:03:21.750
嗯，异步性，我们生活的世界，
Well, asynchronicity, the world that we live in,

68
00:03:21.750 --> 00:03:24.740
在异步性中，将我们移动到单个线程。
in asynchronicity, moves us to a single thread.

69
00:03:25.840 --> 00:03:29.646
JavaScript内部的编程甚至完全在单个线程上运行
The programming inside of our JavaScript runs entirely on a single thread even

70
00:03:29.646 --> 00:03:33.454
尽管浏览器可以访问多个线程甚至JavaScript
though the browser may have access to multiple threads and even the JavaScript

71
00:03:33.454 --> 00:03:37.045
例如，引擎节点可以在后台使用数百个线程。
engine node for example could use hundreds of threads in the background.

72
00:03:37.045 --> 00:03:40.780
但我们的程序只在单个线程中运行。
But our program only runs in a single thread.

73
00:03:40.780 --> 00:03:44.759
在任何给定的时刻，只有一行JavaScript在运行
At any given instant there is only one line of JavaScript running

74
00:03:44.759 --> 00:03:45.729
在JavaScript引擎中。
in the JavaScript engine.

75
00:03:46.829 --> 00:03:50.800
理论上，您可以使用JavaScript引擎的多个实例
You could in theory spend multiple instances of the JavaScript engine

76
00:03:50.800 --> 00:03:54.599
在完全独立的线程上，是的，看起来就像
on entirely separate threads and yes that would be that would look like

77
00:03:54.599 --> 00:03:58.189
多线程编程，但它们无法以任何有用的方式进行通信。
multithreaded programming but they couldn't communicate in any useful way.

78
00:03:59.500 --> 00:04:02.460
网络工作者就是试图弥合这一差距的一个例子。
Web workers is an example of trying to bridge that gap.

79
00:04:02.460 --> 00:04:05.939
Web worker是一种将完全独立的线程旋转起来的方法，但是
Web workers is a way of spinning up an entirely separate thread but

80
00:04:05.939 --> 00:04:09.099
这不是JavaScript的事情，这是浏览器的事情。
that's not a JavaScript thing, that's a browser thing.

81
00:04:09.099 --> 00:04:12.189
Web平台定义了Web工作者的概念。
The web platform defines the notion of web workers.

82
00:04:12.189 --> 00:04:14.129
在整个单独的线程中旋转，
Spins up in a whole separate thread,

83
00:04:14.129 --> 00:04:17.300
JavaScript引擎的一个完整的单独实例。
a whole separate instance of the JavaScript engine.

84
00:04:17.300 --> 00:04:20.189
就JavaScript而言，这两件事彼此并不了解
As JavaScript is concerned, those two things don't know about each other

85
00:04:20.189 --> 00:04:23.670
他们没有任何重叠，他们没有共享变量，什么都没有。
they don't have any overlap, they're not sharing variables, there's nothing.

86
00:04:23.670 --> 00:04:27.019
好消息是，我们不必担心任何胡说八道
The good news is, we don't have to worry about any of the nonsense that

87
00:04:27.019 --> 00:04:28.175
线程编程的位置。
threaded programming as to where.

88
00:04:28.175 --> 00:04:30.720
我们不需要处理新的税收和信号灯
We don't have to deal with new taxes and semaphores and

89
00:04:30.720 --> 00:04:33.340
所有的疯狂和共享资源锁定。
all of the craziness and shared resource locking.

90
00:04:34.360 --> 00:04:37.459
我们知道在给定的时间内只能运行一个函数。
We know that only one function can be running in a given time.

91
00:04:37.459 --> 00:04:41.879
如果有两个单独的JavaScript引擎在运行，这并不重要，因为
And if you have two separate JavaScript engines running, it doesn't matter because

92
00:04:41.879 --> 00:04:44.230
反正他们也不会在同一个共享空间里工作。
they're not gonna be operating over the same shared space anyway.

93
00:04:45.939 --> 00:04:49.550
现在，幸运的是，网络工作者确实为我们提供了一条沟通路径
Now, web workers fortunately do give us a communication path

94
00:04:49.550 --> 00:04:51.230
通过异步事件。
through asynchronous events.

95
00:04:51.230 --> 00:04:54.829
因此，即使它们在功能上是在独立的线程上操作。
So even though they are functionally operating on independent threads.

96
00:04:54.829 --> 00:04:57.930
他们不能以线程的方式进行通信，他们必须重新进行通信
They cannot communicate in a threaded fashion, they have to communicate back on

97
00:04:57.930 --> 00:05:00.350
通过事件循环的单线程概念。
that single threaded notion through the event loop.
