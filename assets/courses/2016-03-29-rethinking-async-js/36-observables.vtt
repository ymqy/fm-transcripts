WEBVTT

1
00:00:00.000 --> 00:00:03.782
[音乐]
[MUSIC]

2
00:00:03.782 --> 00:00:06.062
&gt；&gt；Kyle Simpson：输入可观测数据。
&gt;&gt; Kyle Simpson: Enter observables.

3
00:00:06.062 --> 00:00:11.929
现在，请理解Observable并不是JavaScript的保证。
Now, understand that Observables are not a guarantee for JavaScript.

4
00:00:11.929 --> 00:00:15.240
现在它们在用户地库中实现，并且
Right now they are implemented in user-land libraries, and

5
00:00:15.240 --> 00:00:18.370
有一项建议是将可观测数据放在该语言中。
there is a proposal for Observables to land in the language.

6
00:00:19.559 --> 00:00:20.739
在某种程度上，
At some point,

7
00:00:20.739 --> 00:00:24.134
有一种强烈的感觉，他们可能会在ES7的时间框架内着陆。
there was a strong feeling that they might land in the ES7 time frame.

8
00:00:25.250 --> 00:00:29.989
据我所知，我认为这不会在ES7中发生，
As far as I'm aware, I don't think that's actually gonna happen in the ES7,

9
00:00:29.989 --> 00:00:30.739
意思是ES2016。
meaning ES2016.

10
00:00:32.969 --> 00:00:37.560
因为就我今天所知，我认为这个功能被切断了
Because as far as I'm aware as of today, I think the feature cut off for

11
00:00:37.560 --> 00:00:39.420
ES2016就像是下个月。
ES2016 is like next month.

12
00:00:41.149 --> 00:00:45.619
所以观察到的是一条很好的道路，我们有很好的机会
So Observables are on a good path and there's a pretty good chance we're going

13
00:00:45.619 --> 00:00:48.429
在语言中自然地得到这样的东西。
to get something like this natively in the language.

14
00:00:48.429 --> 00:00:51.219
只是可能不是下个月。
It just might not be next month.

15
00:00:51.219 --> 00:00:53.240
所以可能会更远一点。
So it might be a little bit further off.

16
00:00:53.240 --> 00:00:56.890
这意味着我们将要从可观察到的东西中学到的东西，
And that means that what we're about to learn with Observables,

17
00:00:56.890 --> 00:01:02.030
我们基于特定库实现的语义进行学习。
we're learning based upon the semantics of a particular library implementation.

18
00:01:02.030 --> 00:01:07.930
我们并没有很好的意识到他们将会是一个本地人
We don't have a very good sense of exactly what they're going to be from a native

19
00:01:07.930 --> 00:01:11.310
原始的视角，就像我们对承诺做的那样。
primitive perspective, like we did with promises.

20
00:01:11.310 --> 00:01:16.280
所以这里需要注意的是，我们将要讨论的内容是主题
So the caveat here is the sorts of stuff that we're about to talk about is subject

21
00:01:16.280 --> 00:01:20.189
对于某些流量，从现在到现在这段时间内，它会受到一些进化的影响
to some flux, it's subject to some evolution between now and the time that

22
00:01:20.189 --> 00:01:24.680
一些最终的标准陆地观测值可能最终会被称为不同的东西。
some final standard lands Observables may end up being called something different.

23
00:01:24.680 --> 00:01:28.460
他们可能有不同的API，谁知道呢，但是
They might have a different looking API, who knows, but

24
00:01:28.460 --> 00:01:33.629
现在外面有一个很好的图书馆
right now there's a pretty good library out there for

25
00:01:33.629 --> 00:01:38.500
Observables，它叫做RXJ.S，这是我们的JavaScript库，实际上是
Observables and it's called RX J.S. that's our JavaScript library it's actually

26
00:01:39.670 --> 00:01:43.200
rx是库读取反应性扩展的名称。
RX is the name of the library read reactive extensions.

27
00:01:43.200 --> 00:01:46.259
它是由微软的聪明人制作的，而且
It's made by the folks really smart folks at Microsoft, and

28
00:01:46.259 --> 00:01:50.329
他们把它移植成了十几种或几十种不同的语言。
they've ported it to like a dozen or a couple dozen different languages.

29
00:01:50.329 --> 00:01:53.189
所以RXJS是JavaScript端口。
So RXJS is the JavaScript port.

30
00:01:53.189 --> 00:01:54.009
在C.Sharp
It's in C. Sharp,

31
00:01:54.009 --> 00:01:57.689
我认为这是最初的版本，它在Java中，在其他几种语言中。
I think that's the original one, it's in Java, it's in several other languages.

32
00:01:57.689 --> 00:02:01.010
所以从一致性的角度看这很好，
So it's nice from the consistency perspective,

33
00:02:01.010 --> 00:02:04.719
无论您使用的是哪种语言，可能都有一个RX库。
whatever language you work in there's probably an RX library for it.

34
00:02:04.719 --> 00:02:05.859
一旦你学会了
Once you learn it,

35
00:02:05.859 --> 00:02:08.189
一旦你可以在很多地方使用它，那就很好了。
once you're gonna be able to use it in lots of places that's good.

36
00:02:10.050 --> 00:02:13.759
但是要理解什么是可观察的，再一次从概念的角度来看，
But to understand what an observable is, again from a conceptual perspective,

37
00:02:13.759 --> 00:02:17.000
看，这就是我一直以来的教学方式，我会先教你API，
see this is how I always teach, I'm gonna teach you the API first,

38
00:02:17.000 --> 00:02:18.199
我想教你概念。
I wanna teach you the conceptuals.

39
00:02:19.490 --> 00:02:22.169
所以让我们来谈谈电子表格。
So let's talk about spreadsheets.

40
00:02:22.169 --> 00:02:24.439
每个人都喜欢电子表格，对吧？
Everybody loves spreadsheets, right?

41
00:02:24.439 --> 00:02:27.740
我刚刚在Google Images上发现了一些随机的电子表格图像
I just found some random spreadsheet image on Google Images,

42
00:02:27.740 --> 00:02:30.560
因为我自己没有什么好的。
cuz I don't have any good ones to take of my own.

43
00:02:30.560 --> 00:02:34.759
我不知道电子表格是什么，但很清楚
I don't know what the spreadsheet is, but it's pretty clear

44
00:02:34.759 --> 00:02:38.389
这个电子表格说明了我想要理解的概念。
that this spreadsheet is illustrating the concept that I want to get across.

45
00:02:38.389 --> 00:02:40.110
顺便说一下，这个比喻并不是我独有的。
By the way, this metaphor is not unique to me.

46
00:02:40.110 --> 00:02:41.219
所以我从别人那里听到了这句话。
So I've heard this from others.

47
00:02:41.219 --> 00:02:43.159
我只是认为这是一个特别好的开始。
I just think it's a particularly good one to start with.

48
00:02:44.280 --> 00:02:50.819
而Observable有点像电子表格中计算字段的链。
And observable is kind of like a chain of calculated fields in a spreadsheet.

49
00:02:51.879 --> 00:02:55.349
因此，您知道，在电子表格中，可以在字段中包含数据。
So you know in spreadsheets you can have data in a field.

50
00:02:55.349 --> 00:02:58.229
但也可以有一个字段，它是一个计算字段。
But you can also have a field, which is a calculated field.

51
00:02:58.229 --> 00:03:01.235
它是根据其他领域的数据计算出来的。
It's calculated based upon the data that's in some other field.

52
00:03:01.235 --> 00:03:04.292
所以C1可能有数字10，C2，
So C1 might have the number ten in it, and C2,

53
00:03:04.292 --> 00:03:09.330
就在下面，它可能是任何值乘以2。
right below it might be whatever the values in there times two.

54
00:03:09.330 --> 00:03:14.778
所以当我键入10，然后我一按Enter，这个字段立即显示20。
So when I type in 10, then as soon as I hit enter, immediately this field says 20.

55
00:03:14.778 --> 00:03:19.889
我可能在这里有另一个字段，我可能有D13，它说，
And I might have another field over here, I might have D13 that says,

56
00:03:19.889 --> 00:03:24.245
D13是对C2中的任何东西的三次计算。
D13 is the calculation of three times whatever's in C2.

57
00:03:24.245 --> 00:03:28.576
所以我把这个改为20，C1变成20，
So I changed this to 20, C1 becomes 20,

58
00:03:28.576 --> 00:03:33.829
C2变成40，D13变成120，对吗？
C2 becomes 40, and D13 becomes 120, right?

59
00:03:33.829 --> 00:03:37.729
你看到计算链是数据流了吗？
Do you see that the calculation chain is a flow of data?

60
00:03:39.840 --> 00:03:44.759
我们正在设置从原始源位置到
We're setting up a flow of data from an original source location to

61
00:03:44.759 --> 00:03:47.500
所有这些不同的地方，我们正在用这些数据做一些事情。
all these different places, where we're doing something with that data.

62
00:03:47.500 --> 00:03:48.990
我们在计算一些东西。
We're calculating something.

63
00:03:48.990 --> 00:03:51.310
我们正在订阅并响应这些数据。
We're subscribing to and responding to that data.

64
00:03:52.409 --> 00:03:55.159
这就是反应式编程概念的起源。
That's the genesis of this notion of reactive programming.

65
00:03:55.159 --> 00:03:57.849
当我们考虑反应式编程时，它是说，
When we think about reactive programming it is to say,

66
00:03:57.849 --> 00:03:59.939
我的数据来源有些来源。
the source of my data some of that source.

67
00:04:01.189 --> 00:04:05.319
但是数据一旦我得到那个事件，它将经历一系列的步骤和
But the data once I get that event, it's going to go through a series of steps and

68
00:04:05.319 --> 00:04:09.259
其中一些步骤将是直接的，就像响应
some of those steps are going to be direct like responsive just

69
00:04:09.259 --> 00:04:12.949
计算一些东西，其中一些可能是异步步骤。
calculate something and some of them might be asynchronous steps.

70
00:04:14.729 --> 00:04:19.023
当您更改电子表格时，对经过电子表格的数据的计算
The calculation of the data that goes through the spreadsheet as you change one

71
00:04:19.023 --> 00:04:21.572
价值，即使它对我们来说是立竿见影的。
value, even though it looks immediate to us.

72
00:04:21.572 --> 00:04:26.432
每一步都必须更新所有字段，然后更新所有字段和
Each step it has to update all the fields and then update all the fields and

73
00:04:26.432 --> 00:04:31.569
然后更新所有字段，因此如果您愿意的话，会有一些传播延迟。
then update all the fields, so there is some propagation delay if you will.

74
00:04:31.569 --> 00:04:35.819
但我们可以考虑将可观察的或相当于反应性的编程作为一种方式
But we can think about an observable or rather reactive programming as a way to

75
00:04:35.819 --> 00:04:42.370
对一侧的数据进行建模，即来自生产者的数据。
model a piece of data coming in one side, that's from the producer.

76
00:04:42.370 --> 00:04:45.449
事件发射器，如果您愿意，从一侧进入，并且
The event emitter, if you will, coming in one side, and

77
00:04:45.449 --> 00:04:49.439
在系统中传播其方式所需的所有步骤。
all the steps that it takes to propagate its way through a system.

78
00:04:49.439 --> 00:04:51.360
这是一种数据流机制，并且
It's a data flow mechanism, and

79
00:04:51.360 --> 00:04:54.959
数据流机制是从头开始构建的，以响应事件。
data flow mechanisms are built from the ground up to respond to events.

80
00:04:54.959 --> 00:04:58.519
所以如果我们有一个通风口导向的系统，
So if we've got a vent oriented systems,

81
00:04:58.519 --> 00:05:00.449
这对我们来说可能是一个非常好的抽象。
this might be a really good abstraction for us.

82
00:05:00.449 --> 00:05:02.430
每个人都在概念上追随我的来历吗。
Is everybody following where I'm coming from conceptually.

83
00:05:04.930 --> 00:05:06.620
所以我们会把它归结为你。
So we'll boil this down for you.

84
00:05:06.620 --> 00:05:11.720
Observable是挂在事件源上的适配器
An observable is an adapter hooked onto an event source

85
00:05:12.930 --> 00:05:15.689
每当有新的事件发生时，这就产生了一种承诺。
that produces a promise, every time a new event comes through.

86
00:05:18.029 --> 00:05:23.379
但它是以单独的方式这样做的，在那里我可以设置我的事件源。
But it does so in that separate way, where I can set up my event source.

87
00:05:23.379 --> 00:05:27.701
和我的位置完全不同的一部分，我可以声明性地说，
And an entirely different part of my location, I can declaratively say,

88
00:05:27.701 --> 00:05:29.031
我的数据流是什么？
what's my data flow?

89
00:05:29.031 --> 00:05:32.423
我不需要像我们在其他例子中所做的那样把两者混为一谈，
I don't have to conflate the two like we're doing in those other examples,

90
00:05:32.423 --> 00:05:35.529
我把承诺放在活动里面的地方。
where I put the promise inside of the event thing.

91
00:05:35.529 --> 00:05:40.090
我有一个表示数据源的观察体，我可以订阅它
I have an observable that represents my data source and I can subscribe to that

92
00:05:40.090 --> 00:05:45.009
可以在我系统的一个或多个其他位置以完全独立的方式观察到。
observable in one or more other locations of my system in an entirely separate way.

93
00:05:45.009 --> 00:05:47.409
它会神奇地处理这一切
And it's going to magically take care of all that

94
00:05:48.409 --> 00:05:51.170
创造承诺的桥梁和鸿沟为我们。
creation of promises in the bridge and the gap for us.

95
00:05:52.730 --> 00:05:57.370
所以这是编程的一种方式来表示我们可以直观地思考的东西，或者
So it's a way in programming to represent what we can visually think about, or

96
00:05:57.370 --> 00:05:59.449
从电子表格概念上考虑。
conceptually think about from a spreadsheet.

97
00:05:59.449 --> 00:06:03.379
我们可以将这些不同字段中的每一个表示为不同的步骤
We can represent each one of those different fields as a different step

98
00:06:03.379 --> 00:06:05.329
在对一个可观察到的事物的一系列反应中。
in a chain of response to an observable.

99
00:06:07.839 --> 00:06:12.319
下面是我们RxJS中一些代码的快速示例，
So here's a quick example of some code from our RxJS,

100
00:06:12.319 --> 00:06:17.300
您会注意到，您使用Rx.Observable.fromEvent创建了一个Observable。
you'll notice that you create an observable using Rx.Observable.fromEvent.

101
00:06:17.300 --> 00:06:21.769
这是他们提供的众多公用事业之一，其设置方式是，
That's one of their many utilities they provide and the way it's set up is,

102
00:06:21.769 --> 00:06:25.810
它接受黎明元素和事件名称，它自动挂钩事件名称
it takes the dawn elements an event name it automatically hooks the event name

103
00:06:25.810 --> 00:06:28.899
到黎明元素，并且每次其中一个事件发生时
to the dawn element and every time one of those events fires

104
00:06:28.899 --> 00:06:32.170
它将另一条数据通过链，通过可观察到的。
it pumps another piece of data through the chain, through the observable.

105
00:06:33.550 --> 00:06:36.699
这就是我们如何从事件中创建可观察的。
So that's how we create an observable from an event.

106
00:06:36.699 --> 00:06:40.319
大约有十几种不同的方法来使一个可观察的。
There's about a dozen or so different ways to make an observable.

107
00:06:40.319 --> 00:06:42.749
您可以通过将其附加到事件来创建一个。
You can make one by attaching it to an event.

108
00:06:42.749 --> 00:06:47.441
你可以让一个普通的、简单的可观察到，你要手动地把一些数据
You can make a plain old simple observable that you manually are gonna put some data

109
00:06:47.441 --> 00:06:49.956
通过，您可以从网站附加它，
through, you can attach it from a website,

110
00:06:49.956 --> 00:06:54.290
我的意思是有很多不同的方法来制作可观察的东西。
I mean there's a lot of different ways to make observables.

111
00:06:54.290 --> 00:06:59.990
但我在一号线上做了一个可观察到的东西，在我系统的一个完全不同的部分。
But I make an observable on line one, in an entirely different part of my system.

112
00:06:59.990 --> 00:07:02.889
我可以声明所有这些步骤是什么，
I can declare what all those steps are,

113
00:07:02.889 --> 00:07:05.910
我的电子表格中所有字段的计算是什么样子的。
what all the calculations of the fields in my spreadsheet look like.

114
00:07:07.230 --> 00:07:10.250
基本上，我制作了数据流的声明性链。
Basically, I make a declarative chain of the data flow.

115
00:07:11.399 --> 00:07:16.009
因此，每次从DOM事件进入事件时，每次我单击按钮
So every time an event comes in from the DOM event, every time I click on a button

116
00:07:16.009 --> 00:07:21.240
这是一段数据进来，它将通过这条链流动。
that's a piece of data coming in and it's going to flow through this chain.

117
00:07:21.240 --> 00:07:25.040
现在，我们有一些看起来很熟悉的实用程序，就像地图一样。
Now, we have utilities that look familiar to us like map.

118
00:07:26.319 --> 00:07:30.459
同步意义上的map遍历了整个数组的值。
Map in the synchronous sense went over a whole array of the values.

119
00:07:30.459 --> 00:07:34.279
每次有新数据时，就会调用异步事件中的映射
Map in the asynchronous event is just invoked every time a new piece of data

120
00:07:34.279 --> 00:07:35.209
出现了。
comes along.

121
00:07:35.209 --> 00:07:42.000
因此，您可以实际将事件流看作一个永不结束的数组。
So you can actually think about an event stream as a never ending array.

122
00:07:43.909 --> 00:07:48.579
并且我们可以在不同的时间执行相同类型的列表操作
And we can perform the same sorts of list operations across time

123
00:07:48.579 --> 00:07:49.840
我们会一起做的事。
that we would do all together.

124
00:07:49.840 --> 00:07:53.129
这就是为什么对我们来说理解地图和归约以及
That's why it was important for us to understand maps and reduces and

125
00:07:53.129 --> 00:07:54.120
诸如此类的事情。
things like that.

126
00:07:54.120 --> 00:07:58.744
因此，在这里，我们可以映射事件流，在概念上与我们大致相同
So here, we can map over an event stream in much the same way conceptually that we

127
00:07:58.744 --> 00:08:01.721
可以映射到已经完成的数组上。
could map over an array that was already complete.

128
00:08:01.721 --> 00:08:04.314
只是每次有数据进来，
It's just that every time a piece of data comes through,

129
00:08:04.314 --> 00:08:06.315
我们可以对它进行某种转化。
we can do some sort of transformation on it.

130
00:08:06.315 --> 00:08:11.206
这里的转换是我提取类名
And here the transformation is I'm extracting the class name

131
00:08:11.206 --> 00:08:13.656
从事件对象，好的。
from the event object, okay.

132
00:08:13.656 --> 00:08:17.850
我们可以过滤下来，我们可以在我们的列表上执行排除。
We can filter down, we can do perform an exclusion on our list.

133
00:08:18.949 --> 00:08:20.870
这是很有趣的事情。
And that's something interesting.

134
00:08:20.870 --> 00:08:26.370
因为从根本上说，这个列表实际上是异步的。
Because fundamentally, fundamentally this list is actually asynchronous.

135
00:08:26.370 --> 00:08:30.389
我们实际上可以在我们的响应中有异步的步骤。
We can actually have steps in our response that are asynchronous.

136
00:08:30.389 --> 00:08:31.839
在改变之前是不同的。
Distinct until changed.

137
00:08:31.839 --> 00:08:34.440
这是个有趣的故事。
It's an interesting one.

138
00:08:34.440 --> 00:08:39.529
它说的是，当一条数据第一次通过时，让它通过。
What it says is, the first time a piece of data comes through, let it go through.

139
00:08:39.529 --> 00:08:42.490
但是如果另一个通过相同的数据片段，不要让它通过
But if another one comes through the same piece of data, don't let that go through

140
00:08:42.490 --> 00:08:46.960
因为我已经看过了，但是如果有新的事情出现。
because I've already seen that one, but then if something new comes along.

141
00:08:46.960 --> 00:08:47.940
让那个通过。
Let that one through.

142
00:08:48.940 --> 00:08:50.710
如果我一直收到同样的东西，
And if I keep getting the same one of those,

143
00:08:50.710 --> 00:08:53.039
不要让更多的副本通过。
don't let any more duplicates come through.

144
00:08:53.039 --> 00:08:56.879
所以让我们说，我有一个，第一个进入系统，然后
So let's say, I have one that the number one comes to the system and

145
00:08:56.879 --> 00:08:59.740
我得到了五个，只有第一个会在接下来的四个中通过
I got five of those, only the first one is going to be let through in the next four

146
00:08:59.740 --> 00:09:01.110
将被忽略。
going to be ignored.

147
00:09:01.110 --> 00:09:02.990
然后两个人出现了。
And then a two comes along.

148
00:09:02.990 --> 00:09:05.580
所以我会让前两个出现在任何重复的地方
So I'm going to let the first two come along at any duplicates

149
00:09:05.580 --> 00:09:06.659
将被忽略。
are going to be ignored.

150
00:09:06.659 --> 00:09:08.299
当另一个出现时会发生什么？
What happens when another one comes along?

151
00:09:08.299 --> 00:09:12.200
我要让一个又一个通过
I'm going to let a one one more one come through and

152
00:09:12.200 --> 00:09:14.659
然后忽略任何重复的内容，直到更改。
then ignore any duplicates that's what the until changed is.

153
00:09:15.879 --> 00:09:21.360
所以有不同的，只是我只想要一个曾经的东西和不同的
So there's distinct which is just I only want one ever of the thing and distinct

154
00:09:21.360 --> 00:09:25.429
直到CHANGED是不同的，然后每次出现新的值时我都会重置。
until changed is distinct, and then I reset every time a new value comes in.

155
00:09:25.429 --> 00:09:28.120
我重置了我记得的东西。
I reset what I'm remembering.

156
00:09:28.120 --> 00:09:31.370
所以你注意到，在这个链条中，并不是我的所有事件都会出现在第11行。
So you notice in this chain, not all of my events are going to make it to line 11.

157
00:09:31.370 --> 00:09:37.159
这完全没问题，因为我们正在为自己设置数据流，
And that's totally okay, cuz we're setting ourselves up with a data flow,

158
00:09:37.159 --> 00:09:39.789
就像我们在电子表格中一样。
just like we would in a spreadsheet.

159
00:09:42.210 --> 00:09:45.639
订阅有点像链条的末端。
Subscribe is kind of like the end of the chain.

160
00:09:45.639 --> 00:09:48.330
订阅是你基本上拥有的方式
Subscribe is how you basically have

161
00:09:48.330 --> 00:09:52.379
对即将到来的任何事件的一种同步响应。
a sort of synchronous response to any events that are coming in.

162
00:09:52.379 --> 00:09:55.519
所以还有更多的事情要做。
So there's more to it than that.

163
00:09:55.519 --> 00:09:59.240
但你注意到基本上订阅有点像同步的东西。
But you notice that basically subscribe is kind of like a synchronous thing.

164
00:09:59.240 --> 00:10:00.580
我不是在转换任何数据
I'm not transforming any data,

165
00:10:00.580 --> 00:10:03.779
它可能不会真的出现在我的链条中间。
it's not really gonna show up in the middle of my chain, probably.

166
00:10:03.779 --> 00:10:06.320
有点像在我链条的末端，当我和
It's kinda be at the end of my chain, it's when I and

167
00:10:06.320 --> 00:10:10.210
最后，无论数据是什么，都可以通过其所有转换和
finally done with whatever the data is through all of its transformations and

168
00:10:10.210 --> 00:10:12.289
过滤我得到了一些数据。
filterings I arrived at some data.

169
00:10:12.289 --> 00:10:17.548
因此，在我的链的末尾，我订阅了一条数据
So at the end of my chain, I have a subscribe of a piece of data that comes

170
00:10:17.548 --> 00:10:23.542
进去，我就可以安慰你了，把它记录下来。凯尔·辛普森：好的。
in and I can console.log it out. &gt;&gt; Kyle Simpson: Okay.

171
00:10:25.309 --> 00:10:28.750
这是与观察者一起工作是什么样子的一个真正的高级视图。
That's a real high level view of what working with an observable is like.

172
00:10:28.750 --> 00:10:31.690
我们必须以某种方式进行观察，我们有公用事业，而且
We have to make an observable some way and we have utilities, and

173
00:10:31.690 --> 00:10:34.720
图书馆可以为我们做到这一点，然后我们必须对可观察到的东西做出反应。
libraries that can do that for us, and then we have to respond to observables.

174
00:10:35.899 --> 00:10:38.720
我认为，有些人不同意这一点，这是恰当的，但是
And it's appropriate, I think, some people disagree with this, but

175
00:10:38.720 --> 00:10:42.340
我认为把一个可观察到的东西想像成一条小溪是合适的。
I think it's appropriate to think of an observable as a stream.

176
00:10:43.490 --> 00:10:46.000
这是一个即将到来的数据流。
It's a stream of data that's gonna come through.

177
00:10:46.000 --> 00:10:49.039
它被一系列事件所激发，它是即将到来的数据流
It's being pumped by a set of events and it's a stream of data that's coming

178
00:10:49.039 --> 00:10:52.067
通过。&gt；&gt；Kyle Simpson：所以
through. &gt;&gt; Kyle Simpson: So

179
00:10:52.067 --> 00:10:56.059
那么differtUntilChanged呢，我实际上希望你们都弹出这个。
what about distinctUntilChanged, I actually want you all to pop this up.

180
00:10:56.059 --> 00:10:57.980
你在你的幻灯片中有链接或者你可以直接输入，
You have in your slides the link or you can just type,

181
00:10:57.980 --> 00:11:01.080
我喜欢这个网站RxMarbles.com。
I love this website RxMarbles.com.

182
00:11:01.080 --> 00:11:04.961
让我们一起来看看RxMarbles.com，我对这个网站很感兴趣
Let's all take a look at RxMarbles.com, I just get such a kick out of this web

183
00:11:04.961 --> 00:11:09.927
站点。&gt；&gt；Kyle Simpson：让我快速定位
site. &gt;&gt; Kyle Simpson: Let me quickly orient

184
00:11:09.927 --> 00:11:13.214
你，继续往下点击difftUntilChanged，这只是
you, go ahead and click down on the distinctUntilChanged which is just

185
00:11:13.214 --> 00:11:15.730
在左边的列表上稍微往下一点。
slightly down the list there on the left.

186
00:11:15.730 --> 00:11:17.440
单击differtUntilChanged。
Click on the distinctUntilChanged.

187
00:11:20.039 --> 00:11:21.750
你会注意到它描绘的是
And you'll notice that it's depicting for

188
00:11:21.750 --> 00:11:24.129
给我们这些大理石，这些小气泡，
us what these marbles these little bubbles here,

189
00:11:24.129 --> 00:11:28.200
有点确切地说，我们谈论的是触摸，顶部的东西就是输入。
kind of exactly we're talking about the touch the stuff on the top is the input.

190
00:11:28.200 --> 00:11:30.187
而且只有一条河流可以做到这一点。
And there's only one stream for this.

191
00:11:30.187 --> 00:11:34.576
底部的内容是输出。
And the stuff on the bottom is the output.

192
00:11:34.576 --> 00:11:38.179
当我开始移动这些弹珠时，你会注意到发生了什么。
And you notice what happens, as I start to move these marbles around.

193
00:11:38.179 --> 00:11:42.759
如果我把这个移动到这里会发生什么，固体
What happens if I move this one over here, the solid

194
00:11:42.759 --> 00:11:47.549
只是消失了，因为序列意味着它只是一个副本。
just disappear because the sequence meant that it was just a duplicate.

195
00:11:47.549 --> 00:11:48.960
所以我们可以移动弹珠
So we can move the marbles around and

196
00:11:48.960 --> 00:11:52.460
查看这些不同的流操作是如何操作的。
see how these different stream operations operate.

197
00:11:53.470 --> 00:11:59.049
我们将回到RxMarble并查看更多的流操作和
We're going to come back to RxMarbles and look at more stream operations and

198
00:11:59.049 --> 00:12:02.419
有一点，但你可以注意到可能是在顶部。
a little bit, but you can notice that probably about the top.

199
00:12:02.419 --> 00:12:06.179
我想说可能有30或40个在这里被描绘。
I'd say maybe 30 or 40 of them are depicted here.

200
00:12:06.179 --> 00:12:08.110
RX实际上可能有150，
Rx actually has probably like 150,

201
00:12:08.110 --> 00:12:12.000
可能有200种不同的方法，这是一个相当大的库。
maybe 200 different methods it's a pretty big library.

202
00:12:12.000 --> 00:12:15.259
总而言之，如果你什么都有，我想大概是150，
All told, if you've got everything, I think it's something like 150,

203
00:12:15.259 --> 00:12:15.830
200K的JavaScript。
200k of JavaScript.

204
00:12:15.830 --> 00:12:17.159
所以这是一个相当结实的图书馆。
So it's a pretty stout library.

205
00:12:17.159 --> 00:12:19.610
学习所有这些东西需要一段时间。
It takes a while to learn all these things.

206
00:12:19.610 --> 00:12:23.379
我在网上找不到任何其他更好的学习资源
I have not found any other resource on the web that is better at learning

207
00:12:23.379 --> 00:12:27.730
比起RxMarble，我认为你大概可以学习50%的观测值
than RxMarbles, I think you can probably learn probably 50% of Observables

208
00:12:27.730 --> 00:12:31.279
什么都不做，只是在屏幕上玩泡泡。
by doing nothing but just playing around with the bubbles on the screen.

209
00:12:31.279 --> 00:12:33.049
这是一个非常奇妙的资源。
It's a really fantastic resource.

210
00:12:33.049 --> 00:12:33.940
好吧。
Okay.

211
00:12:33.940 --> 00:12:37.460
帮助您直观地了解不同流操作发生的情况。
Helps you visualize what's happening with your different stream operations.

212
00:12:37.460 --> 00:12:39.500
所以我们会回到DISTINCT直到改变，
So we'll come back to distinct until change,

213
00:12:39.500 --> 00:12:41.679
我的意思是我们稍后会回到RX大理石上。
I mean we'll come back to RXmarbles here in a little bit.

214
00:12:41.679 --> 00:12:42.720
我只是想向你指出这一点。
I just wanted to point that out to you.
