WEBVTT

1
00:00:00.000 --> 00:00:03.774
[音乐]
[MUSIC]

2
00:00:03.774 --> 00:00:06.150
&gt；&gt；Kyle Simpson：这是一个非常简单的例子。
&gt;&gt; Kyle Simpson: That's a pretty simple example.

3
00:00:06.150 --> 00:00:09.220
我们怎么可能有一个稍微复杂一点的问题呢？
How might we have a slightly more complex one?

4
00:00:09.220 --> 00:00:13.199
这一次，我把CSP放在了所有事情的前面，因为
This one, I've got csp in front of everything because

5
00:00:13.199 --> 00:00:15.390
我现在用的是图书馆。
I'm now using a library.

6
00:00:15.390 --> 00:00:20.910
有用于CSP的库，其中一个库使用名称空间CSP。
There are libraries for CSP, and one of them uses the namespace csp for it.

7
00:00:20.910 --> 00:00:25.699
你注意到我们把它叫做.go，因为我们模仿了围棋的惯例
And you notice that we call it .go because we're modeled off of that go routine

8
00:00:25.699 --> 00:00:29.870
心态，来自围棋语言的东西，来自闭包脚本。
mentality, the stuff that comes from the GO language in from Closure script.

9
00:00:29.870 --> 00:00:33.909
这就是我实际上如何将这两个生成器传递给可以做到这一点的东西。
So this is how I actually passed those two generators to something that can do it.

10
00:00:33.909 --> 00:00:37.090
前面的代码片段只是假装有人做了，但是
The previous code snippet just pretended that somebody did it but

11
00:00:37.090 --> 00:00:39.299
这是向前迈出的一小步。
this is a little bit further step along.

12
00:00:39.299 --> 00:00:40.340
它向我们展示了它是如何工作的。
It shows us how it would work.

13
00:00:40.340 --> 00:00:44.630
我们会将这些生成器传递给名为go和
We would pass those generators in to a method called Go and

14
00:00:44.630 --> 00:00:46.670
你注意到现在我有一个真正的循环。
you notice now I have a while true loop going.

15
00:00:47.670 --> 00:00:49.479
这会让那些东西永远运行。
Which is gonna let those things run forever.

16
00:00:50.950 --> 00:00:54.619
这就是你最终如何建模这些独立的过程
That's how you end up modeling these independent processes that

17
00:00:54.619 --> 00:00:57.469
运行您的应用程序，因为您最终基本上拥有它们中的每一个
run your application as you end up basically having every one of them with

18
00:00:57.469 --> 00:00:58.399
一段时间真正的循环。
a while true loop in it.

19
00:00:58.399 --> 00:00:59.682
它们都是独立运行的。
They're all running independently.

20
00:01:02.474 --> 00:01:04.888
&gt；&gt；Kyle Simpson：这里我从1号线到5号线，
&gt;&gt; Kyle Simpson: So here I've got on line 1 through 5,

21
00:01:04.888 --> 00:01:09.429
我在声明一个GO例程，每次有人让它
I'm declaring a go routine that's going to, every time somebody lets it

22
00:01:09.429 --> 00:01:13.769
它将生成一个新的随机数并将其推入通道。
it's gonna generate a new random number and push it down the channel.

23
00:01:15.819 --> 00:01:20.500
它想尽可能快地做到这一点，但如果你注意到这个概念
It would like to do that as fast as possible but if you'll notice the notion

24
00:01:20.500 --> 00:01:24.620
这个阻塞通道是，它将会，这里有一个背压。
of this blocking channel is, it's going to be, there is a back pressure here.

25
00:01:24.620 --> 00:01:28.439
它不会被允许以更快的速度向下推任何东西
It's not going to be allowed to push anything down the channel at any faster

26
00:01:28.439 --> 00:01:34.030
速度比另一端的人正在消耗它，你能看到吗。
speed than somebody on the other end is consuming it, can you see that.

27
00:01:34.030 --> 00:01:38.770
所以在通道的另一端，我有另一套完整的围棋程序
So on the other end of the channel, I have another go routine in an entirely

28
00:01:38.770 --> 00:01:43.015
我的应用程序的不同部分，他每500毫秒等待一次。
different part of my application and he's waiting every 500 milliseconds.

29
00:01:44.189 --> 00:01:47.879
他每隔500毫秒就会从通道中取出一些东西。
And he's pulling something off the channel once every 500 milliseconds.

30
00:01:47.879 --> 00:01:50.350
听起来耳熟吗？
Does that sound familiar?

31
00:01:50.350 --> 00:01:52.799
这听起来像是采样的溪流吗？
Does that sound like a sampled stream?

32
00:01:52.799 --> 00:01:56.409
这是一种通过CSP语义对采样流进行建模的方法。
This is a way of modeling the sampled stream through CSP semantics.

33
00:01:58.180 --> 00:02:00.739
所以3号线上的那个人是Note
So the guy up on line 3 is note

34
00:02:00.739 --> 00:02:03.700
能够比某人消费的速度更快地推动随机值。
able to push the random values any faster than somebody is consuming.

35
00:02:03.700 --> 00:02:10.295
而在第9行的人每500毫秒只消耗一次。
And the guy down on line 9 is consuming them only once every 500 milliseconds.

36
00:02:10.295 --> 00:02:13.326
嗯，第9行的人不知道这些值是如何产生的，或者
Well, the guy in line 9 has no idea how those values are being produced or

37
00:02:13.326 --> 00:02:15.030
他们来自哪里。
where they're coming from.

38
00:02:15.030 --> 00:02:18.210
3号线上的人不知道是谁拿的。
The guy on line 3 has no idea who's taking them.

39
00:02:18.210 --> 00:02:22.139
它们实际上是完全独立的顺序过程，但是
They're literally completely independent sequential processes but

40
00:02:22.139 --> 00:02:25.878
它们能够通过阻塞通道语义进行协调。
they're able to coordinate through blocking channel semantics.

41
00:02:31.189 --> 00:02:31.996
凯尔·辛普森：什么事？
&gt;&gt; Kyle Simpson: Yes?

42
00:02:31.996 --> 00:02:36.406
&gt；&gt；演讲者2：这个应该多走一点，
&gt;&gt; Speaker 2: This should walking through this just a little bit more and

43
00:02:36.406 --> 00:02:41.009
你现在可能正在做，但有两个镜头，对吧？
you might be doing it now but there's the two takes, right?

44
00:02:42.110 --> 00:02:43.979
线上收益率-&gt；&gt；Kyle Simpson：第一个
Yield on line- &gt;&gt; Kyle Simpson: The first one

45
00:02:43.979 --> 00:02:44.979
在第9行，是的。
on line 9, yep.

46
00:02:44.979 --> 00:02:49.420
&gt；&gt；Speaker 2：第9行，即从第一个函数获取值？
&gt;&gt; Speaker 2: Line 9, that is taking a value from the first function?

47
00:02:49.420 --> 00:02:51.264
&gt；&gt；Kyle Simpson：但是看看它是从哪里开始的，
&gt;&gt; Kyle Simpson: But look where it's taking it from,

48
00:02:51.264 --> 00:02:53.354
因为Take总是需要一个通道。
because take always requires a channel.

49
00:02:53.354 --> 00:02:57.259
我们传递给它的是一个由timeout函数创建的通道。
And what we're passing to it is a channel that is created by the timeout function.

50
00:02:58.979 --> 00:03:04.020
因此这个库提供的超时实用程序创建了
So the time out utility which is provided by this library creates

51
00:03:04.020 --> 00:03:08.219
在500毫秒过去之前不会将消息向下推送的通道。
a channel that won't push a message down until after 500 milliseconds has passed.

52
00:03:09.469 --> 00:03:12.370
所以我们基本上是说我想从那个频道
So we're basically saying I want to take from that channel and

53
00:03:12.370 --> 00:03:16.740
我要等到那个频道给我点什么。
I'm gonna wait until that channel gives me something.

54
00:03:16.740 --> 00:03:17.349
这是一种方式
That's a way for

55
00:03:17.349 --> 00:03:22.280
我们来做阻塞语义或者我的意思是局部阻塞。
us to do the blocking semantics or I mean the blocking the local.

56
00:03:22.280 --> 00:03:25.949
&gt；&gt；扬声器2：也许我错过了什么频道？
&gt;&gt; Speaker 2: Maybe I missed what is the channel?

57
00:03:25.949 --> 00:03:28.687
&gt；&gt；Kyle Simpson：所以PUT和
&gt;&gt; Kyle Simpson: So the first argument to the put and

58
00:03:28.687 --> 00:03:34.300
我们在这里展示的Take方法始终是一个通道。
the take methods that we're showing here is always a channel.

59
00:03:34.300 --> 00:03:37.247
因此，如果我从由超时方法产生的通道中获取，
So if I take from a channel produced by the timeout method,

60
00:03:37.247 --> 00:03:39.651
对我来说是什么频道都无关紧要，但是
it doesn't matter to me what channel it is, but

61
00:03:39.651 --> 00:03:44.122
我知道那个频道在500毫秒后才会给我发信息。
I know that that channel is not gonna send me a message until after 500 milliseconds.

62
00:03:44.122 --> 00:03:47.079
&gt；&gt；扬声器2：上面有频道声明ch。
&gt;&gt; Speaker 2: There's a channel declaration ch above.

63
00:03:47.079 --> 00:03:50.530
&gt；&gt；Kyle Simpson：是的，就像在上一张幻灯片中一样，我们在这里做了一个。
&gt;&gt; Kyle Simpson: Yeah, it's like in the previous slide, we made one here.

64
00:03:50.530 --> 00:03:54.539
这些库有不同的方式使您的渠道
These libraries have different ways of making your channel so

65
00:03:55.629 --> 00:03:59.150
这就是你制作频道的方式，例如，在第一行。
that's how you make a channel is like up on line 1 for example.

66
00:03:59.150 --> 00:04:03.229
在这里，我们只知道它存在于以太中。
Here that channel, we just know it exists in the ether.

67
00:04:03.229 --> 00:04:04.372
它来自某个地方。&gt；&gt；扬声器3：渠道是善良的
It came from somewhere. &gt;&gt; Speaker 3: Channel is kind

68
00:04:04.372 --> 00:04:06.469
全球性的。
of a global though.

69
00:04:06.469 --> 00:04:09.729
你说他们彼此不了解，但不知何故你必须拥有这个全球
You say they don't know about each other, but somehow you have to have this global

70
00:04:09.729 --> 00:04:13.219
凯尔·辛普森(Kyle Simpson)：那是
state that's- &gt;&gt; Kyle Simpson: That's

71
00:04:13.219 --> 00:04:16.779
在我看来，这个特殊图书馆的缺点之一。
in my opinion one of the downsides of this particular library.

72
00:04:16.779 --> 00:04:18.370
它假定全局变量。
It assumes global variables.

73
00:04:19.459 --> 00:04:22.560
我们会看到像我这样的其他图书馆不会这样做。
We'll see that other libraries like mine don't do that.

74
00:04:24.009 --> 00:04:24.589
好吗？
okay?

75
00:04:24.589 --> 00:04:28.627
但是，是的，这是一个细节，你必须想出某种方式来运输
But yes, that's a detail that you have to figure out some way to transport

76
00:04:28.627 --> 00:04:30.788
使两个频道不同。
the channel so that the two different.

77
00:04:30.788 --> 00:04:33.293
他们唯一需要知道的是他们必须共享一个引用
The only thing they have to know about is they have to share a reference to

78
00:04:33.293 --> 00:04:33.810
频道。
the channel.

79
00:04:34.879 --> 00:04:39.656
有很多不同的方法可以将全局变量作为
There's lots of different ways that you can do that global variables as

80
00:04:39.656 --> 00:04:41.338
只是其中之一，好吗？
just one of them, okay?

81
00:04:47.317 --> 00:04:49.250
&gt；&gt；Kyle Simpson：最后一件事我想给你们看，所以看跌和
&gt;&gt; Kyle Simpson: Last thing I wanna show you, so the puts and

82
00:04:49.250 --> 00:04:50.973
拍摄相当直截了当，但是
takes are pretty straight forward but

83
00:04:50.973 --> 00:04:55.189
实际上，这里定义了几十种不同的原语。
there are actually dozens of different primitives that are defined here.

84
00:04:55.189 --> 00:04:57.590
PUT和Take是迄今为止最常用的。
Put and take are by far the most commonly used.

85
00:04:57.590 --> 00:05:01.139
但是还有一个非常常用的，叫做alts。
But there's another one that's pretty commonly used, and it's called alts.

86
00:05:01.139 --> 00:05:06.415
ALT允许您定义多个通道的列表，例如
Alts lets you define a list of multiple channels and say

87
00:05:06.415 --> 00:05:12.264
我想在这些频道的第一个上做一些动作，让我做一些事情。
I want to do some action on the first of these channels that lets me do something.

88
00:05:12.264 --> 00:05:15.064
所以你可能有两个频道你想从
So you might have two channels that you'd like to take from and

89
00:05:15.064 --> 00:05:18.394
一个你想要播放的频道，你不关心这三个频道中的哪一个
one channel that you'd like to put on and you don't care which of those three

90
00:05:18.394 --> 00:05:21.524
行动发生了，但你只是在等待某人解除你的封锁
actions happens but you're just waiting for somebody to unblocked you so

91
00:05:21.524 --> 00:05:22.935
你可以做点什么。
that you can do something.

92
00:05:22.935 --> 00:05:25.319
所以你在这里传递这些指令。
So you pass in those instructions here.

93
00:05:25.319 --> 00:05:28.480
因为我只是传入了三个通道，默认的是我想从
Because I'm just passing in three channels the default is that I wanna take from

94
00:05:28.480 --> 00:05:29.689
那些频道。
those channels.

95
00:05:29.689 --> 00:05:33.899
但我也可以通过一个频道，我说我想放到这个频道。
But I could also pass in one channel where I'm saying I wanna put to this channel.

96
00:05:33.899 --> 00:05:36.487
它不会到达2频道
And it's not gonna get to channel 2 and

97
00:05:36.487 --> 00:05:40.139
如果通道1总是有一条消息准备好，则通道3。
channel 3 at all if channel 1 always has a message ready.

98
00:05:41.379 --> 00:05:45.340
所以它基本上是说，为了我指定它们，不管是哪一个
So it's basically saying whichever one in order that I specify them whichever one

99
00:05:45.340 --> 00:05:49.389
有一些东西给某人，有点像承诺的出品率。
has something for somebody it's kind of like a promised out rate sort of.

100
00:05:49.389 --> 00:05:53.329
所以每个人都有东西给我，然后它会解开我，让我走。
So everyone has something for me, then it's gonna unblock me and let me go.

101
00:05:53.329 --> 00:05:56.663
所以这是一种有很多不同的输入通道进来的方式
So this is a way to have lots of different input channels coming in and

102
00:05:56.663 --> 00:05:59.362
能够管理所有这些不同的渠道。
being able to manage all of those different channels.

103
00:06:08.833 --> 00:06:11.733
&gt；&gt；Kyle Simpson：这只是我想说的一个愚蠢的例子，它是其中之一
&gt;&gt; Kyle Simpson: That's just a silly example I wanted to throw in it's one of

104
00:06:11.733 --> 00:06:15.810
在CSP的规范示例中，您会注意到，在第1行中，我创建了一个单次GO例程。
the canonical examples for CSP, you notice on line 1 I create a single go routine.

105
00:06:17.540 --> 00:06:20.959
第二行就是我制作频道的地方，所以
And there on line 2 is where I'm making a channel so

106
00:06:20.959 --> 00:06:24.829
您可以看到csp.chan，它使用这个特定库创建通道。
you see csp.chan that's on make a channel with this particular library.

107
00:06:24.829 --> 00:06:29.492
所以我正在为我的频道制作一个乒乓球桌，并注意第4行和
So I'm making a ping pong table for my channel and notice lines 4 and

108
00:06:29.492 --> 00:06:33.800
5正在创造更多的围棋例程。
5 are creating more go routines.

109
00:06:33.800 --> 00:06:38.009
我调用go方法，并将它传递给另一个生成器的引用，
I'm calling the go method and I'm passing it a reference to another generator,

110
00:06:38.009 --> 00:06:40.569
另一个GO程序，发电机在12号线上。
the another go routine, the generator that's on line 12.

111
00:06:42.529 --> 00:06:46.699
所以我创建了两个我的Play or Go例程，所以
So I'm creating two instances of my play or go routine, so

112
00:06:46.699 --> 00:06:49.090
现在我有三个围棋程序同时发生。
now I have three go routines happening at the same time.

113
00:06:49.090 --> 00:06:53.456
我有一个主要的，它有点像这场比赛的裁判
I have this main one, which is kind of like the referee for the game and

114
00:06:53.456 --> 00:06:55.053
然后我有两个球员。
then I have two players.

115
00:06:55.053 --> 00:06:57.437
我有一张表代表我的频道，并且
And I have a table which represents my channel, and

116
00:06:57.437 --> 00:06:59.766
我们交换信息的方式
the way we're going to trade information back and

117
00:06:59.766 --> 00:07:04.180
FORTH是我们要在通道上来回交换一个球。
forth is that we're gonna trade a ball back and forth across the channels.

118
00:07:04.180 --> 00:07:08.718
所以第一个玩家叫ping，第二个玩家叫pong。
So the first player is called ping in the second player is called pong.

119
00:07:08.718 --> 00:07:13.213
你注意到第13行的玩家设置了一个while true循环。
And you notice that the player on line 13 it set up with a while true loop.

120
00:07:13.213 --> 00:07:16.920
他说，虽然我可以继续，这基本上意味着永远。
He says while I can keep going which means basically forever.

121
00:07:18.199 --> 00:07:25.069
我要从桌子上拿球，所以我在等球打到我身上。
I am going to take from the tables so I'm waiting for the ball to get hit to me.

122
00:07:25.069 --> 00:07:28.360
只要我没有收到我的频道关闭的消息，
And as long as I didn't get the message that my channel is closed,

123
00:07:28.360 --> 00:07:34.110
这告诉我游戏已经结束了，然后我要把我的点击数更新一，
which tells me that the game is over, then I'm going to update my hit count by one,

124
00:07:34.110 --> 00:07:37.149
打印出我是那个击球的人这一事实。
print out the fact that I'm the one hitting the ball.

125
00:07:37.149 --> 00:07:40.409
然后我会等待100毫秒来增加一点延迟
And then I'm gonna wait 100 milliseconds to add a little bit of latency to

126
00:07:40.409 --> 00:07:44.600
系统，然后我要把球打回给另一个球员。
the system, and then I'm gonna hit the ball back to the other player.

127
00:07:44.600 --> 00:07:46.810
这是第22行，我把球放回原处。
And that's line 22, and I put the ball back.

128
00:07:48.220 --> 00:07:51.970
所以这两个不同的球员实例把球换回来
So these two different player instances that trade the ball back and

129
00:07:51.970 --> 00:07:55.740
每100毫秒前进一次，直到裁判宣布比赛结束。
forth every 100 milliseconds until the referee says game over.

130
00:07:55.740 --> 00:08:00.937
这就是在1000毫秒后第9行发生的情况
And that's what happens up on line 9 after 1000 milliseconds

131
00:08:00.937 --> 00:08:05.684
裁判关闭了桌子频道，说比赛结束了。
the referee closes the table channel says the game's over.

132
00:08:11.908 --> 00:08:15.750
&gt；&gt；Kyle Simpson：我第一次看到这个例子是在我有那个的时候，什么。
&gt;&gt; Kyle Simpson: First time I saw this example that's when I had that, what.

133
00:08:17.420 --> 00:08:21.800
我以前从未见过这样的东西，从那以后我就被迷住了
I'd never seen anything like this before and ever since then I've been fascinated

134
00:08:21.800 --> 00:08:25.870
并且积极研究我们如何才能做到这一点，并使我们的编程，我们
and actively researching how can we take that and make the programming that we

135
00:08:25.870 --> 00:08:29.877
通过使事情更模块化和更容易理解，做得更合理，更容易理解
do more reasonable, more understandable by making things more modular and

136
00:08:29.877 --> 00:08:33.722
更独立，所以我们的系统没有那么复杂。
more independent, so we don't have so much complexity in our systems.
