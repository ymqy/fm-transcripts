WEBVTT

1
00:00:00.000 --> 00:00:03.778
[音乐]
[MUSIC]

2
00:00:03.778 --> 00:00:06.703
&gt；&gt；Kyle：现在您注意到当我调用getData函数时，
&gt;&gt; Kyle: Now you notice that when I call the getData function,

3
00:00:06.703 --> 00:00:08.789
它没有返回值。
it has no return value.

4
00:00:08.789 --> 00:00:10.960
所以从技术上讲我是在放弃未定义的。
So I'm technically yielding out undefined.

5
00:00:13.880 --> 00:00:17.250
这在这里不会造成问题，因为我们有getData
That doesn't cause a problem here because we have the getData

6
00:00:17.250 --> 00:00:22.179
特意打电话给它。下一个。
wired specifically to call it.next.

7
00:00:22.179 --> 00:00:25.588
但我们可以做出一个实现上的改变，
But there's an implementation change that we can make,

8
00:00:25.588 --> 00:00:29.570
这将重新配置所有这些事情发生的方式。
which is gonna reconfigure the way all of this stuff is happening.

9
00:00:29.570 --> 00:00:33.770
从里面看，它看起来完全一样，但是我们在这里可以观察到的是，
From the inside, it's gonna look exactly the same, but what we can observe here,

10
00:00:33.770 --> 00:00:37.789
这些问题中的一些被问到了，这实际上是一种好的现象
which is actually kind of good that some of these questions were being asked from

11
00:00:37.789 --> 00:00:38.345
聊天。
the chat.

12
00:00:38.345 --> 00:00:43.057
因为我们在这里可以观察到的是我们仍然很容易受到
Because what we can observe here is we're still every bit as susceptible to

13
00:00:43.057 --> 00:00:46.000
像往常一样召回地狱，不是吗？
callback hell as we always were, aren't we?

14
00:00:46.000 --> 00:00:48.179
至少有一件事叫回地狱。
At least one of the things of callback hell.

15
00:00:48.179 --> 00:00:50.000
我们有一个控制反转的问题，不是吗？
We have an inversion of control issue, don't we?

16
00:00:51.009 --> 00:00:55.149
有人可以叫它。下一步，我们没有预料到的方式
Somebody can call it.next in a way that we're not expecting and

17
00:00:55.149 --> 00:00:56.000
把一切都搞砸了。
screw everything up.

18
00:00:59.250 --> 00:01:01.210
我们仍然有一个控制反转的问题。
We still have an inversion of control issue.

19
00:01:01.210 --> 00:01:05.370
我们已经解决了非局部的，非顺序的合理性问题。
We've solved the non-local, non-sequential reasonability issue.

20
00:01:05.370 --> 00:01:09.510
但是我们目前在这个代码库中没有解决方案
But we have no solution currently in this code base for

21
00:01:09.510 --> 00:01:12.340
控制反转回叫地狱问题。
the inversion of control callback hell issue.

22
00:01:14.159 --> 00:01:15.019
猜猜我们要做什么？
So guess what we're gonna do?

23
00:01:16.680 --> 00:01:20.099
我们要把承诺和发电机放在一起。
We're gonna put promises together with generators.

24
00:01:21.719 --> 00:01:25.840
承诺会解决我们的控制反转问题。
Promises are gonna solve our inversion of control issue.

25
00:01:25.840 --> 00:01:27.090
解决我们的信任问题。
Solve our trust issue.

26
00:01:27.090 --> 00:01:29.400
解决我们的流量控制问题。
Solve our flow control control issue.

27
00:01:30.469 --> 00:01:36.140
发电机将解决我们的非局部的，非顺序的合理性问题。
Generators are gonna solve our non-local, non-sequential reasonability issue.

28
00:01:36.140 --> 00:01:40.450
以及对此的关键识别，而不是产生未定义的值，
And the key recognition for this, instead of yielding an undefined value,

29
00:01:40.450 --> 00:01:44.719
我们要把这个连接起来，这样我们就会产生一个承诺。
we're going to wire this up so that we are going to yield a promise.

30
00:01:46.560 --> 00:01:48.490
现在我想让你在我展示给你之前先从概念上考虑一下
Now I want you to think about this conceptually before I show you

31
00:01:48.490 --> 00:01:49.189
任何代码，看着我。
any code, look at me.

32
00:01:50.539 --> 00:01:54.639
在我的代码中，当我说放弃并进行Ajax调用时，
Inside of my code when I say yield and I make an Ajax call,

33
00:01:54.639 --> 00:02:00.240
如果Ajax调用返回我对它的承诺，那么我是否放弃了它的承诺？
if that Ajax call returns me a promise for it, am I yielding out its promise?

34
00:02:00.240 --> 00:02:03.894
是的，那么谁能得到我刚刚做出的承诺
Yes, so who's gonna get the promise that I just yielded

35
00:02:03.894 --> 00:02:08.820
出去？&gt；&gt；Kyle：谁是
out? &gt;&gt; Kyle: Whoever is

36
00:02:08.820 --> 00:02:12.300
用它驱动我的发电机，下一个电话，对吧？
driving my generator with its it.next call, right?

37
00:02:12.300 --> 00:02:16.000
所以想象一下在某个地方有一些管道
So imagine there's some plumbing somewhere which is gonna

38
00:02:16.000 --> 00:02:17.340
在框架或图书馆中。
be in a framework or a library.

39
00:02:17.340 --> 00:02:20.879
但有些地方的管道上写着。下一步，和
But there's some plumbing somewhere that says it.next, and

40
00:02:20.879 --> 00:02:23.460
它得到的是一个承诺。
what it gets back is a promise.

41
00:02:25.000 --> 00:02:26.180
那么这个承诺会有什么用呢？
So what's it gonna do with that promise?

42
00:02:27.639 --> 00:02:32.629
上面写的是承诺然后就是下一个。
It's gonna say promise.then it.next.

43
00:02:32.629 --> 00:02:33.710
这就是它的工作原理。
So here's how this works.

44
00:02:33.710 --> 00:02:37.960
我们给出一个承诺，停顿一下，然后我们说。然后和
We yield out a promise, pausing and then we say .then and

45
00:02:37.960 --> 00:02:43.289
当承诺解决时，我们恢复生成器。
when the promise resolves, we resume the generator.

46
00:02:43.289 --> 00:02:47.649
然后我们让步，暂停，然后继续
And then we yield and pause and then and resume and

47
00:02:47.649 --> 00:02:50.632
让步，暂停，然后继续。
yield and pause and then resume.

48
00:02:50.632 --> 00:02:52.016
这就是我们让魔法发挥作用的方式。
That's how we make that magic work.

49
00:02:52.016 --> 00:02:55.800
这就是我们如何将承诺输入发电机。
That's how we wire promises into the generator.

50
00:02:55.800 --> 00:02:59.770
我们做出承诺，然后承诺恢复生成器，以及何时
We yield out promises and then the promises resume the generator and when

51
00:02:59.770 --> 00:03:04.294
承诺有一些值可以传递，它将它传递给it.next调用。
the promise has some value to pass along, it passes it along to the it.next call.

52
00:03:05.979 --> 00:03:09.368
所以那个管道，我说的那个圆形管道。
So that plumbing, that circular plumbing that I'm talking about.

53
00:03:09.368 --> 00:03:12.913
您可以编写一个实用程序来为您的生成器做到这一点。
You could write a utility to do that for your generators.

54
00:03:12.913 --> 00:03:17.525
它大约有25，30行代码来处理错误处理中的所有细微差别
It's about 25, 30 lines of code to handle all the little nuances in error handling

55
00:03:17.525 --> 00:03:18.925
还有其他的东西。
and all that other stuff.

56
00:03:18.925 --> 00:03:19.610
你可以做到的。
You could do it.

57
00:03:21.099 --> 00:03:25.198
它在我的书里，如果你想写你自己的，你可以看到片断就在那里。
It's in my book, you can see the snippet right there if you want to write your own.

58
00:03:25.198 --> 00:03:26.163
但你不应该这么做。
But you shouldn't have to.

59
00:03:26.163 --> 00:03:28.348
我想让你理解它在做什么的概念。
I want you to understand the concept of what it's doing.

60
00:03:28.348 --> 00:03:32.057
它产生了一个承诺，恢复了一个发电机，产生了一个承诺。
It's yielding out a promise and resuming a generator and yielding out a promise.

61
00:03:32.057 --> 00:03:34.356
我想让你理解这个概念。
I want you to understand that concept.

62
00:03:34.356 --> 00:03:38.634
但对你们每个人来说，去发明自己的驱动程序是不切实际的
But it's not practical for each of you to go invent your own driver for

63
00:03:38.634 --> 00:03:39.900
这些发电机。
these generators.

64
00:03:41.699 --> 00:03:45.876
所以你需要一个内置在图书馆里的
So you're gonna need one that's built into a library and

65
00:03:45.876 --> 00:03:50.189
原来异步有一个，q有一个，co有一个。
it turns out asynquence has one, Q has one, co has one.

66
00:03:50.189 --> 00:03:52.090
我是说，所有主要的图书馆，
I mean, all the major libraries,

67
00:03:52.090 --> 00:03:55.050
他们都有这个，因为他们都知道这是
they all have this, cuz they all know that this is the most

68
00:03:55.050 --> 00:03:58.990
在很长一段时间内，JavaScript编程中的重要模式。
important pattern to land in JavaScript programming in a really long time.

69
00:03:58.990 --> 00:04:01.039
所以他们都有这些司机，我的司机叫Runner。
So they all have these drivers, mine's called runner.

70
00:04:01.039 --> 00:04:06.112
正如您在第8行中看到的，他将生成器传递给了runner方法。
As you see on line 8, he passed the generator to the runner method.

71
00:04:06.112 --> 00:04:08.948
它会自动知道如果你输出一个序列或者
And it automatically knows that if you yield out a sequence or

72
00:04:08.948 --> 00:04:11.949
做出承诺，它就会自动知道等待
yield out a promise, it automatically knows to wait for that and

73
00:04:11.949 --> 00:04:14.241
然后继续，然后等待，然后继续。
then resume and then wait for it and then resume.

74
00:04:19.963 --> 00:04:22.617
&gt；&gt；Kyle：这张幻灯片的要点是
&gt;&gt; Kyle: The main point of this slide is

75
00:04:22.617 --> 00:04:29.093
为了说明异步的价值在于发电机驱动，
to illustrate that the value of asynquence is that a generator driving,

76
00:04:29.093 --> 00:04:34.838
就像我们所说的，实际上只是序列中的一个步骤。
like we're talking about, is really just a step in a sequence.

77
00:04:36.449 --> 00:04:40.670
所以如果我真的需要的话，我可以把它放在另一个序列的中间。
So I can put it right in the middle of another sequence if I really needed to.

78
00:04:40.670 --> 00:04:44.629
这就是为什么在第16行我的序列中还有另一个步骤，它只在
That's why on line 16 I have another step in my sequence that only fires after

79
00:04:44.629 --> 00:04:46.170
发电机已完全完成。
the generator is fully completed.

80
00:04:48.329 --> 00:04:52.329
所以一旦你对异步所提供的抽象进行了思考，
So once you wrap your head around the abstraction that asynquence provides,

81
00:04:52.329 --> 00:04:53.814
序列抽象。
the sequence abstraction.

82
00:04:53.814 --> 00:04:56.707
你序列中的每一步都会成为你想要的任何一步。
Every single step in your sequence becomes whatever you want it to be.

83
00:04:56.707 --> 00:05:00.773
无论是发电机运行，或承诺，或反应序列或
Whether it's a generator run, or a promise, or a reactive sequence or

84
00:05:00.773 --> 00:05:01.464
随便吧。
whatever.

85
00:05:12.696 --> 00:05:14.050
&gt；&gt；Kyle：这就是为什么发电机如此
&gt;&gt; Kyle: This is why generators are so

86
00:05:14.050 --> 00:05:14.829
强大。
powerful.

87
00:05:14.829 --> 00:05:19.917
是的，应该有一些这样的，[声音]什么？
Yeah, should have a few of those, [SOUND] what?

88
00:05:19.917 --> 00:05:25.444
这就是为什么发电机如此强大，因为它们完全改变了游戏规则
This is why generators are so powerful cuz they completely change the game for

89
00:05:25.444 --> 00:05:28.088
我们如何编写异步代码。
how we write our asynchronous code.

90
00:05:28.088 --> 00:05:31.262
还记得上次我们在研讨会开始的时候我说的话吗？
Remember what I said at the very beginning of our workshop last time we were

91
00:05:31.262 --> 00:05:31.778
一起？
together?

92
00:05:31.778 --> 00:05:35.281
我说我们不是在讨论引入新功能，
I said we're not talking about introducing new functionality,

93
00:05:35.281 --> 00:05:39.379
我们在讨论引入新的表现力，为什么？
we're talking about introducing new expressivity, why?

94
00:05:39.379 --> 00:05:43.783
因为当你的大脑不像你的代码那样工作时，就会发生错误
Because bugs happen when your brain doesn't work like the code that you're

95
00:05:43.783 --> 00:05:44.408
写作。
writing.

96
00:05:44.408 --> 00:05:47.192
所以我们试图想出一个模式
So we're trying to come up with a pattern for

97
00:05:47.192 --> 00:05:50.970
编写更接近我们大脑工作的代码。
writing code that works more closely like our brains work.

98
00:05:50.970 --> 00:05:55.024
你知道为什么这比我们说的回调地狱要好得多吗？
Do you see why this is so much better than the callback hell that we've talked about

99
00:05:55.024 --> 00:05:58.038
或者甚至承诺链或者thunk筑巢之类的？
or even the promise chains or the thunk nesting or whatever?

100
00:05:58.038 --> 00:06:02.100
这是好得多，因为它的工作方式，我们的大脑工作。
This is so much better because it works the way our brains work.

101
00:06:03.129 --> 00:06:06.100
因为我们编织着承诺，我们得到了所有的可信性
And because we weave in promises, we get all the trustability

102
00:06:06.100 --> 00:06:08.670
缺乏控制反转，所有的东西都修好了。
the lack of inversion of control, all that stuff's fixed.

103
00:06:08.670 --> 00:06:14.370
所以我们把这两个放在一起，我们最终得到了一个解决方案，一个回叫地狱。
So we put those two together and we get, finally, a solution a callback hell.

104
00:06:18.778 --> 00:06:20.790
&gt；&gt；Kyle：现在，这个模式是这样的
&gt;&gt; Kyle: Now, this pattern is so

105
00:06:20.790 --> 00:06:28.550
重要的是，他们已经提出了一个几乎可以肯定的提案。
important that they've already advanced a proposal that's a virtual certainty.

106
00:06:28.550 --> 00:06:32.966
他们提出了创建下一版本JavaScript的建议
They've advanced a proposal for the next version of JavaScript to create

107
00:06:32.966 --> 00:06:37.680
另一种新类型的函数，称为异步函数。
another new type of function, called an async function.

108
00:06:37.680 --> 00:06:39.680
这和我刚才给你看的完全一样，但是
That does exactly what I just showed you, but

109
00:06:39.680 --> 00:06:42.459
没有任何图书馆需要驱动它。
without any library needing to drive it.

110
00:06:42.459 --> 00:06:47.497
这就是它的样子。&gt；&gt；Kyle：而不是
Here's what it's gonna look like. &gt;&gt; Kyle: Instead of

111
00:06:47.497 --> 00:06:52.411
有类似ASQ().runner的东西，并传入您的生成器，
having something like ASQ().runner, and passing in your generator,

112
00:06:52.411 --> 00:06:56.478
然后做一堆生成Ajax(.)像这样的电话。
and then doing a bunch of yield ajax(..) calls like that.

113
00:06:59.509 --> 00:07:03.475
这就是现在起作用的，因为你有一个可以做所有管道的库
That's what works now cuz you have a library that will do all the plumbing

114
00:07:03.475 --> 00:07:03.999
为了你。
for you.

115
00:07:03.999 --> 00:07:07.925
这个新的提议说，除掉图书馆，
This new proposal says, take out the library,

116
00:07:07.925 --> 00:07:11.076
只需创建一个异步函数，
just make an asynchronous function,

117
00:07:14.045 --> 00:07:17.600
&gt；&gt；Kyle：比如说，就叫它foo吧。
&gt;&gt; Kyle: Like call it foo, for example.

118
00:07:17.600 --> 00:07:19.906
打电话给阿福。
And just call foo.

119
00:07:19.906 --> 00:07:22.790
现在我们用等待而不是屈服。
And now we use await instead of yield.

120
00:07:22.790 --> 00:07:25.923
这里有人有C#的经验吗？
Anybody in here have experience with C#?

121
00:07:25.923 --> 00:07:30.762
C#程序员，如果你正在监听，你会发现异步正在等待。
C# programmers, if you're listening in, you'll recognize the async await.

122
00:07:30.762 --> 00:07:33.100
这完全是C#的异步等待。
This is exactly async await from C#.

123
00:07:33.100 --> 00:07:35.379
我们正在将其编码为JavaScript。
We're codifying it into JavaScript.

124
00:07:35.379 --> 00:07:38.840
所以这就是我所说的模式，关于做出承诺，并且
So it's exactly that pattern that I talked about, about yielding a promise out, and

125
00:07:38.840 --> 00:07:40.290
恢复发电机。
resuming the generator.

126
00:07:40.290 --> 00:07:42.417
我们刚刚谈到的那个旧的概念模型。
That old conceptual model that we just talked about.

127
00:07:42.417 --> 00:07:46.292
但是现在，我们甚至不需要一个库，我们可以直接用语法来表达它。
But now, we don't even need a library, we can just express it directly with syntax.

128
00:07:49.579 --> 00:07:51.730
&GT；&GT；Kyle：我100%确信，
&gt;&gt; Kyle: I'm 100% convinced,

129
00:07:51.730 --> 00:07:53.879
这是新的基线
this is the new baseline for

130
00:07:53.879 --> 00:07:58.843
了解如何用JavaScript编写异步代码。
understanding how to write asynchronous code in JavaScript.

131
00:07:58.843 --> 00:08:02.129
这就是我们都要去的地方。
This is where we all have to get to.

132
00:08:02.129 --> 00:08:04.029
我说我们最后一次在一起。
I said the last time we were together.

133
00:08:04.029 --> 00:08:05.591
你不能从车间里得到任何东西，
You don't get anything else out of the workshop,

134
00:08:05.591 --> 00:08:08.009
你必须到达这一点，因为这是新的基线。
you gotta get to this point cuz it's the new baseline.

135
00:08:08.009 --> 00:08:12.750
这是一个新水平的能力，我们都必须围绕着我们的大脑和
It's the new level of competency that we all have to wrap our brains around and

136
00:08:12.750 --> 00:08:16.019
一夜之间就会这样吗？
is it gonna come like that overnight?

137
00:08:16.019 --> 00:08:18.389
不，这需要一些练习和工作。
No, it's gonna take some practice and some work.

138
00:08:20.129 --> 00:08:22.190
但现在好多了，真的
But it's just so much better, it's so

139
00:08:22.190 --> 00:08:25.387
与我们一直在做的相比，游戏规则发生了变化。
game changing compared to what we've been doing all along.

140
00:08:25.387 --> 00:08:27.925
但是它的价值，我希望它的价值是显而易见的，
But the value, I hope the value is evident,

141
00:08:27.925 --> 00:08:32.874
价值应该是值得的。凯尔：什么事？
the value should be clearly worth it. &gt;&gt; Kyle: Yes?

142
00:08:32.874 --> 00:08:33.885
&gt；&gt；扬声器2：他们在问
&gt;&gt; Speaker 2: They're asking about

143
00:08:33.885 --> 00:08:36.448
转置代码中生成器的质量和速度，
the quality and speed of generators in transpiled code,

144
00:08:36.448 --> 00:08:37.721
&gt；&gt；Kyle：[笑]
&gt;&gt; Kyle: [LAUGH]

145
00:08:37.721 --> 00:08:39.043
&gt；&gt；扬声器2：真的很慢吗？
&gt;&gt; Speaker 2: Is it really slow?

146
00:08:39.043 --> 00:08:42.248
&gt；&gt；Kyle：[laugh]转换代码不是
&gt;&gt; Kyle: [LAUGH] Transpiled code is not

147
00:08:42.248 --> 00:08:43.719
很棒的代码。
great code.

148
00:08:43.719 --> 00:08:47.750
但是拼写代码并不差
But transpiled code is no worse and

149
00:08:47.750 --> 00:08:52.893
往往比所有真正糟糕的代码都要好
often better than all the really crappy code

150
00:08:52.893 --> 00:08:57.899
你已经写了20年了
that you've been writing for 20 years.

151
00:08:59.250 --> 00:09:00.950
那么拼写的代码是好的吗？
So is the transpiled code good?

152
00:09:01.970 --> 00:09:05.899
它不像ES6那么好，但它可能至少和ES6一样好，如果不是更好的话，
It's not as good as ES6, but it's probably at least as good, if not much better,

153
00:09:05.899 --> 00:09:08.442
而不是你自己写的东西。
than the stuff that you would have written yourself.

154
00:09:16.783 --> 00:09:18.878
&gt；&gt；扬声器3：是否有多填充
&gt;&gt; Speaker 3: Is there a polyfill for

155
00:09:18.878 --> 00:09:21.559
异步等待？&gt；&gt；Kyle：这些是语法，所以
async in await? &gt;&gt; Kyle: These are syntax, so

156
00:09:21.559 --> 00:09:24.152
它们不是聚填材料，它们是易位的。
they're not polyfill, they're transpiled.

157
00:09:24.152 --> 00:09:29.672
Babel支持ES7异步等待。
Babel does support ES7 async await.

158
00:09:36.120 --> 00:09:38.190
&gt；&gt；Kyle：就像一个快速附注。
&gt;&gt; Kyle: Just as a quick side note.

159
00:09:38.190 --> 00:09:41.009
我喜欢异步等待语法。
I like the async await syntax.

160
00:09:41.009 --> 00:09:44.059
我喜欢这个的非图书馆版本。
I like the non-library version of this.

161
00:09:44.059 --> 00:09:47.210
因为任何时候我们都可以在没有图书馆的情况下做一些本土化的事情。
Because any time we can do something natively without a library.

162
00:09:47.210 --> 00:09:48.070
耶，太棒了。
Yay, that's awesome.

163
00:09:49.720 --> 00:09:53.669
但是对于异步函数，您应该注意一些注意事项
But there are some caveats that you should be aware of with async functions

164
00:09:53.669 --> 00:09:56.820
发电机不是这样的。
that are not true of generators.

165
00:09:56.820 --> 00:09:59.929
所以它不仅仅是句法上的糖。
So it's not just syntactic sugar.

166
00:10:01.529 --> 00:10:05.855
主要的事情之一，你记得我们之前谈到了可取消的承诺，
One of the major things, you member we talked about cancelable promises earlier,

167
00:10:05.855 --> 00:10:07.722
我说我不是他们的超级粉丝？
and I said I'm not a big fan of them?

168
00:10:07.722 --> 00:10:12.934
这就是它们的来源，因为我们要制作异步函数，
Here's where they come from because we're gonna make async functions,

169
00:10:12.934 --> 00:10:15.624
Foo，当我们调用异步函数时，
foo, when we call an async function,

170
00:10:15.624 --> 00:10:21.191
它将返回给我们一个承诺，让我们知道该函数何时完成。
it's gonna return us a promise that lets us know when that function finishes.

171
00:10:21.191 --> 00:10:26.149
Async函数产生一个承诺，当Async函数
An async function produces a promise that gets resolved when the async function

172
00:10:26.149 --> 00:10:27.409
完成了，对吧？
finishes, right?

173
00:10:28.490 --> 00:10:32.690
但这里有个问题，如果异步函数正在运行并且
But here's the problem, what if that async function is running and

174
00:10:32.690 --> 00:10:36.860
然后其他一些外部影响说我需要中止。
then some other external influence says I need to abort.

175
00:10:39.070 --> 00:10:40.918
我需要取消它正在做的任何事情。
I need to cancel whatever it's doing.

176
00:10:40.918 --> 00:10:45.080
也许异步功能正在使一些真正资源密集型的长时间运行
Maybe the asynch function is making some really resource intensive long running

177
00:10:45.080 --> 00:10:48.998
Ajax调用和下载大量记录，并且在您的
Ajax call and downloading lots of records and something else happens in your

178
00:10:48.998 --> 00:10:51.951
应用程序，你不想再发生这种事了。
application and you don't want that to happen any more.

179
00:10:51.951 --> 00:10:56.990
从外部世界来看，如何取消正在运行的异步
From the outside world, how do you cancel a running async

180
00:10:56.990 --> 00:11:02.114
功能？&gt；&gt；Kyle：答案是你不能。
function? &gt;&gt; Kyle: The answer is you can't.

181
00:11:02.114 --> 00:11:05.884
正在运行的异步函数上没有Cancel方法。
There is no cancel method on a running async function.

182
00:11:05.884 --> 00:11:07.620
你知道他们想做什么吗？
So you know what they want to do?

183
00:11:07.620 --> 00:11:11.110
他们想做出从异步函数中返回的承诺，
They wanna make the promise that comes back from an async function,

184
00:11:11.110 --> 00:11:14.129
可取消的承诺，以便您可以取消承诺。
a cancellable promise so that you can cancel the promise.

185
00:11:14.129 --> 00:11:19.509
这将神奇地将取消消息发送到异步函数中。
And that will send the cancellation message magically into the async function.

186
00:11:19.509 --> 00:11:23.169
在我看来，这是一个难以置信、荒谬、愚蠢的想法。
This is an unbelievably, ridiculously, stupid idea, in my opinion.

187
00:11:24.620 --> 00:11:28.580
它们应该让异步函数返回允许您控制它的其他内容
They ought to have async functions return something else that lets you control it

188
00:11:28.580 --> 00:11:30.570
听从诺言。
and listen to the promise.

189
00:11:30.570 --> 00:11:32.590
我认为他们想出的主意很糟糕，但是
I think it's a terrible idea what they've come up with but

190
00:11:32.590 --> 00:11:34.950
这几乎肯定会发生。
that's what's almost certainly gonna happen.

191
00:11:37.409 --> 00:11:42.059
生成器不会遇到这样的问题，因为生成器不会返回承诺，
Generators don't suffer that problem cuz generators don't return promises,

192
00:11:42.059 --> 00:11:43.235
生成器返回迭代器。
generators return iterators.

193
00:11:44.519 --> 00:11:46.080
迭代器给你控制权。
Iterators give you control.

194
00:11:46.080 --> 00:11:47.379
我给你看了下一个但是
I showed you the .next but

195
00:11:47.379 --> 00:11:53.169
还有一个.return，它将在运行中止一个生成器。
there's also a .return which will abort a generator in mid run.

196
00:11:53.169 --> 00:11:57.850
还有一个.throp，它可以手动将错误发送到生成器中。
And there's a .throw, which can manually send an error into a generator.

197
00:11:57.850 --> 00:12:01.769
因此，生成器提供了比异步函数更多的外部控制。
So generators give you more control from the outside than async functions do.

198
00:12:03.480 --> 00:12:05.110
正是因为这个原因，
It is for that reason,

199
00:12:05.110 --> 00:12:09.120
就我个人而言，我可能大部分时间都会继续使用发电机。
personally, I'm probably gonna keep using generators most of the time.

200
00:12:10.240 --> 00:12:13.791
每隔一段时间，如果有一个真正轻量级的异步进程，我
Every once in a while if there's a really lightweight asynchronous process that I

201
00:12:13.791 --> 00:12:17.302
不关心任何外部控制，我可能会使用异步函数。
don't care about any external control, I'll probably use an async function.

202
00:12:17.302 --> 00:12:20.514
但大多数时候我可能会继续使用发电机。
But most of the time I'm probably gonna keep using generators.

203
00:12:23.190 --> 00:12:25.885
&gt；&gt；Kyle：这是我自己的观点，因为我没有
&gt;&gt; Kyle: It's my own take because I don't

204
00:12:25.885 --> 00:12:30.711
认为取消是一件重要的事情，很多时候。
think cancellation is an important thing, a lot of times.

205
00:12:30.711 --> 00:12:33.538
我认为这个设计没有恰当地考虑到这一点。
And I don't think this design has properly taken that into account.

206
00:12:33.538 --> 00:12:38.364
所以，这是我个人对它的一点看法，但要回到我们曾经的样子
So that's my own little personal take on it but to circle back to what we've been

207
00:12:38.364 --> 00:12:43.245
带着不同的语气谈论。&gt；&gt；Kyle：我给你看过了
talking about with asynquence. &gt;&gt; Kyle: I showed you that

208
00:12:43.245 --> 00:12:45.019
你可以通过发电机。
you could pass in a generator.

209
00:12:47.470 --> 00:12:50.679
你猜怎么着，你也可以传入一个异步函数。
Guess what, you can also pass in an async function.

210
00:12:52.279 --> 00:12:57.970
所以，如果你真的想要改变，你可以这样做，如果你想，这是完全好的。
So if you did want to change, you can do that if you want, it's totally fine.

211
00:12:57.970 --> 00:13:00.740
Asynquence知道如何处理异步函数，就像它知道的一样
Asynquence knows how to handle an asynchronous function just like it knows

212
00:13:00.740 --> 00:13:01.539
如何操作发电机。
how to handle a generator.
