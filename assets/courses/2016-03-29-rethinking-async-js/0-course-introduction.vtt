WEBVTT

1
00:00:00.000 --> 00:00:10.000
[音乐]
[MUSIC]

2
00:00:39.152 --> 00:00:41.854
&gt；&gt；Kyle：作为对任何可能通过视频或视频加入我们的人的快速介绍
&gt;&gt; Kyle: As quick intro for anyone that maybe joining us on video or

3
00:00:41.854 --> 00:00:44.783
一个以前没听说过我的人，简单介绍一下，
someone that hasn't heard of me before, just a quick intro,

4
00:00:44.783 --> 00:00:47.329
我的名字是凯尔辛普森，被称为getify。
my name is Kyle Simpson known as getify.

5
00:00:47.329 --> 00:00:51.869
我可以在所有主要的地方找到getify，比如Twitter和
And I can be found getify at all the major places like Twitter and

6
00:00:51.869 --> 00:00:56.649
GitHub，Gmail所有其他地方我列出这些东西是因为我鼓励你
GitHub, Gmail all those other places I list this stuff because I encourage you

7
00:00:56.649 --> 00:00:59.450
联系并提供反馈或提出问题。
to reach out and provide feedback or ask questions.

8
00:00:59.450 --> 00:01:02.619
回顾那些东西，特别是将要经历的东西
Be going back over the stuff particularly the stuff that will be going through

9
00:01:02.619 --> 00:01:08.450
在这个研讨会的过程中，这里有很多的深度，特别是
through the course of this workshop and there's a lot of depth here especially

10
00:01:08.450 --> 00:01:13.299
随着我们深入其中，练习变得极具挑战性。
as we get further into it it's the exercises become extremely challenging.

11
00:01:13.299 --> 00:01:15.829
有一些练习花了我几周的时间去锻炼，而且
There are exercises that took me weeks to work out, and

12
00:01:15.829 --> 00:01:17.810
那我希望你在20分钟内完成
then I'm expecting you to do them in 20 minutes.

13
00:01:17.810 --> 00:01:20.170
所以他们故意极具挑战性。
So they're extremely challenging on purpose.

14
00:01:20.170 --> 00:01:23.599
我只是试图推动您对异步模式的理解。
I'm just trying to push your understanding of asynchronous patterns.

15
00:01:23.599 --> 00:01:26.522
所以如果你对此有疑问或者你在挣扎，
So if you have questions about that or if you're struggling with that,

16
00:01:26.522 --> 00:01:27.798
请随时联系。
please feel free to reach out.

17
00:01:27.798 --> 00:01:29.329
我很乐意帮你
I'd love to help you with that.

18
00:01:29.329 --> 00:01:31.670
很快，我做了几个开源项目，
Just real quickly, I've done several open source projects,

19
00:01:31.670 --> 00:01:35.783
LABjs，脚本加载器，夹点作为模板引擎，异步。
LABjs, script loader, grips as a templating engine, asynquence.

20
00:01:35.783 --> 00:01:38.390
实际上，我们会花很多时间讨论异步。
We're gonna spend a lot of time talking about asynquence actually.

21
00:01:38.390 --> 00:01:41.039
但不是因为我想把图书馆卖给你，
But not because I'm trying to sell you on that library,

22
00:01:41.039 --> 00:01:45.370
原因很简单，因为它的设计目的是帮助使异步编程概念变得更容易
simply because it is designed to help make asynchronous programming concepts easier

23
00:01:45.370 --> 00:01:49.560
在你的大脑中理解和管理是为了让它们更容易教。
to understand and manage in your brain is designed to make them easier to teach.

24
00:01:49.560 --> 00:01:54.200
因此，当我们在整个研讨会中进行时，您会接触到一些不同步现象。
So you get some exposure to asynquences as we go throughout this workshop.

25
00:01:56.090 --> 00:01:59.180
我是Maker Square的课程主管
I am the head of curriculum for Maker Square for

26
00:01:59.180 --> 00:02:01.439
在过去的三四个月里。
about the last three or four months.

27
00:02:01.439 --> 00:02:03.959
Maker Square是一所开发工程师培训学校。
Maker Square is a developer engineer training school.

28
00:02:03.959 --> 00:02:07.719
我们在奥斯汀、旧金山和洛杉矶设有校园，而且
We have campuses in Austin, San Francisco, and Los Angeles, and

29
00:02:07.719 --> 00:02:09.969
我们也将扩张。
we will be expanding, as well.

30
00:02:09.969 --> 00:02:12.979
我们把你从初级状态带到中级状态，
We take you from junior level status to intermediate status,

31
00:02:12.979 --> 00:02:15.430
这与其他学校略有不同。
and that's slightly different than other schools.

32
00:02:15.430 --> 00:02:18.960
这可能会说，我们从无到有，让你进入初级水平
Which may say, we start you from nothing and get you to junior level status for

33
00:02:18.960 --> 00:02:20.520
更高端的，
more on the higher end,

34
00:02:20.520 --> 00:02:24.550
我们更喜欢把自己想象成这些开发学校中的麻省理工学院。
we like to kind of think of ourselves more like the MIT of these developer schools.

35
00:02:24.550 --> 00:02:28.729
所以你从更高的水平开始，这更符合你的要求，但是
So you start out at a higher level, it's more as required of you but

36
00:02:28.729 --> 00:02:31.879
我们还将带您更深入地了解完整堆栈JavaScript学校，因此
we also take you a lot further to Full-Stack JavaScript school so

37
00:02:31.879 --> 00:02:35.240
我们教所有的前端框架，比如角度和反应
we teach all the front end Frameworks like the angulars and reacts and

38
00:02:35.240 --> 00:02:39.506
所有后端的东西，像Mongo，Node和Express等诸如此类的东西。
all the backend things like Mongo and Node and Express and things like that.

39
00:02:39.506 --> 00:02:43.009
[咳嗽]如果你有任何问题或
[COUGH] If you have any questions or

40
00:02:43.009 --> 00:02:46.979
关于科技学校的想法，或者你知道有人对此感兴趣或有一些
thoughts about tech schooling or you know somebody that's interested or has some

41
00:02:46.979 --> 00:02:50.389
如果有问题，请把他们和我联系，我很想和你多聊聊这个。
questions please put them in touch with me I'd love to chat with you more about that.

42
00:02:52.180 --> 00:02:56.200
我写了一系列关于JavaScript的书，名为“你不知道JS”(You Don‘t Know JS)。
I've written a series of books on JavaScript called You Don't Know JS.

43
00:02:56.200 --> 00:02:59.337
我们今天要讨论的很多内容都是以某种形式或
A lot of what we're gonna talk about today is covered in some way shape or

44
00:02:59.337 --> 00:03:00.289
那些书里的形式。
form in those books.

45
00:03:00.289 --> 00:03:03.939
特别是异步和性能书籍，以及ES6书籍。
Particularly, the Async and Performance book, as well as the ES6 book.

46
00:03:03.939 --> 00:03:07.500
您应该能够找到其中一些主题的相当多的覆盖范围
You should be able to find quite a bit of coverage of some of these topics

47
00:03:07.500 --> 00:03:08.530
在那些书里。
in those books.

48
00:03:08.530 --> 00:03:13.560
整个6本书系列价值1100页，可以在GitHub在线免费获得。
The entire 6 book series 1,100 pages worth is available for free online at GitHub.

49
00:03:14.629 --> 00:03:17.259
你不知道js.com会重定向到那个地方。
You don't know js.com will redirect to that.

50
00:03:17.259 --> 00:03:18.240
您也可以购买它们。
You can also purchase them.

51
00:03:18.240 --> 00:03:19.969
他们已经通过O‘Reilly编辑和出版了。
They've been edited and published through O'Reilly.

52
00:03:19.969 --> 00:03:22.579
所以，如果你对这些内容感到满意，你可以购买它们。
So you can purchase them if you're happy with that content.

53
00:03:23.579 --> 00:03:27.945
今天，我们将讨论异步模式。
Today, we are going to talk about asynchronous patterns.

54
00:03:27.945 --> 00:03:30.900
现在，我想马上解释一下我对这件事的态度，
Now, I wanna explain right off the bat that my approach to this,

55
00:03:30.900 --> 00:03:33.560
就像我教的其他东西一样，
much like my approach to the other things that I teach,

56
00:03:33.560 --> 00:03:39.430
在解释如何使用某物之前，首先要关注这个概念。
is to first focus on the concept before explaining the how to use something.

57
00:03:39.430 --> 00:03:42.270
这与我的一些同龄人不同，他们是第一个
That differs from some of my peers who were first

58
00:03:42.270 --> 00:03:45.159
会向你展示某样东西的API
would present to you the API for something and

59
00:03:45.159 --> 00:03:49.329
然后也许稍后，你可能会了解它背后的一些概念。
then maybe perhaps later, you might pick up on some of the conceptuals behind it.

60
00:03:49.329 --> 00:03:52.819
我认为对你来说更有效的是理解你为什么做某件事
I think it's more effective for you to understand why you do something a certain

61
00:03:52.819 --> 00:03:57.560
在真正沉浸于实际做的事情之前就已经有很长的路要走了。
way before actually getting too immersed in the actual doing of the thing.

62
00:03:57.560 --> 00:03:58.689
所以举个例子，
So for example,

63
00:03:58.689 --> 00:04:02.680
你们中的一些人可能已经对承诺有些熟悉了。
some of you listening probably are already at least somewhat familiar with promises.

64
00:04:02.680 --> 00:04:06.150
但我不确定每个人都有很好的概念基础
But I'm not sure everyone has had a very good conceptual grounding in what

65
00:04:06.150 --> 00:04:09.680
承诺真的是，为什么承诺是有用的，
a promise really is, and why a promise is useful,

66
00:04:09.680 --> 00:04:14.680
因为我在开源社区看到了很多关于承诺的争论。
cuz I see an awful lot of arguing about promises in the open source community.

67
00:04:14.680 --> 00:04:18.819
而且他们似乎非常关注关于API的争吵
And they seem to focus an awful lot on bickering about the API for

68
00:04:18.819 --> 00:04:22.970
承诺，并且错过了为什么他们存在的更深层次的观点。
promises, and missing out on the deeper point of why they even exist.

69
00:04:22.970 --> 00:04:26.439
所以对于我们今天将要经历的每个主题，我们的目标是建立
So for each of the topics that we're gonna go through today our goal is to build up

70
00:04:26.439 --> 00:04:31.399
先是概念上的理解，然后在实践中理解我们为什么要做这件事，
a conceptual understanding first and then in practice of why we do the thing,

71
00:04:31.399 --> 00:04:33.629
一旦我们知道为什么要做这件事。
of doing the thing once we know why we do it.

72
00:04:33.629 --> 00:04:37.103
所以我们在和一些代码交谈之前就开始了。
So we're gonna actually start even before we talk with some code.

73
00:04:37.103 --> 00:04:41.601
我们将开始理解一个非常重要的区别
We're gonna start understanding a very important distinction that is often

74
00:04:41.601 --> 00:04:42.394
合并。
conflated.

75
00:04:42.394 --> 00:04:47.050
我们将研究并行性与异步性的概念。
We're gonna look at the notion of parallelism versus asynchronicity.

76
00:04:47.050 --> 00:04:48.930
这实际上是在表达并发的概念。
This is really speaking to the idea of concurrency.

77
00:04:48.930 --> 00:04:52.300
所以我们实际上要深入研究并发的真正含义，具体地说，
So we're actually gonna dig into what concurrency really means, specifically,

78
00:04:52.300 --> 00:04:54.379
它对JavaScript开发人员意味着什么。
what it means to a JavaScript developer.

79
00:04:54.379 --> 00:04:57.269
因为这就是我们做其他事情的动力。
Cuz that is the motivation by which we do all the rest of the things.

80
00:04:57.269 --> 00:05:01.550
然后我们将注意力转向回调，这是最基本的前提
Then we're gonna turn our attention to callbacks, the most fundamental premise

81
00:05:01.550 --> 00:05:06.019
在所有这些中，异步编程的基本单元。
of all of, the fundamental unit of asynchronous programming.

82
00:05:06.019 --> 00:05:09.160
我们真正要看到的是回拨，
And what we're really gonna see is that callbacks,

83
00:05:09.160 --> 00:05:13.310
同时能够表达我们需要的一切。
while capable of expressing everything that we need.

84
00:05:13.310 --> 00:05:16.829
有一些非常显着的缺陷。
Have some very significant deficiencies.

85
00:05:16.829 --> 00:05:19.939
事实上有两个主要缺陷
Two major deficiencies in fact

86
00:05:19.939 --> 00:05:23.040
我会用它来定义回调地狱的概念。
that I would use to define the notion of callback hell.

87
00:05:24.839 --> 00:05:29.259
回叫地狱被扔得太多了，当我说到这个词的时候，大多数人
Callback hell is thrown around an awful lot and most people when I say that term

88
00:05:29.259 --> 00:05:33.478
在他们的脑海中唤起的是，这与压痕有关，
What evokes in their mind is that it has something to do with indentation,

89
00:05:33.478 --> 00:05:35.466
筑巢，诸如此类的事情。
with nesting, things like that.

90
00:05:35.466 --> 00:05:39.451
我要向你们展示的是，回调地狱实际上几乎与
What I'm gonna show you is that callback hell is actually almost nothing to do with

91
00:05:39.451 --> 00:05:41.610
缩进和嵌套。
indentation and nesting.

92
00:05:41.610 --> 00:05:42.720
还有更深层的东西
There's something much deeper,

93
00:05:42.720 --> 00:05:45.439
更重要的是要了解回调地狱。
much more important to understand about callback hell.

94
00:05:45.439 --> 00:05:48.360
所以我们要看看回调，看看它们是如何工作的。
So we're gonna look at callbacks and look at how they work.

95
00:05:48.360 --> 00:05:53.120
首先，我们将与他们进行一些练习，以了解这种情况
First, we'll get some practice with them just to understand that kind of some first

96
00:05:53.120 --> 00:05:56.659
第一人称经历的痛苦，我相信你们都已经有了。
first person experience with the pain of that I'm sure you all have that already.

97
00:05:58.060 --> 00:06:01.987
但接下来我们会看看这些问题是什么给它们起个名字，
But then we're gonna look at what those problems are give them a name,

98
00:06:01.987 --> 00:06:05.060
给那些专业齿轮的问题回叫地狱一个名字。
give those pro gear the problems callback hell a name.

99
00:06:06.259 --> 00:06:09.370
这将是我们试图解决这些问题的动机
And that will be our motivation to why we want to try to solve those problems with

100
00:06:09.370 --> 00:06:10.209
这些高阶模式。
these higher order patterns.

101
00:06:11.720 --> 00:06:14.279
我们将要研究的回调的另一种变体是
Another variation on callbacks that we're going to look at which is kind of

102
00:06:14.279 --> 00:06:17.129
有趣的是，它并没有得到太多的关注。
interesting it is not gotten a lot of attention.

103
00:06:17.129 --> 00:06:20.160
你们中的许多人可能以前甚至没有听说过，但却听到了“砰”的一声。
Many of you may not even heard before but thunks.

104
00:06:20.160 --> 00:06:23.439
雷鸣是我最近甚至自己也有过的一种感觉
Thunks are something that I even just sort of recently myself and

105
00:06:23.439 --> 00:06:27.480
我最近我的意思是在过去的一两年里，发现了这个模式，并意识到，
I recently I mean within the last year or two, discovered this pattern and realized,

106
00:06:27.480 --> 00:06:31.470
哇，我真希望我能在几年前说出这个模式。
wow, I really wish I had been able to articulate that pattern years ago.

107
00:06:32.480 --> 00:06:35.629
因为，实际上它是理解的一个很好的前兆
Because, actually it's a really good precursor to understanding

108
00:06:35.629 --> 00:06:37.379
承诺是关于什么的。
what promises are about.

109
00:06:37.379 --> 00:06:41.029
所以我们会看看thunks，我们会看看为什么它们是这个工具的一部分，
So we'll look at thunks and we'll look at why they are part of that tool,

110
00:06:41.029 --> 00:06:44.199
它们是你应该在工具中心拥有的小工具之一。
they're one of the little tools you should have in your tool center.

111
00:06:45.350 --> 00:06:48.240
对Thunk真正是什么有这样的概念性理解
Having that conceptual understanding of what a thunk really is and

112
00:06:48.240 --> 00:06:51.579
它的有用之处将使我们成为承诺的桥梁。
what it's useful for that will bridge us into promises.

113
00:06:51.579 --> 00:06:54.790
换句话说，thunks有点像没有花哨API的承诺。
In other words, thunks are kinda like promises without the fancy API.

114
00:06:54.790 --> 00:06:58.810
因此，一旦我们得到了thunks的概念基础，就会理解为什么承诺
So once we get the conceptual grounding in thunks will understand why promises

115
00:06:58.810 --> 00:06:59.689
是有用的。
are useful.

116
00:06:59.689 --> 00:07:03.341
我们将查看如何使用承诺的API，我们将获得一些模式
We'll look at the APIs for how to use promises, we'll get some patterns for

117
00:07:03.341 --> 00:07:07.112
一路上每一种模式我们都会重新审视
them all along the way every one of these patterns we're going to be revisiting

118
00:07:07.112 --> 00:07:10.393
一次练习，一次又一次完全相同的练习。
an exercise, the exact same exercise over and over and over again.

119
00:07:10.393 --> 00:07:14.314
然后您将使用以下每一项重新实现该练习的解决方案
And you're gonna re-implement the solution to that exercise using every single one of

120
00:07:14.314 --> 00:07:17.865
这些来自回调的模式一直到目标都是你将成为的
these patterns from callbacks all the way up the goal there being that you will be

121
00:07:17.865 --> 00:07:21.470
完全明白你再也不用担心问题域了
fully understand you don't have to worry about the problem domain anymore you be

122
00:07:21.470 --> 00:07:24.800
充分了解每种模式的利弊。
fully understanding the pros and cons of each of these patterns.

123
00:07:24.800 --> 00:07:25.790
所以这就是我们要去做的事情。
So that's how we'll go about it.

124
00:07:25.790 --> 00:07:27.699
所以我们在看承诺。
So we're looking at promises.

125
00:07:27.699 --> 00:07:29.509
在协同例程中没有好的生成器。
There were no good generators in co-routines.

126
00:07:29.509 --> 00:07:33.159
当我们看到发电机中的承诺时，我们实际上会有
And by the time we've looked at promises in generators we actually will have

127
00:07:33.159 --> 00:07:38.550
建立了两个坚实的解决方案来解决那些主要的召回地狱问题。
a established two solid solutions to those major issues of callback hell.

128
00:07:38.550 --> 00:07:40.899
表示基线的。
That represents the baseline.

129
00:07:40.899 --> 00:07:44.206
如果你准备好不管我的话。
The point at which if you're ready to like tune me out.

130
00:07:44.206 --> 00:07:46.860
我冤枉了你，或者你很无聊，或者其他什么。
I have wronged you or you're bored or whatever.

131
00:07:46.860 --> 00:07:47.959
你必须得到这个角色。
You gotta get this part.

132
00:07:47.959 --> 00:07:49.980
你必须通过承诺和发电机。
You gotta get through the promises and generators.

133
00:07:49.980 --> 00:07:53.779
这是能力的新基线。
That is the new baseline for competency.

134
00:07:53.779 --> 00:07:57.300
异步编程就是理解什么是承诺，
And asynchronous programming is understanding what promises are,

135
00:07:57.300 --> 00:07:58.480
什么是发电机？
what generators are and

136
00:07:58.480 --> 00:08:02.980
为什么两者需要混合在一起来解决回调的问题。
why the two need to be mixed together to solve the issues of callback call.

137
00:08:02.980 --> 00:08:05.410
这是能力的新标准。
That's the new standard for competency.

138
00:08:05.410 --> 00:08:08.589
所以如果你没有从我想做的车间里得到任何东西，那就是真的
So that's really if you get nothing else out of the workshop I wanna make

139
00:08:08.589 --> 00:08:09.920
当然每个人都能做到这一点。
sure everybody gets to that point.

140
00:08:09.920 --> 00:08:12.399
所以我们会花大量的时间来确保我们能达到这一点。
So we'll spend plenty of time making sure we get to that point.

141
00:08:13.740 --> 00:08:18.439
但这还不是全部，因为异步编程还有更多
But that's not all because there's more to asynchronous programming that

142
00:08:18.439 --> 00:08:20.500
这些模式不一定擅长。
those patterns aren't necessarily good at.

143
00:08:20.500 --> 00:08:22.550
有更多的变化。
There are more variations.

144
00:08:22.550 --> 00:08:24.490
我想说的是，
Point that I'm making is,

145
00:08:24.490 --> 00:08:28.120
在我17年的JavaScript生涯中，我从来没有写过很多代码。
I have never once I've written a lot of code in my 17 years in JavaScript.

146
00:08:28.120 --> 00:08:31.019
我从来没有用准确的方法写过一个完整的程序
I've never once written an entire program using exactly

147
00:08:31.019 --> 00:08:32.850
到处都是同样的抽象。
the same abstraction everywhere.

148
00:08:32.850 --> 00:08:34.529
没有一颗银弹。
There is no one silver bullet.

149
00:08:35.610 --> 00:08:40.029
每当有人告诉我X是新的Y，我的BS雷达
Anytime somebody starts to tell me something like X is the new Y, my BS radar

150
00:08:40.029 --> 00:08:43.240
我想，不，它可能不是，事实上，几乎可以肯定它不是。
goes off I'm like no it's probably not, as matter of fact it's almost certainly not.

151
00:08:44.289 --> 00:08:47.539
没有一颗银弹可以取代其他任何东西。
There's no one silver bullet that replaces everything else.

152
00:08:47.539 --> 00:08:50.649
所以我今天教你们的任何东西都不会取代其他任何东西
So nothing that I'm teaching you today is going to be replacing everything else that

153
00:08:50.649 --> 00:08:53.899
我们谈过你应该考虑这些事情而不是所有的战争
we've talked about rather you should consider these things instead of all wars

154
00:08:53.899 --> 00:08:56.519
你仍然可以考虑他们。
you can still should consider them ands.

155
00:08:56.519 --> 00:08:57.529
这是加法。
This is additive.

156
00:08:57.529 --> 00:09:01.950
这些是额外的工具，额外的模式，你可以发展直觉
These are additional tools additional patterns and you can develop instincts for

157
00:09:01.950 --> 00:09:06.600
为什么一种模式更适合于一组特定的问题。
why one pattern is more well suited for a particular set of problems.

158
00:09:06.600 --> 00:09:11.120
我的程序试图在必要时有效地使用这些不同的模式中的每一个。
My programs try to efficiently use each of these different patterns where necessary.

159
00:09:12.190 --> 00:09:14.909
甚至像回调和雷鸣这样的事情也有它们的位置。
Even things like callbacks and thunks have their place.

160
00:09:14.909 --> 00:09:16.039
承诺有自己的位置。
Promises have their place.

161
00:09:16.039 --> 00:09:17.720
发电机有自己的位置。
Generators have their place.

162
00:09:17.720 --> 00:09:21.690
此外，当我们开始处理事件流时，我们会发现承诺
In addition, when we start dealing with event streams we'll find that promises

163
00:09:21.690 --> 00:09:25.629
实际上，当我们开始处理这些问题时，并没有给我们提供一个非常好的解决方案
actually don't really give us a very good solution when we start dealing with

164
00:09:25.629 --> 00:09:30.559
面向事件的编程，我称之为事件反应，反应序列。
event oriented programming, what I call event reactive a reactive sequences.

165
00:09:30.559 --> 00:09:32.159
这也是一个可以观察到的名字。
That's also goes by the name observable.

166
00:09:32.159 --> 00:09:35.330
所以，如果你读过什么，最近有一种说法。
So if you've read anything, there's been a buzz recently.

167
00:09:35.330 --> 00:09:39.679
关于这个可观测概念，有相当多的信息。
There's quite a bit of information out there about this notion of observables.

168
00:09:39.679 --> 00:09:41.980
有一个来自微软的库，叫做RXJS，
There's a library from Microsoft called, RXJS,

169
00:09:41.980 --> 00:09:46.639
可观察模式的最常见实现之一。
one of the most common implementations of the observable pattern.

170
00:09:46.639 --> 00:09:49.149
我将向您展示这些模式，以及它为什么有用。
I'll show you what that patterns about why it's useful.

171
00:09:49.149 --> 00:09:54.320
我们将在实践中将其与可观测的表达式联系起来
We will relate that back to in practice with the expression of observables in

172
00:09:54.320 --> 00:09:56.690
异步库，因为这将更容易
asynchronous library cuz that will be easier for

173
00:09:56.690 --> 00:10:00.620
我们可以玩，而不需要学习一个有数百种方法的巨大图书馆。
us to play with without learning a huge library with hundreds of methods.

174
00:10:00.620 --> 00:10:03.659
所以其中非常小的一部分将使用异步
So a very small subsection of that will play with an asynchronous that I

175
00:10:03.659 --> 00:10:07.460
呼叫反应序列做，基本上相同的事情。
call reactive sequences does,basically the same thing.

176
00:10:07.460 --> 00:10:10.639
所以这是一个更高阶的模式，它将帮助我们，把所有其他的东西
So that's a higher order pattern that will help us, put all the other stuff

177
00:10:10.639 --> 00:10:14.799
我们一起以有趣的方式学习并解决面向事件的编程。
that we've learned together in interesting ways and solve event oriented programming.

178
00:10:14.799 --> 00:10:16.480
面向事件的异步编程。
Event oriented asynchronous programming.

179
00:10:17.659 --> 00:10:21.590
最后，最后一个模式，看的是非常高级的模式。
And finally, the last pattern that will look at very high level pattern.

180
00:10:21.590 --> 00:10:24.961
最近并没有得到太多的关注，但它被称为CSP。
Hasn't gotten a lot of attention recently but it's called CSP.

181
00:10:24.961 --> 00:10:27.820
它代表通信顺序进程。
It's stands for communicating sequential processes.

182
00:10:27.820 --> 00:10:33.126
这并不是一个新的概念，实际上它是在60年代早期发明的，而且
This is not a new concept actually it was invented in the early 60s, and

183
00:10:33.126 --> 00:10:39.303
它是由一些非常聪明的人开发和思考的，他们比我聪明得多。
it was developed and thought about by some really smart people way smarter than I am.

184
00:10:39.303 --> 00:10:43.940
所以我在这里展示的没有什么新的，没有的新信息
So there's nothing new that I'm presenting here no new information that hasn't been

185
00:10:43.940 --> 00:10:45.408
谈论了几十年。
talked about for decades.

186
00:10:46.470 --> 00:10:51.039
但它几乎感觉CSP是在一个重新发现的尖端。
But it almost feels like CSP is on the cusp of a rediscovering.

187
00:10:51.039 --> 00:10:55.090
特别是因为最近我们看到了一些更受欢迎的，
In particular because recently we've seen some more popular,

188
00:10:55.090 --> 00:10:59.870
更多的主流类型语言采用这种模型进行并发。
more mainstream type languages adopt this model for concurrency.

189
00:10:59.870 --> 00:11:02.899
也就是说，Go语言使用CSP模型
Namely the Go language uses the CSP model for

190
00:11:02.899 --> 00:11:06.870
并发性以及闭包和闭包脚本，闭包脚本是桥
concurrency as well as closure and closure script, closure script being the bridge

191
00:11:06.870 --> 00:11:10.559
这将结束浏览器中的JavaScript世界。
that brings closure into the Into the JavaScript world in the browser.

192
00:11:10.559 --> 00:11:13.549
所以越来越多的人开始搬家
So more and more people are starting to move into the Go

193
00:11:13.549 --> 00:11:16.830
编程语言世界，并分为Clojure和ClojureScript。
programming language world and into Clojure and ClojureScript.

194
00:11:16.830 --> 00:11:21.029
他们发现CSP是一个非常强大的模式
And they're discovering that CSP is this really powerful pattern for

195
00:11:21.029 --> 00:11:23.039
管理并发。
managing concurrency.

196
00:11:23.039 --> 00:11:25.539
我听到人们在可观察的方面
And I have heard people on the observable side for

197
00:11:25.539 --> 00:11:28.429
例子告诉我，观察者就是那颗银弹。
example tell me observables are that silver bullet.

198
00:11:28.429 --> 00:11:31.061
您可以使用可观察对象对所有内容进行建模。
You can model everything with an observable.

199
00:11:31.061 --> 00:11:32.581
是啊，有点，也许吧。
Yeah, kind of, maybe.

200
00:11:32.581 --> 00:11:34.525
有些地方真的很好
There are some places that it's really good and

201
00:11:34.525 --> 00:11:35.993
有些地方不是很好。
some places that it's not so good.

202
00:11:35.993 --> 00:11:38.441
然后，我听到人们说，好吧，
And then, I've heard people say, well,

203
00:11:38.441 --> 00:11:43.004
你甚至不需要承诺，因为你可以用CSP频道做任何事情。
you don't even need promises because you can do everything with a CSP channel.

204
00:11:43.004 --> 00:11:46.119
但在有些地方，这是有用的，但在有些地方却并非如此
But there's places where that's useful in places where it's not so

205
00:11:46.119 --> 00:11:47.755
这不是一件全有或全无的事情。
this is not an all or nothing thing.

206
00:11:47.755 --> 00:11:52.289
但CSP从根本上来说是一个相当未被发现，或更不为人知的，
But CSP is a fundamentally rather undiscovered, or rather untalked about,

207
00:11:52.289 --> 00:11:53.330
某种模式。
sort of pattern.

208
00:11:53.330 --> 00:11:58.570
但我有点相信它代表着下一波浪潮。
But I'm kind of convinced that it represents kind of the next next wave.

209
00:11:58.570 --> 00:12:02.700
如果可以观察到大浪，如果它要冲刷我们，
If the big wave is observable, if that's about to wash over us,

210
00:12:02.700 --> 00:12:05.990
后面的是CSP，所以我想要意识到这些事情
the one after it is CSPs, so I wanna be aware of those things and

211
00:12:05.990 --> 00:12:08.850
了解所有这些工具是如何编织在一起的。
understand how all these tools weave together.

212
00:12:08.850 --> 00:12:13.330
到这一步结束时，我们正在进行一些相当有挑战性的练习
By the end of this will be we're working through some rather challenging exercises

213
00:12:13.330 --> 00:12:17.364
试图推动我们的大脑去思考，而不仅仅是一个简单的回调。
trying to push our brains Into thinking way beyond just a simple callback.

214
00:12:17.364 --> 00:12:19.049
所以这就是我们这个工作坊要去的地方。
So that's where we're going with this workshop.

215
00:12:20.259 --> 00:12:22.889
如果事情一开始看起来太简单，
If things seem too simple at the beginning,

216
00:12:22.889 --> 00:12:25.559
我向你保证，到最后他们会有足够的东西来挖你的牙。
I promise you by the end they'll be plenty to be digging your teeth into.
