WEBVTT

1
00:00:00.006 --> 00:00:03.894
[音乐]
[MUSIC]

2
00:00:03.894 --> 00:00:06.219
&gt；&gt；Kyle Simpson：我们将看一下回调的一些问题。
&gt;&gt; Kyle Simpson: We're going to look at some problems with callbacks.

3
00:00:06.219 --> 00:00:09.682
我们会和他们一起练习，然后我会跟你说清楚
We're gonna get some practice with them and then I'm going to articulate to you

4
00:00:09.682 --> 00:00:11.814
真正的本质是什么回叫地狱是什么。
the real essence of what callback hell is about.

5
00:00:11.814 --> 00:00:16.234
但我想看看回拨的一些问题。
But I wanna look at some issues with callbacks.

6
00:00:16.234 --> 00:00:23.559
以异步方式实现最简单、最简单的回调表达式。
So easiest, simplest expression of a callback in an asynchronous fashion.

7
00:00:23.559 --> 00:00:27.070
我们将该函数作为回调传递给另一个实用程序。
We pass the function as a callback to another utility.

8
00:00:27.070 --> 00:00:29.460
这个恰好内置在JavaScript引擎中，但是
This one happens to be built in to the JavaScript engine but

9
00:00:29.460 --> 00:00:31.739
它可能是我们代码中的其他实用程序。
it could have been some other utility in our code.

10
00:00:31.739 --> 00:00:33.539
我们传入回调。
We pass the callback in.

11
00:00:33.539 --> 00:00:37.149
现在，如果我们要描述这个函数做什么或者这个函数是如何工作的
Now if we were to describe what this function does or how this function

12
00:00:37.149 --> 00:00:40.609
操作时，我们可能会说一些设置超时的效果。
operates, we might say something to the effect of set up a timeout.

13
00:00:41.950 --> 00:00:45.340
然后在1000毫秒后执行console.log状态。
And then after 1000 milliseconds execute the console.log state.

14
00:00:47.109 --> 00:00:49.890
大多数人可能会点头表示同意，这大概就是我们的方式
Most people would probably nod in agreement that's roughly how we would

15
00:00:49.890 --> 00:00:52.149
描述此程序的行为。
describe the behavior of this program.

16
00:00:53.250 --> 00:00:56.179
不幸的是，这种描述从根本上是不够的。
Unfortunately that description is fundamentally insufficient.

17
00:00:57.679 --> 00:01:02.091
我们在理解和理解的能力上存在着严重的不足
There is a deep deficiency there, in our ability to understand and

18
00:01:02.091 --> 00:01:06.439
推理，描述和表达正在发生的事情。
reason about, and describe and articulate what's happening.

19
00:01:06.439 --> 00:01:10.186
所以我们的问题之一就是我们的大脑实际上并不是
So one of the issues that we have is that our brains are not actually

20
00:01:10.186 --> 00:01:12.998
以与代码相同的方式工作。
working in the same way that the code is working.

21
00:01:12.998 --> 00:01:16.963
但是要考虑的另一件事是这个函数通常被称为
But another thing to think about is this function is oftentimes referred to as

22
00:01:16.963 --> 00:01:20.197
因为我们节目的前半部分
a continuation because there's a first half of our program and

23
00:01:20.197 --> 00:01:21.972
我们节目的第二部分。
a second half of our program here.

24
00:01:21.972 --> 00:01:25.385
可能对你来说不是很明显，但你的程序的前半部分是一切都在进行中
May not be obvious to you but the first half of your program is everything on

25
00:01:25.385 --> 00:01:28.478
超时外部，包括设置的超时调用本身。
the outside of the timeout including the set timeout call itself.

26
00:01:28.478 --> 00:01:31.349
程序的后半部分是回调中的所有内容。
And the second half of your program is everything inside of the callback.

27
00:01:32.520 --> 00:01:36.000
从本质上讲，现在是一个普遍的概念，
In essence there's a general concept of a now,

28
00:01:36.000 --> 00:01:40.560
现在马上就会发生的事情，以后会发生的。
the stuff that's gonna happen immediately right now, and a later.

29
00:01:40.560 --> 00:01:43.599
对于以后的一些定义，我们并不关心。
For some definition of later, which we don't care about.

30
00:01:43.599 --> 00:01:45.750
我们不在乎后来的真正定义是什么
We don't care what the real definition of later is,

31
00:01:45.750 --> 00:01:49.006
我们只知道这不是在我现在所做的事情之后立即发生的。
we just know it's not immediately after what I'm doing at the moment.

32
00:01:49.006 --> 00:01:53.750
有一些间隙，这个间隙可以是零毫秒的延迟，
There's some gap, and that gap could be a zero millisecond delay,

33
00:01:53.750 --> 00:01:55.069
不管那意味着什么。
whatever that means.

34
00:01:55.069 --> 00:01:57.950
它可能正在等待Ajax请求，也可能正在等待
It could be waiting for an Ajax request, it could be waiting for

35
00:01:57.950 --> 00:01:59.560
来自Web工作者的消息。
a message from a web worker.

36
00:01:59.560 --> 00:02:01.530
谁知道呢？
Who knows?

37
00:02:01.530 --> 00:02:04.400
但是理解这个现在和以后的概念，会有一个前半部分
But understanding this notion of now and later, there's a first half and

38
00:02:04.400 --> 00:02:05.480
下半场。
a second half.

39
00:02:05.480 --> 00:02:07.640
当我们将函数称为延续时，
When we refer to functions as continuations,

40
00:02:07.640 --> 00:02:12.110
我们的意思是，我们现在做了我们节目的前半部分，而且
what we mean is, we did the first half of our program now, and

41
00:02:12.110 --> 00:02:14.639
我们将程序的后半部分封装在回调中。
we wrap the second half of our program up in a callback.

42
00:02:15.680 --> 00:02:18.599
我们把回电推迟到以后。
And we deferred that callback to happen until later.

43
00:02:18.599 --> 00:02:22.000
在稍后的那一刻，我们将拿起
And at that later moment, we're going to pick up and

44
00:02:22.000 --> 00:02:24.950
从我们停止的地方继续我们的节目。
continue our program from where we left off.

45
00:02:24.950 --> 00:02:28.448
这就是我们获得术语Continuations for callback的地方。
So that's where we get the term continuations for callbacks.

46
00:02:31.640 --> 00:02:33.990
&GT；&GT；Kyle Simpson：你们中有多少人以前听说过“回拨地狱”这个词？
&gt;&gt; Kyle Simpson: How many of you have heard that term callback hell before?

47
00:02:36.259 --> 00:02:39.800
我相信你们中的许多人可能也会在网上聊天时举起你们的手。
I'm sure many of you will probably raise your hands in the online chat as well.

48
00:02:39.800 --> 00:02:40.439
召回地狱，
Callback hell,

49
00:02:40.439 --> 00:02:44.079
这是那些分享的事情之一，就像我们可以有一个咨询会议
it's one of those shared things almost like we could have a counseling session

50
00:02:44.079 --> 00:02:46.879
关于我们在地狱回拨的所有噩梦，对吧？
about all the nightmares that we've had with callback hell, right?

51
00:02:46.879 --> 00:02:51.030
它通常被认为与这种嵌套的想法有关。
It's usually thought of as having something to do with this idea of nesting.

52
00:02:51.030 --> 00:02:54.111
这有时被称为末日金字塔，因为
And that sometimes is referred to as the pyramid of doom because

53
00:02:54.111 --> 00:02:56.800
那个金字塔形状，三角形形状到我们的代码。
that pyramidal shape, triangular shape to our code.

54
00:02:58.960 --> 00:03:00.310
但我们是不是真的回地狱了？
But is that we callback hell really is?

55
00:03:02.639 --> 00:03:05.978
我认为它比那要深刻得多。
I think it's much, much, much deeper than that.

56
00:03:05.978 --> 00:03:09.144
我想说的是，这并不是故意的侮辱，但是
I would go so far as to say, and this isn't intended as an insult, but

57
00:03:09.144 --> 00:03:12.364
我甚至会说有很多我的同龄人
I would go so far as to say there's an awful lot of my peers out there that

58
00:03:12.364 --> 00:03:16.150
已经将回调地狱描述为与嵌套中的缩进有关。
have described callback hell as having to do with the indentation in the nesting.

59
00:03:17.349 --> 00:03:19.990
我的回答是，我认为你没有很批判性地想过
My response is I don't think you've thought very critically about what

60
00:03:19.990 --> 00:03:22.430
回拨真的是关于和回拨地狱是关于。
callbacks are really about and callback hell is about.

61
00:03:22.430 --> 00:03:25.389
这就是我可能与我的一些同龄人不同的地方，因为我非常
This is where I might differentiate from some of my peers in that I'm much

62
00:03:25.389 --> 00:03:28.250
更专注于这里的概念，
more focused on the concepts here,

63
00:03:28.250 --> 00:03:31.590
甚至比实际代码中的实际观察结果还要多。
even than the actual observations in the actual code.

64
00:03:31.590 --> 00:03:35.400
这里有一些概念上的缺陷。
There's something conceptually deficient here.

65
00:03:35.400 --> 00:03:37.920
有两个概念上有缺陷的问题。
There's two conceptually deficient problems.

66
00:03:37.920 --> 00:03:40.889
我可以开始向你证明这与
I can start out proving to you that it doesn't really have anything to do with

67
00:03:40.889 --> 00:03:45.349
通过观察这个程序，您可以看到嵌套和缩进
nesting and indentation by observing to you that this program

68
00:03:45.349 --> 00:03:48.159
实际上确实饱受回拨地狱之苦。
does in fact suffer from callback hell.

69
00:03:48.159 --> 00:03:51.349
但我可以用不同的风格重写这个程序，
But I can rewrite this program in a different style,

70
00:03:51.349 --> 00:03:53.520
有时称为延续传递样式。
sometimes referred to as continuation passing style.

71
00:03:55.159 --> 00:03:59.210
而且这段代码几乎没有那么明显地遭受嵌套和
And this code is not nearly as obviously suffering from nesting and

72
00:03:59.210 --> 00:04:00.509
压痕问题，是吗？
indentation problems, is it?

73
00:04:02.580 --> 00:04:06.370
我们使用了命名函数声明而不是内联函数表达式。
We've used named function declarations rather than inline function expressions.

74
00:04:06.370 --> 00:04:09.990
如果你看得很近，你仍然可以看到基本的嵌套正在进行，但是
If you look really close you can still see the fundamental nesting going on but

75
00:04:09.990 --> 00:04:13.030
我们的代码没有相同的金字塔形状。
we don't have the same pyramidal shape to our code.

76
00:04:13.030 --> 00:04:16.680
而且大多数浏览过此代码的人都不会本能地
And most people that took a glance at this code would not naturally instinctively

77
00:04:16.680 --> 00:04:17.939
想想回电地狱。
think callback hell.

78
00:04:19.550 --> 00:04:23.769
但这就是为什么回叫地狱需要在我们的头脑中有一个重新定义的原因，因为这
But that's why callback hell needs to have a redefinition on our minds, because this

79
00:04:23.769 --> 00:04:27.319
代码和前面的代码一样容易受到回调地狱的影响。
code is every bit as susceptible to callback hell as the previous code.

80
00:04:28.810 --> 00:04:32.579
即使风格看起来不同，它仍然有同样的问题。
Even though the style looks different, it still has those same problems.

81
00:04:32.579 --> 00:04:35.800
我们需要一个更细微的，更深层次的关于地狱是什么的看法。
We need a more nuanced, a deeper view of what callback hell is about.
