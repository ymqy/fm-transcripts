WEBVTT

1
00:00:00.000 --> 00:00:04.485
[音乐]
[MUSIC]

2
00:00:04.485 --> 00:00:08.890
&gt；&gt；Kyle Simpson：用功能术语描述这一点，对吗？
&gt;&gt; Kyle Simpson: Describing this with the func term, right?

3
00:00:08.890 --> 00:00:14.730
所以承诺是一个有价值的函数
So the Promise is a function that has a value

4
00:00:14.730 --> 00:00:18.846
然后我可以在我的-&gt；&gt；扬声器2上访问：你真的是这个意思吗，
that then I can access on my- &gt;&gt; Speaker 2: Do you really mean this,

5
00:00:18.846 --> 00:00:20.615
大写P承诺？
capital P promise?

6
00:00:20.615 --> 00:00:21.231
&gt；&gt；Kyle Simpson：我想是的。
&gt;&gt; Kyle Simpson: I think so.

7
00:00:21.231 --> 00:00:26.570
好的，大写的P，Promise是内置在Java脚本中的。
Okay, capital P, Promise is built into Java Script.

8
00:00:26.570 --> 00:00:29.949
它是一个必须用new关键字so调用的构造函数
It is a constructor that has to be called with the new keyword so

9
00:00:29.949 --> 00:00:32.770
这使得它与我们与funcs讨论的任何东西都有很大的不同。
that makes it very different from anything we were talking about with funcs.

10
00:00:34.560 --> 00:00:37.210
你构筑承诺的方式就是通过
The way you construct a Promise is to pass

11
00:00:37.210 --> 00:00:39.909
在一个我称之为Executor的函数中。
in a function which I've called executor here.

12
00:00:39.909 --> 00:00:42.439
这是规范中使用的术语。
That's the terminology used in the spec.

13
00:00:42.439 --> 00:00:43.969
无论你传入的是什么函数
Whatever function you pass in and

14
00:00:43.969 --> 00:00:49.179
无论它叫什么，都将接收到函数回调。
whatever it's called is going to receive to function callbacks.

15
00:00:49.179 --> 00:00:53.609
您可以使用两个实用程序来处理
Two utilities that you can use to handle the resolution of

16
00:00:53.609 --> 00:00:57.810
您的承诺决定履行拒绝。
your Promise resolved for fulfilling reject for rejecting.

17
00:01:01.020 --> 00:01:05.909
&gt；&gt；扬声器3：所以，我只想把这个连接到
&gt;&gt; Speaker 3: And so, I'm just want to take this connected to

18
00:01:07.219 --> 00:01:13.609
流，因为在我调用的时候，我在输出端传递，对吗？
the flow, cuz at some point when I call, I pass at output, right?

19
00:01:13.609 --> 00:01:17.200
我的诺言已经兑现了，对吧？
My promise has been returned, right?

20
00:01:17.200 --> 00:01:22.640
当它完成它的工作时它就会知道
It's when it finishes its work it will then know

21
00:01:22.640 --> 00:01:27.816
我已经向它注册了输出，对吗？
that I've registered output to it, right?

22
00:01:27.816 --> 00:01:30.829
然后你会发送，说，好的，
And then you'd send, say, okay,

23
00:01:30.829 --> 00:01:35.756
现在我将执行输出，因为您注册了。
now I'm going to execute output because you registered.

24
00:01:35.756 --> 00:01:37.730
&gt；&gt；Kyle Simpson：我认为是-&gt；&gt；扬声器3：函数。
&gt;&gt; Kyle Simpson: I think it's- &gt;&gt; Speaker 3: The function to.

25
00:01:37.730 --> 00:01:40.621
&gt；&gt；Kyle Simpson：我想也许我想要一个我不确定的困惑，
&gt;&gt; Kyle Simpson: I think maybe I want one of the confusions I'm not sure,

26
00:01:40.621 --> 00:01:43.881
但我认为可能部分混淆是因为你试图
but I think maybe part of the confusion here is you're trying to

27
00:01:43.881 --> 00:01:46.990
将整个过程合并为一个心理步骤。
conflate the whole process into one mental step.

28
00:01:46.990 --> 00:01:48.840
这是两个完全不同的问题。
It's two entirely separate concerns.

29
00:01:50.090 --> 00:01:52.859
其中一个问题是如何解决承诺，
One concern is how the Promise gets resolved,

30
00:01:52.859 --> 00:01:57.819
这就是我在第25行展示的，第25行正在解决这个承诺。
that's what I'm showing here on the line 25, line 25 is resolving the Promise.

31
00:02:00.549 --> 00:02:03.090
不要考虑如何解决承诺，
Don't think about how a Promise is resolved,

32
00:02:03.090 --> 00:02:08.520
当你换帽子的时候，想想你对承诺决议的反应。
when you switch hats to think about how you respond to a Promise resolution.

33
00:02:08.520 --> 00:02:11.400
如果你试图同时考虑这些事情，你会感到困惑的。
You're going to get confused if you try to think about those at the same time.

34
00:02:12.430 --> 00:02:16.360
第38行是对承诺决议的响应，并且
Line 38 is a response to a Promise resolution, and

35
00:02:16.360 --> 00:02:19.740
在第38行谁管它是怎么解决的。
on line 38 who the hell cares how it got resolved.

36
00:02:19.740 --> 00:02:21.170
不管怎么解决的。
Doesn't matter how it got resolved.

37
00:02:21.170 --> 00:02:24.900
重要的是，这就是我如何声明对承诺的回应。
All that matters is this is how I'm declaring the response to a Promise.

38
00:02:25.969 --> 00:02:29.949
我建议在你的脑海中把这两个完全分开。
I would recommend keeping those two completely separate in your mind.

39
00:02:29.949 --> 00:02:32.420
因为看起来有些问题是混为一谈的，当人们
Cuz it seems like some of the questions are kind of conflating when people

40
00:02:32.420 --> 00:02:35.280
都在说这是解决值还是其他什么。
are saying is this the resolve value or whatever.

41
00:02:35.280 --> 00:02:38.770
那可能是一些人的困惑，是试图保持那些一步一个脚印。
That might be were some of the confusion, is trying to keep those as one step.

42
00:02:38.770 --> 00:02:40.810
有两个完全独立的功能。
There are two entirely separate capabilities.

43
00:02:42.020 --> 00:02:43.629
顺便说一句，这很重要。
And that's important, by the way.

44
00:02:43.629 --> 00:02:45.009
这是关注点的分离。
That's a separation of concern.

45
00:02:45.009 --> 00:02:48.409
我们应该能够考虑对承诺的反应
We should be able to think about the response to a Promise

46
00:02:48.409 --> 00:02:51.740
完全独立于如何解决承诺。
entirely independently to how a Promise gets resolved.

47
00:02:51.740 --> 00:02:54.759
&gt；&gt；扬声器3：我只想确定我
&gt;&gt; Speaker 3: I just want to make sure the thing I

48
00:02:54.759 --> 00:02:58.420
不得不告诉自己只是对正在发生的事情一无所知，就这么做吧。
have to tell myself is just be ignorant of whatever is happening and just do this.

49
00:02:58.420 --> 00:02:59.858
&gt；&gt；Kyle Simpson：这绝对不是我想要的。
&gt;&gt; Kyle Simpson: That is absolutely not what I want.

50
00:02:59.858 --> 00:03:01.605
&gt；&gt；扬声器3：这就是我想避免的，所以
&gt;&gt; Speaker 3: That's what I wanna avoid and so

51
00:03:01.605 --> 00:03:04.539
这就是为什么我要试着去理解。
that's why I'm asking to try to understand.

52
00:03:04.539 --> 00:03:07.550
&gt；&gt；Kyle Simpson：我绝对认为这是我所教的一切的对立面
&gt;&gt; Kyle Simpson: I absolutely that is the antithesis of everything I teach

53
00:03:07.550 --> 00:03:11.500
我不想要这个信息是，不理解它。
I do not want the message to be, don't understand it.

54
00:03:11.500 --> 00:03:16.485
我希望消息能够单独理解，所以在这里当我调用Resolve时，
I want the message to be understand it separately so here when I call resolve,

55
00:03:16.485 --> 00:03:21.468
我在告诉诺言，这是一个与诺言相关的神奇功能
I am telling the Promise that's a magical function connected to the Promise I

56
00:03:21.468 --> 00:03:25.324
我在暗地里告诉你的承诺，解决你自己的问题。
am telling the Promise under the covers resolve yourself.

57
00:03:25.324 --> 00:03:29.830
当承诺被告知要自行解决时，它所做的反应就是去
And the response that a Promise does when it is told to resolve itself is to go and

58
00:03:29.830 --> 00:03:33.112
寻找任何已注册的人，然后处理程序和
look for anybody that's registered and then handler and

59
00:03:33.112 --> 00:03:36.500
执行该处理程序并传递其值。
execute that then handler and pass along its values.

60
00:03:36.500 --> 00:03:40.360
这就是如何构建承诺实现的香肠制作。
That's the sausage making of how a Promise implementation is built.

61
00:03:40.360 --> 00:03:43.909
它有一个由Then处理程序组成的内部数组，并在它们之间循环。
It's got an internal array of then handlers and it loops through them.

62
00:03:43.909 --> 00:03:46.560
&gt；&gt；演讲者3：是的，这就是我之前想说的。
&gt;&gt; Speaker 3: Yeah, that's what I was trying to articulate earlier though.

63
00:03:46.560 --> 00:03:51.360
输出是在幕后完成的那组事情中。
The output is in that set of things that is done under the covers to.

64
00:03:51.360 --> 00:03:54.300
&gt；&gt；Kyle Simpson：是的，我想也许我到了哪里，我们被弄糊涂了
&gt;&gt; Kyle Simpson: Yeah, I think maybe where I got where we were getting confused as

65
00:03:54.300 --> 00:03:56.430
你说输出是结果，不是。
you were saying output is result, it's not.

66
00:03:56.430 --> 00:03:57.664
&gt；&gt；扬声器3：不，是的。
&gt;&gt; Speaker 3: No, no, no, yeah.

67
00:03:57.664 --> 00:04:00.340
我之前说过，那是-&gt；&gt；Kyle Simpson：解决火灾
I said that earlier, that was- &gt;&gt; Kyle Simpson: Resolve fires off

68
00:04:00.340 --> 00:04:03.240
幕后的异步操作
an asynchronous action under the covers

69
00:04:03.240 --> 00:04:06.689
它告诉它查看已注册的处理程序的列表，并
that tells it to go through a list of then handlers that have been registered and

70
00:04:06.689 --> 00:04:08.908
其中一个处理程序将是输出函数。
one of those then handlers is going to be the output function.

71
00:04:10.259 --> 00:04:13.520
它会确保传递信息，好吗？
And it will make sure to pass the message along, okay?

72
00:04:13.520 --> 00:04:14.956
这就是承诺中的所有实现。
That's all implementation inside of a Promise.

73
00:04:14.956 --> 00:04:17.785
还有许诺的图书馆你可以去
And there are Promise libraries that you could go and

74
00:04:17.785 --> 00:04:20.490
阅读符合规范的允许库。
read that are spec compliant Promise libraries.

75
00:04:20.490 --> 00:04:24.009
你可以去看书，看看他们是如何做这些事情的，我建议你这样做。
You can go and read and see how they do those things, and I I recommend that.

76
00:04:24.009 --> 00:04:26.879
我写了Promise库作为我对承诺的理解的一部分。
I wrote Promise libraries as part of my understanding of promises.

77
00:04:30.112 --> 00:04:31.889
&gt；&gt；扬声器4：你会抓住错误吗？
&gt;&gt; Speaker 4: Are you gonna get to catching errors?

78
00:04:31.889 --> 00:04:34.658
有一些问题-&gt；&gt；Kyle Simpson：我真的不认为
There's some questions that- &gt;&gt; Kyle Simpson: I don't really think

79
00:04:34.658 --> 00:04:37.691
我们将非常注意在这个特定点捕获错误。
we're gonna pay much attention to catching errors at this particular point.

80
00:04:37.691 --> 00:04:41.634
&GT；&GT；演讲者4：其中一个问题就是，如果你想在结尾加上一句话，
&gt;&gt; Speaker 4: One of the questions was just, if you would put a catch at the end,

81
00:04:41.634 --> 00:04:44.377
这会捕捉到任何at末端的错误吗？
would that catch errors in any of the at ends?

82
00:04:44.377 --> 00:04:49.242
&gt；&gt；Kyle Simpson：是的，catch是一种速记，好吗？
&gt;&gt; Kyle Simpson: Yes, catch is a shorthand, okay?

83
00:04:49.242 --> 00:04:50.470
如果我在这里接球。
If I do a catch here.

84
00:04:51.649 --> 00:04:56.529
它将在此链中的任何位置接收到创建错误的错误消息。
It would receive an error message anywhere in this chain that created an error.

85
00:04:56.529 --> 00:04:59.930
即使我做了什么，我也应该很久以前就把这个拿出来，
Even if I did something, I should have taken this out a long time ago,

86
00:04:59.930 --> 00:05:04.990
这个链中的任何东西，比如我调用一个不存在的函数。
anything in this chain like if I call a doesn't exist function.

87
00:05:07.213 --> 00:05:09.480
这将抛出一个JavaScript错误，因为没有
That's gonna throw a JavaScript error because there is no doesn't

88
00:05:09.480 --> 00:05:10.750
EXIST函数。
exist function.

89
00:05:10.750 --> 00:05:14.399
JavaScript错误将变成拒绝
That JavaScript error is going to turn into of a rejection

90
00:05:14.399 --> 00:05:17.399
回到第43行的承诺。
of the promise that was returned to line 43.

91
00:05:17.399 --> 00:05:20.821
因为第43行不处理，第44行不处理
Because line 43 doesn't handle it and line 44 doesn't handle it and

92
00:05:20.821 --> 00:05:24.129
第47行不处理它，第48行不处理它。
line 47 doesn't handle it and line 48 doesn't handle it.

93
00:05:24.129 --> 00:05:28.221
这种拒绝将沿着链条向下传播
That rejection is going to propagate its way all the way down the chain skipping

94
00:05:28.221 --> 00:05:31.819
所有其他步骤，它最终将在51行被捕获。
all those other steps and it will finally be caught here on line 51.

95
00:05:31.819 --> 00:05:35.694
我们会在这里打印JavaScript异常。
And we'd get the JavaScript exception printed here.

96
00:05:35.694 --> 00:05:40.300
catch与.Then是一回事
The .catch is the same thing as a .then

97
00:05:40.300 --> 00:05:42.930
在那里我们不会把任何东西传递给成功处理者。
where we don't pass anything for the success handler.

98
00:05:49.170 --> 00:05:51.389
所以这两者在功能上是等价的。
So those two are functionally equivalent.

99
00:05:59.560 --> 00:06:06.550
注册错误处理程序的位置和频率是没有硬性规则的
Where and how often you register error handlers is there is no hard and fast rule

100
00:06:06.550 --> 00:06:11.620
为此，它取决于系统的行为，即预期的行为。
for this it's dependent upon the behavior the intended behavior of your system.

101
00:06:11.620 --> 00:06:15.829
例如，如果我在这里注册接球，
If I register to catch right here for example,

102
00:06:19.050 --> 00:06:22.740
然后，一旦捕获到错误，就会发生什么。
then what happens is once a error has been caught.

103
00:06:22.740 --> 00:06:27.209
它完全是try catch的同义词，这意味着它被捕获了并且
It's exactly synonymous to a try catch, which means that it was caught and

104
00:06:27.209 --> 00:06:29.579
它允许链的其余部分照常进行。
it allows the rest of the chain to continue as normal.

105
00:06:31.209 --> 00:06:36.449
因此，如果您希望在承诺链中的某个点从错误中恢复，
So if you want to recover from an error at some point in your Promise chain,

106
00:06:36.449 --> 00:06:38.409
您可以将错误处理放在那里。
you can put an error handling there.

107
00:06:38.409 --> 00:06:43.259
另一方面，如果你的假设是链中任何地方的错误
If on the other hand your assumption is that an error anywhere in the chain

108
00:06:43.259 --> 00:06:47.779
是一种致命的无法恢复的状态，我们需要摆脱一切，
is a fatal unrecoverable condition and we need to fall out of everything,

109
00:06:47.779 --> 00:06:52.355
然后只需在链条的末端或它们的混合物中放置一个捕获物。
then just put a catch at the end of your chain or a mixture they're of.

110
00:06:53.810 --> 00:06:58.129
但是没有硬性的规则来回答这个问题，你必须弄清楚。
But there's no hard and fast rule to answer that just you have to figure out.

111
00:06:58.129 --> 00:07:02.230
它和我告诉你的完全一样，在你的整个身体周围包裹着一个尝试的捕获物
It's exactly the same as me telling you to wrap a try catch around your whole

112
00:07:02.230 --> 00:07:03.199
功能。
function.

113
00:07:03.199 --> 00:07:06.259
或者您是否在函数的每一行周围都扭曲了一个try catch？
Or do you warp a try catch around every single line of your function?

114
00:07:06.259 --> 00:07:07.687
这个问题的答案取决于你。
The answer to that question is up to you.

115
00:07:07.687 --> 00:07:10.196
取决于你想怎么处理它。
And up to how you want to handle it.

116
00:07:10.196 --> 00:07:15.151
&gt；&gt；Speaker 3：和第40行的输入，该值将
&gt;&gt; Speaker 3: And the input to line 40 the value would

117
00:07:15.151 --> 00:07:19.531
是捕获的返回值。
be the return value from the catch.

118
00:07:19.531 --> 00:07:26.548
对，catch将返回一个值，然后就是传递给40的值。
Right, catch is gonna return a value and that will then be the value passed to 40.

119
00:07:26.548 --> 00:07:30.285
&gt；&gt；Kyle Simpson：错误处理程序可以返回值，该值将成为
&gt;&gt; Kyle Simpson: Your error handler can return value that becomes the success for

120
00:07:30.285 --> 00:07:31.190
下一步。
the next step.

121
00:07:31.190 --> 00:07:36.399
我不想进入错误处理的原因是
The reason I didn't want to get into error handling is because

122
00:07:36.399 --> 00:07:41.639
我们进入了复杂问题的整个兔子道。
we get into a whole side rabbit trail of complex issues.

123
00:07:41.639 --> 00:07:44.519
当你更多地玩弄承诺的时候，你会发现这些事情，但是
Those are things you'll discover as you play more with Promises but

124
00:07:44.519 --> 00:07:48.579
我不想让我们偏离轨道，理解这里的整体模式。
I don't want us get too far off track and understanding the overall pattern here.

125
00:07:48.579 --> 00:07:51.379
所以你需要实践承诺
So you're gonna need to practice with promises

126
00:07:51.379 --> 00:07:53.889
我已经详细地写了所有这些东西。
I have written about all of this stuff in detail.

127
00:07:53.889 --> 00:07:57.659
我鼓励你去读我写过的书和博客。
I encourage you to go and read the books and blogs that I've written about.

128
00:07:57.659 --> 00:08:00.290
这些承诺问题和我确实详细介绍了错误处理。
These Promise issues and I do cover error handling in exquisite detail.

129
00:08:06.312 --> 00:08:10.963
&gt；&gt；Kyle Simpson：好的，让我们把堆栈弹回原来的位置，
&gt;&gt; Kyle Simpson: All right, let's pop the stack back to where we were before,

130
00:08:10.963 --> 00:08:17.774
只是为了确保我们回到了相同的轨道上，p1。然后(Output)。然后返回p2。
just to make sure we're back on the same track, p1 .then(output) .then return p2.

131
00:08:17.774 --> 00:08:20.050
.Then(Output).然后返回p3。
.then(output) .then return p3.

132
00:08:20.050 --> 00:08:22.750
.然后(输出)然后输出完成。
.then(output) then output complete.

133
00:08:22.750 --> 00:08:26.480
这就是这里的规范流控制。
That's the canonical flow control here.

134
00:08:29.050 --> 00:08:32.120
我们把问题解决了吗？
Did we get the questions handled?

135
00:08:34.509 --> 00:08:35.106
&GT；&GT；扬声器4：我想是的，听起来是这样。
&gt;&gt; Speaker 4: I think so, it sounds like it.

136
00:08:35.106 --> 00:08:38.773
我认为最大的事情是他们不明白
I think the biggest thing was that they didn't understand what

137
00:08:38.773 --> 00:08:41.677
Promise API实际是什么样子，以及
the promise API what that actually looked like and

138
00:08:41.677 --> 00:08:44.802
这就是决心的真正来源。
that was where the resolve was actually coming from.

139
00:08:51.500 --> 00:08:59.639
&gt；&gt；Kyle Simpson：好的，这个解决方案很好，它有一种优雅。
&gt;&gt; Kyle Simpson: Okay, this solution is nice, it has an elegance to it.

140
00:08:59.639 --> 00:09:02.570
它是垂直方向的链条而不是嵌套，
It's a vertically oriented chain instead of a nesting,

141
00:09:02.570 --> 00:09:07.049
我跟你说过，有一种东西叫做承诺地狱。
I mentioned to you that there is such a thing as Promise hell.

142
00:09:07.049 --> 00:09:10.889
你应该知道的承诺地狱的表达之一，
And one of the expressions of Promise hell that you should be aware of,

143
00:09:10.889 --> 00:09:15.080
这就是我之前所说的不把问题混为一谈的原因。
it's kind of what I was getting at earlier about not conflating concerns.

144
00:09:15.080 --> 00:09:20.970
思考这个允诺链的另一种方式是说这样的话
Another way of thinking about this Promise chain is to say something like

145
00:09:20.970 --> 00:09:23.860
我将调用文本的输出函数。
I'm going to call the output function for text.

146
00:09:26.100 --> 00:09:34.522
然后我会打电话给p2.then&gt；&gt；Kyle Simpson：然后
And then I'm going to call p2.then &gt;&gt; Kyle Simpson: And

147
00:09:34.522 --> 00:09:40.950
在该函数内部，我将输出文本，然后p3。
inside of that function I'm going to output the text and then p3.then.

148
00:09:45.707 --> 00:09:51.936
&gt；&gt；Kyle Simpson：我将输出文本和
&gt;&gt; Kyle Simpson: And I'm going to output the text and

149
00:09:51.936 --> 00:09:55.269
输出完成。
output complete.

150
00:09:55.269 --> 00:09:59.668
如果没有额外的花括号和右括号，
Without me putting in the extra curly brace and closing parentheses,

151
00:09:59.668 --> 00:10:03.692
这是表达流量控制的一种完全有效的方式，
that's a completely valid way of expressing the flow control,

152
00:10:03.692 --> 00:10:06.163
它将有完全相同的最终结果。
it will have the exact same end result.

153
00:10:06.163 --> 00:10:09.722
这是一种不好的风格，这是一种不好的成语，而且
This is a bad style, this is a bad idiom, and

154
00:10:09.722 --> 00:10:15.980
这是人们谈论诺言地狱时的表达之一。
this is one of the expressions when people talk about Promise hell.

155
00:10:15.980 --> 00:10:21.179
如果你发现自己回到了整个筑巢的事情上，你就错过了重点。
If you find yourself back to the whole nesting thing, you're missing the point.

156
00:10:21.179 --> 00:10:25.029
而你在这里错过的真正的一点是你的回报是你得到的承诺
And the real point that you're missing here is your return a Promise to get

157
00:10:25.029 --> 00:10:26.980
回到原来的链条。
yourself back to the original chain.

158
00:10:28.519 --> 00:10:32.940
在这里，不是为了承诺而锁链，而是将承诺返回到主体
Instead of chaining off for the Promise here return the Promise back to the main

159
00:10:32.940 --> 00:10:38.960
链条并做你的垂直链条，好吗？
chain and do your you're chaining vertically, okay?

160
00:10:38.960 --> 00:10:39.960
所以小心点。
So be careful about that.

161
00:10:39.960 --> 00:10:42.720
很容易就会回到同样的境地
It's very easy to fall back into that same

162
00:10:42.720 --> 00:10:47.720
诱惑是我们一直在做的事情，也就是我习惯把东西嵌套在一起。
temptation is what we've always done which is I'm used to nesting things together.

163
00:10:47.720 --> 00:10:51.940
这是让你自己回到我们所谓的承诺地狱的方法之一。
This is one of the ways you get yourself back into what we call Promise hell.
