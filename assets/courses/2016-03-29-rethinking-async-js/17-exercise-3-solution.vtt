WEBVTT

1
00:00:00.000 --> 00:00:03.426
[音乐]
[MUSIC]

2
00:00:03.426 --> 00:00:08.455
&gt；&gt；Kyle Simpson：让我们从承诺的角度来讨论这个练习，
&gt;&gt; Kyle Simpson: So let's talk about this exercise from the perspective of promises,

3
00:00:08.455 --> 00:00:14.349
我们正在学习的一个新工具，试图帮助改进我们解决问题的方式。
a new tool that we're learning to try to help improve the way we solve the problem.

4
00:00:18.210 --> 00:00:23.469
正如我之前提到的，我们的第一步是
Just as I was mentioning before, our first step is to

5
00:00:23.469 --> 00:00:27.670
在getFile函数中创建承诺，好吗？
create the Promise in the getFile function, okay?

6
00:00:27.670 --> 00:00:33.911
所以我们需要归还我们创造的东西，所以新的承诺和
So we're going to need to return what we create, so new Promise and

7
00:00:33.911 --> 00:00:39.713
我们的承诺函数将收到解决和拒绝。
our Promise function is gonna receive a resolve and a reject.

8
00:00:44.168 --> 00:00:48.859
&gt；&gt；Kyle Simpson：现在我们需要立即进行fakeAjax调用。
&gt;&gt; Kyle Simpson: Now we need to make the fakeAjax call right away.

9
00:00:48.859 --> 00:00:52.649
因此，让我们使用文件名进行fakeAjax调用。
So let's make the fakeAjax call with our filename.

10
00:00:52.649 --> 00:00:56.414
您认为我们应该为fakeAjax提供什么回调？
And what callback do you suppose we should provide to fakeAjax?

11
00:00:59.912 --> 00:01:02.168
&gt；&gt；Kyle Simpson：解析函数，非常简单，对吗？
&gt;&gt; Kyle Simpson: The resolve functions, pretty straightforward, right?

12
00:01:03.950 --> 00:01:08.239
现在我们没有考虑错误，所以实际上为了简单起见，
Now here we're not taking care of errors, so actually just to keep things simple,

13
00:01:08.239 --> 00:01:11.560
我将不再考虑拒绝，因为我们不关心错误情况
I'm going to just leave off the reject because we don't care about the error case

14
00:01:11.560 --> 00:01:15.930
但是当然，如果我们的Ajax函数具有处理错误的能力，
but of course, if our Ajax function had the ability to handle errors,

15
00:01:15.930 --> 00:01:18.503
我们可以通过拒绝函数连接错误处理。
we could wire up that error handling through the reject function.

16
00:01:18.503 --> 00:01:22.224
所以伪造Ajax文件并解决，非常简单。
So fakeAjax file and resolve, pretty straightforward.

17
00:01:22.224 --> 00:01:24.948
关于这部分有什么问题吗？
Any questions about that part?

18
00:01:29.896 --> 00:01:30.432
&gt；&gt；Kyle Simpson：是的。
&gt;&gt; Kyle Simpson: Yes.

19
00:01:30.432 --> 00:01:34.856
&gt；&gt；Speaker 2：在现实生活中，我们不必创建承诺对象
&gt;&gt; Speaker 2: In the real life situation, we don't have to create a promise object

20
00:01:34.856 --> 00:01:38.823
无论我们将得到什么[INAUDIBLE]，如果它被称为[INAUDIBLE]，
of whatever we are going to get [INAUDIBLE] should it be called,

21
00:01:38.823 --> 00:01:44.450
我们将给我们一个承诺&GT；&GT；Kyle Simpson：所以问题是，在
we're going to give us a promise &gt;&gt; Kyle Simpson: So the question is, in

22
00:01:44.450 --> 00:01:49.859
现实生活中，我们是不是必须做出自己的承诺，而答案是有时候。
real life, are we gonna have to make our own promises and the answer is sometimes.

23
00:01:49.859 --> 00:01:54.118
因为有时候，你会调用一个已经知道承诺的实用程序，并且
Because sometimes, you're going to call a utility that is already promise aware and

24
00:01:54.118 --> 00:01:55.969
给你一个很好的承诺。
gives you a great promise.

25
00:01:55.969 --> 00:01:59.120
有时你会调用实用程序，它会给你一些类似于
Sometimes you're gonna call the utility that gives you something that's kinda like

26
00:01:59.120 --> 00:02:03.709
一个承诺，但它并不是真正的，在承诺的世界里，我们称其为athable和
a promise, but it isn't really and in the promise world, we call that athenable and

27
00:02:03.709 --> 00:02:06.480
然后你需要做出一个承诺来包裹它。
then you're gonna need to make a promise that wraps around it.

28
00:02:06.480 --> 00:02:09.939
有时您将有一个回调实用程序，它甚至不是远程的
Sometimes you're going to have a callback utility that's not even remotely

29
00:02:09.939 --> 00:02:10.740
承诺意识，以及
promise aware, and

30
00:02:10.740 --> 00:02:14.060
你需要把它改写成一个承诺，这就是我们在这里所做的。
you're gonna need to adapt that to a promise, which is what we're doing here.

31
00:02:14.060 --> 00:02:17.949
我们有一个实用程序，它不知道承诺，我们正在修改它。
We have a utility that doesn't know about promises and we're adapting it.

32
00:02:17.949 --> 00:02:19.509
这种模式称为提升。
This pattern is called lifting.

33
00:02:19.509 --> 00:02:25.780
我们正在fakeAjax函数之上创建一个Promise Aware实用程序。
We are creating a promise aware utility on top of the fakeAjax function.

34
00:02:25.780 --> 00:02:28.360
事实上，承诺图书馆确实提供了
And in fact Promise libraries do offer

35
00:02:28.360 --> 00:02:30.719
将为您进行自动提升的实用程序。
utilities that will do automatic lifting for you.

36
00:02:30.719 --> 00:02:34.240
他们将创建我们在这里所做的包装器模式
They will create this wrapper pattern that we're doing here and

37
00:02:34.240 --> 00:02:36.689
我们是手动做的，所以我们可以举例说明，但是
we're doing it manually, so we can illustrate, but

38
00:02:36.689 --> 00:02:40.289
我们将看到Promise实用程序库，它们这样做是为了
we'll see that Promise utilities libraries out there, they do this for

39
00:02:40.289 --> 00:02:44.259
我们是因为你不想自己在适应过程中绊倒。
us because you don't want to be tripping over doing that adaptation yourself.

40
00:02:44.259 --> 00:02:47.240
这是一个可重复的模式，它属于一个库。
That's a repeatable pattern, it belongs in a library.

41
00:02:50.319 --> 00:02:55.199
好的，所以我们仍然需要调用getFile函数三次。
Okay, so we still want to call the getFile function three times.

42
00:02:55.199 --> 00:02:56.110
就像Thunks一样
Just like with Thunks,

43
00:02:56.110 --> 00:02:59.670
在这个案子里我们会拿回一些东西他们会是承诺。
we're gonna get something back in this case they're gonna be promises.

44
00:02:59.670 --> 00:03:06.302
我要说p1=getFile(“file1”)和
I'm gonna say p1 = getFile ("file1") and

45
00:03:06.302 --> 00:03:10.996
P2=getFile(“File2”)和
p2 = getFile("file2") and

46
00:03:10.996 --> 00:03:15.538
p3=getFile(“file3”)。
p3 = getFile("file3").

47
00:03:15.538 --> 00:03:16.819
太好了，太棒了。
Great, awesome.

48
00:03:16.819 --> 00:03:19.490
所以我们同时打了这三个电话。
So we've made those three calls in parallel.

49
00:03:19.490 --> 00:03:20.789
我们该拿他们怎么办？
What are we going to do with them?

50
00:03:20.789 --> 00:03:22.750
我们如何对他们的反应进行排序？
How are we going to sequence their responses?

51
00:03:22.750 --> 00:03:26.710
这就是这个练习的重点，对回答进行排序。
That's the whole point of this exercise, sequencing the responses.

52
00:03:26.710 --> 00:03:30.620
所以，让我们一起考虑一下我们的反应顺序。
So, let's think about sequencing our responses together.

53
00:03:31.810 --> 00:03:34.909
我们知道p1会在某个时候结束。
We know that p1 is at some point gonna finish.

54
00:03:34.909 --> 00:03:39.031
我们假设在这个系统中，承诺总是会解决的，所以
We're assuming in this system, that the promise always resolves, so

55
00:03:39.031 --> 00:03:41.680
在某种程度上，它将会结束。
at some point, its going to finish.

56
00:03:41.680 --> 00:03:49.050
所以为了响应这个结束，我们可以简单地说p1，then。
So to respond to that finishing, we can simply say p1.then.

57
00:03:49.050 --> 00:03:53.969
现在我们知道来自p1的成功处理程序将接收输出
Now we know that the success handler from p1 is going to receive the output

58
00:03:53.969 --> 00:03:58.879
我们给它的就像这里，我们的承诺，结果函数将得到
that we gave it just like up here, our Promise that result functions going to get

59
00:03:58.879 --> 00:04:03.419
通过响应文本，然后传播到承诺链中。
past the response text and that will then propagate into the Promise chain.

60
00:04:03.419 --> 00:04:06.991
所以我们这里需要的是一个可以接收文本和
So what we need here is a function that can receive the text and

61
00:04:06.991 --> 00:04:11.430
将其打印出来，我们就有了一个名为output的实用程序。
print it out and we have a utility called output.

62
00:04:11.430 --> 00:04:13.099
所以我们可以这样做，但是
So we could do it like that but

63
00:04:13.099 --> 00:04:16.779
结果是更容易，因为我们已经有了一个实用程序
it turns out even easier since we have a utility that already has that

64
00:04:17.949 --> 00:04:22.670
调用签名，我们只需将引用传递给输出函数即可。
call signature, we can just simply pass a reference to the output function.

65
00:04:22.670 --> 00:04:25.040
不叫它，不要把括号放在里面。
Not calling it, don't put the parenthesis in there.

66
00:04:26.500 --> 00:04:29.509
您需要将对该函数的引用传递到链中。
You wanna pass a reference to that function into the chain.

67
00:04:30.747 --> 00:04:34.409
在这里，现在我想提出一个关于承诺链的非常重要的观点
Here, and now I want to make a really important point about Promise chains

68
00:04:34.409 --> 00:04:37.149
从风格和可读性的角度来看。
from a style and readability perspective.

69
00:04:37.149 --> 00:04:40.529
你会看到许诺的无数例子
You'll see tons and tons of examples of promises where

70
00:04:40.529 --> 00:04:45.060
说明承诺链的方式是使用内联函数表达式。
the way the promise chains are illustrated is to use inline function expressions.

71
00:04:45.060 --> 00:04:48.776
事实上，这是人们喜欢去的地方之一
In fact, this is one of the favorite places that people like to

72
00:04:48.776 --> 00:04:53.394
取出ES6错误函数并将其作为内联函数表达式。
pull out ES6 error functions and put them as inline function expressions.

73
00:04:53.394 --> 00:04:55.329
我觉得这是个糟糕的主意
I think this is a terrible idea,

74
00:04:55.329 --> 00:04:58.060
将内联函数表达式放在您的承诺链上。
to put inline function expressions all over your Promise chains.

75
00:04:59.240 --> 00:05:01.019
使用函数声明。
Use function declarations.

76
00:05:01.019 --> 00:05:02.389
承诺链的要点，
The point of a Promise chain,

77
00:05:02.389 --> 00:05:06.199
如果它有任何一点，从可读性的角度来看，唯一的
if it has any point at all, from a readability perspective, the only

78
00:05:06.199 --> 00:05:10.329
可读性观点是，您应该能够轻松地垂直向下扫描和
readability perspective is that you should be able to easily vertically scan down and

79
00:05:10.329 --> 00:05:13.439
理解流控制是什么，就像我们在那个伪代码中所做的那样。
understand what the flow control is like we did in that pseudo code.

80
00:05:14.610 --> 00:05:17.970
如果您的链中散布着各种内联函数表达式和
If your chain is littered with all kinds of inline function expressions and

81
00:05:17.970 --> 00:05:19.420
怪异之类的东西，
weirdness and stuff like that,

82
00:05:19.420 --> 00:05:23.814
您已经完全失去了Promise链的所有可读性优势。
you've completely lost all the readability advantages of the Promise chain.

83
00:05:25.089 --> 00:05:27.980
因此，当我有一个函数时，我更喜欢使用它。
So I prefer to use a function when I have one.

84
00:05:27.980 --> 00:05:30.839
这并不意味着您永远不会使用函数表达式，但是
That doesn't mean you won't ever use a function expression, but

85
00:05:30.839 --> 00:05:34.379
我会说如果有机会不使用一个表达式
I'm gonna say if there's an opportunity to not use an expression and

86
00:05:34.379 --> 00:05:36.805
而是做一份声明，最好是那样，好吗？
instead do a declaration, it's better to go that way, okay?

87
00:05:36.805 --> 00:05:43.360
好的现在，我们说的是无论一个人完成了什么承诺，我们都想输出它。
All right now, what we've said is whatever Promise one finishes, we wanna output it.

88
00:05:43.360 --> 00:05:45.505
我们已经保证了诺言一，
We have ensured that the Promise one,

89
00:05:45.505 --> 00:05:48.947
文件一的内容是要打印的第一件事。
that the file one contents are the first thing to be printed.

90
00:05:48.947 --> 00:05:52.290
所以我们已经确保了这是如何工作的。
So we've ensured just by way of how this works.

91
00:05:52.290 --> 00:05:57.620
我们知道一个事实，我们将会像Thunks一样按顺序打印。
We know for a fact that we're going to be printing in order just like with Thunks.

92
00:05:57.620 --> 00:05:59.360
下一步是什么？
What's the next step?

93
00:05:59.360 --> 00:06:02.579
你的本能可能会说我知道
Well your instinct might be to say well I know that the way to

94
00:06:02.579 --> 00:06:07.360
一起改变一些诺言，就是从一个诺言到另一个诺言的回报。
change some promises together, is to return one promise from another promise.

95
00:06:08.790 --> 00:06:13.430
所以对我们来说，传递第二次承诺似乎很有吸引力
So it would seem very attractive for us to just pass in Promise two

96
00:06:13.430 --> 00:06:17.839
进入链条，使它在它的电线和衰弱。
into the chain and make it so that it wires it in and wanes.

97
00:06:17.839 --> 00:06:20.170
我希望承诺就是这样起作用的。
And I wish that's how Promises worked.

98
00:06:20.170 --> 00:06:23.259
我希望你能给当时的方法传递一个承诺
I wish you could pass a Promise in to the then method and

99
00:06:23.259 --> 00:06:25.529
让它自动知道要做什么。
have it automatically know what to do.

100
00:06:25.529 --> 00:06:28.600
不幸的是，承诺没有这种功能。
Unfortunately, Promises don't have that feature.

101
00:06:28.600 --> 00:06:35.898
所以你必须传入一个返回承诺的函数。
So you have to pass in a function that returns that Promise.

102
00:06:35.898 --> 00:06:39.769
再举一个例子，人们一直在使用错误函数。
Again, an example where people use error functions all the time.

103
00:06:39.769 --> 00:06:42.579
在这种情况下，我会将其转换为函数声明吗？
Is this a case where I'd make that into a function declaration?

104
00:06:42.579 --> 00:06:44.009
也许吧。
Perhaps.

105
00:06:44.009 --> 00:06:46.590
但为了我们的目的，只是为了保持干净，
But for our purposes, just to keep things clean,

106
00:06:46.590 --> 00:06:50.509
我将使用函数表达式，但仅仅是告诫，
I'm going to use the function expressions, but just with the admonition,

107
00:06:50.509 --> 00:06:53.720
您希望尽量减少流控制中的表达式数量。
you want to try to minimize the amount of expressions in your flow control.

108
00:06:53.720 --> 00:06:59.290
如果你要拥有他们，请让他们像一个衬里。
And if you're gonna have them, by goodness please make them like one liners.

109
00:06:59.290 --> 00:07:04.019
如果链中有5，10，15，100行内嵌表达式，
If you have 5, 10, 15, 100 line inline expressions inside of your chains,

110
00:07:04.019 --> 00:07:05.930
这是个糟糕的主意好吗？
that's a terrible idea, okay?

111
00:07:05.930 --> 00:07:08.709
但是我们已经从链条中返回了P 2，这意味着
But we've returned P two from the chain which means

112
00:07:08.709 --> 00:07:13.399
这里发生的下一步将神奇地等待P2。
that the very next step that happens here is gonna magically be waiting on P two.

113
00:07:13.399 --> 00:07:14.269
大家都看到了吗？
Does everybody see that?

114
00:07:16.029 --> 00:07:17.896
那么，在P两个完成后我们想做什么？
So what do we want to do after P two finishes?

115
00:07:17.896 --> 00:07:23.319
你想再输出一次。
You wanna output again.

116
00:07:23.319 --> 00:07:25.562
然后你可能会猜到接下来会发生什么。
And then you can probably guess what happens next right.

117
00:07:25.562 --> 00:07:31.824
.然后函数，返回p3和
.then function, return p3 and

118
00:07:31.824 --> 00:07:35.860
然后，然后输出。
then .then output.

119
00:07:35.860 --> 00:07:38.302
最后。然后，只是
And finally .then, just for

120
00:07:38.302 --> 00:07:44.367
完整性考虑与其他例子，输出一个完整的消息。
completeness sake with the other examples, output a complete message.

121
00:07:50.862 --> 00:07:54.220
&gt；&gt；Kyle Simpson：我们的流控制使用承诺。
&gt;&gt; Kyle Simpson: There's our flow control using promises.

122
00:07:55.569 --> 00:07:58.709
它是垂直定向的，而不是嵌套在一起的，
It's vertically oriented rather than being nested together,

123
00:07:58.709 --> 00:08:01.579
当然增加了一点可读性因素。
certainly has increased the readability factor by a bit.

124
00:08:04.069 --> 00:08:07.100
但这是所发生的事情中最不重要的部分。
But that's the least important part of what's happened.

125
00:08:07.100 --> 00:08:09.480
我们还介绍了所有的理智和
We've also introduced all of the sanity and

126
00:08:09.480 --> 00:08:13.970
来自承诺机制的信任。
trust that comes from the Promise mechanism.

127
00:08:13.970 --> 00:08:19.180
我们可以相信，如果fakeAjax实用程序不知何故行为不当或恶意，或者
We can trust that if that fakeAjax utility somehow misbehaves or is malicious or

128
00:08:19.180 --> 00:08:23.839
是被劫持了还是什么，我们知道无论它做什么，
is hijacked or whatever, we know that no matter what it does,

129
00:08:23.839 --> 00:08:28.321
如果它调用了50，000次，我们只是
if it calls that resolve 50,000 times, we're only

130
00:08:28.321 --> 00:08:32.509
会得到一次通知，因为承诺系统就是这样建立的。
gonna get notified once because that's the way the Promise system is built.

131
00:08:32.509 --> 00:08:37.139
所以我们已经把我们的信任从一些不可信任的第三方
So we've shifted our trust from some untrustable third party

132
00:08:37.139 --> 00:08:40.799
变成一个非常可信的系统，事实上，一个内置在语言中的系统。
into a very trustable system, in fact, one that's built into the language.

133
00:08:40.799 --> 00:08:43.190
但即使不是，我们也知道我们可以审计和
But even if it wasn't, we know we can audit and

134
00:08:43.190 --> 00:08:45.830
相信承诺系统会做它应该做的事情。
trust the Promise system to do what its supposed to do.
