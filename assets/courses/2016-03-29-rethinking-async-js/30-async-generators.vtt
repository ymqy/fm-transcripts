WEBVTT

1
00:00:00.000 --> 00:00:03.837
[音乐]
[MUSIC]

2
00:00:03.837 --> 00:00:06.246
&gt；&gt；Kyle Simpson：这是我们的生命意义运行示例，
&gt;&gt; Kyle Simpson: Here's our meaning of life running example,

3
00:00:06.246 --> 00:00:11.259
写得更清楚一点来证明这一点关于提问。
written a little bit more clearly to prove this point about asking questions.

4
00:00:11.259 --> 00:00:12.890
看第6行。
Look at line 6.

5
00:00:12.890 --> 00:00:17.024
我说x等于1+，然后我进行Ajax调用。
I say x is equal to 1 + and then I make an AJAX call.

6
00:00:17.024 --> 00:00:22.640
我在Ajax调用结束时让步，好吧。
And I yield while the AJAX call is finishing, okay.

7
00:00:22.640 --> 00:00:26.160
Ajax调用getData立即不返回任何内容。
That AJAX call, getData, returns me nothing right away.

8
00:00:27.600 --> 00:00:31.640
但你会注意到，在它运行后的1000毫秒，在第二行，
But you'll notice that 1,000 milliseconds after it runs, up on line two,

9
00:00:31.640 --> 00:00:34.890
我们在二号线上打什么电话？
what do we call up on line two?

10
00:00:34.890 --> 00:00:38.950
我们调用run来重新启动，用我们返回的值恢复生成器。
We call run to restart, to resume the generator with the value that we got back.

11
00:00:40.429 --> 00:00:45.982
因此，在1000毫秒之后，我们的伪Ajax给出了来自Ajax调用的响应。
So after 1000 milliseconds, our fake AJAX gives us the response from our AJAX call.

12
00:00:45.982 --> 00:00:48.140
那么这个价值又从何而来呢？
And where does that value come back?

13
00:00:48.140 --> 00:00:50.170
回到第6行的屈服表达式。
Right back to the yield expression on line 6.

14
00:00:50.170 --> 00:00:52.156
所以我们马上得到值10。
So we get the value 10 right back.

15
00:00:54.091 --> 00:01:00.792
&gt；&gt；Kyle Simpson：所以我们这里有同步看起来异步的代码。
&gt;&gt; Kyle Simpson: So what we have here is synchronous looking asynchronous code.

16
00:01:03.226 --> 00:01:07.209
&gt；&gt；Kyle Simpson：我们能够在我们的生成器内部本地阻止作为
&gt;&gt; Kyle Simpson: We are able to block locally inside of our generator as

17
00:01:07.209 --> 00:01:11.090
如果有什么神奇的暂停简历的事情。
if there is some magical pause resume thing.

18
00:01:11.090 --> 00:01:14.799
因为现在有一个暂停简历，它是生成器。
Because there is a pause resume now, and it's the generator.

19
00:01:14.799 --> 00:01:18.759
发电机的管道可以暂停，等待
The plumbing of the generator is able to pause, wait for

20
00:01:18.759 --> 00:01:21.632
还有其他的背景工作要完成。
some other background thing to finish.

21
00:01:21.632 --> 00:01:25.269
然后继续使用我们等待的值。
And then resume with the value that we were waiting for.

22
00:01:25.269 --> 00:01:31.950
所以在我们的生成器中，从第六行到第十一行，这就是我们的程序逻辑。
So inside of our generator, line six through eleven, that's our program logic.

23
00:01:31.950 --> 00:01:34.640
这就是我们一遍又一遍写的东西。
That's the stuff we write over and over and over again.

24
00:01:34.640 --> 00:01:36.500
一线到三线和十五线，
Lines one through three and line fifteen,

25
00:01:36.500 --> 00:01:40.549
这些都是隐藏在某个图书馆里的管道。
that's all plumbing that gets hidden away in some library somewhere.

26
00:01:41.620 --> 00:01:46.710
我们的程序逻辑，我们的流量控制看起来像6到11。
Our program logic, our flow control looks like 6 through 11.

27
00:01:46.710 --> 00:01:51.979
现在，如果你在脑海中想象与二十张幻灯片相比，或者
Now, if you mentally picture that compared to twenty slides ago or

28
00:01:51.979 --> 00:01:54.530
不管怎样，当我们越过承诺链的时候。
whatever, when we went over the promise chain.

29
00:01:54.530 --> 00:01:57.750
承诺链是流控制的一种形式，最终
Promise chains are a form of flow control that ends up

30
00:01:57.750 --> 00:02:02.670
将一串函数调用垂直定向到一个承诺链中。
vertically orienting a bunch of function calls into a promise chain.

31
00:02:02.670 --> 00:02:06.310
如果你再回想一下，我们有Thunks，它们被嵌套在一起，
And if you think even further back, we had thunks and they were nested together and

32
00:02:06.310 --> 00:02:09.180
回电，他们都有那种怪异。
callbacks, they had all that kind of weirdness.

33
00:02:09.180 --> 00:02:11.560
所以这里我们又有了流量控制。
So here we have flow control again.

34
00:02:11.560 --> 00:02:16.240
但是这种特殊的流控制的神奇之处在于它看起来是同步的。
But what's so magic about this particular flow control is that it looks synchronous.

35
00:02:18.170 --> 00:02:19.900
为什么这很重要？
Why is that so important?

36
00:02:19.900 --> 00:02:21.189
因为这是我们大脑的工作方式。
Because that's the way our brains work.

37
00:02:23.020 --> 00:02:26.030
我们不需要任何开销，那些传球的样板
We don't have to have any of that overhead, that boilerplate of passing

38
00:02:26.030 --> 00:02:28.849
将事物作为回调和链接事物并返回。
things in as callbacks and chaining things and returning.

39
00:02:29.920 --> 00:02:33.210
所有这些东西都会被隐藏起来，这是一个实现细节。
All that stuff gets hidden away, it's an implementation detail.

40
00:02:33.210 --> 00:02:36.652
我们所做的就是将异步性本身
What we've done is taking asynchronicity itself and

41
00:02:36.652 --> 00:02:41.177
将其作为我们不关心的实现细节进行分解。
factored it out as an implementation detail that we do not care about.

42
00:02:44.760 --> 00:02:48.280
&gt；&gt；Kyle Simpson：我不确定我刚才所说的全部重量是
&gt;&gt; Kyle Simpson: I'm not really sure that the full weight of what I just said is

43
00:02:48.280 --> 00:02:49.810
真的过来了。
actually coming across.

44
00:02:51.379 --> 00:02:53.199
这可是件大事。
That's a huge deal.

45
00:02:54.389 --> 00:02:57.659
取异步性本身并将其分解为
Taking asynchronicity itself and factoring it out so

46
00:02:57.659 --> 00:02:59.990
我们不必担心。
that we don't have to worry about it.

47
00:03:02.156 --> 00:03:05.810
&gt；&gt；Kyle Simpson：我们编写同步的、顺序的、看起来像块的代码。
&gt;&gt; Kyle Simpson: We write synchronous, sequential, blocking looking code.

48
00:03:05.810 --> 00:03:10.310
我们让图书馆处理所有丑陋的部分。
And we let the library handle all of the ugly bits.

49
00:03:12.590 --> 00:03:17.254
&gt；&gt；Speaker 2：是否获得与getData相同的性能，
&gt;&gt; Speaker 2: Does it get the same performance like if it the getData,

50
00:03:17.254 --> 00:03:20.431
如果不是打外线电话，
if it's not making an external call,

51
00:03:20.431 --> 00:03:25.913
它本身就是一个函数，它正在进行一些巨大的操作？
it's a function in itself and it's making some huge operation?

52
00:03:25.913 --> 00:03:28.201
它会得到相同的性能，就像我与web worker或
Will it get the same performance like if I do with a web worker or

53
00:03:28.201 --> 00:03:30.020
一些事情，我必须做一个异步-。
something where I have to do an asynchronous-.

54
00:03:30.020 --> 00:03:36.120
&gt；&gt；Kyle Simpson：不，不要把这个和线程混淆，好吗？
&gt;&gt; Kyle Simpson: No, no, no, no, no, don't get this confused with threads, okay.

55
00:03:36.120 --> 00:03:39.195
如果行为发生在JavaScript程序中，
If the behavior is happening in your JavaScript program,

56
00:03:39.195 --> 00:03:41.340
它占用了单个事件线程。
it is taking up the single event thread.

57
00:03:41.340 --> 00:03:45.359
这与向网络工作者发送消息不是一回事。
This is not the same thing as messaging out to a web worker.

58
00:03:45.359 --> 00:03:47.775
你能给二号线的网络工作者发信息吗？
Could you message out to a web worker on line two?

59
00:03:47.775 --> 00:03:48.479
绝对的。
Absolutely.

60
00:03:49.948 --> 00:03:54.259
但是第2行不会因为你调用它而神奇地变成一个网络工作者
But line 2 doesn't magically become like a web worker just because you called it

61
00:03:54.259 --> 00:03:54.969
来自发电机。
from a generator.

62
00:03:54.969 --> 00:03:59.300
我们的JavaScript程序仍然只有一个线程可以运行。
There's still just one thread for our JavaScript program to run.

63
00:03:59.300 --> 00:04:03.039
这里唯一不同于你写过的任何东西的魔法
The only magic that's different here than anything else you've ever written

64
00:04:03.039 --> 00:04:06.479
从第6行到第11行出现了神奇的局部阻挡。
is the fact that line 6 through 11 get to magically locally block.

65
00:04:07.560 --> 00:04:11.120
我们以前在语法上从来没有这种能力。
We never had that capability syntactically before.

66
00:04:11.120 --> 00:04:14.879
现在我们有了一种隐藏的句法方式
And now we have a syntactic way of hiding away

67
00:04:14.879 --> 00:04:18.519
状态机的所有复杂性，异步状态机。
all of the complexity of a state machine, an asynchronous state machine.

68
00:04:20.610 --> 00:04:22.990
所以我们的代码看起来又是同步的。
So our code looks synchronous again.

69
00:04:22.990 --> 00:04:26.029
不仅我们的常规代码看起来是同步的，
And not only does our regular code looks synchronous,

70
00:04:26.029 --> 00:04:28.670
我们的错误处理再次变得同步。
our error handling becomes synchronous again.

71
00:04:28.670 --> 00:04:31.081
我们如何进行同步错误处理，我们使用什么？
How do we do synchronous error handling, what do we use?

72
00:04:35.269 --> 00:04:36.790
&gt；&gt；Kyle Simpson：尝试，接住。
&gt;&gt; Kyle Simpson: Try, catch.

73
00:04:36.790 --> 00:04:39.610
你可以绕着第6行尝试接球。
You can wrap try catch around line 6.

74
00:04:39.610 --> 00:04:43.590
如果Ajax在幕后抛出了一些错误，
And if the AJAX under the covers threw some error,

75
00:04:43.590 --> 00:04:46.670
该错误将立即返回并作为同步错误被捕获。
that error is gonna come right back in and get caught as a synchronous error.

76
00:04:46.670 --> 00:04:50.752
因为在发电机内部，一切都恢复正常，同步，
Because inside of the generator, everything's back to normal, synchronous,

77
00:04:50.752 --> 00:04:53.191
阻塞语义，包括错误处理。
blocking semantics including error handling.

78
00:04:53.191 --> 00:04:57.403
因此我们得到了一个异步堆栈，该堆栈被规范化回
So we get an asynchronous stack that gets normalized back into

79
00:04:57.403 --> 00:05:00.567
生成器内部的同步堆栈。
a synchronous stack inside of our generator.

80
00:05:00.567 --> 00:05:02.639
是啊。
Yeah.

81
00:05:02.639 --> 00:05:03.204
&gt；&gt；扬声器2：线路11，
&gt;&gt; Speaker 2: Line 11,

82
00:05:03.204 --> 00:05:08.007
console.log(应答)-&gt；&gt；扬声器2：SO
console.log(answer)- &gt;&gt; Speaker 2: So

83
00:05:08.007 --> 00:05:12.540
日志记录一直等到x加1被计算出来吗？
the logging wait until x plus 1 is computed?

84
00:05:13.920 --> 00:05:16.310
&gt；&gt；Kyle Simpson：在第8行结束之前，第11行不会运行。
&gt;&gt; Kyle Simpson: Line 11 doesn't run until after line 8 is finished.

85
00:05:17.949 --> 00:05:20.985
在第6行结束之前，第7行不会运行。
Line 7 doesn't run until after line 6 is finished.

86
00:05:22.826 --> 00:05:24.269
&gt；&gt；Kyle Simpson：因为这个关键字。
&gt;&gt; Kyle Simpson: Because of that yield keyword.

87
00:05:24.269 --> 00:05:26.519
&gt；&gt；扬声器2：但是如果我有线路12，
&gt;&gt; Speaker 2: But if I have line 12,

88
00:05:26.519 --> 00:05:29.699
这是console.log其他东西，它会被打印出来。
that's console.log something else, that would be printed.

89
00:05:29.699 --> 00:05:31.139
&GT；&GT；凯尔·辛普森：那么它马上就会去。
&gt;&gt; Kyle Simpson: Then it's gonna go right away.

90
00:05:31.139 --> 00:05:33.379
我们只会在YORD关键字处暂停。
We only pause at the yield keyword.

91
00:05:33.379 --> 00:05:35.807
其他所有内容都会一直运行，直到下一个YELD关键字为止。
Everything else keeps running until the next yield keyword.

92
00:05:35.807 --> 00:05:38.096
或者直到结束然后它就结束了。
Or until the end and then it finishes.

93
00:05:44.656 --> 00:05:47.869
&gt；&gt；Speaker 3：从技术上讲，第8行，你不需要在那里做让步
&gt;&gt; Speaker 3: Technically, line 8, you don't need to do a yield there

94
00:05:47.869 --> 00:05:51.819
因为你在概念上真的没有拿到任何东西，对吧？
because you're really not conceptually fetching anything, right?

95
00:05:51.819 --> 00:05:53.269
那只是计算本地的东西。
That's just computing something local.

96
00:05:55.149 --> 00:05:57.389
&gt；&gt；Kyle Simpson：在我们所有运行意义的生命例子中，
&gt;&gt; Kyle Simpson: In all of our running meaning of life example,

97
00:05:57.389 --> 00:05:59.449
我们总是将这三个电话都具体化。
we always externalized all three calls.

98
00:05:59.449 --> 00:06:00.000
&gt；&gt；扬声器3：好的。
&gt;&gt; Speaker 3: Okay.

99
00:06:00.000 --> 00:06:01.290
&gt；&gt；Kyle Simpson：所以我也在做同样的事情。
&gt;&gt; Kyle Simpson: So I'm doing the exact same thing.

100
00:06:01.290 --> 00:06:05.009
我们假装那根绳子需要送到某个地方
We're pretending as if that string needs to get sent off somewhere and

101
00:06:05.009 --> 00:06:09.009
本地化成我们自己的外星人语言或者别的什么。
localized into our own alien language or whatever.

102
00:06:09.009 --> 00:06:12.584
然后它就会回到我们身边，好吧。
And then it comes back to us, okay.

103
00:06:12.584 --> 00:06:14.500
怎么了？
Yes?

104
00:06:14.500 --> 00:06:19.093
&GT；&GT；扬声器4：他们再次问，在第16行，他们是否在那里运行，
&gt;&gt; Speaker 4: They're asking again, on line 16, if they had put a run there,

105
00:06:19.093 --> 00:06:22.391
调用setTimeout后会执行吗？
Would that execute after calling setTimeout?

106
00:06:25.951 --> 00:06:29.420
&gt；&gt；Kyle Simpson：如果在第16行，
&gt;&gt; Kyle Simpson: If on line 16 you put a run there,

107
00:06:29.420 --> 00:06:34.329
它会恢复等待的发电机
it would resume the generator that's waiting on

108
00:06:34.329 --> 00:06:38.773
第6行，而不是向它发送一个值。
line 6 right away, not sending it a value.

109
00:06:38.773 --> 00:06:41.821
并且当setTimeout试图运行调用运行时，
And when the setTimeout tried to run call run,

110
00:06:41.821 --> 00:06:47.230
如果生成器当前未处于暂停状态，则会产生错误。
if the generator was not in a currently paused state, that would create an error.

111
00:06:48.899 --> 00:06:52.143
所以你不想让很多不同的人尝试恢复你的
So you do not want to try to have lots of different people trying to resume your

112
00:06:52.143 --> 00:06:53.877
发电机在很多不同的地方。
generator in lots of different places.

113
00:06:53.877 --> 00:06:55.810
这真是个糟糕的主意。
That's a really terrible idea.

114
00:06:57.240 --> 00:06:58.659
发电机只能
The generator can only,

115
00:07:00.060 --> 00:07:02.920
在任何给定的时间，JavaScript中只能发生一件事。
only one thing can ever be happening in JavaScript at any given time.

116
00:07:02.920 --> 00:07:05.709
所以我们没有这个问题。
So we don't have that problem.

117
00:07:05.709 --> 00:07:07.658
但你不想用那个迭代器。下一步和
But you don't want to take that iterator.next and

118
00:07:07.658 --> 00:07:10.569
有很多不同的人叫它，因为你会弄乱顺序。
have lots of different people calling it, cuz you'll get out of sequence.

119
00:07:17.108 --> 00:07:20.319
&gt；&gt；Kyle Simpson：我在这里看到一个关于在生成器中使用承诺的问题。
&gt;&gt; Kyle Simpson: I see a question in here about using promises in the generator.

120
00:07:20.319 --> 00:07:21.339
坚持住，我们会到的。
Hold on, we'll get there.

121
00:07:23.250 --> 00:07:24.560
我保证我们就快到了。
I promise, we're almost there.

122
00:07:26.997 --> 00:07:30.170
&GT；&GT；凯尔·辛普森：我只是想让这一刻沉浸在其中。
&gt;&gt; Kyle Simpson: I just wanna let a moment for this to sink in.

123
00:07:30.170 --> 00:07:33.389
因为这就像是神圣的垃圾时刻。
Cuz this is like that holy crap moment.

124
00:07:33.389 --> 00:07:38.670
就像，哇，我可以做同步看起来异步编程？
Like, whoa, I get to do synchronous looking asynchronous programming?

125
00:07:40.997 --> 00:07:45.290
&gt；&gt；Kyle Simpson：我之前看到一些人问这个有哪些用例。
&gt;&gt; Kyle Simpson: I saw some people asking earlier what are some use cases of this.

126
00:07:45.290 --> 00:07:47.860
我第一次看到这个是五或者
The very first time I saw this was five or

127
00:07:47.860 --> 00:07:51.399
六年前，标准中还没有发电机。
six years ago before there were generators in the standard.

128
00:07:51.399 --> 00:07:54.079
Firefox将生成器放入他们的
Firefox put generators into their

129
00:07:54.079 --> 00:07:57.199
JavaScript引擎的实现大约在十年前。
implementation of JavaScript engine about a decade ago.

130
00:07:57.199 --> 00:08:00.199
我在Firefox的开发者工具团队工作。
And I was working at Firefox on the developer tools team.

131
00:08:01.480 --> 00:08:04.899
每次我们向开发人员工具添加功能时，
And every time we would add a feature to a developer tool,

132
00:08:04.899 --> 00:08:09.047
当然，我们需要一个测试用例，一些特性的测试套件。
of course we needed a test case for it, a test suite for some feature.

133
00:08:09.047 --> 00:08:13.029
以及您在Firefox浏览器中使用JavaScript所做的一切，
And everything you do in the Firefox browser that you're doing in JavaScript,

134
00:08:13.029 --> 00:08:14.348
都是异步的。
it's all asynchronous.

135
00:08:14.348 --> 00:08:18.072
没有同步的东西，每个API都是异步的。
There's no synchronous anything, every single API is asynchronous.

136
00:08:18.072 --> 00:08:22.329
嗯，写异步测试用例真的，真的很难。
Well, it gets really, really hard to write asynchronous test cases.

137
00:08:22.329 --> 00:08:28.084
当每一个人都喜欢画边界，然后等待它发生。
When every single like draw border and then wait for that to happen.

138
00:08:28.084 --> 00:08:32.456
真正的问题是这些调用没有一个，我是说，它们都是异步的。
And the real problem is that none of those calls, I mean, they're all asynchronous.

139
00:08:32.456 --> 00:08:34.899
但是没有一个事件可以让你知道他们已经结束了。
But none of them have events to let you know that they finished.

140
00:08:34.899 --> 00:08:38.716
所以你真的就像做setTimeout，我是说，这很疯狂，
So you literally are just like doing setTimeout, I mean, it was crazy,

141
00:08:38.716 --> 00:08:41.419
在那种环境下编写测试用例很糟糕。
terrible to write test cases in that environment.

142
00:08:41.419 --> 00:08:45.610
因为它是异步的，没有任何步骤已经完成的通知。
Because it was asynchronicity without any notification that the step had completed.

143
00:08:45.610 --> 00:08:49.669
所以你可以想象我的测试用例是可怕的。
So you can imagine that my test cases were horrible.

144
00:08:50.830 --> 00:08:52.889
然后有一天我的一个同事说
And then one day one of my coworkers was like well,

145
00:08:52.889 --> 00:08:55.080
你为什么不直接用发电机重写呢？
why don't you just rewrite all with a generator?

146
00:08:55.080 --> 00:08:57.561
我说什么？
And I was like what?

147
00:08:57.561 --> 00:09:00.110
我开始通读，我想，我的上帝。
And I started reading through and I was like, my God.

148
00:09:00.110 --> 00:09:02.671
我可以同步的方式编写测试用例
I can write my test cases in a synchronous fashion and

149
00:09:02.671 --> 00:09:07.379
让所有的异步垃圾，所有的超时和东西，隐藏起来？
let all that asynchronicity crap, all the timeouts and stuff, hide that away?

150
00:09:07.379 --> 00:09:08.412
它改变了一切。
It changed everything.

151
00:09:10.500 --> 00:09:14.481
&GT；&GT；凯尔·辛普森：我在我们获得着陆希望的几年前就看到了这一点
&gt;&gt; Kyle Simpson: I saw that years before we ever got a hope of that landing as part

152
00:09:14.481 --> 00:09:16.580
JavaScript标准的。
of the JavaScript standard.

153
00:09:16.580 --> 00:09:18.376
但我一直是你的超级粉丝
But I've been a big fan for

154
00:09:18.376 --> 00:09:23.782
很长一段时间，因为同步看起来异步是那颗神奇的银弹。
a long time because synchronous looking async is that magical silver bullet.

155
00:09:23.782 --> 00:09:26.860
在编程语言设计中，你不会经常遇到这些问题。
And you don't get those very often in programming language design.

156
00:09:27.889 --> 00:09:30.125
那些神奇的银子弹不知从哪里冒出来。
Those magical silver bullets that come out of nowhere.

157
00:09:34.113 --> 00:09:37.301
&gt；&gt；Kyle Simpson：所以当我前面说承诺是伟大的，
&gt;&gt; Kyle Simpson: So when I said earlier that promises are great and

158
00:09:37.301 --> 00:09:40.116
承诺链为我们提供了一些流控制。
promise chains give us some flow control.

159
00:09:40.116 --> 00:09:43.544
但是，我甚至说我做了异步图书馆
But, and I even said that I did the asynquence library and

160
00:09:43.544 --> 00:09:45.051
给了我自己的序列。
gave me self sequences.

161
00:09:45.051 --> 00:09:50.860
然后我说，实际上，我不再用那些了，这就是为什么。
And then I said that actually, I don't use those anymore, this is why.

162
00:09:50.860 --> 00:09:54.879
因为我在生成器中编写了100%的异步代码。
Cuz I write a 100% of my asynchronous code inside of generators.

163
00:09:56.379 --> 00:09:59.600
如果您可以选择写入同步外观异步，
If you have the option of writing synchronous looking async,

164
00:09:59.600 --> 00:10:02.610
你到底为什么要再写一次诺言链？
why on earth would you ever want to write a promise chain again?

165
00:10:02.610 --> 00:10:06.559
我不知道，我想不出一个单独的案例为什么承诺链
I don't know, I can't come up with a single case why a promise chain would

166
00:10:06.559 --> 00:10:09.294
当我有这个选择的时候，永远不会成为我想写的东西。
ever be what I wanna write, when I have that option.

167
00:10:09.294 --> 00:10:15.190
所以我回去了，完全改变了我的整个思维方式。
So I've gone back and completely rechanged my whole way of thinking.

168
00:10:15.190 --> 00:10:19.221
一旦我了解了发电机的力量，我就回去
Once I got to understanding the power of generators, I've gone back and

169
00:10:19.221 --> 00:10:21.480
完全改变了我的思维方式。
completely changed my way of thinking.

170
00:10:21.480 --> 00:10:23.820
现在我要做的就是把所有东西都放进发电机里。
And now what I do is put everything inside of a generator.
