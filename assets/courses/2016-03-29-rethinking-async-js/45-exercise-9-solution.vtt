WEBVTT

1
00:00:00.000 --> 00:00:03.847
[音乐]
[MUSIC]

2
00:00:03.847 --> 00:00:08.669
&gt；&gt；Kyle Simpson：CSP，可能对你们中的一些人来说，有点脑残。
&gt;&gt; Kyle Simpson: CSP, probably for several of you, a bit brain bending.

3
00:00:08.669 --> 00:00:13.830
我的大脑还在弯曲，而且我在这方面已经有一段时间了，所以没关系。
Still brain bending for me, and I've been at this for awhile, so that's okay.

4
00:00:13.830 --> 00:00:16.230
不要逃避那些让你的大脑有点扭曲的事情。
Don't run away from those things that twist your brain a bit.

5
00:00:17.410 --> 00:00:20.129
我的本能是当我看到一些东西在扭曲我的大脑，并且
My instinct is when I see something that is twisting my brain, and

6
00:00:20.129 --> 00:00:23.730
我真的不确定我是否理解它，这就是我向着它跑去的东西
I'm not really sure I understand it, that's the thing I run towards

7
00:00:23.730 --> 00:00:25.760
因为我觉得我可能遗漏了什么
because I feel like there's probably something I'm missing and

8
00:00:25.760 --> 00:00:28.230
它可能真的，真的很强大，真的很有用。
it's probably really, really powerful and really, really useful.

9
00:00:28.230 --> 00:00:30.615
所以我鼓励你接受这一点。
So I encourage you to embrace that.

10
00:00:30.615 --> 00:00:37.476
而不是完全&gt；&gt；Kyle Simpson：完全
Rather than fully &gt;&gt; Kyle Simpson: Fully

11
00:00:37.476 --> 00:00:42.014
从头开始为你开发解决方案，我将切换到
develop the solution for you from scratch, I'm going to switch over to

12
00:00:42.014 --> 00:00:46.326
固定版本，只需引导您完成不同的部分
the fixed version and just walk you through the different pieces and

13
00:00:46.326 --> 00:00:50.182
为什么他们在那里，部分原因只是不能压倒
why they're there, partly that's just not to overwhelm so

14
00:00:50.182 --> 00:00:54.456
很多，部分是为了节省时间，这样我们就可以开始我们的最后一次练习了。
much and partly to save time, so we can get on to our last exercise.

15
00:00:54.456 --> 00:00:58.579
好吧，所以我首先要做的是，
All right, so what I'm first doing here,

16
00:00:58.579 --> 00:01:02.549
这从反应性解决方案中看起来应该很熟悉。
this should look familiar from the reactive solution.

17
00:01:02.549 --> 00:01:05.599
我正在为每个点击和消息设置一个频道。
I'm setting up a channel for each of the clicks and messages.

18
00:01:05.599 --> 00:01:09.870
因此，我将使用通道进行通信，而不是使用可观察到的通道。
So I'm going to use channels for my communication rather than observables.

19
00:01:11.039 --> 00:01:14.439
这应该是非常简单明了的
That should make pretty straightforward sense and

20
00:01:14.439 --> 00:01:18.170
然后我有我的跑步者，它将运行我的两个围棋例程。
then I have my runner which is going to run my two go routines.

21
00:01:18.170 --> 00:01:21.599
我将有一个用于采样单击事件，另一个用于
I'm gonna have one for sampling the click events and one for

22
00:01:21.599 --> 00:01:23.140
注销这些点击消息。
logging out those click messages.

23
00:01:23.140 --> 00:01:25.054
所以这些就是我将要运行的套路。
So those are my to go routines that are gonna run.

24
00:01:26.530 --> 00:01:31.189
现在我也要听一下按钮的咔嗒声。
Now I'm also going to listen to the clicks from the button.

25
00:01:31.189 --> 00:01:33.840
所以让我们来看看听点击在做什么。
So lets look at what listen to clicks is doing.

26
00:01:33.840 --> 00:01:36.490
我正在做的是我有一个叫做排队点击的变量，
What I'm doing is I've got a variable called queued click,

27
00:01:36.490 --> 00:01:38.579
这有点像上一次的最新情况。
it's kind of like what latest was in the previous one.

28
00:01:38.579 --> 00:01:45.849
但是排队的点击将保留来自putAsync的返回值。
But queued click is going to keep the return value from putAsync.

29
00:01:45.849 --> 00:01:50.090
记得我说过putAsync会作为一个承诺返回，让我们知道
Remember I said putAsync would return as a promise that would let us know

30
00:01:50.090 --> 00:01:53.450
每当看跌期权被渠道接受时。
whenever the put had been accepted by the channel.

31
00:01:53.450 --> 00:01:58.700
所以我会利用这一点说，我不想排队任何更多的点击
So I'm gonna take advantage of that and say, I don't want to queue any more clicks

32
00:01:58.700 --> 00:02:01.280
直到我知道前一个已经被接受了。
until I know that the previous one has already been accepted.

33
00:02:02.310 --> 00:02:07.510
所以这是一种模拟非围棋常规的方式，背压。
So it's a way of sort of simulating in a non go routine, that back pressure thing.

34
00:02:07.510 --> 00:02:11.840
所以我要把它存储到一个变量中，如果它没有
So I'm gonna store it off into a variable only if it hasn't been

35
00:02:11.840 --> 00:02:15.490
存储在一个变量中，我将聆听它的完成和
stored off in a variable, and I'm going to listen to the completion of that and

36
00:02:15.490 --> 00:02:16.829
那就是我要把它清理干净的时候。
that's when I'm going to clear it out.

37
00:02:16.829 --> 00:02:20.610
因此只有一个点击事件将能够进入通道，
So only one click event is going to be able to go into the channel,

38
00:02:20.610 --> 00:02:24.512
一次等待和等待，而不是堆积起来。
be pending and waiting at a time rather than them stacking up.

39
00:02:24.512 --> 00:02:28.939
这就是我将如何防止这种情况的原因，因为实际上没有直接的方法或者
That's how I'm gonna prevent that because there really isn't a direct way or

40
00:02:28.939 --> 00:02:31.670
甚至是一种适当的排泄渠道的方法。
even a proper way of draining out a channel.

41
00:02:32.759 --> 00:02:34.620
所以你不会想往那个方向走。
So you're not gonna wannna go down that direction.

42
00:02:34.620 --> 00:02:37.030
所以在这里，我不是这样做，而是
So here rather than doing that, I'm going to

43
00:02:37.030 --> 00:02:41.639
只需知道还没有收到背压，就可以模拟背压。
simulate the back pressure by just knowing that it hasn't been received yet.

44
00:02:41.639 --> 00:02:45.849
如果我在这里的发电机里，我就不需要储存和
If I were inside of a generator here, I wouldn't need to be storing off and

45
00:02:45.849 --> 00:02:48.490
听着承诺，我会在看跌期权上投降。
listening to a promise, I would just yield on the put.

46
00:02:49.659 --> 00:02:53.550
但我不在生成器内，因为此函数正在由
But I'm not inside of a generator because this function's being called by

47
00:02:53.550 --> 00:02:54.979
每次都有一个点击处理程序。
a click handler every time.

48
00:02:54.979 --> 00:02:58.639
所以这就是为什么我必须走一条额外的路来处理一些作为承诺的事情。
So that's why I have to go the extra route of dealing with something as a promise.

49
00:03:00.520 --> 00:03:03.090
这就是我之前说的原因之一，
This is one of the reasons why I said earlier,

50
00:03:03.090 --> 00:03:06.219
这些更高层次的模式即使它们更强大
that these higher level patterns even though they're much more powerful and

51
00:03:06.219 --> 00:03:11.110
它们确实提供了一些低级模式不能提供的很好的负担，
they do offer some really nice affordances that the lower level patterns don't,

52
00:03:11.110 --> 00:03:13.930
他们没有完全取代较低级别的模式。
they're not fully replacing the lower level patterns.

53
00:03:13.930 --> 00:03:17.629
我们仍然需要理解什么是承诺，因为有时候
We still need to understand what a promise is because there's gonna be times when

54
00:03:17.629 --> 00:03:21.420
承诺对完成某件事是有用的。
a promise is gonna be useful to accomplish something.

55
00:03:21.420 --> 00:03:27.610
因此，让我们来看一下示例点击。
So let's take a look at sample clicks.

56
00:03:27.610 --> 00:03:31.620
我将会有一段时间真正的循环旋转，我将从1，000
I'm gonna have a while true loop spinning and I'm gonna take from a 1,000

57
00:03:31.620 --> 00:03:36.460
毫秒超时频道，我将从点击中获取。
millisecond timeout channel And I'm going to take from the clicks.

58
00:03:37.789 --> 00:03:40.000
所以请记住，我只允许单击一次。
So remember I'm only allowing one click to go down.

59
00:03:40.000 --> 00:03:43.539
所以我要坐在这里等待，直到有一个为我准备好的点击
So I'm gonna sit here and wait until there is a click ready for me and

60
00:03:43.539 --> 00:03:46.240
然后我要发布一条信息。
then I'm going to put a message out.

61
00:03:48.819 --> 00:03:50.930
这是我的日志点击。
And here's my log click.

62
00:03:50.930 --> 00:03:52.771
我要坐在这里等
I'm going to sit here waiting for

63
00:03:52.771 --> 00:03:56.980
有人把一些东西放到消息频道上，我要附加
somebody to put something on to the messages channel and I'm going to append

64
00:03:56.980 --> 00:04:03.163
我在名单上得到了什么。&gt；&gt；Kyle Simpson：不
what I get to the list. &gt;&gt; Kyle Simpson: Not

65
00:04:03.163 --> 00:04:08.680
在我们如何拆分方面，与我们的反应性解决方案非常不同。
terribly dissimilar from our reactive solution in terms of how we split it up.

66
00:04:10.460 --> 00:04:12.469
所以希望这至少有一点道理。
So hopefully that made at least a little bit of sense.

67
00:04:14.199 --> 00:04:17.000
我只想指出一个不同之处
There is one difference that I do wanna point out just in

68
00:04:17.000 --> 00:04:19.790
完全透明的利益。
the interest of full transparency here.

69
00:04:19.790 --> 00:04:25.589
当我们取样时，我们丢弃了所有的旧事件
When we're sampling, we're throwing away all old events and

70
00:04:25.589 --> 00:04:30.639
在这里，我们通过甚至不将事件放入队列来丢弃事件。
here, we are throwing away events by just not even putting them into the queue.

71
00:04:30.639 --> 00:04:37.240
所以我们实际上存储了发生的第一个事件，而
So we're actually storing the first event that happened, whereas

72
00:04:37.240 --> 00:04:42.649
在反应性可观测的东西中，我们只保留最后发生的事件。
in the reactive observables thing, we were keeping only the last event to happen.

73
00:04:42.649 --> 00:04:45.909
所以如果从现在到现在你有一千个事件一千个按钮点击
So if you had a thousand events a thousand button clicks between now and

74
00:04:45.909 --> 00:04:47.649
上次计时器启动的时间。
the last time the timer fired.

75
00:04:47.649 --> 00:04:49.600
我们只使用最后一个事件
We only use the last event and

76
00:04:49.600 --> 00:04:54.840
在这里，我们使用第一个事件并丢弃后续事件。
here we're using the first event and throwing away subsequent.

77
00:04:54.840 --> 00:04:57.449
所以在概念上有一点不同。
So there is a slight difference there conceptually.

78
00:05:00.839 --> 00:05:01.744
就像反应一样，
As with the reactive,

79
00:05:01.744 --> 00:05:05.410
有100种不同的方法你可以用不同的方式来建模。
there are 100 different ways that you could've modelled this differently.

80
00:05:05.410 --> 00:05:09.519
其中一些可能最终在那里产生了不同的行为，但是
Some of those may have ended up producing different behaviors there, but

81
00:05:09.519 --> 00:05:13.079
我想用最简单的方式来说明相同类型的
I was going for the simplest way to illustrate the same kinds of

82
00:05:13.079 --> 00:05:17.839
这里的概念。
concepts here.

83
00:05:17.839 --> 00:05:19.442
关于CSP的问题。
So, questions about csp.

84
00:05:28.504 --> 00:05:31.920
&GT；&GT；凯尔·辛普森：也许我们只是因为我的大脑完全融化了。
&gt;&gt; Kyle Simpson: Maybe we're just in that my brain is completely melted.

85
00:05:31.920 --> 00:05:35.220
无论如何，我不可能表达一个完整的英语句子。
I couldn't possibly formulate a full English sentence anyway.

86
00:05:35.220 --> 00:05:38.779
我也到了，没问题。&gt；&gt；扬声器2：我只是试着做
I get there too, its no problem. &gt;&gt; Speaker 2: I'm just trying to do

87
00:05:38.779 --> 00:05:41.659
简单的东西却不起作用。
something simple and it's not not working.

88
00:05:41.659 --> 00:05:45.606
所以我们可以备份并说为什么我不能在屏幕上打印一些东西，但是
So we could back up and say why can't I just print something on the screen, but

89
00:05:45.606 --> 00:05:48.649
这似乎是在浪费其他人的时间。
that seems to be like a waste of everybody else's time.

90
00:05:48.649 --> 00:05:49.259
&gt；&gt；Kyle Simpson：好的，
&gt;&gt; Kyle Simpson: Okay well,

91
00:05:49.259 --> 00:05:51.329
在休息或结束时，
over a break or at the end or something,

92
00:05:51.329 --> 00:05:54.170
让我们好好谈谈。&gt；&gt；扬声器3：是的，
let's talk through it. &gt;&gt; Speaker 3: Yeah,

93
00:05:54.170 --> 00:05:56.009
它总是和发电机一起使用还是
is it always used with generators or

94
00:05:56.009 --> 00:05:59.579
几乎总是与发电机一起使用？&gt；&gt；Kyle Simpson：发电机是
almost always used with generators? &gt;&gt; Kyle Simpson: Generators are the way to

95
00:05:59.579 --> 00:06:02.899
最直接地在JavaScript中建模围棋例程。
model a Go routine most directly in JavaScript.

96
00:06:02.899 --> 00:06:04.300
如果你不用发电机，
If you didn't use a generator,

97
00:06:04.300 --> 00:06:07.689
你要做很多额外的工作来制作你自己的状态机。
you'd be doing a lot of extra work to make your own state machine stuff.

98
00:06:07.689 --> 00:06:10.939
而且你不会得到同步语义的好处
And you wouldn't get the benefit of that synchronous semantic

99
00:06:10.939 --> 00:06:12.790
按你想要的方式。&gt；&gt；扬声器3：SO
the way you want. &gt;&gt; Speaker 3: So

100
00:06:12.790 --> 00:06:16.620
电力来自这些通道加上发电机？
the power comes from these channels plus the generator together?

101
00:06:17.759 --> 00:06:19.709
&GT；&GT；凯尔·辛普森：是的，没错。
&gt;&gt; Kyle Simpson: Yeah, yeah, exactly.

102
00:06:19.709 --> 00:06:23.324
如果你已经学习了发电机的功率，这是同步的
If you already learned the power of generators, which is the synchronous

103
00:06:23.324 --> 00:06:28.180
顺序看起来异步，然后你在通道给我们的语义上分层，
sequential-looking async, then you layer on the semantic that channels give us,

104
00:06:28.180 --> 00:06:30.230
那个阻挡，背压语义。
that blocking, back pressure semantic.

105
00:06:30.230 --> 00:06:31.839
这就是CSP给我们的
That's what CSP is giving us.

106
00:06:40.970 --> 00:06:41.680
凯尔·辛普森：好的，
&gt;&gt; Kyle Simpson: All right,

107
00:06:41.680 --> 00:06:46.090
在我们进行最后一个练习之前，我想给你们看一些东西。
before we go on to our last exercise, I wanted to just show you something.

108
00:06:46.090 --> 00:06:48.800
这是我正在进行的工作。
This is an in-process work of mine.

109
00:06:53.730 --> 00:06:57.970
我大约一年前开始思考这个问题。
I started about a year ago thinking about this problem.

110
00:06:57.970 --> 00:07:01.100
当我第一次开始进入CSP时，它是发生的第一件事之一
When I first started getting into CSP, it was one of the first things that occurred

111
00:07:01.100 --> 00:07:05.769
对我来说，当我实施自己的CSP东西时，我很快就意识到，
to me and then I realized very quickly when I was implementing my own CSP stuff,

112
00:07:05.769 --> 00:07:08.699
做这件我梦寐以求的事情会有多难。
how hard it would be to do this thing that I had dreamed of doing.

113
00:07:09.720 --> 00:07:11.660
但我想，有一天，在我的脑海里，
But I thought in the back of my head, one of these days,

114
00:07:11.660 --> 00:07:14.670
我会抽出时间来试试看。
I'll get around to trying my hand at it.

115
00:07:14.670 --> 00:07:17.759
然后大约三个月前
And then about three months ago,

116
00:07:17.759 --> 00:07:23.230
我应邀在一个会议上发言，我想，你知道，我要向你求婚
I got invited to speak at a conference and I was like, you know, I'm gonna propose

117
00:07:23.230 --> 00:07:27.970
我跟他们谈论这个登月计划，我甚至不确定这是不可能的。
that I talk to them about this moonshot that I'm not even sure is possible.

118
00:07:27.970 --> 00:07:31.360
所以我给自己设定了最后期限
So I gave myself a deadline by which I would have to do that and

119
00:07:31.360 --> 00:07:32.840
截止日期是从现在开始的一个星期。
that deadline is a week from now.

120
00:07:34.370 --> 00:07:37.340
所以我要给你们看的是，这是我第一次展示这个，
So what I'm gonna show you, it's the first time I'm showing this,

121
00:07:37.340 --> 00:07:41.500
我将向您展示的是解决方案的概念证明
what I'm gonna show you is a proof of concept for a solution

122
00:07:41.500 --> 00:07:47.350
我想出来的这个想法，它与CSP的东西直接相关。
to this idea that I came up with and it's directly related to the CSP stuff.

123
00:07:47.350 --> 00:07:51.269
在我们的CSP中发生的是我们对这些发电机进行建模，
What's happening here in our CSP is that we're modelling these generators,

124
00:07:51.269 --> 00:07:54.370
我的意思是我们将这些过程建模为生成器
I mean we're modelling these processes as generators

125
00:07:54.370 --> 00:07:58.680
在同一个JavaScript程序中，这很棒，因为我们获得了独立性，
within the same JavaScript program, which is great because we get the independence,

126
00:07:58.680 --> 00:08:01.370
阻塞的语义，以及所有这些东西。
the semantics of blocking, and all of that stuff.

127
00:08:01.370 --> 00:08:03.060
但从性能的角度来看，
But from a performance perspective,

128
00:08:03.060 --> 00:08:05.139
这些生成器没有在单独的线程上运行。
these generators are not running on separate threads.

129
00:08:06.939 --> 00:08:10.939
所以我们并没有真正得到像Go或Go这样的东西的全部力量
So we're not really getting the full power of something like Go or

130
00:08:10.939 --> 00:08:12.490
Clojurescript的方式，他们的模型东西。
Clojurescript the way they model stuff.

131
00:08:12.490 --> 00:08:16.500
我们没有得到这一点，因为我们实际上并没有在这里使用多个线程，
We're not getting that because we're not actually using multiple threads here,

132
00:08:16.500 --> 00:08:20.920
多个进程，我们使用一个单一的阻塞JavaScript事件。
multiple processes, we're using one single blocking JavaScript event.

133
00:08:22.110 --> 00:08:24.709
所以大约一年前，我自己在想，
So about a year ago, I was wondering to myself,

134
00:08:24.709 --> 00:08:30.839
我想知道如果我可以创建一个使用CSP的通道会是什么样子，
I wonder what it would be like if I could create a channel for usage with CSP,

135
00:08:30.839 --> 00:08:36.480
其中通道本身被实现为到远程线程的桥。
where the channel itself was implemented as a bridge to a remote thread.

136
00:08:38.000 --> 00:08:41.519
如果我可以有同样的围棋程序，就像27至35线上的那个。
What if I could have the same Go routine, like the one that's on line 27 to 35.

137
00:08:41.519 --> 00:08:45.029
如果我可以把它放在浏览器里
What if I can have that in the browser and

138
00:08:45.029 --> 00:08:50.110
那么第38行到43行的那些，如果它可能在服务器上，会吗？
then the ones from line 38 to 43, would if it could be on the server?

139
00:08:51.860 --> 00:08:56.039
两个不同的围棋例程可以精确地相互通信
Two different go routines that could communicate with each other exactly

140
00:08:56.039 --> 00:08:59.230
同样的方式使用通道语义和
the same way using the channel semantic and

141
00:08:59.230 --> 00:09:03.399
让通道找出如何跨越远程线路进行桥接。
have the channel figure out how to bridge across a remote wire.

142
00:09:05.269 --> 00:09:09.980
一开始我觉得这听起来并不难，然后当我进入
And I thought at first that sounds not that hard and then as I got into

143
00:09:09.980 --> 00:09:13.759
它的实施，我就像一坨屎，真的很难做到
the implementation of it, I was like holy crap, that's really hard to do

144
00:09:13.759 --> 00:09:17.500
因为为了让这些频道正常工作，在幕后有很多事情要做。
because there's a whole lot under the covers just to make these channels work.

145
00:09:17.500 --> 00:09:19.129
这不是一个容易的实现。
This is not an easy implementation.

146
00:09:20.539 --> 00:09:22.529
所以我推迟了好几个月
So I put it off for months and months and months and

147
00:09:22.529 --> 00:09:26.149
然后我说三个月前我说，我会抽出时间去尝试。
then I said three months ago I said, I'm going to get around to trying.

148
00:09:26.149 --> 00:09:32.029
在那一点上，我大约有30%的把握它甚至是可能的。
And at that point, I was about 30% sure that it was even possible.

149
00:09:32.029 --> 00:09:34.320
我说，好吧，为什么不呢？
I was like well, why not?

150
00:09:34.320 --> 00:09:38.259
让我们提议召开一次会议，看看我是否能做到这一点。
Let's propose a conference talk and see whether I can make it happen.

151
00:09:38.259 --> 00:09:40.830
如果不是，我会回到我的另一个谈话。
If not, I'll fall back on one of my other talks.

152
00:09:42.100 --> 00:09:43.049
所以我一直在努力
So I've been working on it for

153
00:09:43.049 --> 00:09:46.960
在过去的几个月里，我所有非常有限的空闲时间。
the last several months in all of my very limited free time.

154
00:09:46.960 --> 00:09:52.029
大约一周前，我收到了第一条要跨越的消息
And about a week ago, I got the first message to cross

155
00:09:52.029 --> 00:09:56.500
跨越进程屏障的线程屏障，而不是浏览器和服务器之间的线程屏障，
the thread barrier across the process barrier, not between browser and server,

156
00:09:56.500 --> 00:10:00.039
但现在我已经证明了我可以在这里做，我可以很容易地在网上做。
but now that I've proven that I can do it here, I can easily do it over the wire.

157
00:10:00.039 --> 00:10:03.500
当我开始的时候，我认为开发起来会容易得多，如果我可以
When I started which I thought would be a lot easier to develop is what if I could

158
00:10:03.500 --> 00:10:05.009
在浏览器和
do this between the browser and

159
00:10:05.009 --> 00:10:09.850
一个Web工作人员，有一个远程Web工作人员，我可以在其中旋转Go例程吗？
a Web Worker, have a remote web worker that I could spin up a Go routine in?

160
00:10:09.850 --> 00:10:11.629
如果我能在其中一个中做到这一点，
And if I could do it in one of them,

161
00:10:11.629 --> 00:10:16.379
然后我可以用10，000个独立的围棋例程启动10，000个Web Worker
then I could spin up 10,000 Web Workers with 10,000 independent Go routines and

162
00:10:16.379 --> 00:10:18.399
通过渠道与他们所有人沟通。
communicate with all of them through channels.

163
00:10:18.399 --> 00:10:19.970
所以我的概念证明是好的。
So my proof of concept was good.

164
00:10:19.970 --> 00:10:22.402
我可以用Go例程启动一个Web Worker
I could spin up a Web Worker with a Go routine and

165
00:10:22.402 --> 00:10:27.460
用Go例程启动浏览器，让它们阻塞通信。
spin up the browser with a Go routine and have them do blocking communication.

166
00:10:27.460 --> 00:10:31.470
我决定用来说明的是，我会让Web工作人员做一些
And what I decided to illustrate that with is, I would have the Web Worker do some

167
00:10:31.470 --> 00:10:36.240
阻塞活动，如运行FORE循环，一直到像1
blocking activity like run a fore loop all the way up to like 1

168
00:10:36.240 --> 00:10:40.179
万亿，这将需要几秒钟，这将阻止Web工作者和
trillion which would take several seconds, which would block the Web Worker and

169
00:10:40.179 --> 00:10:43.740
如果代码在浏览器中运行，它将阻塞浏览器页面。
if that code was running in a browser, it would block up the browser page.

170
00:10:43.740 --> 00:10:47.429
所以，我是否可以让这种情况在Web工作者中发生，而我的网页继续
So could I let that happen in a Web Worker while my web page continued to be

171
00:10:47.429 --> 00:10:51.509
交互，然后一旦Web工作者准备好采取和
interacting, and then as soon as the Web Worker was ready to take and

172
00:10:51.509 --> 00:10:54.309
发送一条信息，那么信息就会通过。
send a message, then the message would go through.

173
00:10:54.309 --> 00:10:59.750
这就是我对概念的证明，这就是网络。
So that was my proof of concept and this is networking.

174
00:10:59.750 --> 00:11:04.549
所以现在，Web工作者正在运行一个高达1万亿的循环，然后在那里，
So right now, the Web Worker is running a loop up to 1 trillion and then there,

175
00:11:04.549 --> 00:11:07.929
不管那个号码是什么，然后它就给我发了这个消息。
whatever that number is and then it sent me that message along.

176
00:11:07.929 --> 00:11:09.539
当它在后台运行时，
And while it was running in the background,

177
00:11:09.539 --> 00:11:14.543
我的浏览器仍然是完全可交互的。
my browser remains completely interactible.

178
00:11:15.700 --> 00:11:18.399
所以这看起来一点也不令人印象深刻，但我的天哪，
So that doesn't look impressive at all, but holy crap,

179
00:11:18.399 --> 00:11:19.889
是不是有很多工作要做！
was that a lot of work to get!

180
00:11:19.889 --> 00:11:22.860
我的意思是，我花了几个月的时间试图弄清楚如何让它发挥作用
I mean I've spent months trying to figure out how to get this to work and

181
00:11:22.860 --> 00:11:26.659
开发用于来回消息传递的协议，因为使用CSP，
developing the protocols for the back and forth messaging, because with CSP,

182
00:11:26.659 --> 00:11:28.980
你必须知道信息到达了另一边。
you have to know that the message got to the other side.

183
00:11:28.980 --> 00:11:33.250
所以必须涉及ACK，你让它知道而你不知道，
So there has to be an ACK involved, where you let it know and you don't know,

184
00:11:33.250 --> 00:11:34.429
当你发出信息时，
when you're sending a message out,

185
00:11:34.429 --> 00:11:37.429
你不知道是不是其他人在发送信息，也不知道顺序是什么。
you don't know if somebody else is sending a message in, and what's the sequencing.

186
00:11:37.429 --> 00:11:41.289
这项工作比我想象的要多得多，但我最终得到了概念的证明
It was a lot more work than I thought, but I finally got a proof of concept for

187
00:11:41.289 --> 00:11:44.759
使用JavaScript的远程CSP频道。
remote CSP channels with JavaScript.

188
00:11:44.759 --> 00:11:48.179
所以现在有了这个协议，您所要做的就是编写一个非常简单的
So now with that protocol in place, all you have to do is write a very simple

189
00:11:48.179 --> 00:11:53.169
Wrapper for Web Worker，我现在有了，为Cross Frame编写另一个
wrapper for Web Workers, which I now have, write another one for cross frame

190
00:11:53.169 --> 00:11:57.340
通信，编写另一个用于Web套接字与服务器的通信，
communications, write another one for web socket communication to a server,

191
00:11:57.340 --> 00:12:00.039
基本上任何你能想到的远程进程。
basically any remote process that you can dream up.

192
00:12:00.039 --> 00:12:05.509
现在可以使用通道来回发送CSP消息。
You can now use a channel to send CSP messages back and forth so.

193
00:12:05.509 --> 00:12:10.179
这就是我和CSP在一起的地方，我正在努力梦想做一些真正强大的事情
That's where I'm at with CSP, I'm trying to dream up doing really powerful stuff

194
00:12:10.179 --> 00:12:14.450
就像拥有真正远程的、真正独立的、真正线程化的进程，
like even having truly remote, truly independent, truly threaded processes,

195
00:12:14.450 --> 00:12:18.620
即使在Node上，Go也是那种喜欢的赢家
even on Node where Go is the one that kind of like wins

196
00:12:18.620 --> 00:12:21.875
在能够旋转出10，000个轻量级线程或其他方面。
in terms of being able to spin out 10,000 lightweight threads or whatever.

197
00:12:21.875 --> 00:12:26.940
为子进程创建一个适配器并不难
It's not gonna be hard at all to spin up an adapter for the child process and

198
00:12:26.940 --> 00:12:30.730
节点，所以我可以旋转10，000个子进程线程，
Node, so I'll be able to spin up 10,000 child process threads,

199
00:12:30.730 --> 00:12:34.360
非常轻量级，每个人都有自己的围棋程序
very lightweight and have each one of them with their own Go routine and

200
00:12:34.360 --> 00:12:38.299
将大量的工作分成一个非常流行的系统。
split up large amounts of work into a very highly current system.
