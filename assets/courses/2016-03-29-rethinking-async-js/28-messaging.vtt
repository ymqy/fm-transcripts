WEBVTT

1
00:00:00.000 --> 00:00:03.874
[音乐]
[MUSIC]

2
00:00:03.874 --> 00:00:05.376
&gt；&gt；Kyle：这会感觉很奇怪
&gt;&gt; Kyle: This is going to feel strange and

3
00:00:05.376 --> 00:00:09.439
对于那些以前没有使用过发电机的人来说，这很奇怪。
bizarre to those of you that haven't worked with generators before.

4
00:00:09.439 --> 00:00:12.669
所以，就像其他事情一样，我的建议并不是
So, just like everything else, what I'm suggesting to you is not

5
00:00:12.669 --> 00:00:15.599
五分钟后你将成为这个模式的专家。
in five minutes you're going to be an expert on this pattern.

6
00:00:15.599 --> 00:00:19.089
但我想告诉你，如果你真的相信我，
But I'm trying to suggest to you, if you trust me at all,

7
00:00:19.089 --> 00:00:22.839
相信我，这是你应该花大量时间思考的地方，而且
trust me that this is where you should spend a whole bunch of time thinking, and

8
00:00:22.839 --> 00:00:24.359
练习和阅读
practicing, and reading,

9
00:00:24.359 --> 00:00:28.699
因为它将改变我们所做的一切，使用异步编程。
because it's going to change everything that we do, with asynchronous programming.

10
00:00:28.699 --> 00:00:32.719
我100%相信这是我们语言最具革命性的变化之一。
I'm 100% convinced it's one of the most revolutionary changes to our language.

11
00:00:34.119 --> 00:00:36.369
这就是我们花时间思考的原因。
That's why we spend time thinking about it.

12
00:00:36.369 --> 00:00:37.240
好吧。
Okay.

13
00:00:37.240 --> 00:00:43.149
因此，如果我们可以在生成器运行时暂停它，它也是消息传递。
So, if we can pause a generator while it's running, it's also message passing.

14
00:00:44.340 --> 00:00:48.369
所以在这里，我不只是调用收益，而是用一个值来调用收益。
So here, I'm not just calling yield but I'm actually calling yield with a value.

15
00:00:48.369 --> 00:00:52.320
在前面的例子中，当我在产量表达式中没有显示任何值时，
In the previous case, when I showed no value in the yield expression,

16
00:00:52.320 --> 00:00:54.270
有人认为我的让步是不确定的。
it was assumed that I was yielding undefined.

17
00:00:54.270 --> 00:00:57.270
但在这里我得到的是实际值，如1、2和3，以及
But here I'm yielding actual values like 1, 2, and 3, and

18
00:00:57.270 --> 00:01:04.200
您注意到，当我调用product1时，我将控制权返回到第9行。
you notice that when I call yield 1, I return control back to line 9.

19
00:01:04.200 --> 00:01:08.950
通过返回值的方式.Next作为对象返回。
By way of returning a value .next returns as an object.

20
00:01:08.950 --> 00:01:10.200
上面有两个属性。
That has two properties on it.

21
00:01:10.200 --> 00:01:14.039
它有一个Value属性和所产生的值(如果有的话)。
It has a value property with the value that was yielded, if any.

22
00:01:14.039 --> 00:01:19.019
它有一个完成属性，告诉我们生成器是完成的是真还是假。
And it has a done property that tells us true or false is the generator complete.

23
00:01:20.439 --> 00:01:22.239
所以这就是我们得到价值的地方：1，完成：假。
So that's where we get value: 1, done: false.

24
00:01:23.590 --> 00:01:28.240
然后我们可以打电话，下一次马上或稍后再打。
And then we can call .next again right away or at some later time.

25
00:01:28.240 --> 00:01:34.280
我们将得到价值：2，完成：瀑布，我们想再次调用它，得到3。
And we're gonna get value: 2, done: falls, and we want to call it again and yield 3.

26
00:01:34.280 --> 00:01:39.450
在那一刻，它在视觉上看起来有点像生成器完成了，但是
At that moment, it kind of looks to you visually like the generator is done, but

27
00:01:39.450 --> 00:01:40.180
还没有真正完成。
it's not really done.

28
00:01:41.189 --> 00:01:42.450
这就是为什么我们仍然完成了：错误，
That's why we still get done: false,

29
00:01:42.450 --> 00:01:46.299
因为从技术上讲，它暂停在最后一个表达式上。
because technically it's paused on that last expression.

30
00:01:46.299 --> 00:01:48.280
即使在视觉上，我们可以看到发电机
Even though visually, we can look at the generator and

31
00:01:48.280 --> 00:01:52.229
假设它不会做任何其他事情，从技术上讲，它仍然处于暂停状态。
say it's not going to do anything else, technically it's still paused.

32
00:01:53.599 --> 00:01:56.289
从技术上讲，你仍然可以用它做一些事情。
Technically, you can still do something with it.

33
00:01:56.289 --> 00:01:59.930
所以这就是为什么第四个。下一个13号线
So that's why the fourth .next down there on line thirteen

34
00:01:59.930 --> 00:02:03.099
将恢复暂停行4的生成器。
would resume the generator of the pause line four.

35
00:02:03.099 --> 00:02:04.629
马上，就没有别的事可做了。
Immediately, there is nothing else to do.

36
00:02:04.629 --> 00:02:06.969
它会完成，它会完成。
It would finish, it would complete.

37
00:02:06.969 --> 00:02:10.759
然后我们会得到一个对象，它没有给我们任何价值，但是
And then we would get an object back that there was no value given to us but

38
00:02:10.759 --> 00:02:11.729
有一个完成：真的。
there was a done: true.

39
00:02:13.370 --> 00:02:14.620
那么这个值呢：undefined。
Now what about that value: undefined.

40
00:02:14.620 --> 00:02:16.569
你认为这是从哪里来的？
Where do you suppose that comes from?

41
00:02:17.710 --> 00:02:21.329
它的来源是在JavaScript中，所有没有返回值的函数
Where it comes from is that in JavaScript, all functions that don't have a return

42
00:02:21.329 --> 00:02:25.199
语句在末尾隐含未定义的返回。
statement imply a return undefined at the end.

43
00:02:25.199 --> 00:02:28.199
因此，在第四行半中有一个未定义的隐含回报。
So, there's an implied return undefined on line four and a half.

44
00:02:28.199 --> 00:02:31.430
如果我们选择不同的返回值，例如，
Had we chosen to do a different return value, like for example,

45
00:02:31.430 --> 00:02:36.210
返回4，我们将获得完成的价值：是的。
return four, we would have gotten value for done: true.

46
00:02:36.210 --> 00:02:39.639
在13号线。这有意义吗？
On line 13. Does that make sense?

47
00:02:39.639 --> 00:02:43.590
因此，在任何时候，当您从生成器返回时，都会立即完成
So, at any point when you do a return from a generator, you immediately complete

48
00:02:43.590 --> 00:02:46.680
生成器，并且您返回的任何内容都将作为值发送出去。
the generator, and whatever you've returned is sent out as the value.

49
00:02:47.810 --> 00:02:51.090
但是，如果你做了一个收益，值被发送出去，你得到了一个完成：FALSE。
But if you do a yield, the value is sent out and you get a done: false.

50
00:02:52.829 --> 00:02:53.460
是吗？
Yeah?

51
00:02:53.460 --> 00:02:58.120
&gt；&gt；Speaker 2：您可以迭代它，将每个作为集合执行a，并获得值和
&gt;&gt; Speaker 2: Can you iterate it, do a for each as a collection and get the value and

52
00:02:58.120 --> 00:03:01.159
东西一次移动一次下一个？
stuff moving one .next at a time?

53
00:03:01.159 --> 00:03:04.355
&GT；&GT；Kyle：对不起，也许可以问这个问题-
&gt;&gt; Kyle: I'm sorry, maybe ask the question-

54
00:03:04.355 --> 00:03:05.766
&gt；&gt；扬声器2：你正在做。接下来，
&gt;&gt; Speaker 2: You're doing it.next,

55
00:03:05.766 --> 00:03:06.990
你就得到了价值。
and you get the value.

56
00:03:06.990 --> 00:03:09.680
然后你做一个迭代器，接下来，你得到下一个值？
Then you do an iterator .next, you get the next value?

57
00:03:09.680 --> 00:03:10.340
凯尔：是的。&gt；&gt；扬声器2：相反，
&gt;&gt; Kyle: Yeah. &gt;&gt; Speaker 2: Instead,

58
00:03:10.340 --> 00:03:14.590
我们可以循环吗，像四个每个循环，就像一个集合？
can we loop through, like a four each loop, like a collection?

59
00:03:14.590 --> 00:03:17.120
&gt；&gt；Kyle：你能自动运行整个迭代器吗？
&gt;&gt; Kyle: Can you automatically run through a whole iterator?

60
00:03:17.120 --> 00:03:20.370
当然，这实际上什么都没有，不是关于发电机的。
Absolutely, that's actually got nothing, not specifically about generators.

61
00:03:20.370 --> 00:03:22.229
它可以是任何迭代器。
It's any iterator.

62
00:03:22.229 --> 00:03:24.020
可以通过循环运行。
Can be run through a loop.

63
00:03:24.020 --> 00:03:26.759
你可以像那样做你自己的四个眼圈。
You could do your own four eye loop like that.

64
00:03:26.759 --> 00:03:30.508
你可能在寻找完成的：真实的事情，
You could be looking for the done: true thing,

65
00:03:30.508 --> 00:03:34.520
就像查找done的while循环：true。
like a while loop looking for done: true.

66
00:03:34.520 --> 00:03:39.250
但ES6中增加了一种新的循环样式，专门用于
But there was a new looping style added to ES6, specifically for

67
00:03:39.250 --> 00:03:42.091
消耗迭代器，这是循环的四个。
consuming iterators, and it's the four of loop.

68
00:03:43.469 --> 00:03:46.770
所以，不是四个或四个结束，我们现在有一个四个循环。
So, instead of four or four end, we now have a four of loop.

69
00:03:46.770 --> 00:03:50.449
如果你给它一个迭代器，即使是来自生成器的迭代器，
And if you give it an iterator, even one from a generator,

70
00:03:50.449 --> 00:03:53.539
如果给它一个迭代器，它将运行迭代器直到完成。
if you give it an iterator, it will run the iterator to completion.

71
00:03:54.740 --> 00:03:57.689
并且它会自动查找Done：false以及所有这些内容。
And it automatically looks for the done: false and all that stuff.

72
00:03:57.689 --> 00:04:00.500
因此，如果您想使用迭代器，有一个循环语法。
So, if you want to consume an iterator there is a looping syntax for it.

73
00:04:00.500 --> 00:04:03.068
所以，这是一种非常同步的语法，它可以或者
So, that's a very synchronous syntax which may or

74
00:04:03.068 --> 00:04:05.288
可能不是你想要的发电机。
may not be what you want with the generator.

75
00:04:11.337 --> 00:04:12.073
&gt；&gt；Kyle：好的，那么
&gt;&gt; Kyle: All right, so

76
00:04:12.073 --> 00:04:15.960
这清楚地说明了消息是可以传递的。
this is clearly illustrating that messages can be passed out.

77
00:04:15.960 --> 00:04:19.750
但是，事实证明，这不仅是单向消息传递，而且实际上
But, it turns out that this is not only a one- way message passing, but actually

78
00:04:19.750 --> 00:04:24.209
它们在下一对中一起产生，以创建双向消息传递系统。
they yield in the next pair together to create a two-way message passing system.

79
00:04:24.209 --> 00:04:28.029
因此，我们不仅可以产生消息，而且当我们调用下一个方法时
So, not only can we yield messages out, but when we call the next method

80
00:04:28.029 --> 00:04:32.040
我们可以传递一条消息，然后该消息进入生成器。
we can pass a message in, and that message goes into the generator.

81
00:04:33.360 --> 00:04:37.670
我将为自己创建一个小帮手，以节省幻灯片上的空间。
I'm going to create a little helper for myself just to save space on the slides.

82
00:04:37.670 --> 00:04:41.649
不要太沉迷于这是什么，但它是围绕着一个生成器。
Don't get too wrapped up in what this is, but it's wrapping around a generator.

83
00:04:41.649 --> 00:04:45.500
您可以看到，在第2行，我正在执行生成器来生成迭代器。
You see on line 2, I'm executing my generator to produce an iterator.

84
00:04:45.500 --> 00:04:48.860
然后我返回一个函数，每次调用该函数时，
And then I'm returning a function that every time that function gets called,

85
00:04:48.860 --> 00:04:54.040
它将调用迭代器。下一步，传入任何参数并返回任何值OUT。
it's going to call the iterators.next pass in any arguments and return any value out.

86
00:04:54.040 --> 00:04:57.180
所以，我只是在结束内幕。接下来，一些有点
So, I'm just wrapping up the interator.next ,something that's a little

87
00:04:57.180 --> 00:05:00.230
更干净，更容易说明。
cleaner and easier to illustrate with.

88
00:05:00.230 --> 00:05:01.829
但是任何时候你看到这个的用法，
But any time you see the usage of this,

89
00:05:01.829 --> 00:05:04.997
你可以认为它只是在召唤。下一个在被子里，好吗？
you can just think it's just calling.next under the covers, okay?

90
00:05:06.798 --> 00:05:09.160
&gt；&gt；Kyle：所以这个小帮手。
&gt;&gt; Kyle: So this little helper.

91
00:05:09.160 --> 00:05:10.639
我要把我的发电机传给它
I'm gonna pass my generator to it,

92
00:05:10.639 --> 00:05:14.040
我所得到的将会是一个我称之为奔跑的东西。
and what I get back is going to be a thing I call run.

93
00:05:14.040 --> 00:05:15.560
因此，run是一个函数。
So, run is a function.

94
00:05:15.560 --> 00:05:18.230
每次我调用run，它就会调用下一个迭代器。
Every time I call run, it's calling the iterators next.

95
00:05:18.230 --> 00:05:20.850
所以每当你看到跑，这东西它下一个点。
So whenever you see run, this thing IT dot next.

96
00:05:22.810 --> 00:05:26.589
好的，所以我还没有在第1行的生成器中运行任何东西，但是
All right, so I haven't run anything in my generator on line 1, but

97
00:05:26.589 --> 00:05:30.079
我只是简单地设置了这个要执行的生成器。
I've simply set up this generator to be executed.

98
00:05:30.079 --> 00:05:33.959
在7号线上，我将呼叫第一轮。
And on line 7, I'm going to call the first run.

99
00:05:33.959 --> 00:05:36.500
这是我第一次打下一个电话，而且
That's the first I teed up next call, and

100
00:05:36.500 --> 00:05:39.689
它将把控制权转移到2号线。
it's going to transfer control up to line 2.

101
00:05:39.689 --> 00:05:44.100
现在第二行，它将开始执行var X=1+和
Now on line two, it's going to start to execute as a var X equals one plus and

102
00:05:44.100 --> 00:05:46.290
我看到了屈服的表情。
I see a yield expression.

103
00:05:47.509 --> 00:05:50.250
此时此刻，我无法完成这份声明。
I cannot complete this statement at this moment.

104
00:05:50.250 --> 00:05:53.180
所以，我真的要在中间暂停发电机
So, I'm literally going to pause the generator right in the middle of this

105
00:05:53.180 --> 00:05:58.319
声明，然后等别人恢复我的简历，好的。
statement, and wait for somebody to resume me, okay.

106
00:05:58.319 --> 00:06:02.290
因此，YERVER关键字将把控制权返回到第七行。
So, that yield keyword is going to return control to line seven.

107
00:06:02.290 --> 00:06:07.480
现在，返回的值是IT点下一个返回值，我们将在这里看到
Now, that value that came back the IT dot next return value that we would see here

108
00:06:07.480 --> 00:06:09.670
将是一个表示，
would be an object that says,

109
00:06:09.670 --> 00:06:14.139
值未定义，因为我们没有产生任何东西，Done：false。
value undefined because we didn't yield anything, done: false.

110
00:06:14.139 --> 00:06:15.523
大家都跟我一起吗？
Is everybody with me?

111
00:06:15.523 --> 00:06:17.420
值未定义，完成：FALSE。
Value undefined, done: false.

112
00:06:17.420 --> 00:06:20.355
如果我们做出了一些有价值的东西，无论我们的产出是什么
Had we yielded something that would have been value whatever we yielded and

113
00:06:20.355 --> 00:06:21.201
仍然完成：错误。
still done: false.

114
00:06:22.947 --> 00:06:26.053
&gt；&gt；Kyle：但我想在这里稍微调整一下你的大脑，
&gt;&gt; Kyle: But here's where I want to tweak your brain a little bit,

115
00:06:26.053 --> 00:06:29.682
因为这都是帮助你理解的视角，
because this is all about perspective that helps you understand,

116
00:06:29.682 --> 00:06:31.980
为您提供了一条理解这一点的途径。
gives you a path for understanding this.

117
00:06:33.199 --> 00:06:33.949
我要你做的是
What I want you to do is,

118
00:06:33.949 --> 00:06:37.319
我想让你思考的角度，而不是来自外部世界。
I want you to think about the perspective not from the outside world.

119
00:06:37.319 --> 00:06:39.620
因为外面的世界是我们通常会怎么想的。
Because the outside world is how we typically would think about it.

120
00:06:39.620 --> 00:06:42.800
我们考虑通过我们的运行调用来驱动这个发电机。
We think about driving this generator by our run calls.

121
00:06:42.800 --> 00:06:45.569
想让你从内部的角度来思考。
Want you to think about it from the inside perspective.

122
00:06:45.569 --> 00:06:50.090
从发电机里发生的事情来看，我也在线了，而且
From what's happening in the generator at the moment that I am online too ,and

123
00:06:50.090 --> 00:06:55.019
我遇到了一个关键的产量关键字在这个产量关键字是问一个问题。
I encounter a yield keyword essential in this yield keyword is asking a question.

124
00:06:56.250 --> 00:06:59.449
它是说，我需要一些价值在这里。
It is saying, I need some value here.

125
00:06:59.449 --> 00:07:03.209
这就像占位符说，我需要一些价值，但我还没有。
It's like a placeholder that says, I need some value and I don't have it yet.

126
00:07:04.399 --> 00:07:06.848
我要一直等到有人给我一个值。
I'm going to wait around until somebody gives me a value.

127
00:07:08.661 --> 00:07:11.319
&gt；&gt；Kyle：因为我显然需要一个值来结束语句。
&gt;&gt; Kyle: Because I obviously need a value to finish the statement.

128
00:07:11.319 --> 00:07:12.810
大家都同意吗？
Does everybody agree with that?

129
00:07:12.810 --> 00:07:15.029
好吧。所以，我只是暂停等待
Okay. So, I'm simply going to pause waiting for

130
00:07:15.029 --> 00:07:18.670
一个值，我会告诉你外面的世界，我问了一个问题。
a value, and I will tell you outside world that I've asked a question.

131
00:07:18.670 --> 00:07:21.029
我要求你给我一个价值。
I am asking for you to give me a value.

132
00:07:21.029 --> 00:07:23.639
在稍后的某个点，如第8行，
At some later point like line 8,

133
00:07:23.639 --> 00:07:27.560
我们将通过发回一个值来回答这个问题。
we're going to answer that question by sending a value back in.

134
00:07:27.560 --> 00:07:31.889
值为10的值将会进来，并将替换或
And that value 10, will come in and will replace or

135
00:07:31.889 --> 00:07:35.220
用该值完成生成表达式。
complete that yield expression with that value.

136
00:07:35.220 --> 00:07:37.560
所以，现在生成器可以继续并且
So, now the generator can resume and

137
00:07:37.560 --> 00:07:41.370
它可以完成它的工作，因为它说，谢谢你回答我的问题。
it can finish its work cuz it says, thank you for answering my question.

138
00:07:41.370 --> 00:07:44.120
我问题的答案是价值十。
The answer to my question was value ten.

139
00:07:44.120 --> 00:07:48.269
所以，现在我可以把十加一在一起，x是11。
So, now I can add ten and one together and x is 11.

140
00:07:48.269 --> 00:07:53.279
从内部的角度来看，这是你想要的关键视角。
From the inside perspective, that's the key perspective you wanna have.

141
00:07:53.279 --> 00:07:56.829
不要想太多外面发生的事情，因为外面的东西
Don't think so much about what's happening on the outside because the outside stuff

142
00:07:56.829 --> 00:07:59.579
最终会被埋葬在某个图书馆里。
is actually going to end up being buried away in some library.

143
00:07:59.579 --> 00:08:01.379
重要的是里面的东西。
It's the inside stuff that matters.

144
00:08:02.389 --> 00:08:04.639
这是发生在发电机内部的事情。
It's what's happening on the inside of the generator.

145
00:08:04.639 --> 00:08:06.250
我在问题。
I'm asking a question.

146
00:08:06.250 --> 00:08:08.000
现在，我在这里问了一个非常简单的问题。
Now, here I asked a very simple question.

147
00:08:08.000 --> 00:08:08.699
我刚说了让步。
I just said yield.

148
00:08:08.699 --> 00:08:09.930
我说给我一些价值。
I said give me some value.

149
00:08:09.930 --> 00:08:14.089
但是，如果我的问题就像是进行Ajax调用，又会怎样呢？
But what if my question was like making an AJAX call.

150
00:08:14.089 --> 00:08:16.379
我说我需要一个Ajax调用的响应。
And I said I need a response from an AJAX call.

151
00:08:16.379 --> 00:08:17.610
我不知道要花多长时间，
And I don't know how long it's going to take,

152
00:08:17.610 --> 00:08:20.579
但我会一直等着直到你给我回复。
but I'll just wait around until you give me a response.

153
00:08:21.689 --> 00:08:23.264
因此，我们可以生成一个Ajax调用。
So, we could have yielded an AJAX call.

154
00:08:23.264 --> 00:08:26.269
好吧。
Okay.

155
00:08:26.269 --> 00:08:29.439
因此，我们以值10的方式发回了一个答案。
So, we've sent an answer back in by way of value ten.

156
00:08:30.529 --> 00:08:32.720
X现在是11，我们去第三行。
X is now 11, we go to line three.

157
00:08:32.720 --> 00:08:37.299
我们开始执行一个加号，然后再加上另一个关键字。
We start executing like one plus and then another yield keyword.

158
00:08:37.299 --> 00:08:40.320
所以，我们在问另一个问题，这意味着我们要停下来
So, we're asking another question, which means we're gonna pause and

159
00:08:40.320 --> 00:08:43.230
等待答案，我们将把控制权返回到8号线。
wait for that answer, and we're gonna return control back to line eight.

160
00:08:43.230 --> 00:08:49.754
第八行将说，将有一个对象值，未定义完成：false。
Line eight is gonna say, is gonna have an object value, undefined done: false.

161
00:08:49.754 --> 00:08:52.779
就像七号线一样。
Just like line seven.

162
00:08:52.779 --> 00:08:56.850
稍后，我们将回答这个悬而未决的问题
At some later point, we're gonna answer that pending question

163
00:08:58.580 --> 00:09:01.450
通过传入值30，就像我们在第10行所做的那样。
by passing in the value 30 as we're doing on line ten.

164
00:09:02.720 --> 00:09:04.559
所以值30会回来
So that value 30 is going to come back and

165
00:09:04.559 --> 00:09:07.549
完成第三行等待的产出率表达式。
complete the yield expression that was waiting on line three.

166
00:09:08.850 --> 00:09:11.870
现在，30可以加到1上，现在y是31。
Now, 30 can be added to one, and now y is 31.

167
00:09:11.870 --> 00:09:14.539
X以前设置为11。
X was previously set to 11.

168
00:09:14.539 --> 00:09:18.059
而现在，即使它与所有这些箭头混淆，
And now, even though it's confusing with all these arrows,

169
00:09:18.059 --> 00:09:21.370
第四行将输出一个值。
line four is going to yield out a value.

170
00:09:21.370 --> 00:09:23.940
你看，有一个值，我计算x加y。
You see, there is a value that I compute x plus y.

171
00:09:23.940 --> 00:09:27.360
它立即被计算出来，也就是值42。
It gets computed right away which is the value 42.

172
00:09:27.360 --> 00:09:30.782
所以，这就是我提出的值为42的问题。
So, that's me asking the question with the value 42.

173
00:09:32.647 --> 00:09:37.004
&gt；&gt；Kyle：所以，我想发出值42，这就是为什么我可以说点值，
&gt;&gt; Kyle: So, I want to send out the value 42, and that's why I can say dot value,

174
00:09:37.004 --> 00:09:40.190
因为我得到了一个对象，表示值42完成：false。
cuz I got an object that said value 42 done: false.
