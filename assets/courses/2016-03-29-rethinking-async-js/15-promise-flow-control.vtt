WEBVTT

1
00:00:00.000 --> 00:00:03.888
[音乐]
[MUSIC]

2
00:00:03.888 --> 00:00:06.240
&gt；&gt；Kyle Simpson：所以这真的是一种不可反转的控制。
&gt;&gt; Kyle Simpson: So it really is an uninversion of control.

3
00:00:06.240 --> 00:00:07.839
现在有更多的承诺。
Now there's more to promises than that.

4
00:00:07.839 --> 00:00:12.750
这确实开始让我更深入地了解如何使用API？
And this does start to get a little bit more into how do I use the API?

5
00:00:12.750 --> 00:00:15.880
这通常是人们开始学习承诺的地方。
This is normally where people start learning promises.

6
00:00:15.880 --> 00:00:18.925
所以我没有忽略教你这部分，但是
So I'm not neglecting teaching you that part, but

7
00:00:18.925 --> 00:00:23.070
你会注意到，我首先为我们建立了一个概念基础。
you'll notice that I built us a foundation of concept first.

8
00:00:23.070 --> 00:00:25.089
现在你明白为什么承诺如此重要了。
Now that you understand why promises are so important.

9
00:00:25.089 --> 00:00:28.109
现在你明白了它们被设计的方式是故意的，
Now you understand that the way that they're designed is intentional,

10
00:00:28.109 --> 00:00:29.480
这是故意的。
it's on purpose.

11
00:00:29.480 --> 00:00:30.600
这是有原因的。
There's a reason for it.

12
00:00:30.600 --> 00:00:33.429
不仅仅是他们不知道如何设计东西。
It's not just that they don't know how to design stuff.

13
00:00:33.429 --> 00:00:35.909
所以，让我们谈谈他们在流量控制方面的做法。
So let's talk about what they do in terms of flow control.

14
00:00:35.909 --> 00:00:39.590
因为在我们的现代JavaScript程序中，很少会出现这种情况，
Because in our modern JavaScript programs, it's very rarely the case,

15
00:00:40.810 --> 00:00:45.600
我们只有一个步骤，如果是异步的话。
that we simply have a single step, if then asynchronously.

16
00:00:45.600 --> 00:00:47.859
有一个行动，然后当它结束时，我们继续前进。
There's one action and then when it's finished we move on.

17
00:00:49.289 --> 00:00:52.659
我们的大多数现代JavaScript程序，大多数正在收听的人，
Most of our modern JavaScript programs, most of you that are listening,

18
00:00:52.659 --> 00:00:55.799
可能正在编写更加复杂的系统。
are probably writing vastly more sophisticated systems.

19
00:00:57.390 --> 00:01:00.390
这两件事必须发生，无论何时结束，我都会继续做下去。
These two things have to happen, and whenever they finish, I move on to this.

20
00:01:00.390 --> 00:01:04.019
然后第三件事在这里爆炸，然后它又回来了。
And then this third thing fires off here, and then it comes back together.

21
00:01:04.019 --> 00:01:04.989
这就是所谓的流量控制。
That's called flow control.

22
00:01:06.400 --> 00:01:09.829
管理所有这些步骤通过程序的方式称为流控制。
Managing how all of those steps go through your program is called flow control.

23
00:01:10.879 --> 00:01:13.840
我们已经看到了流量控制，我们看到了它的隆隆声。
We've seen flow control already, we saw it with thunks.

24
00:01:13.840 --> 00:01:14.710
我们看到了回拨。
We saw it with callbacks.

25
00:01:15.903 --> 00:01:20.359
那么，通过流控制的方式提供的承诺是什么呢？
So what do promises offered by a way of flow control?

26
00:01:20.359 --> 00:01:24.049
他们怎么允许我们这样做，因为一个承诺根本上就是一个如果，
How do they allow us to do, cuz a promise fundamentally is just an if then,

27
00:01:24.049 --> 00:01:27.310
这是一个等待这个完成，然后做下一件事。
it's a wait for this to finish and then do the next thing.

28
00:01:27.310 --> 00:01:31.158
嗯，这对我们没有用，除非有某种方法来作出承诺
Well that's not useful to us unless there's some way to compose promises

29
00:01:31.158 --> 00:01:34.229
一起，我再次使用Word Compose。
together, I used word compose again.

30
00:01:34.229 --> 00:01:39.549
以一种管理我们的流量控制的方式共同撰写承诺。
Compose promises together in a way to to manage our flow control.

31
00:01:41.490 --> 00:01:44.879
所以回到我们友好有趣的伪代码。
So back to our friendly fun pseudocode.

32
00:01:44.879 --> 00:01:48.189
我希望能够做第一件事，然后当它完成后再做第二件事
I'd like to be able to do the first thing, and then when it's finished do the second

33
00:01:48.189 --> 00:01:50.840
事情，当它完成时，做第三件事，当它完成时，完成。
thing, and when it's finished do the third thing, and when it's finished complete.

34
00:01:50.840 --> 00:01:53.289
顺便说一句，如果这条链上有任何错误，
And by the way if there's any error anywhere along that chain,

35
00:01:53.289 --> 00:01:54.520
我想出错。
I'd like to fail out to an error.

36
00:01:56.789 --> 00:02:00.290
这是最基本的顺序流控制。
That's the most basic sense sequential flow control.

37
00:02:00.290 --> 00:02:03.150
承诺如何允许我们管理顺序流控制？
How do promises allow us to manage sequential flow control?

38
00:02:04.329 --> 00:02:05.450
关键特征。
The key characteristic.

39
00:02:06.939 --> 00:02:08.689
这是API设计决策。
It's an API design decision.

40
00:02:10.080 --> 00:02:10.900
连锁承诺。
Chaining promises.

41
00:02:10.900 --> 00:02:14.810
我有一个承诺代表了第一步。
I have one promise that represents the first step.

42
00:02:14.810 --> 00:02:16.539
另一个承诺代表第二步。
Another promise represents the second step.

43
00:02:16.539 --> 00:02:18.578
另一个承诺代表第三步。
Another promise represents the third step.

44
00:02:18.578 --> 00:02:22.270
在这条链上的任何地方，我会向你展示我们是如何把它链在一起的。
And in anywhere along that chain, and I'll show you how we chain on it together.

45
00:02:22.270 --> 00:02:25.159
但在链上的任何地方，如果发生错误，如果
But anywhere along that chain, if an error happens, if

46
00:02:25.159 --> 00:02:30.094
拒绝承诺发生了相反的情况，我们失败在拒绝链中。
a rejection of the promise happens rather, we fail out to the rejection chain.

47
00:02:30.094 --> 00:02:32.319
好吗？
Okay?

48
00:02:32.319 --> 00:02:33.789
所以连锁承诺，
So chaining promises,

49
00:02:33.789 --> 00:02:37.028
这是你的钥匙带走，以了解连锁承诺是如何发生的。
here's your key take away to understand how chaining promises happen.

50
00:02:38.189 --> 00:02:42.159
你把诺言A和诺言B连在一起的方式，
The way you take a promise A and chain it with a promise B,

51
00:02:42.159 --> 00:02:46.539
是不是在承诺A中，当您为承诺A设置事件处理程序时。
is that in the promise A, when you set up event handler for a promise A.

52
00:02:47.930 --> 00:02:51.500
在该处理程序中，您返回承诺B。
In that handler you return promise B.

53
00:02:52.860 --> 00:02:54.870
你还一个承诺，
You return one promise,

54
00:02:54.870 --> 00:02:59.289
您从第一个承诺的成功处理程序返回第二个承诺。
you return the second promise from the success handler of the first promise.

55
00:03:00.969 --> 00:03:03.750
然后神奇地把他们锁在一起。
And magically they chained together.

56
00:03:03.750 --> 00:03:06.580
它实际上并不是那么神奇，它实际上是当你实现承诺的时候
It's actually not so magical, it's actually when you implement promise

57
00:03:06.580 --> 00:03:09.780
图书馆，你会发现这实际上很复杂。
libraries, you find out it's actually pretty complicated to do.

58
00:03:09.780 --> 00:03:13.349
但尽管如此，它还是被设计成这样，我们会为你处理这项工作。
But nonetheless it's been designed to do that, we take care of that work for you.

59
00:03:13.349 --> 00:03:17.810
所以你需要做的就是制作一系列的链条，
So that all you need to do to make a series of chains,

60
00:03:17.810 --> 00:03:21.780
是从前一个成功处理程序返回一个承诺。
is to return one promise from the success handler of the previous one.

61
00:03:21.780 --> 00:03:23.789
所以做的第一件事就是给我们一个承诺。
So do first thing is gonna give us a promise.

62
00:03:23.789 --> 00:03:26.979
我们建立了一个当时的处理人，我们可以做任何我们需要做的事情。
We set up a then handler, we do whatever we need to do with that.

63
00:03:26.979 --> 00:03:29.939
然后我们调用dosecondThing。
And then we call doSecondThing.

64
00:03:29.939 --> 00:03:34.479
DosecondThing做出了另一个承诺，你会注意到我们做了，就是我们退货。
DoSecondThing makes another promise, and you'll notice that we do, is we return it.

65
00:03:34.479 --> 00:03:38.930
通过返回它，它意味着第五行上的.Then处理程序，这
And by returning it, it means that the .then handler on line five, which

66
00:03:38.930 --> 00:03:43.479
通常会在第二行的处理程序之后立即进行。
would normally have proceeded immediately after the handler from line two.

67
00:03:43.479 --> 00:03:45.578
它不再会立即进行。
It no longer is going to proceed immediately.

68
00:03:45.578 --> 00:03:49.331
相反，第五行的.Then处理程序将等待
Instead the .then handler from line five is going to wait for

69
00:03:49.331 --> 00:03:52.520
承诺再次出现在三号线上。
the promise returned on line three.

70
00:03:52.520 --> 00:03:54.069
它会把这些东西连在一起。
It's going to chain those things together.

71
00:03:54.069 --> 00:03:58.050
它在封面下将其交换出去，并为您处理所有的复杂性。
It swaps it out underneath the covers and handles all that complexity for you.

72
00:03:59.710 --> 00:04:04.599
因此，我们可以通过将承诺链接在一起来近似流控制。
So we can approximate a flow control by chaining our promises together.

73
00:04:04.599 --> 00:04:06.259
现在，这本可以用thunks和
Now, this could have been done with thunks and

74
00:04:06.259 --> 00:04:07.490
这可能是通过回调完成的。
it could have been done with callbacks.

75
00:04:07.490 --> 00:04:09.139
我们已经做过了。
We've done this already.

76
00:04:09.139 --> 00:04:11.810
已经有一组连续的步骤了，你知道这看起来像什么。
A sequential set of steps already, you know what that looks like.

77
00:04:11.810 --> 00:04:15.490
而且它经常会在一系列嵌套的回调中对自己进行模式。
And it often does pattern itself in a nested series of callbacks.

78
00:04:17.040 --> 00:04:20.240
所以人们对承诺感到兴奋的一件事就是当他们
So one of the big things that people get excited about with promises when they

79
00:04:20.240 --> 00:04:21.920
参见示例承诺代码，
see example promise code,

80
00:04:21.920 --> 00:04:25.019
他们对它不再嵌套的想法感到兴奋。
they get excited about this idea that it's not nested anymore.

81
00:04:25.019 --> 00:04:26.769
它被组织成一条垂直链。
It's organized into a vertical chain.

82
00:04:28.939 --> 00:04:30.819
这是承诺中最不重要的部分。
That is the least important part of promises.

83
00:04:32.420 --> 00:04:34.139
不是无关紧要。
Not unimportant.

84
00:04:34.139 --> 00:04:35.370
这是最不重要的部分。
It's the least important part.

85
00:04:36.790 --> 00:04:38.069
事实上我会对你说实话
In fact I'll be honest with you,

86
00:04:38.069 --> 00:04:40.159
当我第一次开始写承诺的时候，这就是我所做的一切。
when I first started writing promises this is all I did.

87
00:04:40.159 --> 00:04:43.850
我用承诺的链重写了我所有的异步代码，
I rewrote all of my asynchronous code using promised chains,

88
00:04:43.850 --> 00:04:47.800
我完全沉醉于这样一个想法：这是编写代码的正确方式。
I became completely drunk on the idea that that's the right way to write my code.

89
00:04:49.420 --> 00:04:53.569
几年后回想起来，我并不真的使用承诺链
And upon reflection a couple of years later, I don't really use promise chains

90
00:04:53.569 --> 00:04:58.090
再也没有了，这是最不重要的部分，我可以接受，也可以不管。
anymore, it's the least important part, I could take it or leave it.

91
00:04:59.090 --> 00:05:01.480
因为事实证明有更好的方法来进行流量控制，而且
Because it turns out there's better ways of doing flow control, and

92
00:05:01.480 --> 00:05:03.290
我们晚点再谈这个。
we're gonna get to that a little bit later.

93
00:05:03.290 --> 00:05:05.959
有比允诺链更好的方法来实现我们的流控制。
There's better ways of doing our flow control than a promise chain.

94
00:05:05.959 --> 00:05:08.569
承诺链比thunk嵌套系列更好吗？
Is a promise chain better than a thunk nested series?

95
00:05:08.569 --> 00:05:09.550
是啊。
Yep.

96
00:05:09.550 --> 00:05:12.769
它比我们称之为回调的东西好吗？
Is it better than whatever the crap we call the callback stuff

97
00:05:12.769 --> 00:05:13.589
我们之前写的？
that we wrote before?

98
00:05:13.589 --> 00:05:15.149
绝对的。
Absolutely.

99
00:05:15.149 --> 00:05:15.649
好多了。
It's better.

100
00:05:16.870 --> 00:05:18.519
但这不是最重要的部分。
But this isn't the important part.

101
00:05:19.660 --> 00:05:26.560
所以，给我不变性，安全和信任，我就可以离开了。
So, give me the immutability and the safety and the trust, and I could leave.

102
00:05:26.560 --> 00:05:30.550
我可以接受或离开流量控制，承诺的链条。
I could take or leave the flow control, the chaining of promises.

103
00:05:30.550 --> 00:05:33.000
现在，如果我不教你它们是如何工作的，那我就是失职了。
Now, I'd be remiss if I didn't teach you how they work.

104
00:05:33.000 --> 00:05:35.540
所以我们要花一点时间来理解承诺的链接。
So we are gonna spend a little bit of time understanding promised chaining.

105
00:05:35.540 --> 00:05:38.569
但我只想让你知道它在整个范围内的位置
But I just want you to know where it sits within the whole scope and

106
00:05:38.569 --> 00:05:39.862
我们正在谈论的计划。
scheme of what we're talking about.

107
00:05:39.862 --> 00:05:41.550
你需要理解它
You're gonna need to understand it,

108
00:05:41.550 --> 00:05:43.730
因为你要写很多框架代码。
cuz you're gonna write a lot of framework code.

109
00:05:43.730 --> 00:05:45.588
有很多角度和反应，
There's a lot of angulars and reacts,

110
00:05:45.588 --> 00:05:48.480
以及所有将使用承诺链的人。
and all that are out there that are gonna use promise chains.

111
00:05:48.480 --> 00:05:50.939
但我想让你记住在你的脑海里。
But I want you to remember in the back of your head.

112
00:05:50.939 --> 00:05:53.175
为什么使用这些承诺是如此重要。
Why using those promises is so important.

113
00:05:53.175 --> 00:05:56.110
它真的与链条无关。
It really has nothing to do with the chaining stuff.

114
00:05:56.110 --> 00:05:56.610
好吗？
Okay?

115
00:05:58.560 --> 00:06:01.810
这是另一个例子，这个例子使用延迟。
Here's another example, this one is using delay.

116
00:06:01.810 --> 00:06:05.579
所以我们实际上是根据时间延迟的，你可以用它来
So we're actually delaying based upon times, and you could use that for

117
00:06:05.579 --> 00:06:07.146
例如，动画链。
an animation chain for example.

118
00:06:07.146 --> 00:06:10.199
人们已经写了延迟的动画，当然，
People have written animations with delays, and of course,

119
00:06:10.199 --> 00:06:11.230
工作方式完全相同。
works exactly the same way.

120
00:06:13.370 --> 00:06:16.529
&GT；&GT；凯尔·辛普森：回到整个计算生命意义的事情。
&gt;&gt; Kyle Simpson: Back to that whole calculating the meaning of life thing.

121
00:06:16.529 --> 00:06:19.254
这里是生命的意义表现为一个许诺的链条。
Here is the meaning of life represented as a promise chain.

122
00:06:19.254 --> 00:06:23.069
GetData(10)返回承诺
GetData(10) returns a promise

123
00:06:23.069 --> 00:06:26.889
从现在开始的1000毫秒将解决承诺。
that 1000 milliseconds from now will resolve the promise.

124
00:06:26.889 --> 00:06:29.300
你会注意到承诺不仅仅是关于if then，而是
And you'll notice that promises are not just about an if then, but

125
00:06:29.300 --> 00:06:31.435
它们也是关于消息传递的。
they are about message passing as well.

126
00:06:31.435 --> 00:06:33.379
因此当getData(10)完成时，
So when getData(10) finishes,

127
00:06:33.379 --> 00:06:36.180
它将数据传递到承诺链中的下一步。
it passes that data along to the next step in the promise chain.

128
00:06:36.180 --> 00:06:37.769
我们把它放在1号。
And we get it in num1.

129
00:06:37.769 --> 00:06:41.980
然后当getData(30)从现在开始结束1000毫秒时，
And then when getData(30) finishes a 1000 milliseconds from now,

130
00:06:41.980 --> 00:06:44.029
使用值30调用num2。
num2 is called with the value 30.

131
00:06:44.029 --> 00:06:48.310
然后，当这个承诺解决时，答案就是这个值。
And then when that promise resolves, the answer is given that value.

132
00:06:49.420 --> 00:06:54.029
因此允诺链确实从一步到一步向下传播数据，
So the promise chain does propagate data down from step to step to step,

133
00:06:54.029 --> 00:06:56.189
这是一个非常重要的强大的东西。
which is a really important powerful thing.

134
00:06:56.189 --> 00:06:59.273
承诺不仅表示流控制，而且
Promises not only represent flow control, but

135
00:06:59.273 --> 00:07:02.750
它们也代表通过我们步骤的数据流。
they are also represent data flow through our steps.
