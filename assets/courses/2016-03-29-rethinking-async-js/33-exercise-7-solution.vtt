WEBVTT

1
00:00:00.000 --> 00:00:04.152
[音乐]
[MUSIC]

2
00:00:04.152 --> 00:00:09.148
&gt；&gt；Kyle：让我们谈谈如何使用生成器来解决我们的运行示例
&gt;&gt; Kyle: Let's talk about how to use a generator to solve our running example of

3
00:00:09.148 --> 00:00:11.529
并行文件尽快渲染。
parallel files ASAP rendering.

4
00:00:13.230 --> 00:00:16.250
首先，这个get file函数当前是
First thing this get file function is currently

5
00:00:16.250 --> 00:00:20.109
给你一个ASQ返回的能力。
given to you with an ASQ returning capability.

6
00:00:21.309 --> 00:00:24.510
如果你回报一个承诺，同样的事情可能会发生。
Exactly the same thing could happen if you return a Promise.

7
00:00:24.510 --> 00:00:28.780
所以你没有理由在这里做异步，序列。
So there's no reason you have to do asynquence, sequences, here.

8
00:00:28.780 --> 00:00:32.979
因为我提供给你的跑步者能够理解承诺
Because the runner that I've provided you is capable of understanding Promises

9
00:00:32.979 --> 00:00:35.219
和序列一样好。
equally well with sequences.

10
00:00:35.219 --> 00:00:38.100
我刚开始在那里，因为那是我们去过的地方
I just started out there because that's the place that we were

11
00:00:38.100 --> 00:00:39.619
在另一个练习结束时。
at the end of the other exercise.

12
00:00:39.619 --> 00:00:42.450
但并不要求这只是一个序列。
But there is no requirement that this is a sequence only.

13
00:00:42.450 --> 00:00:48.719
[咳嗽]好的，我们要做asq().runner。
[COUGH] Okay, so we're gonna do ASQ().runner.

14
00:00:48.719 --> 00:00:52.049
记住我要把这个括号放在这里。
Remember I gotta put this parentheses on here.

15
00:00:52.049 --> 00:00:55.179
你必须开始一个序列，因为这是一个序列的方法
You have to start a sequence cuz this is a method of a sequence rather

16
00:00:55.179 --> 00:00:56.149
而不是静态函数。
than a static function.

17
00:00:58.479 --> 00:01:03.070
我将通过它&gt；&gt；Kyle：一个发电机
And I'm gonna pass it &gt;&gt; Kyle: A generator which

18
00:01:03.070 --> 00:01:05.902
我现在给梅恩打电话。
I'll call main for now.

19
00:01:10.832 --> 00:01:12.700
&gt；&gt；Kyle：这是我的基本设置。
&gt;&gt; Kyle: That's my basic set up.

20
00:01:13.969 --> 00:01:18.299
如果你在这节课结束后再也不用异步了，你就去了
If you ended up after this class never using asynquence again and you went and

21
00:01:18.299 --> 00:01:21.010
你用了联合公用事业猜猜你要做什么。
you used the co utility guess what you're gonna do.

22
00:01:21.010 --> 00:01:25.433
你要用co替换那个部件，如果你最终使用了q库
You gonna replace that part with co and if you ended up using the Q library

23
00:01:25.433 --> 00:01:28.918
你要把那部分换成Q.spawn，好吗？
you're gonna replace that part with Q.spawn, okay?

24
00:01:28.918 --> 00:01:33.219
所以他们每个人都有相同的效用。
So every one of them has the same utility on it.

25
00:01:33.219 --> 00:01:36.903
我在这里教你的所有东西都不是异步特定的。
All the stuff that I'm teaching you here is not asynquence specific.

26
00:01:38.780 --> 00:01:45.462
好的，现在我们的实用程序中，我们需要调用getFile函数并
All right, now inside of our utility, we need to call the getFile function and

27
00:01:45.462 --> 00:01:49.849
当它回应我们时，我们需要把它打印出来。
when it responds to us then we need to print it out.

28
00:01:49.849 --> 00:01:54.527
所以我们可以说，text1=收益率
So we could say, text1 = yield

29
00:01:54.527 --> 00:01:59.037
getFile(“file1”)；以及
getFile("file1"); and

30
00:01:59.037 --> 00:02:03.206
然后输出(Text1)；。
then output(text1);.

31
00:02:03.206 --> 00:02:07.878
然后我们可以说text2=产量
And then we could say text2 = yield

32
00:02:07.878 --> 00:02:15.057
getFile(“File2”)；和output(Text2)；。
getFile("file2"); and output(text2);.

33
00:02:15.057 --> 00:02:22.795
然后text3=生成getFile(“file3”)；以及
And then text3 = yield getFile("file3"); and

34
00:02:22.795 --> 00:02:26.326
输出(Text3)，以及
output(text3), and

35
00:02:26.326 --> 00:02:32.393
然后输出(“完成！”)，好吗？
then output("Complete!"), okay?

36
00:02:32.393 --> 00:02:33.449
我们可以这么做。
We could do that.

37
00:02:35.305 --> 00:02:38.449
各位，在我们回答这是不是完全正确之前
Does everybody, before we answer whether or not this is fully correct or

38
00:02:38.449 --> 00:02:40.569
正确的方式，每个人都看到它是如何工作的吗？
the right way, does everybody see how that would work?

39
00:02:41.710 --> 00:02:42.750
我们要等
We're going to wait for

40
00:02:42.750 --> 00:02:45.360
在此请求完成之前分配的text1。
text1 to get assigned until after this request finishes.

41
00:02:45.360 --> 00:02:49.000
这就是YERENCE关键字在这里给我们的结果。
So that's what the yield keyword is giving us here.

42
00:02:49.000 --> 00:02:51.699
我们在这个Ajax调用上让步。
We're yielding on this Ajax call.

43
00:02:52.840 --> 00:02:56.954
这是一个承诺，所以我们放弃了跑步者的承诺
This is a Promise, so we're yielding out the Promise the runner in

44
00:02:56.954 --> 00:02:59.870
Asynquence知道如何处理该序列的承诺
asynquence knows what to do with that Promise of that sequence and

45
00:02:59.870 --> 00:03:03.509
它等待简历并把数据还给我们，好吗？
it waits resumes and gives us the data back, okay?

46
00:03:03.509 --> 00:03:05.967
但现在，有人发现这个问题了吗？
But now, does anybody spot a problem with this?

47
00:03:05.967 --> 00:03:08.969
&gt；&gt；扬声器2：这不是一个请求，如果它-&gt；&gt；Kyle：完全正确，
&gt;&gt; Speaker 2: It's not a request if it- &gt;&gt; Kyle: Exactly,

48
00:03:08.969 --> 00:03:12.879
你看，我们甚至在这个完成之前都不会叫这个
see we're not even calling this one until after this one finishes

49
00:03:12.879 --> 00:03:15.179
有违反我们平行原则的权利。
have violates our in parallel principle right.

50
00:03:16.379 --> 00:03:21.229
所以，如果你想在生成器中做顺序运算，这是相当容易的。
So, if you want to do sequentiality in generators, it's pretty easy.

51
00:03:21.229 --> 00:03:24.939
你只需将一个函数调用放在一个产量之后，它将是连续的。
You just put a function call after a yield, and it's going to be sequential.

52
00:03:24.939 --> 00:03:28.939
但是如果你想做并行的事情，你必须一直这样
But if you wanna do things in parallel, you have to be ever so

53
00:03:28.939 --> 00:03:29.960
稍微聪明一点。
slightly more clever.

54
00:03:32.409 --> 00:03:33.319
所以我们要这么做
So here's what we're gonna do.

55
00:03:34.840 --> 00:03:37.723
我将接受getFile调用并将其移动到这里。
I'm going to take that getFile call and move it up here.

56
00:03:43.512 --> 00:03:45.909
&GT；&GT；Kyle：我要接那个电话。
&gt;&gt; Kyle: And I'm gonna take that call.

57
00:03:47.289 --> 00:03:48.490
我要把它移到这里。
And I'm going to move it here.

58
00:03:49.889 --> 00:03:52.868
你会注意到，我没有在这些呼叫中放入YERENCE关键字，
And you'll notice that I'm not putting the yield keyword in those calls,

59
00:03:54.920 --> 00:03:55.879
那是故意的。
that's on purpose.

60
00:04:00.469 --> 00:04:02.909
所以现在，如果我同时要求他们三个人，
So now, if I requested all three of them in parallel,

61
00:04:02.909 --> 00:04:07.324
大家都看到了吗，一整天都是一样的，好吗？
does everybody see that, exactly the same as it's been all day long, okay?

62
00:04:07.324 --> 00:04:11.163
现在我已经收到了那些getFile调用，我不再需要那些了。
Well now that I've got those getFile calls, I don't need those anymore.

63
00:04:11.163 --> 00:04:13.395
那我要用什么来代替他们呢？
So what am I gonna replace them with?

64
00:04:13.395 --> 00:04:18.653
我会用承诺代替他们，好吗？
I'm gonna replace them with the Promise, all right?

65
00:04:25.086 --> 00:04:28.999
&gt；&gt；kyle：所以现在我们要求平行排序他们的输出。
&gt;&gt; Kyle: So now we have request in parallel sequencing their output.

66
00:04:35.562 --> 00:04:36.920
&GT；&GT；Kyle：每个人都看到我是怎么做到的吗？
&gt;&gt; Kyle: Does everybody see how I did that?

67
00:04:39.110 --> 00:04:40.098
因为承诺，他们做什么？
Cuz the promises, what do they do?

68
00:04:40.098 --> 00:04:43.800
他们最基本的事情是什么，甚至是敲击，他们做什么？
What is their most fundamental thing, even thumps, what do they do?

69
00:04:45.529 --> 00:04:46.840
它们消除了时间状态。
They eliminate the time state.

70
00:04:48.120 --> 00:04:50.870
所以这些什么时候能相对完成并不重要，
So it doesn't matter when when these are going to relatively finish,

71
00:04:50.870 --> 00:04:54.649
我们将根据我们编写产量代码的方式对他们的响应进行排序。
we're going to sequence their responses based upon how we write the yield code.

72
00:04:56.569 --> 00:04:58.584
&gt；&gt；扬声器3：不是将产量p1分配给文本1，
&gt;&gt; Speaker 3: Instead of assigning the yield p1 to text1,

73
00:04:58.584 --> 00:05:01.839
你能不能说输出-&gt；&gt；Kyle：我马上就到了。
could you just say output- &gt;&gt; Kyle: I'm about to get there.

74
00:05:01.839 --> 00:05:05.829
我只是想确保每个人都明白这部分，好吗？
I'm just asking to make sure everybody understands this part, okay?

75
00:05:05.829 --> 00:05:07.790
有没有人理解这部分有困难？
Is there anybody that having trouble understanding this part?

76
00:05:10.300 --> 00:05:15.410
好的，现在就像你刚才说的，我把这个赋值给一个变量，然后
All right, so now exactly as you just said, I'm assigning this to a variable and

77
00:05:15.410 --> 00:05:17.230
然后立即打印变量。
then immediately printing the variable.

78
00:05:17.230 --> 00:05:17.908
为什么我需要变量。
Why do I need the variable.

79
00:05:17.908 --> 00:05:24.521
为什么不直接把这个收益率p1放在那里，把那条线去掉。
Why not just take this yield p1 and put it right there and take that line out.

80
00:05:24.521 --> 00:05:31.733
把这个产额p2放在那里，去掉那些线。
And take this yield p2 and put it right there and take those lines out.

81
00:05:31.733 --> 00:05:38.596
然后取这个产额p3，把它放在那里，去掉那些线。
And take this yield p3 and put it right there and take those lines out.

82
00:05:42.975 --> 00:05:43.860
&GT；&GT；Kyle：多酷啊？
&gt;&gt; Kyle: How cool is that?

83
00:05:45.470 --> 00:05:50.810
将其与我们从起点开始逐步构建的内容进行比较
Compare that to what we've progressively been building from where we started

84
00:05:50.810 --> 00:05:54.649
这个研讨会的开始就是那些荒谬的回电噩梦。
the beginning of this workshop with all that ridiculous callback nightmare.

85
00:05:54.649 --> 00:06:00.250
然后在承诺，在映射和减少，在不同步中砰的一声。
Then thunks in Promises, in map and reduce, in asynquence.

86
00:06:00.250 --> 00:06:02.240
我们变得越来越好。
We got better and better and better.

87
00:06:02.240 --> 00:06:05.290
但是你们中有多少人觉得我们已经达到了很大程度上
But how many of you feel like we've arrived at something a whole lot

88
00:06:05.290 --> 00:06:08.339
比我们开始的地方好，对吧？
better than where we started, right?

89
00:06:08.339 --> 00:06:10.620
没有任何新功能。
No new functionality whatsoever.

90
00:06:11.990 --> 00:06:13.860
只是一个完全不同的
Just an entirely different and

91
00:06:13.860 --> 00:06:18.680
表达相同代码的更好方式，这有什么关系呢？
better way of expressing the same code, why does that matter?

92
00:06:18.680 --> 00:06:20.370
因为我们的代码是一种交流形式。
Because our code is a form of communication.

93
00:06:20.370 --> 00:06:23.654
我们不仅需要与其他团队成员沟通，还需要
We need to communicate not only with our other team members but

94
00:06:23.654 --> 00:06:26.569
关于代码应该做什么的未来的自我。
with our future selves of what the code supposed to do.

95
00:06:28.089 --> 00:06:29.290
这更有表现力。
This is more expressive.

96
00:06:29.290 --> 00:06:32.659
它更容易理解，更易读，更容易学习。
It's more understandable, it's more readable, it's more learnable.

97
00:06:35.480 --> 00:06:39.021
考虑到像这样编写代码的能力，我不能理解我是如何使用它的
Given the ability to write code like that I cannot understand how I spent so

98
00:06:39.021 --> 00:06:40.973
很多年都在写其他的废话。
many years writing all that other crap.

99
00:06:43.874 --> 00:06:45.276
&gt；&gt；Kyle：我希望我可以回去
&gt;&gt; Kyle: I wish I could go back and

100
00:06:45.276 --> 00:06:48.300
修复我编写的所有其他不好的代码片段。
fix all those other bad pieces of code that I wrote.

101
00:06:51.050 --> 00:06:52.500
关于练习七有问题吗？
Any questions about exercise seven?

102
00:06:56.470 --> 00:06:58.519
这里没有其他魔法。
There's no other magic here.

103
00:06:59.870 --> 00:07:03.910
我要挑战你回去
I'm going to challenge you to go back and

104
00:07:03.910 --> 00:07:08.230
重新阅读幻灯片，并重试练习。
reread through the slides, and retry the exercises.

105
00:07:08.230 --> 00:07:10.430
但它真的就像它看起来那样简单。
But it really is as simple as it looks right there.

106
00:07:12.470 --> 00:07:16.500
这真的很简单，就像问我自己，我需要一些并行发生的事情吗？
It really is as simple as asking myself, do I need something to happen in parallel?

107
00:07:16.500 --> 00:07:19.829
如果是这样的话，将这些东西存储到中间承诺中，然后
If so, store those things into intermediate Promises and

108
00:07:19.829 --> 00:07:21.810
然后对他们的反应进行排序。
then sequence their responses.

109
00:07:21.810 --> 00:07:24.910
我需要让它们按顺序发生吗？
Do I need to have them happen sequentially?

110
00:07:24.910 --> 00:07:27.850
确保他们出现在产量关键字之后，就是这样。
Make sure they show up after yield keywords, that's it.

111
00:07:29.399 --> 00:07:34.019
如果你需要更高层次的抽象
And if you need higher levels of abstraction like some

112
00:07:34.019 --> 00:07:38.430
我们和Promises谈过的那些抽象概念，在所有或其他类似的事情上。
of those abstractions we talked about with Promise.at all or other things like that.

113
00:07:38.430 --> 00:07:42.269
猜猜你有什么机会得到所有的东西这些只是承诺。
Guess what you have access to all that stuff these are just Promises.

114
00:07:42.269 --> 00:07:45.159
因此，您可以在以下任一选项中使用promis.all和promis.raise
So you can use promise.all and promise.raise in any of

115
00:07:45.159 --> 00:07:49.730
这些其他抽象是必要的，因为它们都只是产生承诺。
those other abstractions as necessary because they all just produce promises.

116
00:07:49.730 --> 00:07:51.639
所以你可以做一个承诺。所有的。
So you could do a yield promised.all.

117
00:07:52.829 --> 00:07:55.980
如果您需要在进行下一步之前等待所有三个步骤都完成，
If you needed to wait on all three to finish before moving on to the next step,

118
00:07:55.980 --> 00:07:57.250
只要放弃承诺就行了。
just yield promised.all.

119
00:07:58.670 --> 00:08:01.790
如果你只需要听一个或三个来完成
If you need to only listen for one or three to finish and

120
00:08:01.790 --> 00:08:04.430
你不关心哪个先发生，答应。提高。
you don't care which one happens first, yield promised.raise.

121
00:08:05.560 --> 00:08:09.029
或者其他几十个抽象概念中的任何一个。
Or any of the other dozens of abstractions that are out there.

122
00:08:09.029 --> 00:08:11.963
这是将承诺编入生成器模式的另一个好处，
That's another benefit of weaving Promises into the generator patterns,

123
00:08:11.963 --> 00:08:14.264
如果我们需要的话，我们可以进入所有的障碍物。
that we have access to all those obstructions if we need it.

124
00:08:16.502 --> 00:08:19.764
&gt；&gt；Kyle：异步编程中的任何复杂级别
&gt;&gt; Kyle: Any level of complexity that you have in asynchronous programming

125
00:08:19.764 --> 00:08:21.170
可以编织成款式。
can be woven into the style.

126
00:08:24.379 --> 00:08:27.168
&gt；&gt；Kyle：但是除非你练习，否则你不会到达那里，所以
&gt;&gt; Kyle: But you're not going to get there unless you practice this, so

127
00:08:27.168 --> 00:08:30.428
我要挑战你不要让这是你最后一次看到它，
I'm going to challenge you don't let this be the last time you look at it,

128
00:08:30.428 --> 00:08:34.679
你走开，你喜欢，这很酷，但我仍然会做所有的旧东西。
you walk away and you like, that's cool but I'm still gonna do all the old stuff.

129
00:08:34.679 --> 00:08:36.519
是时候升级我们的游戏了。
It's time to up our game.

130
00:08:36.519 --> 00:08:41.460
是时候练习了，试着让我们的大脑围绕着这种新的风格。
It's time to practice and try to get our brains wrap around this new style.

131
00:08:41.460 --> 00:08:44.629
我向你保证，你的团队成员和你未来的自我
I promise you, your team members and your future self are gonna

132
00:08:44.629 --> 00:08:48.399
感谢您在使代码更合理方面付出的更多努力。
thank you the more effort you put in making your code more reasonable.

133
00:08:52.509 --> 00:08:55.080
好的，还有关于发电机和承诺的问题吗。
Okay, any more questions about generators and Promises.

134
00:08:56.990 --> 00:08:57.720
我们感觉如何
How are we feeling so

135
00:08:57.720 --> 00:09:00.139
感觉你的大脑开始有点糊涂了。
far feeling like your brains are starting get a little bit mush.

136
00:09:01.669 --> 00:09:05.190
好的，两个方向都能看到一些。
Okay, see a few in both directions.

137
00:09:05.190 --> 00:09:07.955
是的，你可能需要更多的咖啡因，这很酷，明白了。
Yeah you might need a little bit more caffeine that's cool, got it.

138
00:09:07.955 --> 00:09:10.549
我们要休息一下。
We're gonna take a break.

139
00:09:10.549 --> 00:09:14.534
所以，去给你自己的咖啡因，你的怪物饮料或其他什么东西充电吧。
So go get yourself a recharge of your caffeine your monster drink or whatever.

140
00:09:14.534 --> 00:09:17.370
&gt；&gt；扬声器2：[笑]&gt；&gt；Kyle：因为当我们回来的时候
&gt;&gt; Speaker 2: [LAUGH] &gt;&gt; Kyle: Because when we come back

141
00:09:18.500 --> 00:09:21.809
我们要吃红色的药丸，再往下走更远的兔子洞。
we're going to take the red pill and go even further down the rabbit hole.
