WEBVTT

1
00:00:00.000 --> 00:00:03.708
[音乐]
[MUSIC]

2
00:00:03.708 --> 00:00:07.698
&gt；&gt；Kyle Simpson：所以我要开始练习5和
&gt;&gt; Kyle Simpson: So I'm going to open exercise 5 and

3
00:00:07.698 --> 00:00:15.811
然后我要分裂我的观点。&gt；&gt；Kyle Simpson：以及
then I'm going to split my view. &gt;&gt; Kyle Simpson: And

4
00:00:15.811 --> 00:00:20.403
我要打开固定在侧面的练习3
I'm going to open exercise 3 fixed on the side so

5
00:00:20.403 --> 00:00:25.903
我们可以比较这两个，实际上是相反的。
that we can compare these two, actually do that reverse.

6
00:00:29.440 --> 00:00:32.840
所以我们要试着做一个并排的比较
So we're going to try to do a side by side comparison of what we were

7
00:00:32.840 --> 00:00:35.899
我们是如何解决承诺的，我们将如何解决异步问题
how we were solving Promises with how we're gonna solve it with asynquence

8
00:00:35.899 --> 00:00:40.420
因为练习的目的是向你展示相似性和
because the purpose of the exercise that is to show you the similarities and

9
00:00:40.420 --> 00:00:45.874
炫耀一下异步是如何改善的。
show off a little bit of how asynquence can improve.

10
00:00:45.874 --> 00:00:51.850
好的，首先我们有getFile函数。
Okay, so first of all we have the getFile function.

11
00:00:51.850 --> 00:00:55.579
在左边，你可以看到我们正在创造一个承诺。
And on the left you can see that we're creating a Promise.

12
00:00:55.579 --> 00:01:00.119
所以在右边，我们想做一些非常类似的事情，但只是一个步骤序列
So on the right we want to do something very similar but a single step sequence

13
00:01:00.119 --> 00:01:04.390
和承诺是一样的，在概念上大致是一样的。
is the same thing as a Promise, roughly conceptually the same thing.

14
00:01:04.390 --> 00:01:09.135
所以要创建一个单步异步，我们将调用ASQ，
So to create a single step asynquence, we're gonna make call ASQ,

15
00:01:09.135 --> 00:01:13.798
函数ASQ，它接收我们需要调用的回调
the function ASQ, which receives a callback that we need to call so

16
00:01:13.798 --> 00:01:18.813
这很像我们在这里获得的Resolve回调。
that's much like the resolve callback that we're getting over here.

17
00:01:18.813 --> 00:01:22.721
让我稍微缩小一下
Let me zoom out just slightly so

18
00:01:22.721 --> 00:01:29.069
一次看到更多更容易，好吗？
it's a little easier to see more at a time, okay?

19
00:01:29.069 --> 00:01:32.259
我们仍然要调用虚假的Ajax调用。
And we're still going to call the fake Ajax call.

20
00:01:34.189 --> 00:01:37.709
有了文件URL，我们将传入Done而不是Resolve。
With the file URL in we're gonna pass in done instead of resolve.

21
00:01:39.650 --> 00:01:43.270
所以这就是我们要做的所有事情，使一个步骤不同步
So that's all we have to do to make a single step asynquence

22
00:01:43.270 --> 00:01:49.210
呼叫，以最传统的方式。
call, in the most traditional way possible.

23
00:01:49.210 --> 00:01:52.180
你会注意到这和承诺基本上是一样的
And you'll notice that it's basically the same thing as the Promise

24
00:01:52.180 --> 00:01:54.379
只是它更短更简单。
except it's a little shorter and simpler.

25
00:01:54.379 --> 00:01:56.579
我们不会调用新关键字。
We're not calling the new keyword.

26
00:01:56.579 --> 00:02:00.489
我们没有更复杂的解决方案
We don't have some more complicated set of resolve and

27
00:02:00.489 --> 00:02:05.469
拒绝，我们必须保持跟踪，我们只有一个单一的回调完成。
reject that we're having to keep track of, we just have the single callback for done.

28
00:02:06.530 --> 00:02:10.599
有一些方法可以发出错误信号，但您没有单独的回调。
There are ways to signal errors, but you don't have a separate callback for that.

29
00:02:10.599 --> 00:02:14.879
所以我们会深入到这一点，但我只想快速地向你们展示这一点
So well get too far into that, but I do just want to quickly show you that

30
00:02:14.879 --> 00:02:18.780
拥有图书馆的价值在于我们可以
the value of having a library is that there are additional benefits that we can

31
00:02:18.780 --> 00:02:23.370
这些好处之一就是需要包装是一种非常常见的模式
get so one of those benefits is that it's such a common pattern to need to wrap

32
00:02:26.090 --> 00:02:28.539
喜欢创建这些包装的实用程序。
like to create these wrapped utilities.

33
00:02:28.539 --> 00:02:33.800
基本上，它被称为提升，取一个只接收回调和
Basically it's called lifting taking a function that only receives callbacks and

34
00:02:33.800 --> 00:02:39.479
将其转化为一个函数，它将返回我们的异步或
turning that into a function that will return us asynquence or

35
00:02:39.479 --> 00:02:40.879
作为承诺回报。
return as a Promise.

36
00:02:40.879 --> 00:02:45.069
所以做同样事情的另一种方法是
So another way of doing that same thing would have been

37
00:02:45.069 --> 00:02:47.194
让我自己成为一个getFile。
to to make myself a getFile.

38
00:02:47.194 --> 00:02:55.060
并调用库中存在的ASQ.rap实用程序。
And calling an ASQ.wrap utility that exists in the library.

39
00:02:55.060 --> 00:02:59.069
它的工作是接受一个回调期望函数
Its job is to take a callback expecting function and

40
00:02:59.069 --> 00:03:03.060
使其成为一个承诺期望或承诺返回函数。
make it into a Promise expecting or Promise returning function.

41
00:03:03.060 --> 00:03:06.931
因此，如果我们将fakeAjax传递给它。
So if we pass in fakeAjax to it.

42
00:03:06.931 --> 00:03:11.710
默认情况下，这里的假设是它将回调视为
Now by default the assumption here is that it treats callbacks as

43
00:03:11.710 --> 00:03:15.900
错误优先样式，因为这在节点世界中非常常见。
error first style, because that's extremely common in the node world.

44
00:03:15.900 --> 00:03:20.150
在我们特定情况下，fakeAjax不是样式错误。
In our particular case fakeAjax is not error for style.

45
00:03:20.150 --> 00:03:23.409
所以我们不想做这个假设。
So we don't wanna make that assumption.

46
00:03:23.409 --> 00:03:27.069
但在大多数情况下，您将处理错误
But in the most majority case you're gonna be dealing with error

47
00:03:27.069 --> 00:03:30.340
第一个瓦片功能遍及节点或其他角库或
first tile functions all over node or other Angular libraries or

48
00:03:30.340 --> 00:03:34.460
无论在哪种情况下，您只需调用WRAP就行了。
whatever in which case, you just call wrap and that's it.

49
00:03:34.460 --> 00:03:37.170
现在我们有了getFile函数，我不需要做任何其他事情。
And now we have a getFile function, I didn't need to do anything else.

50
00:03:37.170 --> 00:03:41.449
我现在有了getFile函数，它将以异步方式返回我们，这就完成了。
I now have the getFile function that will return us in asynquence and that's done.

51
00:03:41.449 --> 00:03:44.750
您可以将此包装配置为执行其他操作，在这种情况下，
You can configure this wrap to do other things, and in this case,

52
00:03:44.750 --> 00:03:51.241
我们要告诉它我们想做一个简单的风格
we're going to tell it that we want to do a simplecb style

53
00:03:51.241 --> 00:03:56.379
包装，因为我们假设fakeAjax函数
wrapping because we're assuming that the fakeAjax function

54
00:03:56.379 --> 00:04:00.039
我们正在处理的是一个简单的回调，而不是错误优先的样式。
that we're dealing with is a simple callback rather than error first style so.

55
00:04:00.039 --> 00:04:02.580
有关如何配置WRAP的文档。
Documentation on how you can configure wrap a little bit.

56
00:04:03.610 --> 00:04:06.969
大多数时候你根本不需要做任何配置，但它有选项
Most of the time you won't need to do any configuration at all but it has the option

57
00:04:06.969 --> 00:04:11.479
改变你需要的包装行为，但是第22行
of changing that wrapping behavior you need but that one line there on line 22

58
00:04:11.479 --> 00:04:16.279
这就是我创建包装的getFile函数所需要做的全部工作。
that's all I need to do to create my wrapped getFile function.

59
00:04:16.279 --> 00:04:18.839
并且我可以完全相同的方式调用getFile
And I can call getFile exactly the same way

60
00:04:18.839 --> 00:04:20.810
正如我所期望的那样。
as I would expect to be able to call it so.

61
00:04:20.810 --> 00:04:23.689
我只是想炫耀一下有一些这样的东西
I just wanted to show off that there are what there are some of those sorts of

62
00:04:23.689 --> 00:04:29.329
他们可以在其上添加这些实用程序的异步库的好处，
benefits from from asynchronous libraries they can add these utilities on,

63
00:04:29.329 --> 00:04:33.029
在正常课程的基础上，帮助制作一些这样的东西
on top of the normal course stuff and help make some of these

64
00:04:34.670 --> 00:04:38.159
我们所做的任务，这些补救性任务更直截了当。
tasks that we do, these remedial tasks a little bit more straight forward.

65
00:04:38.159 --> 00:04:41.000
好的，所以我们只用比较容易理解的，但是
Okay, so we'll just stick with the easier to understand one but

66
00:04:41.000 --> 00:04:43.370
你可以知道有些东西像包装。
you can know that there are things like wrapping.

67
00:04:43.370 --> 00:04:47.040
好吧，那马上要求文件怎么样？
All right, what about requesting the files at once?

68
00:04:47.040 --> 00:04:51.209
我将把我的s1称为s1，因为它是一个序列而不是p1，但是
Well I'm gonna call mine s1 cuz it's a sequence instead of p1 but

69
00:04:51.209 --> 00:04:54.149
基本上仍然是对file1的getFile调用。
is still fundamentally gonna be a getFile call with file1.

70
00:04:55.590 --> 00:05:01.536
S2是getFile(“File2”)和
And s2 is getFile("file2") and

71
00:05:01.536 --> 00:05:07.860
S3是getFile(“file3”)，好吗？
s3 is getFile("file3"), okay?

72
00:05:07.860 --> 00:05:09.709
好的，这很简单。
All right, so that's pretty straightforward.

73
00:05:12.730 --> 00:05:14.160
让我们去链条上
Let's go to the chain and

74
00:05:14.160 --> 00:05:16.394
看看链条工作方式的不同。
look at the difference in the in the way the chains gonna work.

75
00:05:20.680 --> 00:05:24.942
我们有一个S1，它代表我们前进的链条上的第一步
We have an s1 that represents the first step in our chains us going

76
00:05:24.942 --> 00:05:26.579
和p1一样。
to the same thing as p1.

77
00:05:26.579 --> 00:05:32.372
现在异步API中，而不是调用一个.Then
Now in the asynquence API, rather than calling a .then

78
00:05:32.372 --> 00:05:37.319
每当我们想要做一些异步步骤。
whenever we want to do some asynchronous step.

79
00:05:37.319 --> 00:05:41.639
如果我们有异步步骤，这就是输出，我们使用.val。
If we have asynchronous step, which is what output is, we use .val.

80
00:05:41.639 --> 00:05:43.170
所以我要打电话给.val，然后
So I'm going to call .val, and

81
00:05:43.170 --> 00:05:48.014
传递输出。&gt；&gt；Kyle Simpson：记住这是为了
pass an output. &gt;&gt; Kyle Simpson: Remember this is to get

82
00:05:48.014 --> 00:05:52.201
除了可能使API更难学习的多态性之外，
away from the polymorphism that can make APIs harder to learn instead,

83
00:05:52.201 --> 00:05:56.524
你只需要学习每一步，很明显Val是一个同步的步骤，
you just learn each step, and it's clear that val is a synchronous step,

84
00:05:56.524 --> 00:05:58.723
与异步步骤相反。
as opposed to an asynchronous step.

85
00:05:58.723 --> 00:06:03.619
好的，那么下一个，我需要在p2步骤中链接，对吗？
All right, so the next one, I need to to link in the p2 step, right?

86
00:06:03.619 --> 00:06:09.600
现在，记住，我告诉过你我们有.seq用于接收序列。
Now, remember, I told you that we have .seq for receiving sequences.

87
00:06:09.600 --> 00:06:12.889
所以我们可以做.seq和
So we could do .seq and

88
00:06:12.889 --> 00:06:17.875
返回S2。&gt；&gt；Kyle Simpson：长相
return s2. &gt;&gt; Kyle Simpson: Looks

89
00:06:17.875 --> 00:06:20.850
与我们处理允诺链的方式非常相似。
very similar to the way that we do with Promise chain.

90
00:06:20.850 --> 00:06:26.680
拥有Promise库的好处之一
One of the advantages of having a Promise library to give you

91
00:06:26.680 --> 00:06:32.279
额外的抽象，以消除一些这些纸张切割和其他无意义的开销。
extra abstractions to remove some of these paper cuts and other pointless overheads.

92
00:06:32.279 --> 00:06:35.389
Asynquence允许您直接通过S2。
Asynquence allows you to just pass s2 directly.

93
00:06:36.509 --> 00:06:37.990
我很乐意和承诺链一起拥有它。
I'd love to have that with the Promise chains.

94
00:06:37.990 --> 00:06:41.970
我们没有这个，但是有了一个序列，我们就可以直接传递S2，然后
We don't have that but with a sequence we can just pass s2 directly and

95
00:06:41.970 --> 00:06:45.456
然后我们执行.val(输出)。
so then we do .val(output).

96
00:06:45.456 --> 00:06:48.643
然后我们执行.seq(S3)。
Then we do .seq(s3).

97
00:06:48.643 --> 00:06:50.721
然后我们执行.val(输出)。
Then we do .val(output).

98
00:06:51.879 --> 00:06:58.610
然后我们执行.val，output(“Ccomplete！”)，
Then we do .val, output("Ccomplete!"),

99
00:06:58.610 --> 00:07:04.298
好吗？&gt；&gt；Kyle Simpson：in
okay? &gt;&gt; Kyle Simpson: In

100
00:07:04.298 --> 00:07:06.247
除了观察之外，
addition to making that observation,

101
00:07:06.247 --> 00:07:09.610
如果我知道我可以将这些序列直接传递到这些步骤中，
if I know that I can pass these sequences directly into those steps,

102
00:07:09.610 --> 00:07:13.814
这实际上意味着，我甚至不需要将这些存储在单独的变量中。
what that actually means is I don't even need to store these in separate variables.

103
00:07:13.814 --> 00:07:19.970
我可以从字面上接受getFile调用，替换S1。
I can literally take the getFile call, replace s1.

104
00:07:19.970 --> 00:07:25.920
我可以接受这个getFile调用，并将其放在S2的位置上。
I can take this getFile call and put it right in place of s2.

105
00:07:25.920 --> 00:07:28.675
我可以调用这个getFile调用
And I can call this getFile call and

106
00:07:28.675 --> 00:07:34.451
将其放在S3的正确位置。&gt；&gt；Kyle Simpson：Get
put it right in place of s3. &gt;&gt; Kyle Simpson: Get

107
00:07:34.451 --> 00:07:35.379
把这些全扔掉。
rid of those entirely.

108
00:07:36.819 --> 00:07:39.199
它仍然在进行所有三个getFile调用。
It's still making all three getFile calls.

109
00:07:39.199 --> 00:07:42.230
一个在29线，一个在31线，一个在33线，
The one on line 29, one on line 31, and the one on line 33,

110
00:07:42.230 --> 00:07:46.680
它仍然在预先做这些，所有这些都是一次性的，因为它们仍然是函数调用。
it's still making those all upfront, all at once cuz they're still function calls.

111
00:07:46.680 --> 00:07:49.759
但这些返回值立即通过管道传输到链中，并且
But those return values are immediately piped into a chain, and

112
00:07:49.759 --> 00:07:52.529
链知道如何处理它并将其排序为正确的顺序。
the chain knows how to handle that and sequence it into the proper order.

113
00:07:53.699 --> 00:07:56.300
所以我甚至不需要将它们存储在单独的变量中
So I don't even have to store them in separate variables and

114
00:07:56.300 --> 00:07:59.100
创建一个函数来返回它们，所以我只是让它简单明了。
make a function to return them, so I just have it straightforward.

115
00:07:59.100 --> 00:08:01.930
所以这是试图说明我提出的一个观点，就是
So this is trying to illustrate one of the points that I'm making, is that

116
00:08:01.930 --> 00:08:06.149
承诺图书馆的价值，不管你喜欢不喜欢我的，我都没有利害关系
the value of a Promise library, whether you like mine or not, I have no stake in

117
00:08:06.149 --> 00:08:10.129
不管你喜欢这个特别的，但是有一大堆很棒的。
whether you like this particular one, but there's a bunch of great ones out there.

118
00:08:10.129 --> 00:08:13.639
Promise库的目的是使用Promises更容易，并且
The purpose of Promise libraries is to make it easier to work with Promises, and

119
00:08:13.639 --> 00:08:16.910
我希望你能看到我们在右边所做的是
I hope that you can see that what we did on the right hand side Is

120
00:08:16.910 --> 00:08:21.180
比起我们在左手边做同样的事情要容易得多。
quite a bit easier than what we had to do the same equivalent on the left-hand side.

121
00:08:21.180 --> 00:08:24.680
这是试图使用承诺抽象的优点，
That's the virtue of trying to use Promise abstractions,

122
00:08:24.680 --> 00:08:29.440
就是他们可以自由地去掉一些丑陋的部分，粗糙的边缘，
is that they have the freedom to get rid of some of the ugly bits, the rough edges,

123
00:08:29.440 --> 00:08:30.856
那个奇怪的角落案子。
the weird corner case.

124
00:08:30.856 --> 00:08:35.475
他们有能力铺设一些这样的东西，而且
They have the ability to kind of pave over some of those things, and

125
00:08:35.475 --> 00:08:38.609
这是背后的设计哲学的一部分
that's part of the design philosophy behind

126
00:08:38.609 --> 00:08:41.642
异步，好吗？&gt；&gt；扬声器2：我当时用了而不是
asynquence, okay? &gt;&gt; Speaker 2: I used then instead of

127
00:08:41.642 --> 00:08:46.789
序列，有什么区别？&gt；&gt；Kyle Simpson：那么
sequence, what's the difference? &gt;&gt; Kyle Simpson: The .then

128
00:08:46.789 --> 00:08:51.340
函数将调用它接收的函数，如果它接收到一个函数。
function will call it the function that it receives and if it receives a function.

129
00:08:51.340 --> 00:08:57.298
它将调用它接收的函数，并向它传递一个完成回调。
It will call the function that it receives and pass it a done call back.

130
00:08:57.298 --> 00:09:02.006
的.Then关键字
The .then keyword for

131
00:09:02.006 --> 00:09:06.990
遗留原因在以下意义上是多态的
legacy reasons is polymorphic in the sense that

132
00:09:06.990 --> 00:09:11.139
如果您不正确地使用它并传递给它一个序列，它就不会在您面前哽咽。
if you use it incorrectly and pass it a sequence, it will not choke at you.

133
00:09:11.139 --> 00:09:15.539
但是正确的习惯用法是为正确的事情调用适当的步骤。
But the proper idiomatic usage is to call the proper step for the proper thing.

134
00:09:15.539 --> 00:09:19.320
所以，这一步的目的就是当你想把事情做完的时候
So the purpose of the .then step is when you want to get the done

135
00:09:19.320 --> 00:09:23.909
函数作为延续，您可以根据需要使用该延续。
function as a continuation and you can use that continuation however you need.

136
00:09:23.909 --> 00:09:28.313
序列步骤的目的是要创建自己的序列
The purpose of the sequence step is that you are going to make your own sequence

137
00:09:28.313 --> 00:09:30.019
然后把它放回链子里。
and return it into the chain.

138
00:09:30.019 --> 00:09:30.799
这说得通吗？
That makes sense?

139
00:09:33.559 --> 00:09:38.100
用我的API进行5到10分钟的练习，你就会有这样的感觉，
And with five or ten minutes of practice with my API you'll get the sense of,

140
00:09:38.100 --> 00:09:40.649
我用这一步来达到这个目的，这一步就是为了达到那个目的。
I use this step for that purpose this step for that purpose.

141
00:09:40.649 --> 00:09:41.149
这就是目标。
That's the goal.
