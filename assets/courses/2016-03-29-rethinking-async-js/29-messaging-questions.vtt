WEBVTT

1
00:00:00.000 --> 00:00:03.648
[音乐]
[MUSIC]

2
00:00:03.648 --> 00:00:06.480
&gt；&gt；Kyle Simpson：我将至少再一次穿过箭头，
&gt;&gt; Kyle Simpson: I'm gonna run through the arrows at least one more time,

3
00:00:06.480 --> 00:00:08.965
因为我知道这会让人迷惑，好吗？
cuz I know it can be kind of confusing, all right?

4
00:00:08.965 --> 00:00:09.731
怎么了？
Yes?

5
00:00:09.731 --> 00:00:10.891
&gt；&gt；学生：此时，
&gt;&gt; Student: At this point,

6
00:00:10.891 --> 00:00:15.269
它说的是意义，它印出了生命的意义42？
it said meaning, it's printed out meaning of life 42?

7
00:00:15.269 --> 00:00:18.134
或者说-&gt；&gt；Kyle Simpson：在四号线运行后，
Or it said- &gt;&gt; Kyle Simpson: After line four runs,

8
00:00:18.134 --> 00:00:21.928
我们返回的值出来，它会说生命的意义，冒号，42。
we return the value out, and it would say meaning of life, colon, 42.

9
00:00:21.928 --> 00:00:25.100
&gt；&gt；学生：42，但运行尚未完成。
&gt;&gt; Student: 42, but run is not done yet.

10
00:00:25.100 --> 00:00:27.609
&gt；&gt；Kyle Simpson：生成器仍将处于暂停状态。
&gt;&gt; Kyle Simpson: The generator would still be in a paused state.

11
00:00:27.609 --> 00:00:29.190
&gt；&gt；学生：是的，对不起，发电机还没有完成。
&gt;&gt; Student: Yeah, sorry, the generator is not done yet.

12
00:00:29.190 --> 00:00:30.739
&gt；&gt；Kyle Simpson：这实际上提出了一个非常好的观点，
&gt;&gt; Kyle Simpson: Which actually brings up a really good point,

13
00:00:30.739 --> 00:00:31.589
很高兴你这么问。
I'm glad you asked that.

14
00:00:31.589 --> 00:00:33.369
发电机不必永远完成。
Generators do not have to ever finish.

15
00:00:34.840 --> 00:00:38.490
对你来说，只消耗一部分发电机是完全没问题的。
It's entirely okay for you to only partially consume a generator.

16
00:00:38.490 --> 00:00:40.109
当你不再引用它时，
And then when you have no more reference to it,

17
00:00:40.109 --> 00:00:42.299
它只会像其他值一样被垃圾收集。
it's just gonna get garbage collected like any other value.

18
00:00:43.920 --> 00:00:45.789
好的，所以这样做是完全可以的。
Okay, so it's entirely okay to do that.

19
00:00:45.789 --> 00:00:50.365
事实上，有时你会将你的发电机设计成永远不会完成。
As matter of fact, sometimes you're going to design your generators to never finish.

20
00:00:50.365 --> 00:00:52.979
你知道
You know how

21
00:00:52.979 --> 00:00:57.229
糟糕的是，人们通常会在你的编程中放入一个真正的循环？
bad it is usually looked at to put a while true loop in your programming?

22
00:00:57.229 --> 00:01:00.753
因为虽然真的就像，除非你有一个返回或休息在那里，
Because while true is like, unless you have a return or a break in there,

23
00:01:00.753 --> 00:01:02.719
一阵子真的会永远消失，对吧？
a while true is gonna run forever, right?

24
00:01:03.810 --> 00:01:06.859
实际上，如果你在生成器里面放上一段时间
Actually it turns out if you put a while true inside of a generator and

25
00:01:06.859 --> 00:01:08.450
你有一个产量关键词，
you have a yield keyword in there,

26
00:01:08.450 --> 00:01:11.689
这是一个完全有效的设计，你实际上做得非常普遍。
that's an entirely valid design that you actually do pretty commonly.

27
00:01:12.769 --> 00:01:15.730
我想说的是，生成器正在将while true重新放回编程中。
I like to say that generators are putting the while true back into programming.

28
00:01:17.219 --> 00:01:19.762
对吧？因为你可能想要每隔一段时间
Right? Cuz you might wanna generator that every

29
00:01:19.762 --> 00:01:22.634
一次你调用它，也许While True循环，
single time you call it, maybe the while true loop,

30
00:01:22.634 --> 00:01:25.460
它每次都会生成一个新的唯一ID。
it's going to generate a new unique ID every time.

31
00:01:25.460 --> 00:01:28.930
所以每次我调用下一次，我都会得到一个新的唯一ID，然后它会循环回来
So every time I call next, I get a new Unique ID and then it loops back and

32
00:01:28.930 --> 00:01:32.520
它再次等待，直到我请求另一个值和另一个值。
it waits again till I ask for another value and another value.

33
00:01:32.520 --> 00:01:35.969
这就是对发电机的思考方式，它们的名字来自哪里，
That's thinking of generators in the way that, where their name comes from,

34
00:01:35.969 --> 00:01:41.109
他们正在从外部世界为我们创造或创造价值。
that they are generating or producing values for us from the outside world.

35
00:01:41.109 --> 00:01:43.460
所以这就是考虑发电机是生产者
So that's thinking about a generator is a producer and

36
00:01:43.460 --> 00:01:45.370
接下来我将通过调用dot来消耗它。
I'm going to consume it by calling dot next.

37
00:01:46.539 --> 00:01:48.060
来自异步编程世界，
From the asynchronous programming world,

38
00:01:48.060 --> 00:01:51.009
我已经让你把你的大脑转回另一条路了。
I've asked you to flip your brains back the other way.

39
00:01:51.009 --> 00:01:54.210
所以我要求你们更多地考虑发电机的内部，并且
So I've asked you to think more about the inside of the generator, and

40
00:01:54.210 --> 00:01:56.020
不用担心外面发生了什么。
not worry about what's happening on the outside.

41
00:01:57.579 --> 00:01:59.420
但发电机就是从那里得名的，
But that's where generators get their name,

42
00:01:59.420 --> 00:02:03.500
它们产生一个可以使用的迭代器。
is that they produce an iterator that can be can be consumed.

43
00:02:03.500 --> 00:02:06.700
&gt；&gt；学生2：快速问题，为什么要用圆括号将YOUNT关键字括起来？
&gt;&gt; Student 2: Quick question, why do you put parentheses around the yield keyword?

44
00:02:06.700 --> 00:02:08.060
这有用吗？
Does that do anything?

45
00:02:08.060 --> 00:02:10.060
&gt；&gt；Kyle Simpson：语法上它是必需的。
&gt;&gt; Kyle Simpson: Grammatically it's required.

46
00:02:10.060 --> 00:02:10.610
&gt；&gt；学生2：好的。
&gt;&gt; Student 2: Okay.

47
00:02:10.610 --> 00:02:14.060
&gt；&gt；Kyle Simpson：有一些奇怪的语法围绕着YELD关键字。
&gt;&gt; Kyle Simpson: There are some weird grammatic surrounds the yield keyword.

48
00:02:15.090 --> 00:02:18.840
所以，如果你学习ES6语法，就不会有太多的兔子路，
So without getting on too much of a rabbit trail there, if you study the ES6 grammar,

49
00:02:18.840 --> 00:02:22.969
成品率的表达方式，在这个特殊的情况下，它是必需的。
the way yield is expressed, in this particular case it's required.

50
00:02:25.629 --> 00:02:28.280
所以这是一个不幸的语法细微差别。
So that's an unfortunate nuance of grammar.

51
00:02:30.020 --> 00:02:31.139
是啊。
Yes.

52
00:02:31.139 --> 00:02:32.769
&gt；&gt；学生4：有几个问题，
&gt;&gt; Student 4: There's a couple questions there,

53
00:02:32.769 --> 00:02:34.789
请问三号线在等什么？
saying what is line three waiting for?

54
00:02:34.789 --> 00:02:38.229
他以为你提到三号线在等十号线结束。
He thought you mentioned that line three is waiting for ten to finish.

55
00:02:38.229 --> 00:02:40.520
&gt；&gt；Kyle Simpson：不，所以让我再看一遍箭头
&gt;&gt; Kyle Simpson: No, so let me run through the arrows again and

56
00:02:40.520 --> 00:02:41.759
看看这能不能回答这个问题。
see if that answers that question.

57
00:02:43.490 --> 00:02:47.289
在第五行之后，没有一个发电机启动。
After line five, none of the generator has started.

58
00:02:47.289 --> 00:02:51.229
我们有一个迭代器，包装在我们调用的Run函数周围。
We have an iterator for it, wrapped around the function we call run.

59
00:02:52.289 --> 00:02:53.349
但它还没有运行。
But it hasn't run yet.

60
00:02:53.349 --> 00:02:54.210
什么都没发生。
Nothing has happened.

61
00:02:54.210 --> 00:02:55.379
我本可以打电话给你的。
I could have called run.

62
00:02:55.379 --> 00:02:58.492
如果这能帮助你更好地理解它，我可以把它叫做步骤。
I could have called it step, if that helps you understand it better.

63
00:02:58.492 --> 00:03:02.439
因为踏步将会一次一个地穿过它，好吗？
Cuz stepping is going to step through it one at a time, okay?

64
00:03:02.439 --> 00:03:03.180
所以我们叫七号线。
So we call line seven.

65
00:03:03.180 --> 00:03:06.020
我们走进它，或者我们开始运行它。
We step into it, or we start the running of it.

66
00:03:06.020 --> 00:03:10.722
我们运行发电机的第一部分，这将把控制权转移到二号线。
We run the first part of the generator and that's gonna transfer control to line two.

67
00:03:10.722 --> 00:03:14.000
第二行开始执行，运行YELD关键字并
Line two starts to execute, runs across a yield keyword and

68
00:03:14.000 --> 00:03:16.925
说，我需要一个值，我要等待。
says, I need a value here, I'm going to wait.

69
00:03:16.925 --> 00:03:18.789
所以我要归还控制权
So I'm gonna return control and

70
00:03:18.789 --> 00:03:21.319
在你准备回答我的问题时暂停一下。
pause myself while you get ready to answer my question.

71
00:03:22.360 --> 00:03:23.500
我会一直等下去。
And I'll wait as long as it takes.

72
00:03:23.500 --> 00:03:26.770
在这种情况下，我们同时有一个答案。
In this case we synchronously have an answer.

73
00:03:26.770 --> 00:03:29.439
我们将发送一个值为10的答案。
We're going to send an answer right back in with the value ten.

74
00:03:30.530 --> 00:03:33.960
所以值10是一个实际的JavaScript数字，它没有什么特别之处，
So the value ten is an actual JavaScript number, there's no specialty to it,

75
00:03:33.960 --> 00:03:35.530
这只是我们传入的一个数字。
it's just a number that we pass in.

76
00:03:35.530 --> 00:03:38.810
可能是字符串，可能是对象，可能是任何东西。
Could've been a string, could have been an object, could have been anything.

77
00:03:38.810 --> 00:03:43.370
但它是我们传入的一个值，现在它被加到1上，x等于11。
But it's a value that we pass in and now it gets added to one and x equals 11.

78
00:03:43.370 --> 00:03:45.469
然后我们转到三号线。
Then we move on to line three.

79
00:03:45.469 --> 00:03:48.300
别被箭头搞糊涂了我们还在运行发电机。
Don't get confused by the arrows we're still running the generator.

80
00:03:48.300 --> 00:03:49.620
我们在三号线。
We're on the line three.

81
00:03:49.620 --> 00:03:53.379
我们开始运行第三行，var y等于1+。
We start to run line three we have var y equals one plus.

82
00:03:53.379 --> 00:03:55.520
哦，还有另一个收益。
And oops, there's another yield.

83
00:03:55.520 --> 00:03:58.060
所以我们需要再次暂停等待控制，所以
So we need to pause again waiting for control, so

84
00:03:58.060 --> 00:04:00.050
我们要把控制权还给八号线。
we are going to return control to line eight.

85
00:04:01.479 --> 00:04:04.110
这意味着第八行将获得一个返回值的对象
Which would mean that line eight would get an object back with value

86
00:04:04.110 --> 00:04:05.000
未在False下定义。
undefined under false.

87
00:04:06.189 --> 00:04:07.210
在后来的某一点上，
At some later point,

88
00:04:07.210 --> 00:04:12.280
与第10行一样，我们将回答挂起的暂停问题。
like line ten, we're going to answer the pending paused question.

89
00:04:12.280 --> 00:04:14.889
第三行的YERENCE关键字正在等待答案，并且
The yield keyword from line three is waiting for an answer, and

90
00:04:14.889 --> 00:04:18.470
我们将通过传入值30来给它答案。
we're going to give it that answer by passing in the value 30.

91
00:04:18.470 --> 00:04:22.620
所以问题的答案是，三号线在等什么，
So the answer to the question is, what is line three waiting on,

92
00:04:22.620 --> 00:04:24.800
它在等待第十行的值30。
it's waiting on the value 30 from line ten.

93
00:04:24.800 --> 00:04:29.660
好的，这个值进来了，30加1，我们现在有31。
Okay, that value comes in, 30 plus 1, we now have 31.

94
00:04:29.660 --> 00:04:31.050
x是11，y是31。
X is 11, y is 31.

95
00:04:31.050 --> 00:04:35.209
我们把这两个加在一起，我们得到第四行的值42。
We add those two together, we get the value 42 on line four.

96
00:04:35.209 --> 00:04:39.860
然后我们输出这个值，42，回到第十行。
And then we yield out that value, 42, back to line ten.

97
00:04:39.860 --> 00:04:44.129
这是一个暂停，继续，暂停，继续。
It's a pause, resume, pause, resume, pause, resume.

98
00:04:44.129 --> 00:04:48.709
每一次停顿都是在问一个问题，每一份简历都在回答这个问题。
And every pause is asking a question and every resume is answering the question.

99
00:04:50.540 --> 00:04:51.040
这说得通吗？
Does that make sense?

100
00:04:52.519 --> 00:04:53.110
是吗？&gt；&gt；学生3：所以我们
Yes? &gt;&gt; Student 3: So we

101
00:04:53.110 --> 00:04:54.000
在四号线暂停了吗？
are paused on line four?

102
00:04:55.110 --> 00:04:57.129
&gt；&gt；Kyle Simpson：我们目前在第四行暂停。
&gt;&gt; Kyle Simpson: We're currently paused on line four.

103
00:04:57.129 --> 00:04:58.990
没关系，我们可以把它留在那个状态。
Which is okay, we can leave it in that state.

104
00:04:58.990 --> 00:05:02.029
在第12行，如果您愿意，您可以再次调用Run。
On line 12 you could call run again if you want.

105
00:05:02.029 --> 00:05:04.939
你甚至可以传入一个值，然后它就会进入，然后
And you could even pass in a value and it would go in, and

106
00:05:04.939 --> 00:05:07.449
按照我们编写生成器的方式，我们不会用它做任何事情，但你可以。
the way we've written our generator we don't do anything with it, but you could.

107
00:05:07.449 --> 00:05:10.779
如果你愿意，你可以在第四行半有一个返回关键字
And you can have a return key word on line four and a half if you want and

108
00:05:10.779 --> 00:05:11.910
这将返回值。
that would return a value.

109
00:05:11.910 --> 00:05:15.105
这都是完全有效的，但这不是必需的。
That's all totally valid, but it's not required.

110
00:05:15.105 --> 00:05:18.137
如果需要，可以部分使用此生成器。
You can partially consume this generator if you need to.

111
00:05:18.137 --> 00:05:21.035
&gt；&gt；学生：所以如果你只把y放进去，你就可以
&gt;&gt; Student: So if you just put the y through around then you could just

112
00:05:21.035 --> 00:05:22.956
不断记录生命的意义。
constantly log the meaning of life.

113
00:05:22.956 --> 00:05:24.658
下一步，下一步。
Next, next next, next, next, next.

114
00:05:24.658 --> 00:05:28.858
&gt；&gt；Kyle Simpson：是的，没错。
&gt;&gt; Kyle Simpson: Yep, exactly.

115
00:05:28.858 --> 00:05:32.601
&gt；&gt；学生3：在第七行，如果你通过了第一个，
&gt;&gt; Student 3: On line seven if you passed in on the first one,

116
00:05:32.601 --> 00:05:38.177
如果传递初始值，它不会在第二行中断吗？
if you're passing an initial value, would it not break on line two?

117
00:05:38.177 --> 00:05:41.389
&GT；&GT；凯尔·辛普森：不，那不会发生。
&gt;&gt; Kyle Simpson: No, that's not what would happen.

118
00:05:42.569 --> 00:05:43.668
这是。
This is one of the.

119
00:05:45.918 --> 00:05:47.896
&gt；&gt；kyle simpson：设计的不是很好的部分。
&gt;&gt; Kyle Simpson: Not so wonderful parts of the design.

120
00:05:47.896 --> 00:05:54.019
作为VS6，如果将一个值传递给初始点下一个调用，
As a VS6, if you pass in a value to the initial dot next call,

121
00:05:54.019 --> 00:05:56.790
没有等待它的YOUTER关键字。
there is no yield keyword waiting for it.

122
00:05:56.790 --> 00:05:57.870
所以价值就这样消失了。
So that value just goes.

123
00:05:59.370 --> 00:05:59.870
好吗？
Okay?

124
00:05:59.870 --> 00:06:01.910
从外面的角度看这很奇怪。
Which is weird from the outside perspective.

125
00:06:01.910 --> 00:06:04.920
感觉应该有办法抓住它，而且
It feels like there ought to be some way to get a hold of it, and

126
00:06:04.920 --> 00:06:06.860
没有办法得到它。
there is no way to get a hold of it.

127
00:06:06.860 --> 00:06:11.439
包括我在内的许多人提出了对这一矛盾的担忧
Many people including myself brought up concerns about the inconsistency of that

128
00:06:11.439 --> 00:06:15.509
设计怪癖，认为会让人迷惑。
design quirk, thinking that that would confuse people.

129
00:06:15.509 --> 00:06:20.136
有一个建议ES7，一种你可以获得这个价值的方法，
There's a proposal ES7, of a way that you would be able to get access to that value,

130
00:06:20.136 --> 00:06:21.774
而不是通过YORD关键字。
not through a yield keyword.

131
00:06:21.774 --> 00:06:25.238
但在目前的情况下，不要发送值
But at the moment as it stands, don't send a value

132
00:06:25.238 --> 00:06:29.622
到下一个呼叫的第一个点，因为它只是去[噪音]。
to the first dot next call because it's just going to go [NOISE].

133
00:06:29.622 --> 00:06:35.340
这是一个不幸的，奇怪的设计怪癖。
That's an unfortunate, weird quirk of the design.

134
00:06:35.340 --> 00:06:37.939
&gt；&gt；学生2：在第四行，如果你只做x加y的返回，
&gt;&gt; Student 2: On line four, if you just do a return of x plus y,

135
00:06:37.939 --> 00:06:39.290
那不是也结束了吗？
wouldn't that finish also?

136
00:06:39.290 --> 00:06:40.550
&gt；&gt；Kyle Simpson：它仍然会做同样的事情。
&gt;&gt; Kyle Simpson: It would still do the exact thing.

137
00:06:40.550 --> 00:06:41.100
&gt；&gt；学生2：好的。然后-
&gt;&gt; Student 2: Okay. Then the-

138
00:06:41.100 --> 00:06:42.889
&gt；&gt；Kyle Simpson：但是发电机会
&gt;&gt; Kyle Simpson: But the generator would

139
00:06:42.889 --> 00:06:43.550
完全完整。
be fully complete.

140
00:06:43.550 --> 00:06:44.379
&gt；&gt；学生2：将完成。
&gt;&gt; Student 2: Would be complete.

141
00:06:44.379 --> 00:06:45.569
&gt；&gt；Kyle Simpson：是的。&gt；&gt；学生2：好的。
&gt;&gt; Kyle Simpson: Yup. &gt;&gt; Student 2: Okay.

142
00:06:45.569 --> 00:06:46.370
&gt；&gt；Kyle Simpson：完全正确。
&gt;&gt; Kyle Simpson: That's exactly right.

143
00:06:46.370 --> 00:06:49.279
好的，在后面。
Okay, in the back.

144
00:06:49.279 --> 00:06:51.800
&gt；&gt；学生4：他们在聊天中问，在第二行。
&gt;&gt; Student 4: They're asking in the chat, on line two.,

145
00:06:51.800 --> 00:06:56.305
如果这需要很长一段时间才能达到收益，然后您调用Run，但是
if that takes a long time before reaching yield, but then you call run, but

146
00:06:56.305 --> 00:07:02.439
在结束之前调用run，那看起来像什么？
a call to run happens before that finishes, what does that look like?

147
00:07:02.439 --> 00:07:06.189
&gt；&gt；Kyle Simpson：这对于JavaScript单线程语义是不可能的。
&gt;&gt; Kyle Simpson: That's not possible with JavaScript single threaded semantics.

148
00:07:06.189 --> 00:07:09.329
你不可能两次启动发电机，
It's not possible for you to try to start the generator twice,

149
00:07:09.329 --> 00:07:12.579
除非发电机从内部试图调用RUN。
unless the generator from inside of itself tried to call run.

150
00:07:13.709 --> 00:07:14.970
如果你这样做了，你会得到一个错误。
And if you did that you're gonna get an error.

151
00:07:17.610 --> 00:07:21.279
但程序的其他部分不可能再次尝试调用Run。
But it's not possible for some other part of your program to try to call run again.

152
00:07:21.279 --> 00:07:24.980
因为在任何给定的时刻，只有一行JavaScript正在执行，这就是全部
Because at any given moment only one line of JavaScript is executing this is all

153
00:07:24.980 --> 00:07:26.759
基本上仍然是单线程的。
still fundamentally single threaded.

154
00:07:28.490 --> 00:07:31.747
&gt；&gt；学生4：然后他们也在跟进，使用发电机，
&gt;&gt; Student 4: And then they're also following up with, use of a generator,

155
00:07:31.747 --> 00:07:33.659
你能给我们一些现实世界的例子吗？
can you us some real world examples?

156
00:07:34.810 --> 00:07:37.040
&gt；&gt；Kyle Simpson：我们正在使用异步模式。
&gt;&gt; Kyle Simpson: We're getting there with the asynchronous pattern.

157
00:07:37.040 --> 00:07:40.600
好的，我要给你们举的真实世界的例子就是这将如何完全
Okay, he real world example I'm going to give you is how this is going to totally

158
00:07:40.600 --> 00:07:44.129
神奇地改变我们所有的异步编程。
magically transform all of our asynchronous programming.

159
00:07:44.129 --> 00:07:47.480
但是除了异步编程之外还有其他用例，
But there are other use cases besides asynchronous programming,

160
00:07:47.480 --> 00:07:50.560
最常见的是产生价值，正如我所说的。
the most common of which is to produce values as I was talking about.

161
00:07:50.560 --> 00:07:52.959
让你的心态回到不担心内心的状态
Flipping your mindset back to not worrying about the inside and

162
00:07:52.959 --> 00:07:54.529
担心外面。
worrying about the outside.

163
00:07:54.529 --> 00:07:56.629
生成器只是生成迭代器的一种方法。
A generator is just a way to produce an iterator.

164
00:07:56.629 --> 00:07:59.230
如果我想迭代一组值，
And if I wanted to iterate through a set of values,

165
00:07:59.230 --> 00:08:02.990
我可以让我的发电机坐在那里，循环，并把这些输出给我。
I could have my generator sit there and loop and yield those out to me.

166
00:08:02.990 --> 00:08:05.420
生成器是迭代对象的一种方式，例如，
A generator is a way to iterate over an object, for example,

167
00:08:05.420 --> 00:08:07.225
我可以有一个对象，它是一个数据结构，
I could have an object that's a data structure,

168
00:08:07.225 --> 00:08:12.230
其中有一堆值，我可以定义一个生成器作为我的迭代器，并且
with a bunch of values in it, and I could define a generator as my iterator, and

169
00:08:12.230 --> 00:08:15.639
只是以某种特殊的方式放弃我所有的价值观。
just yield out all my own values in some special way.

170
00:08:15.639 --> 00:08:18.970
因此，有一些方法可以将生成器用作迭代器生成器。
So there's ways to use generators as iterator producers.

171
00:08:20.569 --> 00:08:23.740
我认为这是它们不那么有趣的用法。
I think that's the less interesting usage of them.

172
00:08:23.740 --> 00:08:26.440
我认为我们正在走向的异步模式
I think the asynchronous pattern that we're heading towards is the more

173
00:08:26.440 --> 00:08:27.247
有趣的用法。
interesting usage.

174
00:08:30.018 --> 00:08:37.115
&gt；&gt；学生：你能让它立即调用来为你做第一个吗？
&gt;&gt; Student: Can you make it immediately invoking to do that first one for you?

175
00:08:37.115 --> 00:08:38.861
&gt；&gt；Kyle Simpson：发电机可以是不确定的吗？
&gt;&gt; Kyle Simpson: Can a generator be an iffy?

176
00:08:38.861 --> 00:08:40.124
绝对的。
Absolutely.

177
00:08:40.124 --> 00:08:44.048
但是你不会想让发电机成为一个不确定的，除非你把它储存起来
But you're not gonna wanna make a generator an iffy unless you store that

178
00:08:44.048 --> 00:08:47.600
迭代器，因为稍后您将需要该迭代器。
iterator because you're going to need that iterator for later.

179
00:08:47.600 --> 00:08:48.250
所以是的。
So yes.

180
00:08:49.809 --> 00:08:50.879
&gt；&gt；学生4：那么就澄清一下，
&gt;&gt; Student 4: So just kind of clarifying then,

181
00:08:50.879 --> 00:08:55.000
他们说，所以跑道被阻挡直到屈服？
they're saying, so the run is blocked until yield?

182
00:08:55.000 --> 00:08:55.570
&gt；&gt；Kyle Simpson：没错。
&gt;&gt; Kyle Simpson: That is correct.

183
00:08:56.679 --> 00:08:58.629
只有一个标准的老的，
Just that standard old,

184
00:08:58.629 --> 00:09:02.789
在Generato之外，r一切都和JavaScript中的一样。
outside of the generato,r everything's the same as it always was in JavaScript.

185
00:09:02.789 --> 00:09:03.490
单线程。
Single threaded.

186
00:09:04.809 --> 00:09:06.735
当呼叫正在运行时，其他任何东西都无法运行。
When a call's running, nothing else can run.

187
00:09:10.505 --> 00:09:13.086
&gt；&gt；Kyle Simpson：唯一改变的是内部发生的事情，
&gt;&gt; Kyle Simpson: The only thing that changes is what happens on the inside,

188
00:09:13.086 --> 00:09:14.359
它暂停的能力。
the ability for it to pause.

189
00:09:18.219 --> 00:09:18.769
凯尔·辛普森：好的。
&gt;&gt; Kyle Simpson: Okay.

190
00:09:20.059 --> 00:09:23.470
所以让我们试着多开车，让你的思想建立在内在的基础上，并且
So let's try to drive more, keep your mind set up based on the inside, and

191
00:09:23.470 --> 00:09:26.360
别太担心7号线到11号线的事情。
don't worry so much about the stuff on line seven through 11.

192
00:09:26.360 --> 00:09:29.120
因为那些东西最终会成为隐藏在图书馆里的管道。
Cuz that stuff is gonna end up being plumbing that's hidden away in a library.

193
00:09:29.120 --> 00:09:31.730
我们要关心的是里面的东西
The stuff we're gonna care about is the stuff that's inside of

194
00:09:31.730 --> 00:09:32.600
发电机，好吗？
the generator, okay?
