WEBVTT

1
00:00:00.000 --> 00:00:03.875
>> Kyle Simpson: 让我们深入练习练习此模块模式
&gt;&gt; Kyle Simpson: Let's dive into an
exercise to practice this module pattern

2
00:00:03.875 --> 00:00:06.009
我们刚了解到的
that we've just learned about.

3
00:00:06.009 --> 00:00:10.848
在此练习中，您将重构一些用于管理的代码
In this exercise, you are gonna be
refactoring some code that manages

4
00:00:10.848 --> 00:00:13.638
讲习班的登记记录。
the enrollment records for a workshop.

5
00:00:13.638 --> 00:00:16.399
你不会改变功能的但是
You're not gonna be changing
the functionality, but

6
00:00:16.399 --> 00:00:20.478
你将会重新整理代码以使用我们所学到的经典
you are gonna be rearranging the code, to
use what we learned about the classic or

7
00:00:20.478 --> 00:00:22.106
显示模块模式。
the revealing module pattern.

8
00:00:22.106 --> 00:00:24.047
作为奖励顺便说下
As a bonus, by the way,

9
00:00:24.047 --> 00:00:29.678
也可以自由地尝试使用 ES6 模块语法重新编写此命令，
feel free to also try re-writing
this using the ES6 module syntax,

10
00:00:29.678 --> 00:00:34.451
在你做了这个练习的原始版本之后
after you've done the original
version of the exercise.

11
00:00:34.451 --> 00:00:40.857
所以你的指示在这里应该比较直白
So, your instructions are laid out here,
it should be fairly straightforward but

12
00:00:40.857 --> 00:00:45.709
您的指示信息包括定义模块工厂功能
your instructions include defining
a module factory function

13
00:00:45.709 --> 00:00:49.645
叫做 defineWorkshop ，将会
called defineWorkshop,
that's going to make and

14
00:00:49.645 --> 00:00:54.789
返回表示公共 API 的那些对象实例。
return those object instances
that represent the public API's.

15
00:00:54.789 --> 00:00:59.779
这五种方法或功能是公共 API上需要公开的内容，
These five methods or functions are what
needs to be exposed on the public API,

16
00:00:59.779 --> 00:01:03.265
你就会被定义为那些函数
and you're going to end up
defining those functions.

17
00:01:03.265 --> 00:01:05.155
这些是不存在的。
So these are ones that don't exist.

18
00:01:05.155 --> 00:01:08.612
你会把它们暴露在公共 API 中然后定义它们
You're gonna expose them in
the public API and then define them.

19
00:01:08.612 --> 00:01:12.876
您将移动当前注册和 studentRecords
And you're going to move
the currentEnrollment and studentRecords

20
00:01:12.876 --> 00:01:17.736
阵列到模块中，但它们必须是模块内部的空数组。
arrays into the module, but they need to
be empty arrays inside of the module.

21
00:01:17.736 --> 00:01:21.989
然后你就会从外面去使用 addStudent 和
And then you're going to from
the outside use the addStudent and

22
00:01:21.989 --> 00:01:27.121
enrollStudent 函数将数据推送到模块实例，好吗 ?
enrollStudent functions to push the data
into your module instance, okay?

23
00:01:27.121 --> 00:01:32.299
所以我们不会把数据嵌入一个没有任何意义的模块
So we're not gonna embed data into
a module that doesn't make any sense,

24
00:01:32.299 --> 00:01:34.566
或硬编码数据到模块中。
or hard code data into a module.

25
00:01:34.566 --> 00:01:41.253
因此，您将在此处将所有这些分配更改为函数调用。
So you'll change all of those assignments
to the array into function calls here.

26
00:01:41.253 --> 00:01:46.060
然后我们要用这个 defineWorkshop 制作一个模块
And then we're going to use that
defineWorkshop to make a module

27
00:01:46.060 --> 00:01:48.026
称为 deepJS的实例。
instance called deepJS.

28
00:01:48.026 --> 00:01:53.209
然后我们会多次打电话给deepJS.add留学生，
Then we'll call deepJS.addstudent multiple
times to add in the student records,

29
00:01:53.209 --> 00:01:57.376
我们会打好几次叫 deepJS.enrollStudent 来登记
we'll call deepJS.enrollStudent
several times to enroll them.

30
00:01:57.376 --> 00:02:04.128
然后我们会改变对其他可执行文件的引用
And then we will change the references
to the other executables,

31
00:02:04.128 --> 00:02:09.175
有关 deepJS 模块 API的对应项。
to their counterparts on
the deepJS module API.

32
00:02:09.175 --> 00:02:11.313
这就是你在做什么的概观。
So that's an overview
of what you're doing.

33
00:02:11.313 --> 00:02:15.412
如果你看看 EXJS 文件这就是它的样子
if you look at the EXJS file,
this is what it looks like,

34
00:02:15.412 --> 00:02:21.275
其功能在底部，通常被拆分和吊装。
the functions are at the bottom, and
generally they are split out and hoisted.

35
00:02:21.275 --> 00:02:26.478
你只是把这个文件不改变它的行为本身
And you're simply taking this file
not changing it's behavior per se,

36
00:02:26.478 --> 00:02:28.873
但将其格式化为模块。
but formatting this as a module.

37
00:02:28.873 --> 00:02:32.438
你想从这里得到的好处是
The take away that you're trying
to get here is the advantages of

38
00:02:32.438 --> 00:02:36.875
模块模式，正在隐藏不需要公开的详细信息。
the module pattern, are hiding details
that aren't necessary to be exposed.

39
00:02:36.875 --> 00:02:38.389
没必要
It is not necessary for

40
00:02:38.389 --> 00:02:43.417
任何人都知道阵列是跟踪当前注册的内容。
anybody to know that an array is what
is tracking the current enrollments.

41
00:02:43.417 --> 00:02:47.194
或者有一系列物体跟踪当前的学生记录。
Or that there's an array of objects
tracking the current student records.

42
00:02:47.194 --> 00:02:49.405
这是一个实施细节，
That is an implementation detail, and

43
00:02:49.405 --> 00:02:53.158
所有软件工程的方式都是隐藏的
all manner of software engineering
tells that ought to be hidden.

44
00:02:53.158 --> 00:02:56.903
所以它可以是未来重构的，所以它不能被滥用。
So that it can be future refactored,
so that it can't be abused.

45
00:02:56.903 --> 00:03:01.478
所以这里的想法是使用模型模式来隐藏需要的详细信息，
So the idea here is use the model pattern
to hide the details that are necessary,

46
00:03:01.478 --> 00:03:04.770
只会暴露那些需要的公共 IP 方法
only expose those public IP
methods that's necessary.
