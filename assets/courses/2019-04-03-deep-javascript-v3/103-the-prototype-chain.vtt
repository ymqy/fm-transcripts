WEBVTT

1
00:00:00.060 --> 00:00:03.080
>> Kyle Simpson: 因此，请再次跟随该幻灯片上的代码。
&gt;&gt; Kyle Simpson: So again,
follow along with that code on the slide.

2
00:00:03.080 --> 00:00:06.459
我要给你打个电话然后按线路连线
And I'm gonna be diagramming it for
you and we're gonna go line by line and

3
00:00:06.459 --> 00:00:08.070
创建实体。
create the entities.

4
00:00:08.070 --> 00:00:09.640
在我们走第一条路之前
Before we even get to line one,

5
00:00:09.640 --> 00:00:13.830
我们得谈谈零线的情况，换句话说，
we need to diagram a bit about what's
happening in line zero, in other words,

6
00:00:13.830 --> 00:00:18.640
在你的节目开始运作之前发生了什么
what's happening before your
program has even started to run.

7
00:00:18.640 --> 00:00:22.359
在这个图中我要用一个非常简单的符号
And in this diagramming I'm gonna use
a very simple notation which is I'm gonna

8
00:00:22.359 --> 00:00:26.690
使用正方形来表示对象和圆形或
use squares to represent objects and
circles or

9
00:00:26.690 --> 00:00:31.179
无论我能近似的是什么功能
whatever I can approximate
thereof to represent functions.

10
00:00:31.179 --> 00:00:32.539
我是用 trackpad 画的
I am drawing with a trackpad so

11
00:00:32.539 --> 00:00:36.329
请原谅我的艺术作品的品质
it's not gonna be great drawing please
forgive the quality of my artwork.

12
00:00:37.960 --> 00:00:42.560
我要先图的是零环境我要做的是
I'm going to diagram first the lines
zero environment i'm going to do that by

13
00:00:42.560 --> 00:00:47.710
在这里画一条线基本上说这条线上面的所有东西都是
drawing a line across here that basically
says everything above this line is

14
00:00:47.710 --> 00:00:52.840
零线环境，下面是我们规划程序的地方。
the line zero environment, and then below
it is where we'll diagram the program.

15
00:00:52.840 --> 00:00:55.310
在我们的零环境中
Above this line in our
line zero environment,

16
00:00:55.310 --> 00:00:57.929
有一个非常关键的实体
there's one very critical entity.

17
00:00:57.929 --> 00:01:02.966
它是一个功能，所以我就把它画成一个近似圆的
It is a function, so I will draw
it as approximately a circle and

18
00:01:02.966 --> 00:01:08.864
它是由一个非常熟悉的名字命名的，它的名字叫资本 O，对象。
it goes by a pretty familiar name,
it goes by the name capital O, object.

19
00:01:11.986 --> 00:01:14.536
>> Kyle Simpson: 我只会缩写 cuz 我不喜欢写
&gt;&gt; Kyle Simpson: And I'm just gonna
abbreviate cuz I don't like writing out

20
00:01:14.536 --> 00:01:17.341
这整个词都叫对象资本 O 对象
this whole words, but
it's called object, capital O object and

21
00:01:17.341 --> 00:01:18.769
那是一种存在的功能
that's a function that exists.

22
00:01:18.769 --> 00:01:21.950
你们都看到那是我们的基本目标之一
And you all have seen that that's
one of our fundamental objects

23
00:01:21.950 --> 00:01:25.188
这种语言很可能是最重要的语言之一
that's built into the language, probably
one of the most important of those.

24
00:01:26.579 --> 00:01:31.063
我们在那里有资本 O 物体，顺便说，它有几件东西。
We have capital O object there, and
by the way, it has several things on it.

25
00:01:31.063 --> 00:01:36.174
它有 object.keys 和 object.values 以及其他各种实用程序。
It's got object.keys and object.values,
and various other utilities.

26
00:01:36.174 --> 00:01:37.807
所以这不仅仅是一个功能
So it's not only a function, but

27
00:01:37.807 --> 00:01:40.620
它还充当名称空间，以便在它上具有其他方法。
it also serves as a namespace
to have other methods on it.

28
00:01:40.620 --> 00:01:45.049
因此我们使用了很多非常重要的通用实用程序
So there are a bunch of really
important general utilities that we use

29
00:01:45.049 --> 00:01:49.170
通过 JavaScript 直接位于该功能上。
across JavaScript, that are located
directly on that function.

30
00:01:49.170 --> 00:01:53.490
但还有一个实体存在，它是一个正方形。
But there's another entity that exists and
it is a square.

31
00:01:53.490 --> 00:01:58.319
所以我在这里画一个正方形，像一个正方形。
So I will draw a square here,
something like a square.

32
00:01:59.539 --> 00:02:06.200
它可能是所有 JavaScript中最重要的对象。
And it is probably the most important
object in all of JavaScript.

33
00:02:06.200 --> 00:02:09.118
很重要的是我们连名字都没有
It's so important in fact that we
don't even have a name for it.

34
00:02:10.560 --> 00:02:12.270
我们不能为它找个好名字
We can't come up with a good name for it.

35
00:02:12.270 --> 00:02:18.052
所以你知道我们是如何命名的，我们的名字是指什么地方。
So you know how we name it, is we name
it referring to what points at it.

36
00:02:18.052 --> 00:02:22.997
对象函数中有一个属性
There's a property on
the object function that points

37
00:02:22.997 --> 00:02:28.269
在这个东西上，这个属性叫做雏形。
over at this thing and
that property is called prototype.

38
00:02:28.269 --> 00:02:30.479
这里的写作真的很痛苦
Writing is really painful here.

39
00:02:30.479 --> 00:02:32.759
我只是用缩写来写
I'm just gonna abbreviate with proto here.

40
00:02:32.759 --> 00:02:33.879
这叫原型机
It's called prototype.

41
00:02:35.699 --> 00:02:37.340
这是该属性的名称。
That is the name of that property.

42
00:02:37.340 --> 00:02:41.689
所以如果你见过 object.prototype ，那就是指
So if you've ever seen object.prototype,
that's the property pointing from

43
00:02:41.689 --> 00:02:46.069
对象函数被称为 object.prototype。
the object function over to this
thing called object.prototype.

44
00:02:46.069 --> 00:02:49.229
有一堆很重要的东西在物化原型上
And there's a bunch of really
important stuff on object.prototype,

45
00:02:49.229 --> 00:02:51.969
如 toString， and valueOf ， and
like toString, and valueOf, and

46
00:02:51.969 --> 00:02:55.650
所有这些都存在于我们语言中的基本实用程序
all these other fundamental utilities
that exist in our language.

47
00:02:55.650 --> 00:03:00.067
所有非原语直接从该 object.prototype 下降，因此
All non-primitives descend directly
from this object.prototype, so

48
00:03:00.067 --> 00:03:02.139
它是一个非常重要的物体
it's a really important object.

49
00:03:04.319 --> 00:03:07.484
>> Kyle Simpson: 我们的零环境中存在另一个存在的问题
&gt;&gt; Kyle Simpson: There is one other thing
that exists in our line zero environment

50
00:03:07.484 --> 00:03:11.159
就是一个指向另一个方向的财产
which is a property that's
pointing back the other direction.

51
00:03:11.159 --> 00:03:14.270
这里指的是这里
It's pointing from here over to here and

52
00:03:14.270 --> 00:03:19.770
他们选择了一个真正令人费解和令人沮丧的名字
that property they chose a really
perplexing and frustrating name for.

53
00:03:21.030 --> 00:03:25.229
他们选择特定名称，因为他们试图做的本质上是谎言
They choose a specific name because what
they were trying to do was essentially lie

54
00:03:25.229 --> 00:03:30.920
就像 JavaScript 系统有类一样
to you, to pretend as if
JavaScript system had classes so

55
00:03:30.920 --> 00:03:33.000
他们选择命名此构造函数。
they choose to name this constructor.

56
00:03:35.530 --> 00:03:37.849
我要写 C-o-n 的缩写
And I'm just going to
write c-o-n to abbreviate.

57
00:03:37.849 --> 00:03:39.879
这叫构造函数
It's called constructor.

58
00:03:39.879 --> 00:03:43.229
因此，您有此对象原型，它指向此对象，并且
So you have this object.prototype
which points at this object, and

59
00:03:43.229 --> 00:03:46.159
如果你有那个物体然后说这个 .
if you had that object and
then said .constructor,

60
00:03:46.159 --> 00:03:51.810
它会指向这个对象函数，就像对象
it'd be pointing back at this
object function as if the object

61
00:03:51.810 --> 00:03:56.949
函数是指向它的对象的构造函数。
function was the constructor of
the object that pointed to it.

62
00:03:58.520 --> 00:04:03.310
但基本原型中的工作构造函数
But that work constructor in
the fundamental prototype

63
00:04:03.310 --> 00:04:06.990
系统的含义并不比 " fifar" 一词更有意义。
system has no more meaning
than the word fubar.

64
00:04:06.990 --> 00:04:09.020
除了说服你之外
Other than to convince you,

65
00:04:09.020 --> 00:04:13.490
这是一个类系统，因为它有构造函数，我们会看到一些
that this is a class system because it has
constructors in it and we will see a bit

66
00:04:13.490 --> 00:04:18.449
后来这就是构造函数基本上是这样做的
later that's what constructor
basically comes in and pretends it,

67
00:04:18.449 --> 00:04:22.279
如果你愿意的话它会帮助你的建筑我们正在处理一个阶级制度
it helps the artifice if you will,
that we are dealing with a class system.

68
00:04:23.829 --> 00:04:26.470
所以我们的零线环境
So that our line zero environment.

69
00:04:26.470 --> 00:04:29.339
现在我要用同样的符号重新开始 diagring
Now I'm gonna start diagraming
again with the same notation but

70
00:04:29.339 --> 00:04:31.170
我要从第一条开始
I'm gonna start with line one.

71
00:04:31.170 --> 00:04:34.090
第一条我们有一个工作坊的功能
On line one, we have a workshop function,

72
00:04:34.090 --> 00:04:38.584
我要画一个圆圈叫做工作坊
do I'm gonna draw a circle and
it's called workshop.

73
00:04:38.584 --> 00:04:40.829
但我只会为工作坊缩略词
But I'm just gonna abbreviate w for
workshop.

74
00:04:42.409 --> 00:04:44.870
这就是第一个存在的功能。
That's the function that
exists on line one.

75
00:04:44.870 --> 00:04:48.750
但也有第一个存在的，不明显的，
But also what exists on line one,
that is not obvious,

76
00:04:48.750 --> 00:04:54.569
是由于第二行的结果而创建的另一个对象。
is that there is another object that has
been created as a result of line one and

77
00:04:54.569 --> 00:04:57.680
这个物体也很重要。
that object is also pretty important.

78
00:04:57.680 --> 00:05:01.230
现在是空的但这会起到非常重要的作用
At the moment it's empty but it's
gonna serve a pretty important purpose

79
00:05:01.230 --> 00:05:03.738
但重要的是我们没有好的名字
except it's so important that we
don't have a good name for it.

80
00:05:04.920 --> 00:05:10.569
所以我们用它的属性来引用它。
And so we refer to it by
the property that points at it.

81
00:05:10.569 --> 00:05:12.879
我打赌你能猜到那房产叫什么
And I bet you can guess what
that property's called?

82
00:05:12.879 --> 00:05:17.391
这个产业被称为 proto，原型机，好吗 ?
That property's called proto,
prototype, okay?

83
00:05:20.555 --> 00:05:22.062
>> Kyle Simpson: 我可能正在使用文本工具，
&gt;&gt; Kyle Simpson: I could
probably be using the text tool,

84
00:05:22.062 --> 00:05:24.605
但我不想在工具间切换
but I just didn't wanna mess around
with switching between tools.

85
00:05:24.605 --> 00:05:26.589
这就是所谓的雏形。
So that's called prototype.

86
00:05:26.589 --> 00:05:29.899
因此，我们将该对象称为 workshop.prototype，
So we refer to that object
as workshop.prototype,

87
00:05:29.899 --> 00:05:33.540
这就是您在第四行 workshop.prototype上看到的内容。
which is what you see on line four,
workshop.prototype.

88
00:05:33.540 --> 00:05:36.899
这是个诡异的词比如样机都是从哪里来的
It's a bizarrely named word like
where does prototype even come from?

89
00:05:36.899 --> 00:05:40.659
我尝试在计算机科学中寻找原型的起源
I've tried to search for the origins of
prototype within computer science, and

90
00:05:40.659 --> 00:05:43.939
它是一个模糊的 etymology
it's a murky etymology at best.

91
00:05:43.939 --> 00:05:47.093
我查不到我们为什么要用这个词原型
I can't come up with why we
use this word prototype or

92
00:05:47.093 --> 00:05:49.180
这都是什么意思
what it's even supposed to mean.

93
00:05:49.180 --> 00:05:52.409
但这条线路上还有另外一件事
But there is one other thing
that exist on this line one,

94
00:05:52.409 --> 00:05:55.571
这里有一个从这里到这里的联系
which is that there is a linkage
from here back to here,

95
00:05:55.571 --> 00:06:00.067
有一个属性指向，一个也叫做构造函数。
there is a property pointing back, and
that one is also called constructor.

96
00:06:02.754 --> 00:06:07.134
>> 凯尔 - 辛普森: 再一次，这只是为了假装
&gt;&gt; Kyle Simpson: And again, that exist
only for the purpose of trying to pretend

97
00:06:07.134 --> 00:06:11.595
对你来说，那个物体是由工作坊的功能产生的，
to you that, that object was
created by the workshop function,

98
00:06:11.595 --> 00:06:15.660
就像工作室函数是类的构造函数一样。
as if the workshop function
is a constructor for classes.

99
00:06:17.610 --> 00:06:22.399
还有一个最后的东西存在一个隐藏的关系
And one final thing that exists,
there is a hidden relationship

100
00:06:22.399 --> 00:06:26.629
在此对象与此对象之间。
between this object and this object.

101
00:06:27.759 --> 00:06:30.798
如果我能用一条点线就能做到
I'm gonna do it, if I can,
with a dotted line.

102
00:06:33.860 --> 00:06:36.050
这两者之间有着隐藏的关系
There's a hidden relationship
between those two.

103
00:06:37.579 --> 00:06:39.600
我们待会儿再联系
We'll come back to that
relationship later.

104
00:06:39.600 --> 00:06:41.670
但这都是第一行的结果
But all that's a result of line one.

105
00:06:42.870 --> 00:06:44.504
你跟踪我吗
You follow me?

106
00:06:44.504 --> 00:06:46.043
好了我们走第四线
All right, let's move to line four.

107
00:06:46.043 --> 00:06:47.678
我们稍后再回来
We'll come back to two later.

108
00:06:47.678 --> 00:06:48.899
我们走第四行
Let's move to line four.

109
00:06:48.899 --> 00:06:54.216
在第四行，我们创建属性并将其添加到 workshop.prototype。
On line four, we make a property and
add it to workshop.prototype.

110
00:06:54.216 --> 00:06:56.740
这并不重要，因为它是这个案件的功能。
It doesn't matter that it's
a function at this case.

111
00:06:56.740 --> 00:06:58.403
所以我要把它写好
So I'm just gonna literally write it in.

112
00:06:58.403 --> 00:07:04.028
我们只是在添加一个被称为直接询问这个对象的属性。
We're just adding a property called
ask directly to this object.

113
00:07:06.939 --> 00:07:08.283
你和我一起吗
You with me?

114
00:07:08.283 --> 00:07:09.737
第四行就是这样
That's what line four does.

115
00:07:09.737 --> 00:07:11.519
我们要跳八行
We'll skip down to line eight.

116
00:07:11.519 --> 00:07:13.420
这才是真正有趣的。
That's what's really interesting.

117
00:07:13.420 --> 00:07:16.170
我想看如果你想拉上一张幻灯片
And I wanna review,
if you wanna pull up a slide or

118
00:07:16.170 --> 00:07:20.220
翻到你的幻灯片里有 4 件事情发生在
flip back in your slides, there were
four things that happened whenever

119
00:07:20.220 --> 00:07:24.639
新的运营商被放在一个功能调用的前面，就在第 8 行上。
the new operator was put in front of a
function call the way it is on line eight.

120
00:07:24.639 --> 00:07:28.819
现在我们想做这四种事情，我要把它们每个都做个图表。
Now we want to do those four things and
I'm gonna diagram each one of them.

121
00:07:28.819 --> 00:07:32.250
第一，第一件事发生在新事物的前方
So number one, the first thing that
happens when new is put in front of

122
00:07:32.250 --> 00:07:36.699
函数调用是它在瘦空气中创建全新的空对象。
a function call is that it creates
a brand new empty object out of thin air.

123
00:07:38.120 --> 00:07:41.029
这是我的全新的空物体。
So here is my brand new empty
object out of thin air.

124
00:07:42.370 --> 00:07:46.949
然后它将该对象链接到另一个对象。
And then it links that
object to another object.

125
00:07:46.949 --> 00:07:48.790
所以我要跟你联系
So here I'm gonna do a linkage,

126
00:07:50.100 --> 00:07:52.779
与点线的隐藏联系
this little hidden linkage
with the dotted line.

127
00:07:54.000 --> 00:07:56.750
它将该对象链接到另一个对象。
It links that object to another object.

128
00:07:58.779 --> 00:07:59.810
第三个
Number three.

129
00:07:59.810 --> 00:08:02.910
它调用它在前面调用的函数。
It invokes the function that
it was called in front of.

130
00:08:02.910 --> 00:08:05.910
它调用此关键字指向对象。
It invokes that with the this
keyword pointing at the object.

131
00:08:05.910 --> 00:08:08.855
所以现在我要搬去第二线了
So here we are, now,
I'm gonna move to line two, and

132
00:08:08.855 --> 00:08:13.819
这个关键字指向这个特定对象，它是干什么的 ?
the this keyword is pointing at this
particular object, and what does it do?

133
00:08:13.819 --> 00:08:18.779
加上一个叫老师的，所以我们要把老师
It adds a property called teacher,
so we're gonna put teacher

134
00:08:18.779 --> 00:08:24.343
直接把它放在这里我就用它来缩写
directly right here on it, and
I'm just gonna abbreviate that with t-e-a.

135
00:08:25.779 --> 00:08:27.990
我们把老师直接放在那个对象上。
We put teacher directly on that object.

136
00:08:27.990 --> 00:08:29.480
这就是第二行
That's what line two does.

137
00:08:29.480 --> 00:08:31.470
每个人都跟踪我吗
Everybody following me?

138
00:08:31.470 --> 00:08:36.525
现在这个新关键词的第四个也是最后一个，当它回来的时候，
Now the fourth and final that the new
keyword does, when it returns it back,

139
00:08:36.525 --> 00:08:41.423
如果该函数不返回对象，那么在此情况下它不返回。
if the function does not return an object,
which in this case it does not,

140
00:08:41.423 --> 00:08:46.716
新关键字假定您打算返回到此关键字，即
the new keyword assumes that you meant to
return to the this keyword, that brand

141
00:08:46.716 --> 00:08:51.640
新创建的对象，使其返回并获取名为 deepJS的名称。
new created object so that's get
returned back and it gets named deepJS.

142
00:08:51.640 --> 00:08:57.224
因此，此对象称为 deepJS。
So this object is called deepJS.

143
00:08:57.224 --> 00:08:58.490
我会叫它深的
I'll call it deep.

144
00:09:03.500 --> 00:09:06.519
这就是第 8 行的情况如果你能理解
That's what happened with line eight and
if you understand what happened with line

145
00:09:06.519 --> 00:09:09.470
八条一模一样的事发生在第九行
eight the exact same thing
happens with line nine.

146
00:09:09.470 --> 00:09:10.942
所以我就把它画了
So I'll simply draw it in.

147
00:09:22.770 --> 00:09:25.679
>> 凯尔 - 辛普森: 我的绘画越来越差。
&gt;&gt; Kyle Simpson: My drawing
is getting much worse.

148
00:09:25.679 --> 00:09:30.549
然后把老师的财产加给它然后它又回来了
And then it gets the teacher property
added on to it and it comes back and

149
00:09:30.549 --> 00:09:33.190
这件案子是反动分子的
it's called in this case reactJS.

150
00:09:33.190 --> 00:09:37.320
所以我只对反动分子说 R - e
So I'll just say R-e for reactJS.

151
00:09:37.320 --> 00:09:39.389
那是第九行的对象
That's that object from line nine.

152
00:09:39.389 --> 00:09:41.799
每个人都知道这些实体是从哪里来的
Everybody understand where these
entities are coming from and

153
00:09:41.799 --> 00:09:43.330
他们的关系是什么
what their relationships are?

154
00:09:43.330 --> 00:09:46.429
好，让我们来看第 11 行。
Okay, so let's look at line 11.

155
00:09:46.429 --> 00:09:51.163
在该代码片段的第 11 行，我们说 deepJS.ask。
On line 11 of that code snippet,
we say deepJS.ask.

156
00:09:52.686 --> 00:09:56.929
deepJS 对象，此对象在此处，是否具有请求方法?
Does the deepJS object, this object
right here, does it have an ask method?

157
00:09:58.529 --> 00:09:59.029
没有。
It does not.

158
00:10:00.309 --> 00:10:03.750
那么为什么我们可以称之为 " 方法 " 呢 ?
So why is it that we're
able to call that method?

159
00:10:03.750 --> 00:10:06.919
因为我们的心理模式
Because our mental model if we were
thinking about these as classes

160
00:10:06.919 --> 00:10:10.929
即会将该请求方法复制到该实例，但它不在该实例中。
is that the ask method would have been
copied to the instance but it isn't there.

161
00:10:12.519 --> 00:10:17.409
相反，会发生的是内部联系，叫做
Instead, what is gonna happen is that
internal linkage, which is called

162
00:10:17.409 --> 00:10:22.960
原型链，在 Speck ，它们使用支架，支架原型。
the prototype chain, in Speck,
they use bracket, bracket prototype.

163
00:10:22.960 --> 00:10:27.725
它叫做原型链，内部就有一个链接。
It's called the prototype chain, and
so internally there's a linkage from

164
00:10:27.725 --> 00:10:31.330
就在这个物体上的深处
the deep object, this one right here,
up to this object.

165
00:10:31.330 --> 00:10:34.179
所以当我们寻找一个物体上的
So when we look for
a property on an object and

166
00:10:34.179 --> 00:10:38.349
它不存在，缺省情况下，我们所做的做是做的。
it doesn't exist, by default,
what we do is do do do do do do do.

167
00:10:38.349 --> 00:10:42.461
我们向链条上的下一个物体
We walk up one level to the next
object in the chain and

168
00:10:42.461 --> 00:10:44.903
我们会问它是否有这一特性
we ask if it has that property.

169
00:10:44.903 --> 00:10:46.129
在这件案子里是这样
Which in this case, it does.

170
00:10:46.129 --> 00:10:47.960
它有一个要求的方法。
It has an ask method.

171
00:10:47.960 --> 00:10:52.621
当我们援引第 5 行的提问方法时
When we invoke the ask method,
which was line five essentially,

172
00:10:52.621 --> 00:10:55.519
这个关键词是什么意思
what is the this keyword gonna point at?

173
00:10:57.730 --> 00:11:00.029
此关键字要指向哪个对象 ?
Which object is the this
keyword gonna point at?

174
00:11:01.169 --> 00:11:03.179
它会指向这个物体
It's gonna point at this object.

175
00:11:03.179 --> 00:11:03.679
为甚么呢 ?
Why?

176
00:11:04.940 --> 00:11:06.990
因为呼叫站点是第 11 行。
Because the call site is line 11.

177
00:11:06.990 --> 00:11:11.629
调用站点在 deepJS 上下文中调用该函数。
The call site says invoke that
function in the context of deepJS.

178
00:11:11.629 --> 00:11:13.940
我们从哪里找到它的功能并不重要。
It doesn't matter where we
find the function from.

179
00:11:13.940 --> 00:11:16.960
在这种情况下，我们发现了它的原型链，但这并不重要。
In this case, we found it up the prototype
chain, but it doesn't matter,

180
00:11:16.960 --> 00:11:20.399
我们还是用这个调用点来调用它。
we still use the call site to invoke it.

181
00:11:20.399 --> 00:11:25.100
你没有习惯用 JavaScript 的管道来思考这个问题。
You're not used to generally thinking this
deep about the plumbing of JavaScript.

182
00:11:25.100 --> 00:11:30.070
但我认为这很重要，关键是你没有不正确的思维模式。
But I think it's important, critical that
you not have incorrect models of thinking.

183
00:11:32.279 --> 00:11:35.120
好吧好吧 如果我们能用 deepJS 说的话
All right.
So if we can say that with deepJS,

184
00:11:35.120 --> 00:11:38.519
我们也可以用反应对象说
we can also say that
with the react object.

185
00:11:38.519 --> 00:11:43.179
当我们说的时候，第 14 行的反应对象会发生同样的事情。
The react object on line 14 when we say
.ask, the exact same thing happens.

186
00:11:43.179 --> 00:11:46.279
我们没有一个问题的方法，但我们确实做了。
We don't have an ask method but
we go do do do do do do.

187
00:11:46.279 --> 00:11:50.929
我们在调用的时候发现了这个方法，就是这个关键词指我们
We find the ask method when it is invoked,
it's this keyword is pointing out our

188
00:11:50.929 --> 00:11:54.769
对象，那么当它说这个.师资时，它是在访问哪个属性 ?
object so when it says this .teacher
which property is it accessing?

189
00:11:56.230 --> 00:11:57.058
就在这儿
This one right here.

190
00:11:59.278 --> 00:12:01.320
>> 凯尔 - 辛普森: 太好了吗 ?
&gt;&gt; Kyle Simpson: That's awesome right?

191
00:12:01.320 --> 00:12:05.638
我们可以共享一个方法可能有无限数量的
We're able to share one method with
potentially an infinite number of

192
00:12:05.638 --> 00:12:10.760
这些实例和它们都能够共享它，因为这种绑定行为和
instances and they're all able to share it
because of the this binding behavior and

193
00:12:10.760 --> 00:12:12.389
原型链接。
that prototype linkage.

194
00:12:13.879 --> 00:12:16.000
它其实是一个非常棒的系统。
It's actually a really awesome system.

195
00:12:16.000 --> 00:12:17.924
我不是说这个样机
I'm not at all saying
that the prototype or

196
00:12:17.924 --> 00:12:22.500
这个关键词系统不好，我只是说可能也有点
the this keyword system is bad, I'm
only saying that maybe it's a little too

197
00:12:22.500 --> 00:12:26.070
限制只通过班级的镜头来思考这个问题
limiting to try to think about this
only through the lens of classes.

198
00:12:27.169 --> 00:12:31.610
也许这个系统实际上比分类设计模式大得多。
Maybe the system is actually much more
powerful than the class design pattern.

199
00:12:31.610 --> 00:12:37.490
如果切换到下一个幻灯片，您将看到建筑物的图。
If you switch to your next slide you'll
see the diagram of the buildings.

200
00:12:38.539 --> 00:12:42.490
现在我要切换回幻灯片了
And I'm gonna switch back
to the slides now, so

201
00:12:42.490 --> 00:12:47.960
如果你想把它复制下来或者把它复制下来就好了我的小画图
if you wanna copy this down or not copy it
down that's okay, my little bad drawing.

202
00:12:47.960 --> 00:12:51.889
但现在至少你知道其中一些基本行为正在发生
But now at least you understand where some
of those fundamental behaviors are coming

203
00:12:51.889 --> 00:12:53.450
啊，这些关系都是来的。
from, those relationships are coming from.
