WEBVTT

1
00:00:00.130 --> 00:00:03.980
>> 演讲者 1: 我们一直在讨论编译阶段的功能，
&gt;&gt; Speaker 1: We've been talking about
functions in the compilation phase,

2
00:00:03.980 --> 00:00:10.250
将其标识添加为外层作用域中的彩色大理石。
adding their identifier as a colored
marble in the enclosing scope.

3
00:00:10.250 --> 00:00:13.720
在这个例子中，我们有一个功能老师，
In this example,
we have a function teacher on line one,

4
00:00:13.720 --> 00:00:15.567
什么颜色的大理石老师
what color marble is teacher gonna be?

5
00:00:15.567 --> 00:00:16.532
>> 扬声器 2: 红色。
&gt;&gt; Speaker 2: Red.

6
00:00:16.532 --> 00:00:18.780
>> 扬声器 1: 红色，好的。
&gt;&gt; Speaker 1: Red, okay.

7
00:00:18.780 --> 00:00:21.510
但让我们看第三行，因为线看起来有点不同。
But let's look at line three because
line looks a little bit different.

8
00:00:21.510 --> 00:00:24.379
第三行可能看起来更像一些函数
And line three might look a little bit
more like some of the functions that

9
00:00:24.379 --> 00:00:27.230
你见过更常见的
you've seen more commonly.

10
00:00:27.230 --> 00:00:30.699
看到旧的学校功能装饰也许有点不太常见
It's maybe a little less common to see
the old school function decoration,

11
00:00:30.699 --> 00:00:34.409
虽然我更喜欢功能装饰只是为了记录
although I strongly prefer function
decorations just for the record.

12
00:00:34.409 --> 00:00:39.320
但现在大多数人都喜欢声明变量和
But most people seem to like these
days to declare variables and

13
00:00:39.320 --> 00:00:43.770
将函数分配给它们，通常它们甚至使用常量而不是变量。
assign functions to them and usually they
even use a constant instead of a var.

14
00:00:43.770 --> 00:00:46.810
这看起来有点像你最近看到的。
So that might look a little bit
like what you've seen recently.

15
00:00:46.810 --> 00:00:48.231
所以在那里发生了什么
So what's happening there and

16
00:00:48.231 --> 00:00:50.918
跟第一个的情况有什么不同吗
is it any different than what's
happening with line one?

17
00:00:50.918 --> 00:00:55.881
嗯，记住，编译时发生的事有区别
Well, remember, there is a difference
between what can happen at compile time

18
00:00:55.881 --> 00:00:58.334
以及执行时可能发生的情况。
and what can happen at execution time.

19
00:00:58.334 --> 00:01:02.731
因此，我们知道将会创建名为 myTeacher 的标识，并且
So, we do know that an identifier called
myTeacher is going to be created and

20
00:01:02.731 --> 00:01:04.668
那是什么颜色的大理石
what color marble is it gonna be?

21
00:01:04.668 --> 00:01:05.439
>> 扬声器 2: 红色。
&gt;&gt; Speaker 2: Red.

22
00:01:05.439 --> 00:01:07.262
>> 扬声器 1: 将是红色的。
&gt;&gt; Speaker 1: It's gonna be red.

23
00:01:07.262 --> 00:01:10.701
我们知道那里有个叫阳极老师的功能，所以
We do know that there's a function
called anotherTeacher there, so

24
00:01:10.701 --> 00:01:12.789
我们至少得为它创造一个桶
we need to create a bucket for
it at least.

25
00:01:12.789 --> 00:01:14.700
我们得做个蓝色的水桶
We need to make a blue bucket.

26
00:01:14.700 --> 00:01:18.069
但是因为那个功能不是一个宣言，
But because that function
is not a declaration,

27
00:01:18.069 --> 00:01:21.439
我们不会以同样的方式处理它的大理石颜色
we're not gonna handle its
marble color in the same way.

28
00:01:22.840 --> 00:01:26.460
这里的关键区别在于 " 老师 " 的标识符
The key difference here is that
the anotherTeacher identifier,

29
00:01:26.460 --> 00:01:31.400
就在 3 号线上那个标识将以大理石的身份结束
the one right here on line three, that
identifier is going to end up as a marble

30
00:01:31.400 --> 00:01:35.049
但它会是一个不同颜色的大理石
at compile time but it's gonna be a
different colored marble than you expect.

31
00:01:35.049 --> 00:01:38.129
不是红色的大理石是蓝色的大理石
It's not a red marble, it's a blue marble.

32
00:01:39.150 --> 00:01:40.870
所以这里有一个关键的区别。
So there is a key difference here.

33
00:01:40.870 --> 00:01:45.526
这称为函数表达式，与第一行的函数表达式相反，
This is called a function expression
as opposed to what line one is,

34
00:01:45.526 --> 00:01:47.989
称为函数声明。
is called a function declaration.

35
00:01:47.989 --> 00:01:52.670
还有一个关键的差异，我们会在整个过程中看到更多的
And one of the key differences, and
we'll see more throughout the course but

36
00:01:52.670 --> 00:01:56.418
函数声明和函数声明之间的键差异之一
one of the key differences
between function declarations and

37
00:01:56.418 --> 00:02:00.813
函数表达式，是函数声明及其名称，
function expressions, is that
function declarations and their name,

38
00:02:00.813 --> 00:02:05.783
他们把大理石附在封闭的范围内，所以我们在第一条线上制作了一个红色的大理石
they attach their marble to the enclosing
scope, so we make a red marble on line one

39
00:02:05.783 --> 00:02:10.207
而函数表达式会将其大理石添加到自己的作用域中。
whereas function expressions will
add their marble to their own scope.

40
00:02:12.019 --> 00:02:15.800
>> 扬声器 1: 蓝色的范围是蓝色大理石another教师节结束的地方。
&gt;&gt; Speaker 1: So the blue scope is where
the blue marble anotherTeacher ends up.

41
00:02:18.389 --> 00:02:21.532
>> 扬声器 1: 这就是第 4 行的原因，我们可以在 " 老师 " 中引用，因为
&gt;&gt; Speaker 1: That's why on line four,
we can reference in anotherTeacher because

42
00:02:21.532 --> 00:02:24.979
事实上有个蓝色的大理石叫做 " 老师"
there is in fact a blue
marble called anotherTeacher.

43
00:02:24.979 --> 00:02:28.930
但是在 9 号线路上就没有老师了吧
But down on line nine,
there is no anotherTeacher, is there?

44
00:02:30.349 --> 00:02:31.750
当我们在全球范围之外
When we're out in the global scope and

45
00:02:31.750 --> 00:02:35.750
我们问你这个红色大理石的全球范围它会说不
we asked global scope you ever heard of
this red marble, it's gonna say nope,

46
00:02:35.750 --> 00:02:40.849
从没听说过那个红色的大理石和我们要做什么参考错误
never heard of that red marble and what
we're gonna get there, reference error.

47
00:02:41.939 --> 00:02:45.349
所以关键的区别，函数表达式，
So key difference, function expressions,

48
00:02:45.349 --> 00:02:48.859
把你的范围确定为自己的范围
put there identify your
into their own scope.

49
00:02:48.859 --> 00:02:49.840
有一点细微差别
There's a little nuance.

50
00:02:49.840 --> 00:02:51.009
让我暂时回答这个问题。
Let me get to that question in a moment.

51
00:02:51.009 --> 00:02:54.879
还有一点额外的细微差别不仅仅是蓝色的
There's a little, also, additional
nuance which is not only does that blue

52
00:02:54.879 --> 00:02:58.969
云石出现在蓝色的范围内，但它也是只读的。
marble show up in the blue scope but
it's also read only.

53
00:03:00.180 --> 00:03:03.349
您不能在第四行上重新分配 antherTeacher 。
You cannot reassign
anotherTeacher on line four.

54
00:03:03.349 --> 00:03:05.218
您无法将其重新分配给某个其他值。
You could not reassign
it to some other value.

55
00:03:06.229 --> 00:03:07.199
你有问题吗
You have a question, yes?

56
00:03:07.199 --> 00:03:07.960
>> 演讲者 2: 为什么要这样做 ?
&gt;&gt; Speaker 2: Why would you do this?

57
00:03:07.960 --> 00:03:11.449
你为什么要在你的右边
Why would you actually have the named
function on the right side of

58
00:03:11.449 --> 00:03:12.471
那个表情
that expression?

59
00:03:12.471 --> 00:03:16.112
> > 演讲者 1: 你可能在那里更常看到它是一个匿名的功能
&gt;&gt; Speaker 1: You've probably more often
seen it as an anonymous function there,

60
00:03:16.112 --> 00:03:20.699
我们即将讨论所谓的所谓函数之间的区别
and we're about to discuss the difference
between what are so-called named function

61
00:03:20.699 --> 00:03:24.368
表达式和更常见的匿名函数表达式。
expressions, and the more common
anonymous function expression.

62
00:03:24.368 --> 00:03:26.849
好吧那我们一会儿就开始吧
Okay, so
we'll get into that in just a moment.

63
00:03:26.849 --> 00:03:30.659
好的 segue，我们谈谈命名函数表达式。
So great segue, let's talk about
named function expressions.

64
00:03:32.599 --> 00:03:34.050
什么是命名函数表达式?
What is a named function expression?

65
00:03:34.050 --> 00:03:35.275
我们很有创意
We're super creative,

66
00:03:35.275 --> 00:03:38.610
这意味着一个被赋予名字的函数表达式，好吗 ?
that means a function expression
that's been given a name, okay?

67
00:03:38.610 --> 00:03:40.719
让我们看看这两个。
So let's look at these two.

68
00:03:40.719 --> 00:03:43.219
第一条我要声明一个函数表达式
Line one,
I'm declaring a function expression.

69
00:03:43.219 --> 00:03:44.549
为什么它是函数表达式?
Why is it a function expression?

70
00:03:47.062 --> 00:03:48.430
>> 扬声器 2: 已分配给变量吗 ?
&gt;&gt; Speaker 2: It's assigned to a variable?

71
00:03:48.430 --> 00:03:50.689
>> 扬声器 1: 因为它不是函数声明，
&gt;&gt; Speaker 1: Because it's
not a function declaration,

72
00:03:50.689 --> 00:03:53.329
我们怎么知道什么是功能声明
how do we know if something's
a function declaration

73
00:03:53.329 --> 00:03:57.039
如果单词函数是语句中的第一个词吗 ?
if the word function is literally
the first thing in the statement?

74
00:03:58.389 --> 00:04:03.491
所以如果这不是声明中的第一个问题的话
So if it's not the first thing in
the statement, if there's a variable or

75
00:04:03.491 --> 00:04:09.021
一个运算符或括号什么的，那不是声明，是吗 ?
an operator or parentheses or anything,
then it's not a declaration, it is?

76
00:04:09.021 --> 00:04:10.497
>> 扬声器 2: 表达式。 >> 扬声器 1: 表达式，因此
&gt;&gt; Speaker 2: An expression.
&gt;&gt; Speaker 1: An expression, so

77
00:04:10.497 --> 00:04:14.430
在第一行，我们看到一个函数表达式，但是我们没有看到任何名称。
on line one, we see a function expression,
but we see no name.

78
00:04:14.430 --> 00:04:17.990
这叫做匿名函数表达式
So that's called a anonymous
function expression,

79
00:04:17.990 --> 00:04:22.519
而第五行的则是命名函数表达式。
whereas the one on line five is
a named function expression.

80
00:04:22.519 --> 00:04:25.550
因此，将函数表达式与
So setting aside the difference
between function expressions and

81
00:04:25.550 --> 00:04:27.170
声明是暂时的
declarations for a moment.

82
00:04:27.170 --> 00:04:31.007
在这里我只想把注意力集中到
Here, I just wanna focus our
attention to the difference between

83
00:04:31.007 --> 00:04:35.000
匿名函数表达式和命名函数表达式。
anonymous function expressions and
named function expressions.

84
00:04:35.000 --> 00:04:39.182
我想说的是尽管匿名的功能
And what I'm gonna claim is that
even though anonymous function

85
00:04:39.182 --> 00:04:43.598
表达方式更普遍，更受欢迎，
expressions are vastly more common,
vastly more popular In fact,

86
00:04:43.598 --> 00:04:48.019
大多数人甚至都没见过命名函数的表达方式
most of you have maybe never even
seen a named function expression.

87
00:04:48.019 --> 00:04:52.069
这就是不寻常和不受欢迎的情况。
And that's how uncommon and
unpopular it is.

88
00:04:52.069 --> 00:04:59.129
我要声明你应该永远的， 100%，零例外。
I'm going to make the claim that you
should always, 100%, zero exception.

89
00:04:59.129 --> 00:05:02.834
我没有太多的陈述是绝对的 100%
I don't make very many statements
that are that absolute, 100%,

90
00:05:02.834 --> 00:05:06.480
零异常，您应该更喜欢指定的函数表达式，
zero exceptions, you should prefer
the named function expression,

91
00:05:06.480 --> 00:05:08.720
在匿名函数表达式中。
over the anonymous function expression.
