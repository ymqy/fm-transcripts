WEBVTT

1
00:00:00.110 --> 00:00:03.759
&gt；&gt；Kyle Simpson：顺便说一下，这个原型系统，一点也不差。
&gt;&gt; Kyle Simpson: By the way, this prototype system, not bad at all.

2
00:00:03.759 --> 00:00:09.210
这是令人难以置信的独角兽设计，非常强大。
It's incredibly amazingly unicorn design, it's very powerful.

3
00:00:09.210 --> 00:00:11.960
这只是一种与类不同的设计模式。
It's just a different design pattern than classes.

4
00:00:13.060 --> 00:00:17.260
这是一种不同的设计模式，称为委托。
It's a different design pattern which is called delegation.

5
00:00:17.260 --> 00:00:19.800
顺便说一下，这个学期不是我编的。
Now, I didn't make up this term, by the way.

6
00:00:19.800 --> 00:00:23.769
很长时间以来，我一直在研究原型系统以及这些东西是如何工作的。
I've been studying the prototype system and how these things work for a long time.

7
00:00:23.769 --> 00:00:28.350
我没有编造代表团，我所做的是我理解，我打破了
I didn't make up delegation, what I did was I understood, I broke

8
00:00:28.350 --> 00:00:32.299
把JavaScript工作原理和链接的所有部分都写下来，它不是复制的。
down all the pieces of how JavaScript works and the linkages and it's not copy.

9
00:00:32.299 --> 00:00:35.250
我建立了这个系统的心理模型
And I built up this mental model of the system and

10
00:00:35.250 --> 00:00:39.049
然后有一天，我只是在网上冲浪，试图研究一些东西
then one day, I was just surfing on the internet trying to research stuff and

11
00:00:39.049 --> 00:00:44.259
我浏览了一个维基百科的页面，叫做委派，然后
I ran across a Wikipedia page called Delegation, and

12
00:00:44.259 --> 00:00:47.270
我开始阅读这种名为委托的设计模式。
I started reading about this design pattern called Delegation.

13
00:00:48.759 --> 00:00:53.869
我就想，这听起来真的，真的很熟悉。
And I was like, that sounds really, really, really familiar.

14
00:00:55.200 --> 00:00:58.929
灯泡时刻，这就是JavaScript。
The light bulb moment, that's what JavaScript is.

15
00:00:58.929 --> 00:01:01.159
这个词不是我发明的。
I didn't invent the term.

16
00:01:01.159 --> 00:01:03.570
委派或行为委派。
Delegation or behavior delegation.

17
00:01:03.570 --> 00:01:05.459
我刚刚把苹果叫做苹果。
I just called an apple an apple.

18
00:01:07.030 --> 00:01:09.530
这就是JavaScript的系统。
That's what JavaScript's system is.

19
00:01:09.530 --> 00:01:13.560
它的原型系统是一个委托系统，而不是一个类系统。
Its prototype system is a delegation system, not a class system.

20
00:01:15.599 --> 00:01:19.438
如果您将委托和类视为不同的设计模式。
If you think about delegation and classes as different design pattern.

21
00:01:20.640 --> 00:01:23.109
与其说一个是坏的另一个是好的，
Rather than saying one is bad and the other is good,

22
00:01:23.109 --> 00:01:25.400
我不是说上课不好。
I'm not saying that classes are bad.

23
00:01:25.400 --> 00:01:30.103
我只是说他们不适合设计成一个代表团的系统
I'm just saying they don't fit in a system that was designed to be a delegation

24
00:01:30.103 --> 00:01:30.679
系统。
system.

25
00:01:31.878 --> 00:01:33.664
&gt；&gt；Kyle Simpson：我们一直在努力使它适合
&gt;&gt; Kyle Simpson: And we've been trying to make it fit and

26
00:01:33.664 --> 00:01:36.599
我们一直试着把它塞进去，然后用胶带把它粘起来。
we keep trying to shove it in there and duct tape it to make it fit.

27
00:01:37.689 --> 00:01:42.090
也许更有效的是说，嘿，系统，你是如何设计的？
And maybe the more effective thing is to say, hey, system, how are you designed?

28
00:01:42.090 --> 00:01:46.579
如果我用你实际工作的方式，我能和你一起做什么神奇的事情？
What amazing things can I do with you if I use the way that you actually work?

29
00:01:48.170 --> 00:01:50.599
这种想法并不是我独有的。
This thought is not unique to me.

30
00:01:50.599 --> 00:01:55.216
但是已经观察到，如果你在比较一个原型系统，
But it has been observed that, if you're comparing a prototypal system,

31
00:01:55.216 --> 00:02:00.197
一个委托系统，到一个类系统，原型系统实际上是
a delegation system, to a class system, that the prototypal system is actually

32
00:02:00.197 --> 00:02:03.370
明显比班级系统更强大。
significantly more powerful than a class system.

33
00:02:03.370 --> 00:02:08.114
这就是为什么，就好像原型系统是某种超集
And here's why, it is as if the prototypal system is sort of the super set and

34
00:02:08.114 --> 00:02:09.983
类系统是一个子集。
the class system is a subset.

35
00:02:09.983 --> 00:02:13.296
这是为什么，因为你可以实现一个类
And here's why, because you can implement a class

36
00:02:13.296 --> 00:02:18.689
系统在原型语言中，但您不能反之。
system inside of a prototypal language, but you cannot do the reverse.

37
00:02:18.689 --> 00:02:22.550
不能用面向类的语言实现原型系统。
You cannot implement a prototype system in a class-oriented language.

38
00:02:24.289 --> 00:02:28.729
所以我们选择了这个令人惊讶的强大的系统，并将其用于
So we chose to take this amazingly powerful system and use it in

39
00:02:28.729 --> 00:02:33.490
一个非常具体的方式，甚至不是一个特别好的系统使用。
one very specific way that's not even a particularly good usage of the system.

40
00:02:33.490 --> 00:02:35.579
然后我们花了20年的时间敲打我们的头
And then we spent 20 years banging our heads.

41
00:02:35.579 --> 00:02:38.266
为什么它不像在其他语言中那样工作呢？
Why doesn't this work like it does in other languages?

42
00:02:38.266 --> 00:02:43.175
我的反应是因为你做了错误的模式。
My response is because you're doing the wrong pattern.

43
00:02:43.175 --> 00:02:45.650
你可以上课。
You can do classes.

44
00:02:45.650 --> 00:02:49.449
你们中的一些人必须做类，因为你们使用的框架实现了这一点
And some of you have to do classes because you work with frameworks that make that

45
00:02:49.449 --> 00:02:50.850
你的选择。
choice for you.

46
00:02:50.850 --> 00:02:55.449
但我不想你做的是离开这个讨论好好思考，
But what I don't want you to do is walk away from this discussion thinking well,

47
00:02:55.449 --> 00:02:57.400
这是我唯一的选择。
it's my only option.

48
00:02:57.400 --> 00:02:59.069
这不是你唯一的选择。
It's not your only option.

49
00:02:59.069 --> 00:03:02.539
这个系统是存在的，而且还有很多未开发的潜力。
This system exists, and there's so much untapped potential.

50
00:03:02.539 --> 00:03:05.680
在我们最后一次在这个单元里，我想要探究的是，
And what I wanna dig into in our final time together in this unit,

51
00:03:05.680 --> 00:03:10.300
我想深入了解的是，如果我们把我们的授权放在一边，我们可以做些什么
what I wanna dig into is, what can we do with delegation if we set aside our

52
00:03:10.300 --> 00:03:14.849
类是唯一重要的设计模式的先入为主的观念？
preconceptions that classes are the only design pattern that matters?
