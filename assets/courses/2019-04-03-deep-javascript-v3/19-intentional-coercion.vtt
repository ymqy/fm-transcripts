WEBVTT

1
00:00:00.000 --> 00:00:03.484
>> 凯尔 - 辛普森: 有角落的例子，我们知道这就是现实，
&gt;&gt; Kyle Simpson: So there are corner
cases, we know that that's the reality,

2
00:00:03.484 --> 00:00:04.958
有角落的案子
there were corner cases.

3
00:00:04.958 --> 00:00:09.333
我们不处理任何语言的角落案件 JavaScript
We don't deal with corner cases in any
language but least of all, JavaScript,

4
00:00:09.333 --> 00:00:10.650
就能避免这种情况
by simply avoiding it.

5
00:00:10.650 --> 00:00:15.930
你不回避整个机制只需要解决几个角落的问题。
You don't avoid the whole mechanism just
to get around a couple of corner cases.

6
00:00:17.448 --> 00:00:21.237
>> Kyle Simpson: 您必须采用一种编码样式，使您的类型和
&gt;&gt; Kyle Simpson: You have to adopt
a coding style that makes your types and

7
00:00:21.237 --> 00:00:24.867
这些类型的值显而易见
the values that are in those
types plain and obvious,

8
00:00:24.867 --> 00:00:27.789
这才是唯一有效的方法
that's the only effective way to do this.

9
00:00:27.789 --> 00:00:30.024
有些人到目前为止还用了完整的系统
Some people goes so
far as to used whole type systems, and

10
00:00:30.024 --> 00:00:32.649
我们就会变得有点像 TypeScript 之类的东西
we'll get into that a little bit
later like TypeScript and stuff.

11
00:00:32.649 --> 00:00:37.268
我不认为你要走那么远但你可以采用一种编码方式
I don't think you have to go that far but
you can adopt a coding style which makes

12
00:00:37.268 --> 00:00:40.640
你所做的各种类型都是显而易见的
the kinds of types that you're
doing much more obvious.

13
00:00:40.640 --> 00:00:45.201
我声称一个质量好的 JavaScript 程序
I make the claim that a quality
JavaScript program is going to have to

14
00:00:45.201 --> 00:00:46.569
拥抱胁迫
embrace coercion.

15
00:00:46.569 --> 00:00:49.899
您必须确保每个操作所涉及的类型都是明确的。
You have to make sure that the types
involved in every operation are clear.

16
00:00:49.899 --> 00:00:53.828
这意味着你不应该设计这些
And by the way that means that you
shouldn't be designing all these

17
00:00:53.828 --> 00:00:57.197
可采取任何形式值的多态函数
polymorphic functions that can
take any sort of value and

18
00:00:57.197 --> 00:01:00.020
根据价值做 15 种不同的事情
do 15 different things
based upon the value.

19
00:01:00.020 --> 00:01:03.490
当你这么做的时候你要求的是胁迫问题
You're asking for
coercion problems when you do that and

20
00:01:03.490 --> 00:01:08.200
但我用了三级分我用了三等同物
then papering over them, but I used
the triple, I used the triple equals.

21
00:01:08.200 --> 00:01:11.045
为什么不只是设计一个只需要数字和
Why not just design a function
that only takes numbers and

22
00:01:11.045 --> 00:01:13.719
然后再做一个只需要字符串的函数吗
then make another function
that only takes strings?

23
00:01:13.719 --> 00:01:16.722
或者创建一个函数，该函数采用数字和字符串，并且
Or make a function that takes numbers and
strings, and

24
00:01:16.722 --> 00:01:19.525
很明显只能是这两类
it's very clear it can only
be those two types, and

25
00:01:19.525 --> 00:01:23.658
我知道我需要担心的是数字和字符串之间的关系。
I know what corner cases I have to worry
about between numbers and strings.

26
00:01:23.658 --> 00:01:27.715
我们可以选择更清楚地了解我们如何管理我们的类型，
We can choose to be more obvious
about how we manage our types,

27
00:01:27.715 --> 00:01:31.462
我们过载多少多态有多多态
how much we overload,
how polymorphic we make our code.

28
00:01:31.462 --> 00:01:35.209
因此，我们可以选择更多问题，或选择不存在问题。
We can opt in to more problems or
opt out of problems as a result.

29
00:01:37.308 --> 00:01:40.432
>> 凯尔 - 辛普森: 我想让你来的最大的外卖就是这些
&gt;&gt; Kyle Simpson: Biggest takeaway that
I want you to get here is that these

30
00:01:40.432 --> 00:01:44.552
是您计划的事实，并在您的权限范围内决定
are fact of your programs and it is
within your purview to decide how much or

31
00:01:44.552 --> 00:01:47.549
你会受到这些事实的影响
how little you're gonna be
affected by those facts.

32
00:01:51.400 --> 00:01:54.737
>> Kyle Simpson: 这并不意味着我们问题的唯一解决方案是
&gt;&gt; Kyle Simpson: That is not to suggest
that the only solution to our problem is

33
00:01:54.737 --> 00:01:59.259
一切都必须严格地说一切都是静态的
that everything have to rigidly,
everything's completely statically typed.

34
00:01:59.259 --> 00:02:04.105
我们要基本去写 Java 或者 C Plus Plus 好了
We have to just basically go write Java or
C Plus Plus so that we get some

35
00:02:04.105 --> 00:02:08.867
就像声音系统一样，是对这个问题的一个反应，
kind of like sound type system,
that is a reaction to this problem,

36
00:02:08.867 --> 00:02:12.575
这并不是我认为必要的反应。
it is not the the reaction
I think that is necessary.

37
00:02:12.575 --> 00:02:16.087
所以我在这里宣扬的信息是你可以学习这些系统
So the message I'm preaching here
is you can learn these systems,

38
00:02:16.087 --> 00:02:19.235
适当地使用它们并使它们在代码中很明显。
use them appropriately and
make them obvious in your code.

39
00:02:21.500 --> 00:02:24.731
>> 凯尔 - 辛普森: 我不认为这个打字系统是薄弱环节，
&gt;&gt; Kyle Simpson: I do not think that
this typing systems are weaknesses,

40
00:02:24.731 --> 00:02:28.739
我认为这是 JavaScript 最强大的特质之一。
I actually think this is one of
JavaScript's strongest qualities.

41
00:02:28.739 --> 00:02:33.463
这是一个无名英雄我认为这是 JavaScript 的原因之一
It's an unsung hero, I think it's
one of the reasons why JavaScript is

42
00:02:33.463 --> 00:02:37.560
这种无所不在的语言是因为它一直如此
the ubiquitous language that it
is today because it has been so

43
00:02:37.560 --> 00:02:40.429
对很多不同的用例都有问题
palatable to so many different use cases.

44
00:02:40.429 --> 00:02:45.413
第一种真正的多范式语言和一个重要的原因
The first truly multi-paradigm
language and a big reason why it has

45
00:02:45.413 --> 00:02:50.500
能够生存多重模式是因为它的类型系统。
been able to survive multi-paradigm
is because of its type system.

46
00:02:50.500 --> 00:02:53.258
这与我的每一个同龄人和
And that's completely opposite from
what every one of my peers and

47
00:02:53.258 --> 00:02:55.039
所有你听过的其他东西
everything else that you've ever heard.

48
00:02:55.039 --> 00:02:59.860
每个人都告诉你这是 JavaScript 最糟糕的部分
Everybody else has always told you this
is the worst part of JavaScript and

49
00:02:59.860 --> 00:03:04.848
我要把脚放下说这是最棒的部分
I'm gonna put my foot down and say it's
one of the best parts of JavaScript.

50
00:03:04.848 --> 00:03:07.270
如果你没在用它你的程序就没了
And if you're not using it,
your programs are missing out
