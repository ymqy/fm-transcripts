WEBVTT

1
00:00:00.000 --> 00:00:03.484
&GT；&GT；Kyle Simpson：所以有拐角案例，我们知道这是现实，
&gt;&gt; Kyle Simpson: So there are corner cases, we know that that's the reality,

2
00:00:03.484 --> 00:00:04.958
有拐角处的案子。
there were corner cases.

3
00:00:04.958 --> 00:00:09.333
我们不处理任何语言的角落情况，但最重要的是JavaScript，
We don't deal with corner cases in any language but least of all, JavaScript,

4
00:00:09.333 --> 00:00:10.650
通过简单地避免它。
by simply avoiding it.

5
00:00:10.650 --> 00:00:15.930
你不能为了绕过几个角落的案子而回避整个机制。
You don't avoid the whole mechanism just to get around a couple of corner cases.

6
00:00:17.448 --> 00:00:21.237
&gt；&gt；Kyle Simpson：您必须采用一种编码风格，使您的类型和
&gt;&gt; Kyle Simpson: You have to adopt a coding style that makes your types and

7
00:00:21.237 --> 00:00:24.867
这些类型的值简单明了，
the values that are in those types plain and obvious,

8
00:00:24.867 --> 00:00:27.789
这是唯一有效的方法。
that's the only effective way to do this.

9
00:00:27.789 --> 00:00:30.024
有些人甚至使用整个类型的系统，并且
Some people goes so far as to used whole type systems, and

10
00:00:30.024 --> 00:00:32.649
我们稍后会讨论这个问题，比如打印稿和其他东西。
we'll get into that a little bit later like TypeScript and stuff.

11
00:00:32.649 --> 00:00:37.268
我认为你不必走那么远，但你可以采用一种编码风格
I don't think you have to go that far but you can adopt a coding style which makes

12
00:00:37.268 --> 00:00:40.640
你正在做的类型更加明显。
the kinds of types that you're doing much more obvious.

13
00:00:40.640 --> 00:00:45.201
我声称一个高质量的JavaScript程序必须
I make the claim that a quality JavaScript program is going to have to

14
00:00:45.201 --> 00:00:46.569
接受强制。
embrace coercion.

15
00:00:46.569 --> 00:00:49.899
您必须确保每个操作中涉及的类型都是明确的。
You have to make sure that the types involved in every operation are clear.

16
00:00:49.899 --> 00:00:53.828
顺便说一句，这意味着你不应该设计所有这些
And by the way that means that you shouldn't be designing all these

17
00:00:53.828 --> 00:00:57.197
多态函数，可以采用任何类型的值和
polymorphic functions that can take any sort of value and

18
00:00:57.197 --> 00:01:00.020
根据价值做15件不同的事情。
do 15 different things based upon the value.

19
00:01:00.020 --> 00:01:03.490
当你这样做的时候你是在要求强制的问题
You're asking for coercion problems when you do that and

20
00:01:03.490 --> 00:01:08.200
然后用纸盖住它们，但我使用了三元组，我使用了三元组等于。
then papering over them, but I used the triple, I used the triple equals.

21
00:01:08.200 --> 00:01:11.045
为什么不只设计一个只接受数字和
Why not just design a function that only takes numbers and

22
00:01:11.045 --> 00:01:13.719
然后创建另一个只接受字符串的函数？
then make another function that only takes strings?

23
00:01:13.719 --> 00:01:16.722
或创建一个接受数字和字符串的函数，以及
Or make a function that takes numbers and strings, and

24
00:01:16.722 --> 00:01:19.525
很明显只能是这两种，而且
it's very clear it can only be those two types, and

25
00:01:19.525 --> 00:01:23.658
我知道在数字和字符串之间我必须担心哪些拐角处的情况。
I know what corner cases I have to worry about between numbers and strings.

26
00:01:23.658 --> 00:01:27.715
我们可以选择更明显的方式来管理我们的类型，
We can choose to be more obvious about how we manage our types,

27
00:01:27.715 --> 00:01:31.462
我们有多重载，我们使我们的代码有多形态化。
how much we overload, how polymorphic we make our code.

28
00:01:31.462 --> 00:01:35.209
我们可以选择解决更多的问题，也可以选择退出问题。
We can opt in to more problems or opt out of problems as a result.

29
00:01:37.308 --> 00:01:40.432
&gt；&gt；Kyle Simpson：我希望你在这里得到的最大收获是这些
&gt;&gt; Kyle Simpson: Biggest takeaway that I want you to get here is that these

30
00:01:40.432 --> 00:01:44.552
是你的计划的事实，它是在你的职权范围内决定多少或
are fact of your programs and it is within your purview to decide how much or

31
00:01:44.552 --> 00:01:47.549
这些事实对你的影响有多小。
how little you're gonna be affected by those facts.

32
00:01:51.400 --> 00:01:54.737
&gt；&gt；Kyle Simpson：这并不是说我们问题的唯一解决方案是
&gt;&gt; Kyle Simpson: That is not to suggest that the only solution to our problem is

33
00:01:54.737 --> 00:01:59.259
一切都必须严格，一切都是完全静态输入的。
that everything have to rigidly, everything's completely statically typed.

34
00:01:59.259 --> 00:02:04.105
我们基本上只需要去编写Java或C Plus，这样我们就可以得到一些
We have to just basically go write Java or C Plus Plus so that we get some

35
00:02:04.105 --> 00:02:08.867
有点像声音类型系统，这是对这个问题的反应，
kind of like sound type system, that is a reaction to this problem,

36
00:02:08.867 --> 00:02:12.575
我认为这不是必要的反应。
it is not the the reaction I think that is necessary.

37
00:02:12.575 --> 00:02:16.087
所以我在这里宣扬的信息是你可以学习这些系统，
So the message I'm preaching here is you can learn these systems,

38
00:02:16.087 --> 00:02:19.235
适当地使用它们，并使它们在代码中变得明显。
use them appropriately and make them obvious in your code.

39
00:02:21.500 --> 00:02:24.731
&gt；&gt；Kyle Simpson：我不认为这种打字系统是弱点，
&gt;&gt; Kyle Simpson: I do not think that this typing systems are weaknesses,

40
00:02:24.731 --> 00:02:28.739
实际上，我认为这是JavaScript最强的品质之一。
I actually think this is one of JavaScript's strongest qualities.

41
00:02:28.739 --> 00:02:33.463
这是一个无名英雄，我认为这是为什么JavaScript是
It's an unsung hero, I think it's one of the reasons why JavaScript is

42
00:02:33.463 --> 00:02:37.560
它今天是无处不在的语言，因为它一直如此
the ubiquitous language that it is today because it has been so

43
00:02:37.560 --> 00:02:40.429
适合这么多不同的用例。
palatable to so many different use cases.

44
00:02:40.429 --> 00:02:45.413
第一个真正的多范式语言，以及它之所以拥有的一个很大的原因
The first truly multi-paradigm language and a big reason why it has

45
00:02:45.413 --> 00:02:50.500
能够在多范式中生存是因为它的类型系统。
been able to survive multi-paradigm is because of its type system.

46
00:02:50.500 --> 00:02:53.258
这与我的每一个同龄人和
And that's completely opposite from what every one of my peers and

47
00:02:53.258 --> 00:02:55.039
你听过的其他一切。
everything else that you've ever heard.

48
00:02:55.039 --> 00:02:59.860
其他人总是告诉你这是JavaScript最糟糕的部分
Everybody else has always told you this is the worst part of JavaScript and

49
00:02:59.860 --> 00:03:04.848
我会坚定地说这是JavaScript最好的部分之一。
I'm gonna put my foot down and say it's one of the best parts of JavaScript.

50
00:03:04.848 --> 00:03:07.270
如果你不使用它，你的程序就会错过
And if you're not using it, your programs are missing out
