WEBVTT

1
00:00:00.210 --> 00:00:02.990
刚才我们讨论的范围基本上就是你的背景
As earlier we discussed scope is
essentially the context that you're

2
00:00:02.990 --> 00:00:05.509
在你可以得到的东西里
operating in,
the things that are available to you.

3
00:00:05.509 --> 00:00:07.570
当我们想到范围的时候
And when we think about scope,

4
00:00:07.570 --> 00:00:11.750
我们一般都想知道改变范围的方法。
we generally wanna know what
are the ways to change the scope.

5
00:00:12.949 --> 00:00:14.640
因为隐式范围，就可以了。
Because implicit scope, that's fine.

6
00:00:14.640 --> 00:00:17.100
如果您运行某个功能，那么它将位于模块作用域或
If you run a function,
it's gonna be in the module scope or

7
00:00:17.100 --> 00:00:18.420
窗镜之类的东西
the window scope, things like that.

8
00:00:18.420 --> 00:00:20.980
但如果我想改变原因是因为我引用了这个变量
But if I wanna change that because
I'm referencing this variable or

9
00:00:20.980 --> 00:00:26.550
任何类似的事情都是我们的工程师有时候我们需要的时候
anything like that, that's something we do
as engineers sometimes when we need to.

10
00:00:26.550 --> 00:00:29.449
特别是如果我们需要约束的话
Particularly in react if we need to bind,

11
00:00:29.449 --> 00:00:31.640
我们说要改变这个范围，就像这样。
we say bind this to change the scope,
things like that.

12
00:00:32.750 --> 00:00:37.378
但是我们改变电话范围的三种主要方式是什么 ?
But the three main ways we change
scope our call, what's call take?

13
00:00:39.515 --> 00:00:40.939
一堆元素对吧
A bunch of elements, right?

14
00:00:40.939 --> 00:00:42.240
嗯。 答得好
Yes.
Good answer.

15
00:00:42.240 --> 00:00:45.020
应用需要做同样的事情，但它需要一个数组。
Apply takes does same thing,
but it takes an array.

16
00:00:45.020 --> 00:00:49.409
然后，绑定是执行部分应用程序的方法。
And then bind is a way of
doing partial application.

17
00:00:49.409 --> 00:00:52.619
因此，我们改变了范围而不实际调用函数本身。
So we change the scope without
actually calling the function itself.

18
00:00:52.619 --> 00:00:54.341
在这一过程中，我们正在恢复功能。
In this one we're returning the function.

19
00:00:54.341 --> 00:00:59.070
另外两个将返回或实际执行函数本身。
These other two will return or
will actually execute the function itself.

20
00:00:59.070 --> 00:01:02.789
虽然 bind 表示，这里是新的范围，但我们稍后会执行它。
Whereas bind says, here's the new scope,
but we'll execute it later.

21
00:01:02.789 --> 00:01:06.709
我对部分应用程序使用绑定，因为您可以说绑定此绑定和
I use bind for partial application
because you can say bind this and

22
00:01:06.709 --> 00:01:07.730
应用一系列参数。
apply a bunch of parameters.

23
00:01:07.730 --> 00:01:11.359
现在，当您执行该功能时，这些将会隐式过去。
And then now those will be implicitly
past whenever you execute that function.

24
00:01:12.519 --> 00:01:17.099
我知道如果我说话有点像局部应用
I know, if I'm talking a little bit
like what is partial application?

25
00:01:17.099 --> 00:01:17.769
我要谷歌
I would Google it.

26
00:01:17.769 --> 00:01:21.219
一旦你了解它，它实际上是一个非常有用的工具。
It's actually a pretty useful
tool once you understand it.

27
00:01:21.219 --> 00:01:23.480
但我不会让你编码的因为这不公平
But I'm not gonna ask you to code
that up because that's not fair.

28
00:01:23.480 --> 00:01:25.439
我不认为这是一个相关的问题。
I don't think that's a relevant question.

29
00:01:25.439 --> 00:01:29.719
但我所认为的是一个相关的问题正在实施。
But what I do think is a relevant
question is implementing bind.

30
00:01:31.039 --> 00:01:35.960
因此，我希望您今天能够实现功能原型绑定。
So what I want you to do today is I want
you to implement function prototype bind.

31
00:01:37.039 --> 00:01:41.418
我给你一个提示，这个提示有点棘手，解决方案也不太长。
And I'll give you a hint cuz this one is a
little trickier, the solution is not long.

32
00:01:42.490 --> 00:01:45.329
但你需要一个我们刚刚说过的方法
But you're gonna need one of
those methods we just talked

33
00:01:45.329 --> 00:01:46.876
都是很有约束力的
about earlier that is in bind.
