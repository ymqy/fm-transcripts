WEBVTT

1
00:00:00.000 --> 00:00:01.250
允许谈论阵列。
Lets talk about arrays.

2
00:00:02.370 --> 00:00:06.660
我不是在说你在报酬审查中想要的东西
And I'm not talking about the thing you
want at your compensation review of

3
00:00:06.660 --> 00:00:12.009
在没有困难的人群之后的那一年
the year possible after
nothing tough crowd.

4
00:00:12.009 --> 00:00:13.490
也许是个艰难的问题
Maybe is a hard question.

5
00:00:13.490 --> 00:00:14.769
对数据结构进行数组。
Arrays the data structure.

6
00:00:16.170 --> 00:00:21.030
有多种方法可以将项转换为数组，因此如果我有一个对象
There are many ways to convert an item
into array, so if I have an object I can

7
00:00:21.030 --> 00:00:25.640
调用 object.entries() 将为我提供数组数组。
call object.entries() that will
give me an array of arrays.

8
00:00:25.640 --> 00:00:28.960
其中数组中的第一个对象是或
Where the first object in the array is or

9
00:00:28.960 --> 00:00:32.969
索引为零的第一个条目是键，有一个值。
the first entry at index zero is the key,
there was the value.

10
00:00:32.969 --> 00:00:34.920
其实这应该是我一直在用的
Actually and this is should be
something I use all the time.

11
00:00:34.920 --> 00:00:37.700
如果你想把钥匙取出来你会说 object.keys 和
If you wanna just get the keys out,
you say object.keys and

12
00:00:37.700 --> 00:00:39.076
用于对对象进行迭代。
use that to iterate over an object.

13
00:00:39.076 --> 00:00:41.670
你可以说 array.from.
You can say array.from.

14
00:00:41.670 --> 00:00:44.909
它将采用类似于数组的对象。
It will take an array-like object.

15
00:00:44.909 --> 00:00:48.340
因此函数自变量是类似于数组的对象。
So function arguments
are an array-like object.

16
00:00:48.340 --> 00:00:51.060
它们不是一个阵列，但它们看起来像一个，如果你转换成一个阵列，
They're not an array but they look like
one, and if you convert into an array,

17
00:00:51.060 --> 00:00:54.119
您可以对其使用数组方法。
you can use array methods on it.

18
00:00:54.119 --> 00:00:55.500
另一个是什么
What's another one?

19
00:00:55.500 --> 00:01:00.049
HTML 元素或子代，类似的内容，不一定是数组，但是
HTML elements or children, things
like that, not necessarily arrays but

20
00:01:00.049 --> 00:01:02.200
你可以操纵一个有 arrayy的人
you can manipulate one with array.from.

21
00:01:02.200 --> 00:01:05.560
你也可以用传播
You could also use spread or

22
00:01:05.560 --> 00:01:11.180
任何能够迭代的迭代都是迭代的，其他数组是可迭代的。
whatever iterable that you want so strings
are iterable, other arrays are iterable.

23
00:01:11.180 --> 00:01:13.750
这只会把这只奇怪的量传播到一个数组中。
This just spreads this
odd amount into an array.

24
00:01:13.750 --> 00:01:15.789
所以这些是进入一个阵列的方法。
So these are ways to get to an array.

25
00:01:15.789 --> 00:01:17.010
我找到的有用的方法
Useful methods that I find.

26
00:01:17.010 --> 00:01:18.489
这里有很多
There's a lot.

27
00:01:18.489 --> 00:01:21.706
我可以把全部名单都做得非常有用
I could actually do the entire list
cuz they're all pretty useful.

28
00:01:21.706 --> 00:01:27.239
阵列 .isArray 很有用，因为如果您一直在执行 JavaScript ，
Array .isArray is useful because if
you've been doing JavaScript a while,

29
00:01:27.239 --> 00:01:29.500
发现什么是阵列其实是个难题
finding out if something's an array
was actually a hard problem.

30
00:01:29.500 --> 00:01:31.614
因为阵列不是一个类型，所以你不能只进行类型的排列，
You couldn't actually do just type
of array because array's not a type,

31
00:01:31.614 --> 00:01:33.569
数组将作为对象返回。
array would come back just as objects.

32
00:01:33.569 --> 00:01:36.359
因此，数组 .isArray 非常有用。
So array .isArray is extremely useful.

33
00:01:36.359 --> 00:01:42.430
过滤，减少， concat， join， pop， push 我不太投入这些和假定
Filter, reduce, concat, join, pop, push I
won't go too much into these and assuming

34
00:01:42.430 --> 00:01:46.590
如果你知道的话你可能以前见过的一些 JavaScript
if you know, a little bit JavaScript
you probably have seen these before.

35
00:01:46.590 --> 00:01:50.770
但重要的是了解这些方法
But what's important to know about
these is which of these methods

36
00:01:50.770 --> 00:01:53.900
你的重重者不会再回来了
return in your re which of them don't.

37
00:01:53.900 --> 00:01:56.750
所以，过滤，给我一个昨天的新阵列。
So filter, just give me a yesterday
returns a new array are now.

38
00:01:58.120 --> 00:01:58.939
>> 是。
&gt;&gt; Yes.

39
00:01:58.939 --> 00:02:01.578
>> 是，它会减少。
&gt;&gt; Yes, it does reduce.

40
00:02:01.578 --> 00:02:02.498
>> 是。
&gt;&gt; Yes.

41
00:02:02.498 --> 00:02:05.793
>> 减少棘手的问题，减少返回任何希望返回的内容
&gt;&gt; Reduces the tricky one, reduce will
return anything you want to return you

42
00:02:05.793 --> 00:02:09.087
要返回对象，它将返回要打开阵列的对象，
want to return objects,it will return
an object you want to turn an array,

43
00:02:09.087 --> 00:02:10.810
它将返回一个数组。
it will return an array.

44
00:02:10.810 --> 00:02:12.780
任何你想要的东西都会回来的
It will return pretty much
anything you want whatsoever.

45
00:02:12.780 --> 00:02:15.419
这是我最喜欢的方法之一
This is one of my favorite
methods of all time.

46
00:02:15.419 --> 00:02:19.689
我可以用一个减速器和一个减速器来做任何你想做的事
I can do almost anything you want to
do in JavaScript with a reducer and

47
00:02:19.689 --> 00:02:23.329
这就是着名的地图被缩小的原因
that's why the famous map reduce, there's
the map part at radial or something and

48
00:02:23.329 --> 00:02:25.439
然后将其减少到要获取的对象。
then reducing it down to
the object you want to get.

49
00:02:25.439 --> 00:02:27.639
这大概是我们制作的 50% 的节目
That's probably like 50%
of programming that we do,

50
00:02:27.639 --> 00:02:29.300
如果你真的很诚实的话
if you're like being really honest.

51
00:02:29.300 --> 00:02:31.725
另外 50% 只是从数据库中读取一些东西。
The other 50% is just reading
something from a database.

52
00:02:31.725 --> 00:02:33.697
我是认真的
I'm totally serious.

53
00:02:33.697 --> 00:02:36.039
就像想想你的工作是什么，这可能是什么。
[LAUGH] Like think about what your job
is and that's probably what it is.

54
00:02:36.039 --> 00:02:39.289
它减少了某些东西，并从数据库中读取一些东西。
It's reducing something and
reading something from a database.

55
00:02:39.289 --> 00:02:41.090
Concat 会返回新数组还是否?
Concat returns a new array or no?

56
00:02:43.500 --> 00:02:44.620
是的是的
Yes, it does.

57
00:02:44.620 --> 00:02:45.639
它将连接两个阵列。
It will join two arrays.

58
00:02:45.639 --> 00:02:48.569
它会加入它实际上如果你承认一个函数
It will join, it will actually
if you concat a function and

59
00:02:48.569 --> 00:02:51.340
如果您想要，可以将函数添加到数组的末尾。
you can add a function onto an end
of the array if you wanted to.

60
00:02:51.340 --> 00:02:51.840
老爸
Pop?

61
00:02:54.340 --> 00:02:56.229
没有从数组中返回第一个项的弹出窗口。
No pop returns that first
item from the array.

62
00:02:56.229 --> 00:02:57.069
它只返回一个项目。
It just returns an item.

63
00:02:57.069 --> 00:02:58.750
它不会返回阵列。
It doesn't return the array.

64
00:02:58.750 --> 00:03:01.460
推我推 它什么都不回
Push.
It doesn't return anything.

65
00:03:01.460 --> 00:03:03.090
这只是一种方法
It's just a method.

66
00:03:03.090 --> 00:03:06.250
映射，它会返回新的数组。
Map, it does return a new array.

67
00:03:07.729 --> 00:03:10.977
好了现在你知道这些方法了
All right, so now you know these methods.

68
00:03:10.977 --> 00:03:12.560
你不必像你的手那样了解他们
You don't have to know them
like the back of your hand.

69
00:03:14.349 --> 00:03:18.599
奇怪，但我建议至少知道其中一些。
Weird, but I do recommend
knowing at least some of these.

70
00:03:18.599 --> 00:03:22.650
你想做什么都能用数组来做
Cuz again, almost anything you wanna
do you can do it with an array.

71
00:03:22.650 --> 00:03:24.860
只要你知道怎么把东西转换成一个阵列
As long as you know how to
convert something into an array.

72
00:03:24.860 --> 00:03:26.099
您可以开始使用这些操作。
You can start manipulating with these.
