WEBVTT

1
00:00:00.012 --> 00:00:01.970
从字符串中除去重复项
Removing duplicate from a string

2
00:00:03.490 --> 00:00:06.719
是从数组中移动重复项的功能等价项。
is the functional equivalent of
moving duplicate from an array.

3
00:00:06.719 --> 00:00:09.230
因为我们在前一个例子中了解到，
Because we learned in
the previous example,

4
00:00:09.230 --> 00:00:10.800
我们如何把任何东西转换成阵列
how we can convert
anything into the array.

5
00:00:10.800 --> 00:00:16.309
所以我要开始我需要一个功能
So I'm gonna start with,
I need a function that takes a string so

6
00:00:16.309 --> 00:00:22.010
调用 removeDuplicates (str) ，并在此处获取字符串，并获取字符串，并且
called removeDuplicates (str) and it take
string here and it takes a string, and

7
00:00:23.640 --> 00:00:29.663
它将会返回一些新的字符串
it's going to return some new string.

8
00:00:29.663 --> 00:00:35.841
一个解决这个问题的方法就是
One approach this problem
would be to take the string,

9
00:00:35.841 --> 00:00:41.094
将其转换为数组，创建新的数组。
convert it into an array,
create a new array.

10
00:00:41.094 --> 00:00:44.615
每次你进入一个你没有进入过的地方
And then every time you run into something
that you haven't run into before,

11
00:00:44.615 --> 00:00:46.729
你只会推着这个新阵列
you just push that new array.

12
00:00:46.729 --> 00:00:50.226
所以如果我们要从精神上走
So if we're gonna walk through
this mentally, I mean this,

13
00:00:50.226 --> 00:00:53.740
我没看到这个因为我的阵列在这里是空的
I haven't seen this because my
array is empty at this point.

14
00:00:53.740 --> 00:00:58.511
我要把这个推到新阵列上
I'm gonna push this to the new array and
I'm gonna say every

15
00:00:58.511 --> 00:01:03.667
在那个循环上我只是在迭代这个阵列
single time on that loop,
I'm just iterating over this array,

16
00:01:03.667 --> 00:01:07.790
我可以说新的 array. 包括或 indexOf?
I can say does the new array.includes or
indexOf?

17
00:01:07.790 --> 00:01:11.829
我知道，我想我怎么能在阵列上迭代呢 ?
I know, it's thinking like how
can I iterate over the array?

18
00:01:11.829 --> 00:01:17.019
如果你用双四圈来保持阵列的话
If you did it kind of with a double
four loop as in keeping the array,

19
00:01:17.019 --> 00:01:18.590
那就好这是个解决办法
that's fine, it's a solution.

20
00:01:18.590 --> 00:01:21.769
它不是最佳的但它是一种解决方案
It's not optimal but it's a solution and

21
00:01:21.769 --> 00:01:24.859
当你想到 " array " 的时候，包括在技术上是做同样的事情。
when you think about array.includes is
technically sort of doing the same thing.

22
00:01:24.859 --> 00:01:28.129
只是在幕后做，但速度要快得多
It's just doing it behind the scenes but
it's much faster so

23
00:01:28.129 --> 00:01:30.280
这才是解决问题的方法
that's one solution and that would work.

24
00:01:30.280 --> 00:01:34.030
同样的事情也会发生在我的工作上
The same thing would work for
number strings or anything, I'm gonna take

25
00:01:34.030 --> 00:01:38.579
使用现代的 JavaScripts ，并使用不同的数据结构。
advantage of modern JavaScripts and
use a different data structure.

26
00:01:38.579 --> 00:01:42.939
这就是我不会说的因为任何其他的解决方案都能起作用
And this was kind of I won't say a trick
because any other solution will work

27
00:01:42.939 --> 00:01:46.030
迭代使用四环，这一方式更有效率。
iterating use the four loop,
this way is a little bit more efficient.

28
00:01:46.030 --> 00:01:50.280
我要做的第一件事就是为我的弦线制作一个阵列
So first thing I'm gonna do is I'm
gonna create an array for my string, so

29
00:01:50.280 --> 00:01:53.359
我要说的是 string.splits。
I'm gonna say, string.splits.

30
00:01:53.359 --> 00:01:57.740
所以我要有一套新的字串我想说
So I'm going to get a new array
of every string, I'm gonna say,

31
00:01:57.740 --> 00:01:59.400
做这只长手
doing this long hand.

32
00:01:59.400 --> 00:02:06.579
我要用一套规则在 JavaScript中做什么
I'm gonna use a set rule,
what does a set do in JavaScript?

33
00:02:06.579 --> 00:02:07.079
嗯。
Yes.

34
00:02:09.039 --> 00:02:11.909
>> 它类似于数组，但不能重复。
&gt;&gt; It's like an array but
cannot have duplicate.

35
00:02:11.909 --> 00:02:16.489
>> 是，设置的 JavaScript 中的数据结构不能重复
&gt;&gt; Yes, set is a data structure in
JavaScript that can not have duplicate

36
00:02:16.489 --> 00:02:23.120
我可以说新的一套然后我就能通过我的阵列了
items so I can say new set And
then, I'm gonna pass in my array.

37
00:02:23.120 --> 00:02:27.349
我觉得你可以把琴弦变成一套
I think you could actually
pass in a string into a set,

38
00:02:27.349 --> 00:02:29.689
它可能决定实际工作我还没试过呢
it might decide actually work,
I haven't tried that yet.

39
00:02:29.689 --> 00:02:33.039
但为了安全我们就有一套
But just to be safe,
we have a set and then,

40
00:02:33.039 --> 00:02:36.990
我准备好了我要打个新电话
I'm gonna take the set, and
I'm gonna call create a new string.

41
00:02:36.990 --> 00:02:41.192
所以我要说新字符串是
So I'm gonna say newString is,

42
00:02:41.192 --> 00:02:49.180
我要把我的集合转换成数组
I need to convert my set
back into an array so

43
00:02:49.180 --> 00:02:53.608
我可以用一个 array.from ，或者我要用一个传播算子，因为它是 " fanancer" 。
I can use an array.from or I'm gonna use
a spread operator because it's fancier.

44
00:02:53.608 --> 00:02:56.479
那就得把所有重复数据都删除了
So that's gonna take that set which
now has all duplicates removed,

45
00:02:56.479 --> 00:02:58.039
转换回数组。
converted back to array.

46
00:02:58.039 --> 00:03:01.115
现在我需要将它转换为字符串，所以我要说 string.join。
Now I need to convert it back into
a string so I'm gonna say string.join.

47
00:03:07.304 --> 00:03:09.189
谢谢你的 VS .
Thank you VS code for helping me there.

48
00:03:11.189 --> 00:03:16.344
并且您有一个函数，该函数采用数组并除去所有重复项。
And there you have a function that takes
an array and removes all the duplicates.

49
00:03:18.147 --> 00:03:21.271
所以如果你用这四环并使用额外的数组，也就可以了，
So if you use the four loop and
use the additional array, that's fine too,

50
00:03:21.271 --> 00:03:23.120
那是个完美的解决方法
that is a perfectly good solution.

51
00:03:23.120 --> 00:03:27.189
这个集合有点小 ancer ，我可能都是在一条线上
The set is a little bit fancier, I could
actually probably do this all in one line

52
00:03:27.189 --> 00:03:32.300
如果我真的想这样做但我不是为了太复杂了
if I really wanted to, but I I'm not doing
it for the sake of being too complicated.

53
00:03:33.590 --> 00:03:35.370
那就没那么糟了
So that wasn't too bad and

54
00:03:35.370 --> 00:03:38.449
希望我们能把任何事都转化为雷
hopefully now we're building up to
I can convert anything into Ray and

55
00:03:38.449 --> 00:03:41.689
然后转换成不同的数据结构做任何我想做的事情。
then do whatever I want once it's
converted to a different data structure.

56
00:03:41.689 --> 00:03:44.520
这也是一个很好的问题，如果你知道你的数据结构，
This is also good question for
if you know your data structures,

57
00:03:44.520 --> 00:03:48.110
它会帮你不用你不用背什么地图和地图
it will help you don't have to, you don't
have to memorize what maps and sets and

58
00:03:48.110 --> 00:03:49.969
脆弱的地图和类似的东西
weak maps are and things like that.

59
00:03:49.969 --> 00:03:52.620
但对这样的问题很有帮助
But it's helpful for questions like these.

60
00:03:52.620 --> 00:03:58.229
但是一般的宝石小费如果有什么独特的价值
But a general gem tip, if there's
something saying unique values use a set,

61
00:03:58.229 --> 00:03:59.189
它会为你做所有的工作
it does all the work for you.
