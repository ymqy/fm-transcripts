WEBVTT

1
00:00:00.170 --> 00:00:03.209
好吧那怎么样
All right, how was that?

2
00:00:03.209 --> 00:00:07.246
对你们中的某些人来说可能有点困难。
For some of you that was
probably a bit challenging.

3
00:00:07.246 --> 00:00:10.178
对你们中的某些人来说是粉碎了
For some of you, crushed it.

4
00:00:10.178 --> 00:00:12.426
很容易劳尔不上
Rolled through it easily.

5
00:00:12.426 --> 00:00:16.742
为了诚实和公平，我也做了这个密码挑战。
So in the interest of honesty and
fairness, I also did this code challenge.

6
00:00:16.742 --> 00:00:17.471
我以前没做过
I did not do it before.

7
00:00:17.471 --> 00:00:21.620
我自己写的，但是在我解决的时候才解决的。
I wrote it up, but I didn't solve it until
I was solving the same time you were.

8
00:00:21.620 --> 00:00:23.908
这是我的解决方案。
Here is my solution.

9
00:00:23.908 --> 00:00:26.190
这就是一般的 blah， blah， blah.
So here's the general blah, blah, blah.

10
00:00:26.190 --> 00:00:28.021
我不修改这个
I don't modify this.

11
00:00:28.021 --> 00:00:29.172
我创造了这个
I created this.

12
00:00:29.172 --> 00:00:32.460
那么其他的解决方案都是我完成后的生活代码
So every other solution I will
live code after I've done but

13
00:00:32.460 --> 00:00:34.046
我是个变慢的打字员
this one I'm a slow typist.

14
00:00:34.046 --> 00:00:36.002
相信我是我干的
So just trust me that I did it.

15
00:00:36.002 --> 00:00:37.103
我没作弊
I didn't cheat.

16
00:00:37.103 --> 00:00:41.340
我甚至在此放弃了我的谷歌查询，因为我也需要帮助。
I even here I left up my Google
queries because I also need help.

17
00:00:41.340 --> 00:00:42.695
我不记得这些事了
I don't remember these things.

18
00:00:42.695 --> 00:00:44.029
我不完美
I'm not perfect.

19
00:00:44.029 --> 00:00:45.993
我也得查这些东西
I had to look up this stuff too.

20
00:00:45.993 --> 00:00:48.536
所以我的解决方案就是我创造了一个阶级。
So my solution was I created a class.

21
00:00:48.536 --> 00:00:50.835
我知道这需要某种形式的元素
And I know that it takes
an element of some sort,

22
00:00:50.835 --> 00:00:53.201
食物数据不按顺序排列
it takes food data doesn't
matter on the order.

23
00:00:53.201 --> 00:00:55.909
我只是在创造范围内的人
And I'm just creating those in the scope.

24
00:00:55.909 --> 00:00:58.350
我创建了一个叫做渲染列表的函数。
I created a function called render list.

25
00:00:58.350 --> 00:01:02.359
其实这最后一次是我最不想担心的事了
Actually did this last cuz it's probably
the last thing I need to worry about.

26
00:01:02.359 --> 00:01:06.646
但我所做的是我知道我需要创建一个项目的清单。
But what I did was I knew that I
needed to create a list of items.

27
00:01:06.646 --> 00:01:08.039
我不想在这个功能上做这个。
And I didn't want to do
that in this one function.

28
00:01:08.039 --> 00:01:13.608
因此，我创建了一个称为 createFoodItems的单独函数。
So I created this separate
function called createFoodItems.

29
00:01:13.608 --> 00:01:18.340
那么在这个问题上，是这个挑战，还是
Now, on this question,
was this challenging, or

30
00:01:18.340 --> 00:01:20.989
是中间的吗
was it sort of in the middle?

31
00:01:20.989 --> 00:01:22.956
在中间的索塔挑战吗
Sorta in the middle, challenging?

32
00:01:22.956 --> 00:01:26.953
对于很多人来说，这通常是一种代码问题的风格
For a lot of people, and this is generally
the kind of the style of code question I

33
00:01:26.953 --> 00:01:30.295
就像你非常，非常，非常依赖框架或者
like, it's are you very, very,
very dependent on frameworks or

34
00:01:30.295 --> 00:01:33.396
你能理解我能创造一个元素的基本要素
do you understand kinda the basics
of can I create an element,

35
00:01:33.396 --> 00:01:35.930
我能创造一个终结收听者之类的吗
can I create an end listener and
things like that?

36
00:01:35.930 --> 00:01:37.116
这就是为什么我要问这个问题。
That's why I like to ask this question.

37
00:01:37.116 --> 00:01:40.781
我不关心具体的框架知识或专业知识。
Is I don't care about specific
framework knowledge or expertise.

38
00:01:40.781 --> 00:01:43.802
你可以成为世界上最顶尖的反应专家
You could be the world's
leading a react expert.

39
00:01:43.802 --> 00:01:47.246
您是否可以创建将内容呈示到 DOM中的 HTML 页面 ?
Can you create an HTML page that
renders stuff into the dom?

40
00:01:47.246 --> 00:01:48.603
就这样了
That's it.

41
00:01:48.603 --> 00:01:52.311
要用我必须用的创造元素，那就是我的去，对，
And to use that I had to use create
element, which is my go to, yes,

42
00:01:52.311 --> 00:01:53.585
我正在使用 &lt;div&gt;。
I'm using a &lt;div&gt;.

43
00:01:53.585 --> 00:01:56.331
如果我用一个或一个更好的元素，请不要对我做出评价。
Don't judge me if I use a list or
something like that a better element.

44
00:01:56.331 --> 00:01:59.692
但使用 &lt;div&gt; 是因为它是代码测试，而我的时间有限。
But am using &lt;div&gt; because it's
a code test and I'm limited on time.

45
00:01:59.692 --> 00:02:02.680
我加了这个图像，你可以用这个名字不重要。
I just added the image, you can use
the name doesn't really matter.

46
00:02:02.680 --> 00:02:06.257
我添加类列表，我正在添加类的项名。
I add the class list,
I'm adding the item name of the class.

47
00:02:06.257 --> 00:02:08.725
我不知道我只是这样做的
Don't know I'm gonna do with
that I just did it just in case.

48
00:02:08.725 --> 00:02:11.876
我要回来的元素是我创造的
And I'm returning that
element that I created.

49
00:02:11.876 --> 00:02:16.210
所以我做的下一件事就是我创造了这个功能
So next thing I did was after I
created this function was I created

50
00:02:16.210 --> 00:02:17.745
文档片段。
a document fragment.

51
00:02:17.745 --> 00:02:23.734
这就是如果你给出一个可靠的代码测试或者回答这样一个被解决的代码测试。
This is if you're giving a solid code test
or answering a solved code test like this.

52
00:02:23.734 --> 00:02:29.606
创建文档片段 cubz ，它会创建元素的副本。
Create a document fragment cuz what that
does is it creates a copy of an elements.

53
00:02:29.606 --> 00:02:33.769
然后我就能把东西插在那个片段里
And then I can just insert things
into that fragment piece of document.

54
00:02:33.769 --> 00:02:38.939
一旦我完成插入，我就把它附加到实际的避孕套上。
And then once I'm done inserting,
I append that to the actual dom.

55
00:02:38.939 --> 00:02:41.856
使用文档片段的优点是
What's the advantage of
using document fragments,

56
00:02:41.856 --> 00:02:44.328
而不是直接向它附加
instead of just appending
straight into it?

57
00:02:44.328 --> 00:02:48.497
我也可以的
Cuz I also could have

58
00:02:48.497 --> 00:02:53.163
做了些什么
done something like.

59
00:02:53.163 --> 00:02:58.929
在 forEach 中，我可以将 this.brute.append 子代。
In the forEach I could have
said this.brute.append child.

60
00:03:00.868 --> 00:03:02.614
然后我就可以打这个电话了
And then I could have called this.

61
00:03:05.010 --> 00:03:07.418
我希望那是有用的
I hope that works.

62
00:03:07.418 --> 00:03:09.518
我本可以做点什么的
I could have done something like that.

63
00:03:09.518 --> 00:03:13.644
但为什么我要用一个文件片段呢 ?
But why did I use a document fragment?

64
00:03:13.644 --> 00:03:16.838
有人吗有人吗
Anybody, anybody at all?

65
00:03:16.838 --> 00:03:19.429
>> 您正在追加一簇时间。
&gt;&gt; You're appending a bunch of times.

66
00:03:19.429 --> 00:03:20.057
> > 是。 > And
&gt;&gt; Yeah.
&gt;&gt; And

67
00:03:20.057 --> 00:03:22.379
你只是在追加一次
this one you're just appending once.

68
00:03:22.379 --> 00:03:24.882
> > 这有什么意义呢 ?
&gt;&gt; So what are the implications of that?

69
00:03:24.882 --> 00:03:28.655
>> 你在做更多的事情，当你追加的时候，
&gt;&gt; You're doing more stuff with the dom,
when you're appending, so

70
00:03:28.655 --> 00:03:30.253
一些表演。
some sort of performances.

71
00:03:30.253 --> 00:03:31.794
> > 嗯，那就对了。
&gt;&gt; Yeah, that's exactly right.

72
00:03:31.794 --> 00:03:34.929
如果我们要追加这就意味着我们会不断更新 DOM 这意味着
If we're appending, that means we're
constantly updating DOM which means it's

73
00:03:34.929 --> 00:03:37.360
在表演的过程中它会退化
rerendering, between performances
it's gonna be degraded.

74
00:03:37.360 --> 00:03:42.670
Versus 如果我只追加一次，就会呈现一次，然后我就完成了。
Versus if I only append once,
it's one render and then I'm done.

75
00:03:42.670 --> 00:03:44.251
这就是我要找的东西
That's something I look for.

76
00:03:44.251 --> 00:03:46.628
我希望人们能理解文件碎片
I want people to understand
document fragments or

77
00:03:46.628 --> 00:03:50.091
只是不断地呈现给我们的表演所带来的影响
just the performance implications
of constantly rendering to the dom.

78
00:03:50.091 --> 00:03:51.766
不是什么魔术
Not a magic trick.

79
00:03:51.766 --> 00:03:54.420
这只是一种好的知识
It's just kind of good knowledge to have,

80
00:03:54.420 --> 00:03:57.597
就像这样做的方式吗
in understanding like how
does rendering work?.

81
00:03:57.597 --> 00:04:01.550
当我完成后，我将附加该子代，并将该文档片段附加到
And once I'm done, I append that child and
I append that document fragment in so

82
00:04:01.550 --> 00:04:02.502
它是一个渲染
it's one render.

83
00:04:02.502 --> 00:04:06.942
一旦我做到了，我就知道有一些怀疑论者。
Then once I was done, and just in case,
I know there's some skeptics out there.

84
00:04:06.942 --> 00:04:11.875
这是我的控制台日志，我在执行此操作时抛出了很多错误。
This is my console log, I threw a lot
of errors while I was doing this.

85
00:04:11.875 --> 00:04:14.151
我正在写这个课程，我还是写错误。
And I'm giving this course and
I still write errors.

86
00:04:14.151 --> 00:04:18.225
我打开开发者工具，以了解抛出了哪些错误。
I open my developer tools just to
see what errors are getting thrown.

87
00:04:18.225 --> 00:04:19.987
这才是真正的生活没人是完美的
This is real life, no one's perfect.

88
00:04:22.927 --> 00:04:25.834
所以我干的最后一件事就是我有点麻烦
So the last thing I did was I ran a little
bit of trouble cuz I had to remember how

89
00:04:25.834 --> 00:04:26.851
事件侦听器已工作。
event listeners worked.

90
00:04:26.851 --> 00:04:31.403
但我向 root 用户添加了事件侦听器，然后提取了目标。
But I added an event listener to the root
and then I extracted the target.

91
00:04:31.403 --> 00:04:35.096
目标是当您具有事件侦听器时正在单击的对象
And the target is the thing that is being
clicked on when you have an event listener

92
00:04:35.096 --> 00:04:36.302
或单击事件侦听器。
or click event listener.

93
00:04:36.302 --> 00:04:40.396
现在，我说要删除，我也要查清楚，文件删除件。
And now, I said remove, which I have to
look up as well, document remove element.

94
00:04:40.396 --> 00:04:44.403
我应该知道但我应该知道
Just .remove, I should probably
should have known that but

95
00:04:44.403 --> 00:04:45.906
我也得去看看
I had to look it up too.

96
00:04:45.906 --> 00:04:48.566
但我把它添加到根和
But the reason why I
added it to the root and

97
00:04:48.566 --> 00:04:52.898
而不是实际的孩子本身，我也可以做，
not the actual child element itself,
which I also could have done,

98
00:04:52.898 --> 00:04:57.244
是事件代表团，而这就是事件代表团的样子。
was event delegation and
this is what event delegation looks like.

99
00:04:57.244 --> 00:05:02.648
这意味着有一个事件侦听器，而不是我在这里所拥有的许多项。
It means there's one event listener rather
than however many items I have here.

100
00:05:02.648 --> 00:05:05.475
用这种方式来思考是好事
And it's good to think
in terms of that way,

101
00:05:05.475 --> 00:05:08.920
因为说我有 1000 件事的清单
because let's say I had
a list of 1,000 things.

102
00:05:08.920 --> 00:05:12.002
你会看到你的表演速度非常缓慢
You'd see your performance
slow dramatically down.

103
00:05:12.002 --> 00:05:16.706
当然，当我单击它时，它会从列表中除去所有内容，一次一次。
And of course, when I click it removes
everything from the list, one at a time.

104
00:05:16.706 --> 00:05:18.947
这是代码测试的示例。
That's an example of a code test.

105
00:05:18.947 --> 00:05:22.663
我认为这是一个对一般 UI 工程师的合理的密码测试。
And I consider it a fairly reasonable
code test for a general UI engineer.

106
00:05:22.663 --> 00:05:27.089
如果我需要一个角工程师的话我可能会问一个角度的问题
Now if I needed a, say angular engineer,
I might ask a question in angular and

107
00:05:27.089 --> 00:05:30.714
你可以用这种方式解决，或者做出反应之类的事情。
have you solve that that way, or
react or something like that.

108
00:05:30.714 --> 00:05:36.661
如果我是说我要一个 UI 工程师，就不要有具体的框架，
If I'm saying I want a UI engineer, don't
really have specific framework in mind,

109
00:05:36.661 --> 00:05:39.278
我会问这样的一个问题
I'll ask a question like this sure.

110
00:05:39.278 --> 00:05:43.018
因为我不需要语言或框架
Because I don't necessarily
want a language or framework or

111
00:05:43.018 --> 00:05:44.786
一个特定于图书馆的专家
a library specific expert.

112
00:05:44.786 --> 00:05:50.244
如果我们切换到一起，一个刚刚推出的新框架。
Cuz what if we switch to,
what's a new framework that just came out.

113
00:05:50.244 --> 00:05:51.769
>> Svelte。
&gt;&gt; Svelte.

114
00:05:51.769 --> 00:05:55.284
> > 嗯，让我们说我们切换到 Svelte ，而不是 React 或类似的内容。
&gt;&gt; Yeah, let's say we switch to Svelte
instead of React or something like that.

115
00:05:55.284 --> 00:05:57.843
所有这些 React 的知识都是一文不值的
Then all that React knowledge,
it's worthless.

116
00:05:57.843 --> 00:06:00.377
所以我要一个普通的 UI 工程师。
So I want a general UI engineer.

117
00:06:00.377 --> 00:06:03.471
如果你能理解这种情况，我就知道你可以学到其他东西。
If you understand something like this,
then I know you can learn something else.

118
00:06:03.471 --> 00:06:06.810
但如果你把整个职业生涯都花在一个框架上
But if you only spend your entire career
coding one framework, you're probably not

119
00:06:06.810 --> 00:06:10.120
你的想法会很灵活也许这不是我要找的
gonna be as flexible in your thinking,
that's might not be what I'm looking for.

120
00:06:10.120 --> 00:06:12.550
干得好你们都完成了
Nice job, all of you who completed it.

121
00:06:12.550 --> 00:06:17.218
如果有点挑战性别担心因为你有那么多人
If it was a little challenging, don't
worry, it throws people because you get so

122
00:06:17.218 --> 00:06:20.266
用于图书馆的所有重型提升
used to all the heavy lifting
that the libraries do for

123
00:06:20.266 --> 00:06:23.399
你回旧学校可以给你打个圈
you that going back old school
can throw you for a loop.

124
00:06:23.399 --> 00:06:26.937
但一旦你看到它希望你能明白这不是太棘手
But once you see it, hopefully you
understand it's not too tricky.

125
00:06:26.937 --> 00:06:30.079
我也没问过要创建一个 Web 工作者，开始多线程，或者
And I didn't ask anything like create
a web worker and start multi threading or

126
00:06:30.079 --> 00:06:30.947
任何类似的事情
anything like that.

127
00:06:30.947 --> 00:06:32.612
只有你能看到的东西
Just things you can look up.

128
00:06:32.612 --> 00:06:33.540
那是一个手机屏幕。
So that was a phone screen.
