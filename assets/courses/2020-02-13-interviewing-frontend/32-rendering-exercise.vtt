WEBVTT

1
00:00:00.590 --> 00:00:03.700
现在，快速移动话题。
Now, moving subjects rapidly.

2
00:00:03.700 --> 00:00:05.740
让我们谈谈渲染。
Let's talk about rendering.

3
00:00:07.150 --> 00:00:10.220
我怎么能在 DOM里平顺点
How would I render something
smoothly in a DOM?

4
00:00:10.220 --> 00:00:12.980
让我们假设我给你一个密码挑战
Let's say I give you a code challenge and

5
00:00:12.980 --> 00:00:18.609
它从左到右移动了五百个像素
it's move some elements from
left to right by 500 pixels.

6
00:00:18.609 --> 00:00:20.129
你怎么做到的
How would you do that?

7
00:00:20.129 --> 00:00:23.269
我们，我们有甚么特性呢 ?
What we, what sort of properties
do we have in elements?

8
00:00:23.269 --> 00:00:25.160
我们有位置
We have positions.

9
00:00:25.160 --> 00:00:30.030
所以，在 CSS 里，你是怎么移动的，你怎么会动一个元素呢 ?
So, okay in CSS how would you move,
how would you move an element?

10
00:00:30.030 --> 00:00:31.859
你在某种程度上是这样做的
It's really you've done
that at some point.

11
00:00:31.859 --> 00:00:36.823
>> 页边距，页边距不同
&gt;&gt; Margins, margins are the different

12
00:00:36.823 --> 00:00:39.850
对齐位置 >> I 均值，
aligning positions
&gt;&gt; I mean,

13
00:00:39.850 --> 00:00:42.869
那不是，你动不了，你就不想动了
that's not, you would move the element but
you wouldn't want to move with

14
00:00:42.869 --> 00:00:45.310
因为它们偏离了整个页面的布局
margins because they're off
the layout of the whole page.

15
00:00:45.310 --> 00:00:49.369
您将使用位置， x 位置和 y 位置。
You would use position,
x position, y position.

16
00:00:50.679 --> 00:00:52.549
x 向左， >> 左上角，
x left,
&gt;&gt; top left,

17
00:00:52.549 --> 00:00:54.299
>> 左上角，右下角。
&gt;&gt; top left, bottom right.

18
00:00:54.299 --> 00:00:56.979
> > 我，在这种情况下，我们会给你一个提示。
&gt;&gt; I and in this case we would
use on giving you a hint.

19
00:00:56.979 --> 00:01:01.780
你怎么翻译因为翻译不像别的什么叫
How do you translate because translate,
unlike the calling anything else,

20
00:01:01.780 --> 00:01:03.990
它不会强制回流。
it will not force a reflow.

21
00:01:03.990 --> 00:01:06.099
它本质上是从 DOM 的流中获取的
It essentially takes it out of
the the flow of the DOM and

22
00:01:06.099 --> 00:01:07.370
它就会独立移动
it just moves it independently.

23
00:01:08.519 --> 00:01:10.140
你们都在 CSS里做过这个
And you've all done this in CSS.

24
00:01:10.140 --> 00:01:12.329
但当你坐在白板上
But when you're sitting on a whiteboard,

25
00:01:12.329 --> 00:01:14.260
要记住这些事情就更难了
it's much harder to
remember all these things.

26
00:01:15.819 --> 00:01:19.340
>> 但是知道，渲染和理解，好吧，
&gt;&gt; But knowing, rendering and
understanding, okay,

27
00:01:19.340 --> 00:01:20.480
我们理解并采取行动
we understand and move position.

28
00:01:20.480 --> 00:01:22.329
我们都是在 CSS里做的
We do it all the time in CSS.

29
00:01:22.329 --> 00:01:25.359
执行 JavaScript 只是手动调用此样式。
Doing JavaScript is just doing
calling this styles manually.

30
00:01:25.359 --> 00:01:29.439
所以有些元素是那种风格变换
So some element that style, transform,

31
00:01:29.439 --> 00:01:33.060
转换 x，和我们在 JavaScript中做的 CSS 一样。
translate x, the same thing doing
CSS we're just doing in JavaScript.

32
00:01:33.060 --> 00:01:34.689
但我们如何才能让事情进展顺利呢 ?
But how do we get
something to move smoothly?

33
00:01:36.079 --> 00:01:38.299
这是一个很好的问题。
This is a good actually
high level question.

34
00:01:38.299 --> 00:01:39.560
你怎么能平顺点
How would you smoothly animate something?

35
00:01:40.879 --> 00:01:42.829
>> CSS 转换。
&gt;&gt; CSS transitions.

36
00:01:42.829 --> 00:01:44.520
> > 不错，嗯。
&gt;&gt; It's not bad, yeah.

37
00:01:44.520 --> 00:01:48.150
但如果我们在 JAVA 脚本中这样做，我们正在使用请求动画框架。
But if we're doing it in JAVA script,
we're using request animation frame.

38
00:01:48.150 --> 00:01:50.170
现在是什么请求动画框架?
Now what is request animation frame?

39
00:01:50.170 --> 00:01:50.740
你听说过吗
Have you heard of it?

40
00:01:52.719 --> 00:01:53.420
好吧好吧
All right.

41
00:01:53.420 --> 00:01:59.109
因此，请求动画框架是窗口对象上的全局可用功能。
So request animation frame is a globally
available function on the Window objects.

42
00:01:59.109 --> 00:02:02.019
每次都有渲染的结果
And what it does is every
time there's a render,

43
00:02:02.019 --> 00:02:03.819
它会调用 requestAnimationFrame。
it makes a call to requestAnimationFrame.

44
00:02:04.890 --> 00:02:07.700
这很重要因为如果我们想要得到流畅的动画
And this is important because if we're
trying to get a smooth animation,

45
00:02:07.700 --> 00:02:09.300
我们不想要任何的眩晕
we don't want any stuttering.

46
00:02:09.300 --> 00:02:12.530
这意味着每次都有新的渲染我们要移动它
That means every time there's
a new render, we wanna move it

47
00:02:12.530 --> 00:02:16.560
再多一点，我们就想把那个元素再移一点。
just a little bit more, we wanna move
that element just a little bit more.

48
00:02:16.560 --> 00:02:21.469
所有浏览器都呈现每秒 60 帧的情况
And all browsers render that 60 frames
a second That means in one second it's

49
00:02:21.469 --> 00:02:24.460
将请求 requestAnimationFrame 近似秒。
gonna call requestAnimationFrame
approximately seconds.

50
00:02:25.740 --> 00:02:31.090
只有当情况发生时才会顺利的
Station frame it's gonna smoothly
only when the render happens.

51
00:02:31.090 --> 00:02:35.750
如果你要做一些短小的游戏就永远不可能
It'll never block if you're
making some short game or

52
00:02:35.750 --> 00:02:39.829
狂妄的使用 requestAnimationFrame ，如果您不知道它，
arrogant use requestAnimationFrame
If you didn't know about it,

53
00:02:39.829 --> 00:02:41.579
这是在 JavaScript中进行计时的另一种方式，
it is another way of doing
timing in JavaScript,

54
00:02:41.579 --> 00:02:46.599
如果你想要每 16 毫秒发生一件事
if you wanted something to happen
every 16 or so milliseconds, roughly.

55
00:02:46.599 --> 00:02:50.180
有一些边缘案例，但我不想太过分。
There are edge cases, but
I don't wanna go too far into that.

56
00:02:50.180 --> 00:02:53.520
所以知道每 16 毫秒
So knowing that every 16
something milliseconds

57
00:02:53.520 --> 00:02:55.750
调用请求动画帧。
request animation frame is called.

58
00:02:55.750 --> 00:02:57.909
这就是我们要做所有动画的地方
That's where we wanna do all for
animations.

59
00:02:59.889 --> 00:03:01.150
解决下一个问题。
Suite our next problem.

60
00:03:01.150 --> 00:03:02.800
这正是我所描述的
It's exactly what I described.

61
00:03:02.800 --> 00:03:06.039
我要你移动一个元素我给你一个真正的面试
I want you to move an elements and
I gave you a hint in a real interview,

62
00:03:06.039 --> 00:03:07.729
他们不会告诉你使用请求动画框架
they wouldn't tell you to
use request Animation Frame.

63
00:03:09.319 --> 00:03:10.129
我们来看看这个。
Let's take a look at this one.

64
00:03:14.460 --> 00:03:18.969
用于移动元素的创意函数 >> 参数为持续时间。
Creative function to move an element
&gt;&gt; The arguments are the duration.

65
00:03:18.969 --> 00:03:22.500
所以如果我要移动 500 像素，超过 10 秒，
So if I want to move 500 pixels,
over 10 seconds,

66
00:03:22.500 --> 00:03:26.819
我在一万毫秒或几秒内过去并不重要。
I pass in 10,000 milliseconds or
seconds doesn't really matter.

67
00:03:26.819 --> 00:03:28.400
我得说像素是 500
I'd say the pixel so that'd be 500.

68
00:03:28.400 --> 00:03:29.909
然后我就把这些元素放进去了
And then I put in the elements and move.

69
00:03:31.990 --> 00:03:33.259
你可以在 CSS里做这个
You could do this in CSS.

70
00:03:33.259 --> 00:03:37.509
如果您希望这样做，那么这是数据条的良好应用。
If you want it to But
this is a good application of data strips.

71
00:03:38.550 --> 00:03:39.689
这是个小数学
It's a little math heavy.

72
00:03:41.349 --> 00:03:43.090
但这要取决于你的态度
But this have to be,
it depends on your approach.
