WEBVTT

1
00:00:00.110 --> 00:00:05.580
在初始呼叫之后，甚至在初始呼叫期间，
After the initial call or even during
the initial call, towards the end,

2
00:00:05.580 --> 00:00:10.099
或者可能是另外一个电话你可能会有一系列的问题
or maybe it might be a separate call, you
might get a series of prescreen questions.

3
00:00:10.099 --> 00:00:14.419
通常这些都是大公司想在你之前对你进行审查
Usually these are the larger companies
that wanna kind of vet you out before you

4
00:00:14.419 --> 00:00:18.910
开始，因为面试一个人拿资源，需要人力。
get started, because interviewing someone
takes resources, it takes manpower.

5
00:00:18.910 --> 00:00:22.289
人们需要花时间去做这些事情。
It takes people that have to take time
out of their day to do these things.

6
00:00:22.289 --> 00:00:24.460
所以他们想让你的问题
So they wanna give prescreen questions,
say,

7
00:00:24.460 --> 00:00:28.559
这个人起码有一点资格做前期工程师吗 ?
is this person at least a little bit
qualified to be a front-end engineer?

8
00:00:28.559 --> 00:00:31.727
因此，我将这些基本行问题视为 JavaScript 知识。
So I consider these base line
questions for JavaScript knowledge.

9
00:00:31.727 --> 00:00:34.429
那就把他们开除吧
So let's fire them off.

10
00:00:35.439 --> 00:00:37.420
const， let 和 var 之间有什么区别 ?
What is the difference between const,
let, and var?

11
00:00:38.780 --> 00:00:39.896
有人吗
Anybody?

12
00:00:39.896 --> 00:00:40.783
>> 作用域。
&gt;&gt; Scope.

13
00:00:40.783 --> 00:00:41.868
>> 更多。
&gt;&gt; More.

14
00:00:46.503 --> 00:00:47.655
> > 更多信息 ? > > 嗯，
&gt;&gt; More on that?
&gt;&gt; Yeah,

15
00:00:47.655 --> 00:00:51.369
是的 [ LAUGH] >> Var 一般是全局的。
yeah [LAUGH]
&gt;&gt; Var is global, generally.

16
00:00:52.549 --> 00:00:55.710
让我们再缩小一点，并确定常量。
Let is a little bit more narrow,
and const is fixed.

17
00:00:55.710 --> 00:00:58.829
如果您稍后尝试更改该规则，那么您将由某些 JS 借出规则来进行修改。
You'll get yelled at by some JS lent
rule if you try to change it later.

18
00:01:01.210 --> 00:01:02.307
> > 好的，没问题。
&gt;&gt; Okay, that was okay.

19
00:01:02.307 --> 00:01:04.340
>> 好 >> 好吧。
&gt;&gt; Okay
&gt;&gt; So have that each other.

20
00:01:04.340 --> 00:01:06.200
没事的没事的
It was okay.

21
00:01:06.200 --> 00:01:07.620
范围是找到它的好方法。
Scope is a good way to finding it.

22
00:01:07.620 --> 00:01:11.323
Var，我不认为是全球性的，无论是在全球范围内，还是在全球范围内
Var, I wouldn't say is global,
its global to whatever scope it but

23
00:01:11.323 --> 00:01:12.796
外面不会有泄漏的
it's not gonns leak outside.

24
00:01:12.796 --> 00:01:16.284
但我们的人说这是不可改变的但是人们说这是不可改变的
But yes, const, it's not immutable,
people say it's immutable, but

25
00:01:16.284 --> 00:01:19.319
我们对 immutable 可能有不同的定义
we probably have different
definitions of immutable.

26
00:01:19.319 --> 00:01:22.750
你不能把一个常量指向另一个指针。
You can't point a const
to a different pointer.

27
00:01:22.750 --> 00:01:24.810
但您可以修改该对象，也可以添加对象，或者
But you can modify that,
you can add objects, or

28
00:01:24.810 --> 00:01:27.180
您可以向对象添加属性，从数组中添加内容。
you can add properties to an object,
things from array.

29
00:01:27.180 --> 00:01:28.870
我们不能改变这个指针
We can't change that pointer.

30
00:01:28.870 --> 00:01:30.549
您可以更改指针，但是
Let, you can change the pointer, but

31
00:01:30.549 --> 00:01:33.659
只有在封闭的范围内才能确定
it's only gonna be scoped
to whatever the closure is.

32
00:01:33.659 --> 00:01:36.706
将 var 提升到顶部。
And var is hoisted to the top.

33
00:01:36.706 --> 00:01:37.299
所以我们想
So const and let,

34
00:01:37.299 --> 00:01:39.716
如果你先去找他们再给他们一个参考
if you try to access them before
they're gonna throw a reference there,

35
00:01:39.716 --> 00:01:40.799
var 将会抛出未定义的值。
var will just throw undefined.

36
00:01:40.799 --> 00:01:43.120
很简单
Pretty simple.

37
00:01:43.120 --> 00:01:44.349
这不是骗你的问题
These aren't trick questions.

38
00:01:44.349 --> 00:01:48.189
你能在多快的时间里回答这些问题
It's just how fast and how comfortably
do you answer these questions?

39
00:01:50.280 --> 00:01:52.780
好吧，有错误的答案，但是没有那么多错误的答案。
Okay, there are wrong answers, but there
aren't as many wrong answers to this.

40
00:01:52.780 --> 00:01:55.780
就像，这个人对自己的 JavaScript 知识有信心吗 ?
It's just like, does this person feel
confident in their JavaScript knowledge?

41
00:01:55.780 --> 00:01:57.520
这不是骗术不是骗术
That's it, not a trick.

42
00:01:57.520 --> 00:01:58.969
作为采访者，你不是在耍他们。
And as the interviewer,
you're not trying to trick them.

43
00:01:58.969 --> 00:02:00.379
这不是骗你的问题
These aren't trick questions.

44
00:02:00.379 --> 00:02:02.340
这不像特里维亚的问题
These aren't like one of trivia questions.

45
00:02:02.340 --> 00:02:04.430
这些都是你知道你在说什么吗
These are just like,
do you know what you're talking about?

46
00:02:05.750 --> 00:02:07.670
有人向我解释典型的遗产吗
Someone explain prototypical
inheritance to me?

47
00:02:09.080 --> 00:02:10.635
谁谁都有
Anybody, anybody at all.

48
00:02:10.635 --> 00:02:12.132
> > 我就这样做了。
&gt;&gt; I just did.

49
00:02:12.132 --> 00:02:15.367
> > [LAUGH] 好，什么是原型?
&gt;&gt; [LAUGH] All right, what's a prototype?

50
00:02:19.550 --> 00:02:21.883
没有人这是很有趣的工程
Nobody, this is funny engineering.

51
00:02:21.883 --> 00:02:23.317
好吧没人
All right, nobody.

52
00:02:23.317 --> 00:02:24.252
好的好的
Yeah, take a shot.

53
00:02:24.252 --> 00:02:26.600
我要开枪了
&gt;&gt; I'll take a shot.

54
00:02:26.600 --> 00:02:30.433
因此，当对象继承自另一个对象时，
So when an object inherits
from another object,

55
00:02:30.433 --> 00:02:35.014
如果它继承的对象具有某些功能或
if that object that it inherited
from has some functions or

56
00:02:35.014 --> 00:02:39.129
属性，此新对象将具有这些属性。
properties, this new object,
it will have those.

57
00:02:40.780 --> 00:02:42.439
> > 嗯我来吧
&gt;&gt; Yeah, I'll take that.

58
00:02:42.439 --> 00:02:43.430
又不是诡计
Again, not a trick,

59
00:02:43.430 --> 00:02:48.060
JavaScript 具有原型，对象的基线原型。
JavaScript has a prototype,
a baseline prototype of the object.

60
00:02:48.060 --> 00:02:51.210
所有东西都是从物体上继承的，所以你可以做各种各样的事情。
Everything inherits from the object,
so you can do all sorts of things.

61
00:02:51.210 --> 00:02:52.740
JavaScript 中的所有内容都有一个原型，
Everything in JavaScript has a prototype,

62
00:02:52.740 --> 00:02:55.120
它具有继承自的基线对象。
it has a baseline object
that it inherits from.

63
00:02:55.120 --> 00:02:57.349
当您基于其他对象创建新对象时，
And when you create a new object
based on the other object,

64
00:02:57.349 --> 00:03:00.379
您可以继承所有这些属性，缺省情况下，
you can either inherit all those
properties, which you will be default, or

65
00:03:00.379 --> 00:03:03.039
你可以用你自己的方式，以此类推。
you can overwrite them with your own and
so on, and so forth.

66
00:03:03.039 --> 00:03:05.740
我通常用的，不是最好的。
The analogy I usually use,
it's not the best one.

67
00:03:05.740 --> 00:03:08.590
这很不错是有孩子的父母
It's pretty good,
is parents with children.

68
00:03:08.590 --> 00:03:11.770
你有一个棕色眼睛的父母，还有另一个有棕色眼睛的父母。
Do you have one parent with brown eyes,
you have another parent with brown eyes.

69
00:03:11.770 --> 00:03:13.039
孩子可以有棕色眼睛
The child could have brown eyes, or

70
00:03:13.039 --> 00:03:16.310
它可以写和有蓝色的眼睛之类的
it could over write it and
have blue eyes, something like that.

71
00:03:16.310 --> 00:03:18.689
再一次我不是在找太多细节和深度
Again, I'm not looking for
too much detail or depth,

72
00:03:18.689 --> 00:03:21.210
只是，你知道 JavaScript 中的原型是什么吗 ?
it's just, do you know what
prototype is in JavaScript?

73
00:03:21.210 --> 00:03:23.939
因为它是我们所做的一切
Because it's underneath everything we do,
and

74
00:03:23.939 --> 00:03:25.759
我希望你能了解到这一点
I expect you to have some
baseline knowledge about that.

75
00:03:25.759 --> 00:03:30.126
它不一定要深入，但是不要在它 [ LAUGH]上发抖。
It doesn't have to be in depth,
but don't fumble on it [LAUGH].

76
00:03:30.126 --> 00:03:31.242
别瞎猜
Don't guess.

77
00:03:31.242 --> 00:03:34.069
如果你猜的话那就不难看出来了
If you're guessing,
that's pretty easy to tell.

78
00:03:34.069 --> 00:03:37.737
如果是招聘者之类的问题的话
And a lot of times with these questions,
if it's a recruiter or things like that,

79
00:03:37.737 --> 00:03:41.301
他们不一定是在 UI 工程中非常熟悉的
they're not necessarily super well
versed in UI engineering, they might be,

80
00:03:41.301 --> 00:03:42.067
你永远不知道
you never know.

81
00:03:42.067 --> 00:03:45.566
但他们会有一个普通的答案他们在寻找
But they're gonna have kind of a general
answer, and they're looking for

82
00:03:45.566 --> 00:03:47.780
在那个范围内发生的事情
something that falls in that range.

83
00:03:47.780 --> 00:03:51.122
同样，这不是一个真实的错误，也不是错误的或错误的。
Again, it's not a true or
false or right or wrong.

84
00:03:51.122 --> 00:03:55.750
只是说这在 JavaScript中是什么意思 ?
It's just talking about what
does this mean in JavaScript?

85
00:03:58.620 --> 00:04:02.860
>> 它是您在其中可以更改的当前作用域
&gt;&gt; It's the current scope
you're in which can change and

86
00:04:02.860 --> 00:04:07.889
如果没有范围，即全局窗口，通常是对象吗 ?
if there is no scope,
that is the global window, object usually?

87
00:04:07.889 --> 00:04:09.069
> > 完美回答正确
&gt;&gt; Perfect answer, exactly right.

88
00:04:10.590 --> 00:04:14.409
我考虑了可以访问的所有内容的全局上下文。
I considered the global context of
everything that is available to access.

89
00:04:14.409 --> 00:04:15.729
所以所有的物体和
So all the objects and

90
00:04:15.729 --> 00:04:17.829
这些功能可供您使用，但未在本地定义。
functions are available to you
that are not locally defined.

91
00:04:19.259 --> 00:04:23.509
是啊如果你还没想过这种事
Yeah, and
if you haven't thought about this kind of

92
00:04:23.509 --> 00:04:25.790
高级的抽象问题好的
high level abstract questions,
yeah, that's okay.

93
00:04:25.790 --> 00:04:26.889
这当然是为了这个
That's what this course is for.

94
00:04:29.218 --> 00:04:30.500
DOM 的数据结构是什么 ?
What's the data structure of the DOM?

95
00:04:32.540 --> 00:04:33.240
>> 树。
&gt;&gt; Tree.

96
00:04:33.240 --> 00:04:35.096
> > 是，是树，就这样。
&gt;&gt; Yes, it's a tree, that's it.

97
00:04:35.096 --> 00:04:39.699
[ LAUGH] 再次，不是一个诡计问题，你之前是否考虑过这个问题 ?
[LAUGH] Again, not a trick question,
just have you thought about this before?

98
00:04:40.949 --> 00:04:41.449
什么是堆栈?
What is a stack?

99
00:04:46.906 --> 00:04:48.819
是一个数据结构，对，对。
It's a data structure, right, yeah.

100
00:04:48.819 --> 00:04:50.329
>> LIFO， FIFO。
&gt;&gt; LIFO, FIFO.

101
00:04:50.329 --> 00:04:55.550
最后一个是先出去还是先出去
Last in, first out versus first in,
first out.

102
00:04:55.550 --> 00:04:56.590
>> 哪一个 ?
&gt;&gt; Which one is which?

103
00:04:56.590 --> 00:05:01.569
>> Stack 为 LIFO，提示为 FIFO >> Yes， LIFO， FIFO， Last in，
&gt;&gt; Stack is LIFO, cue is FIFO
&gt;&gt; Yes, LIFO, FIFO, Last in,

104
00:05:01.569 --> 00:05:04.365
首先是堆栈，首先是第一组，作为提示。
First Out is the stack,
First in, First Out as a cue.

105
00:05:04.365 --> 00:05:06.509
想想你是否需要一个心理模型
Think about if you need a mental model.

106
00:05:06.509 --> 00:05:09.220
你是站着的那是提示
You're standing in line, that's a cue.

107
00:05:09.220 --> 00:05:13.129
第一个到达那里的第一个人如果这是一个公平的路线
The first person that gets there's first
one that leaves if it's a fair line

108
00:05:13.129 --> 00:05:14.949
堆栈是反向的
Stack is, it's reversed.

109
00:05:14.949 --> 00:05:18.189
就像你的线，然后实际上是后面的人。
It's like you get line and then actually
it's people in the back that go first.

110
00:05:18.189 --> 00:05:20.379
你就像什么 sammed ?
You're like, what, scammed again?

111
00:05:21.550 --> 00:05:23.576
我讨厌去 [ INAUDIBLE ] 。
I hate going to [INAUDIBLE].

112
00:05:23.576 --> 00:05:29.182
如何在 JavaScript 中创建这些结构 ?
How you create these
structures in JavaScript?

113
00:05:29.182 --> 00:05:33.350
>> 批量和灌木，为堆栈工作。
&gt;&gt; Bulk and bush with work for Stack.

114
00:05:33.350 --> 00:05:35.110
> > 是，是一个数组弹出和推移位。
&gt;&gt; Yeah, it is an array pop and
push shift.

115
00:05:35.110 --> 00:05:41.490
是啊，你怎么能看出来图片元素是装在页面上的 ?
Yeah, how can you tell if an image
element is loaded on the page?

116
00:05:47.810 --> 00:05:50.329
这个是更微妙的
This one is a little more nuanced but

117
00:05:50.329 --> 00:05:55.790
有一个图片的加载元素你可以说它是在装的吗
there's an onload element of Images You
can just say is it on, has it loaded?

118
00:05:55.790 --> 00:05:57.529
这回电话会被开除的
It'll fire that call back.

119
00:05:57.529 --> 00:05:59.471
好，什么叫 ( ) 和申请()?
All right, what are call() and apply()?

120
00:06:01.189 --> 00:06:03.499
>> 这是一种调用另一种方法的方法，但是
&gt;&gt; It's a way to call another method, but

121
00:06:03.499 --> 00:06:07.550
如果你要改变你的范围的话通常会用它
usually use it if you have to change
the scope you're calling with.

122
00:06:07.550 --> 00:06:09.970
我记不起来了是哪个 [ INAUDIBLE]
I can't remember which is
which [INAUDIBLE] I put.

123
00:06:09.970 --> 00:06:10.689
> > 我也不可以。
&gt;&gt; I never can either.

124
00:06:10.689 --> 00:06:11.379
没关系我是说
That's okay.

125
00:06:11.379 --> 00:06:15.050
我想知道的是他们改变范围的方法
All I would wanna know on this question
is their ways of changing the scope

126
00:06:15.050 --> 00:06:16.930
调用函数。
of the calling function.

127
00:06:16.930 --> 00:06:21.800
对，调用是一系列自变量，并应用自变量数组。
Yeah, and call is a series of arguments
and applies an array of arguments.

128
00:06:23.149 --> 00:06:25.759
不错我们不需要再申请了
Nice, we don't necessarily
need to apply as much anymore,

129
00:06:25.759 --> 00:06:29.089
因为我们有道具，或者我们有数组传播，就像这样。
because we have props or
we have array spreading, things like that.

130
00:06:29.089 --> 00:06:30.110
但我很想知道
But it'd be good to know.

131
00:06:31.300 --> 00:06:32.370
什么是事件验证?
What is event validation?

132
00:06:33.909 --> 00:06:38.370
传统上，如果您使用 HTML中的事件处理程序，
So traditionally,
if you have event handlers in HTML,

133
00:06:38.370 --> 00:06:42.096
您可以将事件处理程序应用于要拥有的每个元素。
you could apply an event handler to
every single element you wanna have.

134
00:06:42.096 --> 00:06:46.560
或者使用事件授权，您可以说我想拥有一个事件侦听器，并且
Or using event delegation, you could say
I wanna have one event listener, and

135
00:06:46.560 --> 00:06:47.699
就在上面
that's at the top.

136
00:06:47.699 --> 00:06:48.990
当你点击一些东西的时候
And when you click on something,

137
00:06:48.990 --> 00:06:51.389
它只会泡到负责处理事件的家长
it just bubbles up to the parent
that handles the event.

138
00:06:51.389 --> 00:06:52.389
这是一个活动代表团。
That's an event delegation.

139
00:06:53.600 --> 00:06:56.850
我想找人知道这个 czz 事件的听众真的很贵
I would want someone to know this cuz
event listeners are really expensive on

140
00:06:56.850 --> 00:06:59.840
每次渲染的时候都有一个页面会发生什么事吗
a page cuz every time it renders,
gotta be like did something happen?

141
00:06:59.840 --> 00:07:00.589
发生什么事了吗
Did something happen?

142
00:07:00.589 --> 00:07:06.089
因此，出于性能原因，最好有一个事件处理程序与 60 个事件处理程序。
So it's better to have one event handler
versus 60 for performance reasons.

143
00:07:06.089 --> 00:07:06.660
事件授权。
Event delegation.

144
00:07:06.660 --> 00:07:10.209
如果你说了些关于冒泡的东西，那也很好用。
If you said something about bubbling,
that's also good to use.

145
00:07:11.410 --> 00:07:11.910
什么是工人?
What is a worker?

146
00:07:17.879 --> 00:07:22.317
工作程序是您将在浏览器中使用以进行计算的工作
A worker is something you would use in
a browser to offload computationally

147
00:07:22.317 --> 00:07:23.879
昂贵的工作
expensive work.

148
00:07:23.879 --> 00:07:26.649
三种不同的线程 cubz JavaScript 是单线程的，如果您有
Three different thread cuz JavaScript is
single threaded, if you have something

149
00:07:26.649 --> 00:07:30.029
就像数到一万，数字，你想做的事情，
that's like tactically prime to 10,000,
numbers, something you want to do that and

150
00:07:30.029 --> 00:07:33.970
您没有阻止 UI， cuz 在 JavaScript中只有一个线程。
workers you're not blocking the UI,
cuz there's only one thread in JavaScript.

151
00:07:33.970 --> 00:07:35.409
而这也是你使用的时候。
And that's when you use one as well.

152
00:07:37.370 --> 00:07:39.540
好的谢谢你的提问
All right, those appreciate questions.

153
00:07:39.540 --> 00:07:42.670
这些都是我被问到的问题你可能会问
These are questions that I've been asked,
that you may get asked and

154
00:07:42.670 --> 00:07:45.980
我可以考虑好的关于 JavaScript的基本知识
that I can consider good
baseline knowledge of JavaScript.

155
00:07:45.980 --> 00:07:49.230
我知道 HTML 的比较难因为我们不觉得
I know the HTML ones are a little tougher
because we don't actually think in

156
00:07:49.230 --> 00:07:52.310
那样的话就可以有点小点了
that way, so those can be a little dicey.

157
00:07:52.310 --> 00:07:55.069
但总的来说我希望每个人都能从球棒上知道这些问题
But in general, I would expect everyone
to know these questions off the bat,

158
00:07:55.069 --> 00:07:56.920
就像把它们放了一样
just kind of pop them off.

159
00:07:56.920 --> 00:07:59.990
再次，不寻求准确的正确答案。
Again, not looking for
precise correct answers.

160
00:07:59.990 --> 00:08:03.100
我只想让他们知道他们在说什么
I just want that they have some
knowledge of what they're talking about.

161
00:08:04.620 --> 00:08:08.240
但重要的是，我不问的原因是我没有问部落问题。
But importantly, why I didn't ask
is I didn't ask trivia questions.

162
00:08:08.240 --> 00:08:12.310
我没问过什么对象加数组等于什么
I didn't ask what object
plus array equals,

163
00:08:12.310 --> 00:08:14.110
我在采访中被问到了
which I've been asked in an interview.

164
00:08:14.110 --> 00:08:15.269
我不知道为什么
I don't know why.

165
00:08:15.269 --> 00:08:16.410
什么都没告诉我
That doesn't tell me anything.

166
00:08:16.410 --> 00:08:19.870
它告诉我他们有一些奇怪的有趣知识
It tells me they have some
weird funny knowledge.

167
00:08:21.529 --> 00:08:23.800
但你知道有趣的是你通过提问和
But you know what's funny is,
you get trivia questions and

168
00:08:23.800 --> 00:08:26.310
我读了一个关于 JavaScript的奇怪的诡计
someone be like,
I read this weird trick about JavaScript.

169
00:08:26.310 --> 00:08:26.920
我们会黑进新闻
We'll hack the news.

170
00:08:26.920 --> 00:08:28.750
我要向某人问好
I'm gonna ask that to somebody.

171
00:08:28.750 --> 00:08:30.370
这是否与工作有关 ?
Is that relevant to the job?

172
00:08:30.370 --> 00:08:33.389
如果他们知道这事告诉你
If they know that,
does that inform you of anything that

173
00:08:33.389 --> 00:08:36.070
他们除了知道一些部落问题外，还能做些什么呢 ?
they can do other than they
know some trivia questions?

174
00:08:36.070 --> 00:08:37.909
所以如果你是采访者，不要问部落问题。
So if you're the interviewer,
don't ask trivia questions.

175
00:08:37.909 --> 00:08:39.860
问你知道的问题
Ask questions that you know.

176
00:08:39.860 --> 00:08:45.316
我明白我要面对的是更亲密的更亲密的关系
I see what I'm gonna face, its's even
real close, real closer, closer.

177
00:08:45.316 --> 00:08:49.120
你可能觉得你的面试很简单
You're probably thinking
your interview is easy,

178
00:08:49.120 --> 00:08:54.190
但这是因为你已经知道答案了
but that's because you already know
the answers to them, that's it.

179
00:08:54.190 --> 00:08:55.340
那是我的大灰鼠
That's my big rat.

180
00:08:55.340 --> 00:08:57.889
每个人都说我的面试我的问题很简单
Everybody says my interview,
my questions are easy.

181
00:08:57.889 --> 00:09:00.460
我的基督教问题很简单我的采访很简单
My Christian questions are easy,
my interviews easy.

182
00:09:00.460 --> 00:09:02.179
那是因为你已经知道答案了
That's cause you already know the answer.

183
00:09:02.179 --> 00:09:03.600
如果你不知道答案
If you didn't know the answer,

184
00:09:03.600 --> 00:09:06.870
你能不能解决你自己的面试问题
would you be able to solve
your own interview questions?

185
00:09:06.870 --> 00:09:10.509
也许不是，如果我们是诚实的话，也许不是。
Probably not, if we're being honest,
probably not.

186
00:09:10.509 --> 00:09:11.169
如果我是诚实的
If I'm being honest,

187
00:09:11.169 --> 00:09:15.070
我已经问了问题，我甚至都不知道答案是什么。
I've asked questions that I wouldn't even
know the answer to right off the bat.

188
00:09:15.070 --> 00:09:16.539
如果是的话，那是有效的面试问题吗 ?
If so, is that a valid interview question?

189
00:09:18.899 --> 00:09:22.620
这是我真正想让我们严肃对待的行业。
This is something I really want us
to take seriously as an industry.

190
00:09:22.620 --> 00:09:24.240
别再问问题了
Don't ask trivia questions.

191
00:09:24.240 --> 00:09:27.490
别问奇怪的算法问题
Don't ask weird algorithm
questions that aren't relevant.

192
00:09:27.490 --> 00:09:29.940
询问您是否知道答案或
Ask questions that you
would know the answer to or

193
00:09:29.940 --> 00:09:31.985
在你的日常工作中是必需的
is necessary in your day to day working.

194
00:09:31.985 --> 00:09:33.559
这也不是什么问题，对吧 ?
That's not much to ask, right?

195
00:09:34.970 --> 00:09:36.500
这是应用程序，初始调用。
That was the application,
the initial call.

196
00:09:36.500 --> 00:09:37.539
那真是太好了
That was a lot.

197
00:09:37.539 --> 00:09:39.879
这已经是很多信息了。
That was a lot of information already.

198
00:09:39.879 --> 00:09:45.850
CATSA 过程面试是一个磨磨人，它是关于耐力的，它是关于耐力的。
CATSA process interviewing is a grind,
it's about stamina, it's about endurance.

199
00:09:45.850 --> 00:09:47.850
作为采访者，
And as the interviewer,

200
00:09:47.850 --> 00:09:51.840
我想做的就是让那个过程尽量简单
what I wanna do is I wanna make
that process as easy as possible.

201
00:09:51.840 --> 00:09:54.399
采访也不容易变好变好了
Interviews are not gonna be easy,
rhey're never gonna be easy.

202
00:09:54.399 --> 00:09:55.769
他们不应该那么容易。
They shouldn't be easy.

203
00:09:55.769 --> 00:09:57.460
我们赚了很多钱
We get paid a lot of money for

204
00:09:57.460 --> 00:10:02.340
啊，但是最后我不喜欢擦伤，血汗。
we do, but at the end of the day I'm
not like bruised or bloody and sweaty.

205
00:10:02.340 --> 00:10:06.029
也许我的背在我的电脑上，吃得太多免费的食物。
Maybe my back hurts from eating too much
free food as I'm leaning over my computer.

206
00:10:06.029 --> 00:10:09.200
但最终我们赚了很多钱来做我们做的事
But at the end of the day we get paid
a lot of money to do what we do,

207
00:10:09.200 --> 00:10:12.539
采访应该不容易，应该实现。
interviews should not be easy,
they should be fulfilling.

208
00:10:13.669 --> 00:10:18.429
采访应该是第一次约会很尴尬有点挑战性
Interviews should be like a first date,
pretty awkward, a little challenging,

209
00:10:18.429 --> 00:10:20.259
你得把你最好的脸放在前面
you have to put your best face forward.

210
00:10:20.259 --> 00:10:24.840
最终，你觉得如果它能有效的话，你是对的，真的很令人满意。
At the end, do you think if it works out,
you're yeah, that was really satisfying.

211
00:10:24.840 --> 00:10:26.340
我想我们应该认识彼此
I think we got to know each other.

212
00:10:26.340 --> 00:10:28.700
我想我想和这个人一起继续这个旅程
I think I wanna continue on
this journey with this person.

213
00:10:28.700 --> 00:10:30.379
你在这第二次约会
There you go on a second date.

214
00:10:30.379 --> 00:10:31.580
对我的采访应该是这样的。
That to me is what a interview should be.

215
00:10:31.580 --> 00:10:35.129
应该是在挑战和奖励，但是
It should be challenging and
rewarding at the same time, but

216
00:10:35.129 --> 00:10:36.370
这不应该是令人沮丧的
it shouldn't be frustrating.

217
00:10:36.370 --> 00:10:37.389
不太会问对吧
Not too much to ask, right?
