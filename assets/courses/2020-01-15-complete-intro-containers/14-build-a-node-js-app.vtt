WEBVTT

1
00:00:00.140 --> 00:00:04.378
我要来这里做个新目录
And I'm going to come in here and
I'm gonna make a new directory.

2
00:00:04.378 --> 00:00:08.490
我要给这个人打个电话
I'm gonna call this one
build a nodejs-app.

3
00:00:08.490 --> 00:00:12.759
把目录换到那里
And change directories into there.

4
00:00:15.426 --> 00:00:16.879
我不知道我为什么要这么做
I don't know why I'm doing this
all from the command line.

5
00:00:16.879 --> 00:00:19.399
您也可以从 " 文件资源管理器 " 中完全执行此操作。
You could totally do it from here,
from the File Explorer too.

6
00:00:22.070 --> 00:00:24.748
我想让你在这里做个新文件
So the first thing I want you
to make a new file in here,

7
00:00:24.748 --> 00:00:26.368
我想让你称它为 index.js 。
I want you to call it index.js.

8
00:00:28.030 --> 00:00:31.509
我想让你到课程网页来
And I want you to just come over
to the course web page here.

9
00:00:31.509 --> 00:00:35.880
我们要去建一个 Node JS App
We're gonna go into
the Build a Node JS App.

10
00:00:38.503 --> 00:00:40.070
复制并粘贴这些内容。
And just copy and paste this.

11
00:00:40.070 --> 00:00:42.709
就像我写的像世界上最喜欢的服务器一样
Like I wrote just like the most
like Hello World server ever.

12
00:00:42.709 --> 00:00:47.170
离开伊塞林特没人在乎
Go away ESLint, no one cares.

13
00:00:48.929 --> 00:00:50.240
这不是节点 JS 类，
This is not a Node JS class,

14
00:00:50.240 --> 00:00:53.179
我不指望你能理解到船上的任何东西
I don't expect you to understand
literally anything on the board there.

15
00:00:53.179 --> 00:00:56.270
这比有关节点的打包节点 JS 应用程序更多。
This is more about packaging Node JS
applications than it is about Node.

16
00:00:57.869 --> 00:01:03.520
但是，可以说，它导入节点中的 HTTP 核心模块，
But suffice to say,
it imports the HTTP core module in Node,

17
00:01:03.520 --> 00:01:07.750
创建一个服务器，它在每次接收到请求时都将控制台记录。
creates a server that it'll console
log every time it receives a request.

18
00:01:07.750 --> 00:01:11.909
然后他们会用这个年龄的智慧回答用户，我的上帝，嗨。
And then they'll respond to the user
with this age old wisdom of, my god, hi.

19
00:01:13.049 --> 00:01:14.408
然后在端口 3000上启动服务器。
And then it starts
the server on port 3000.

20
00:01:14.408 --> 00:01:19.900
在 Fronend Masters上，有很多伟大的 Node JS 内容。
There's lots of great Node JS
content on Frontend Masters.

21
00:01:19.900 --> 00:01:24.658
如果你想多了解这些东西一定要检查这些东西
So definitely check out that stuff
if you wanna learn more about it.

22
00:01:26.376 --> 00:01:32.182
好吧如果你想看看就像我说的结点 index.js
All right, so if you wanna just see,
like if I say node index.js,

23
00:01:32.182 --> 00:01:35.628
您可以看到服务器已启动。
you can see there's a server started.

24
00:01:35.628 --> 00:01:39.746
如果我在这里说当地的 3000 人
And if I go over here and
I say local host 3000,

25
00:01:39.746 --> 00:01:43.579
你能在上面看到的很很特别的是我的天啊
you can see up there very
tinily it says OMG hi.

26
00:01:48.750 --> 00:01:51.620
你会看到它的接收请求两次
You'll see that as it said
receive request twice.

27
00:01:51.620 --> 00:01:55.129
这是因为当浏览器打开网页时，它也会请求收藏图标，
That's because when a browser opens
a webpage it also requests the favicon,

28
00:01:55.129 --> 00:01:56.588
所以才会有两次
that's why it's there twice.

29
00:01:56.588 --> 00:01:59.729
我知道有人会好奇的所以这就是贫民窟
I know someone was gonna wonder
about that, so it's the favicon.

30
00:02:04.376 --> 00:02:09.564
好的 Ctrl+C 以停止该问题。
Okay, so Ctrl+C to stop that.

31
00:02:09.564 --> 00:02:13.253
允许使用包含此应用程序的 Docker 文件，并且
Lets make a Docker file that
containerizes this application and

32
00:02:13.253 --> 00:02:15.379
然后为我们运行服务器，对吧 ?
then runs the server for us, right?

33
00:02:18.180 --> 00:02:22.319
我现在想做的就是在同一个目录中创建另一个文件。
So what I wanna do now is I'm gonna create
another file in the same directory.

34
00:02:25.000 --> 00:02:26.770
我要叫它 Dockerfile
And I'm gonna call it Dockerfile.

35
00:02:29.557 --> 00:02:33.581
我想说你可以想象
I wanna say as you might imagine,

36
00:02:33.581 --> 00:02:37.210
FROM 节点:12 - 拉伸。
FROM node:12-stretch.

37
00:02:37.210 --> 00:02:39.409
我要说副本
I'm gonna say copy.

38
00:02:39.409 --> 00:02:46.120
我们会把 index.js 复制到 index.js ，对吧 ?
And we're gonna copy index.js to index.js,
right?

39
00:02:47.729 --> 00:02:50.631
把它从源头复制到目的地吧
So copy it from source to destination,
right?

40
00:02:50.631 --> 00:02:55.668
然后我会说
And then I'm gonna say

41
00:02:55.668 --> 00:03:01.507
命令节点 index.js。
command node index.js.

42
00:03:01.507 --> 00:03:04.004
好了好了
There you go.

43
00:03:10.180 --> 00:03:12.030
好了现在我要建码头了对吧
Okay, and
now I need to build my docker file, right?

44
00:03:12.030 --> 00:03:15.961
所以我要在码头上建码头
So I'm gonna say docker build.

45
00:03:15.961 --> 00:03:20.389
给它一个标签，所以 -t 而不是 --标记，如果你像我一样懒。
Give it a tag, so -t instead of
--tag if you're lazy like me.

46
00:03:20.389 --> 00:03:22.379
我要用我的节点应用
And I'm just gonna stick with my-node-app.

47
00:03:22.379 --> 00:03:24.420
这会覆盖以前的一切
This will overwrite
whatever was there before,

48
00:03:24.420 --> 00:03:27.729
但我觉得我们可以把控制台记录在后面对吧
but I think we're okay to leave
the console logs behind, right?

49
00:03:29.289 --> 00:03:30.509
我不知道有些人看起来很悲伤
I don't know, some of you look pretty sad.

50
00:03:32.349 --> 00:03:34.085
因此， Docker 构建 -t my-node-app 和
So, docker build -t my-node-app and

51
00:03:34.085 --> 00:03:37.259
那我们就放一段时间让它知道我们在这目录里
then we'll put period to let it know
there we're in this directory here.

52
00:03:39.770 --> 00:03:43.543
你可以从节点上看到
And you can see there, from node,

53
00:03:43.543 --> 00:03:48.939
在这里盖了个副本 CMD 好的
built that, COPY here, CMD here, good.

54
00:03:48.939 --> 00:03:54.189
现在你可能在想，为什么把这些灰烬放在这里?
Now you might be wondering,
why is it putting these hashes in here?

55
00:03:54.189 --> 00:03:57.139
因为每一个都在技术上是一个有效的容器
That's because every one of these is
actually technically a valid container at

56
00:03:57.139 --> 00:03:58.030
每一个级别对吧
every single level, right?

57
00:03:58.030 --> 00:04:01.569
所以我可以在我来之前先执行这个
So I actually could just execute
this one before I got here.

58
00:04:01.569 --> 00:04:03.689
这就是 Docker 进行高速缓存的方式
And that's the way that Docker
does its caching is like,

59
00:04:03.689 --> 00:04:06.759
好吧这是一个有效的容器
okay, this is a valid
container up to here.

60
00:04:06.759 --> 00:04:10.030
如果你只在这里换东西，就从这里开始，对吧 ?
And then it just starts from here if
you only change things in here, right?

61
00:04:10.030 --> 00:04:14.530
因此，如果我不更改 index.js，那么它将再次从该点重新启动，对吗 ?
So if I don't change index.js, it would
just restart from that point again, right?

62
00:04:16.120 --> 00:04:17.699
所以这就是那些数字的原因。
So that's why those numbers are there.

63
00:04:17.699 --> 00:04:20.442
我们将更多地了解 Docker 文件的最佳实践，但对于
We'll get more into best
practices of docker files, but for

64
00:04:20.442 --> 00:04:22.605
现在才知道这就是为什么
now just know that that's
why those are there.

65
00:04:22.605 --> 00:04:30.555
[ SOUND] 所以现在我可以说 docker 运行我的节点应用程序。
[SOUND] So
now I can say docker run my-node-app.

66
00:04:32.959 --> 00:04:35.850
你开始了，服务器开始了，对吧 ?
There you go, server started, right?

67
00:04:35.850 --> 00:04:38.759
因此，我们的节点应用程序现在正在容器中运行。
So our node app is now running
inside of a container.

68
00:04:38.759 --> 00:04:42.370
但问题是，如果我来这里，它说无法连接。
Problem though, if I come over here,
it says unable to connect.

69
00:04:43.819 --> 00:04:44.350
那为什么呢 ?
Well, why is that?

70
00:04:46.480 --> 00:04:49.439
我们不跟它分享网络对吧
Well, we didn't share the network with it,
right?

71
00:04:49.439 --> 00:04:53.850
所以记住了名字空间，对，刚才我们说的那个东西呢 ?
So remember name spaces, right, that thing
that we talked about a little while ago?

72
00:04:53.850 --> 00:04:56.670
它被有意地限制在外面的世界。
It's intentionally limited
off from the outside world.

73
00:04:56.670 --> 00:05:00.326
我们没有给这个容器明确的允许与主机网络通话
We did not give explicit permission to
this container to talk to the host network

74
00:05:00.326 --> 00:05:02.029
所以它都包含在里面
so it's all contained inside of it.

75
00:05:02.029 --> 00:05:05.685
它正试图伸出来，但主机操作系统就像
And it's trying to reach out but
the host operating system is like,

76
00:05:05.685 --> 00:05:07.879
不你不能在港口里说话
no, you don't get to talk in that port.

77
00:05:10.389 --> 00:05:11.509
那就这样吧
So let's do that.

78
00:05:11.509 --> 00:05:17.408
让我们把它处理好
Let's make it work on that.

79
00:05:17.408 --> 00:05:20.500
这是另一个我忘了告诉你的有趣的事情。
Here's another fun thing that
I forgot to tell you about.

80
00:05:20.500 --> 00:05:21.000
请尝试按下 Ctrl+C 。
Try hitting Ctrl+C.

81
00:05:24.488 --> 00:05:25.889
这就是我以前所讲的
This is what I was telling before.

82
00:05:25.889 --> 00:05:30.177
节点不响应这些进程。
Node does not respond to
these sort of processes.

83
00:05:30.177 --> 00:05:33.355
所以我要说的是 Ctrl+C to docker，
So what's happening is I'm
saying Ctrl+C to docker,

84
00:05:33.355 --> 00:05:38.449
Docker 会把它传递到节点，节点就像我不在乎，对吧 ?
docker is then passing that along to node,
and node's like I don't care, right?

85
00:05:38.449 --> 00:05:40.370
你可以在这里做一些事情。
So there's a couple of
things you can do here.

86
00:05:40.370 --> 00:05:44.740
最好的做法是，您应该进入节点应用程序。
The best thing to do is you should
go inside of your node application.

87
00:05:44.740 --> 00:05:47.620
同样，这不是一个节点课程，所以我不会给你们展示如何去做，但是
Again, this is not a node course so I'm
not going to show you how to do it, but

88
00:05:47.620 --> 00:05:53.810
你会说， process.on，
you would say, process.on,

89
00:05:53.810 --> 00:05:57.129
SIGTERM，对，然后你就会经历这些事情。
SIGTERM, right, and then you would go
through and do all that kind of stuff.

90
00:05:57.129 --> 00:05:58.220
现在不做了
Not gonna do it right now.

91
00:05:58.220 --> 00:06:01.509
但对于节点开发者，这是正确的方法。
But that's the correct way to do this for
a node developer.

92
00:06:01.509 --> 00:06:07.899
所以我要做的第一件事是，让我们停止这一切，因为它必须停止。
So the first thing I'm gonna do is, let's
actually stop this because it has to stop.

93
00:06:07.899 --> 00:06:10.569
所以我要说停手
So I'm gonna just say docker ps.

94
00:06:12.269 --> 00:06:16.987
你可以在这里看到我的节点应用程序。
And you can see here
my-node-app right there.

95
00:06:16.987 --> 00:06:23.011
pedantic_goldstine，请 Docker 杀死 pedantic_goldstine。
pedantic_goldstine, please docker
kill the pedantic_goldstine.

96
00:06:23.011 --> 00:06:26.721
所以现在如果我回到这里，你会发现它已经消失了，对吗 ?
So now if I go back over here,
you'll see that it's gone, right?

97
00:06:29.035 --> 00:06:33.189
接下来我要告诉你，如果你用 Docker 运行 -- init，
So the next thing I'm gonna show you,
if you run this with docker run -- init,

98
00:06:33.189 --> 00:06:37.865
它的模块叫做 " 蒂尼" ， " T-I-N-I " ，它是向后的，对吗 ?
this runs up with it module called tini,
T-I-N-I, which is init backwards, right?

99
00:06:39.430 --> 00:06:44.040
所以它会让你和你的人
And so it kind of proxies that process and
then it will shut down for you and

100
00:06:44.040 --> 00:06:45.620
它会自动关闭您的节点。
it will automatically shut down node for
you.

101
00:06:45.620 --> 00:06:50.149
所以如果我再这样做，然后按 Ctrl+C，蒂尼就会进入
So if I do this again with that and
I hit Ctrl+C, tini will actually go in and

102
00:06:50.149 --> 00:06:51.949
为我杀死节点进程。
kill the node process for me.

103
00:06:51.949 --> 00:06:54.600
所以这有点像个我不用去的小黑
So it's kind of like a little
hack that I don't have to go and

104
00:06:54.600 --> 00:06:55.990
处理那些 sig 术语事件。
handle those sig term events.

105
00:06:55.990 --> 00:06:57.170
它会为我做的
It'll just do it for me.

106
00:06:59.550 --> 00:07:04.529
所以你会开始看到我运行这个 --init ，很可能 --rm 现在，就为了
So you'll start seeing me run that
--init and probably --rm now, just for

107
00:07:04.529 --> 00:07:08.459
纯粹的懒惰是我不想自己去做的
pure laziness factor,
that I don't wanna go do that myself.

108
00:07:10.639 --> 00:07:12.170
你可以在生产中运行
You could run this in production.

109
00:07:12.170 --> 00:07:15.470
如果你真的想和蒂尼一起生产
If you really are gonna run it in
production with tini with a --init,

110
00:07:15.470 --> 00:07:18.879
我建议去你的 Docker 文件安装蒂尼
I would suggest going into your
Docker file, installing tini and

111
00:07:18.879 --> 00:07:23.319
然后从蒂尼执行节点，以便将其构建到 Docker 容器中。
then executing Node from tini so that it's
just built into the Docker container.

112
00:07:23.319 --> 00:07:25.839
否则，您将会运行某些生产服务器，并且
Otherwise you'll forget,
you'll run some production server and

113
00:07:25.839 --> 00:07:26.990
你不能把它关掉
you can't shut it down.

114
00:07:26.990 --> 00:07:27.718
有点问题对吧
Kind of a problem, right?

115
00:07:27.718 --> 00:07:35.281
所以现在我想把那个港口曝光对吧
So all right, so
now I wanna expose that port, right?

116
00:07:35.281 --> 00:07:37.550
我想穿过那个集装箱
I wanna punch a hole
through that container so

117
00:07:37.550 --> 00:07:40.610
我可以把 3000 口暴露给外面的世界
that I can expose that port
3000 to the outside world.

118
00:07:42.060 --> 00:07:45.050
所以我要做的就是公布
So what I'm gonna do is
I'm gonna say --publish.

119
00:07:46.750 --> 00:07:50.240
我想去港口 3000 我想把它暴露在 3000 的港口对吧
And I wanna take port 3000,
I wanna expose it on port 3000, right?

120
00:07:50.240 --> 00:07:54.420
我可以在 8000 号端口上进行路由和曝光，但我不会去做。
I could do some routing and expose this on
port 8000 right, but I am not going to.

121
00:07:56.834 --> 00:08:01.904
因此，如果我运行此服务器，请启动端口 3000。
So now if I run this
server started port 3000.

122
00:08:01.904 --> 00:08:06.944
现在你可以看到它又说了，对吧 ?
And now you can see here it says again,
omg, right?

123
00:08:06.944 --> 00:08:09.504
而且它说收到的请求，等等。
And it says request received,
so on so forth.

124
00:08:09.504 --> 00:08:12.559
我们这样做的方式是发布 3000:3000。
And the way that we did that
is by the publish 3000:3000.

125
00:08:12.559 --> 00:08:17.185
>> 所以，你不把它放到 c 线里吗 ?
&gt;&gt; So you don't put in a dockerfile
you just put it into the c line?

126
00:08:17.185 --> 00:08:21.922
>> 所以我认为下一节是关于，好吧，有个东西叫
&gt;&gt; So I think literally the next section
is about, well, so there's a thing called

127
00:08:21.922 --> 00:08:25.699
所以您可以在 Docker 文件中输入命令来执行该操作。
expose and so you can put a command
inside of docker file to do it.

128
00:08:26.990 --> 00:08:30.391
但我建议通过发布库来做更多的事
But I would suggest doing it through
publish cuz it's something more you wanna

129
00:08:30.391 --> 00:08:31.473
在运行时确定
determine at runtime and

130
00:08:31.473 --> 00:08:34.063
只会让大多数人期待的工作曝光
expose just a necessary work
that most people expect it to.

131
00:08:34.063 --> 00:08:36.960
所以，让我们一起去吧，但问题是好的。
So, let's just go with no,
but good question.
