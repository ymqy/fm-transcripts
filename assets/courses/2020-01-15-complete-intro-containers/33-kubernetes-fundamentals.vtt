WEBVTT

1
00:00:00.700 --> 00:00:03.972
好吧那就更黑暗了这就更重要了
All right so that was darker compose,
this is very much more and

2
00:00:03.972 --> 00:00:07.985
对你和你白天来说都很有用
one misses primary useful to you and
your day to day basis, and it's much more

3
00:00:07.985 --> 00:00:12.478
以发展这种经验为中心的经验。
oriented towards development the kind of
experience as an NCICD kind of experience.

4
00:00:12.478 --> 00:00:15.743
Kubernetes 非常注重生产工作负载。
Kubernetes is very much oriented
towards production workloads.

5
00:00:15.743 --> 00:00:18.617
Kubernetes 是为了生产工作负载而编写的，
Kubernetes was written for
production workloads,

6
00:00:18.617 --> 00:00:22.666
你大概不会想在你的电脑上运行 Kubernetes
you probably don't typically want to
run Kubernetes on your computer for

7
00:00:22.666 --> 00:00:25.225
我们会讨论的一系列的原因
just a slew of reasons
that we'll talk about.

8
00:00:29.527 --> 00:00:30.687
所以库伯内特
So Kubernetes.

9
00:00:30.687 --> 00:00:33.816
这一部分我要告诉你
This section I'm just gonna tell you
the kind of the high level concepts of

10
00:00:33.816 --> 00:00:34.573
库伯内特斯
Kubernetes, and

11
00:00:34.573 --> 00:00:37.813
然后我就会给你展示一种便宜的方法向库伯内特介绍
then I'm gonna show you kind of a cheap
way to get introduced to Kubernetes.

12
00:00:40.270 --> 00:00:44.734
首先你可能会看到库伯内特通常缩写为 k8s
So first of all, you'll likely see
Kubernetes often abbreviated as k8s,

13
00:00:44.734 --> 00:00:49.912
在 K 和 s 之间有 8 个角色那就是从那里来的
k-8-s, cuz there's 8 characters between
k and s, that's where that comes from.

14
00:00:49.912 --> 00:00:52.195
人们都懒惰，不记得怎么拼。
People are lazy and
can't remember how to spell it.

15
00:00:52.195 --> 00:00:57.128
尤其是非英语的人，很难记住怎么拼
Especially for non-English speakers, it
can be difficult to remember How to spell

16
00:00:57.128 --> 00:01:00.749
库伯内特，所以这就是为什么它经常如此的缩写。
Kubernetes, so
that's why its often abbreviated that way.

17
00:01:00.749 --> 00:01:02.341
所以库伯内特斯
So, Kubernetes.

18
00:01:02.341 --> 00:01:06.438
我喜欢告诉别人我觉得容器简单容易
I like to tell people that I think
containers are simple and more easy and

19
00:01:06.438 --> 00:01:10.894
每个人都应该知道怎么用码头的容器之类的
everyone should know how to use containers
in docker, and things like that.

20
00:01:10.894 --> 00:01:13.674
库伯内特很难，而且很困难。
Kubernetes is hard, and it's difficult.

21
00:01:13.674 --> 00:01:16.012
不是每个人都应该懂得如何使用库伯内特。
And not everyone should
know how to use Kubernetes.

22
00:01:16.012 --> 00:01:19.819
但我要教你怎么做才能让你明白
But I'm gonna show you how to do it
just so you understand what it is and so

23
00:01:19.819 --> 00:01:24.140
你知道什么时候才能到达它什么时候你肯定不想去
you can know when to reach for it and when
you definitely do not wanna reach for it.

24
00:01:24.140 --> 00:01:28.649
就我个人而言，我把这个比作 Redux 和反应，对，雷达克斯，
Like for me personally, I compare this
to Redux and react, right, Redux,

25
00:01:28.649 --> 00:01:33.459
真的很困难而且并非总是必要的，人们仍然想知道。
it's really difficult and not always
necessary and people still wanna know it.

26
00:01:33.459 --> 00:01:36.139
我要教你如何使用 Redux 我要告诉你
So I'm going to teach you how to
use Redux,and I'm gonna tell you

27
00:01:36.139 --> 00:01:37.890
最重要的是不要用它，
not to use it, [LAUGH] for
the most part, and

28
00:01:37.890 --> 00:01:40.343
这也是我在这里和库伯内特的观点
that's kind of what my point
here with Kubernetes as well.

29
00:01:40.343 --> 00:01:42.884
这就很难了很难
Is that, it's difficult, It's hard.

30
00:01:42.884 --> 00:01:46.078
它是一个复杂的产品，解决了一个复杂的问题。
It's a complicated product that
solves a complicated problem.

31
00:01:46.078 --> 00:01:50.037
最重要的是你通常不需要它除非你是个大的
And for the most part, you don't
normally need it unless you are a big

32
00:01:50.037 --> 00:01:54.210
公司是一家大型的，面向微型服务的大型建筑。
company that's shipping big,
micro service oriented architecture.

33
00:01:54.210 --> 00:01:58.540
这个是在 Google 为 Google 问题创建的，我们大多数都不需要
This was created at Google for Google
problems and most of us don't necessarily

34
00:01:58.540 --> 00:02:03.227
每天都有谷歌问题吗
have Google problems on
the day to day Okay?

35
00:02:03.227 --> 00:02:06.376
所以，让我们谈谈你什么时候想用它。
So, let's talk about when
you would wanna use it.

36
00:02:06.376 --> 00:02:09.097
如果你有很多容器库伯内特很有用
Kubernetes is useful if you
have a lot of containers,

37
00:02:09.097 --> 00:02:11.405
有很多不同的服务对吧
a lot of different kind of services,
right?

38
00:02:11.405 --> 00:02:13.175
就像我们有网络服务一样 DB 服务
Like we have the web services,
the DB service.

39
00:02:13.175 --> 00:02:15.837
你有各种不同的服务
And you have all these various
different services and

40
00:02:15.837 --> 00:02:18.570
他们之间的关系很复杂
they have complex relationships
between each other.

41
00:02:18.570 --> 00:02:22.382
这就是 Kubernetes 非常非常有用的原因，因为你可以定义这些
That's when Kubernetes is very,
very useful because you can define these

42
00:02:22.382 --> 00:02:26.388
关系，您可以定义安全规则，它可扩展得非常好。
relationships, you can define the security
rules, it scales out very well.

43
00:02:26.388 --> 00:02:28.384
这是库伯内特在做的另一件事。
That's another thing that
Kubernetes is very good at doing.

44
00:02:28.384 --> 00:02:31.729
装一个集装箱，做 100 个集装箱，
It's very good at taking one container and
making that 100 containers and

45
00:02:31.729 --> 00:02:33.793
然后再去一个集装箱，对吧 ?
then going back down to one container,
right?

46
00:02:33.793 --> 00:02:37.134
它非常非常擅长检查容器的运行状况。
It's very, very good at checking
the health of your containers.

47
00:02:37.134 --> 00:02:40.951
所以如果你有 40 个容器，其中一个会开始转
So if you have like, 40 containers,
and one of them starts going wonky or

48
00:02:40.951 --> 00:02:42.115
就像这样
something like that.

49
00:02:42.115 --> 00:02:45.788
它可以通过健康检查来检测这个容器
It can detect that via health checks and
say cool, that container,

50
00:02:45.788 --> 00:02:48.954
把它关掉，旋转一个，把它放在它的位置。
shut that one down, spin one up,
put it back in its place.

51
00:02:48.954 --> 00:02:50.905
所以它真的很棒。
So it's really good at stuff like that.

52
00:02:50.905 --> 00:02:58.359
这些都是非常，非常注重生产，有问题的，对吧 ?
These are all very, very production
oriented and Kind of problems, right?

53
00:02:58.359 --> 00:03:02.034
让我们看看库贝尔奈特的一些基本概念和术语
Let's go over some of the fundamental
concepts and terminology of Kubernetes

54
00:03:02.034 --> 00:03:05.222
你得明白这一点才能用库伯内特
cuz you kind of have to understand
this to be able to use Kubernetes.

55
00:03:07.790 --> 00:03:12.320
所以当你旋转一个 " 库伯内特 " 簇的时候，第一件事就是
So when you spin up a Kubernetes cluster
of any variety, the first thing is it's

56
00:03:12.320 --> 00:03:16.122
有个主人就像一个中央控制舱
gonna have a master and
that's kind of like a central control pod.

57
00:03:16.122 --> 00:03:19.367
这控制了服务中的其他内容。
That controls everything
else in the service.

58
00:03:19.367 --> 00:03:23.204
因此，很多云供应商都不会为您提供主数据库的费用。
So a lot of cloud providers
won't charge you for the master.

59
00:03:23.204 --> 00:03:28.567
我知道 Azure 和 Google Cloud Platform 不会为您负责主数据库。
So I know Azure and Google Cloud Platform
don't charge you for the master.

60
00:03:28.567 --> 00:03:31.657
但亚马逊确实是这样做的。
But Amazon does actually.

61
00:03:31.657 --> 00:03:33.278
所以他们会指控你
So they will actually charge you for

62
00:03:33.278 --> 00:03:36.917
它在库伯内特的内部控制一切
the notes that it's running inside of
Kubernetes to control everything else.

63
00:03:36.917 --> 00:03:41.492
这是 AKS 是 Azure Kubernetes 服务
That's for AKS and
which is Azure Kubernetes Service and

64
00:03:41.492 --> 00:03:46.926
GKE Google的 Kubernetes 引擎，但 Elastic Kubernetes 服务
GKE Google's Kubernetes Engine,
but Elastic Kubernetes Service

65
00:03:46.926 --> 00:03:51.325
就是亚马逊公司负责你的主人
which is the Amazon one does
charge you for the master.

66
00:03:51.325 --> 00:03:56.326
您也可以在不使用诸如 AKS 或 GKE 之类的情况下运行 Kubernetes 。
You can also run Kubernetes without using
like AKS or or GKE or anything like that.

67
00:03:56.326 --> 00:04:00.003
只是在 VM 上自己管理自己的东西，这很困难，对吧 ?
Just on VMs yourself and
run your own stuff, it's just hard, right?

68
00:04:00.003 --> 00:04:03.640
库兹你现在不能只管理各种不同的药
Cuz you have to not now manage not only
all the various different pods and

69
00:04:03.640 --> 00:04:07.774
节点之类的，您还必须管理更多工作的主机。
nodes and things like that, you also have
to manage the hosts which is more work.

70
00:04:07.774 --> 00:04:09.468
那几家公司呢
What about a bunch of companies do it?

71
00:04:09.468 --> 00:04:11.194
好的。
Okay.

72
00:04:11.194 --> 00:04:13.385
这就是大师的东西
So that's what the master is.

73
00:04:13.385 --> 00:04:17.718
就像中央控制飞机就像你告诉库伯奈兹的时候
It's like the central control plane,
like when you tell Kubernetes hey,

74
00:04:17.718 --> 00:04:19.454
把这个扩大到十个节点
scale this up, to ten nodes.

75
00:04:19.454 --> 00:04:20.928
你要和主人谈谈
You're gonna talk to the master and

76
00:04:20.928 --> 00:04:22.903
然后主人会为你做所有的工作
then the master is gonna
do all the work for you.

77
00:04:22.903 --> 00:04:24.858
就像大脑一样
So it's like the brain.

78
00:04:24.858 --> 00:04:26.184
我觉得这是个很好的类比。
I think that's a good analogy.

79
00:04:26.184 --> 00:04:29.153
它是库伯内特群的大脑。
It's the brain of the Kubernetes cluster.

80
00:04:29.153 --> 00:04:32.999
好的，下一个需要知道的是不要混淆的节点
Okay, the next thing that you need to know
about is nodes which is not to be confused

81
00:04:32.999 --> 00:04:33.913
没有 Node.js。
with no Node.js.

82
00:04:33.913 --> 00:04:36.331
这两者之间没有关系
There's no relation between the two.

83
00:04:36.331 --> 00:04:38.975
这些实际上就像工人端点，但是
These are actually like
the worker endpoints, but

84
00:04:38.975 --> 00:04:42.060
那些会真正为你工作的节点
the nodes that are actually
gonna be doing the work for you.

85
00:04:42.060 --> 00:04:45.716
他们是真正与主人交谈过的人
And they're the ones that
actually talked to master.

86
00:04:45.716 --> 00:04:48.880
所以一个节点可以包含多个容器，对吗 ?
So one node can contain
multiple containers, right?

87
00:04:48.880 --> 00:04:51.014
就像 VM 可以有多个容器在其上运行。
Just like a VM can have multiple
containers running on it.

88
00:04:51.014 --> 00:04:54.074
但就像这些类型的端点管理着所有这些
But it's like these kinda endpoints
that are managing all these kind of

89
00:04:54.074 --> 00:04:54.949
工作负载。
workloads for you.

90
00:04:54.949 --> 00:04:58.697
你的一些节点也会是一个容器
Some of your nodes will just
be one container as well and

91
00:04:58.697 --> 00:05:01.148
也可以是正常的
that's also can be normal as well.

92
00:05:01.148 --> 00:05:03.644
特别是如果您有小节点或
Particularly if you have
either small nodes or

93
00:05:03.644 --> 00:05:06.341
你的容器里有很多资源
you have containers that
take a lot of resources.

94
00:05:09.014 --> 00:05:12.396
因此，如果您像我们一样运行 Node.js 服务器，
So, if you're running
a Node.js server like we are,

95
00:05:12.396 --> 00:05:15.495
在一个节点上可能有多个容器。
you'll likely have many
containers on one node.

96
00:05:15.495 --> 00:05:17.778
这种情况经常会发生。
That is kinda frequently what will happen.

97
00:05:17.778 --> 00:05:21.800
所以，从技术上来说，一个节点就像一个部署目标。
So technically a node is
just like a deploy target.

98
00:05:21.800 --> 00:05:23.504
它可以是 VM。
It can be a VM.

99
00:05:23.504 --> 00:05:24.913
它可能是另一个容器
It could be another container.

100
00:05:24.913 --> 00:05:27.031
它可以是一个裸机服务器。
It could be a little bare metal server.

101
00:05:27.031 --> 00:05:31.802
是什么节点就比较不重要了
It's it's relatively unimportant
of what the node is as long as it

102
00:05:31.802 --> 00:05:34.115
除了容器好吗
can except containers, okay?

103
00:05:36.542 --> 00:05:40.367
那么到那时，我们就有了一些叫做 " 药" 的东西。
So at that point then we have
things that are called pods.

104
00:05:40.367 --> 00:05:44.918
它基本上是一个无法分离的单元的部署使用。
And it's basically a deployment use
of the unit that cannot be separated.

105
00:05:44.918 --> 00:05:47.053
所以我想举一个很好的例子。
So I'm trying to think of
a good example of that.

106
00:05:47.053 --> 00:05:51.533
假设你有这个微型服务跟这个微型服务
Let's say you had this micro service
that talk to this micro service under to

107
00:05:51.533 --> 00:05:53.218
紧密联系在一起。
strongly linked together.

108
00:05:53.218 --> 00:05:55.670
也许它就像是用户服务中的密码服务
Maybe it's like a password
service in a user service and

109
00:05:55.670 --> 00:05:57.191
他们就不能分开了
they can't really be separated.

110
00:05:57.191 --> 00:05:58.918
因为他们需要一起部署
Cuz they need to deployed together.

111
00:05:58.918 --> 00:06:00.583
那就被认为是一个吊舱，对。
That would be considered a pod, right.

112
00:06:00.583 --> 00:06:04.055
就像两个或三个容器一样，都是原子的权利。
So be like two or
three containers that are atomic right.

113
00:06:04.055 --> 00:06:07.064
他们不能分开你把它们作为一个吊舱
They can't be split apart so
you deploy them as one pod.

114
00:06:07.064 --> 00:06:10.668
不是一直如此，很多时候你的吊舱都只会是一个容器，
It's not always the case, a lot of times
your pod will only be one container,

115
00:06:10.668 --> 00:06:13.220
就好像它只会是一个你在运作的服务
like it will just be one
service that you're running,

116
00:06:13.220 --> 00:06:15.899
但往往也可以是多方面的。
but frequently it can also
be multiple things together.

117
00:06:15.899 --> 00:06:19.690
然后你就会有这个吊舱
And then you'll have this pod
that talks to this pod and

118
00:06:19.690 --> 00:06:24.060
那些鬼话都说起来就能在
all those pods talking together
will make a service at the end of

119
00:06:24.060 --> 00:06:28.117
你会得到一个人们会说话的用户服务
that you'll have a user service
that people will talk to.

120
00:06:28.117 --> 00:06:29.223
让我们来谈谈服务是什么。
So let's talk about what a service is.

121
00:06:29.223 --> 00:06:32.432
当你有便装当你有这些容器的时候
When you have pods and
when you have these containers,

122
00:06:32.432 --> 00:06:34.595
他们会和对方说话
they will be talking to each other and

123
00:06:34.595 --> 00:06:39.341
这种路由会动态的因为你会在
those kind of routing things will dynamic
because you'll be spinning up pods and

124
00:06:39.341 --> 00:06:44.055
摧毁了便便很可能还能做各种不同的事情
destroying pods and likely to be able to
be doing all sorts of different things.

125
00:06:44.055 --> 00:06:47.757
而且在任何时候你都不知道有多少容器会运行
And at any given time you don't actually
know how many containers will be running

126
00:06:47.757 --> 00:06:48.632
在任何特定时间
at any given time.

127
00:06:48.632 --> 00:06:51.192
所以当服务变得有用时
So that's when services become useful,

128
00:06:51.192 --> 00:06:55.884
因为服务与组成一个服务的一组群相似。
because services are like a group of
pods together that make up one service.

129
00:06:55.884 --> 00:06:58.524
所以你会说，就像结账服务一样。
So you'll have let's say,
like a checkout service.

130
00:06:58.524 --> 00:07:03.379
然后您可以拥有您的购物车服务，与此结帐服务交谈，以及
And then you can have your cart service,
talk to this the checkout service, and

131
00:07:03.379 --> 00:07:05.927
他们在这些 URL上相互交谈
they talk to each other on these one URLs.

132
00:07:05.927 --> 00:07:09.511
尽管这些服务并非完全分开，但它们是一致的
They are consistent despite the fact that
these services don't are totally separate

133
00:07:09.511 --> 00:07:10.264
从彼此之间
from each other.

134
00:07:10.264 --> 00:07:12.430
他们可以以一致的方式相互交流。
They can talk to each
other in a consistent way.

135
00:07:12.430 --> 00:07:14.766
您将这些内容定义为服务。
You define those as a service.

136
00:07:14.766 --> 00:07:16.677
这有点道理吗
That kinda makes sense?

137
00:07:16.677 --> 00:07:21.456
我们要到的地方就有很多东西要从你那里来
We're getting to the point where,
there's just a lot of stuff coming at you.

138
00:07:21.456 --> 00:07:23.987
我想再教你库伯内特
I'm trying to teach you
Kubernetes which again,

139
00:07:23.987 --> 00:07:27.856
就像半个小时就在库伯内特的五天课
there should be like a five day course
just on Kubernetes in like a half hour.

140
00:07:27.856 --> 00:07:31.036
所以这很复杂
So just it is complicated.

141
00:07:31.036 --> 00:07:34.875
如果你觉得很复杂，是因为它很复杂，对吧 ?
If you feel like it is complicated,
it is because it is complicated, right?

142
00:07:34.875 --> 00:07:37.055
所以就知道了
So just be aware of that.

143
00:07:37.055 --> 00:07:41.427
好的，然后你有所谓的 " 部署 " ，那就是
Okay, and then at the end of that you have
what's called a Deployment, which is what

144
00:07:41.427 --> 00:07:45.444
你跟库伯内特说了我想出去的事情
you described to Kubernetes, here's
the things that I would like to go out.

145
00:07:45.444 --> 00:07:48.411
然后你可以有多个不同的部署
And then you can have multiple
different deployments you can have,

146
00:07:48.411 --> 00:07:49.822
您可以回滚部署。
you can roll back deployments.

147
00:07:49.822 --> 00:07:54.408
它就像一个三角洲之间或者类似的变化
It's kind of like a delta between,
or like a change set of,

148
00:07:54.408 --> 00:07:57.632
我有这个现在我想去了对吧
I had this and now I wanna go here, right?

149
00:07:57.632 --> 00:08:00.586
所以你的定义是不一样的
So you're defining like
something that's different and

150
00:08:00.586 --> 00:08:04.682
如果 " 部署 " 出错并且您说 " 嘿" ，那么将该链回滚到它的位置
if that Deployment goes wrong and you say
hey, roll that chain set back to where it

151
00:08:04.682 --> 00:08:08.675
在中断之前，对，然后您也可以部署更多的部署。
was before the broke, right and then you
can deploy more deployments as well.

152
00:08:08.675 --> 00:08:11.543
所以你可以在你的集群中定义不同时间的差异。
So you're kind of defining differences
over time in your cluster.
