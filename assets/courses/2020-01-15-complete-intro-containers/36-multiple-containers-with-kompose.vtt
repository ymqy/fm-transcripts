WEBVTT

1
00:00:00.210 --> 00:00:02.355
让我们在这里做点乐事吧
Let's do something fun here.

2
00:00:02.355 --> 00:00:08.576
我们会说 kubectl 比例 --副本=
We're gonna say kubectl scale --replicas=,

3
00:00:08.576 --> 00:00:15.246
我们一起去 5 点保守点
let's go with 5 and
be conservative for the moment.

4
00:00:15.246 --> 00:00:20.911
假设部署， /web。
Let's say deployment, /web.

5
00:00:23.958 --> 00:00:27.792
好了如果我再看一次你可以看这里
Okay, now if I look at get all again,
you can look up here and

6
00:00:27.792 --> 00:00:31.640
在我刚刚有一个网络容器运行之前，是吗 ?
see, before I just had one
web container running, right?

7
00:00:31.640 --> 00:00:33.267
你可以看到这只在跑
You can see this one's just running.

8
00:00:33.267 --> 00:00:36.237
但是这些，现在它还制造了五个版本的容器。
But these ones, now it's creating
five more versions of this container.

9
00:00:36.237 --> 00:00:39.796
如果我再跑一次他们可能都跑了
And if I run this again,
they're probably all running now.

10
00:00:39.796 --> 00:00:41.686
是的你可以看到他们都在跑
Yes, you can see that they're all running.

11
00:00:41.686 --> 00:00:43.360
所以如果我回去刷新
So if I go back here and refresh,

12
00:00:43.360 --> 00:00:47.329
任何时候我都不知道我要找的是哪个集装箱
any one of these times I don't know
actually which container I'm getting.

13
00:00:47.329 --> 00:00:49.722
但我可能每次都有不同的容器
But I'm getting a different container
probably every single time.

14
00:00:52.409 --> 00:00:54.387
所以现在我做了这个集群，我把它放大了。
So now I've taken this cluster and
I've scaled it up.

15
00:00:54.387 --> 00:00:58.186
这就是我们在码头上出现问题的原因
So this is the thing that we had
a problem with docker compose,

16
00:00:58.186 --> 00:01:01.341
它的前方没有负载平衡装置
that it didn't have a load
balancer in front of it.

17
00:01:01.341 --> 00:01:04.516
Kubernetes 把它建在了它的基础上，所以它只为我们平衡所有这些东西。
Kubernetes has this built into it, so it's
just load balancing all this stuff for us.

18
00:01:06.835 --> 00:01:09.656
所以根据你能做多少 RAM ，我们就说 25，
So depending on how much RAM you can do,
let's just say 25,

19
00:01:09.656 --> 00:01:11.947
如果你没有太多的 RAM ，请不要这样做。
if you don't have very much RAM,
don't do this.

20
00:01:14.317 --> 00:01:16.993
我的电脑大概会说你为什么要这样对我
My computer's probably gonna say,
why are you doing this to me?

21
00:01:20.750 --> 00:01:24.641
你现在可以看到，我有 25 个版本的容器在我的电脑上运行。
You can see now, I have 25 versions of
that container running on my computer.

22
00:01:29.066 --> 00:01:31.664
看，我们可以看温度，就在我的电脑上，
Just watch, we can watch the temperature,
right there on my computer,

23
00:01:31.664 --> 00:01:32.655
一切都会好起来的
and it's just gonna go up.

24
00:01:36.349 --> 00:01:37.912
现在他们大部分都在跑
And now, most of them are running.

25
00:01:40.063 --> 00:01:42.503
但是，我们是如何感受这一点的，很酷的吧 ?
But, how do we feel about that,
pretty cool right?

26
00:01:44.567 --> 00:01:46.409
我要见头布莱恩
I need to see heads, yes Brian.

27
00:01:46.409 --> 00:01:47.997
这太酷了你给我留下了深刻的印象我只是开玩笑
This is very cool,
you're very impressed, I'm just kidding.

28
00:01:47.997 --> 00:01:52.495
再看一次我们会看到
And one more time, we'll see that,

29
00:01:54.457 --> 00:01:57.944
需要 25 个， 25 个当前正在运行， 25 个已就绪。
25 are desired, 25 are currently running,
and 25 are ready.

30
00:01:57.944 --> 00:02:00.200
你可以看到所有这些都在运行。
And you can see all of
these are now running.

31
00:02:00.200 --> 00:02:03.405
一旦我完成了这些不同的事
And then as soon as I'm done
running all these different things,

32
00:02:03.405 --> 00:02:07.093
我只能说一，一，它就会把它放大缩小。
I can just say replicas, 1, and
it's just going to scale that back down.

33
00:02:07.093 --> 00:02:10.177
我们会在这里看到它会说
And we'll see here that it'll say,

34
00:02:13.759 --> 00:02:17.795
Kubectl 来了结束了
Kubectl come on, terminating.

35
00:02:17.795 --> 00:02:19.139
它为我们终止了所有这些不同的东西。
It's terminating all these
different things for us.

36
00:02:19.139 --> 00:02:20.300
现在我们可以做各种有趣的事情了
Now we could do all sorts of fun stuff.

37
00:02:20.300 --> 00:02:23.729
我们可以对其中一个进行健康检查，然后进行容器崩溃，并且
We could put like a health check on one of
these and then make a container crash, and

38
00:02:23.729 --> 00:02:26.449
那么它会为我们重新启动容器。
then it would restart the containers for
us.

39
00:02:26.449 --> 00:02:28.159
它会为我们做些很酷的事情
It'll do a bunch of really cool stuff for
us.

40
00:02:28.159 --> 00:02:31.817
它执行所有监视，重新启动和重新运行所有这些内容的操作
It does all that monitoring and restarting
and rerunning all this stuff for

41
00:02:31.817 --> 00:02:32.754
你从盒子里出来
you out of the box.

42
00:02:38.382 --> 00:02:41.673
好吧一旦我们完成了这一切
Okay, and then as soon as we
are done with all of this,

43
00:02:41.673 --> 00:02:44.466
你只能说 kubectl 删除全部
you can just say kubectl delete all --all.

44
00:02:47.209 --> 00:02:47.819
好了好了
There you go.

45
00:02:47.819 --> 00:02:50.569
一切都被擦掉了你又回到了一个空的石板上
Everything just gets wiped off and
you are back to a blank slate again.

46
00:02:58.259 --> 00:02:59.037
好吧最后一件事
Okay, last thing here.

47
00:02:59.037 --> 00:03:03.919
如果让我们说，其实我是非常认真的，因为这是一个库伯内特项目
If let's say, actually, I was very serious
about this being a Kubernetes project

48
00:03:03.919 --> 00:03:07.770
我也不会用作曲的方式来完成这一工作
going forward, I would not run
this with compose in production.

49
00:03:07.770 --> 00:03:10.138
这不是我建议的方式
That's just not the way that
I would suggest doing it.

50
00:03:10.138 --> 00:03:12.689
我想说的是 kompose 转换。
I would say kompose convert.

51
00:03:12.689 --> 00:03:18.858
现在你可以在这里看到，我有 web-deployment.yaml， web-service.yaml.
And then now you can see here, I have
web-deployment.yaml, web-service.yaml.

52
00:03:18.858 --> 00:03:21.622
它为我生成所有 Kubernetes 文件。
It generates all of
the Kubernetes files for me.

53
00:03:21.622 --> 00:03:25.502
因此，我将开始使用 Docker 编写，因为我不记得所有语法
So I will get started with docker compose
because I don't remember all of the syntax

54
00:03:25.502 --> 00:03:26.566
就在我头上
off the top of my head.

55
00:03:26.566 --> 00:03:27.932
我不想这样
I don't want to.

56
00:03:27.932 --> 00:03:31.550
所以我先和博士一起作曲然后说 kompose convert ，然后我就
So I'll do with docker compose first, and
then I'll say kompose convert, and then I

57
00:03:31.550 --> 00:03:35.086
突然间， Kubernetes 配置了我各种不同的服务。
suddenly have Kubernetes configurations
for all my various different services.

58
00:03:36.575 --> 00:03:38.745
所以这是一个从大门开始的好方法
So it's a good way to get
kinda started out of the gate.

59
00:03:42.509 --> 00:03:44.364
所以库伯内特是非常强大的。
So Kubernetes is extremely powerful.

60
00:03:44.364 --> 00:03:48.319
我刚给你看了几个 Kubernetes 的 Hello World
I just showed you basically
the Hello World of Kubernetes.

61
00:03:48.319 --> 00:03:50.621
还有 900 万的东西，对吧 ?
It does 9 million more things, right?

62
00:03:50.621 --> 00:03:54.098
这就是谷歌的基础设施，很多基础设施。
This is what runs Google's infrastructure,
much of that infrastructure.

63
00:03:54.098 --> 00:03:55.983
Azure现在在库伯内特斯跑了
Azure's now run on Kubernetes.

64
00:03:55.983 --> 00:04:00.756
这行业的方向正朝着库伯内特的方向发展
It's kind of, the direction of the
industry is heading towards Kubernetes in

65
00:04:00.756 --> 00:04:02.719
几乎每一种意义上的意义
almost every sense of the word.

66
00:04:04.150 --> 00:04:08.137
所以我想说知道它是什么，它是怎么运作的，为什么
So I'm gonna say that it's useful to
know what it is, how it works, why

67
00:04:08.137 --> 00:04:12.671
你会用它，除非你必须要用它，否则就不一定要用它。
you would use it, and then not necessarily
use it unless you absolutely have to.

68
00:04:12.671 --> 00:04:16.457
库兹我要告诉你库伯内特解决了很多问题
Cuz I'm gonna tell you that Kubernetes
solves a lot of problems but

69
00:04:16.457 --> 00:04:20.920
它会在你运行库伯内特时产生自己独特的问题
it creates its own unique set of
problems when you're running Kubernetes.

70
00:04:20.920 --> 00:04:23.769
就像我在开始之前说的
Like I said before at
the beginning of this,

71
00:04:23.769 --> 00:04:28.110
它是一个复杂的产品解决了复杂的问题
it's a complicated product that
solves complicated problems.

72
00:04:28.110 --> 00:04:32.254
所以如果你没有复杂的问题，不要给自己一个复杂的问题。
So if you don't have complicated problems,
don't give yourself a complicated problem.

73
00:04:32.254 --> 00:04:34.329
我在这件事上的立场是一样的。
Is kind of my stance on the matter.

74
00:04:36.937 --> 00:04:41.658
好酷，我在这里展示的，我不会教你怎么做
Now, what's really cool, what I've shown
here and I'm not gonna show you how to do

75
00:04:41.658 --> 00:04:45.720
就像一点点的利益冲突一样。
it, do the kind of like conflict
of interest a little bit is.

76
00:04:45.720 --> 00:04:48.879
我一直在给你展示如何用 kubectl 或 kube 的控制来做事情。
I've been showing you how to do
things with kubectl or kube control.

77
00:04:48.879 --> 00:04:51.999
如果我想去 Azure Kubernetes 服务
If I wanted to go to
Azure Kubernetes service,

78
00:04:51.999 --> 00:04:57.523
我就像从 Docker 桌面切换到 Minikubbe一样，改变我的环境。
I would just change my context just like
I switch from docker desktop to Minikube.

79
00:04:57.523 --> 00:05:00.026
我要把它转至 Azure 作为我的背景。
I would just switch that
to Azure as my context.

80
00:05:00.026 --> 00:05:04.800
突然我控制了我整个 Azure 的部署
And all sudden I'd be controlling my
entire Azure deployment of Kubernetes.

81
00:05:04.800 --> 00:05:06.959
所以我所做的一切都在我的电脑上
So everything that I was just
running locally on my computer,

82
00:05:06.959 --> 00:05:09.639
本产品在生产过程中以同样的方式工作 100% 。
it works 100% the same way in production.

83
00:05:10.939 --> 00:05:11.870
所以如果我说了
So if I just said,

84
00:05:11.870 --> 00:05:15.731
将此扩展至 25 ，它将转至云，并将其扩展至 25。
scale this to 25, it would go out to
the cloud and scale that out to 25.

85
00:05:17.362 --> 00:05:20.185
我不打算展示的另一个原因是 Kubernetes 不便宜
The other reason I'm not gonna
show is Kubernetes is not cheap.

86
00:05:20.185 --> 00:05:21.488
所以如果我们这样做了
[LAUGH] So if we did that and

87
00:05:21.488 --> 00:05:23.973
我在给你展示如何在我们的车间里
I was showing you how to
do that in our workshop,

88
00:05:23.973 --> 00:05:28.466
你可能会在账单上跑出 10 块或 20 块之类的对吧
you'd probably run up $10 or $20 with
the bill or something like that, right?

89
00:05:28.466 --> 00:05:29.696
这不便宜
It's not cheap.

90
00:05:29.696 --> 00:05:33.685
所以我把一堆链接留在了
So I left a bunch of
links down in the course

91
00:05:33.685 --> 00:05:37.790
这些文件是从 AKS开始的
documents here of getting started on AKS,

92
00:05:37.790 --> 00:05:42.932
EKS 开始， GKE开始。
getting started on EKS, and
getting started on GKE.

93
00:05:42.932 --> 00:05:46.237
我是 AKS 的一部分我觉得这是个好产品
I am partial to AKS,
I think it's a good product.

94
00:05:46.237 --> 00:05:48.310
也许试试那个我不知道
So maybe try that one, I don't know.
