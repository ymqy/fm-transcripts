WEBVTT

1
00:00:00.000 --> 00:00:03.501
我们讨论的最后一节是卷，好吗 ?
The last section that we talked
about was volumes, okay?

2
00:00:03.501 --> 00:00:07.121
但愿这对你有帮助而且我们今天要到
And hopefully that was helpful for
you, and we're gonna get in today for

3
00:00:07.121 --> 00:00:09.862
在开发环境中使用容器。
using containers in your
development environments.

4
00:00:09.862 --> 00:00:13.410
我认为这其实是开发人员最迫切的原因之一
And I think this is actually one of
the most compelling reasons for developer

5
00:00:13.410 --> 00:00:17.356
大量的人去学习容器这就是为什么我把这个放在这里的原因
populous at large to learn containers, and
that's actually why I put this in here.

6
00:00:17.356 --> 00:00:20.192
所以我们要经历两种不同的场景。
So we're gonna go through
two different scenarios.

7
00:00:20.192 --> 00:00:23.669
我要给你们展示的第一款是如何使用
The first one I'm gonna show you how
to use dev containers outside of

8
00:00:23.669 --> 00:00:24.766
Visual Studio 代码
Visual Studio Code,

9
00:00:24.766 --> 00:00:28.125
就因为我知道你们都不使用数码演播室密码
just because I know all of you
don't use digital studio code yet.

10
00:00:28.125 --> 00:00:29.975
我来给你的
[LAUGH] I'm coming for you.

11
00:00:29.975 --> 00:00:34.454
我来教你怎么做
So I'll show you how to do that first.

12
00:00:34.454 --> 00:00:37.273
之后我会教你如何使用 Visual Studio 代码
And then after that, I'll show you how
to do it with Visual Studio Code and

13
00:00:37.273 --> 00:00:39.149
" VS " 实际上能让这件事变得很简单
how VS Code will actually
make that really easy.

14
00:00:39.149 --> 00:00:39.929
然后呢最后
And then, lastly,

15
00:00:39.929 --> 00:00:44.119
我们要在进入多个集装箱项目之前先进行联网
we're gonna go over networking before
getting into multi container projects.

16
00:00:45.591 --> 00:00:49.551
好，继续，让我们为您的开发环境使用容器。
All right, so go ahead and let's go into
Using Containers for your Dev Environment.

17
00:00:49.551 --> 00:00:53.072
这就是我们现在要做的
That's what we're gonna go into now.

18
00:00:55.515 --> 00:01:00.164
所以我们对这个想法进行了探讨
So we've kind of explored this idea
of it's really difficult when you

19
00:01:00.164 --> 00:01:03.942
从一个新公司开始，很难起来，
start at a new company,
that it's difficult to get up and

20
00:01:03.942 --> 00:01:06.810
在一家新公司里跑得很快对吧
running quickly at a new company, right?

21
00:01:06.810 --> 00:01:09.412
这就是 dev 容器非常有用的地方，对吧 ?
And so that's where dev containers
can be very useful, right?

22
00:01:09.412 --> 00:01:12.034
如果他们能给你个 Docker 文件然后说
It'd be useful if they could just
hand you a Docker file and say, hey,

23
00:01:12.034 --> 00:01:13.733
这就是我们的开发环境
here's what our developer environment is.

24
00:01:13.733 --> 00:01:17.126
如果你在这里点击就可以了
If you just click start here,
then everything just spins up and

25
00:01:17.126 --> 00:01:19.109
马上开始工作对吧
starts working right away, right?

26
00:01:19.109 --> 00:01:20.329
这很有说服力，对吧 ?
That's pretty compelling, right?

27
00:01:20.329 --> 00:01:26.271
我记得在我在 Reddit 工作之前工作的初创公司
I remember at one of the startups I
worked at before I worked at Reddit,

28
00:01:26.271 --> 00:01:29.914
我必须启动一个开发者环境。
I had to start up a developer environment.

29
00:01:29.914 --> 00:01:31.867
这可能让我更有两个或几个
And it probably took me
the better part of two or

30
00:01:31.867 --> 00:01:34.028
只要花三个星期就能找到工作
three weeks just to get
everything working right.

31
00:01:34.028 --> 00:01:37.860
我将在特定版本的 JVM 中，然后它必须是特定版本
I'd be in a specific version of the JVM,
and then it had to be a specific version

32
00:01:37.860 --> 00:01:40.138
就能得到那版本的角化工作了
of npm to get that version
of Angular working.

33
00:01:40.138 --> 00:01:44.307
它是人类痛苦的鲁贝 - 戈德堡机器，让我们这样说吧。
It was a Rube Goldberg machine of human
suffering, let's put it that way.

34
00:01:44.307 --> 00:01:50.012
因此，我认为容器在您的环境中可以真正为您解决。
So that's what I think containers in your
dev environment can really solve for you.

35
00:01:50.012 --> 00:01:53.110
显然，我是一个 JavaScript 工程师。
So, obviously, I'm a JavaScript engineer.

36
00:01:53.110 --> 00:01:54.384
我什么都不知道
I don't know anything about Go,

37
00:01:54.384 --> 00:01:57.063
但我们要用围棋来证明这一点
but we're gonna be using Go here for
a little bit just to prove the point

38
00:01:57.063 --> 00:02:00.120
你不需要了解这些事情是如何运作的
you don't have to understand the inner
machinations of how these things work.

39
00:02:00.120 --> 00:02:02.046
能为你工作好吗
It can just work for you, okay?

40
00:02:02.046 --> 00:02:06.825
所以我想你们很多人可能听说过雨果
So I imagine many of you
have probably heard of Hugo.

41
00:02:06.825 --> 00:02:11.258
它是一个非常非常受欢迎的静态站点生成器，可与 Gatsby 或
It's a very, very popular static site
generator, comparable to Gatsby or

42
00:02:11.258 --> 00:02:13.140
杰基尔什么的
Jekyll or something like that.

43
00:02:13.140 --> 00:02:14.763
很棒很多人都用它
It's great, lots of people use it.

44
00:02:14.763 --> 00:02:16.704
我觉得 Fronend Masters 在他们的网站上使用它对吧
I think Frontend Masters uses
it on their website, right?

45
00:02:16.704 --> 00:02:18.431
也许吧
Maybe?

46
00:02:18.431 --> 00:02:19.391
>> 是。
&gt;&gt; Yes.

47
00:02:19.391 --> 00:02:19.954
>> 酷，看?
&gt;&gt; Cool, see?

48
00:02:19.954 --> 00:02:20.574
最近，你已经用了雨果网站，或者现在。
So you've already used a Hugo website
recently, or maybe currently.

49
00:02:20.574 --> 00:02:24.825
可能是现在
[LAUGH] Probably currently,

50
00:02:24.825 --> 00:02:28.372
很酷吧
that's cool, right?

51
00:02:28.372 --> 00:02:30.437
但我不知道该怎么做
But I don't know how to set it up.

52
00:02:30.437 --> 00:02:32.691
我从来没有为自己设定过，因为我不是围棋的开发者。
I've never had to set it up for
myself, because I'm not a Go developer.

53
00:02:32.691 --> 00:02:34.763
我没必要和它乱搞
I haven't necessarily
messed around with it.

54
00:02:34.763 --> 00:02:36.820
但我要给你展示我们能做的容器
But I'm gonna show you just using
containers that we can do all this

55
00:02:36.820 --> 00:02:37.461
就像我们自己
kind of ourselves.

56
00:02:37.461 --> 00:02:42.402
所以说你要加入这个新队伍是雨果队
So let's say that you're joining
this new team, it's a Hugo team,

57
00:02:42.402 --> 00:02:44.543
你的新项目就在这里
and your new project is here.

58
00:02:44.543 --> 00:02:47.867
我在这里有一个链接，它将链接到 GitHub 存储库， GitHub 存储在我的 GitHub上。
So I have a link here and it's gonna link
to a GitHub repo, which is on my GitHub.

59
00:02:47.867 --> 00:02:50.968
我们要一起设立这个项目
And we're gonna set up
this project together,

60
00:02:50.968 --> 00:02:56.329
尽管你很多人都不知道怎么用雨果
despite the fact that many of you, I
imagine, don't know how to use Hugo, okay?

61
00:02:56.329 --> 00:03:00.819
所以我们要用这个容器叫做 " hum-builder " 。
So we're gonna use this container
here called hugo-builder.

62
00:03:03.698 --> 00:03:08.430
我不认识这个人但他们创造了这个容器
And I don't know this person necessarily,
but they created this container,

63
00:03:08.430 --> 00:03:13.100
就在这里，让我们可以在一个容器里运行雨果。
hugo-builder right here, that allows
us to run Hugo inside of a container.

64
00:03:13.100 --> 00:03:15.912
我们将以聪明的方式使用绑定安装
And we're gonna use bind mounts in
a clever way to be able to build

65
00:03:15.912 --> 00:03:16.545
我们的计划
our project.

66
00:03:19.063 --> 00:03:22.691
好的，所以你可能不会看到这个，但是很明显我有些去
Okay, so here, you probably won't see
this, but apparently I have some Go

67
00:03:22.691 --> 00:03:25.933
我无法解决的漏洞不是真正的项目
vulnerabilities I'm not gonna fix,
cuz it's not a real project.

68
00:03:25.933 --> 00:03:29.159
好的，这就是这个项目。
[LAUGH] Okay, and so here's the project.

69
00:03:29.159 --> 00:03:33.557
我们现在要做的就是在这里运行格德克隆
And what we're gonna do now is we're
gonna run git clone right here.

70
00:03:33.557 --> 00:03:36.846
这样你就可以把它复制了
So you can go ahead and copy that.

71
00:03:39.015 --> 00:03:41.227
我就在我的 " 对容器 " 项目中。
And I'm here in my
intro-to-containers project.

72
00:03:41.227 --> 00:03:44.655
如果你看这里我还有其他的项目
If you look here,
I have all the other projects in here, and

73
00:03:44.655 --> 00:03:48.300
我只会说 git 克隆 github btholt/hu-example。
I'm just gonna say git clone
github btholt/hugo-example.

74
00:03:48.300 --> 00:03:53.055
好吧我去举个例子
Okay, I'm gonna go into hugo-example.

75
00:03:53.055 --> 00:03:57.509
我们会说医生
And we're gonna say docker

76
00:03:57.509 --> 00:04:02.162
运行 -rm -it --mount。
run --rm -it --mount.

77
00:04:02.162 --> 00:04:10.265
要使用绑定安装，我将使用 type=bind ，source="$(pwd)" ( 如此) ，
To use our bind mounts, I'm gonna say
type=bind,source="$(pwd)" like this,

78
00:04:10.265 --> 00:04:14.814
这样我们就能拿到目前的工作目录了
so that we can get the current
working directory.

79
00:04:14.814 --> 00:04:22.035
我要说目标 = /src
I'm gonna say target=/src.

80
00:04:24.543 --> 00:04:28.793
然后我们说 -p 13
And then we're gonna say -p 13

81
00:04:28.793 --> 00:04:34.105
13:1313 .
13:1313 cuz that's the port that

82
00:04:34.105 --> 00:04:39.264
它会听我说的
it's gonna be listening on, -u hugo,

83
00:04:39.264 --> 00:04:44.137
然后你就得把名字放在这里
and then you have to put the name here.

84
00:04:44.137 --> 00:04:51.040
那么， jguyo，就像这样。
So, jguyo, like that.

85
00:04:53.031 --> 00:04:54.451
/hugo-builder 。
/hugo-builder.

86
00:04:56.630 --> 00:05:00.149
同样，您也可以完全将此权限从注释中复制。
Again, you can totally just copy
this right off of the notes as well.

87
00:05:00.149 --> 00:05:02.944
然后我们把它钉在一个特定的版本上
And then we're gonna pin
it to a specific version,

88
00:05:02.944 --> 00:05:05.814
只是为了确保它能正常工作所以 0.55
just to make sure this keeps working,
so 0.55.

89
00:05:05.814 --> 00:05:07.735
所以我们到目前为止都做了一切
So we've done everything so far.

90
00:05:07.735 --> 00:05:09.521
这会把我们放到集装箱里
This is gonna drop us into the container,
and

91
00:05:09.521 --> 00:05:11.125
现在我们可以给它一个指挥
now we can give it a command for
us to run.

92
00:05:11.125 --> 00:05:13.439
所以我想让它运行的命令是 hugo 服务器，
So the command that I want
it to run is hugo server,

93
00:05:13.439 --> 00:05:16.319
就像开发环境对吧
which is gonna be like
the development environment, right?

94
00:05:16.319 --> 00:05:23.420
hugo 服务器 -w --bind=0.0.0.0。
hugo server -w --bind=0.0.0.0.

95
00:05:27.163 --> 00:05:30.266
所以，绑定部分是在外部提供，而不仅仅是内部的。
So the bind part is so that it's available
externally, not just internally,

96
00:05:30.266 --> 00:05:31.163
就是这个容器
it's the container.

97
00:05:31.163 --> 00:05:33.882
现在，但愿我们能这样做。
So now, hopefully, if we run this.

98
00:05:36.300 --> 00:05:40.348
我的会说找不到这个的所以它会把这些都拉出来
Mine's gonna say can't find this, so it's
gonna go out there and pull some of these.

99
00:05:40.348 --> 00:05:45.334
看来大概有 20 兆字节的东西给我
It looks like it's gonna be maybe
20 megabytes worth of stuff for me.

100
00:05:51.759 --> 00:05:53.235
这里已经存在了
And this already exists here.

101
00:05:53.235 --> 00:05:54.865
这可能是 Ubuntu 或者
This is probably something like Ubuntu or

102
00:05:54.865 --> 00:05:56.829
我已经在电脑上的阿尔卑斯了对吧
Alpine that I already had on my computer,
right?

103
00:06:00.980 --> 00:06:01.658
这是你的
And here you go.

104
00:06:01.658 --> 00:06:05.475
现在它正在运行，它在本地主机 1313上运行。
Now it's running, and
it's running on local host 1313.

105
00:06:09.146 --> 00:06:13.016
这里是雨果网站，有一个主题，我甚至不知道它是什么主题。
So here is a Hugo website with some random
theme, I don't even know what theme it is.

106
00:06:13.016 --> 00:06:14.981
[ LAUGH] 工作，对吧 ?
[LAUGH] Working, right?

107
00:06:14.981 --> 00:06:18.521
我们把这一切都和雨果一起去了
We got this all up and
running with a Go project with Hugo and

108
00:06:18.521 --> 00:06:22.004
所有这些事情都是无知不知道的
all that kind of stuff running,
with no knowledge of it.

109
00:06:22.004 --> 00:06:24.235
就像在内部工作的黑盒子一样
Like totally black box of
how it's working internally.

110
00:06:24.235 --> 00:06:27.413
如果你是 CSS 开发者或设计师之类的
And if you're a CSS developer or
designer or something like that,

111
00:06:27.413 --> 00:06:30.930
你就可以去和社联乱搞了，你就不用真的知道了，
you can just go in and mess with the CSS
and you don't have to really know and

112
00:06:30.930 --> 00:06:33.293
了解雨果在兜帽下工作的情况
understand how Hugo's
working under the hood.

113
00:06:33.293 --> 00:06:36.019
你可以让另一个处理它的人
You can let the other team
that handles that part of it,

114
00:06:36.019 --> 00:06:37.752
就在这里说 Docker 文件
just say here's the Docker file.

115
00:06:37.752 --> 00:06:40.398
只要你在 Docker 文件里就行了吧
As long as you're in the Docker file,
everything just works, right?

116
00:06:42.149 --> 00:06:46.790
所以我认为这对于团队和个人项目是很有吸引力的，对吧 ?
So I think this is compelling for teams
and for your personal projects, right?

117
00:06:46.790 --> 00:06:51.129
比如说你有一些要用你的项目导出的贝斯波克环境
Like say you have some Bespoke environment
that you need to export with your project

118
00:06:51.129 --> 00:06:51.935
让它工作
for it to work.

119
00:06:51.935 --> 00:06:54.819
你可以把所有东西都设置好然后有人进来
You can just set all that stuff up,
and then someone can come in and

120
00:06:54.819 --> 00:06:57.081
他们就把容器和一切都做了
they just run the container and
everything works.

121
00:06:57.081 --> 00:06:58.077
是吗 ?
Yeah?

122
00:06:58.077 --> 00:07:00.321
> > 这就是我们在Fron趋向大师赛上做的
&gt;&gt; Yeah, that's literally what
we do at Frontend Masters.

123
00:07:00.321 --> 00:07:02.216
这就是它的运作方式。
This is how it works.

124
00:07:02.216 --> 00:07:06.264
> > 嗯，我们有雨果和 Go，所有东西都在一个容器里。
&gt;&gt; Yeah, we have Hugo and Go,
and everything is in a container.

125
00:07:06.264 --> 00:07:09.529
所以你就做容器，开始工作。
And so you just build the container and
start working.

126
00:07:09.529 --> 00:07:13.738
>> 这就被正式称为 " Fron倾向大师 " 建筑。
&gt;&gt; There you go, this is now officially
dubbed the Frontend Masters architecture.

127
00:07:13.738 --> 00:07:16.543
我觉得太棒了
[LAUGH] I think it's great.

128
00:07:16.543 --> 00:07:21.459
雨果就是一个很简单的例子
And Hugo is a pretty
simple example of this.

129
00:07:21.459 --> 00:07:23.875
我想这里大多数人都可以自己建立雨果
I imagine most people here
could set up Hugo on their own.

130
00:07:23.875 --> 00:07:26.509
是我做的对吗
I did make that project, right?

131
00:07:26.509 --> 00:07:28.076
所以我没那么久
So it didn't take me that long.

132
00:07:28.076 --> 00:07:30.391
但我相信你能想象到
But I'm sure you could
imagine some very difficult,

133
00:07:30.391 --> 00:07:32.865
也许像 JVM 一样难以设置
maybe like JVM sort of thing
that's difficult to set up.

134
00:07:32.865 --> 00:07:37.673
所有这些东西都可以组合成一个容器或者多个容器
And all of those things could be combined
into a container, or multiple containers,

135
00:07:37.673 --> 00:07:39.488
而且很容易就能分享
and makes it very easy to share.

136
00:07:39.488 --> 00:07:41.343
你有问题吗
Do you have a question?

137
00:07:41.343 --> 00:07:46.678
>> 因此，如果我向某人发送 Docker 版本，那么
&gt;&gt; So with that approach,
if I send somebody the Docker version so

138
00:07:46.678 --> 00:07:53.139
它们可以在本地运行，这也减轻了安装软件包的需求吗 ?
they can run locally, is this also
mitigating the need to install package?

139
00:07:53.139 --> 00:07:57.040
比如当你有了一个像我们刚刚复制的爬虫类似的
Like when you get a pull down repo
like we just cloned this one,

140
00:07:57.040 --> 00:07:59.156
通常执行 Yarn 或 npm 安装。
usually do a Yarn or npm install.

141
00:07:59.156 --> 00:08:03.372
我们是否绕过这条路，只处理货柜的路线 ?
Do we bypass that,
just deal with the container route?

142
00:08:03.372 --> 00:08:08.021
>> 所以我要给你们演示如何在这里用 VS .
&gt;&gt; So I'm gonna show you how to do this
with VS Code here in just a second, and

143
00:08:08.021 --> 00:08:10.471
它会让我们更进一步
it'll take that even a step further.

144
00:08:10.471 --> 00:08:12.485
一般来说，有新的依赖关系是好的，对，
In general, it's good to have
fresh dependencies, right,

145
00:08:12.485 --> 00:08:13.889
因为事情不断更新
because things are constantly updating.

146
00:08:13.889 --> 00:08:17.134
就好像是我不知道我不知道
And it's like, maybe it's like,
I don't know, let's say,

147
00:08:17.134 --> 00:08:20.454
Lodash 发布一个版本，它将中断，它是补丁版本。
Lodash releases a version that breaks and
it's a patch version.

148
00:08:20.454 --> 00:08:23.004
你想抓住那个发展的东西对吧
You wanna catch that in development,
right?

149
00:08:23.004 --> 00:08:28.004
我想你需要在那里做交易
There's trade offs there that
you need to make, I guess.

150
00:08:28.004 --> 00:08:30.355
所以它可以，对，你可以把一切都烤到其中。
So it can, right,
you can totally bake everything into it.

151
00:08:30.355 --> 00:08:35.075
但这一切都很酷又回到你的位置
But what's cool about this, and
coming kinda back to your point,

152
00:08:35.075 --> 00:08:40.061
如果我回来看看我的 " 去 " 项目，举个例子
if I come back in here and I look at
my Go project here, hugo-example.

153
00:08:44.532 --> 00:08:46.417
所以如果我来这里
So if I come here.

154
00:08:49.740 --> 00:08:51.634
我想我不记得你是怎么做到的
I think, anyway,
I can't remember how you do this.

155
00:08:54.636 --> 00:08:57.403
但最棒的是，我不是真正的编辑，对吧 ?
But what's great about this is,
I'm not actually live editing, right?

156
00:08:57.403 --> 00:09:00.791
因为它是使用与我的主机共享的绑定安装，对吗 ?
Because it's using a bind mount
that's shared with my host, right?

157
00:09:00.791 --> 00:09:01.538
所以如果我开始打字
So if I start typing things,

158
00:09:01.538 --> 00:09:03.599
也会改变容器里的东西对吧
it's gonna be modifying the things that
are in the container as well, right?

159
00:09:07.198 --> 00:09:09.028
它可以，它可以减轻它，但是
So it can, it can mitigate that, but

160
00:09:09.028 --> 00:09:12.230
你只需要做你想做的决定
you just have to make your decisions
of how you want that to work.

161
00:09:13.960 --> 00:09:16.548
所以，我们要回到依赖关系的地方。
So actually coming back to
the point of dependencies here.

162
00:09:16.548 --> 00:09:21.187
如果我在本地计算机上执行 npm 安装，然后将安装绑定到
If I do an npm install on my local
computer and then I bind mount that into

163
00:09:21.187 --> 00:09:26.395
Ubuntu to be run， we native dependencies of native dependencies， right?
Ubuntu to to be run, we still have that
issue of native dependencies, right?

164
00:09:26.395 --> 00:09:29.938
所以如果我为麦克建造 Node - sass ，然后我在 Ubuntu 中运行它，
So if I build Node-sass for Mac and
then I try and run it in Ubuntu,

165
00:09:29.938 --> 00:09:32.984
它不会工作的对吧卡兹是建在麦肯的
it's not gonna work, right,
cuz it was built for Mac.

166
00:09:32.984 --> 00:09:37.955
所以我们有这样的一个问题，就是要装进集装箱，
So we have this kind of issue that we have
to bind mount into the container, and

167
00:09:37.955 --> 00:09:40.181
然后运行 npm 安装。
then afterwards run npm install.

168
00:09:40.181 --> 00:09:44.110
因为需要在容器中安装 npm 。
Because it needs to be npm
installed within the container.

169
00:09:44.110 --> 00:09:46.269
所以你可以把它们烧了，这就是你所建议的。
So you can burn them in,
which is what you suggested.

170
00:09:47.610 --> 00:09:51.879
您只需导出已在其中构建的依赖关系的容器。
And you just export the container with
the dependencies already hard built in.

171
00:09:51.879 --> 00:09:54.575
但那种烂透了因为如果我晚上跑了
But that kind of sucks a little
bit because if I run npm,

172
00:09:54.575 --> 00:09:57.389
就好像我在后面安装另一个附属关系
it's like if I install another
dependency afterwards,

173
00:09:57.389 --> 00:10:01.626
经常是 Node 开发者在做的事，我们又有同样的问题。
which is frequently what Node developers
are doing, we have the same problem again.

174
00:10:01.626 --> 00:10:04.583
所以有几种方法可以做到。
So there's a couple ways you can do it.

175
00:10:04.583 --> 00:10:09.041
如果你这样做，没有 Visual Studio 代码，我通常是这样做的
If you're doing it this way without Visual
Studio Code, the way that I usually do it

176
00:10:09.041 --> 00:10:13.518
我只是连接到正在运行的容器，而我第一次运行 npm 安装。
is I just attach to the running container,
and I run npm install for the first time.

177
00:10:13.518 --> 00:10:15.245
之后就会好了对吧
And then after that,
it's usually okay, right?

178
00:10:15.245 --> 00:10:17.852
每次重新启动容器时，都必须执行此操作。
You just kinda have to do that every
time that you restart up the container.

179
00:10:17.852 --> 00:10:19.565
这很烦人但很有用
It's annoying, but it works.

180
00:10:19.565 --> 00:10:23.293
进入 Visual Studio 代码很聪明地说我是
And moving into Visual Studio Code,
which it's just smart enough to say, I'm

181
00:10:23.293 --> 00:10:27.148
你一定要做个 npm 的安装，而且它就是给你做的。
pretty sure you're gonna need to do an npm
install and it just does it for you, so.

182
00:10:27.148 --> 00:10:29.509
但我们会去的只有一会儿
But we'll get there, just a second.
