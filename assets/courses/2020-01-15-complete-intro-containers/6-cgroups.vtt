WEBVTT

1
00:00:00.390 --> 00:00:01.730
我给你展示的这些特征
So these features that I'm showing you so

2
00:00:01.730 --> 00:00:05.120
长期以来， Linux 已经建立在 Linux 中。
far have relatively been built
into Linux for a long time.

3
00:00:05.120 --> 00:00:08.359
这些都是他们想要的内核的特征，就像我认为
These are features of the kernel they've
intended, like I think this has been

4
00:00:08.359 --> 00:00:11.490
至少从 70 年代以来就像根已经过去了对吧
around at least since, like root has been
around since the 70s at least, right?

5
00:00:11.490 --> 00:00:13.289
我认为名称空间最近略有增加，但
Namespaces I think
are slightly more recent, but

6
00:00:13.289 --> 00:00:17.690
我想我们还是在说 2000 年的事你可能想看看我的情况
I think we're still talking 2000-ish,
you may wanna fact check me on that.

7
00:00:17.690 --> 00:00:19.530
但我认为那是正确的。
But I think that's about right.

8
00:00:19.530 --> 00:00:21.570
这最后一个是比较近的。
This last one is relatively recent.

9
00:00:21.570 --> 00:00:23.469
它是在谷歌发明的。
It was invented at Google.

10
00:00:23.469 --> 00:00:25.289
这叫控制组对吧
It's called control groups, right?

11
00:00:25.289 --> 00:00:28.899
所以谷歌有一个问题是他们希望有多个不同的
So Google had a problem that they would
like be running multiple different

12
00:00:28.899 --> 00:00:32.859
流程，他们会运行这些，就像彼此信任，对吧 ?
processes, they'd be running these,
and like they trust each other, right?

13
00:00:32.859 --> 00:00:37.118
所以他们不担心就像偷别人的秘密
So they are not worried about like
stealing each others' secrets inside of

14
00:00:37.118 --> 00:00:38.137
谷歌是吧
Google, right?

15
00:00:38.137 --> 00:00:41.743
所以他们就像很酷的一样，我们只是在处理彼此之间的过程，你跑
So they were like cool, we're just running
processes right next each other, you run

16
00:00:41.743 --> 00:00:45.929
您的 Web 服务器，我将运行我的 Web 服务器，我们不会有不同的 VM 表单，对吗 ?
your web server, I will run my web server,
we won't have different VMs form, right?

17
00:00:45.929 --> 00:00:48.268
我们只会在有限的环境中拥有它们。
We'll just have them in their
like limited environments.

18
00:00:48.268 --> 00:00:52.969
他们就像谷歌地图上的人一样
And they kinda had this problem though
like if someone on the Google Maps

19
00:00:52.969 --> 00:00:57.155
团队要跑了，可能就像 Google Docs 团队的过程，
team were to run away process, that might
kill like the Google Docs team's process,

20
00:00:57.155 --> 00:01:00.950
，对， cuz 杀了整个服务器，对吧 ?
right, cuz it kills the entire server,
right?

21
00:01:02.149 --> 00:01:04.790
所以他们想做的就是想限制
So what they wanted to do is
they wanted to limit how much

22
00:01:04.790 --> 00:01:07.685
这些过程中有一个可以访问的资源，对吗 ?
resources that one of these processes
would have access to, right?

23
00:01:07.685 --> 00:01:13.469
基本上说，你看，你得到一个核心，或者你有 10% 的 CPU 和
And basically said like, look, you get
one core, or you get 10% of this CPU and

24
00:01:13.469 --> 00:01:16.939
一旦你退出了我很抱歉这些都是你的错对吧
then once you're out of that,
I'm sorry, that's all you get, right?

25
00:01:16.939 --> 00:01:20.930
库兹我不会让你毁了另一个小组的程序对吧
Cuz I'm not gonna let you crash this
other team's running process, right?

26
00:01:20.930 --> 00:01:24.510
所以他们想出了这个控制小组的想法。
So they came up with this
idea of control groups.

27
00:01:24.510 --> 00:01:26.539
我觉得以前有另外一个名字，
I think there was another name for
it previously,

28
00:01:26.539 --> 00:01:29.063
实际上他们把它叫做容器，就是他们所称的。
actually they called it containers,
is what they called it.

29
00:01:29.063 --> 00:01:33.770
但后来，他们开始申请的不仅仅是控制团体。
But then they, that kinda started
applying to more than just control group.

30
00:01:33.770 --> 00:01:35.490
所以他们把那个改成了 C 组对吧
So they changed that to C groups, right?

31
00:01:37.030 --> 00:01:41.039
这就是 C 组的意思是这样的想法
So that's what C groups are for,
it's this idea like,

32
00:01:41.039 --> 00:01:44.810
我想限制你有多少 CPU ，你有多少内存。
I wanna limit how much CPU you have,
how much memory you have.

33
00:01:44.810 --> 00:01:48.186
网络带宽有多大，就像有一堆你可以限制的东西。
How much network bandwidth, like there's
a bunch of stuff that you can limit on.

34
00:01:48.186 --> 00:01:51.881
我们将会看到 CPU 和内存，但您可以为
We're just gonna be looking at CPU and
memory, but you can do control groups for

35
00:01:51.881 --> 00:01:53.054
很多事情对吧
a lot of things, right?

36
00:01:55.906 --> 00:02:00.698
所以它是从那里来的但是后来它变成了一个很酷的
So that's where it came from, but then it
turned out that this is a really cool and

37
00:02:00.698 --> 00:02:05.567
有趣的想法，因为现在我可以做这些不共享的环境，
interesting idea, because now,
I can do these unshared environments,

38
00:02:05.567 --> 00:02:08.650
然后我就可以给他们分配控制组了
and then I can assign
control groups to them.

39
00:02:08.650 --> 00:02:12.229
而且现在我有了这些程序
And also now I have these
contained processes that can't do

40
00:02:12.229 --> 00:02:14.229
除了我让他们做的事以外的任何事对吧
anything besides what I tell them to do,
right?

41
00:02:14.229 --> 00:02:18.740
因此，您可以执行任意数量的代码并为所欲为。
So you can execute arbitrary amounts
of code and do whatever you want.

42
00:02:18.740 --> 00:02:20.789
但你唯一能搞砸的人是你自己吧
But the only person that you're
gonna screw over is yourself, right?

43
00:02:20.789 --> 00:02:22.063
你不能把其他任何人都搞砸了
You can't screw over anyone else and

44
00:02:22.063 --> 00:02:23.675
这里有集装箱的概念
that's kinda the idea
with containers here.

45
00:02:26.584 --> 00:02:32.539
那么，再一次，就像一个更真实的例子，如果我们要办一个托管服务，对吧 ?
So, again, like a more real life example,
if we're running a hosting service, right?

46
00:02:32.539 --> 00:02:36.959
还有 Bob 和 Alice 在我们的主持下运行他们的服务器
And we have Bob and Alice that are running
their servers within our hosting

47
00:02:36.959 --> 00:02:41.731
环境，我们不想让夏娃把它连接到环境里，
environment, we don't want it so that Eve
can connect it to the environment and

48
00:02:41.731 --> 00:02:45.383
跟别人的过程搞混了吧
start messing with the other
people's processes, right?

49
00:02:45.383 --> 00:02:48.468
她可以直接掉到 CPU 100 %的位置
She can just drop like something
that's gonna peg the CPU at 100%,

50
00:02:48.468 --> 00:02:51.379
把他们的资源都带下来，对吧 ?
take all their resources, and
bring down their servers, right?

51
00:02:51.379 --> 00:02:53.456
我们想防止这种事发生
We wanna prevent that kind
of thing from happening.

52
00:02:57.876 --> 00:03:02.770
所以我们要有有限的物质资源，
So we need to have it so that it has
limited access to physical resources,

53
00:03:02.770 --> 00:03:08.069
或物理，因为大多数容器仍在 VM 内运行，对吗 ?
or physical, because most containers
are still run within VMs, right?

54
00:03:08.069 --> 00:03:10.479
这里有多种级别的虚拟化。
There's multiple levels
of virtualization here.

55
00:03:10.479 --> 00:03:13.888
但为了所有目的和目的我们会叫这些物质资源
But for all intents and purposes,
we'll call these physical resources,

56
00:03:13.888 --> 00:03:16.280
有多少 CPU，多少 RAM，这些东西。
how much CPU, how much RAM,
those sorts of things.

57
00:03:18.620 --> 00:03:22.259
好的，所以我说这个有点难
Okay, so I'll say that like this
is a little bit more difficult to

58
00:03:22.259 --> 00:03:26.840
比我们以前做的那些技术更技术性的事情要完成的事情
accomplish than the things we've done
before that's more technical in nature.

59
00:03:26.840 --> 00:03:29.920
所以我请你和我有点小熊
So I invite you to just kind
of bear with me a little bit.

60
00:03:29.920 --> 00:03:32.579
所以我们要做的第一件事就是
So the first thing we need
to do is we need to say apt,

61
00:03:33.610 --> 00:03:37.610
这还在我们的 Ubuntu VM 或容器中。
this is again still within
our Ubuntu VM or container.

62
00:03:38.849 --> 00:03:43.711
Apt get install ，然后我们说 -y， cgroup-tools 和
Apt get install, then we say -y,
cgroup-tools and

63
00:03:43.711 --> 00:03:48.581
我们还会安装 htop 和一些有趣的游戏
we're gonna install htop as well for
some fun later.

64
00:03:52.894 --> 00:03:56.009
而且这两个都不是很大的。
And neither one of those is very big.

65
00:03:56.009 --> 00:04:00.789
我们刚刚安装的是我最喜欢的工具之一，这实际上是给
So we just installed htop which is one of
my favorite tools, this'll actually give

66
00:04:00.789 --> 00:04:04.080
你的电脑现在的情况很直观
you a nice visualization of what's
going on with your computer right now.

67
00:04:04.080 --> 00:04:07.000
所以就算是这个集装箱我觉得我的电脑上有八芯
So even this container, I think my
computer has eight cores on it or

68
00:04:07.000 --> 00:04:08.400
六芯或类似的东西
six cores or something like that.

69
00:04:08.400 --> 00:04:10.889
您可以看到此容器及其自身使用的 cgroups
You can see that this container in and
of itself using cgroups

70
00:04:10.889 --> 00:04:14.550
实际上只有在技术上能接触到两个，这很有趣。
only actually has technically access
to two, which is kind of interesting.

71
00:04:14.550 --> 00:04:15.930
我有八条 RAM
And I have eight gigs of RAM.

72
00:04:15.930 --> 00:04:19.189
这只真正能访问 1.95 gigs 的 RAM。
This one only actually has
access to 1.95 gigs of RAM.

73
00:04:19.189 --> 00:04:22.079
所以实际上是用 cgroups 来完成这个，对吗 ?
So it's actually using cgroups
to accomplish this, right?

74
00:04:22.079 --> 00:04:26.149
这个小容器什么都看不到
This little container
can't see anything else.

75
00:04:29.339 --> 00:04:32.598
好了不干了不干了
Okay, quit, quit, quit, okay.

76
00:04:32.598 --> 00:04:35.399
这就是 htop 的意思，我很喜欢，它是一个有趣的工具
So that's what htop is,
I quite like, it's a fun tool and

77
00:04:35.399 --> 00:04:36.779
你也可以在麦克上使用
you can use it on Mac as well.

78
00:04:39.310 --> 00:04:45.870
好吧我们要做的第一件事就是用 cgcreate -g
Okay, so the first thing we're gonna
do is we're gonna say cgcreate -g.

79
00:04:45.870 --> 00:04:49.529
我们将创建一个新的控制组，就是这样做的。
And we're gonna create a new control
group, that's what this does.

80
00:04:49.529 --> 00:04:54.612
而且它会限制在 cup.memory 上
And it's gonna limit on cpu.memory io

81
00:04:54.612 --> 00:05:01.399
你就能输入金发美女和冰柜好吗
which you type blkio.devices and
freezer, okay?

82
00:05:01.399 --> 00:05:05.550
然后我们会说 :/sandbox
And then, we're gonna say :/sandbox.

83
00:05:10.564 --> 00:05:13.589
好吧这为我们创造了一个新的 C 组
Okay, this creates a new C group for us.

84
00:05:17.459 --> 00:05:22.694
所以我要回到我的另一个 Docker 容器
So I'm gonna come back over here
to my other Docker container.

85
00:05:22.694 --> 00:05:26.350
我们要运行同样的不共享的环境
And we're gonna run that
same unshared environment.

86
00:05:26.350 --> 00:05:29.560
事实上，我们可以在这里做，因为我已经从这里跑来了。
Actually, we can just do it from here
because I already ran it from here.

87
00:05:29.560 --> 00:05:31.807
这一个
So this one.

88
00:05:31.807 --> 00:05:35.060
所以我们要把其中一个重新回到一个不共享的环境中。
So we're gonna have one of these go
back into an unshared environment.

89
00:05:35.060 --> 00:05:40.850
好吧跟我们之前的一样的命令
Right, All right,
exact same command that we ran before.

90
00:05:40.850 --> 00:05:43.409
现在这只在一个不共享的环境下我要走了
So now this one is in an unshared
environment and now I'm gonna go and

91
00:05:43.409 --> 00:05:45.850
其实是给这个分配一个小组来控制这个。
actually assign a cgroup to this,
to control this one.

92
00:05:47.050 --> 00:05:49.090
现在你得从主机上运行，对吧 ?
Now, you have to run this from the host,
right?

93
00:05:49.090 --> 00:05:52.230
你不能用这种方式来管理它，你不能说自己是对的吗 ?
You can't run it from with like,
you can't say limit myself right?

94
00:05:52.230 --> 00:05:55.360
我得回去给主持人做。
I have to go back to the host and
do it from the host.

95
00:05:57.310 --> 00:06:02.480
所以我还有一个，我可以在这里看到，我可以在这里看到我的不共享的批处理环境。
So I have another, I can see here, I can
see my unshared batch environment here.

96
00:06:03.569 --> 00:06:08.560
这是我连接到同一个容器的另一个过程。
So this is another process that I
have connected to the same container.

97
00:06:10.459 --> 00:06:15.519
所以我跑来了，我可以看到这里的这批号正在运行。
So I ran ps aux and I can see here
this batch right here is running.

98
00:06:15.519 --> 00:06:19.449
所以我需要这个 PID 7607
So what I need is I need
this PID right here, 7607,

99
00:06:19.449 --> 00:06:22.579
这对你的电脑是不一样的对吧
this will be different for
your computer, right?

100
00:06:22.579 --> 00:06:25.680
把 PID 分配给 PID 是不一样的
Cuz how it assigns
the PID will be different

101
00:06:25.680 --> 00:06:27.230
以你的电脑为基础
based on the computer you're running on.

102
00:06:27.230 --> 00:06:28.980
所以我要你跑 ps
So I need you to run ps aux.

103
00:06:28.980 --> 00:06:32.370
我要你去找这个混蛋这个
And I need you to find the bash,
this one here.

104
00:06:34.399 --> 00:06:38.490
这可能是最高的吧，除非你有多重，对吧 ?
That's the highest one probably,
unless you have multiple, right?

105
00:06:38.490 --> 00:06:40.779
你可以看到我有 104个
So you can see here I have 104.

106
00:06:40.779 --> 00:06:43.490
104 可能是我现在正在做的
104 is probably the one that I'm
actually doing right now, or

107
00:06:43.490 --> 00:06:44.670
可能是另一个
might have been the other one.

108
00:06:44.670 --> 00:06:47.159
这不重要对吧
Doesn't matter, needs this one, right?

109
00:06:47.159 --> 00:06:50.189
不分享就直接来了
It'll come directly
right after the unshare.

110
00:06:50.189 --> 00:06:52.500
7607你就不一样了
So 7607, it'll be different for you.

111
00:06:53.689 --> 00:07:00.404
现在我要你做的就是我要你说
And now what I want you to do
is I want you to say cgclassify

112
00:07:00.404 --> 00:07:08.185
-g cpu，内存，blkio，设备，冷柜
-g cpu,memory,blkio,devices,freezer

113
00:07:08.185 --> 00:07:13.319
:沙箱。
:sandbox.

114
00:07:13.319 --> 00:07:16.707
如果您不知道，沙箱是我在此处创建的控制组的名称。
If you can't tell, sandbox is the name
of the control group I've created here.

115
00:07:16.707 --> 00:07:18.754
你可以随便给它打个电话
You can call it whatever you want.

116
00:07:18.754 --> 00:07:21.007
然后我会放 7607
And then I'm gonna put 7607.

117
00:07:24.526 --> 00:07:29.040
所以现在这个巴什和它的所有孩子
So now, this bash and
all of its children processes,

118
00:07:29.040 --> 00:07:33.470
对，因为进程会衍生其他进程。
right, because processes
spawn other processes.

119
00:07:33.470 --> 00:07:35.389
他们都是过程树的一部分对吧
They're all part of a process tree, right?

120
00:07:35.389 --> 00:07:38.980
我是说那个过程树里面的东西都在里面
I'm saying, everything inside of that
process tree is now inside of this

121
00:07:38.980 --> 00:07:40.259
控制组。
control group.

122
00:07:40.259 --> 00:07:43.129
现在这并不意味着什么，对，因为我什么都没做。
Right now that doesn't mean anything,
right, because I haven't done anything.

123
00:07:44.350 --> 00:07:45.149
但我们要走了
But we're about to.

124
00:07:46.579 --> 00:07:51.505
但如果你想看看里面到底是什么
But if you wanna see
what's actually in there,

125
00:07:51.505 --> 00:07:57.802
我们可以说 cat/sys/fs/cgroup/cpu/sandbox/tasks 。
we can say
cat/sys/fs/cgroup/cpu/sandbox/tasks.

126
00:07:57.802 --> 00:08:00.887
你可以在这里看到 7607，对吧 ?
And you can see here, 7607, right?

127
00:08:00.887 --> 00:08:03.567
所以我们其实也可以直接加这个，但是
So we can actually just directly
add to that as well, but

128
00:08:03.567 --> 00:08:05.839
这就是 CG 对我们的分类
that's what CG classify does for us.

129
00:08:05.839 --> 00:08:13.149
就像在这个控制组里把它分类好吗
As it classifies that as inside
of this control group, okay?

130
00:08:13.149 --> 00:08:18.449
所以我想看看有多少资源
So I want to see how
much resources it has so

131
00:08:18.449 --> 00:08:27.697
我要说猫 /sys/fs/cgroup/cpu/sandbo/cpu.shares 。
I'm gonna say cat
/sys/fs/cgroup/cpu/sandbox/cpu.shares.

132
00:08:30.245 --> 00:08:36.152
你可以看到它有 1024，这意味着它有一个核心，我相信。
You can see here it has 1024, which means
that it has access to a core, I believe.

133
00:08:38.878 --> 00:08:40.649
不，这是优先事项，对吧 ?
No, this is the priority, right?

134
00:08:40.649 --> 00:08:44.250
所以你可以说这是一个低优先级的控制组，对吧 ?
So what you can say is like this is
a low priority control group, right?

135
00:08:44.250 --> 00:08:46.269
所以我可以说如果这就像五个
So I can say that if this was like a five,

136
00:08:46.269 --> 00:08:49.549
任何一到 1024 的东西就会被放在上面
anything that was at 1024 would
get prioritized above it, right?

137
00:08:49.549 --> 00:08:55.509
所以如果我有两个相互竞争的东西，就会比较他们的优先次序。
So if I have two competing things it'll
compare like what their priority is.

138
00:08:59.498 --> 00:09:02.720
现在让我们来限制正在发生的事情，对吧 ?
Now let's get into actually
limiting what's happening, right?

139
00:09:02.720 --> 00:09:09.485
所以我们要说 cgset -r cpu.cfs_period，
So we're gonna say cgset
-r cpu.cfs_period,

140
00:09:09.485 --> 00:09:13.299
我请你复制并粘贴
I would invite you to just copy and
paste this,

141
00:09:13.299 --> 00:09:16.600
我真的不明白这些东西的所有东西。
I actually really don't understand all of
the everything that's going on with these.

142
00:09:16.600 --> 00:09:20.232
就像我说的控制小组在这里是我的薪水
Like I said control groups are kind
of above my pay grade here.

143
00:09:20.232 --> 00:09:26.600
但是 100000 -r
But 100000 -r

144
00:09:26.600 --> 00:09:32.616
cpu.cfs_quota。
cpu.cfs_quota.

145
00:09:32.616 --> 00:09:34.845
所以我们要做的就是尝试
So what we're doing here
is we're gonna try and

146
00:09:34.845 --> 00:09:37.960
将其限制为仅使用可用 CPU 的 10% ，对吗 ?
limit this to only use 10%
of the available CPU, right?

147
00:09:37.960 --> 00:09:40.129
所以我的容器里有 10% 的东西
So it's actually gonna be 10% of
what's available in my container,

148
00:09:40.129 --> 00:09:42.919
或该容器可使用的两个核心的 10% 。
or 10% of the two cores that this
container has available to it.

149
00:09:45.480 --> 00:09:50.628
等式然后我们就把这个
Equals and
then we're gonna subshell this out

150
00:09:50.628 --> 00:09:55.648
五千次，甚至可能是百分之五。
to 5000 times, this might even be 5%.

151
00:09:55.648 --> 00:10:01.274
我认为这可能是 5 %。
I think this might be 5%.

152
00:10:01.274 --> 00:10:08.817
getconf N，即空间， NPROCESSORS。
getconf N, that's a space, NPROCESSORS.

153
00:10:14.048 --> 00:10:17.000
那就是沙箱的问题了
And that's gonna be for sandbox.

154
00:10:19.460 --> 00:10:23.000
好吧我知道这是命令的一团糟
Okay, so I recognize that
that's a mess of a command.

155
00:10:23.000 --> 00:10:26.532
但这里的想法是这个特殊的 c 组，我们说，哎，
But the idea here is this
particular c group, we said, hey,

156
00:10:26.532 --> 00:10:31.615
此树中的任何内容都只能使用可用处理能力的 5% 。
anything inside of this tree, it can only
use 5% of the available processing power.

157
00:10:36.465 --> 00:10:40.602
好吧那我们再多做一次
Okay, and
then we're gonna do one more cgset,

158
00:10:40.602 --> 00:10:44.741
这只会让人更容易理解
this one's a little bit
easier to understand,

159
00:10:44.741 --> 00:10:50.225
cgset -r memory.limit_in_bytes= ，我们会说
cgset -r memory.limit_in_bytes= and
we're gonna say,

160
00:10:50.225 --> 00:10:54.470
这个可以有 80 兆的，对吧 ?
this has access to 80 megabytes, right?

161
00:10:54.470 --> 00:10:56.365
以上都是内存不足的问题。
Anything above that,
it just runs out of memory.

162
00:10:58.373 --> 00:11:06.049
我们会说沙箱，好的，然后我们可以来看看。
And we're gonna say sandbox, Okay,
and then here we can check it out.

163
00:11:06.049 --> 00:11:14.090
我们可以说， cgget -r memory.stat 用于沙箱。
We can say,
cgget -r memory.stat for sandbox.

164
00:11:14.090 --> 00:11:16.070
这会输出很多东西但是
And this'll output a bunch of stuff, but

165
00:11:16.070 --> 00:11:19.730
我们可以看到这就是它的实际极限
we can see here this is the physical
limit of what it could go to, but

166
00:11:19.730 --> 00:11:23.809
我们是说，哎，这个是八十兆字节的，对吧 ?
we're saying, hey, this is what 80
megabytes would be in bytes, right?

167
00:11:23.809 --> 00:11:25.755
这仅能访问 80 兆字节。
This only has access to 80 megabytes.

168
00:11:32.760 --> 00:11:36.024
好了现在我要说的是我们可以看的
Okay, so now I'm gonna say htop just so
we can watch.

169
00:11:36.024 --> 00:11:38.279
现在我的容器里没有很多东西对吧
Right now there's not a lot
going on in my container, right?

170
00:11:39.500 --> 00:11:41.519
你可以看到这里有 PS 的牛。
And you can see this is
the PS ox down here.

171
00:11:43.500 --> 00:11:46.820
现在，我希望您回到 Docker 容器中。
So now I want you to go back
into your Docker container here.

172
00:11:47.850 --> 00:11:52.000
我要给你演示如何把一个 CPU 锁在一个有趣的问题上，对吧 ?
And I'm gonna show you how to
pin a CPU just for fun, right?

173
00:11:52.000 --> 00:11:54.932
现在我不建议在这里放置叉式炸弹
Now, I don't recommend
dropping a fork bomb in here,

174
00:11:54.932 --> 00:11:58.755
你得多做点东西来防止叉式炸弹
you have to do a bit more stuff to
prevent fork bombs from taking over your

175
00:11:58.755 --> 00:12:01.139
因为他们工作的方式
computer because of how they work.

176
00:12:01.139 --> 00:12:02.309
所以别那么做
So don't do that.

177
00:12:02.309 --> 00:12:05.070
除非你想把你的电脑撞向我的客人
Unless you want to crash your
computer in which case be my guest.

178
00:12:07.889 --> 00:12:12.740
在 Linux 中我最喜欢的东西是你可以做的
So one of my favorite things
in Linux is you can do yes and

179
00:12:12.740 --> 00:12:14.990
它只会永远重复 Y ，对吗 ?
all it does it just repeats Y forever,
right?

180
00:12:17.080 --> 00:12:22.350
或者你可以说 " 是" 废话现在说的是 " 无限的废话 "
Or you can say yes, crap and
now it just says crap infinitely.

181
00:12:22.350 --> 00:12:26.695
所以如果我说的是 /dev 空，那只是虚惊一场
So if I say yes into /dev null,
which is just a scream into the void

182
00:12:26.695 --> 00:12:30.644
基本上就是这个指令的价值
basically that's the equivalent
of what this command is.

183
00:12:32.942 --> 00:12:35.332
这事要做的就是把中央的 CPU
What this is gonna do,
is it's going to pin the CPU for

184
00:12:35.332 --> 00:12:36.940
这个特殊的过程，对吧 ?
this particular process, right?

185
00:12:36.940 --> 00:12:38.659
它会用尽可能多的 CPU
It's gonna take as much
CPU as it possibly can.

186
00:12:39.960 --> 00:12:45.974
所以如果回到这里来 Docker 的话，你可以在这里看到 12%的情况。
So if go back over here to Docker,
you can see here it's taking about 12%.

187
00:12:45.974 --> 00:12:47.940
在哪里，对，就在那里，对吧 ?
Where is the, yes,
it's right there, right?

188
00:12:49.379 --> 00:12:54.153
如果这不是里面的问题这会彻底把我们的 CPU 锁在里面
Now if this wasn't inside of this,
this would totally pin the CPU for us,

189
00:12:54.153 --> 00:12:55.466
对，百分之百。
right, 100%.

190
00:12:57.572 --> 00:12:59.676
但因为我们使用 C 组
But because we're using C groups,

191
00:12:59.676 --> 00:13:03.610
它保存在这个特定的秘密里
it's keeping that contained within
this one particular secret.

192
00:13:04.950 --> 00:13:06.080
太酷了对吧
That's pretty cool, right?

193
00:13:06.080 --> 00:13:09.250
我们人为地限制了这一过程。
We've artificially limited
this particular process.

194
00:13:09.250 --> 00:13:12.379
尽管它正试图把我们搞砸，但我们只是说没有。
And despite the fact that it's trying
to screw us over, we just say nope.

195
00:13:12.379 --> 00:13:15.309
你唯一能做的就是把所有东西都带走
The only thing you can do is you can
take everything inside of here and

196
00:13:15.309 --> 00:13:16.399
你可以烧了它
you can burn that.

197
00:13:16.399 --> 00:13:18.403
然后你就运气好了
And then you're just
out of luck after that.

198
00:13:20.643 --> 00:13:21.143
太酷了
Cool.

199
00:13:22.490 --> 00:13:23.847
所以，我们也要为记忆做个工作。
So let's do it for the memory too.

200
00:13:26.809 --> 00:13:33.856
别再说了我们会用 S 的但我们要做点什么
Stop that and we'll say, We're gonna use
the S again, but we're gonna do some

201
00:13:33.856 --> 00:13:38.299
更让人感到不安的是，老实说，我不明白到底发生了什么。
more fanciness, which honestly, I don't
understand exactly what's going on here.

202
00:13:38.299 --> 00:13:45.975
我把这个 100% 的人拉下来就像我的大部分代码一样
I pulled this 100% off of stack
overflow like most of my code.

203
00:13:48.450 --> 00:13:51.202
但这将会消耗尽可能多的内存。
But this is going to consume as
much memory as it possibly can.

204
00:13:57.220 --> 00:14:01.515
这里的想法是不断地填满我们的记忆直到它耗尽
The idea here is it's going to continually
fill our memory until it runs out of

205
00:14:01.515 --> 00:14:02.056
内存。
memory.

206
00:14:05.308 --> 00:14:08.414
所以，如果我们回到我们的交换中，再回顾一下。
So again,
if we look back back here at our hswap.

207
00:14:08.414 --> 00:14:13.325
你可以在这里看到，我们的内存使用量也有很大的增长，对吧 ?
You can see here, our memory
usage went up quite a bit, right?

208
00:14:13.325 --> 00:14:16.445
但它有 1.95 千兆字节的 RAM
But this has 1.95 gigabytes worth of RAM,
and

209
00:14:16.445 --> 00:14:20.554
只消耗了 80 兆字节对吧
it's only consuming about
80 megabytes of it, right?

210
00:14:20.554 --> 00:14:26.301
你可以在这里看到，我想它会显示它，有一个 CPU 百分比。
So you can see here, I think it'll
show it, there's a CPU percentage.

211
00:14:28.210 --> 00:14:32.062
我可以向下滚动，你可以。
Can I scroll down, there you can.

212
00:14:32.062 --> 00:14:36.774
你可以看到它消耗了 3.2% 的内存量，对，
So you can see here it's consuming
3.2% ish worth of memory, right,

213
00:14:36.774 --> 00:14:41.040
这不是很多，对，我们只局限于 80 兆字节。
which is not a lot, right,
cuz we limited to only 80 megabytes.

214
00:14:45.706 --> 00:14:49.338
事实上我没有给你看另一个
And actually, since I didn't show
you that with the other one,

215
00:14:49.338 --> 00:14:52.340
让我们再一起去玩吧
let's run the other one again just for
fun.

216
00:14:52.340 --> 00:14:58.087
我们会回到这个顶部，你可以看到 CPU 在 10%的位置。
We'll go back over here to this htop and
you can see the CPU here pegged at 10%.

217
00:14:58.087 --> 00:15:01.952
所以我们基本上是用手创造了一个容器，对吧 ?
So we basically created
a container by hand, right?

218
00:15:01.952 --> 00:15:06.409
不是完全的，你还需要 Docker，相信我。
Not totally,
you still need Docker, believe me.

219
00:15:06.409 --> 00:15:09.429
但这基本上是 Docker 实现的目标
But this is essentially what
Docker is accomplishing for

220
00:15:09.429 --> 00:15:11.169
你在车篷下面对吧
you underneath the hood, right?

221
00:15:12.419 --> 00:15:15.149
对于您，它也会为您提供更多信息，例如，创建卷和网络，以及
Again it does more for you there
like create volumes and networks and

222
00:15:15.149 --> 00:15:17.120
帮你管理一堆东西
manage a bunch of stuff for you.

223
00:15:17.120 --> 00:15:22.125
但在它的核心，容器系统就是这样。
But at its core,
the container system is this.

224
00:15:24.182 --> 00:15:26.639
>那么 Docker 将处理所有 C 组吗 ?
&gt;&gt; So Docker will handle all the C group?

225
00:15:26.639 --> 00:15:27.929
> > 是。
&gt;&gt; Yep.

226
00:15:27.929 --> 00:15:31.115
我要说大多数使用 Docker 的人员不知道 C 组是什么。
I would say most people that use
Docker don't know what C groups are.

227
00:15:31.115 --> 00:15:33.909
你永远不会知道的对吧
[LAUGH] Cuz you never have to know, right?

228
00:15:33.909 --> 00:15:35.553
它只为你管理这些东西
It just manages all that stuff for you.

229
00:15:41.284 --> 00:15:44.457
所以现在你可以像个斯诺克的球衣了
So now you can go and
be like snooty jerks to your obstacles,

230
00:15:44.457 --> 00:15:47.559
就像我知道 cgroups 是什么，然后就走了。
like I know what cgroups are and
then just walk away.

231
00:15:47.559 --> 00:15:48.250
这就是我要做的
That's what I would do.

232
00:15:51.096 --> 00:15:53.000
我应该在这停车
I probably should stop this over here.

233
00:15:55.259 --> 00:15:59.669
所以就为了搞笑
So, just for funsies.

234
00:15:59.669 --> 00:16:05.610
让我们尝试一下，是的，现在我不在我的环境改变之外。
Let's try this, yes into, so at now I'm
outside of my change of environment.

235
00:16:05.610 --> 00:16:09.820
如果我说 " 是 " / " 是 / "/ " 空" 。
And if I say yes into/dev/null.

236
00:16:09.820 --> 00:16:11.600
这可能很痛苦
This might be painful.

237
00:16:11.600 --> 00:16:14.514
你可以在这里看到，它完全是固定在其中一个核心。
You can see here,
it's totally pinning one of these cores.

238
00:16:17.299 --> 00:16:20.072
因为现在是在群外，对吧 ?
Because now it's outside of the cgroups,
right?

239
00:16:26.355 --> 00:16:30.730
再一次，如果我们回去再看看，它应该是没有固定的。
And again, if we go back and
look again, it should be unpinned.

240
00:16:30.730 --> 00:16:35.190
这就是我们要用手动方式手动创建容器的问题。
So this is as far as we're going to go
with manually creating containers by hand.

241
00:16:35.190 --> 00:16:38.740
我今天给你展示的一切都是学术性的活动
LIke everything that I've shown you so
far, this has been an academic exercise so

242
00:16:38.740 --> 00:16:42.039
你知道 Docker 会为你做什么
that you understand what Docker
is actually going to do for you.

243
00:16:42.039 --> 00:16:44.740
其他的我们要用更高的
For the rest of the class,
we're going to be using higher

244
00:16:44.740 --> 00:16:48.419
能帮你管理这些东西的工具
level tools that's just gonna
manage all this stuff for you.

245
00:16:48.419 --> 00:16:52.039
我也不认为你真的需要知道我给你看的这些东西
Again, I don't think you really ever need
to know these things that I've shown you,

246
00:16:52.039 --> 00:16:53.980
但现在你知道了到底发生了什么
but now that you do you know
exactly what's happening.

247
00:16:55.210 --> 00:16:57.690
我想如果你明白你的工具的复杂性
And I think again, if you understand
the complexity of your tools,

248
00:16:57.690 --> 00:16:58.929
你拥抱他们对吧
you embrace them, right?

249
00:16:58.929 --> 00:17:00.419
现在，您了解 Docker 正在执行的操作
Now you understand that
what Docker is doing for

250
00:17:00.419 --> 00:17:03.259
你你会很感激有人花了时间
you, you're gonna be a lot more
grateful that someone took the time to

251
00:17:03.259 --> 00:17:05.240
构建 Docker，对吧 ?
build Docker, right?

252
00:17:05.240 --> 00:17:07.410
相反，下次您遇到 Docker 问题时，
Rather than,
next time you have a Docker problem,

253
00:17:07.410 --> 00:17:08.640
你就可以把你的笔记本扔了
you can just wanna throw your laptop.

254
00:17:08.640 --> 00:17:10.278
至少你会有点感激的
At least you'll be a little bit grateful.
