WEBVTT

1
00:00:00.210 --> 00:00:04.459
所以我给你们展示了如何进行绑定安装，现在我们将进入卷。
So I showed you how to do bind mounts,
and now we're going to get into volumes.

2
00:00:04.459 --> 00:00:06.910
好吧这是另一种方法
Okay, so this is the other way to mount in

3
00:00:09.240 --> 00:00:13.060
可以在这些容器之间生存的新文件
new files into this that can
survive between runs of containers.

4
00:00:13.060 --> 00:00:16.890
绑定安装和卷之间的差异是绑定安装实际上是
The difference between bind mounts and
volumes is that bind mounts are literally

5
00:00:16.890 --> 00:00:20.269
只要你的电脑上的文件就会暴露在容器里对吧
just files on your computer that you're
exposing inside of the container, right?

6
00:00:20.269 --> 00:00:23.079
就像我们在这里给你看的
Just like what we showed you here,
the volume

7
00:00:23.079 --> 00:00:26.172
是 Docker 为您管理的东西，它不会暴露在主机上，对吧 ?
is something that Docker manages for you,
it's not exposed on the host, right?

8
00:00:26.172 --> 00:00:30.579
Docker 就像，可以，您创建了这个新卷，这个新的文件系统，
Docker is just like, okay, you've created
this new volume, this new file system, and

9
00:00:30.579 --> 00:00:31.769
我会留的对吧
I'll just keep it, right?

10
00:00:31.769 --> 00:00:34.420
任何你要求的时间我会把它交给你的对吧
And anytime that you ask for it,
I'll hand it back to you, right?

11
00:00:35.880 --> 00:00:39.329
这对数据库很有用，对吧 ?
So this is really useful for
things like database, right?

12
00:00:39.329 --> 00:00:41.890
你可以让蒙戈写这卷的对吧
So you can have Mongo write
to this volume, right?

13
00:00:41.890 --> 00:00:43.710
在蒙哥的容器消失的任何时候
And then any time that the Mongo
container goes away and

14
00:00:43.710 --> 00:00:46.409
回来就能开始读和写同样的卷了
comes back, it'll just start reading and
writing to the same volume.

15
00:00:46.409 --> 00:00:48.950
所以你基本上是在告诉 Docker ，坚持这些文件。
So you're basically telling Docker,
hold onto these files.

16
00:00:48.950 --> 00:00:53.710
这些文件的名称是 Mongo 安装或类似的东西。
And the name of these files is
Mongo mount or something like that.

17
00:00:53.710 --> 00:00:54.409
有道理吗
Does that make sense?

18
00:00:57.246 --> 00:01:02.371
所以，让我们继续吧，我们会在这里制作一个新的目录。
So let's go ahead and,
we'll make a new directory here.

19
00:01:02.371 --> 00:01:03.631
我们将启动一个新项目。
And we'll start a new project.

20
00:01:06.909 --> 00:01:10.737
所以我退出了，我们会把这一卷称为 " 卷 " 。
So I'm out of this, and
we'll call this one volumes.

21
00:01:13.561 --> 00:01:17.001
卡到卷中。
Cd into volumes.

22
00:01:17.001 --> 00:01:22.769
我们会在这里卷进来的
And we're gonna come
over here into volumes.

23
00:01:22.769 --> 00:01:24.239
把这些都关了我不需要
Close all these, cuz I don't need them.

24
00:01:26.049 --> 00:01:27.129
把它关了
And close that.

25
00:01:27.129 --> 00:01:29.280
我们要去做个新文件
And here we're gonna make a new file.

26
00:01:30.960 --> 00:01:34.500
这个叫 index.js 。
This one is gonna be called index.js.

27
00:01:34.500 --> 00:01:37.990
我们会在这里制作一个叫做 Dockerfile的新文件。
And we're gonna make a new
file here called Dockerfile.

28
00:01:37.990 --> 00:01:38.799
惊喜惊喜吧
Surprise, surprise.

29
00:01:41.200 --> 00:01:46.900
我们想做的就是创造最糟糕的数据库
And what we wanna do is we wanna
create the worst database,

30
00:01:46.900 --> 00:01:49.620
我们只会把文件系统作为一个数据库
where we're just gonna use the file
system basically as a database.

31
00:01:49.620 --> 00:01:53.695
当有人点击端点时，我们要做的就是阅读
That anytime someone hits an endpoint,
what we're gonna do is we're going to read

32
00:01:53.695 --> 00:01:57.847
文件，查看文件中的号码，然后将其反馈给用户。
the file, see what the number's inside the
file, and then give it back to the user.

33
00:02:00.643 --> 00:02:02.733
所以，我又给你写了节点代码，所以
So, again,
I wrote the node code for you, so

34
00:02:02.733 --> 00:02:04.989
你不必担心它是什么
you don't necessarily
have to worry what it is.

35
00:02:04.989 --> 00:02:06.500
所以我到这里来卷
So I come down here to volumes.

36
00:02:08.604 --> 00:02:10.081
把所有这些都复制
And just copy all of this.

37
00:02:10.081 --> 00:02:12.039
你不用担心这里的事
You don't have to worry
about anything in here.

38
00:02:17.073 --> 00:02:21.014
不是，这不是 Docker 文件，是 index.js 。
Nope, that's not a Docker file,
that's an index.js.

39
00:02:21.014 --> 00:02:24.564
但为了让你穿过它的文件系统
But just to walk you through it,
fs stands for file system,

40
00:02:24.564 --> 00:02:27.554
路径是节点的路径解析模块。
path is a path resolution
kind of module for node.

41
00:02:27.554 --> 00:02:33.237
我们在说，把它写在这个 data.txt 文件上，好吗 ?
And we're saying,
write it to this data.txt file, okay?

42
00:02:37.786 --> 00:02:39.228
这甚至不是一个网络服务器，对吧 ?
This isn't even a web server, right?

43
00:02:39.228 --> 00:02:41.873
所以这一切都要在集装箱里运行
So all this is gonna do,
it's gonna run this on the Container and

44
00:02:41.873 --> 00:02:43.449
然后就会离开集装箱
then it's gonna exit the container.

45
00:02:45.099 --> 00:02:48.120
所以它要做的就是从数据 .txt中读取
So all it's gonna do is it's
going to read from data.txt,

46
00:02:48.120 --> 00:02:51.219
我们要用体积装进去对吧
which we're going to mount in via volume,
right?

47
00:02:51.219 --> 00:02:54.750
然后再给它加一个
And then it's going to add one to it.

48
00:02:54.750 --> 00:02:57.030
然后它就会记录到它的记录。
And then it's going to console log that.

49
00:02:57.030 --> 00:02:58.689
然后就结束了对吧
And then it's going to finish, right?

50
00:02:58.689 --> 00:03:02.210
所以如果只是在一个短暂的容器里
So if this was just in
an ephemeral container, right,

51
00:03:02.210 --> 00:03:04.286
都是一个，对吧 ?
it would always be one, right?

52
00:03:04.286 --> 00:03:06.650
把它跑了好吧什么都没有
Cuz it would just be run,
okay, nothing's there.

53
00:03:06.650 --> 00:03:08.550
这里有一个出口对吧
Here's one, exit, right?

54
00:03:08.550 --> 00:03:10.740
但我想让它保持状态对吧
But I want it to maintain state, right?

55
00:03:10.740 --> 00:03:13.479
所以我希望它是一个，然后两个，然后三个，然后四个，对吧 ?
So I want it to be one, then two,
then three, then four, right?

56
00:03:13.479 --> 00:03:15.310
所以我们要用音量来完成这个
So we're gonna use the volume
to accomplish that.

57
00:03:15.310 --> 00:03:16.234
有道理吗
Does that make sense?

58
00:03:17.251 --> 00:03:18.170
好的。
Okay.

59
00:03:20.592 --> 00:03:26.991
我们现在要做的就是打开我们的
So what we're gonna do now is
we're gonna open our, Yeah,

60
00:03:26.991 --> 00:03:32.356
我们会在这里制作最简单的 Docker 文件
we're gonna make the simplest
Docker file in the world here,

61
00:03:32.356 --> 00:03:35.567
这是 FROM 节点:12-alpine。
which is FROM node:12-alpine.

62
00:03:35.567 --> 00:03:38.170
不管你想做什么你都可以做什么
Doesn't matter, you can do scratch or
whatever you want.

63
00:03:38.170 --> 00:03:41.512
我要说 COPY chown
I'm gonna say COPY --chown.

64
00:03:41.512 --> 00:03:45.534
不是来自， c-h 拥有。
Not from, c-h own.

65
00:03:45.534 --> 00:03:50.925
node:node./source.
node:node./source.

66
00:03:50.925 --> 00:03:55.723
我要说 WORKDIR/src
I'm going to say WORKDIR/src, and

67
00:03:55.723 --> 00:04:00.526
该命令将为节点 index.js。
the command will be node index.js.

68
00:04:00.526 --> 00:04:01.591
这里什么都没有对吧
Nothing new here, right?

69
00:04:01.591 --> 00:04:06.943
简单的小 Docker 文件。
Pretty simple little Docker file.

70
00:04:06.943 --> 00:04:13.086
然后我们现在要做的就是
And then what we're gonna
do now is we're gonna say,

71
00:04:13.086 --> 00:04:17.601
docker build --tag=增量器。
docker build --tag=incrementor.

72
00:04:20.786 --> 00:04:22.639
建造的太棒了
Built, awesome.

73
00:04:22.639 --> 00:04:27.925
Docker 运行增量器。
docker run incrementor.

74
00:04:27.925 --> 00:04:31.310
所以它说，它说找不到文件，写 0 到新文件。
So there it says, it says file not found,
writing 0 to new file.

75
00:04:31.310 --> 00:04:34.774
如果我再做一次你认为会发生什么
Now if I run this again,
what do you think will happen?

76
00:04:34.774 --> 00:04:37.050
>> 将读取它 [INAUDIBLE]。
&gt;&gt; It'll read it [INAUDIBLE].

77
00:04:37.050 --> 00:04:41.659
> > 所以还会保持 0 ，因为我们还没有安装卷，对吧 ?
&gt;&gt; So it's gonna still stay 0 because we
haven't mounted the volume in yet, right?

78
00:04:41.659 --> 00:04:44.971
所以我们一直在运行它会说
So we keep running it, it's going to say,

79
00:04:44.971 --> 00:04:49.946
我找不到什么叫 data.txt 的东西，给你，对吧 ?
I can't find anything called data.txt,
here you go, right?

80
00:04:49.946 --> 00:04:53.021
但我们现在可以做的是，我们可以使用 Docker 运行。
But what we can do now is
we can use Docker run.

81
00:04:53.021 --> 00:04:56.588
如果你还记得我们的 indext
And if you remember
inside of our index.tht,

82
00:04:56.588 --> 00:04:59.983
让我们把这个做个小一点
let's make this a bit smaller for
a second.

83
00:04:59.983 --> 00:05:01.769
我们这里有数据通路对吧
We have the data path here, right?

84
00:05:01.769 --> 00:05:05.269
这就是如何在节点内部读取环境变量的方式。
So this is how you read environmental
variables inside of node.

85
00:05:05.269 --> 00:05:08.670
所以我可以把它修改为一个容量的内部，对吧 ?
So I can modify this to be inside
of a volume somewhere, right?

86
00:05:09.899 --> 00:05:13.720
所以我要说码头跑
So I'm gonna say docker run --,

87
00:05:13.720 --> 00:05:18.391
不是在， --env， right?
not there, --env, right?

88
00:05:18.391 --> 00:05:21.463
这就是我要为环境变量提供食物的方式
So this is how I'm gonna
feed environmental variables

89
00:05:21.463 --> 00:05:22.677
在容器里
into the container.

90
00:05:22.677 --> 00:05:31.004
DATA_PATH=/data/num.txt ， okay ?
DATA_PATH=/data/num.txt, okay?

91
00:05:31.004 --> 00:05:36.552
然后我要说 --安装 type=volume。
Then I'm going to say --mount type=volume.

92
00:05:40.173 --> 00:05:42.875
Src=，就做点什么吧。
Src=, just make something up.

93
00:05:42.875 --> 00:05:45.904
我要给这个增量数据打个电话
I'm gonna call this incrementor data.

94
00:05:45.904 --> 00:05:48.005
只要你能保持一致就可以给它打个电话
As long as you're consistent you
can call it whatever you want.

95
00:05:49.552 --> 00:05:53.925
然后我们会把它储存在数据里，对吧 ?
And then target,
we're gonna store that in /data, right?

96
00:05:55.180 --> 00:05:59.473
这才是真正的音量要装在哪里
So that's where the actual
volume's gonna be mounted right?

97
00:05:59.473 --> 00:06:03.310
我要说的是增量式的对吧
And them I'm gonna say,
incrementor, right?

98
00:06:03.310 --> 00:06:04.920
所以我要去经营这个集装箱
So I'm actually gonna run the container.

99
00:06:09.423 --> 00:06:12.259
所以我之前就在写这个演示。
So I was writing this demo earlier.

100
00:06:13.300 --> 00:06:15.369
但你可以说 Docker 卷列表。
But you can say docker volume list.

101
00:06:16.709 --> 00:06:18.749
天啊我有很多事不是吗
God, I have a lot, don't I?

102
00:06:18.749 --> 00:06:23.040
Docker 卷 rm
docker volume rm

103
00:06:23.040 --> 00:06:28.254
增量数据。
incrementer data.

104
00:06:28.254 --> 00:06:29.769
我认为应该这样做。
I think that should remove it.

105
00:06:29.769 --> 00:06:34.923
好吧既然我来了
Okay, so now if I run it.

106
00:06:34.923 --> 00:06:36.790
我一定是搞错了
I must have gotten the wrong one.

107
00:06:39.937 --> 00:06:44.172
我们去码头吧
Let's do docker volume prune.

108
00:06:46.810 --> 00:06:48.778
那就把我的所有卷都弄走了
That'll get rid of all of my volumes.

109
00:06:51.747 --> 00:06:53.610
天啊我说什么了
Jeez, what did I claim?

110
00:06:53.610 --> 00:06:55.569
我刚买了个 gabyte 回来就好了
Well, I just got a gigabyte back,
so that's neat.

111
00:06:55.569 --> 00:07:00.949
好吧如果我要这样做的话就会说 5个
[LAUGH] All right, so
now if I run this, it's gonna say 5.

112
00:07:00.949 --> 00:07:02.560
我都不知道这个地方了
I don't even know where this anymore.

113
00:07:02.560 --> 00:07:09.333
所以，让我们称之为增量式数据 2。
So, Let's just call this
incrementor data 2.

114
00:07:09.333 --> 00:07:13.593
所以这将会有一个不同的开始，现在它是把 0 写在一个新的文件里。
So this will start a different one, and
now it's saying writing 0 to a new file.

115
00:07:13.593 --> 00:07:19.567
现在我再做一次它会说 01年
And now if I run it again,
it's gonna say 01.

116
00:07:19.567 --> 00:07:21.720
它控制台记录日志并将其递增，对吗 ?
Cuz it console logs it and
then increments it, right?

117
00:07:21.720 --> 00:07:22.939
这就是为什么它会这么说
That's why it says that.

118
00:07:25.339 --> 00:07:30.500
但这就是我们如何在运转之间取得持续的状态，对吧 ?
But that's how we're getting
persistent state between runs, right?

119
00:07:30.500 --> 00:07:36.000
这就是 Docker 会为您管理的所有数据量，对吧 ?
And so this is all volumes of data that
Docker is gonna manage for you, right?

120
00:07:36.000 --> 00:07:37.269
所以这没有暴露给我的主人
So this hasn't exposed to my host.

121
00:07:37.269 --> 00:07:40.509
我想你可以通过主机来检查，对吧 ?
I think you can inspect it via the host,
right?

122
00:07:40.509 --> 00:07:41.649
但这不是为了对吧
But it's not meant to, right?

123
00:07:41.649 --> 00:07:44.340
它只是用于 Docker 容器。
It's meant to be just for
Docker containers.

124
00:07:44.340 --> 00:07:45.360
这就是你的经验法则
So that's kind of your rule of thumb.

125
00:07:45.360 --> 00:07:48.620
如果你有这方面的信息
If you have information that's
really just for the containers and

126
00:07:48.620 --> 00:07:50.569
这不是主机的意思用卷
it's never meant for
the host, use volumes.

127
00:07:50.569 --> 00:07:53.550
始终希望通过绑定安装来进行卷。
Always prefer volumes over bind mounts.

128
00:07:53.550 --> 00:07:57.983
使用卷几乎是更好的主意，使用绑定的唯一原因是
It's almost always a better idea to use
volumes, the only reason to use bind

129
00:07:57.983 --> 00:08:02.487
安装是如果您特别想要某种类型的主机容器交互，
mounts is if you specifically want some
sort of host container interaction,

130
00:08:02.487 --> 00:08:07.250
就像一个 dev 容器，或者我们使用的那个 ngenx 的地方，对吧 ?
like a dev container, or somewhere
like the ngenx one that we use, right?

131
00:08:07.250 --> 00:08:10.329
这就是绑定程序更适用的地方
That's where a bind mount's
more applicable, where it's

132
00:08:10.329 --> 00:08:15.430
主机和 Docker 容器之间的通信类型。
about that kind of communication between
the host and the Docker container.

133
00:08:15.430 --> 00:08:18.470
再次，此处的主要用例是，您将在日志中看到它，对吗 ?
Again, the primary use case here is,
you'll see it with logs, right?

134
00:08:18.470 --> 00:08:21.199
你会让人们把他们的日志写在一个卷上
So you'll have people writing
out their logs to a volume,

135
00:08:21.199 --> 00:08:23.350
那是很常见的用例
that's very common use case for that.

136
00:08:23.350 --> 00:08:27.610
你会在数据库里看到它的人
You'll see it for databases,
where people are keeping their

137
00:08:27.610 --> 00:08:32.620
数据库状态，对，写入卷。
database state, right,
written out to volumes.

138
00:08:32.620 --> 00:08:37.099
有各种不同的方法可以看到这一清单。
There's various different ways
that you can see that manifest.

139
00:08:40.311 --> 00:08:43.790
所以最后三，二，
So the last three, or two,

140
00:08:47.962 --> 00:08:50.990
我们不打算讨论但还有另外两种类型的安装
That we're not gonna talk about, but
there are two other types of mounts.

141
00:08:50.990 --> 00:08:54.309
其中一个叫做临时 Fs，作为名字信仰者，
One of them is called temp Fs,
which as the name belies,

142
00:08:54.309 --> 00:08:56.419
是个临时文件系统对吧
it's a temporary file system, right?

143
00:08:56.419 --> 00:08:57.809
这实际上是一个 Linux 功能。
So this is actually a Linux feature.

144
00:08:57.809 --> 00:09:00.509
因此，这仅适用于 Linux 容器。
So this only applies to Linux containers.

145
00:09:00.509 --> 00:09:04.879
您可以实际安装在临时文件系统中
You can actually mount in
a temporary file system

146
00:09:04.879 --> 00:09:06.509
就会消失在它的尽头
that then disappears at the end of it.

147
00:09:06.509 --> 00:09:11.000
而你这样做的原因是他们会这样做
And the reason that you would do this,
that people like it, is they'll do it for

148
00:09:11.000 --> 00:09:12.230
他们的秘密对吧
their secrets, right?

149
00:09:12.230 --> 00:09:19.070
因此，如果我有访问密码，并且我有数据库连接字符串或
So if I have access password, and
I have a database connection string or

150
00:09:19.070 --> 00:09:23.330
分析键或类似的内容，我将通过临时 Fs 来进行安装，
analytics key or something like that,
I'll mount that in via temp Fs,

151
00:09:23.330 --> 00:09:29.919
这是一个临时安装文件系统的临时 Linux 内核功能。
which is this ephemeral Linux kernel
feature of temporary mounting file system.

152
00:09:31.399 --> 00:09:35.148
所以这就是临时的 F ，你会发现，对于秘密来说，几乎是独家的。
So that's temp Fs, you'll see that for
secrets almost exclusively.

153
00:09:35.148 --> 00:09:38.500
还有一个叫命名管道，或者是 n 个管道。
And there's another one called
named pipes, or n pipe.

154
00:09:38.500 --> 00:09:42.182
我想我也没说过，也有 Windows 的容器，对吧 ?
I guess I haven't talked about it,
there's Windows containers as well, right?

155
00:09:42.182 --> 00:09:45.889
所以我们在 Linux 容器上做了一切
So we've been doing everything
on Linux containers, but

156
00:09:45.889 --> 00:09:49.828
也有 Windows 容器，它们的工作方式不同。
there are also Windows containers,
they work differently.

157
00:09:49.828 --> 00:09:55.745
Windows 容器实际上是完整的 Windows 虚拟化操作系统，
Windows containers are actually full
Windows virtualized operating systems,

158
00:09:55.745 --> 00:09:56.629
对吧 ?
right?

159
00:09:56.629 --> 00:09:59.159
但你只允许把它们当成容器
But you're just allowed to
treat them like containers.

160
00:10:00.559 --> 00:10:04.419
所以如果你有一个完整的数据中心，它是由 Kubernetes 管理的，它们都是
So if you have a whole data center and
it's managed by Kubernetes and they're all

161
00:10:04.419 --> 00:10:08.480
在任何地方都使用容器，您也可以使用 Docker 来管理 Windows 。
using containers everywhere, you can
use Docker to manage Windows as well.

162
00:10:09.549 --> 00:10:12.679
所以有一个特殊的文件系统叫做管道命名管道
And so there is a special file system for
that called named pipes,

163
00:10:12.679 --> 00:10:15.830
您可以将其用于 Windows 容器的其他各种情况。
which you can use for various other
things with Windows containers.

164
00:10:15.830 --> 00:10:18.350
其实我都没使用 Windows 的容器，所以
I've actually never even
used Windows containers, so

165
00:10:18.350 --> 00:10:20.009
我不会再解释的了
I'm not gonna explain any more than that.

166
00:10:20.009 --> 00:10:22.278
但他们在那里，他们存在，如果你想的话，你可以用它们。
But they're out there, they exist,
you can use them if you want to.

167
00:10:26.206 --> 00:10:31.059
好的，有人对卷或绑定安装有任何疑问吗 ?
All right, does anyone have any questions
about volumes or bind mounts, either one?

168
00:10:33.500 --> 00:10:34.870
有道理吗
Make sense?

169
00:10:34.870 --> 00:10:37.860
>> 您说，其中一个主要用例将是共享数据库或
&gt;&gt; You said one of the main use
cases would be a shared database or

170
00:10:37.860 --> 00:10:38.898
一些外部的东西
something that's external.

171
00:10:38.898 --> 00:10:44.970
你会有个用的箱子你想让不同的容器撞击
Would you have a use case where you would
want maybe different containers hitting

172
00:10:44.970 --> 00:10:50.769
在不同实例之间运行共享模拟数据的同一卷 ?
the same volume to get a shared mock data
between different instances running?

173
00:10:50.769 --> 00:10:51.389
> > 我能看出来。
&gt;&gt; I could see that.

174
00:10:51.389 --> 00:10:56.995
我是说那是另一个体积相当有用的东西
I mean, that's another thing that
volumes are quite useful for,

175
00:10:56.995 --> 00:11:00.408
就是如果我有容器 A 和容器 B
is if I have Container A and container B.

176
00:11:00.408 --> 00:11:02.389
他们都是从同一个数据集里读出来的
And they're both reading
from a same dataset,

177
00:11:02.389 --> 00:11:04.179
可以在这两个卷之间共享卷。
a volume can be shared amongst both those.

178
00:11:04.179 --> 00:11:05.580
所以你可以把这两个都装在
And so you can mount those both in.

179
00:11:07.299 --> 00:11:08.980
一个我能想到的愚蠢的例子
A dumb example I can think about that is,

180
00:11:08.980 --> 00:11:11.789
就说我有五种不同的网络服务它们都在运行
let's say I have five different web
services and they're all running.

181
00:11:11.789 --> 00:11:14.610
他们都在注销，我想让原木去一个地方。
And they're all logging out, and
I want the logs to go to one place.

182
00:11:14.610 --> 00:11:18.690
我可以把同样的记录卷安装在他们的五个中对吧
I could mount the same logging
volume into all five of them, right?

183
00:11:18.690 --> 00:11:20.960
这将是实现这一目标的好方法。
And that would be a good
way to accomplish that.

184
00:11:22.440 --> 00:11:23.769
是啊我肯定能看出来
Yeah, I could definitely see that.

185
00:11:23.769 --> 00:11:28.570
或者你有一个服务
Or maybe you have one
service that's writing

186
00:11:28.570 --> 00:11:32.690
记录到已安装的卷，然后您具有日志分析服务，对吗 ?
logs to a mounted volume, and then you
have a log analytic service, right?

187
00:11:32.690 --> 00:11:36.370
那就是从那个看，展示一个好的仪表盘，
And that would be reading from that and
displaying a nice dashboard or

188
00:11:36.370 --> 00:11:37.840
就像这样
something like that.

189
00:11:37.840 --> 00:11:40.034
所以，对这种东西来说，完全有效的用例。
So, yeah, totally valid use case for
that kind of stuff.

190
00:11:40.034 --> 00:11:42.278
是使用卷的好理由。
And a good reason to use volumes.
