WEBVTT

1
00:00:00.000 --> 00:00:02.686
现在我们要进入 Docker 的一些功能
So now we're gonna go into
some features in Docker, and

2
00:00:02.686 --> 00:00:06.131
我要把你的门展示给不同的路径
I'm gonna just show you the door
down to multiple different pathways.

3
00:00:06.131 --> 00:00:08.702
欢迎你加入，你可以更深入地了解这些话题，对吧 ?
And you're welcome to peek in and you
can go deeper into these topics, right?

4
00:00:08.702 --> 00:00:13.339
比如说，连网，那是一个真正的深坑洞洞，再一次，
Like, for example, networking, that's
a real deep rabbit hole that, again,

5
00:00:13.339 --> 00:00:16.443
我没资格跟你说
I'm not particularly qualified
to talk to you about.

6
00:00:16.443 --> 00:00:19.481
但我要向你们展示如何做基本的网络和
But I'm just gonna show you how to
do the basics of networking and

7
00:00:19.481 --> 00:00:21.856
然后你就可以从那里学到更多的东西
then from there you can go and
learn more about it.

8
00:00:23.896 --> 00:00:28.748
所以第一个是比较类似的话题，绑架，
So the first one is, these are relatively
similar topics, bind mounts and

9
00:00:28.748 --> 00:00:33.996
卷，但结果相对不同，我们一起去吧。
volumes, but they accomplish relatively
different results, let's go with.

10
00:00:33.996 --> 00:00:39.494
这个想法是你在运行之间有某种持久的存储，对吧 ?
The idea is that you have some sort of
persistent storage between runs, right?

11
00:00:39.494 --> 00:00:43.442
所以如果我有这个容器它会有一堆东西
So if I have this container and
it does a bunch of stuff and

12
00:00:43.442 --> 00:00:46.887
然后输出到该绑定安装或卷，以及
then outputs it to this bind mount or
volume, and

13
00:00:46.887 --> 00:00:52.267
那我再去那个集装箱，那个国家还会在，对吧 ?
then I go run that container again,
that state will still be there, right?

14
00:00:52.267 --> 00:00:55.850
我们需要某种方式在运行之间保持这种状态
We need some way that we can have
this state maintained between runs

15
00:00:55.850 --> 00:00:57.200
集装箱对吧
of containers, right?

16
00:00:57.200 --> 00:01:01.247
当容器关闭时，它们会将之前的所有内容都删除，对吗 ?
Cuz when containers get closed, they drop
everything that they had before, right?

17
00:01:01.247 --> 00:01:04.242
到目前为止，我们一直在处理自己所包含的容器。
So, so far, we've been dealing
with self contained containers.

18
00:01:04.242 --> 00:01:07.653
所以，这通常是你想要的，只是一个容器
So, this is normally like this is all you
ever want, is just a container that is

19
00:01:07.653 --> 00:01:11.128
完全的自我控制了，做点什么，就会消失，对吧 ?
totally self contained, that runs,
does something and disappears, right?

20
00:01:11.128 --> 00:01:15.438
一个重要的关键是我们不想要我们称之为雪花的东西。
And a big key about this is that we do
not wanna have what we call snowflakes.

21
00:01:17.924 --> 00:01:21.368
雪花就像一些你跑出来的特殊服务器
A snowflake is like some special
server that you have out running

22
00:01:21.368 --> 00:01:22.989
在生产服务器上。
on your production servers.

23
00:01:22.989 --> 00:01:28.430
你刚刚对它进行了按摩，就像这个扫把的手工服务器
And you've just massaged it and it's
like this bespoke artisanal server that

24
00:01:28.430 --> 00:01:31.430
都有正确的版本和一切正常的工作
has all the proper versions and
everything's working correctly.

25
00:01:31.430 --> 00:01:35.116
如果它消失了，你的整个系统就会下降，对吗 ?
If it just goes away,
your entire system can come down, right?

26
00:01:35.116 --> 00:01:37.280
如果发生这种情况会发生什么，对吗 ?
And what happens if that happens, right?

27
00:01:37.280 --> 00:01:40.500
那你就得回去了，要重新创造各种不同的
Then you have to go back and you have to
go recreate all those various different

28
00:01:40.500 --> 00:01:42.359
想知道你是怎么到那里的
sets to figure out how you got there.

29
00:01:44.170 --> 00:01:46.189
这很有问题，对，
And that's problematic, right,

30
00:01:46.189 --> 00:01:48.159
因为我们不想这样做对吧
because we don't want that
necessarily to happen, right?

31
00:01:48.159 --> 00:01:53.859
我们不想被这个扫雪的服务子所征服
We don't wanna be subjugated to
this bespoke, snowflake service.

32
00:01:53.859 --> 00:01:56.379
这就是为什么容器很棒因为你可以把它们旋起来
So that's why containers are great,
because you can spin them up and

33
00:01:56.379 --> 00:01:59.490
你可以把他们关起来你可以把他们关起来然后把他们关起来
you can close them down, you can spin
them up and you can close them down,

34
00:01:59.490 --> 00:02:04.750
就像这里的集装箱的吸引力
and that's kind of like
the appeal here of containers.

35
00:02:06.650 --> 00:02:09.430
所以我们在努力避免雪花
So we're trying to avoid snowflakes.

36
00:02:09.430 --> 00:02:10.310
有类似的想法
There's the idea of like,

37
00:02:10.310 --> 00:02:14.229
你不想要雪花而你想要的是什么人叫牛对吧
you don't want snowflakes and
you want what people call cattle, right?

38
00:02:14.229 --> 00:02:18.780
我对上帝发誓这不是我的比喻
And I swear to God, this is not my
analogy, but the idea is that you have

39
00:02:18.780 --> 00:02:21.819
很多牛和一头牛都没有别的牛，对吧 ?
many cattle and one cow is not any
different than the other cow, right?

40
00:02:21.819 --> 00:02:25.560
所以你就是想把一切都一模一样你就可以换掉了
So you just wanna have everything is just
exactly the same and you can swap them out

41
00:02:25.560 --> 00:02:28.806
你可以取代他们一切都很好
and you can replace them and
everything else, and that's just fine.

42
00:02:28.806 --> 00:02:31.847
我不会再做这个比喻了，但这就是人们说的，好吗 ?
I will go no further into that metaphor,
but that's what people say, okay?

43
00:02:35.848 --> 00:02:38.533
但并非所有东西都能整齐地装进一个容器里
However, not everything can fit neatly
into a container all the time and

44
00:02:38.533 --> 00:02:40.724
这个数据库是一个很好的例子，对吧 ?
a really good example of
this is databases, right?

45
00:02:40.724 --> 00:02:44.004
所以我可以上下旋转 SQL 数据库，对吧 ?
So I can spin up and
down my SQL databases, right?

46
00:02:44.004 --> 00:02:47.344
而且我有各种不同的客户
And it's fine that I have
various different clients or

47
00:02:47.344 --> 00:02:48.824
服务器对吧
servers of that right?

48
00:02:48.824 --> 00:02:52.254
但核心数据需要保留在运行之间，对吗 ?
But the core data needs to be
preserved between runs, right?

49
00:02:52.254 --> 00:02:56.062
所以如果我放大我的数据库，我有 100 个容器在运行，那么我就会缩小
So if I scale up my database and I have
100 containers running, then I scale down

50
00:02:56.062 --> 00:02:59.723
十，我不想丢失那个数据，那是重要的部分，对吧 ?
to 10, I don't wanna lose that data,
that's the important part, right?

51
00:02:59.723 --> 00:03:04.454
这就是为什么我们会被称为装配的东西，对吧 ?
So that's why we're gonna get
into things called mounts, right?

52
00:03:04.454 --> 00:03:07.652
而我们今天将要讨论的两个不同的火种
And the two different kinda mounts
that we're gonna talk about today, and

53
00:03:07.652 --> 00:03:10.050
我认为有四种或五种不同的类型。
I think there's four or
five different types.

54
00:03:10.050 --> 00:03:14.560
但两个主要的，有用的将是绑定安装和卷安装。
But the two primary, useful ones are going
to be bind mounts and volume mounts.

55
00:03:16.270 --> 00:03:20.959
那么，绑定安装类似于主机计算机的门户网站，对吗 ?
So bind mounts are like portals
to your host computer, right?

56
00:03:20.959 --> 00:03:23.885
所以我可以说，好吧，这里是一个文件夹，
So I can say, okay,
here's this folder, and

57
00:03:23.885 --> 00:03:27.048
这个集装箱就能看到这个文件夹，对吧 ?
this container can see just this folder,
right?

58
00:03:27.048 --> 00:03:29.902
我们会把它安装在这个特定的地方，它会被捆绑，对吗 ?
And we're gonna mount it in this one
particular place and it's bound, right?

59
00:03:29.902 --> 00:03:33.582
任何容器更改都显示在主机上的任何信息，
So anything that container changes
shows up on the host computer,

60
00:03:33.582 --> 00:03:37.471
任何电脑的改变都在容器里结束对吧
anything the host computer changes
ends up in the container, right?

61
00:03:37.471 --> 00:03:40.395
他们被捆绑在一起好吗
They're bound together, okay?

62
00:03:40.395 --> 00:03:42.965
这对像开发容器之类的东西真的有用，对吧 ?
This can be really useful for
things like developer containers, right?

63
00:03:42.965 --> 00:03:48.188
因此，如果我是编写代码，它需要在特定 kinda 容器中执行，或者
So, if I'm writing code, it needs to
execute in a specific kinda container or

64
00:03:48.188 --> 00:03:51.920
环境，这真的很有用，对吧 ?
environment, this is really useful for
that, right?

65
00:03:51.920 --> 00:03:55.098
例如，我的计算机上没有安装 " Go " ，但是
Like for example, I don't have
a Go installed in my computer, but

66
00:03:55.098 --> 00:03:58.045
如果我想开发一个 Go 项目或者运行一个 Go 项目，对，
if I wanted to develop a Go project or
run a Go project, right,

67
00:03:58.045 --> 00:03:59.670
我可以用一个容器
I could do that with a container.

68
00:03:59.670 --> 00:04:02.350
然后使用绑定安装，以便在任何时候修改代码，
And then use a bind mount so
that anytime I modify the code,

69
00:04:02.350 --> 00:04:04.506
对容器内部的密码进行修改。
it modifies the code
inside of the container.

70
00:04:04.506 --> 00:04:07.274
因此，绑定安装将是有用的。
So that's where bind mounts
are gonna be useful.

71
00:04:10.407 --> 00:04:15.600
我要教你怎么做这个特别的
So, I'm gonna show you how to do this
really quickly here with this particular

72
00:04:15.600 --> 00:04:20.882
就在这里你可以从我的笔记中直接复制和粘贴
command right here, which you can copy and
paste directly off of my notes here.

73
00:04:22.773 --> 00:04:24.036
所以说清楚
So let's clear.

74
00:04:26.242 --> 00:04:28.959
所以我再次进入了我的静态资产项目
So I'm inside of my, again,
static-assets-project,

75
00:04:28.959 --> 00:04:30.656
你刚刚建的那个是吧
the one that you just built, right?

76
00:04:30.656 --> 00:04:34.353
我要做船坞跑架就在这里
And I'm gonna do docker run -- mount,
right here, right,

77
00:04:34.353 --> 00:04:36.353
然后我会打打打捆
and then I would do a type= bind.

78
00:04:36.353 --> 00:04:39.946
因此，这是一个绑定安装，而不是卷安装。
So this is a bind mount,
not a volume mount.

79
00:04:39.946 --> 00:04:43.045
你得说这个消息来源就是这个
You're gonna say, the source and
this is this pwd,

80
00:04:43.045 --> 00:04:47.899
你得给它一条完整的路径一条绝对的路径
you have to give it a full path,
an absolute path as it's called, right?

81
00:04:47.899 --> 00:04:51.600
我不想把它全部输入出来所以你可以在这里玩这个
And I don't wanna type out all of it,
so you can do this trick right here,

82
00:04:51.600 --> 00:04:57.629
就是 "$(pwd)" 就像我现在的输出，就是这样。
which is "$(pwd)" is like output where
I am right now, that's what this does.

83
00:04:57.629 --> 00:05:01.084
或者如果你想这么做你就可以把这条合格的路
Or you could just put the whole
qualified path if you wanna do that,

84
00:05:01.084 --> 00:05:03.589
/build，是我已经造出来的，对吧 ?
/build, which is the part that
I already built out, right?

85
00:05:05.269 --> 00:05:10.829
然后目标，这就是我想让它在容器里输出的地方，对吧 ?
And then target, this is where I want it
to output within the container, right?

86
00:05:10.829 --> 00:05:14.319
所以，此输出到 usr/share/nginx/html，这应该是
So this outputs to
the usr/share/nginx/html, that should look

87
00:05:14.319 --> 00:05:18.120
熟悉你的情况，对，因为那就是我们输出这个建筑过程的地方。
familiar to you, right, because that's
where we output the build process.

88
00:05:18.120 --> 00:05:23.557
然后我们在 8080 端口发布我们要运行 nginx
And then we're publishing on port 8080,
and we're gonna run nginx,

89
00:05:23.557 --> 00:05:29.968
我们把它放进 1.17 号好吗 ?
and let's just put in 1.17 so that we can
be running on a consistent version, okay?

90
00:05:29.968 --> 00:05:31.721
那么你希望现在发生什么呢 ?
So what do you expect to happen now?

91
00:05:31.721 --> 00:05:36.370
我要直接把那只金花容器直接跑了
I'm actually gonna be running
the nginx container directly, right,

92
00:05:36.370 --> 00:05:39.016
我没有在上面建任何东西
I'm not building anything on top of it.

93
00:05:39.016 --> 00:05:40.803
但我们要完成同样的事
But we're gonna accomplish the same thing,
right,

94
00:05:40.803 --> 00:05:42.240
还会以同样的方式工作
it's still gonna work the exact same way.

95
00:05:45.721 --> 00:05:52.387
那么现在我们做了这个，这个开始，现在还可以到 8080 ，对吧 ?
So now that we've done that, this starts
up and now we can still go to 8080, right?

96
00:05:52.387 --> 00:05:58.074
所以 8080 ，看，还在跑，对吧 ?
So 8080, and look,
it's still running, right?

97
00:05:58.074 --> 00:06:01.942
它直接从 nginx 跑了不是从我们的容器里跑来的
It's running directly from nginx,
it's not running from our built container,

98
00:06:01.942 --> 00:06:03.634
是从 nginx 跑的对吧
it's running from nginx, right?

99
00:06:03.634 --> 00:06:07.937
但是我们用装订架从我们的档案中
But we used a bind mount to mount
basically a portal from our file

100
00:06:07.937 --> 00:06:10.785
并将其放入 nginx中
system here and putting that into nginx.

101
00:06:13.225 --> 00:06:15.663
所以我们会做更多的例子
So, we'll do more examples of this, but

102
00:06:15.663 --> 00:06:18.391
就像绑定安装的基础
that's like the base of
what bind mounts are.

103
00:06:18.391 --> 00:06:22.574
所以这直接从我的 Mac 电脑里装进了这个容器。
So this is really directly out of my Mac
to serve this up into the container.

104
00:06:24.740 --> 00:06:25.319
有道理吗
Does it make sense?

105
00:06:25.319 --> 00:06:27.350
>> 构建文件夹不在容器中，
&gt;&gt; The build folder is
not in the container,

106
00:06:27.350 --> 00:06:31.531
就像普通的文件夹一样，而容器实际上是 nginx。
it's just sitting like regular folder,
and then the container's actually nginx.

107
00:06:31.531 --> 00:06:34.139
就像，好吧，我去拿那个静态文件夹，我要去做。
It's like, okay, I'm gonna go grab that
static folder, I'm gonna serve it.

108
00:06:34.139 --> 00:06:38.882
>> Right， cutz I 基本上是在我的 Mac 和容器内部
&gt;&gt; Right, cuz I basically tunneled between
my Mac and the inside of the container.

109
00:06:38.882 --> 00:06:40.367
>> 没有涉及 Docker 文件。
&gt;&gt; There's no Docker file involved.

110
00:06:40.367 --> 00:06:44.045
>> 没有其他 Docker 文件涉及，正确，是的，我们只是
&gt;&gt; There's no additional Docker file
involved, correct, yeah, we're just

111
00:06:44.045 --> 00:06:47.564
直接在 Docker 集线器上运行 nginx 容器时不进行任何更改。
running the nginx container directly
off the Docker hub with no changes.

112
00:06:50.276 --> 00:06:51.091
魔术
Magic.

113
00:06:51.091 --> 00:06:53.091
所以这才是束缚装的作用
So that's what bind
mounts can be useful for

114
00:06:53.091 --> 00:06:55.048
我们能装到那样的东西对吧
is we can mount in stuff like that, right?

115
00:06:58.808 --> 00:07:01.177
现在，我是否要在生产中做到这一点还是要构建自己的容器?
Now, would I do this in production
versus building my own container?

116
00:07:01.177 --> 00:07:04.461
不我还是要建一个集装箱因为如果我建那个集装箱，
No, I would still build a container
because if I build that container,

117
00:07:04.461 --> 00:07:07.110
完全是自我控制的我可以把它扔在任何地方
it's totally self contained,
I can throw it anywhere.

118
00:07:07.110 --> 00:07:09.170
我能把它放在 Azure 上我可以放在 AWS上
I can put it on Azure,
I can put it on AWS,

119
00:07:09.170 --> 00:07:11.709
我可以说执行那个集装箱
I can say just execute that container.

120
00:07:11.709 --> 00:07:14.963
我不需要再多设置它只会运行容器
I don't have to set it up any more than
that, it just runs the container and

121
00:07:14.963 --> 00:07:16.021
都是有用的对吧
it just works, right?

122
00:07:16.021 --> 00:07:20.175
但如果我能做到这一点我就得明白了
Whereas if I try and accomplish this, I
have to like, okay, well, bind mount this,

123
00:07:20.175 --> 00:07:22.944
这就是这里你要从这个地方读
this, this is here and
you have to read from this place and

124
00:07:22.944 --> 00:07:24.295
一堆类似的东西
a bunch of stuff like that.

125
00:07:24.295 --> 00:07:28.305
用我们以前的术语来说更有一点雪
It's a bit more snowflaky for that,
to use our previous terminology.

126
00:07:30.901 --> 00:07:35.002
所以，这确实是有道理的，这就能理解约束卷在做什么，对吗 ?
So, does that makes sense, that makes
sense what bind volumes are doing, right?

127
00:07:37.658 --> 00:07:41.497
因此，这对于像开发环境这样的东西来说是非常有用的。
So again, this is quite useful for
things like development environments.

128
00:07:45.042 --> 00:07:50.682
那是我最后要说的
And that was the last
thing I was gonna mention,

129
00:07:50.682 --> 00:07:57.600
您可以将该文件安装到 etsy， nginx和nginx.conf。
is you can mount that file to etsy,
nginx, nginx.conf.

130
00:07:57.600 --> 00:08:00.880
如果要修改配置，那么可以使用另一个绑定安装
If you wanna modify the configuration,
you could use another bind mount

131
00:08:00.880 --> 00:08:04.240
修改 nginx 的配置，这将完全正常工作。
to modify the configuration of nginx and
that would totally work as well.

132
00:08:05.939 --> 00:08:09.007
对于操作系统，就像容器一样，它无法分辨
To the operating system, like to the
container, it cannot tell the difference

133
00:08:09.007 --> 00:08:11.264
在绑定程序和普通文件之间有问题吧
between a bind mount and
just normal files there, right?

134
00:08:11.264 --> 00:08:15.745
它只显示在那个容器上，就像它通常安装在那个文件中一样
It just shows up to that container as if
it was normally mounted into that file

135
00:08:15.745 --> 00:08:17.636
系统很酷
system, which is pretty cool.

136
00:08:23.488 --> 00:08:27.165
所以我想，你们中的很多人已经开始了新的发展工作
So again, I imagine many of you have
started at new development jobs and

137
00:08:27.165 --> 00:08:31.269
当你第一步走的时候他们会给你看一个可能
when you walk in the first thing they do
is they hand you a read me that's probably

138
00:08:31.269 --> 00:08:33.254
大约 6 个月的时间对吧
about six months out of date, right?

139
00:08:33.254 --> 00:08:34.225
然后你就得走了
And then you have to go and

140
00:08:34.225 --> 00:08:37.510
了解如何逐步建立这一发展环境，
figure out how to set up this development
environment step by step and things break,

141
00:08:37.510 --> 00:08:39.884
你得去问高级开发人员，我该怎么做呢 ?
and you have to go ask the senior
developer, how do I do this?

142
00:08:39.884 --> 00:08:41.537
就像这样做对吧
It's like, fine, do this, right?

143
00:08:41.537 --> 00:08:44.289
或者没人知道，那是更糟的事情，对吧 ?
Or no one knows,
that's the even worse thing, right?

144
00:08:44.289 --> 00:08:47.202
我去过那里我想你们很多人都在那儿
I've been there,
I imagine many of you have been there.

145
00:08:47.202 --> 00:08:51.094
这就是捆绑架和容器可以聚集在一起的地方
So that's where bind mounts and
containers can come together and

146
00:08:51.094 --> 00:08:52.942
对你很有用吧
be very useful to you, right?

147
00:08:52.942 --> 00:08:55.259
因为他们可以给你一个容器
Because they can just hand
you a container, so like,

148
00:08:55.259 --> 00:08:58.206
在此，此容器具有您需要启动的所有内容。
here, this container has everything
that you need to get started.

149
00:08:58.206 --> 00:09:03.065
只需将代码绑定到该特定区域，例如运行容器，以及
Just bind mount your code into this
particular area, say run container, and

150
00:09:03.065 --> 00:09:08.386
你有一个已经为你建立的这个发展环境。
you have this development environment that
someone else has already set up for you.

151
00:09:08.386 --> 00:09:10.567
然后你就可以开始编解码了
And you can just start coding away and
it works on day one.

152
00:09:10.567 --> 00:09:14.846
这就是发展环境对容器的承诺。
That's kinda the promise of development
environments with containers.

153
00:09:14.846 --> 00:09:18.159
不是下一节，而是我们教你如何去做的。
And, not next section, but the section
after that we'll show you how to do that.
