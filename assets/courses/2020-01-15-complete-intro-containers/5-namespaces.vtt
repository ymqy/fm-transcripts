WEBVTT

1
00:00:00.270 --> 00:00:04.799
所以我们要进入下一节，就是命名空间，对。
So we're gonna go on to the next section
now, which is namespaces, right.

2
00:00:04.799 --> 00:00:07.200
到目前为止我们一直在担心文件系统
So far we've just been worrying
about the file system, but

3
00:00:07.200 --> 00:00:08.689
我们还没担心其他事情对吧
we haven't been worrying
about other things, right?

4
00:00:08.689 --> 00:00:13.279
所以如果我有两个 chroot 的环境
So if I have two chroot'd environments
next to each other, right,

5
00:00:13.279 --> 00:00:16.230
他们其实还能看到对方的过程，对吧 ?
they can actually still see
each other's processes, right?

6
00:00:16.230 --> 00:00:19.449
所以如果在一个 chroot的环境里，我说，对，
So if inside of one chroot'd environment,
I say ps, right,

7
00:00:19.449 --> 00:00:21.890
这就是你我能在这里看到的
which is how you I can
actually see that right here.

8
00:00:23.239 --> 00:00:26.519
这说明我有这个跑步和这个跑步，对吗 ?
This shows me that I have this running and
this running, right?

9
00:00:26.519 --> 00:00:29.390
这是在任何特定时间运行的两个进程，对吗 ?
These are the two processes
running at any given time, right?

10
00:00:29.390 --> 00:00:31.280
所以如果我在每个树根的环境里都这样做
So if I do this within each
chroot'd environments,

11
00:00:31.280 --> 00:00:33.390
假设他们都有必需品图书馆
assuming that they both had all
the necessaries libraries and

12
00:00:33.390 --> 00:00:37.030
都能看到对方的过程，对吧 ?
all that kind of stuff, they can
see each other's processes, right?

13
00:00:37.030 --> 00:00:41.469
那么再次，如果我是 A 公司， B 公司也在里面，
So again, if I'm Company A, and
Company B is also running in there,

14
00:00:41.469 --> 00:00:42.229
A 公司可以说
Company A can just say.

15
00:00:42.229 --> 00:00:43.200
你知道吗 ?
You know what?

16
00:00:43.200 --> 00:00:44.979
杀了他们的网络服务器对吧
Kill their web server, right?

17
00:00:44.979 --> 00:00:47.600
因为他们可以看到对方的过程，对吗 ?
Because they can see each
other's processes, right?

18
00:00:47.600 --> 00:00:49.179
好像是有问题的吧
Seems like it would be problematic, right?

19
00:00:50.229 --> 00:00:51.759
这就是名称空间。
So that's what namespaces are.

20
00:00:51.759 --> 00:00:54.630
名称空间是这些的概念
Namespaces are these the idea of these

21
00:00:54.630 --> 00:00:58.820
我们可以限制每一个 Linux 的不同层面
various different facets of Linux that we
can limit each one of these particular,

22
00:01:00.520 --> 00:01:03.554
支持这些监狱进程以写入或使用这些容器环境。
prop these jails processes to write or
these container environments.

23
00:01:04.810 --> 00:01:08.659
所以我可以说，哎，你只能看到自己的过程，自己的过程
So I can say, hey, you can only see your
own processes and you get your own process

24
00:01:08.659 --> 00:01:12.680
还有你自己的网络层，你不能和别人一起乱搞。
IDs, and you get your own networking layer
and you can't mess with anyone else's.

25
00:01:12.680 --> 00:01:14.689
你只能把自己的环境弄得一团糟
You can only mess with
your own environment.

26
00:01:14.689 --> 00:01:23.156
所以我要做一些我要讲的故事 -f 我的新根或秘书。
So I'm going to do something I'm gonna
say tale -f my new root or secret.txt.

27
00:01:23.156 --> 00:01:24.385
所以这事要做什么
So what this is gonna do,

28
00:01:24.385 --> 00:01:27.444
现在就要开始一个漫长的过程了吧
this is gonna start a long
running process right now, right?

29
00:01:27.444 --> 00:01:30.549
所以它只是在运行这个尾巴
So it's just running this tail-secret.txt,

30
00:01:30.549 --> 00:01:35.102
这会给这个带来什么东西，它就会开始显现。
what this does is anything added to this,
it would start showing that.

31
00:01:35.102 --> 00:01:36.698
但我只是为了给你看看
But I'm just doing this to show you,

32
00:01:36.698 --> 00:01:40.039
如果事情只是漫长的过程的话会发生什么
what happens if something is
just a long running process.

33
00:01:40.039 --> 00:01:46.120
我要开另一个空壳
I'm gonna open another shell here.

34
00:01:47.140 --> 00:01:52.270
我将连接到同一个 Docker 环境。
And I'm going to connect to
that same Docker environment.

35
00:01:52.270 --> 00:01:57.909
我要说 Docker exec -it， Docker -host bash。
So I'm going to say Docker exec -it,
Docker -host bash.

36
00:01:57.909 --> 00:02:01.120
这将在同一容器中打开另一个 shell 。
This is going to open another
shell in the same container.

37
00:02:03.319 --> 00:02:08.090
好了，现在 1 和 2 都连接到同一个容器。
Right, so now 1 and 2 here are both
connected to the same container.

38
00:02:08.090 --> 00:02:09.669
有道理吗
Does that make sense?

39
00:02:09.669 --> 00:02:17.430
所以如果我说的是 ps ，你可以看到，它的运行也一样。
So if I say ps here, you can see,
That it has the same things running.

40
00:02:19.319 --> 00:02:21.030
好吧我要做的是 ps
Right, cuz I have to do ps aux.

41
00:02:21.030 --> 00:02:26.879
你可以看到它有尾巴 -f，对吧 ?
So you can see here it has tail -f, right?

42
00:02:26.879 --> 00:02:29.800
所以为了看这个，我得要求更多的东西，对吗 ?
So in order to see that,
I had to ask for more things, right?

43
00:02:29.800 --> 00:02:31.340
这就是你的工作
That's what the aux does.

44
00:02:32.979 --> 00:02:33.990
你可以在这里看到
So you can see here,

45
00:02:33.990 --> 00:02:39.560
我有一个 PID 103 ，它是另一个过程中运行的尾巴。
I had this PID 103 which is the tail
that's running in the other process.

46
00:02:39.560 --> 00:02:47.058
所以，如果我说，码头工人会杀了人，或者不去码头，对不起，杀死 103人。
So if I say, docker kill, or
not docker, sorry, kill 103.

47
00:02:47.058 --> 00:02:50.990
现在，如果我回到这里，注意到这个停止了，对吗 ?
Now if I go back over here,
notice that this stopped, right?

48
00:02:50.990 --> 00:02:52.479
上面说是终止的对吧
It says, Terminated, right?

49
00:02:52.479 --> 00:02:53.689
那是因为其他的
That's because from the other

50
00:02:56.020 --> 00:02:58.650
我刚说过要杀死那个程序对吧
connected shell I just said
kill that process, right?

51
00:02:58.650 --> 00:03:00.919
这就是我们想要防止的问题，对吧 ?
So this is the issue that
we want to prevent, right?

52
00:03:00.919 --> 00:03:02.699
我们想防止人们彼此之间发生这种事。
We want to prevent people from
doing this to each other.

53
00:03:03.969 --> 00:03:06.080
这就是名称空间让我们可以做的事情，对吗 ?
And so that's what namespaces
allow us to do, right?

54
00:03:06.080 --> 00:03:08.292
所以，如果我有两个不同的过程。
So if I have these two
different processes.

55
00:03:08.292 --> 00:03:13.764
我可以说，哎，这个你看不出这里发生了什么，反之亦然
I can say, hey, this one you can't see
what's happening over here and vice versa

56
00:03:13.764 --> 00:03:19.579
我们会用一个叫它的环境来做对吧
and we're gonna do that with a environment
called, yeah, with namespaces, right?

57
00:03:19.579 --> 00:03:26.252
这就是我们要做的我们要用一个叫不分享的命令
That's what we're gonna do and
we're gonna use a command called unshare.

58
00:03:26.252 --> 00:03:33.030
好了，所以我就在同一个容器里，我的新根在这里。
All right, so So I'm here in my same
container, and I have my new root here.

59
00:03:33.030 --> 00:03:35.180
我要创造更好的根
I'm actually going to
create a better root,

60
00:03:35.180 --> 00:03:36.800
我要教你怎么做
and I'm gonna show you how to do this.

61
00:03:36.800 --> 00:03:40.579
所以我想让你做的第一件事就是正确的更新。
So the first thing I want you
to do is say, apt-get update.

62
00:03:42.189 --> 00:03:46.500
这将转至并更新您可以下载的软件包的列表。
This is gonna go and update your list
of packages that you can download.

63
00:03:46.500 --> 00:03:49.855
这应该可以，你可以看到它会下载 11 兆字节。
This should take, you can see
it's gonna download 11 megabytes.

64
00:03:55.401 --> 00:03:58.449
然后就这样了
And that did that.

65
00:03:58.449 --> 00:04:03.304
我们会说很恰当的安装
And we're going to say apt-get install

66
00:04:03.304 --> 00:04:09.199
我和你的人在我的工作中
deboostrap and I was, I debootstrap

67
00:04:10.469 --> 00:04:14.705
TST 总是把我搞上去
that TST always messes me up, -y.

68
00:04:18.939 --> 00:04:20.899
又这个小的，下载了几个工具
And again this little,
download a couple of tools so

69
00:04:20.899 --> 00:04:23.420
我们可以用一个叫 debootstrap 的学校而不是去
that we can use a school called
debootstrap instead of having to go and

70
00:04:23.420 --> 00:04:25.899
把所有这些都复制了
hand copy all of these various different.

71
00:04:25.899 --> 00:04:32.209
它会下载一些东西这些不同的工具
It's gonna download a few things,
all these various different tools,

72
00:04:32.209 --> 00:04:35.590
一到一看他们的李斯就能得到正确的东西
one by one and looking at their
libs to get the right things.

73
00:04:35.590 --> 00:04:38.519
我要给你演示如何使用一个叫 DBootstrap 的工具
I'm going to show you how to use a tool
called DBootstrap that's just gonna set

74
00:04:38.519 --> 00:04:42.369
全新的完全有效的更改可读环境。
up an entirely new,
totally valid change readable environment.

75
00:04:43.800 --> 00:04:49.613
既然你下载了 DBootstrap 我们会说
So now that you've downloaded DBootstrap,
we're gonna say, dbootstrap,

76
00:04:51.327 --> 00:04:57.843
--变体，对等 ( minbase )
--variant, Equals minbase which is

77
00:04:57.843 --> 00:05:03.485
只下载你最不需要的工具
gonna download just the, the most minimal
amount of tools that you need possible.

78
00:05:03.485 --> 00:05:07.418
你可以告诉你 Ubuntu 或 devant 为您下载的是什么。
You can tell what kind of you Ubuntu or
deviant to download for you.

79
00:05:07.418 --> 00:05:10.788
我要说仿生，因为这就是我们使用的 18.04。
I'm gonna say bionic because that's
what we've been using 18.04.

80
00:05:10.788 --> 00:05:15.350
但你可以说在这里伸展它会工作伸展是 Debian
But you can probably say stretch here,
and it would work, stretch is Debian,

81
00:05:15.350 --> 00:05:19.310
不是 Ubuntu， Ubuntu 基于 Debian ( 如果您不知道 ) 。
not Ubuntu, Ubuntu is based on
Debian if you're not aware of that.

82
00:05:20.930 --> 00:05:27.310
好吧我要把它做得更好一点你也知道
Okay, and I'm gonna put that into slash
better root and again just so you know

83
00:05:27.310 --> 00:05:30.439
这将会有大约 150 兆字节的下载值，这样就可以知道了。
this is gonna do about 150 megabytes worth
of download so just be aware of that.

84
00:05:30.439 --> 00:05:32.959
如果那是你的事你就可以看
If that's a thing for you,
then you can just watch and

85
00:05:32.959 --> 00:05:36.430
你会得到大部分的而不必亲自去做
you'll get most of this without
having to do this yourself.

86
00:05:36.430 --> 00:05:38.290
所以我要跑了
So I'm going to run that.

87
00:05:38.290 --> 00:05:42.480
这可能要考虑一下你的网络有多快
This is gonna take probably about,
depending on how fast your Internet is,

88
00:05:42.480 --> 00:05:45.221
大概三到五分钟吧
up to three to five minutes, maybe?

89
00:05:45.221 --> 00:05:48.779
希望因为我们的网络很快
Hopefully, since we have
pretty fast Internet here,

90
00:05:48.779 --> 00:05:49.920
这只需要一分钟
this should only take a minute.

91
00:05:51.069 --> 00:05:55.220
但实际上这会给你做些什么
But what this is actually gonna go do for
you is it's going to get a bare minimum

92
00:05:55.220 --> 00:06:01.089
您需要运行基于 Debian 的 Ubuntu的文件系统。
set of a file system that you need
to run a Debian based Ubuntu.

93
00:06:01.089 --> 00:06:04.170
所以， Bootstrap 实际上是 Debian 引导程序。
So DBootstrap is actually
Debian bootstrap.

94
00:06:04.170 --> 00:06:08.064
所以当他们为 Debian 和 Ubuntu 建造容器时
So when they're building containers for
Debian and for Ubuntu,

95
00:06:08.064 --> 00:06:12.040
他们实际上是用这个工具来引导一个全新的环境。
they actually use this tool to
bootstrap a brand new environment.

96
00:06:12.040 --> 00:06:16.550
它的意思是你可以直接把它直接插入其中。
It and it's done with the idea that
you can chroot directly into it.

97
00:06:16.550 --> 00:06:19.329
所以他们实际上是用这个来建造 Ubuntu 之类的东西。
So they actually use this to like
build Ubuntu and stuff like that.

98
00:06:19.329 --> 00:06:23.350
所以我们是为了自己的目的而合作
So we're kind of co-opting it for
own nefarious purposes.

99
00:06:24.449 --> 00:06:27.889
所以现在这个是 bootstrap， dbootstrap，对吧 ?
So now this is finished bootstrapping,
dbootstrapping, right?

100
00:06:27.889 --> 00:06:32.300
所以如果我有更好的根
So if I go into better root.

101
00:06:32.300 --> 00:06:37.360
你可以在这里看到，基本上是我在这里看到的一切，对吧 ?
You can see here, it's got basically
everything that I saw up here, right?

102
00:06:37.360 --> 00:06:41.449
它有一个 tmp， var， usr， sys， srv， run，所有这些东西，对吗 ?
It's got a tmp, var, usr, sys, srv,
run, all that kind of stuff, right?

103
00:06:44.560 --> 00:06:50.560
所以现在我可以说改变路线点在这条更好的路线上。
So now I can say change route dot right
to be inside of this better route dash.

104
00:06:50.560 --> 00:06:53.370
你可以看到一切都在这里
And you can see here it
everything works now

105
00:06:53.370 --> 00:06:55.750
因为它有各种不同的工具。
much better because it has all
of the various different tools.

106
00:06:55.750 --> 00:06:59.110
所以我看着里面有 bin，你可以看到我有点，
So I look inside have bin,
you can see I have quite a bit,

107
00:06:59.110 --> 00:07:01.500
我能用得更多的工具
quite a bit more tools
that I can use right.

108
00:07:01.500 --> 00:07:05.350
其实我内心的变化就更难看出来
In fact it's kind of even hard to tell the
difference of am I inside of the change

109
00:07:05.350 --> 00:07:07.430
在正常环境中的根环境还是我
root environment or
am I inside the normal environment?

110
00:07:07.430 --> 00:07:07.932
很难看出来
It's hard to tell.

111
00:07:10.223 --> 00:07:11.345
好的。
Okay.

112
00:07:15.853 --> 00:07:19.360
所以现在我可以摆脱这一点，回到正常的状态。
So now I can get out of this,
and I'm back into the normal one.

113
00:07:21.360 --> 00:07:24.100
现在我们要做个叫不分享的事对吧
And now, we're gonna do
something called unshare, right?

114
00:07:24.100 --> 00:07:25.610
所以我要说不分享
So I'm gonna say unshare.

115
00:07:27.149 --> 00:07:29.870
在这里我要告诉它所有东西都不能分享
And here I have to tell it
everything to unshare from this

116
00:07:29.870 --> 00:07:31.310
我正在创作的新过程
new process I'm creating right.

117
00:07:31.310 --> 00:07:35.829
我是说不共享网络不共享文件系统
So I'm saying unshare the network,
unshare the file system,

118
00:07:35.829 --> 00:07:40.699
与流程管理系统正确的 UTF 不共享吗 ?
unshare the UTF which is like
the the process managing system right?

119
00:07:40.699 --> 00:07:45.189
所以我要说不共享的破折号安装，所以不共享所有安装。
So I'm gonna say unshare dash dash mount,
so unshare all the mounts.

120
00:07:45.189 --> 00:07:51.750
作为进程 IPC 的 UTS ，我不记得当时是什么。
The UTS which is the processes IPC, which
I cannot remember what is it at the time.

121
00:07:51.750 --> 00:07:56.141
网络，是进程标识的 PID ，
The network,
the PIDs which is the process IDs,

122
00:07:56.141 --> 00:07:59.463
我又不记得了
fork which again I don't remember,

123
00:07:59.463 --> 00:08:04.300
用户喜欢所有用户部件，映射 root 用户。
users like all the users parts,
the map root-user.

124
00:08:06.391 --> 00:08:10.680
好的，然后你会告诉它如何用那个不共享的环境来运行。
Okay, and then you're gonna tell it what
to run with that unshared environment.

125
00:08:10.680 --> 00:08:17.660
所以我想说我想在树根里这么做
So I'm gonna say, run chroot, and
I wanna do it in /better-root,

126
00:08:17.660 --> 00:08:22.629
我要你去跑巴什
and I want you to run bash, right.

127
00:08:22.629 --> 00:08:26.500
所以这个树根部分，应该是你熟悉的。
So this chroot part,
that should look familiar to you.

128
00:08:26.500 --> 00:08:30.300
这正是我们以前所做的但现在我们只是在增加
That's exactly what we were doing before,
but now we're just adding unshare,

129
00:08:30.300 --> 00:08:32.320
[INAUDIBLE] 取消共享所有这些名称空间，对吗 ?
[INAUDIBLE] unshare all these name spaces,
right?

130
00:08:34.440 --> 00:08:39.559
所以我现在就在这个，对，如果我看的是 ps ，它会说，
So now I'm in this, right, and
if I look at ps aux, it's gonna say,

131
00:08:39.559 --> 00:08:42.820
hey，您需要先安装流程系统。
hey, you need to mount
the process system first.

132
00:08:42.820 --> 00:08:43.529
所以说吧
So go ahead and

133
00:08:43.529 --> 00:08:47.165
在你的树根环境里和我一起运行这些命令。
run these commands with me as well
inside of your chroot'd environment.

134
00:08:47.165 --> 00:08:55.710
我想说安装 -t proc none /proc ，用于进程。
I wanna say mount -t proc none /proc,
which is for processes.

135
00:08:55.710 --> 00:09:00.033
我们要再做一次
And we're gonna do it again for

136
00:09:00.033 --> 00:09:03.865
sysfs， sysfs 无/系统。
sysfs, sysfs none/sys.

137
00:09:03.865 --> 00:09:10.769
并安装 -t tmpfs 无 /tmp。
And mount -t tmpfs none /tmp.

138
00:09:10.769 --> 00:09:15.221
好吧既然我们已经这样做了我们可以说
All right, so now that we've done that,
we can say ps aux, and

139
00:09:15.221 --> 00:09:19.519
我们可以在这里看到它自己看不到，对吧 ?
we can see here that it cannot
see outside of itself, right?

140
00:09:19.519 --> 00:09:23.270
你看这个 bash，对，我们现在都是 PID 的
You look here that this bash, right, the
bash that we're in at the moment is PID

141
00:09:23.270 --> 00:09:26.320
这就是我们所期望的，对吧 ?
one, which is what we would expect, right?

142
00:09:26.320 --> 00:09:30.720
但那是在不共享的树根环境中运行的那个。
But that's the one that's running inside
of the unshared, chroot'd environment.

143
00:09:30.720 --> 00:09:32.460
这不是在外面跑的人
It's not the one running outside of it.

144
00:09:32.460 --> 00:09:35.149
事实上如果我们回到另一个壳
In fact,
if we come back to our other shell,

145
00:09:35.149 --> 00:09:37.809
如果我们说 PS 的话我们就能连接到这个了
that we've connected to
this if we say PS aux.

146
00:09:37.809 --> 00:09:40.269
我们可以看到不分享的，我们可以看到巴什，
We can see the unshare,
we can see the bash,

147
00:09:40.269 --> 00:09:44.690
我们甚至可以看到那些正在运行的东西
we can even see all that kind
of stuff running cuz we can.

148
00:09:44.690 --> 00:09:46.917
从主人的身体里我们可以看到孩子的内心
From the host,
we can see inside of the child but

149
00:09:46.917 --> 00:09:49.210
孩子自己看不到，对吧 ?
the child cannot see outside of itself,
right?

150
00:09:51.543 --> 00:09:56.355
所以让我们说如果我说的是尾巴
So let's say if I say
again did the tail fs or

151
00:09:56.355 --> 00:10:03.600
tail- F my rootsecret.txt 权限，因此现在再次运行。
tail- F my rootsecret.txt right so
now this is running again.

152
00:10:04.750 --> 00:10:09.789
如果我回到另一个环境，我说 PS aux 仍然看不到它，对吧 ?
If I go back to the other environment and
I say PS aux still can't see it, right?

153
00:10:11.659 --> 00:10:17.284
如果我说尾部 F 让我们说点文字
And if I'd say tail F,
let's just say touch text or

154
00:10:17.284 --> 00:10:21.802
text.txt 和 I 表示尾部破折号
text.txt and I said tail dash

155
00:10:21.802 --> 00:10:26.789
来这里的 F.
F.txt that come here, stop this.

156
00:10:28.250 --> 00:10:32.519
我又说了，你可以看到这个可以看到它的尾巴，因为它是
And I say ps aux again, you can see
this one can see the tail because it's

157
00:10:32.519 --> 00:10:34.720
父进程正在查看未共享的环境。
the parent process looking
into the unshared environment.

158
00:10:35.879 --> 00:10:38.159
你也可以看到这个混蛋
You can also see this bash here,

159
00:10:38.159 --> 00:10:42.364
就是在不共享的环境中运行的那个
which is the one that's running down
inside of the unshared environment.

160
00:10:42.364 --> 00:10:49.335
PID 其实是 7536对吧
It's PID is actually like, 7536, right?

161
00:10:49.335 --> 00:10:53.690
所以它确实会把这些坑映射到宿主的环境中。
So it actually does, it maps these
pits to the host environment.

162
00:10:53.690 --> 00:10:55.960
现在我要给你展示一下正确的过程吗
Now I'm showing you just processes right?

163
00:10:55.960 --> 00:10:57.100
我们实际上没有分享网络
We actually unshared the network,

164
00:10:57.100 --> 00:10:59.870
我们在这个环境中分享了很多其他的东西
we unshared a bunch of other
stuff in this environment so

165
00:10:59.870 --> 00:11:04.350
它确实是按它可以访问的名称空间来进行集装箱化的，对吧 ?
it is truly containerized in terms of
the name spaces that it can access, right?

166
00:11:04.350 --> 00:11:06.740
所以如果我想把它连接到网络上
So if I wanted this to be able to connect
to the network I would actually have to

167
00:11:06.740 --> 00:11:10.309
在此创建单独的网络并将其连接到主机网络，
create a separate network inside of here
and connect that to the host network,

168
00:11:10.309 --> 00:11:12.809
然后连接到更广的网络，对吧 ?
which then would connect to
the broader network, right?

169
00:11:12.809 --> 00:11:16.250
我不打算教你怎么做，主要是因为，我不知道怎么做。
Not going to show you how to do it, mostly
because, I'm not really sure how to do it.

170
00:11:16.250 --> 00:11:19.629
我可以弄明白但需要一段时间
I could figure it out but
it would take a while and

171
00:11:19.629 --> 00:11:22.765
这就像开车回家一样
this is kind of to drive
home the point that.

172
00:11:22.765 --> 00:11:26.370
您可以取消共享这些名称空间功能，对吗 ?
You can unshare these
namespace capabilities, right?

173
00:11:26.370 --> 00:11:32.559
所以，更改路由就像我在共享文件系统对吗 ?
So change routing is like I am
sharing a file system right?

174
00:11:32.559 --> 00:11:36.110
名称空间是有关来自这些特定进程的共享功能或
Namespace is about sharing capabilities
from these particular processes or

175
00:11:36.110 --> 00:11:39.250
控制流进入这些流程的能力，对吧 ?
controlling the capabilities that
flow into these processes, right?

176
00:11:39.250 --> 00:11:40.440
这很合理
It makes sense.

177
00:11:40.440 --> 00:11:42.960
>> And Brian，为什么需要您运行安装命令?
&gt;&gt; And Brian, why do we need
you to run the mount command?

178
00:11:42.960 --> 00:11:44.779
那是什么 然后，经常共享。
What did that do?
Do, often then shared.

179
00:11:44.779 --> 00:11:48.990
>> 所以，安装一个，这样环境就能知道
&gt;&gt; So, the mount one, so that
the environment could know like taking

180
00:11:48.990 --> 00:11:52.519
资产，流程系统和系统文件系统。
assets and the process system and
the system file system.

181
00:11:52.519 --> 00:11:54.610
它本身并不是自动完成的。
It doesn't do that
automatically by itself.

182
00:11:54.610 --> 00:11:57.500
而当你启动 Ubuntu 过程时，它会为您做这些事情。
Whereas, when you start up the Ubuntu
process, it does do that stuff for you.

183
00:11:57.500 --> 00:12:00.460
因此，您只需要将所有这些不同的功能安装到
So, you just have to like mount all
this various different capabilities to

184
00:12:00.460 --> 00:12:02.000
操作系统。
the operating system.

185
00:12:02.000 --> 00:12:04.710
告诉他这就是你找到这些东西的地方
It just tell him,
this is where you find the stuff.

186
00:12:04.710 --> 00:12:07.688
>> 通常的库会说话，索引就在那里。
&gt;&gt; Kind of the usual library so
to speak, the index just go there there.

187
00:12:07.688 --> 00:12:08.442
> > 是。
&gt;&gt; Yeah.

188
00:12:08.442 --> 00:12:09.950
你有个问题
You had a question.

189
00:12:09.950 --> 00:12:14.840
>> 因此终止进程的退出命令也会除去
&gt;&gt; So the exit command that terminates
the process, does that also get rid of

190
00:12:14.840 --> 00:12:20.509
完全创建的容器( 在您的终端退出时 ) 吗 ?
the profusely created container,
at all, when you exit on your terminal?

191
00:12:21.879 --> 00:12:24.139
> > 嗯，那如果我回去的话，让我们看看这个
&gt;&gt; Yeah, so if I went back,
let's see, to this one and

192
00:12:24.139 --> 00:12:29.309
我说出口会终止这种不共享的环境
I said exit here, this would
terminate this unshared environment.

193
00:12:29.309 --> 00:12:31.350
我们回到过去的地方对吧
And we go back to wherever it was, right?

194
00:12:31.350 --> 00:12:33.720
所以在这件案子里我只是直接从主持人的
So in this case because I'm just
doing it directly from the host,

195
00:12:33.720 --> 00:12:35.450
它会把我送回宿主
it would send me back to the host.

196
00:12:35.450 --> 00:12:39.570
但如果你和我的电脑连接我想限制你
But if you're connecting to my computer
and I want to limit you, I would just have

197
00:12:39.570 --> 00:12:44.299
如果你退出，它就会完全退出连接。
it if you exit it, it would just
exit out of the connection entirely.

198
00:12:44.299 --> 00:12:48.860
>> 将是靠后仰的命令来查看我有多少个容器 ?
&gt;&gt; Would be the housecleaning command
to see how many containers I have?

199
00:12:49.889 --> 00:12:51.710
如果我想管理他们
If I want to manage them,

200
00:12:51.710 --> 00:12:56.539
删除一些，你一般是怎么穿过他们的 ?
delete some, how do you usually
go to navigate through them?

201
00:12:56.539 --> 00:12:57.169
通常，
&gt;&gt; So typically,

202
00:12:57.169 --> 00:12:59.870
你不会像这样用手制造容器对吧
you're not gonna be creating
containers by hand like this, right?

203
00:12:59.870 --> 00:13:02.450
这是一个浪费的过程
This is a wildly wasteful process,

204
00:13:02.450 --> 00:13:07.840
这比你能做的事更有学术水平
it's more an academic exercise
than something you would ever do.

205
00:13:07.840 --> 00:13:10.389
Docker 有一堆能为你做的事对吧
Docker has a bunch of stuff that
just does that for you, right?

206
00:13:10.389 --> 00:13:11.820
有个东西说 Docker PS
So there's a thing says Docker PS, and

207
00:13:11.820 --> 00:13:14.269
我会给你们展示所有的容器
I'll show you all of
you running containers.

208
00:13:14.269 --> 00:13:15.828
这能回答你的问题吗
Does that answer your question?

209
00:13:15.828 --> 00:13:16.740
太酷了
Cool.

210
00:13:16.740 --> 00:13:20.009
我们回去再讲一个有趣的练习
Let's go back to tell just one
more fun exercise I'm telling this

211
00:13:20.009 --> 00:13:21.559
短信也一样吧
text thing as well, right?

212
00:13:23.220 --> 00:13:28.720
如果我再做 Docker ，或者不说话，查看我的所有运行过程。
And if I do Docker or not talker ps aux
again, to see all my running processes.

213
00:13:30.070 --> 00:13:34.096
你可以在这里看到我能在这里拿这个 PID
You can see here that I can actually
grab this PID right here and

214
00:13:34.096 --> 00:13:36.815
我完全可以说杀掉 7555对吧
I can totally say kill 7555, right?

215
00:13:36.815 --> 00:13:39.471
如果我回到不共享的环境里
Now if I go back over here inside
of the unshared environment,

216
00:13:39.471 --> 00:13:41.210
都被终止了对吧
it's been terminated, right?

217
00:13:41.210 --> 00:13:43.950
因此，主机仍然可以控制在子进程中发生的所有内容，但是
So the host can still control everything
that's happening in the child process, but

218
00:13:43.950 --> 00:13:47.720
孩子的过程没看出来，挺有意思的。
the child process can't see out of it,
which is kinda fun.

219
00:13:48.940 --> 00:13:51.029
我完全可以终止整个会议
And I could totally just
terminate the entire session.

220
00:13:51.029 --> 00:13:52.980
事实上，我们也要这样做，对吧 ?
In fact, let's do that as well, right?

221
00:13:52.980 --> 00:13:59.230
同样地，如果我做了 ps ，你可以看到这个是 PID 1，
Again, here if I do ps aux,
you can see this is PID 1,

222
00:13:59.230 --> 00:14:04.019
但如果我回到这里
but if I come back over here and

223
00:14:04.019 --> 00:14:08.929
我说我不知道为什么我一直想那样做
I say, I don't know why I keep
wanting to do that, docker ps aux.

224
00:14:10.669 --> 00:14:17.340
如果我来这里我说 7356 我说杀了 7356
If I come here and
I grab 7356 and I say, kill 7356.

225
00:14:17.340 --> 00:14:21.470
你会注意到如果我们回到这里就能完成整个过程
You'll notice if we come back here,
it's done, it killed the entire process,

226
00:14:21.470 --> 00:14:23.019
你可以直接杀死整个集装箱
you can actually just kill
the entire container.
