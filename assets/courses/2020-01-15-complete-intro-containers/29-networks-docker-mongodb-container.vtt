WEBVTT

1
00:00:00.360 --> 00:00:02.101
网络是一个非常深的
Networking is a very deep,

2
00:00:02.101 --> 00:00:06.586
非常深藏的知识汇集了我的表面层
very deep pool of knowledge that I
have just the surface layer of this.

3
00:00:06.586 --> 00:00:09.955
我要向大家介绍 Docker 的网络，但是
So I'm going to introduce you to
what networking in Docker is, but

4
00:00:09.955 --> 00:00:12.914
承认我们只是在挠它的表面
recognize that we're just
scratching the surface here.

5
00:00:12.914 --> 00:00:16.518
有人说他们整个工作只是在网络里工作
There are people that their entire job
is just working on networking stuff, so

6
00:00:16.518 --> 00:00:19.530
我不会假装我有那么多的知识
I'm not gonna pretend that I have
that kind of knowledge, here.

7
00:00:21.841 --> 00:00:24.559
那么让我们回到我们的 TERMINAL。
So let's come back to our TERMINAL.

8
00:00:27.207 --> 00:00:32.375
如果你说码头网络你应该看到类似的东西
If you say docker network ls,
you should see something akin to this,

9
00:00:32.375 --> 00:00:38.435
我觉得这个是 Docker 节点 - 一个是以前的 Kubernetes 项目，
I think this is docker-node-one is I
have from a previous Kubernetes project,

10
00:00:38.435 --> 00:00:41.997
但你可能看到桥，主机和空
but you probably see bridge,
host, and null,

11
00:00:41.997 --> 00:00:46.304
那就是你现在很可能看到的 3 个
those are the three you very
likely are seeing right now.

12
00:00:46.304 --> 00:00:50.954
我甚至可以说 Docker 网络是那个
I could probably even just say
docker network rm that one.

13
00:00:56.042 --> 00:00:58.173
好了现在你可以看到我只有 3 个了
Okay, so
now you can see I just have three, and

14
00:00:58.173 --> 00:01:00.490
我想你会看到类似的东西对吧
I imagine you see something akin to that,
right?

15
00:01:02.106 --> 00:01:05.631
因此 Docker 允许您进行连接，连接到缺省网桥网络，
So docker allows you to one,
connect to the default bridge network,

16
00:01:05.631 --> 00:01:10.006
这叫做 " 桥梁" 是我们要合作的
which is called bridge, right and that's
the one that we're gonna be working with,

17
00:01:10.006 --> 00:01:11.125
是网桥网络。
is bridge networks.

18
00:01:13.682 --> 00:01:16.545
这样你就可以把两个容器连接起来，对吧 ?
And then this allows you to connect
two containers to each other, right?

19
00:01:16.545 --> 00:01:20.233
所以如果我有这个特殊的微型服务需要和这个特定的
So if I have this particular microservice
needs to talk to this particular

20
00:01:20.233 --> 00:01:24.158
微服务，我可以创建一个 Docker 网络，允许两个容器
microservice, I can create a docker
network that allows the two containers to

21
00:01:24.158 --> 00:01:25.600
彼此交谈对吧
talk to each other, right?

22
00:01:25.600 --> 00:01:29.912
这里是个想法一般都不推荐你
It's kind of the idea here and
generally don't recommend that you

23
00:01:29.912 --> 00:01:34.003
使用缺省网桥网络，他们要求您创建自己的网桥。
use The default bridge network
they ask you to create your own.

24
00:01:34.003 --> 00:01:39.819
所以我们要做的就是 Docker 网络
So that's what we're gonna do
we're gonna say Docker network,

25
00:01:39.819 --> 00:01:46.162
创建 -- driver=bridge，然后可以调用任何您想要的，
create -- driver=bridge, and
then you can call whatever you want,

26
00:01:46.162 --> 00:01:50.938
但我们会打电话给我们的应用网络我很有创意
but we're gonna call ours
app net cuz I'm creative.

27
00:01:50.938 --> 00:01:53.816
所以现在如果我们说 Docker 网络 LS
So now if we say Docker network LS,

28
00:01:53.816 --> 00:01:57.998
你可以看到我们有一个应用网桥，对吧 ?
you can see here we have
an app net bridge, right?

29
00:01:57.998 --> 00:02:01.801
所以现在我们就像一个任意的网络，可以把各种容器连接起来，
So now we have like an arbitrary network
that we can connect various containers to,

30
00:02:01.801 --> 00:02:05.680
然后连接到该或网络的任何容器可以相互交谈。
and then any containers that are connected
to that or network can talk to each other.

31
00:02:10.236 --> 00:02:14.792
所以让我们把它连接起来，让我们把一个正在运行的微型或
So let's connect something to it,
let's connect a running micro or

32
00:02:14.792 --> 00:02:17.079
用于此网络的 MongoDB 服务器。
a MongoDB server to this network.

33
00:02:17.079 --> 00:02:21.572
所以 MongoDB对于那些不知道的人是一个 NoSQL 数据库
So MongoDB, for those of you that
don't know is a NoSQL database,

34
00:02:21.572 --> 00:02:27.026
这是我个人最喜欢的一个，对很多节点开发者都很熟悉，
it's one of my personal favorites,
it's familiar to a lot of node developers,

35
00:02:27.026 --> 00:02:32.503
但允许您将 JSON 与数据库交谈，并且它的非结构化性非常大。
but allows you to speak JSON to a database
and it's unstructured which is great.

36
00:02:32.503 --> 00:02:38.253
所以我要说 docker run-d --network=app-net，
So I'm gonna say docker
run-d --network=app-net,

37
00:02:38.253 --> 00:02:42.591
然后我得揭穿它的港口
then I have to expose
the port that it's on,

38
00:02:42.591 --> 00:02:46.229
就是 2701727017
which is 27017.27017,

39
00:02:46.229 --> 00:02:52.939
这是 MongoDB 的默认值，我们会给它一个数据库的名称。
that's the default MongoDB one,
we're gonna give it a name of db.

40
00:02:52.939 --> 00:02:58.155
你可以更有创意我只是懒惰的 RM
You can be more creative than that, I'm
just lazy -- RM to remove it at the end,

41
00:02:58.155 --> 00:03:02.608
我们要做傻子 3我有一个新版本的蒙古人
and we're gonna do Mongo:3,
there's a newer version of Mongo but

42
00:03:02.608 --> 00:03:06.830
每个人都坚持三个因为我有所有司机
everyone stick to three because I
have all the drivers working for

43
00:03:06.830 --> 00:03:10.837
蒙哥 3 号好吗
Mongo three as well, Okay?

44
00:03:10.837 --> 00:03:14.414
所以你应该把它从背景上开始
So you should run that and
it'll start up on the background, so

45
00:03:14.414 --> 00:03:19.003
现在如果我说博士我应该知道我有个蒙戈服务器
now if I say docker ps I should see that I
have a Mongo server that's probably still

46
00:03:19.003 --> 00:03:24.558
开始吧好吗
starting up, Okay?

47
00:03:28.961 --> 00:03:32.486
我现在要做的是启动第二个蒙戈容器
So, what I'm gonna do now is I'm
gonna start a second Mongo container

48
00:03:32.486 --> 00:03:36.495
因为 Mongos 容器中都包含了 Mongod ，而 Mongod 实际上是服务器
because the Mongos container contains
both Mongod which is actually the server

49
00:03:36.495 --> 00:03:39.813
它在后台运行，它还包含 Mongo 客户机。
that runs in the background,
it also contains the Mongo client.

50
00:03:39.813 --> 00:03:45.175
所以我要用一个容器跟另一个容器说话，这有道理吗 ?
So I'm gonna use one container to talk to
the other container, does that make sense?

51
00:03:45.175 --> 00:03:53.707
所以我们来试试，我说 docker run - it --network=app-net --rm，
So let's try it, I'm gonna say docker
run -it --network=app-net --rm,

52
00:03:53.707 --> 00:03:58.776
我们要去买蒙哥 3 号的集装箱
and we're gonna get the Mongo 3 container,
and

53
00:03:58.776 --> 00:04:05.099
我们要说的是主数据库我必须再次输入蒙古人
we're gonna say -- host db,
I have to type Mongo again.

54
00:04:05.099 --> 00:04:08.838
所以在你输入蒙古人 3 之后，我们希望它与 Mongo 客户端一起运行，对吧 ?
So after you type Mongo three, we want
it to run with the Mongo client, right?

55
00:04:08.838 --> 00:04:10.283
这是我们给它的指令
This is the command we're giving it,

56
00:04:17.038 --> 00:04:22.165
好了 docker run- it network=app net -rm， mongo 3，
Okay, so docker run- it
network=app net --rm, mongo 3,

57
00:04:22.165 --> 00:04:26.928
mongo ，实际上是说运行 mongo 客户机，对吧 ?
mongo which is actually say
run the mongo client, right?

58
00:04:26.928 --> 00:04:30.268
可以连接到它并对其运行查询的数据库客户机，对吗 ?
The database client where you can connect
to it and run queries against it, right?

59
00:04:30.268 --> 00:04:34.161
然后 --主持人数据库，对吧 ?
And then --host db, right?

60
00:04:34.161 --> 00:04:40.134
很酷的是我把这个数据库叫做 " 数据库 "
So what's cool about this is I called
this db right up here in the names,

61
00:04:40.134 --> 00:04:45.810
将把数据库的 URL 改为 localhost的 URL 而不是像 localhost一样
that's going to make the URL of db
right instead of like localhost,

62
00:04:45.810 --> 00:04:52.201
数据库会连接到网络上的另一个叫 db 的吧
it's gonna be db connects to the other
one on the network called db, right?

63
00:04:52.201 --> 00:04:53.473
有道理吗
That make sense?

64
00:04:53.473 --> 00:04:58.939
所以如果我这样做，就应该把我放到 MongoDB 里，对吧 ?
So if I run this, it should drop me
into MongoDB which is did, right?

65
00:04:58.939 --> 00:05:05.603
所以如果我说的是 DB 的，我可以看出来，
So if I say show DB's,
I can see that this that and

66
00:05:05.603 --> 00:05:09.512
我可以说用测试机好吗
I can say use tester, okay?

67
00:05:09.512 --> 00:05:15.894
然后我可以说 db.someCollection.insertOne({
So then I can say
db.someCollection.insertOne({

68
00:05:15.894 --> 00:05:24.641
x:1}) 我自己给我留下了深刻的印象，我想起了如何做到这一点。
x:1}) wow I'm impressed with myself
that I remembered how to do that.

69
00:05:24.641 --> 00:05:26.963
好了既然我说的是收藏
Okay so
now if I say like show collections,

70
00:05:26.963 --> 00:05:31.538
我在这里已经创建了一个集合，意思是，这是一个真实的数据库，
I've created a sum collection here anyway,
point being, this is a real database,

71
00:05:31.538 --> 00:05:35.423
存储在另一个 MangoDB 的容器里
it's storing stuff somewhere which
is in another MangoDB container.

72
00:05:35.423 --> 00:05:39.362
现在，我可以使用卷将 MongoDB 实例输出到卷，并且
Now, I could use volumes to have this
MongoDB instance right out to a volume and

73
00:05:39.362 --> 00:05:42.420
那么这个在运行之间也会是持续的，对吧 ?
then this would be persistent
between runs as well, right?

74
00:05:42.420 --> 00:05:46.581
现在不这样做，因为这不是重点，
Not doing that right now,
because that's not the point of this but,

75
00:05:46.581 --> 00:05:50.240
这里的重点是我在这里有个蒙哥的集装箱
the point here is that I have
this Mongo container over here,

76
00:05:50.240 --> 00:05:53.000
和那个蒙哥的集装箱谈话
talking to this Mongo
container over there.

77
00:05:53.000 --> 00:05:57.810
只是为了证明我的意思如果我说的是在另一个外壳上的码头
And just to kind of prove my point,
if I say docker ps in a different shell,

78
00:05:57.810 --> 00:06:02.774
你可以看到我这里有一个季风 3 ，这个是在 2707 上运行的，
you can see here I have one mongo 3 here,
and this is running on 2707, or

79
00:06:02.774 --> 00:06:06.444
这个比较，这个叫 db，对吧 ?
this one is rather, and
this one's called db, right?

80
00:06:06.444 --> 00:06:10.430
这实际上是运行中的数据库
That's actually the running database and

81
00:06:10.430 --> 00:06:16.973
如果我说 docker 顶级数据库就能看到它在运行 Mongod 对吧
you can see here if I say docker top db,
it's running Mongod, right?

82
00:06:16.973 --> 00:06:18.057
>> Mongod。
&gt;&gt; Mongod.

83
00:06:18.057 --> 00:06:19.119
> > 那是什么 ?
&gt;&gt; What's that?

84
00:06:19.119 --> 00:06:20.233
>> Mongod。
&gt;&gt; Mongod.

85
00:06:20.233 --> 00:06:22.011
> > Mongod 之类的
&gt;&gt; Mongod, something like that yeah.

86
00:06:23.682 --> 00:06:26.947
>> 网络相互连接，因为它们在同一网络上吗 ?
&gt;&gt; And network into each other
because they're on the same network?

87
00:06:26.947 --> 00:06:28.747
他们被允许了对吧
&gt;&gt; Yeah, they're allowed to, right?

88
00:06:28.747 --> 00:06:32.754
它们都连接到应用网络上
Cuz they're both connected to App net,
and so

89
00:06:32.754 --> 00:06:38.303
现在这个数据库里面特别提到这个数据库，
now DB inside of this one refers
to this database particularly,

90
00:06:38.303 --> 00:06:41.180
所以如果你说 ping http://db
so if you say ping http://db,

91
00:06:41.180 --> 00:06:46.973
它会在那边撞向另一个容器有道理吗
it'll hit the other container over there,
does that make sense?

92
00:06:46.973 --> 00:06:52.062
>> 因此，卷将在数据库数据库中。
&gt;&gt; So
the volumes would In the db database.

93
00:06:52.062 --> 00:06:54.997
>> 将卷连接到该卷，并将其连接到数据库
&gt;&gt; You connect the volumes
to this one yeah, to db, and

94
00:06:54.997 --> 00:06:58.069
然后您可以配置 mongo ( 其中存储数据 ) ，
then you can configure mongo
where it stores its data,

95
00:06:58.069 --> 00:07:01.430
您只需将其配置为将数据存储在卷上。
you would just configure it to
store the data on the volume.

96
00:07:04.110 --> 00:07:08.060
然后再看它起回的时候我要告诉你怎么做
And then to read it when it starts back
up, I'm showing you how to do this by

97
00:07:08.060 --> 00:07:12.547
再来一次因为我要给你展示一下如何不要用手来做，对吧 ?
hand, again, because I'm gonna show you
later how to not do this by hand, right?

98
00:07:12.547 --> 00:07:15.987
通常，您不会直接与 Docker 网络进行消息传递，
Typically you're not going to be
messing with Docker networks directly,

99
00:07:15.987 --> 00:07:19.207
你会有一些工具为你设定网络
you're gonna have tools that
are setting those networks for you, but

100
00:07:19.207 --> 00:07:22.504
我想告诉你们这里真的没有什么神秘的，你可以用手来做。
I wanna show you there's really no
mystery here, you can do it by hand.

101
00:07:22.504 --> 00:07:27.074
所以我要离开数据库了如果我说停手你可以看到 db 的
So I'm gonna leave db running, if I say
docker ps, you can see the db is still

102
00:07:27.074 --> 00:07:31.949
正在运行，现在我们将编写一个节点应用程序，用于与 Mongo 交谈。
running, now we're going to write a node
application that speaks to the Mongo.
