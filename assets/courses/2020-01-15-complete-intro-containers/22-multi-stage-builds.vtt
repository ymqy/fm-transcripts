WEBVTT

1
00:00:00.640 --> 00:00:02.029
我们怎么能让这个更小呢 ?
How can we make this even smaller?

2
00:00:03.629 --> 00:00:06.030
我能想到的第一件事是
Well, the first thing I might think is

3
00:00:08.130 --> 00:00:11.220
我只需要做些什么
what things do I only need for
just the build?

4
00:00:11.220 --> 00:00:18.329
我有点暗示了，我不需要什么时候去生产， npm，对吧 ?
And I kind of hinted there, and I don't
need when I go to production, npm, right?

5
00:00:18.329 --> 00:00:21.489
我在生产时就不需要包经理了
I actually don't need the package
manager when I'm in production.

6
00:00:21.489 --> 00:00:24.039
我要在建筑的时候才需要它对吧
I just need it when I'm building it,
right?

7
00:00:25.350 --> 00:00:30.980
同样地， npm 是那么小，它是数十兆字节 ( 如果是的话 ) 。
Again, npm is so small,
it's tens of megabytes, if that.

8
00:00:30.980 --> 00:00:33.350
不需要这样做，我只是想向你说明一点。
Don't really need to do this, I just
wanted to demonstrate a point to you.

9
00:00:34.590 --> 00:00:38.780
有时候如果你像鲁斯特或者 LLVM 之类的东西或者类似的东西
Sometimes if you're building things
like Rust or LLVM or things like that,

10
00:00:38.780 --> 00:00:40.619
这些东西都是相当大的工具链
these things are quite large tool chains.

11
00:00:40.619 --> 00:00:42.689
你不想派人去生产
And you don't wanna send
those out to production,

12
00:00:42.689 --> 00:00:44.159
cuz 会再次出现安全漏洞。
cuz there are security
vulnerabilities again.

13
00:00:45.409 --> 00:00:49.445
我要向你们展示如何做到这一点，但请不要这样做。
So I'm gonna show you the concept of how
to do this, but please don't do this for

14
00:00:49.445 --> 00:00:51.932
npm ，这根本不是个好主意。
npm, it's just not in
general not a good a idea.

15
00:00:53.801 --> 00:00:55.296
我猜是有情况的
Well, I guess there are scenarios, and

16
00:00:55.296 --> 00:00:58.479
我们会在稍后取消晚上的时候去做个好主意
we'll actually get into that later,
when eliminating npm could be a good idea.

17
00:00:58.479 --> 00:01:01.649
但是对于像这样一个节点应用程序，这不是一个大问题。
But for a node application like this,
it's not a big deal.

18
00:01:04.316 --> 00:01:06.340
所以让我们更进一步，好吧。
So let's go even further, all right.

19
00:01:06.340 --> 00:01:11.519
Docker 允许您执行称为 " 多阶段构建 " 的方法，即
So Docker allows you to do what's called
multistage builds, which is like let's

20
00:01:11.519 --> 00:01:15.629
请先构建某些内容，然后将输出复制到新容器中，然后从该容器中进行处理。
build something first, copy the output
into a new container and go from there.

21
00:01:15.629 --> 00:01:18.692
因此，我实际上可以多次构建多个容器。
So I can actually basically build
multiple containers multiple times.

22
00:01:20.858 --> 00:01:22.780
所以，让我们继续做吧。
So let's go ahead and do that.

23
00:01:22.780 --> 00:01:27.539
所以从第一个来说，因为这个第一个容器就是为了
So from the first one, because this
first container is going to be just for

24
00:01:27.539 --> 00:01:33.752
建筑东西，我就说，酷，给我点 : 12 点，对吧 ?
building stuff, I'm just gonna say,
cool, give me node : 12-stretch, right?

25
00:01:36.530 --> 00:01:40.400
我们把这些都搬到这里因为这不重要
And we'll move this all stuff down
here because it doesn't matter.

26
00:01:40.400 --> 00:01:42.240
你最好把厨房给我好吗
Hey, so you might as well give
me the kitchen sink, right?

27
00:01:42.240 --> 00:01:44.609
因为我要建一堆东西然后把这个集装箱扔了
Because I'm gonna build a bunch of stuff
then I'm gonna throw this container away.

28
00:01:45.740 --> 00:01:50.490
因此，我将创建一个名为 WORKDIR / build的目录。
So I'm gonna make a directory
called WORKDIR /build.

29
00:01:50.490 --> 00:01:53.560
所有内容都可以作为路由完成，因为它不重要，因为最终用户将
Everything can be done as route because it
doesn't matter because the end user will

30
00:01:53.560 --> 00:01:54.200
不是航线
not be route.

31
00:01:54.200 --> 00:01:55.802
所以我要说 WORKDIR / build
So I'm gonna say WORKDIR /build.

32
00:01:55.802 --> 00:01:58.731
好吧那我就说吧
Okay, and then I'm gonna say copy.

33
00:02:00.849 --> 00:02:03.319
事实上这里的东西你可以在这里做
Actually, this stuff right here,
you can totally do this down here.

34
00:02:06.689 --> 00:02:09.719
在这里，因为它可以由 root 用户拥有，这不是什么大不了的。
Here on the chown because it can be
owned by root, that's not a big deal.

35
00:02:12.569 --> 00:02:18.193
好的， RUN npm ci ，然后我们就会说
Okay, RUN npm ci and then we're gonna say,

36
00:02:18.193 --> 00:02:21.240
复制 ...，好吗 ?
copy.., all right?

37
00:02:24.329 --> 00:02:29.388
这里或下面的所有东西，都是建筑的舞台。
And so this everything above here or
below here, this is the build stage.

38
00:02:29.388 --> 00:02:30.187
>> 并复制 ..，
&gt;&gt; And copy ..,

39
00:02:30.187 --> 00:02:34.129
将此目录中的任何内容复制到同一个容器目录中。
is copy whatever is in this directory
into the same container directory.

40
00:02:34.129 --> 00:02:37.389
>> ，是的，是的，它只复制了所有东西。
&gt;&gt; Exactly, yep,
yeah it just copies everything.

41
00:02:38.969 --> 00:02:42.909
好的，然后在这里，我们要有一个运行时阶段。
Okay, and then down here,
we're gonna have a runtime stage.

42
00:02:42.909 --> 00:02:47.170
所以你要做的就是重新开始
So what you're gonna do is
gonna say FROM again, but

43
00:02:47.170 --> 00:02:49.530
我们要从一个不同的容器开始
we're gonna start with
a different container.

44
00:02:49.530 --> 00:02:56.449
从高山上来说 : 3 . 10 ，好吗 ?
So FROM alpine: 3.10, okay?

45
00:02:56.449 --> 00:03:01.979
我们将运行 APK 添加节点。
Here we're going to run APK add nodejs.

46
00:03:01.979 --> 00:03:06.050
但我们不能用晚上的时间来做我们不需要在建筑阶段
But we're not going to do it with npm cuz
we don't need that in the build stage,

47
00:03:06.050 --> 00:03:10.003
我们要去做我们的 RUN addgroup ，我们要做我们的用户节点，
we're goona do our RUN addgroup,
we're going to do our usernode,

48
00:03:10.003 --> 00:03:14.270
我们要做米克迪尔可以做 WORKDIR
we're gonna do mikdir, who can do WORKDIR.

49
00:03:14.270 --> 00:03:15.889
然后我们就不用再这样了
And then here,
we don't need to do this again,

50
00:03:15.889 --> 00:03:18.280
因为上面已经发生过了
because it's already happened above.

51
00:03:18.280 --> 00:03:19.919
事实上，我们不需要这些副本中的任何一个。
In fact,
we don't need either one of these copies.

52
00:03:22.360 --> 00:03:27.490
但我们现在要做的就是复制我们要说的是
But what we're gonna do now is we're gonna
say copy,and we're gonna say --from,

53
00:03:27.490 --> 00:03:29.569
这都是从这里来的对吧
that's what this from is right here,
right?

54
00:03:29.569 --> 00:03:33.682
我们要从 0 级开始
And we're gonna say from stage 0.

55
00:03:33.682 --> 00:03:38.212
现在你也可以拿到这些名字了，我不记得我头上的语法了，
Now you can also get these names, I don't
remember the syntax off the top my head,

56
00:03:38.212 --> 00:03:41.310
但你可以把它叫做建筑之类的
but you could call this as build or
something like that.

57
00:03:41.310 --> 00:03:42.210
>> 作为构建。
&gt;&gt; As build.

58
00:03:42.210 --> 00:03:45.353
>> 很好，大家都记得我上次有头的时候，那是一个真正的风险。
&gt;&gt; Good has everyone remember the last
time I had my head, that was a real risk.

59
00:03:45.353 --> 00:03:50.856
所以在那种情况下，你会看到来自建筑的副本，对吧。
So in that case you would see copy
from build, right., You see for

60
00:03:50.856 --> 00:03:56.168
字号也是因为数字可能有点脆
words numbers also were because
numbers that can be a bit brittle

61
00:03:56.168 --> 00:04:01.304
在多个阶段，您可以有五个阶段，对。
of multiple stages cuz you can
have like five stages, right.

62
00:04:01.304 --> 00:04:06.568
从建造开始我们会说 chown
So from build, we're gonna say --chown

63
00:04:10.745 --> 00:04:14.189
=节点 : 节点。
=node:node.

64
00:04:14.189 --> 00:04:18.990
然后我们会从你的建筑里说你的所有东西
And then we're gonna say FROM /build,
everything that you put in /build,

65
00:04:18.990 --> 00:04:22.829
把它放在这里还可以是这个工作目录
put it in here which still can
be this working directory.

66
00:04:25.329 --> 00:04:27.879
然后在这里 CMD 也一样
And then down here the CMD stays the same.

67
00:04:27.879 --> 00:04:28.540
一切都很好
Everything's all good.

68
00:04:33.620 --> 00:04:36.540
顺便说一下这些指示你知道我一直在给他们
By the way, these like instructions,
you know how I'm always putting them

69
00:04:36.540 --> 00:04:41.730
在上面的箱子里，他们其实不用上大写的，你就知道了。
in upper case, they actually don't have
to be in upper case, just so you know.

70
00:04:41.730 --> 00:04:44.230
但每个人都让他们都这么做
But literally everyone makes
them all upper case so

71
00:04:44.230 --> 00:04:46.110
这个文件更容易读读
that the file is a lot easier to read.

72
00:04:46.110 --> 00:04:49.939
所以你不需要，但总是这样做。
So you don't have to, but always do it.

73
00:04:49.939 --> 00:04:52.209
我觉得 VS 代码会改变我的状态
I actually think that VS code
will change this for me.

74
00:04:54.019 --> 00:04:56.560
不会的但这会说嘿这事真蠢别这么做
No it won't but it's gonna say hey
this is real dumb, don't do that.

75
00:04:58.180 --> 00:05:01.750
指示信息应以大写字体写，您是白痴。
Instructions should be written in
upper case letters, you idiot.

76
00:05:03.149 --> 00:05:05.240
好吧那就好了
Okay, it would still work though.

77
00:05:07.312 --> 00:05:09.899
好吧让我们看看这是否有用
All right, so let's see if this works.

78
00:05:11.459 --> 00:05:12.225
这是任何人的猜测
It's anyone's guess.

79
00:05:24.591 --> 00:05:27.348
其实更酷的是我现在要给你看的
What's actually even cooler,
which I'm now gonna show you,

80
00:05:27.348 --> 00:05:29.689
你可以在一排里建一堆集装箱
you can actually build a bunch
of containers in a row.

81
00:05:29.689 --> 00:05:32.529
所以你可以说，这是我的设备容器，这是我的建筑容器。
So you can say like, here's my dev
container, here's my build container.

82
00:05:32.529 --> 00:05:35.180
您可以将它们全部构建在 dockerfile 中，并将其全部导出
You can build them all in on dockerfile
and it'll export all of them for

83
00:05:35.180 --> 00:05:36.269
你也挺酷的
you, which is kind of cool too.

84
00:05:39.930 --> 00:05:42.966
现在，我有了我的最新版本。
So now I have this my-node-app latest.

85
00:05:42.966 --> 00:05:48.790
让我们向前看，看看我没有满地胡扯。
Let us go ahead and give it a run
to see that I am not full of crap.

86
00:05:48.790 --> 00:05:50.120
可能吧没人知道
Might be, no one ever knows.

87
00:05:52.889 --> 00:05:54.990
仍然在工作，仍然看到我们的成功。
Still working right,
still seeing our success.

88
00:05:56.149 --> 00:05:57.720
让我们继续吧
Let's go ahead and stop this.

89
00:05:59.279 --> 00:06:07.040
我必须说 Docker 会检查我的 -node-app | jq。
I must say docker inspect
my-node-app | jq.

90
00:06:07.040 --> 00:06:09.209
让我们来看一看。
And let's take a look.

91
00:06:09.209 --> 00:06:11.879
我们已降至 39 兆字节。
We are down to 39 megabytes.

92
00:06:13.810 --> 00:06:14.970
所以我们就更小了
So we got even smaller, so

93
00:06:14.970 --> 00:06:18.879
我们给自己留了 20 兆字节的东西
we saved ourselves 20 megabytes with
npm being gone, something like that.

94
00:06:23.540 --> 00:06:25.980
我是说在理论上我想你甚至可以删除包裹 JSON
I mean, in theory, I guess you
could even drop package JSON and

95
00:06:25.980 --> 00:06:30.720
软件包锁定 JSON 并保存一些额外的千字节。
package lock JSON and
save some extra kilobytes.

96
00:06:30.720 --> 00:06:32.310
太好了别这样
Good for you, don't do that.

97
00:06:33.439 --> 00:06:36.159
但是当你喜欢的时候你会明白的
But kind of get the point where you
kind of get through that like, okay,

98
00:06:36.159 --> 00:06:38.529
我在生产中不需要什么对吧
what don't I need in production, right?

99
00:06:38.529 --> 00:06:39.848
这就是我想通过你的想法
That's the idea that I
wanna get through you.

100
00:06:40.850 --> 00:06:43.980
有时，在一个目录中有多个 Docker 文件。
Sometimes you have multiple
docker files in one directory.

101
00:06:43.980 --> 00:06:47.980
一般来说，这不是真的，但它会发生，对吗 ?
In general, that's not true but
it can happen, right?

102
00:06:47.980 --> 00:06:51.279
所以，让我们说我还有一个，可能就像我的发展环境。
So let's say I had another one here
that was maybe like my dev environment.

103
00:06:51.279 --> 00:06:54.500
我将它称为 dev.dockerfile。
I would call it like dev.dockerfile.

104
00:06:55.790 --> 00:06:58.449
还有很多争论，应该是 dockerfile.dev 还是
There's also a lot of debate,
should it be dockerfile.dev or

105
00:06:58.449 --> 00:07:00.422
应该是 dev.dockerfile吗 ?
should it be dev.dockerfile?

106
00:07:00.422 --> 00:07:04.230
我将以这种方式向您展示，因为语法突出显示了工作和
I'm going to show you this way because
that way syntax highlighting works and

107
00:07:04.230 --> 00:07:06.160
我生命中的一切都是基于语法的突出显示
everything in my life is based
around syntax highlighting.

108
00:07:07.620 --> 00:07:08.850
没有它我无法发展
I can't develop without it.

109
00:07:08.850 --> 00:07:11.389
所以我们只能坚持这一点
So we're just sticking with that.

110
00:07:11.389 --> 00:07:16.247
所以就这样说吧，我不知道来自 Node 的一些很傻的东西
So let's just say this, I don't know
something really dumb FROM Node

111
00:07:16.247 --> 00:07:21.019
:latest 或类似的东西。
: latest or something like that.

112
00:07:24.430 --> 00:07:28.529
问题就变成了如何在没有的情况下
The question then becomes
how do I build this without,

113
00:07:30.050 --> 00:07:32.689
cuz 就会立即找到 Docker 文件的名称。
cuz this just immediately finds whatever
the name of the docker file is.

114
00:07:32.689 --> 00:07:35.279
所以你也可以把 F
So you can also put in-F.

115
00:07:35.279 --> 00:07:38.939
然后你就放进去了 dockerfile 那就是你说的
And then here you put in dev.dockerfile,
and that's how you pointed out a different

116
00:07:38.939 --> 00:07:42.040
Docker 文件，或者它可能类似于目录的外部或类似的内容。
docker file, or it can be like outside
of the directory or something like that.
