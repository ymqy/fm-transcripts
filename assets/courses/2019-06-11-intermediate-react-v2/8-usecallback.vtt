WEBVTT

1
00:00:00.030 --> 00:00:01.320
>> Brian Holt: 我正在显示您，请使用回调。
&gt;&gt; Brian Holt: So I was showing you,
you use callback.

2
00:00:01.320 --> 00:00:03.169
这样做的方式也相对相同。
This works relatively the same way.

3
00:00:03.169 --> 00:00:08.289
这有点不同我们在用它和一个叫
It's slightly different in that, we're
using it together with something called

4
00:00:08.289 --> 00:00:11.220
备忘录的形式与使用备忘录的方式不同
memo, right here, which is different
than use memo, by the way.

5
00:00:11.220 --> 00:00:13.140
这让他们把他们称为类似的事情
That's confusing that they call
them the similar thing, but

6
00:00:13.140 --> 00:00:15.189
把想法分开
just separate the ideas.

7
00:00:15.189 --> 00:00:19.679
如果你见过纯成分，那就是
If you've ever seen pure component,
which is a react construct for

8
00:00:19.679 --> 00:00:21.503
类的性能。
performance for classes.

9
00:00:21.503 --> 00:00:26.815
备忘录是为了履行职责，我随时在此解释。
Memo is that for functions, and
I'll explain that here momentarily.

10
00:00:29.239 --> 00:00:31.530
>> Brian Holt: 在此，我具有回调组件，并且
&gt;&gt; Brian Holt: So here,
I have the callback component, and

11
00:00:31.530 --> 00:00:35.630
我这里有一个时钟每隔一秒更新一次。
I have this clock here that's
updating every single second.

12
00:00:35.630 --> 00:00:38.259
然后我就有个时间了
And then I have a time an account.

13
00:00:38.259 --> 00:00:41.725
这是两种不同的状态。
These are two different pieces of state.

14
00:00:41.725 --> 00:00:43.969
然后我在这里产生了一个影响这个时钟的作用。
And then I have an effect here
that moves this clock up.

15
00:00:43.969 --> 00:00:46.887
就像我之前解释的那样
And just like I was explaining before,
the way the react

16
00:00:46.887 --> 00:00:50.740
工作是每一个子代一次重新运行一次它的每一个子代。
works is that a rerun orders every all
of its children every single time.

17
00:00:50.740 --> 00:00:52.960
这条路走得挺快的
Cuz that assumes that path is quite fast.

18
00:00:54.109 --> 00:00:58.630
但是如果你有一个大的斐波纳契那就不再是真的了
However, if you have a big Fibonacci,
that's no longer true.

19
00:01:00.899 --> 00:01:01.918
所以如果我在这儿
So if I get up here.

20
00:01:05.322 --> 00:01:06.799
> > Brian Holt: 所以最多 38个。
&gt;&gt; Brian Holt: So it's up to 38.

21
00:01:08.019 --> 00:01:09.810
请注意，此情况仍在推进， 1:22:18 ，但是
Notice that this is still advancing,
1:22:18, but

22
00:01:09.810 --> 00:01:13.260
请注意，最后一次重新呈现不会更改。
notice this last rerender is not changing.

23
00:01:14.310 --> 00:01:16.028
这是最后一次重新呈现的时间。
So the last time that rerendered.

24
00:01:17.519 --> 00:01:21.250
那就是那个时候，所以每次都不重新渲染。
Was that, that time, and so it's not
re-rendering this every single time.

25
00:01:21.250 --> 00:01:22.560
否则这会死去
Otherwise, this would die,

26
00:01:22.560 --> 00:01:26.789
因为它每次都在尝试计算 40 % 的斐波纳奇
because it would be trying to calculate
the Fibonacci of 40 every single time.

27
00:01:28.280 --> 00:01:30.010
这对解决这里的问题有什么意义吗
Does that make sense of
what it's solving here?

28
00:01:31.329 --> 00:01:33.129
让我们来谈谈它是如何运作的。
So let's talk about how it actually works.

29
00:01:35.109 --> 00:01:38.640
所以在这里我有一个昂贵的计算组件
So down here, I have the expensive
computation component which actually does,

30
00:01:38.640 --> 00:01:40.599
这部分组件就在那儿
this part of the component right there.

31
00:01:42.000 --> 00:01:45.770
它有一个叫做计算的函数，它有一个叫做计数的函数。
And it has a function called compute,
and it has a function called count.

32
00:01:47.469 --> 00:01:49.460
这就是通过的两个道具
So these are the two props
that are being passed into

33
00:01:49.460 --> 00:01:51.009
昂贵的计算组件
expensive computation component.

34
00:01:52.030 --> 00:01:53.831
昂贵的计算组件
Expensive computation component,

35
00:01:53.831 --> 00:01:57.152
是备忘录中的一个组成部分这就是备忘录的意思
is a memo wised component which is
what this memo means right there.

36
00:02:01.090 --> 00:02:04.993
>> Brian Holt: 备忘录的含义是，只要我的属性没有变化，
&gt;&gt; Brian Holt: What memo means is, as long
as none of my properties have changed,

37
00:02:04.993 --> 00:02:06.409
别再跟我说了
don't re-render me.

38
00:02:06.409 --> 00:02:10.199
因此，只要计算和计数相同，计算和计数。
So as long as compute and
count are the same, compute and count.

39
00:02:11.460 --> 00:02:14.120
请不要再渲染我了
Please do not re-render me.

40
00:02:14.120 --> 00:02:15.759
所以这才是能够继续下去的原因。
So that's why this is able to keep going.

41
00:02:15.759 --> 00:02:19.061
而且它还在工作，而且它说，把这个单独留下。
And it's still working, and
it's saying, leave this one alone.

42
00:02:19.061 --> 00:02:23.400
我们呼叫计算和计算
And we call compute and count right there,

43
00:02:23.400 --> 00:02:26.250
否则，这将是每一次计算一次，这将是一场灾难。
otherwise this would be computing every
single time, and it would be a disaster.

44
00:02:28.150 --> 00:02:29.319
我们这样做的方式
And the way we do that,

45
00:02:29.319 --> 00:02:34.750
我们把这个备忘录和这个叫做 " 用回调" 的东西结合使用
is we use this memo in conjunction with
this thing here called useCallback.

46
00:02:34.750 --> 00:02:38.969
useCallback 与 useMemo 几乎相同。
useCallback works almost
the same as useMemo.

47
00:02:40.479 --> 00:02:43.759
但你在这里做的是给它一个功能，而你给它的依赖性
But what it's doing here is you give it a
function, and you give it dependencies of

48
00:02:43.759 --> 00:02:46.199
您希望该函数在此情况下更新的频率，
how often you want that function
to update which in this case,

49
00:02:46.199 --> 00:02:47.949
都是一样的功能对吧
it's always the same function, right?

50
00:02:49.800 --> 00:02:52.349
所以这个斐波纳契永远都是一样的
So this Fibonacci is always
going to be the same, and

51
00:02:52.349 --> 00:02:55.539
计数为，仅在计数更改时更新。
the count is,
it only updates when count changes.

52
00:02:58.740 --> 00:03:00.659
我们本来可以这样做的我们本来可以这样做的
Now, we could have done this differently,
we could have structured this so

53
00:03:00.659 --> 00:03:02.009
这不是什么问题
this wasn't a problem.

54
00:03:02.009 --> 00:03:06.319
但注意， Fibonacci 是回调组件内部的变量。
But notice here that Fibonacci is
the variable inside of callback component.

55
00:03:07.810 --> 00:03:11.539
所以如果我把它直接改变为斐波纳奇的话
So if I change this to be
just Fibonacci directly,

56
00:03:13.090 --> 00:03:17.960
注意在这里它每次都在重新渲染
notice that this right here,
it's rerendering every single time.

57
00:03:17.960 --> 00:03:22.813
因此，如果这一情况开始成为一个大数字， >> Brian Holt: 这个
So if this starts to become a big number,
&gt;&gt; Brian Holt: This

58
00:03:22.813 --> 00:03:24.949
会让人痛苦得很快
is gonna get really painful really fast.

59
00:03:36.066 --> 00:03:40.451
> > Brian Holt: [LAUGH] 现在，它使我的浏览器实际上有点难以使用。
&gt;&gt; Brian Holt: [LAUGH] Now, it's making
my browser actually kind of hard to use.

60
00:03:40.451 --> 00:03:45.277
[ LAUGH] >> Brian Holt: 您可以看到我
[LAUGH]
&gt;&gt; Brian Holt: You can see that I

61
00:03:45.277 --> 00:03:48.099
连卷轴都画得不好
can't even scroll very well anymore.

62
00:03:48.099 --> 00:03:48.920
好了别说了
Okay, stop it.

63
00:03:51.340 --> 00:03:52.539
好吧我宁愿有个错误
Okay, I'd rather have an error.

64
00:03:54.896 --> 00:03:57.590
> > Brian Holt: [LAUGH] 好，我们开始。
&gt;&gt; Brian Holt: [LAUGH] All right,
there we go.

65
00:03:57.590 --> 00:03:59.300
我可能要在那之后刷新我的浏览器。
I might have to refresh my
browser after that one.

66
00:04:05.069 --> 00:04:08.240
因为你每次都在重新定义斐波纳契
That's because what you're redefining
Fibonacci every single time, so

67
00:04:08.240 --> 00:04:10.360
这种功能在技术上是每一次改变的
that function technically is
changing every single time.

68
00:04:10.360 --> 00:04:12.750
这是新的斐波纳契函数
It's a new Fibonacci function.

69
00:04:12.750 --> 00:04:14.280
这就是回调的用途。
So that's what use callback does.

70
00:04:14.280 --> 00:04:16.086
就像，嘿，这没变，
It's like, hey, this isn't changing,

71
00:04:16.086 --> 00:04:18.199
每次都给我同样的功能
give me back the same
function every single time.

72
00:04:21.559 --> 00:04:23.035
>> Brian Holt: 有意义吗 ?
&gt;&gt; Brian Holt: Make sense?

73
00:04:23.035 --> 00:04:24.867
好的。
Okay.

74
00:04:26.446 --> 00:04:28.194
>> Brian Holt: 再次，仅使用备忘录和
&gt;&gt; Brian Holt: Again, only use memo and

75
00:04:28.194 --> 00:04:33.000
当您实际上已存在问题时，请使用备忘录和使用回调。
use memo and use callback when you
actually already have a problem.

76
00:04:33.000 --> 00:04:34.360
不要先发制人地使用它们。
Do not preemptively use them.

77
00:04:34.360 --> 00:04:37.720
我已经看到团队在任何地方都使用预先的组件和备忘录。
I've seen teams use pre-component and
memo everywhere.

78
00:04:37.720 --> 00:04:38.389
简直一团糟
It's a mess.

79
00:04:38.389 --> 00:04:42.610
相信我这种反应 99 次是 100次
Believe me, that react,
99 times out of 100,

80
00:04:42.610 --> 00:04:45.949
从 1000 到 999 的 999 次，已足够快。
999 times out of 1000,
is fast enough as is.

81
00:04:45.949 --> 00:04:48.529
它让你的代码不太容易出错
And it makes your code less prone to bugs

82
00:04:48.529 --> 00:04:50.370
如果你不需要用这些东西的话
if you don't use those things
when you don't need them.
