WEBVTT

1
00:00:00.110 --> 00:00:03.350
>> Brian Holt: 接下来我们要做的是服务器端呈现，
&gt;&gt; Brian Holt: So the next section we're
going to do is server side rendering,

2
00:00:03.350 --> 00:00:06.530
这将使我们成为 Node.js ，我喜欢 Node.js。
which is going to get us into Node.js,
which I love Node.js.

3
00:00:06.530 --> 00:00:10.140
我的工作就是在 Azure上做 Node.js
That's literally my job is
to work on Node.js at Azure.

4
00:00:10.140 --> 00:00:15.804
所以我要尝试不覆盖 Node.js ，因为这不是 Node.js
So I'm going to try and not cover a ton
of Node.js, because this is not a Node.js

5
00:00:15.804 --> 00:00:21.243
在 Fronend Masters上，研讨会和 Node.js 内容丰富。
workshop and there's plenty of good
Node.js content on Frontend Masters.

6
00:00:21.243 --> 00:00:25.306
所以我们要尽量把这个尽量少一点
So we're gonna keep this as
bare minimum as possible.

7
00:00:25.306 --> 00:00:27.885
> > Brian Holt: 所以我们需要做一些事情来准备
&gt;&gt; Brian Holt: So there's a couple
things that we have to do to prepare for

8
00:00:27.885 --> 00:00:29.000
服务器端呈现。
server side rendering.

9
00:00:29.000 --> 00:00:31.829
我想，让我们先谈谈为什么要服务器端呈现。
And, I guess, let's talk first about
why you want to server side render.

10
00:00:33.079 --> 00:00:36.509
如果你现在去我们的应用程序然后按 " 查看来源"
If you go to our app right now and
you hit View Source,

11
00:00:39.070 --> 00:00:42.579
你可以看到这里什么都没有对吧
you can see here there's nothing here,
right?

12
00:00:42.579 --> 00:00:43.670
这里什么都没有
There's absolutely nothing here.

13
00:00:43.670 --> 00:00:48.250
因此，这意味着我们必须下载所有 JavaScript ，然后让它呈现，并且
So that means we have to download all the
JavaScript, and then have it render, and

14
00:00:48.250 --> 00:00:49.420
那就会被加载了对吧
then it'll load, right?

15
00:00:50.420 --> 00:00:53.130
如果能下载就更好了，给用户看点东西，
Wouldn't it be better if it could just
download, and show the user something, and

16
00:00:53.130 --> 00:00:55.750
然后在后台装入 JavaScript ，对吗 ?
then in the background load JavaScript,
right?

17
00:00:55.750 --> 00:00:58.040
这就是服务器端呈现的方式。
So that's what server side
render is going to do.

18
00:00:58.040 --> 00:01:01.039
它允许我们把所有申请都写在 React中
It allows us to write all of
our application in React,

19
00:01:01.039 --> 00:01:05.048
预呈现所有内容，然后向用户发送完整的标记。
pre-render everything, and
then send the user the complete markup.

20
00:01:05.048 --> 00:01:08.480
然后，当完成加载后， React 将接管该页面。
And then React will take over
the page once it's finished loading.

21
00:01:12.489 --> 00:01:14.640
所以我们需要做几件事情来做准备。
So we have to do a couple of
things to prepare for that.

22
00:01:15.650 --> 00:01:20.079
我们要做的第一件事就是我们要做一个新的文件
The first thing that we're going to do is,
we're going to make a new file called

23
00:01:20.079 --> 00:01:23.873
ClientApp.js， >> Brian Holt: And
ClientApp.js,
&gt;&gt; Brian Holt: And

24
00:01:23.873 --> 00:01:26.960
这将会是只在浏览器中运行的所有代码，对吗 ?
this is gonna be all the code that
runs only in the browser, right?

25
00:01:26.960 --> 00:01:29.819
想象如果你用谷歌分析之类的东西
So imagine if you're using
things like Google Analytics,

26
00:01:29.819 --> 00:01:31.730
Node.js 的工作对吧
that doesn't work in Node.js, right?

27
00:01:31.730 --> 00:01:33.450
我很抱歉我不知道
I'm sorry, it doesn't.

28
00:01:33.450 --> 00:01:35.370
但你可以在这里做
But you could do that here.

29
00:01:35.370 --> 00:01:41.954
所以我们会说进口反应是反应的
So here we're gonna say
import React from react,

30
00:01:41.954 --> 00:01:46.379
从反应 - dom导入呈示。
import render from react-dom.

31
00:01:46.379 --> 00:01:50.039
导入，对不起，不反应，呈现，但我们实际上是要进口水化物。
Import, I'm sorry, not react, render, but
we're actually going to import hydrate.

32
00:01:51.729 --> 00:01:55.102
从 ./app 导入应用程序。
Import app from ./app.

33
00:01:55.102 --> 00:02:00.439
然后我们就会说水合物应用
And then we're going to say hydrate App

34
00:02:00.439 --> 00:02:07.242
document.getElementById ('root'));
at document.getElementById('root'));

35
00:02:12.385 --> 00:02:16.735
> > Brian Holt: 然后你会说
&gt;&gt; Brian Holt: And then here you would say

36
00:02:16.735 --> 00:02:22.472
任何其他的浏览器
any other browser-only things.

37
00:02:22.472 --> 00:02:25.639
换句话说，这部分不会在浏览器中运行。
In other words, this part's not
gonna get run in the browser.

38
00:02:25.639 --> 00:02:27.599
因此，水合物是一种特殊的功能。
So hydrate is a special function.

39
00:02:27.599 --> 00:02:28.909
就像呈现，但是
It's like render, but

40
00:02:28.909 --> 00:02:32.784
我想说这地方已经有标记了
what it's saying is I expect there
to be markup already in this place.

41
00:02:32.784 --> 00:02:35.379
只要接管那里就好了别再渲染了对吧
Just take over what's there,
don't re render, right?

42
00:02:35.379 --> 00:02:39.180
而如果我说的是此处而不是水合物
Whereas, if I said render here
instead of hydrate it would say

43
00:02:39.180 --> 00:02:40.900
把它炸掉然后重新呈现
blow away whatever is there and
re-render it.

44
00:02:40.900 --> 00:02:42.498
就像我不在乎里面有什么对吧
Like I don't care what's in there, right?

45
00:02:43.548 --> 00:02:47.849
>> Brian Holt: 好吗 ?
&gt;&gt; Brian Holt: Okay?

46
00:02:47.849 --> 00:02:49.521
那我们就去 App.js
Then we're gonna go to App.js here.

47
00:02:49.521 --> 00:02:54.348
我将在最后删除这部分
And I'm going to delete
this part at the end, and

48
00:02:54.348 --> 00:02:58.370
我要说出口默认应用
I'm just gonna say export default App.

49
00:03:01.250 --> 00:03:06.074
现在，我可以将它导入节点，然后在节点上呈现。
And then now, I can import this
into Node and then render it there.

50
00:03:09.308 --> 00:03:12.282
> > Brian Holt: 好的，现在你要通过整个应用程序了，
&gt;&gt; Brian Holt: Okay, now you have to
go through your entire application,

51
00:03:12.282 --> 00:03:16.780
并确保初始首次呈现没有文档的引用。
and make sure on the initial first render
that there's no reference to documents.

52
00:03:16.780 --> 00:03:19.400
在这种修复中，有一个，它在模态中。
In this repo there is one,
and it's in modal.

53
00:03:20.680 --> 00:03:23.889
如何声明 document.getElementById?
Notice where it says
document.getElementById?

54
00:03:23.889 --> 00:03:27.490
如果你想在节点上做这个，它就不会感谢你了，对吧 ?
If you try to do this in node,
it's gonna say no thank you, right?

55
00:03:28.650 --> 00:03:31.670
所以我们要做的是我们要说
So what we're gonna do
instead is we're gonna say,

56
00:03:31.670 --> 00:03:34.639
我们要把这一切都转移到这里
we're just gonna move this
into the effect here.

57
00:03:37.379 --> 00:03:39.412
好吗 ?
Okay?

58
00:03:39.412 --> 00:03:41.908
这只会在效果中发生，那就好了。
Now this will only happen in the effect,
and that'll be fine.

59
00:03:43.734 --> 00:03:49.932
>> Brian Holt: 接下来我要你做的事，我们要安装两个新的东西。
&gt;&gt; Brian Holt: Next thing I want you to
do, we're going to install two new things.

60
00:03:49.932 --> 00:03:55.149
我们要说 npm 的安装
We're going to say npm install

61
00:03:55.149 --> 00:03:59.569
是用 CLI 和快递来的
babel-cli and express.

62
00:04:01.090 --> 00:04:05.473
巴贝 CLI 我们得通过巴贝尔来运行我们的雷法密码
Babel CLI, cuz we're gonna have to run
our React code through Babel, right,

63
00:04:05.473 --> 00:04:07.413
因为节点不会说 JSX。
because Node doesn't speak JSX.

64
00:04:07.413 --> 00:04:10.973
然后， Express 只是其中一个节点框架。
And then Express is just one
of the many Node frameworks.

65
00:04:10.973 --> 00:04:13.114
我们只会用它最受欢迎的那种
We're just gonna use that one
cuz it's the most popular one.

66
00:04:21.841 --> 00:04:22.843
>> Brian Holt: 好的。
&gt;&gt; Brian Holt: Okay.

67
00:04:22.843 --> 00:04:25.658
接下来我们要做的事
Next thing that we're gonna do.

68
00:04:25.658 --> 00:04:31.773
我们要走了吗
Is we're gonna go and

69
00:04:31.773 --> 00:04:35.850
内置
make inside of

70
00:04:35.850 --> 00:04:40.952
package.json。
package.json.

71
00:04:40.952 --> 00:04:42.581
我们要做个建筑
We're gonna make a build.

72
00:04:42.581 --> 00:04:46.656
所以在剧本里我们要说的是建筑
So here in scripts, we're gonna say build.

73
00:04:46.656 --> 00:04:49.409
这就是如何构建应用程序以实现生产的方法。
And this is how you build your
application for production.

74
00:04:49.409 --> 00:04:54.803
我们会说要建个包裹
We're gonna say build parcel build

75
00:04:54.803 --> 00:05:02.233
--公用 URL ./dist src/index.html。
--public-url ./dist src/index.html.

76
00:05:02.233 --> 00:05:08.052
> > Brian Holt: 所以这会告诉包裹，嘿，
&gt;&gt; Brian Holt: So
this is gonna tell parcels, hey,

77
00:05:08.052 --> 00:05:12.939
构建我的代码以进行生产。
build my code for production.

78
00:05:12.939 --> 00:05:17.410
然后这个公开的公开的部分说我要为你服务
And then this public-url part says that
I'm going to be serving everything from

79
00:05:17.410 --> 00:05:19.060
/ dist，因此请注意此问题。
/dist, so be aware of that.

80
00:05:21.207 --> 00:05:27.019
> > Brian Holt: 好的，然后在这里，我们也要开始。
&gt;&gt; Brian Holt: Okay, and then down here,
we're also gonna put in a start.

81
00:05:27.019 --> 00:05:32.983
这将会是 npm 运行的基础
And that's gonna be npm run build

82
00:05:32.983 --> 00:05:40.233
&& babel-node server/index.js.
&amp;&amp; babel-node server/index.js.

83
00:05:40.233 --> 00:05:42.024
现在我要用巴伯的方式
Now, I'm gonna use babel-node.

84
00:05:42.024 --> 00:05:44.093
通常不推荐使用此产品。
This is typically not recommended for
production use.

85
00:05:44.093 --> 00:05:47.665
但这会救我们很多人
But it's going to save
us a lot of setting up.

86
00:05:47.665 --> 00:05:52.442
通常您要执行的是预先编译您的 React 代码，以便
Typically what you would do is you'd pre
compile your React code in such a way that

87
00:05:52.442 --> 00:05:57.389
节点可以读取它，然后使用该代码以使其没有任何 JSX，对吗 ?
Node could read it, and then use that code
so that it doesn't have any JSX, right?

88
00:05:57.389 --> 00:05:59.949
但今天，这需要一段时间。
But today, that would take a while.

89
00:05:59.949 --> 00:06:01.839
这并不是真的有用的练习。
And that's not really that
useful of an exercise.

90
00:06:01.839 --> 00:06:04.430
因此，只要知道有更好的方法可以做到这一点。
So just be aware that there's
a better way to do this.

91
00:06:04.430 --> 00:06:06.629
我们要在这里做捷迳
We're just going to kind
of shortcut it here.
