WEBVTT

1
00:00:00.008 --> 00:00:04.661
>> Brian Holt: 现在我们想为搜索参数编写一些测试。
&gt;&gt; Brian Holt: Now we wanna write
some tests for search params.

2
00:00:04.661 --> 00:00:09.189
但我们在这里有点问题， iit's 搜索参数会发出 Ajax 电话。
But we have a bit of a problem here,
iIt's that search params makes Ajax calls.

3
00:00:09.189 --> 00:00:14.529
你不想坐在你的测试中等待 Ajax 呼叫完成
And you don't wanna sit around in your
test waiting for Ajax calls to complete,

4
00:00:14.529 --> 00:00:17.750
你也不想在每次测试时都锤打你的 API 对吧
nor do you wanna hammer your API
every time you run the tests, right?

5
00:00:17.750 --> 00:00:19.410
那我们该怎么办
So what do we do about that?

6
00:00:19.410 --> 00:00:21.929
我其实已经写了一个假的
Well one thing,
I actually have already written a mock for

7
00:00:21.929 --> 00:00:24.589
这样我们就能用屁股了对吧
this, so we could use the mocks, right?

8
00:00:24.589 --> 00:00:25.949
但我们不会这么做的
But we're not gonna do that.

9
00:00:25.949 --> 00:00:30.056
实际上我们要给你写一个模拟的模拟自我
We're actually going to write a manual
mock ourselves just to show you

10
00:00:30.056 --> 00:00:31.038
那是怎么运作的
how that works.

11
00:00:34.143 --> 00:00:36.542
>> Brian Holt: 因此不在源中
&gt;&gt; Brian Holt: So inside of not the source

12
00:00:36.542 --> 00:00:41.140
目录， >> Brian Holt: 在
directory,
&gt;&gt; Brian Holt: Inside of

13
00:00:41.140 --> 00:00:45.869
这里的顶级目录我要去做另一个文件夹
the top level directory here,
I'm gonna make another folder.

14
00:00:45.869 --> 00:00:50.487
还有一个文件夹我们会打个电话
So another folder here and
we're gonna call

15
00:00:50.487 --> 00:00:54.741
这个 __mocks__ ，有一个，可以吗 ?
this __mocks__, with an s, okay?

16
00:00:54.741 --> 00:00:58.174
在 __mocks__ 中，我们将创建另一个文件夹
Inside of __mocks__,
we're gonna create another folder

17
00:00:58.174 --> 00:01:02.738
称为 frontendmasters， >> Brian Holt:
called frontendmasters,
&gt;&gt; Brian Holt: Which it is

18
00:01:02.738 --> 00:01:06.510
代表它在前面的主人 /宠物
going to represent that it's
at frontendmasters/pet.

19
00:01:06.510 --> 00:01:08.960
所以在前面的主人里我们要制作另一个叫宠物的文件
So inside of frontendmasters we
gonna make another file called pet.

20
00:01:10.310 --> 00:01:12.060
所以这就很重要了，对吧 ?
So it is significant what it is called,
right?

21
00:01:12.060 --> 00:01:14.719
如果我想嘲笑 Axios
If I wanted to mock Axios for an example,

22
00:01:14.719 --> 00:01:18.659
我要在 __mocks__ 称为 Axios 的内部创建一个文件夹，对吗 ?
I would make a folder inside of
__mocks__ called Axios, right?

23
00:01:18.659 --> 00:01:19.555
不是文件夹，而是文件。
Not a folder but a file.

24
00:01:22.384 --> 00:01:24.688
>> Brian Holt: 因此这很重要，这叫做宠物。
&gt;&gt; Brian Holt: So
this is important that this is called pet.

25
00:01:29.510 --> 00:01:32.829
>> Brian Holt: 因此，这将在节点内部运行。
&gt;&gt; Brian Holt: So
this is gonna be run inside of node.

26
00:01:32.829 --> 00:01:37.945
因此，我可以使用导入 [ readFileSync ]
So I can use import [ readFileSync ]

27
00:01:37.945 --> 00:01:44.409
从 "fs" 为节点核心库。
from 'fs' which is a node core library.

28
00:01:44.409 --> 00:01:48.729
我要从 " 路径" 导入路径
I'm going to import path from 'path', and

29
00:01:48.729 --> 00:01:55.229
我要从 " 反应测试库 " 中导入 [ act ] 。
I'm going to import [ act ]
from 'react-testing-library'.

30
00:01:55.229 --> 00:01:58.180
因此，路径也来自节点本身。
So path again comes from
the node itself as well.

31
00:01:58.180 --> 00:02:03.069
然后，行为来自 React 测试渲染器。
And then act comes from
the React test renderer.

32
00:02:03.069 --> 00:02:06.390
它是如何在它被重新渲染的过程中跟踪的。
It's how it actually keeps track
of when it's supposed to rerender.

33
00:02:06.390 --> 00:02:10.770
所以你要用这个动作，我们一会儿就知道了。
So you actually have to use this act
thing, we'll see that in just a second.

34
00:02:10.770 --> 00:02:13.776
然后我们就会做些模拟数据
And then here we're just
gonna make some mock data.

35
00:02:13.776 --> 00:02:18.187
所以我决定让他们以我最喜欢的名字命名
So const breeds equals, I decided to
make them named after my favorite

36
00:02:18.187 --> 00:02:22.167
狗的家里人都是比丘尼族，比雄火种。
family of dog breeds which is
the Bichon group, Bichon Frise.

37
00:02:26.875 --> 00:02:30.274
> > Brian Holt: 我们会制作其中的五个。
&gt;&gt; Brian Holt: And
we'll make five of these.

38
00:02:32.795 --> 00:02:35.562
>> Brian Holt: 因此 Bichon Flise ，另一个是
&gt;&gt; Brian Holt: So
Bichon Frise, another one is

39
00:02:35.562 --> 00:02:40.933
a Bolognese， >> Brian Holt: And
a Bolognese,
&gt;&gt; Brian Holt: And

40
00:02:40.933 --> 00:02:44.509
这是一个，让我们去做一个柯顿 - 德图勒
this is a, let's do a Coton de Tulear.

41
00:02:44.509 --> 00:02:48.724
如果你没见过这品种的狗，它们很可爱，我甚至都做不到。
If you've not seen these breed of dogs,
they're adorable, I just can't even.

42
00:02:50.985 --> 00:02:53.371
>> Brian Holt: 当然，我最喜欢的一个，因为那是我的狗，
&gt;&gt; Brian Holt: Of course, my favorite one,
because it's what my dog is,

43
00:02:53.371 --> 00:02:54.198
她是个哈瓦人
she's a Havanese.

44
00:02:54.198 --> 00:02:58.069
我们把马尔泰塞也放在这里
And we'll put Multese in here as well.

45
00:03:01.241 --> 00:03:03.259
>> Brian Holt: 好的，那是我们的一些很好的模拟数据。
&gt;&gt; Brian Holt: Okay, so
that's some good mock data for us.

46
00:03:04.659 --> 00:03:08.409
然后我们会从 API中获取一些模拟数据。
And then we're gonna get
some mock data from an API.

47
00:03:08.409 --> 00:03:16.872
所以我们要调用 cons daggos = JSON.parse (readFileSync)。
So we're gonna call cons daggos
= JSON.parse (readFileSync).

48
00:03:20.615 --> 00:03:24.872
>> Brian Holt: 导入， readFileSync 从
&gt;&gt; Brian Holt: Import that,
readFileSync from

49
00:03:24.872 --> 00:03:30.193
path.join dirname ，然后 res.json。
path.join dirname and then res.json.

50
00:03:34.974 --> 00:03:35.979
>> Brian Holt: 然后放入 toString。
&gt;&gt; Brian Holt: And then put that toString.

51
00:03:41.073 --> 00:03:43.317
>> Brian Holt: 这是一点节点魔术。
&gt;&gt; Brian Holt: So
this is a little bit of node magic.

52
00:03:43.317 --> 00:03:46.009
如果你不太了解这一点，那就好。
If you don't really understand
it that much, that's okay.

53
00:03:46.009 --> 00:03:50.840
这只是确保您从正确的目录获取文件，对吗 ?
This is just making sure that you get
the file from the right directory, right?

54
00:03:50.840 --> 00:03:54.050
这将确保在同一目录中，我们将
So this is going to make sure that inside
of the same directory, we're gonna

55
00:03:54.050 --> 00:03:58.370
有一个叫 res.json 的东西，它将从 res.json中读出来。
have something called res.json and
it's going to be reading from res.json.

56
00:03:58.370 --> 00:04:02.509
所以我要你做的，我为你做了这个 res.json 文件。
So what I want you to do,
I've made this res.json file for you.

57
00:04:02.509 --> 00:04:09.300
所以来完成--简介 - 反应 - v5，让我们把它转至测试分支。
So coming to complete-intro-to-react-v5,
let's hop over to the testing branch.

58
00:04:09.300 --> 00:04:12.919
那就跳吧在那创造
So hop on that, create there.

59
00:04:12.919 --> 00:04:18.790
然后在这个里面，里面有一个 res.json 文件。
And then inside of this, inside of mocks,
there's this res.json file.

60
00:04:18.790 --> 00:04:19.290
让我们点击这个
Let's click on that.

61
00:04:23.516 --> 00:04:25.728
> > Brian Holt: 我想我有一个， yep.
&gt;&gt; Brian Holt: I think I have a, yep.

62
00:04:25.728 --> 00:04:27.930
我也有这方面的联系。
I also have a link to this as well.

63
00:04:27.930 --> 00:04:31.572
所以如果你进了完整的反反应 - v5
So if you go into
the complete-intro-to-react-v5,

64
00:04:31.572 --> 00:04:35.286
去测试最后一个在这下面的
go down to testing,
the last one underneath this one here,

65
00:04:35.286 --> 00:04:39.399
我们有这个地方说要去复印和贴这个夹具
we have this part where it says go and
copy and paste this fixture.

66
00:04:40.620 --> 00:04:41.909
所以就这样了对吧
So it's this, right?

67
00:04:41.909 --> 00:04:42.784
所以就复制全部
So just copy all.

68
00:04:46.610 --> 00:04:50.216
>> Brian Holt: 在同一目录中创建新文件并保存该文件，
&gt;&gt; Brian Holt: Make a new file here in
the same directory and save it called,

69
00:04:50.216 --> 00:04:53.069
前面有个叫雷斯.json的人
inside of frontendmasters called res.json.

70
00:04:56.261 --> 00:05:02.500
>> Brian Holt: 正如你所看到的，它有 1100 行的 API 响应，对吗 ?
&gt;&gt; Brian Holt: And as you can see, it's
1,100 lines of API response stuff, right?

71
00:05:06.435 --> 00:05:10.031
>> Brian Holt: 现在，此处的狗只代表此文件。
&gt;&gt; Brian Holt: So now,
doggos here will represent this file.

72
00:05:10.031 --> 00:05:13.480
这条线就这么简单就能抓住那个文件
That's all that this line does,
is it just goes and grabs that file and

73
00:05:13.480 --> 00:05:15.122
把它变成一个物体好吗
parses it into an object, okay?

74
00:05:18.749 --> 00:05:21.920
> > Brian Holt: 现在我们需要做的是在这里说几件事。
&gt;&gt; Brian Holt: Now what we need to do is
we're gonna say a couple of things here.

75
00:05:21.920 --> 00:05:27.562
我们会说出口 ANIMALS = ['dog'，
We're gonna say export ANIMALS = ['dog',

76
00:05:27.562 --> 00:05:30.540
" 猫咪 " " 鸟人 "
'cat', 'bird'].

77
00:05:30.540 --> 00:05:31.860
你可以把更多的人放在这里
You can put more of them in here but for

78
00:05:31.860 --> 00:05:35.709
现在我们只把它做个简单的动物名单
now we'll just make this
a short list of animals.

79
00:05:35.709 --> 00:05:39.432
出口 const ， export const.
Export const rather, export const.

80
00:05:39.432 --> 00:05:48.009
导出 const _reeds = repds。
Export const _breeds = breeds.

81
00:05:48.009 --> 00:05:52.090
我在此强调，这只是为了进行测试。
I do underscore here just to signify
this is only meant to be for testing.

82
00:05:52.090 --> 00:05:54.137
这不是一般消费的意思。
It's not meant for general consumption.

83
00:05:54.137 --> 00:05:58.860
出口常量_do犬
And export const _dogs

84
00:05:58.860 --> 00:06:03.360
= 狗头动物。
= doggos.animals.

85
00:06:03.360 --> 00:06:06.690
所以我们测试夹具的内部
So inside of our testing fixtures,
we'll test for

86
00:06:06.690 --> 00:06:09.716
这些都是为了确保他们的匹配对吧
these to make sure that they match up,
right?

87
00:06:11.783 --> 00:06:14.480
> > Brian Holt: 接下来，我们会制作一个非常快速的模拟库。
&gt;&gt; Brian Holt: And then here, we're just
gonna make a really quick mock library.

88
00:06:16.149 --> 00:06:21.430
所以 const mock = 一个对象，我们要测试品种。
So const mock = an object,
and we're gonna test breeds.

89
00:06:22.870 --> 00:06:27.922
我们要做个 jest.fn
And we're gonna make this a jest.fn.

90
00:06:30.627 --> 00:06:33.471
> > Brian Holt: 这称为间谍功能，稍后您将检查
&gt;&gt; Brian Holt: This is called a spy
function which you're gonna check later to

91
00:06:33.471 --> 00:06:35.358
请确保已调用此函数。
make sure this function has been called.

92
00:06:36.930 --> 00:06:41.697
所以我们要给它一个实施细节
And so we're gonna give it
an implementation detail where it's just

93
00:06:41.697 --> 00:06:47.204
会说每当有人打电话给 jest.fn 的时候
gonna say, whenever someone calls jest.fn,
or calls rather mock.breeds,

94
00:06:47.204 --> 00:06:53.632
调用此函数，然后返回， >> Brian Holt: 一个对象
call this function and then return,
&gt;&gt; Brian Holt: An object

95
00:06:53.632 --> 00:06:56.680
然后再回电对吧
with a then callback, right?

96
00:06:56.680 --> 00:06:58.423
我答应过的对吧
It's promised like, right?

97
00:06:58.423 --> 00:07:05.079
这将是一个回调， >> Brian Holt: 那就是所谓的行为。
And this is gonna be a callback,
&gt;&gt; Brian Holt: That then calls act.

98
00:07:06.470 --> 00:07:10.889
这是另一个函数
That is another function that

99
00:07:10.889 --> 00:07:15.680
返回带有 doggos的回调。
returns callback with doggos.

100
00:07:15.680 --> 00:07:18.829
所以我意识到这有点复杂但
So I recognize that this is
a little convoluted here, but

101
00:07:18.829 --> 00:07:20.339
让我们先走一步好吗
let's just kinda step through it, okay?

102
00:07:20.339 --> 00:07:23.740
所以我们正在建立一个模拟的宠物图书馆，对吧 ?
So we're creating a mock library of pet,
right?

103
00:07:23.740 --> 00:07:26.060
所以我们一直在叫我们的宠物 API 客户
So we've been calling our pet API
client all over the place and

104
00:07:26.060 --> 00:07:28.240
我们正在制造一个像它一样的物体对吧
we're creating an object
that looks like it, right?

105
00:07:28.240 --> 00:07:31.550
看起来像是它的样子
Looks and acts like it.

106
00:07:31.550 --> 00:07:34.360
它有一个品种的功能，对吧 ?
It has a breeds function, right?

107
00:07:35.670 --> 00:07:39.860
所以我们在制造一种间谍功能，我们可以说，后来，
So we're making breeds a spy function that
we can say, later, make sure this was

108
00:07:39.860 --> 00:07:43.680
打电话，确定是用这些东西来的，等等。
called, make sure it was called with
these things, so on and so forth.

109
00:07:43.680 --> 00:07:47.367
它将会运行这个功能
It's going to run this
function which is then

110
00:07:47.367 --> 00:07:51.459
能返回一个类似诺言的东西对吧
going to return a promise-like object,
right?

111
00:07:51.459 --> 00:07:55.689
所以当我说承诺的时候，它是一个有功能的物体，对吧 ?
So when I say promise-like, it's an object
that has a then function on it, right?

112
00:07:55.689 --> 00:07:58.430
所以这看起来像在这里做出的承诺。
So this looks and
acts like a promise right here.

113
00:08:00.110 --> 00:08:02.228
这为自己提供了功能，对吗 ?
This has provided itself
with the function, right?

114
00:08:03.430 --> 00:08:06.600
我们得说这件事让我们做出反应
And we have to call this act
thing to let react know like,

115
00:08:06.600 --> 00:08:09.913
我更新了一些东西，去做些什么，对吧 ?
I updated something,
go do something with that, right?

116
00:08:12.846 --> 00:08:15.723
>> Brian Holt: 所以有点复杂，但这就是你的方式。
&gt;&gt; Brian Holt: So
a little convoluted but this is how you.

117
00:08:15.723 --> 00:08:18.673
这也是我不喜欢测试 UI 代码的原因
This is again probably why I don't
like testing UI code is cuz you kinda

118
00:08:18.673 --> 00:08:20.230
得把细节弄明白
have to get into the details with it.

119
00:08:21.680 --> 00:08:23.334
我们会用动物做同样的事
We're gonna do the same
thing with animals.

120
00:08:25.226 --> 00:08:28.415
>> Brian Holt: 它将是另一 jest.fn或 jest.fn。
&gt;&gt; Brian Holt: It's gonna be
another jest.fn, or jest.fn.

121
00:08:32.273 --> 00:08:36.926
>> Brian Holt: 将返回一个对象，该对象具有以下功能 :
&gt;&gt; Brian Holt: And it's going to return
an object with the then function which is

122
00:08:36.926 --> 00:08:41.662
在一个叫回叫的回叫上
going to take in a callback which is
then going to return an act which

123
00:08:41.662 --> 00:08:45.059
就会用狗带来称呼回调
is then going to call
the callback with doggos.

124
00:08:46.547 --> 00:08:48.597
这个不叫狗儿这只叫狗
Yeah, this one doesn't call doggos,
this one calls breeds.

125
00:08:51.421 --> 00:08:54.659
> > 布莱恩 - 霍尔特: 对不起，第 24 行，确定那是品种
&gt;&gt; Brian Holt: So sorry, line 24 there,
make sure that that's breeds and

126
00:08:54.659 --> 00:08:55.793
这条狗的狗
this one's doggos.

127
00:09:01.860 --> 00:09:04.879
>> Brian Holt: 好的，现在有两个功能。
&gt;&gt; Brian Holt: Okay, so
now you have two functions.

128
00:09:04.879 --> 00:09:06.419
这只会带来繁殖
This one returns breeds eventually,

129
00:09:06.419 --> 00:09:09.320
是我们在这里嘲笑的这个对吧
which is this one that we mocked up here,
this one, right?

130
00:09:10.450 --> 00:09:13.590
然后我们又有了一条狗
And then we have one that returns doggos.

131
00:09:13.590 --> 00:09:19.642
还有一件事第 24 行
And, one more thing, line 24.

132
00:09:19.642 --> 00:09:24.514
我们需要这个对象是一种繁殖的对象 :
We need this to be an object which
is breeds: breeds, like that, or

133
00:09:24.514 --> 00:09:27.421
你可以把它称为 " 品种 " 就像这样
you can just call it breeds, like this,

134
00:09:27.421 --> 00:09:33.330
因为 API的响应必须相同，否则代码将失败。
because the API's response has to look
identical or else the code's gonna fail.

135
00:09:37.121 --> 00:09:38.975
> > Brian Holt: 好的，我保证
&gt;&gt; Brian Holt: Okay, that's it, I promise.

136
00:09:38.975 --> 00:09:45.639
所以现在在下面我们可以说出口默认模型
[LAUGH] So now at the bottom here
we can say export default mock,

137
00:09:45.639 --> 00:09:49.399
但最酷的是我们最棒的时候如果它说我有个假的
but what's cool is anytime inside of
our jest if it says, I have a mock for

138
00:09:49.399 --> 00:09:53.570
这个，只要有人在 jest 里面进口前面的主人/宠物，
this, anytime that someone imports
frontendmasters/pet inside of jest,

139
00:09:53.570 --> 00:09:57.409
我要用这个代替真正的图书馆吧
I'm gonna use this instead
of the real library, right?

140
00:09:57.409 --> 00:09:59.679
所以现在我控制了这个，这很不错。
So now I have control over this,
which is good.

141
00:10:02.519 --> 00:10:05.240
>> Brian Holt: 现在您可能在想， jest 未定义。
&gt;&gt; Brian Holt: Now you might be wondering,
jest is not defined.

142
00:10:05.240 --> 00:10:08.730
这将是一个由 jest 提供给我们的全球性变量。
This is gonna be a global
variable provided to us by jest.

143
00:10:08.730 --> 00:10:13.019
如果他们进入我们的 eslint.json 文件
And we can make eslint to be okay with
that if they go into our eslint.json file

144
00:10:13.019 --> 00:10:18.465
说，哎， env，我们也有 jest。
and say, hey, env, we also have jest.

145
00:10:18.465 --> 00:10:23.220
说真的然后现在一切都好了
And just say true, and
then now everything's happy.
