WEBVTT

1
00:00:00.100 --> 00:00:01.310
>> Brian Holt: 让我们继续使用 Memo。
&gt;&gt; Brian Holt: Let's go on to useMemo.

2
00:00:03.009 --> 00:00:08.896
接下来的两个是性能优化，好的。
So the next two are performance
optimizations, okay.

3
00:00:11.914 --> 00:00:14.380
>> Brian Holt: 因此，让我们先看看这首先是如何工作的。
&gt;&gt; Brian Holt: So let's take a look
at how this works first of all.

4
00:00:15.970 --> 00:00:17.670
请注意，我有一个时钟。
Notice here I have a clock.

5
00:00:18.800 --> 00:00:21.760
而这个时钟又像其他的一样
And this clock again works exactly
like the other one up here,

6
00:00:21.760 --> 00:00:23.539
每秒钟都有进步
that it advances every second.

7
00:00:23.539 --> 00:00:26.829
此组件必须每秒重新呈现。
This component has to
re-render every single second.

8
00:00:26.829 --> 00:00:30.553
React 工作的方式，如果我重新呈示父组件，
The way that React works,
that if I re-render a parent component,

9
00:00:30.553 --> 00:00:34.969
在缺省情况下我也会把所有孩子都重新呈现
just by default, I'm gonna
re-render all the children as well.

10
00:00:34.969 --> 00:00:37.948
是一种性能优化，不用去检查
It's kind of a performance optimization
that they don't have to go check

11
00:00:37.948 --> 00:00:40.060
一切都说如果这改变了
everything, they just say,
well if this changed,

12
00:00:40.060 --> 00:00:41.950
可能在它下面的一切都变了
probably everything underneath it changed.

13
00:00:41.950 --> 00:00:46.039
他们不做额外的检查，对，因为它可能都改变了。
And they don't do all the extra checking,
right, because it probably did all change.

14
00:00:46.039 --> 00:00:49.090
而这些渲染方法一般都非常快，对吧 ?
And these render methods,
in general, are very fast, right?

15
00:00:50.270 --> 00:00:52.939
所以，总的来说，这是一件好事。
So in general,
that's a good thing for it to do.

16
00:00:52.939 --> 00:00:55.789
Cuz React 真的很擅长重新渲染。
Cuz React is really good
at re-rendering things.

17
00:00:55.789 --> 00:00:59.979
只要你写 performant 渲染方法，真的很快，好吗 ?
As long as you write performant render
methods, it's really fast, okay?

18
00:01:01.543 --> 00:01:05.944
问题在于我写了一个有意慢的函数。
The problem comes into is that I
wrote an intentionally slow function.

19
00:01:05.944 --> 00:01:09.180
你不必在意斐波纳契做什么但计算斐波纳契
You don't really have to care about what
Fibonacci does, but computing Fibonacci

20
00:01:11.219 --> 00:01:14.629
数字递归的非常重，对吧 ?
numbers recursively is very heavy, right?

21
00:01:15.700 --> 00:01:21.462
所以我想说的是这个计算
So what I want to say
here is this computation

22
00:01:21.462 --> 00:01:27.530
就在这里 fib，所以这个数字的无花果是一个非常大的操作。
right here fib, so fibonacci of
number is a very heavy operation.

23
00:01:27.530 --> 00:01:29.340
为了证明我的意思
So just to prove my point to you,

24
00:01:29.340 --> 00:01:33.340
如果我开始点击这个，第一个就不坏了。
if I start clicking this,
the first ones are not too bad.

25
00:01:33.340 --> 00:01:37.835
但一到三十左右，它就会变得非常缓慢。
But as soon as this gets to about 30,
it's going to start being really slow.

26
00:01:43.477 --> 00:01:45.328
>> Brian Holt: 对，非常慢。
&gt;&gt; Brian Holt: Right, really slow.

27
00:01:51.390 --> 00:01:55.109
>> Brian Holt: 好，这里有什么问题 ?
&gt;&gt; Brian Holt: Okay, so
what's the problem here?

28
00:01:55.109 --> 00:02:00.290
如果我有这个而且每次都是重新呈现
Well if I have this, and
this is re-rendering every single time,

29
00:02:00.290 --> 00:02:06.134
这意味着它会每一次都在计算，对吗 ?
that would mean that it would be
computing this every single time, right?

30
00:02:06.134 --> 00:02:08.129
我可能要毁了我的浏览器但会很有趣的
I'm probably gonna crash my browser,
but it'll be fun.

31
00:02:08.129 --> 00:02:08.770
我们来吧
Let's do this.

32
00:02:10.319 --> 00:02:17.550
所以如果我说 const fib = fibonacci(num)，
So if I say, const fib = fibonacci(num),

33
00:02:17.550 --> 00:02:22.306
这就意味着
that means this is going to get

34
00:02:22.306 --> 00:02:28.408
每一次计算一次，对。
computed every single time, right.

35
00:02:28.408 --> 00:02:31.568
现在，一个人的 fibonacci 非常快。
Now right now, fibonacci of one,
it's pretty fast.

36
00:02:32.978 --> 00:02:34.304
等等我已经给你展示了 " 回调"
Wait, I've shown you, useCallback.

37
00:02:34.304 --> 00:02:37.843
问题仍然相同，因为它仍使用斐波纳契数。
The point is still the same because
it still uses Fibonacci numbers.

38
00:02:42.150 --> 00:02:49.235
>> Brian Holt: 所以现在， >> Brian Holt: 因此忽略此。
&gt;&gt; Brian Holt: So right now,
&gt;&gt; Brian Holt: So ignore this.

39
00:02:49.235 --> 00:02:51.397
我们很快就会回来的
We'll come back to
useCallback in just a second.

40
00:02:53.978 --> 00:02:56.889
>> Brian Holt: 但他们都使用了斐波纳契数，所以是同一点。
&gt;&gt; Brian Holt: But they both use Fibonacci
numbers, so it's the same point.

41
00:02:56.889 --> 00:02:58.637
所以注意，这真的很缓慢。
So notice, this is really slow right now.

42
00:03:04.294 --> 00:03:08.590
>> Brian Holt: 对，现在不是重新呈现，所以一切都很好，对吧 ?
&gt;&gt; Brian Holt: Right, right now it's not
re-rendering, so everything's okay, right?

43
00:03:08.590 --> 00:03:10.560
所以它计算了它一切都很好
So it computed it and everything was fine.

44
00:03:10.560 --> 00:03:14.319
但如果我点击这个 useMemo 将其从绿色改为红色，
But if I click on this useMemo to
change this from green to red,

45
00:03:14.319 --> 00:03:17.409
它会重新计算这个
it's going to recalculate this.

46
00:03:17.409 --> 00:03:19.030
所以如果我点击这个
So if I click on this,

47
00:03:19.030 --> 00:03:24.199
我点击它，看它变红花了多久，对吧 ?
I click on it, look how long it
took that to change to red, right?

48
00:03:24.199 --> 00:03:27.000
因为它在这里重新计算斐波纳契序列对吧
Because it's recalculating
the Fibonacci sequence here, right?

49
00:03:29.439 --> 00:03:31.900
如果我们不需要每次都重新计算，岂不是很棒吗 ?
Wouldn't it be great if we didn't have
to recalculate that every single time?

50
00:03:33.449 --> 00:03:36.871
所以如果我把这个改为使用
So if I change this to be useMemo

51
00:03:36.871 --> 00:03:41.411
这里， >> Brian Holt: 我给它的功能
here,
&gt;&gt; Brian Holt: Where I give it a function

52
00:03:41.411 --> 00:03:46.560
如何重新计算此属性，然后再重新计算其依赖关系，就像使用效果一样。
of how to recalculate this and then its
dependency, just like you use effect.

53
00:03:46.560 --> 00:03:49.144
让我们把这个恢复到另一个大号
Let's get this up back to
another big number here.

54
00:03:54.872 --> 00:03:56.276
>> Brian Holt: 可能应该刚刚开始 40 或
&gt;&gt; Brian Holt: Probably should
have just started with 40 or

55
00:03:56.276 --> 00:03:57.219
那样的东西对吧
something like that, right?

56
00:03:58.579 --> 00:04:03.099
好吧这现在又大了对吧
Okay, so
this is now really big again, right?

57
00:04:03.099 --> 00:04:05.697
但是注意，我现在可以来回改变这个，没问题，
But notice, I can now change this back and
forth, no problem,

58
00:04:05.697 --> 00:04:07.914
因为它不是每次都重新计算
because it's not recalculating
every single time.

59
00:04:07.914 --> 00:04:11.770
你多久能用这个 ?
How often will you use this?.

60
00:04:11.770 --> 00:04:13.259
说实话也许永远不会吧
Honestly, maybe never, right?

61
00:04:13.259 --> 00:04:16.985
这不是一个很典型的问题，但是有钩子可以产生，对，
This is not a very typical problem,
however, with hooks it can arise, right,

62
00:04:16.985 --> 00:04:19.446
你每次都在计算东西
where you're computing
things every single time.

63
00:04:19.446 --> 00:04:21.379
这就是 useMemo 所做的事情。
So that's what useMemo does.

64
00:04:21.379 --> 00:04:24.468
你给它一个计算什么东西的功能然后给它
You give it a function of how to compute
something and then you give it its

65
00:04:24.468 --> 00:04:28.095
仅当其依赖关系已更改时，才会对其进行重新计算。
dependencies and it will only re-compute
it when its dependencies have changed.
