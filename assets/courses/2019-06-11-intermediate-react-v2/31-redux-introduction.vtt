WEBVTT

1
00:00:00.110 --> 00:00:02.629
>> Brian Holt: 这是从先前版本的
&gt;&gt; Brian Holt: This is a little bit
abbreviated from previous versions of

2
00:00:02.629 --> 00:00:04.160
我教过的雷杜克斯
Redux that I've taught.

3
00:00:04.160 --> 00:00:07.280
而这就是 Redux 越来越少的原因
And the reason being for
that is Redux is kind of becoming less and

4
00:00:07.280 --> 00:00:10.539
在 React 社区中不那么重要。
less important in the React community.

5
00:00:10.539 --> 00:00:16.910
随着环境 API 的出现，我们不再需要它了。
With the advent of solid context API,
we don't need it as much anymore.

6
00:00:16.910 --> 00:00:21.230
现在我们有了 Reducer ，我们也有很多好处，
And now that we have useReducer, we kinda
got a lot of those benefits as well,

7
00:00:21.230 --> 00:00:22.579
所以我们更需要它
so we need it even less.

8
00:00:23.699 --> 00:00:26.000
现在你在问我什么时候能用雷杜克斯
Now you're asking,
when would I ever use Redux?

9
00:00:27.179 --> 00:00:30.530
今天的答案是我可能再也不用专业的 Redux 了
The answer today is I probably won't
ever use Redux professionally again.

10
00:00:30.530 --> 00:00:34.140
我可能不会再选择再使用 Redux 了
I probably won't elect to
use Redux ever again, but

11
00:00:34.140 --> 00:00:36.259
我不是说你不该来
I'm not saying that you shouldn't.

12
00:00:36.259 --> 00:00:40.890
所以，如果它真的与你的精神模型有问题，或者类似的话。
So if it really jives with your mental
model of a problem or something like that.

13
00:00:40.890 --> 00:00:43.292
或者我稍后会遇到一个不一样的问题
Or I might later run into
a problem that's like no, man,

14
00:00:43.292 --> 00:00:44.570
我希望我能用雷杜克斯
I wish I would have used Redux.

15
00:00:44.570 --> 00:00:46.320
所以我不知道
So I don't know, but

16
00:00:46.320 --> 00:00:49.329
我现在的精神状态不好当我用 Redux的时候
I don't have a good mental image
right now of when I would use Redux.

17
00:00:50.399 --> 00:00:51.380
所以我还会继续
So the reason why I'm still gonna

18
00:00:51.380 --> 00:00:54.500
教你这是因为我想让你自己决定对吧
teach you this is because I want you
to decide that for yourself, right?

19
00:00:54.500 --> 00:00:59.460
我们要穿过所有你需要知道的 Redux
We're gonna walk through all the various
pieces of Redux that you need to know

20
00:00:59.460 --> 00:01:01.000
做出自己的决定
to make that decision for yourself.

21
00:01:01.000 --> 00:01:04.170
另外还有很多的代码库仍然存在
And the other thing is there's still
a lot of code bases out there that still

22
00:01:04.170 --> 00:01:07.769
使用 Redux ，所以您仍然需要了解它。
use Redux, and so
you still kinda need to know it.

23
00:01:07.769 --> 00:01:10.840
所以我要说的是也许我会用 Redux 来
So the one thing that I would say
that maybe I would use Redux for

24
00:01:10.840 --> 00:01:14.230
如果我有很多异步的事情马上就会发生
is if I had a lot of asynchronous
things going on at once.

25
00:01:14.230 --> 00:01:16.890
也许我得向十种不同的 API 发出请求
Maybe I had to make a request
to ten different APIs, and

26
00:01:16.890 --> 00:01:20.159
他们必须以正确的顺序回到正确的秩序
they had to be in the right order and
come back in the right order.

27
00:01:20.159 --> 00:01:23.141
第一，这听起来很困难，但是
One, that sounds like
a really hard problem, but

28
00:01:23.141 --> 00:01:28.182
Redux 在这种情况下会很有帮助的事情叫做萨加斯
Redux would actually be very helpful in
that scenario with something called Sagas,

29
00:01:28.182 --> 00:01:31.034
我今天绝对不教你
which I'm definitely
not teaching you today.

30
00:01:31.034 --> 00:01:33.359
但 Sagas 非常困难，但它们也很强大。
But Sagas are very difficult,
but they also are powerful.

31
00:01:34.520 --> 00:01:38.789
我相信史蒂夫在他的高级管理课程里教他们
I believe that Steve teaches them in
his Advanced State Management course

32
00:01:38.789 --> 00:01:39.670
在 FrontEndMasters上。
on FrontEndMasters.

33
00:01:39.670 --> 00:01:45.000
如果你想更多了解勒杜克斯看史蒂夫的课程
So if you wanna know more about Redux,
watch Steve's course.

34
00:01:45.000 --> 00:01:47.879
或者如果你想了解 React 和 Redux 的更多信息
Or if you wanna know more about React and
Redux together,

35
00:01:49.170 --> 00:01:54.140
这三个版本的版本比我今天要去的还要多
version three of this course goes a little
bit further than I wanna go today.

36
00:01:54.140 --> 00:01:57.150
所以今天我们要和雷德克斯同步了对吧
So today we're just gonna go
over synchronous Redux, right?

37
00:01:57.150 --> 00:01:59.680
我们不会去拿那些异步的东西我们甚至会去
We're not gonna go over the asynch stuff,
we're gonna even go over thunks or

38
00:01:59.680 --> 00:02:00.469
任何类似的事情
anything like that.

39
00:02:00.469 --> 00:02:02.899
我们要把雷德克斯的事交给他
We're just gonna go over what Redux is.

40
00:02:05.733 --> 00:02:08.780
>> Brian Holt: 那么，我们又如何与 Redux建立关系 ?
&gt;&gt; Brian Holt: So again,
how did we end up with Redux?

41
00:02:08.780 --> 00:02:11.849
我们没有使用上下文，所以这就更有用了。
We didn't use to have Context, so
this used to be a lot more useful.

42
00:02:11.849 --> 00:02:15.860
但现在我们有了好的背景，即使是丹 - 阿布拉莫夫，
But now that we have good context, even
Dan Abramov, the creator of Redux is like,

43
00:02:15.860 --> 00:02:17.240
我不再真正使用 Redux 了
I don't really use Redux anymore.

44
00:02:20.526 --> 00:02:24.500
>> Brian Holt: 好，那么 Redux 是什么意思 ?
&gt;&gt; Brian Holt: Okay, so what is Redux for?

45
00:02:24.500 --> 00:02:30.439
如果你记得在 < 追溯法 > 中我们谈过
Well, if you remember in the Intro
to React, we talked about

46
00:02:30.439 --> 00:02:33.840
有时在这边有个国店是很有用的，对吧 ?
sometimes it's really useful to have
a state store on the side, right?

47
00:02:33.840 --> 00:02:36.860
所以我们的主要应用和所有组件都有各自的状态
So we have our main application and
all the components have all their state,

48
00:02:36.860 --> 00:02:40.509
但如果我有一个用户，对，如果我的每一项申请
but if I have a user, right,
if every piece of my application

49
00:02:43.000 --> 00:02:46.240
需要从用户对象中读取，我不需要在任何地方都通过，对吗 ?
needs to read from the user object, I
don't have to pass that everywhere, right?

50
00:02:46.240 --> 00:02:48.719
如果我能把它放在那边的话会很有用的
So it'd be useful if I could put
that somewhere on the side, and

51
00:02:48.719 --> 00:02:50.300
这就是 Redux 真正有用的地方
that's where Redux is really useful.

52
00:02:50.300 --> 00:02:54.520
它是您应用程序中状态的中央存储库，可以吗 ?
It's a central repository for
state in your application, okay?

53
00:02:57.569 --> 00:03:04.901
因此，通常在 React 中，您只会调用 setState 并让 React 重新呈现，对吗 ?
So typically in React you would just call
setState and let React rerender, right?

54
00:03:04.901 --> 00:03:09.280
所以如果这是更新的方式，对，我可能是用户改变了他们的电子邮件，
So if that's how something updates, right,
I have maybe the user changes their email,

55
00:03:09.280 --> 00:03:12.110
我就打电话给 setState ，那就结束了，对吧 ?
I would just call setState and
that would be the end of it, right?

56
00:03:12.110 --> 00:03:16.949
在雷德克斯的时候，我们引入了一个更大的圆圈来回到那个点。
With Redux, we introduced a much bigger
circle to get back to that point.

57
00:03:18.689 --> 00:03:24.210
所以我在这里为您输入了它，在收件箱或输入框中输入用户类型。
So here I've kind of typed it out for
you, user types in inbox or an input box.

58
00:03:24.210 --> 00:03:28.250
它会调用操作创建者来获取将操作分派给 Redux的操作。
It calls an action creator to get an
action that dispatches an action to Redux.

59
00:03:28.250 --> 00:03:30.849
然后， Redux 将操作插入根减速器。
Redux then inserts the action
into the root reducer.

60
00:03:30.849 --> 00:03:33.590
根减速器分派给另一个减速器
The root reducer dispatches
to a different reducer,

61
00:03:33.590 --> 00:03:35.020
它会处理状态更新。
which actually handles the state update.

62
00:03:36.079 --> 00:03:39.379
此减速器返回给定该操作对象的新状态。
The reducer returns a new state
given that action object.

63
00:03:40.590 --> 00:03:44.900
这个新状态变成了源状态，并反馈到 React中，对吗 ?
This new state becomes the source state,
and that is fed back into React, right?

64
00:03:46.150 --> 00:03:50.985
所以一方面你有八个步骤
So on one hand you have
these eight steps versus

65
00:03:50.985 --> 00:03:55.199
setState，或更新挂钩，或类似的内容，对吗 ?
setState, or an update hook,
or something like that, right?

66
00:03:55.199 --> 00:03:57.599
其中一个比另一个简单一些，但是
One of these is a little bit
simpler than the other, but

67
00:03:57.599 --> 00:04:00.590
我会让你当个法官
I'll let you be the judge
of which one that is.

68
00:04:02.580 --> 00:04:04.618
你为什么要这么做
So why would you do something like this?

69
00:04:05.620 --> 00:04:08.830
一，每一步都是稳定的。
One, every step of this is testable.

70
00:04:09.830 --> 00:04:13.506
这意味着你要观察你的状态
So that means you get to
observe how your state

71
00:04:13.506 --> 00:04:17.192
改变这一切的每一步对吧
changes through every step of this, right?

72
00:04:17.192 --> 00:04:19.550
这很有价值，对吧 ?
And that's valuable, right?

73
00:04:19.550 --> 00:04:21.970
你可以说这个国家的变异
You can basically say
this mutation of state,

74
00:04:21.970 --> 00:04:25.910
我可以保证，这将是正确的。
I can guarantee that given this
is going to go through correctly.

75
00:04:25.910 --> 00:04:27.089
这就是 Redux 强大的原因。
And that's why Redux is powerful.

76
00:04:28.870 --> 00:04:30.959
所以，让我们开始吧，开始吧。
So let's go ahead and get started on this.

77
00:04:30.959 --> 00:04:38.409
所以，请转至代码编辑器并
So go to your Code Editor and

78
00:04:38.409 --> 00:04:41.305
我们要去 npm install redux 和
we're going to npm install redux and

79
00:04:41.305 --> 00:04:45.930
reis-redux ，它是 Redux 和 React 之间非常薄的连接器。
react-redux which is the very thin
connector between Redux and React.

80
00:04:48.199 --> 00:04:51.449
因为你可能知道你可以用雷迪克斯和角
Because as you may know,
you can use Redux with Angular,

81
00:04:51.449 --> 00:04:53.459
你可以用它和任何一个框架一起使用
you can use it with Ember,
it works with any framework.

82
00:04:53.459 --> 00:04:54.382
您可以在没有框架的情况下使用它。
You can use it without a framework.

83
00:04:56.742 --> 00:05:01.257
>> Brian Holt: 我想我想说的关于 Redux 的另一件事是
&gt;&gt; Brian Holt: I think the other
thing that I wanna say about Redux is

84
00:05:01.257 --> 00:05:04.319
是一个很小的图书馆
it's a very small library.

85
00:05:04.319 --> 00:05:07.519
实际上，您可以在大约 50 行代码中写入 Redux 。
You can actually write Redux
in about 50 lines of code.

86
00:05:09.100 --> 00:05:11.250
这只是一种头脑的融化，对吧 ?
And that's just kind of mind melting,
right?

87
00:05:11.250 --> 00:05:16.064
但我想说的另一件事并不意味着这很容易
But the other thing that I wanna
say is that doesn't mean it's easy,

88
00:05:16.064 --> 00:05:17.072
是吗 ?
[LAUGH] right?

89
00:05:17.072 --> 00:05:20.139
所以我听到有人这样说，简单但硬，对吗 ?
So I've heard someone phrase it as,
it's simple but hard, right?

90
00:05:20.139 --> 00:05:22.850
而不是复杂而简单的对吧
As opposed to complex and easy, right?

91
00:05:22.850 --> 00:05:27.459
我想把旧的 AngularJS 当作复杂而简单的事
I would judge old AngularJS as complex and
easy.

92
00:05:28.879 --> 00:05:31.639
它有很多东西但其实很容易就能和它一起跑
It does a lot of stuff but it's actually
quite easy to get up and running with it,

93
00:05:31.639 --> 00:05:35.659
但也很容易让自己陷入一个烂摊子的烂摊子里
but it's also easy to get yourself in
a really rat's nest kind of tangled mess.

94
00:05:36.909 --> 00:05:39.860
我的应用程序仍在 Angular 的生产中
My applications that are still in
production in Angular are a perfect

95
00:05:39.860 --> 00:05:41.439
这个例子。
example of that.

96
00:05:41.439 --> 00:05:43.800
是我的错不是他们的错对吧
Which is my fault, not their fault, right?

97
00:05:45.459 --> 00:05:49.579
但是我想说， Redux 非常简单，它不是很大的，
But I would say that Redux is very
simple in that it's not very big, and

98
00:05:49.579 --> 00:05:52.459
没有太多的方法，但是很难理解
there's not a lot of methods to it,
but it's quite hard to understand
