WEBVTT

1
00:00:00.370 --> 00:00:04.190
>> Brian Holt: 好的，我们去找 ref.js.
&gt;&gt; Brian Holt: Okay, let's go to ref.js.

2
00:00:04.190 --> 00:00:07.660
在我看来，这是开始变得艰难的地方。
So this is where, in my opinion,
this starts getting hard.

3
00:00:09.570 --> 00:00:13.029
因此，我在此处具有此 useRef 示例，如果单击了延迟日志记录。
So I have this useRef example here and
if I click delay logging.

4
00:00:16.917 --> 00:00:19.553
>> Brian Holt: 注意它说，你可以看到它上面写着，
&gt;&gt; Brian Holt: Notice that it says,
you can see right there it says,

5
00:00:19.553 --> 00:00:20.500
一个引用一个引用
state one ref one.

6
00:00:20.500 --> 00:00:27.867
但注意警戒状态是零引用号
But notice this says in the alert,
state zero ref one, okay?

7
00:00:27.867 --> 00:00:31.951
我想在此显示延迟日志记录中的增量，而延迟日志记录是
And I want to show you here increments in
delay logging which is the function that's

8
00:00:31.951 --> 00:00:33.716
其实是在提高警觉对吧
actually doing the alert, right?

9
00:00:35.780 --> 00:00:40.347
>> Brian Holt: 设置状态，我立即调用该状态，我说设置状态加上一个，
&gt;&gt; Brian Holt: The set state, I call that
right away and I say set state plus one,

10
00:00:40.347 --> 00:00:41.380
对吧 ?
right?

11
00:00:41.380 --> 00:00:47.130
我说 numRef current plus plus ，您将假定状态号和
And I say numRef current plus plus,
you would assume that state number and

12
00:00:47.130 --> 00:00:50.070
因为它们总是处于锁定的阶段对吧
current because they're always
kept in locked step, right?

13
00:00:50.070 --> 00:00:52.189
请在此处使用状态和使用引用，它们都从零开始
Use state and use ref right here,
they both start at zero and

14
00:00:52.189 --> 00:00:54.630
都是同时递增的
they're both incremented at the same time.

15
00:00:54.630 --> 00:00:56.630
他们也会是一样的对吧
They would be the same always, right?

16
00:00:56.630 --> 00:00:57.405
那么他们为什么不一样呢 ?
So why aren't they the same?

17
00:01:00.929 --> 00:01:03.923
> > Brian Holt: 这就是你遇到的问题，
&gt;&gt; Brian Holt: Well this is kind
of the problem that you run into,

18
00:01:03.923 --> 00:01:06.439
这是个了结的问题吧
this is a problem with a closure, right?

19
00:01:06.439 --> 00:01:10.390
如果你不了解关闭的好情况凯尔 - 辛普森有个不错的课程
And if you don't understand closure super
well, Kyle Simpson has a great course on

20
00:01:10.390 --> 00:01:12.439
在Fron趋向大师赛上肯定是这样
it in Frontend Masters, so
definitely check that out.

21
00:01:13.569 --> 00:01:17.700
但足以说明这里的国家数字并没有改变。
But suffice to say that stateNumber
here actually doesn't change.

22
00:01:17.700 --> 00:01:20.099
因此，我正在设置状态号，并且正在递增，
So I am setting stateNumber,
and it is incrementing,

23
00:01:20.099 --> 00:01:22.109
导致重新呈现，对吗 ?
and it is causing a re-render, right?

24
00:01:22.109 --> 00:01:26.277
因此当我单击延迟日志记录时，请注意状态和
So when I click delay logging,
notice that state and

25
00:01:26.277 --> 00:01:30.030
裁判都变了对吧
ref both change immediately, right?

26
00:01:30.030 --> 00:01:35.700
但是之前的迭代的状态号没有改变，对吧 ?
But this state number from the previous
iteration has not changed, right?

27
00:01:35.700 --> 00:01:40.109
这个封闭装置就在这个状态号上，对吧 ?
And this closure is holding
onto this state number, right?

28
00:01:40.109 --> 00:01:43.670
所以实际注销的是先前版本的状态号。
So what's actually getting logged out is
the previous version of the state number.

29
00:01:43.670 --> 00:01:45.180
如果我再点击两次会发生什么
Watch what happens if I click it twice.

30
00:01:47.750 --> 00:01:51.210
>> Brian Holt: 2 和 4，对吗 ?
&gt;&gt; Brian Holt: Two and four, right?

31
00:01:51.210 --> 00:01:55.873
原因是它正在从 numRef.current 中读出
And the reason being is it's reading
out of numRef.current, that's always

32
00:01:55.873 --> 00:02:00.337
将会是确切的时间，这就是 numRef的值。
going to be the exact moment in time,
this is what that numRef's value is.

33
00:02:00.337 --> 00:02:05.146
状态号的 stateRef 始终被保存在前一个上，
Whereas stateRef for the state number is
always being held onto the previous one,

34
00:02:05.146 --> 00:02:08.014
因为关闭了那个状态
because of the closure
holding onto that state.

35
00:02:09.520 --> 00:02:11.044
>> Brian Holt: 这是否有意义 ?
&gt;&gt; Brian Holt: Does that make sense?

36
00:02:13.770 --> 00:02:15.967
>> Brian Holt: 这一背景不同的原因是我们正在
&gt;&gt; Brian Holt: And the reason why this
context is being different is cuz we're

37
00:02:15.967 --> 00:02:17.594
在未来进行设定的时间和日志记录。
doing a set time out and
logging in the future.

38
00:02:19.829 --> 00:02:22.520
>> Brian Holt: 这就是 Refs 的用途。
&gt;&gt; Brian Holt: This is
what Refs are used for.

39
00:02:22.520 --> 00:02:26.689
它们很有用，因为它们允许你，如果你有问题的话，
They're useful because they allow you, if
you have a problem, where you have these

40
00:02:26.689 --> 00:02:31.680
多个关闭问题，您需要在这些问题上保持同一状态。
multiple closure problems where you
need to hold on to the same state.

41
00:02:31.680 --> 00:02:35.139
也许这个 useRef 总是正确的正确的
Maybe it's very important that this
useRef be always the exact right one and

42
00:02:35.139 --> 00:02:36.680
在任何情况下都可以调用它。
it can be called in any context.

43
00:02:37.770 --> 00:02:39.259
那就是你想用 Ref 的时候吧
That's when you would want to use a Ref,
right?

44
00:02:41.110 --> 00:02:43.969
因此，如果您正在执行类组件，那么只会创建实例变量
So if you were doing a class component,
you would just make an instance variable

45
00:02:43.969 --> 00:02:46.120
在课堂上我们是这样处理的对吧
in the class, and
that's how we would handle that, right?

46
00:02:46.120 --> 00:02:48.729
这就是我们以前在 React 中处理的方式
That's how we've always
handled that before in React,.

47
00:02:48.729 --> 00:02:52.050
但我们不再有这种能力了，因为这不再是一个阶级，
But we don't have that ability anymore
because this is no longer a class,

48
00:02:52.050 --> 00:02:53.189
是一种功能对吧
it's a function, right?

49
00:02:53.189 --> 00:02:54.639
因此 useRef 允许我们这样做。
So useRef allows us to do that.

50
00:02:56.310 --> 00:02:59.500
所以 useRef 所做的就是给你这个东西。
So what useRef does is it
gives you this object.

51
00:02:59.500 --> 00:03:04.360
这个物体有一个叫做电流的东西。
And this object has exactly one
thing on it called current.

52
00:03:04.360 --> 00:03:08.103
如果我试了也会出错
It actually will error if I try and

53
00:03:08.103 --> 00:03:12.939
表示 numRef.thelse 等于 5。
say numRef.something else equals five.

54
00:03:12.939 --> 00:03:16.150
它说，这个对象是不可扩展的。
It says hey,
this object is not extensible.

55
00:03:16.150 --> 00:03:18.199
实际上，它实际上限制了你只使用电流。
So it actually literally limits
you to only use current.

56
00:03:23.079 --> 00:03:26.930
> > Brian Holt: 如果我说电流，那就会消失，好吗 ?
&gt;&gt; Brian Holt: If I say current,
that'll go away, okay?

57
00:03:26.930 --> 00:03:27.750
它们通过密封物体来做到这一点。
They do that by sealing the object.

58
00:03:31.901 --> 00:03:33.695
>> Brian Holt: 有关 Refs的问题 ?
&gt;&gt; Brian Holt: Questions about Refs?

59
00:03:34.807 --> 00:03:36.954
>> Brian Holt: 这对于
&gt;&gt; Brian Holt: So this'll be useful for

60
00:03:36.954 --> 00:03:42.120
喜欢经常保持在 DOM 元素上的东西。
things like holding onto
DOM elements frequently.

61
00:03:42.120 --> 00:03:46.439
它也很有用的保持时间和时间间隔
It's also useful holding onto timeouts and
holding onto intervals so

62
00:03:46.439 --> 00:03:47.889
你可以确保你得到的是正确的
you can make sure that
you get the correct one.
