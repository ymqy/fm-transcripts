WEBVTT

1
00:00:00.025 --> 00:00:04.057
[音乐]
[MUSIC]

2
00:00:04.057 --> 00:00:06.517
&gt；&gt；Douglas Crockford：我需要演示这是如何工作的，因为我可以
&gt;&gt; Douglas Crockford: I need to demonstrate how this works because I can

3
00:00:06.517 --> 00:00:09.220
整天谈论一个函数并返回一个函数。
talk all day about a function and returns a function.

4
00:00:09.220 --> 00:00:12.045
但如果我们不把它弄乱，那就没有任何意义了。
But if we don't actually mess with it, it won't make any sense.

5
00:00:12.045 --> 00:00:15.244
所以，让我从一个非常简单的例子开始。
So, let me start with a very simple example.

6
00:00:15.244 --> 00:00:18.349
我们将创建一个名为digit_name的函数，
We're gonna make a function called digit_name,

7
00:00:18.349 --> 00:00:23.129
digit_name将接受一个字符串或接受一个数字并返回一个字符串。
digit_name will take a string or take a number and return a string.

8
00:00:23.129 --> 00:00:25.120
根据这个数字。
Based on what that number is.

9
00:00:25.120 --> 00:00:27.760
它将通过返回字符串数组中的元素来实现这一点。
And it will do that by returning an element from an array of strings.

10
00:00:30.519 --> 00:00:35.750
所以你可以看到这是非常微不足道的
So you can see this is very trivial and

11
00:00:35.750 --> 00:00:38.289
不幸的是，我写这篇文章的方式有问题。
unfortunately there's a problem with the way I wrote this.

12
00:00:38.289 --> 00:00:40.868
也就是说，我使用了一个名为names的全局变量。
And that is I'm using a global variable called names.

13
00:00:40.868 --> 00:00:44.828
问题是如果在我的
The problem with that is If there is anything else in my

14
00:00:44.828 --> 00:00:48.795
系统也有一个名为Names的全局变量。
system that also has a global variable called names.

15
00:00:48.795 --> 00:00:52.151
我们会发生冲突，要么我的功能失败，要么
We're gonna get a conflict and either my functional fail or

16
00:00:52.151 --> 00:00:55.969
他们的会失败，或者我们两个都会失败，这很糟糕。
theirs will fail or maybe we both fail and that's bad.

17
00:00:55.969 --> 00:01:00.469
你没有办法进行测试，因为你不能预测
And there is no way you can test for that because you can't anticipate

18
00:01:00.469 --> 00:01:02.899
你的代码必须运行的所有代码。
all of the code that your code is ever gonna have to run with.

19
00:01:03.929 --> 00:01:07.459
如果你必须运行广告，这在浏览器中尤其是一个问题，
And this is especially a problem in browsers if you have to run with ads,

20
00:01:08.469 --> 00:01:12.500
因为广告中有一些你见过的最糟糕的代码，
because ads come with some of the worst code you've ever seen,

21
00:01:12.500 --> 00:01:15.319
因为他们会付钱让你收他们的垃圾，对吧？
because they'll pay you to take their crap, right?

22
00:01:15.319 --> 00:01:18.402
你可以威胁他们说，我们不会接受你的广告，除非你清理
And you can threaten them and say, we're not gonna take your ads unless you clean

23
00:01:18.402 --> 00:01:21.141
起来，他们会说，好的，我们会把钱给别人。
it up, and they'll say, okay, we'll get our money to someone else.

24
00:01:21.141 --> 00:01:25.938
你说，好吧，只是开玩笑，它是如何工作的
And you say, all right, just kidding, how it works and

25
00:01:25.938 --> 00:01:32.286
他们使用了很多全局变量，最终你会接到电话。
they use lots of global variables and eventually your gonna get the call.

26
00:01:32.286 --> 00:01:34.996
你的东西因为一些广告不起作用了，但是
Your stuff stopped working because of some ad but

27
00:01:34.996 --> 00:01:38.120
不是广告的错是你的错。
it's not the ads fault it's your fault.

28
00:01:38.120 --> 00:01:42.662
所以我们需要减少对全局变量的依赖。
So we need to reduce our dependence on global variables.

29
00:01:42.662 --> 00:01:46.890
所以这里有另一种方法，我可以写这个函数。
So here is another way that I could write this function.

30
00:01:46.890 --> 00:01:51.280
这里我得到了digit name函数，它有一个名为names的私有变量，
Here I've got the digit name function and it has a private variable called names,

31
00:01:51.280 --> 00:01:54.349
因为所有变量在函数范围内都是私有的。
because all variables are private within the function scope.

32
00:01:54.349 --> 00:01:56.932
因此，如果存在名为Names的全局变量，则不会发生冲突，所以
So if there is a global variable called names, no conflict, so

33
00:01:56.932 --> 00:01:58.021
真的很好。
that's all really good.

34
00:01:58.021 --> 00:02:03.731
糟糕的是，每次我调用数字名称时，我都必须构造
The bad part is that every time I call digit name, I'm going to have to construct

35
00:02:03.731 --> 00:02:08.692
一个新的数组，在里面放十个东西，这样我就可以从里面取出一个东西。
a new array, put ten things in it just so I can take one thing out of it.

36
00:02:08.692 --> 00:02:12.599
太贵了。
That's hugely expensive.

37
00:02:12.599 --> 00:02:17.409
现在优化编译器可以观察到名称作为指示的不变性，
Now an optimizing compiler might observe that names as invariant over indications,

38
00:02:17.409 --> 00:02:19.939
因此它可能会尝试将其优化出来。
and so it might try to optimize that out.

39
00:02:19.939 --> 00:02:23.750
但是优化编译器可能需要花费很多分钟来完成他们的工作，并且
But optimizing compilers can take many minutes to do their work, and

40
00:02:23.750 --> 00:02:25.340
在网络上，我们不能花太多时间。
on the web we can't take many minutes.

41
00:02:25.340 --> 00:02:29.629
我们必须立即开始，所以编译器总是非常快。
We have to start instantly, so the compilers are always gonna be really fast.

42
00:02:29.629 --> 00:02:34.800
快速编译，所以他们不会这样做，所以我们需要这样做。
Get going quick compilers, so they're not gonna do this so we need to do this.

43
00:02:34.800 --> 00:02:36.949
所以这里有第三种方法来编写这个函数。
So here's a third way to write this function.

44
00:02:38.590 --> 00:02:41.349
这里，我有数字名，我有一个带有私有变量的函数
Here, I've got digit name, I've got a function with the private variable

45
00:02:41.349 --> 00:02:46.990
包含名称，但这一次我返回的是一个函数。
containing the names, but this time I'm returning a function.

46
00:02:46.990 --> 00:02:49.689
我返回的函数将使用这个名称。
And the function I return is going to use the name.

47
00:02:50.900 --> 00:02:55.360
我马上调用外部函数，这意味着我要
And I'm calling the outer function immediately, which means that what I'm

48
00:02:55.360 --> 00:03:00.460
将要存储在digit_name中的不是外部函数，而是
going to be storing in the digit_name is not the outer function, but

49
00:03:00.460 --> 00:03:04.280
外部函数的返回值，恰好是内部函数。
the return value of the outer function, which happens to be the inner function.

50
00:03:05.750 --> 00:03:06.719
以及内部功能，
And that inner function,

51
00:03:06.719 --> 00:03:12.000
由于关闭，将继续访问Names变量。
because of closure, will continue to have access to the names variable.

52
00:03:12.000 --> 00:03:14.759
即使在Green函数返回之后。
Even after the green function has returned.

53
00:03:17.079 --> 00:03:21.838
这是我们这三天要讨论的最重要的想法，所以
This is the most important idea we're gonna talk about over these three days so

54
00:03:21.838 --> 00:03:27.049
我想看到每个人，包括你在家里点头，就像是，好的，我明白了。
I want to see everybody including you at home nodding, like yeah, okay, I got that.

55
00:03:27.049 --> 00:03:31.860
好的，你没拿到，所以我们再来一次。
Okay, you didn't get it, so let's do it again.

56
00:03:33.319 --> 00:03:33.843
所以让我们重新开始。
So let's start over.

57
00:03:33.843 --> 00:03:36.700
这是原来的好吗？
This is the original one, okay?

58
00:03:36.700 --> 00:03:39.050
我们得到了全局变量。
We've got the global variable.

59
00:03:39.050 --> 00:03:41.139
我们已经有了简单的数字名称函数。
We've got our our simple digit name function.

60
00:03:41.139 --> 00:03:44.888
现在请记住我们刚才与租户和
Now remember the thing we just talked about with tenant and

61
00:03:44.888 --> 00:03:48.651
他的对应原则，我们可以取任何值。
his correspondence principle that we can take any value.

62
00:03:48.651 --> 00:03:53.045
将其包装在将返回该值的函数中，调用该函数
Wrap it in a function that will return that value, call that function

63
00:03:53.045 --> 00:03:58.103
立即，这是同样的事情，所以在这种情况下，我可以这样做。
immediately and it's the same thing, so I can do that in this case.

64
00:03:58.103 --> 00:04:01.879
我将把结果赋值给digit_name
I'm gonna assign to a digit_name the result

65
00:04:01.879 --> 00:04:05.340
这个函数将返回我立即调用的函数。
of a function which will return a function that I call immediately.

66
00:04:05.340 --> 00:04:10.569
所以你可以看到这个和这个做的是完全相同的事情。
So you can see that this and this do exactly the same thing.

67
00:04:10.569 --> 00:04:13.330
这个只是更多的代码，好吗？
This one's just a little bit more code, okay?

68
00:04:13.330 --> 00:04:16.067
那么每个人都对此感到满意吗？&gt；&gt；演讲者2：你能展示一下这两个吗？
So everybody comfortable with that? &gt;&gt; Speaker 2: Could you show those two?

69
00:04:16.067 --> 00:04:16.606
&gt；&gt；Douglas Crockford：是的，所以
&gt;&gt; Douglas Crockford: Yeah, so

70
00:04:16.606 --> 00:04:19.177
我们必须给变量赋值。
we're got to assign a value to the variable.

71
00:04:19.177 --> 00:04:23.221
我们将分配调用一个函数的结果，该函数将返回
We're going to assign the result of calling a function that will return that

72
00:04:23.221 --> 00:04:31.262
值立即调用函数。&gt；&gt；扬声器3：因此在本例中，
value in calling the function immediately. &gt;&gt; Speaker 3: So in this in this example,

73
00:04:31.262 --> 00:04:35.560
是使用这个的主要好处，我们正在防止污染全球
is the main benefit of using this that we're preventing polluting the global

74
00:04:35.560 --> 00:04:37.754
Stack，或者好处是什么？&gt；&gt；Douglas Crockford：嗯，
stack, or what are the benefits? &gt;&gt; Douglas Crockford: Well,

75
00:04:37.754 --> 00:04:39.920
这就是我们要去做的，我们还没有这样做。
that's what we'll get to, we haven't done that yet.

76
00:04:39.920 --> 00:04:42.310
所以这两个人做的是完全相同的事情。
So these two are doing exactly the same thing.

77
00:04:42.310 --> 00:04:44.130
让我们来讨论全局变量问题。
So let's go have the global variable problem.

78
00:04:44.130 --> 00:04:46.485
我们还没修好任何东西。
We haven't fixed anything yet.

79
00:04:47.509 --> 00:04:50.069
正在设置。现在你很熟悉我们的想法
Getting setup. Now you're familiar with the idea that we

80
00:04:50.069 --> 00:04:51.512
可以有局部变量，
can have local variables,

81
00:04:51.512 --> 00:04:55.158
在函数中声明一个变量，该变量是函数的局部变量。
declare a variable within a function that's local to the function.

82
00:04:55.158 --> 00:04:58.459
我们有全局变量，所有函数都可以看到。
And we've got global variables which all the functions can see.

83
00:04:59.470 --> 00:05:03.410
但我们可以拥有，所以这是两个世界，对吧，
But we can have, so that's two worlds, right,

84
00:05:03.410 --> 00:05:07.310
你可以把它想象成实例世界和静态世界。
you can think of it as like the instance world and the static world.

85
00:05:07.310 --> 00:05:09.009
不完全是那样的，但有点像那样，
It's not exactly like that but it's kinda like that,

86
00:05:09.009 --> 00:05:11.649
我们有两个能见度。
we've got two levels of visibility.

87
00:05:11.649 --> 00:05:15.790
但是我们可以做得更好，因为每次我们嵌套一个函数，我们都会得到一个新的
But we can go much finer because every time we nest a function, we get a new

88
00:05:15.790 --> 00:05:20.480
我们可以存放东西的地方，另一个可以获取变量的地方。
place where we can keep stuff, another place where you can get variables.

89
00:05:20.480 --> 00:05:24.300
并且每个函数都将确定可见性和
And each function will determine the visibility and

90
00:05:24.300 --> 00:05:28.759
在其中定义的变量的生存期。
the lifetime of the variables that are defined inside of it.

91
00:05:28.759 --> 00:05:33.935
因此，我们现在可以拥有的不仅仅是本地和全球
And so, it's not just local and global we can now have

92
00:05:33.935 --> 00:05:38.653
在范围之间，它们只是范围。
in between scopes and and they're just scopes.

93
00:05:38.653 --> 00:05:41.447
所以我要对这个做一个改变。
So I'm gonna make one change to this one.

94
00:05:41.447 --> 00:05:44.252
我要取这个全局变量
I'm gonna take this global variable and

95
00:05:44.252 --> 00:05:49.865
我只是将它向下移动一行，进入外部函数中，好吗？
I'm going to just move it down one line to be inside of the outer function, okay?

96
00:05:49.865 --> 00:05:54.721
所以我们引入了第三个地方，我们可以保存东西，现在
So we've introduced a third place where we can keep stuff which is now

97
00:05:54.721 --> 00:05:57.240
在外部函数的范围内。
in the scope of the outer function.

98
00:05:58.610 --> 00:06:01.889
这是我们以前得到的同样的结果。
This is the same result that we had before.

99
00:06:01.889 --> 00:06:07.600
好的，我们得到了数字名称，它将接受一个值
Okay, so we've got digit name which will receive a value

100
00:06:07.600 --> 00:06:13.079
它是从我们立即调用的函数中获得的函数。
which is a function which is obtained from a function that we call immediately.

101
00:06:13.079 --> 00:06:16.620
并且该内部函数将继续访问
And that inner function will continue to have access to the names variable of

102
00:06:16.620 --> 00:06:23.189
外部函数。&gt；&gt；Douglas Crockford：所以这就是结束。
the outer function. &gt;&gt; Douglas Crockford: So this is closure.

103
00:06:23.189 --> 00:06:27.370
这是函数式编程中的大思想，关键思想。
This is the big idea, the key idea in functional programming.

104
00:06:27.370 --> 00:06:29.120
这是好东西。
And this is the good stuff.

105
00:06:29.120 --> 00:06:30.819
这是最好的部分。
This is the good part.

106
00:06:30.819 --> 00:06:35.459
我们明天会花很多时间玩这个模型。
We're gonna spend a lot of time tomorrow playing with this model.

107
00:06:38.220 --> 00:06:39.959
在我们继续下一个之前有什么问题吗，
Any questions before we go on to the next one,

108
00:06:39.959 --> 00:06:42.612
是吗？&gt；&gt；演讲者4：那么，你解决了全局问题
yeah? &gt;&gt; Speaker 4: So, you solved the global

109
00:06:42.612 --> 00:06:47.148
通过移动它到那里的可变问题，但是你说解决这个问题的方法是
variable problem by moving it in there but you said the solution to this was that

110
00:06:47.148 --> 00:06:51.016
基本上，您移动调用，将所有内容移动到一个堆中？
basically you move the invocation, move everything into a heap?

111
00:06:51.016 --> 00:06:57.639
太好了，那么现在堆中，你将有三个名称数组的实例吗？
Great, so now in heap are you going to have three instances of the names array?

112
00:06:57.639 --> 00:07:01.089
如果您将警报数字名称称为三，然后是四，然后是五。
If you call alert digit name three then four then five.

113
00:07:02.470 --> 00:07:03.500
&gt；&gt；Douglas Crockford：不，所以
&gt;&gt; Douglas Crockford: No, so

114
00:07:03.500 --> 00:07:05.290
这是个很好的问题。
that's a really good question.

115
00:07:05.290 --> 00:07:09.250
所以您熟悉激活记录的概念
So you're familiar with the idea of an activation record

116
00:07:09.250 --> 00:07:10.480
在编程语言中。
in a programming language.

117
00:07:10.480 --> 00:07:13.028
所以激活记录将包含返回地址。
So the activation record will contain the return address.

118
00:07:13.028 --> 00:07:18.624
包含所有输入参数，也可能包含本地参数
Contain all the input parameters and might also contain local

119
00:07:18.624 --> 00:07:23.690
参数和她的局部变量之类的东西。
arguments and her local variables and stuff like that.

120
00:07:23.690 --> 00:07:28.283
所以，在JavaScript中，或者在像这样的函数式语言中，
So, in JavaScript, or in a functional language like this,

121
00:07:28.283 --> 00:07:33.694
激活时，函数对象将包含指向代码的指针。
the activation, a function object will contain a pointer to the code.

122
00:07:33.694 --> 00:07:37.201
因此它知道调用函数时要执行什么，
So it knows what to execute when the function is invoked,

123
00:07:37.201 --> 00:07:41.439
并且函数对象将包含对激活的引用
and the function object will contain a reference to the activation of

124
00:07:41.439 --> 00:07:43.350
创建它的函数。
the function that created it.

125
00:07:45.449 --> 00:07:50.317
所以这种情况下，这个函数或对象
So this case, this function or the object that is

126
00:07:50.317 --> 00:07:55.427
由该函数表达式创建的将被链接
created by that function expression will be linked

127
00:07:55.427 --> 00:08:00.797
到创建它的绿色函数的上下文中。
to the context of the green function that created it.

128
00:08:00.797 --> 00:08:05.550
因此通过激活连接，它将可以访问名称
So through that activation connection it will have access to the names

129
00:08:05.550 --> 00:08:10.548
变量不是创建它时使用的NAMES变量的值，而是
variable not to the value of the names variable that it was created with but

130
00:08:10.548 --> 00:08:13.490
实际名称变量本身。
the actual names variable itself.

131
00:08:13.490 --> 00:08:15.470
它总是可以访问它，并且
It will always have access to that and

132
00:08:15.470 --> 00:08:18.790
只要它还活着就会继续拥有它。
will continue to have it as long as it survives.

133
00:08:18.790 --> 00:08:22.730
如果在某个时候我说了数字名
If at some point I said digit name to

134
00:08:22.730 --> 00:08:26.660
在这一点上未定义，所有这些东西都可以被垃圾收集。
undefined at that point all of that stuff can get garbage collected.

135
00:08:27.980 --> 00:08:31.870
但在此之前，只要内部函数存活下来
But until then, as long as the inner function survives and

136
00:08:31.870 --> 00:08:36.328
需要激活，它将保留它，垃圾收集器不会接触它。
needs that activation, it will keep it and the garbage collector will not touch it.

137
00:08:39.179 --> 00:08:41.120
所以当我们调用数字名称时，
So when we call digit name,

138
00:08:41.120 --> 00:08:46.179
我们将调用这个函数，它将简单地转到数组并返回值。
we'll be calling this function which will simply go to the array and return a value.

139
00:08:46.179 --> 00:08:49.710
所以我们可以用一、二、三和
So we can call it with one, two, three, and

140
00:08:49.710 --> 00:08:51.620
我们只是调用它并返回三个值。
we're just calling it and returning three values.

141
00:08:51.620 --> 00:08:54.481
我们没有创造任何东西，因为我们只是称之为
We're not creating any stuff because we're just calling that

142
00:08:54.481 --> 00:08:59.040
小功能。&gt；&gt；Douglas Crockford：So
little function. &gt;&gt; Douglas Crockford: So

143
00:08:59.040 --> 00:09:02.360
让我向您展示一个稍微复杂的示例。
let me show you a slightly more complex example.

144
00:09:04.139 --> 00:09:05.950
这是淡出函数。
This is the fade function.

145
00:09:05.950 --> 00:09:10.111
淡出功能是我们可以在浏览器中运行的功能，它
The fade function is something we might run in a browser which

146
00:09:10.111 --> 00:09:12.570
将传入DOM元素的ID。
will pass in the ID of a DOM element.

147
00:09:12.570 --> 00:09:17.110
并且它将该元素的颜色从
And it will change the colors of that element from

148
00:09:17.110 --> 00:09:21.871
在几秒钟内逐渐从黄色变成白色
yellow to white gradually over a couple seconds and

149
00:09:21.871 --> 00:09:25.317
这里是淡出函数。
so, here is that the fade function.

150
00:09:25.317 --> 00:09:29.125
它将做的第一件事是，它将使用
First thing it will do is, it will use document that

151
00:09:29.125 --> 00:09:33.923
按ID获取元素以查找ID并获取主导元素。
get element by ID to look up the ID and obtain a dominant element.

152
00:09:33.923 --> 00:09:38.278
它将创建一个名为level的变量，并将其设置为1。
And it will create a variable called level and it will set it to 1.

153
00:09:38.278 --> 00:09:43.048
它将创建一个名为step的函数，然后调用step timeout
It will create a function called step and it will then call step timeout which

154
00:09:43.048 --> 00:09:47.779
将在100毫秒内调用Step，然后返回。
will call step in 100 milliseconds, and then it returns.

155
00:09:47.779 --> 00:09:52.000
所以在这一点上，淡出函数已经完成了它的返回，它完成了。
So at this point, the fade function has finished its return, it's done.

156
00:09:52.000 --> 00:09:56.351
突然，100毫秒后阶跃函数运行，所以
Suddenly, 100 milliseconds later the step function runs, so

157
00:09:56.351 --> 00:09:59.548
STEP函数将转到其级别变量。
the step function will go to its level variable.

158
00:09:59.548 --> 00:10:03.538
父函数的实际级别变量，
The actual level variable of the parent function,

159
00:10:03.538 --> 00:10:06.147
并将其转换为十六进制字符。
and turn it into a hex character.

160
00:10:06.147 --> 00:10:11.456
它将转到DOM元素中更改其背景色，
It will go to the DOM element in change its background color,

161
00:10:11.456 --> 00:10:14.904
它将再次转到级别变量。
it will go to the level variable again.

162
00:10:14.904 --> 00:10:20.529
如果小于十五，因为它是一个，我们会增加一个。
If it's less than fifteen which will be because it was one we will add one to it.

163
00:10:20.529 --> 00:10:25.408
我们现在正在改变外部函数中变量的值。
We're now changing the value of the variable in the outer function.

164
00:10:25.408 --> 00:10:28.384
我们将调用set timeout再次执行此操作
And we'll call set timeout to do this again and

165
00:10:28.384 --> 00:10:33.370
我们将继续这样做，直到最终级别达到15，然后我们停止。
we'll keep doing it until eventually level gets up to 15 and then we stop.

166
00:10:33.370 --> 00:10:36.422
在这一点上，垃圾收集器可以进入并将其全部取出。
And at that point, the garbage collector can come in and take it all out.

167
00:10:50.001 --> 00:10:52.965
&gt；&gt；扬声器5：所以你最好打电话给你
&gt;&gt; Speaker 5: So you better call you would

168
00:10:52.965 --> 00:10:57.307
只是说，褪色75次，你不需要说，
just say, fade 75, times you don't have to say,

169
00:10:57.307 --> 00:11:01.359
变量X等于淡出75，你只是淡出75。&gt；&gt；道格拉斯·克罗克福德：威尔
var X equals fade 75, you just fade 75. &gt;&gt; Douglas Crockford: Will

170
00:11:01.359 --> 00:11:04.778
可能会给它起个名字。&gt；&gt；扬声器5：将是垃圾
be probably give it a name. &gt;&gt; Speaker 5: Will be garbage

171
00:11:04.778 --> 00:11:08.548
收藏家如果我们连名字都不说？&gt；&gt；Douglas Crockford：不，
collector if we don't even name? &gt;&gt; Douglas Crockford: No,

172
00:11:08.548 --> 00:11:13.077
我的意思是，淡出的争论可能是因为我们正在谈论
I mean I mean that the argument to fade will probably because we're talking to

173
00:11:13.077 --> 00:11:17.817
一个DOM并且肯定被听到是字符串[INAUDIBLE]是的，但是的，所以
a DOM and certainly has been heard to be the strings [INAUDIBLE] yeah, but yeah, so

174
00:11:17.817 --> 00:11:19.080
我们可以做到。
we can do that.

175
00:11:19.080 --> 00:11:24.350
因此，假设有两个DOM元素，我们希望同时提供给它们。
So suppose there are two DOM elements and we want to feed them both simultaneously.

176
00:11:24.350 --> 00:11:26.909
所以我们叫喂食马上褪色。
So we call feed a fade be immediately.

177
00:11:28.389 --> 00:11:29.981
他们之间会有冲突吗？
Will there be any conflict between them?

178
00:11:29.981 --> 00:11:33.193
答案是否定的，因为每次我们呼叫褪色，
And the answer is no because every time we call fade,

179
00:11:33.193 --> 00:11:37.950
我们得到一个新的DOM变量，我们得到一个新的级别变量和一个新的阶跃函数。
we get a new DOM variable, we get a new level variable and a new step function.

180
00:11:37.950 --> 00:11:41.692
它们不会相互干扰，它们都在自己的范围内
And they will not interfere with each other they're all within their own

181
00:11:41.692 --> 00:11:44.220
函数作用域，并且将是完全唯一的。
function scopes and will be completely unique.

182
00:11:45.779 --> 00:11:49.701
所以这个建筑的好处之一就是我们得到了
So one of the nice things about this construction is that we get that

183
00:11:49.701 --> 00:11:50.546
分离。
separation.

184
00:11:50.546 --> 00:11:55.264
所以我们可以在没有这些行为的情况下进行许多复杂的行为
So that we can have lots of complex behavior going on without those behaviors

185
00:11:55.264 --> 00:12:01.186
互相干扰。&gt；&gt；扬声器5：每个
interfering with each other. &gt;&gt; Speaker 5: Each

186
00:12:01.186 --> 00:12:07.095
调用淡出开始超时的时间会传递一个新实例
time you call fade start time out passes a new instance

187
00:12:07.095 --> 00:12:12.720
DOM的阶跃函数，对吗？
of the step function to DOM, is that correct?

188
00:12:12.720 --> 00:12:16.963
因此，DOM不鼓励收集这些步骤
And so, the DOM doesn't encourage collect those step

189
00:12:16.963 --> 00:12:21.947
函数，直到调用它之后调用超时为止
functions until after its invoke the timeout after it's called

190
00:12:21.947 --> 00:12:24.475
OUT函数。&gt；&gt；Douglas Crockford：DOM是唯一的
out function. &gt;&gt; Douglas Crockford: The DOM is only

191
00:12:24.475 --> 00:12:31.869
在与专栏相关的内容中，我们正在查看改变颜色的样式。
involved in that with column, we're looking at the style to change the color.

192
00:12:31.869 --> 00:12:34.370
否则，DOM不会意识到任何-
Otherwise, the dom is not aware of that any-

193
00:12:34.370 --> 00:12:35.496
&gt；&gt；扬声器5：对不起，setTimeout是-
&gt;&gt; Speaker 5: I'm sorry, setTimeout is-

194
00:12:35.496 --> 00:12:36.963
&gt；&gt；Douglas Crockford：是的，setTimeout
&gt;&gt; Douglas Crockford: Yeah, the setTimeout

195
00:12:36.963 --> 00:12:40.052
实际上并不属于JavaScript，
is, doesn't actually belong to JavaScript,

196
00:12:40.052 --> 00:12:42.825
它确实属于浏览器。&gt；&gt；扬声器5：浏览器。
it does belong to the browser. &gt;&gt; Speaker 5: Browser.

197
00:12:42.825 --> 00:12:43.934
&gt；&gt；Douglas Crockford：也有。
&gt;&gt; Douglas Crockford: Also has it.

198
00:12:43.934 --> 00:12:49.616
是的，所以每次我们调用Fade，我们将创建一个新的阶跃函数
Yeah, so each time we call fade, we will make a new step function and

199
00:12:49.616 --> 00:12:54.306
我们将多次传递该步骤函数以设置超时
we'll pass that step function many times to set timeout

200
00:12:54.306 --> 00:12:59.240
直到我们完成。&gt；&gt；扬声器5：我只是
until we finish. &gt;&gt; Speaker 5: I was just

201
00:12:59.240 --> 00:13:03.110
试图弄清楚为什么STEP不收集垃圾。
trying to get my head around why step doesn't get garbage collected.

202
00:13:03.110 --> 00:13:06.750
那是因为浏览器。&gt；&gt；Douglas Crockford：对，因为
It's because the browser. &gt;&gt; Douglas Crockford: Right, cuz the

203
00:13:06.750 --> 00:13:09.100
浏览器正在将其保存在计时器队列中。&GT；&GT；扬声器5：好的，
browser's holding it in its timer queue. &gt;&gt; Speaker 5: Okay,

204
00:13:09.100 --> 00:13:09.909
其计时器队列。&gt；&gt；Douglas Crockford：和
its timer queue. &gt;&gt; Douglas Crockford: And

205
00:13:09.909 --> 00:13:14.120
只要系统中的任何东西意识到根植于
and as long as anything in the system is aware of something that's rooted in

206
00:13:14.120 --> 00:13:16.554
垃圾收集器不会碰它。&gt；&gt；扬声器5：好的，谢谢。
the garbage collector won't touch it. &gt;&gt; Speaker 5: Okay, thanks.

207
00:13:16.554 --> 00:13:17.355
&gt；&gt；Douglas Crockford：是的。
&gt;&gt; Douglas Crockford: Yes.

208
00:13:17.355 --> 00:13:18.842
&gt；&gt；扬声器6：初始值是多少
&gt;&gt; Speaker 6: What's the initial value of

209
00:13:18.842 --> 00:13:22.009
H你什么时候声明的？&GT；&GT；Douglas Crockford：第一次H
h when you declared that? &gt;&gt; Douglas Crockford: First time H

210
00:13:22.009 --> 00:13:25.870
将是字符串之一。&gt；&gt；扬声器6：和
will be the string one. &gt;&gt; Speaker 6: And

211
00:13:25.870 --> 00:13:29.378
那么两根弦16做什么？&gt；&gt；Douglas Crockford：16，
then what does the two string 16 do? &gt;&gt; Douglas Crockford: 16,

212
00:13:29.378 --> 00:13:34.232
toString 16表示生成十六进制字符，因此
toString 16 means make a hex character, so

213
00:13:34.232 --> 00:13:37.566
这将使我们从1到F。
this will give us from one to F.

214
00:13:37.566 --> 00:13:40.976
然后，我们将它们添加到这里
And then, we add them to here so

215
00:13:40.976 --> 00:13:46.769
文件颜色将为纯白色，因此将为FFFFF
the file color will be pure white, so it'll be FFFFF
