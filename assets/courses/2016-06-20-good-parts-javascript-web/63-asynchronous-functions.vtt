WEBVTT

1
00:00:00.000 --> 00:00:03.911
[音乐]
[MUSIC]

2
00:00:03.911 --> 00:00:08.470
&gt；&gt；Douglas：所有这些的替代方法是异步函数。
&gt;&gt; Douglas: So an alternative to all of that are Asynchronous functions.

3
00:00:08.470 --> 00:00:11.460
异步函数，%s立即返回。
Asynchronous function,s return immediately.

4
00:00:11.460 --> 00:00:12.590
你叫它，它就会回来。
You call it, it comes right back.

5
00:00:12.590 --> 00:00:15.080
几乎没有时间的流逝。
There's almost no passage of time.

6
00:00:15.080 --> 00:00:18.690
而成功或失败将在未来以某种方式被决定
And success or failure will be determined somehow in the future

7
00:00:18.690 --> 00:00:21.149
当异步函数返回时。
when the Asynchronous function returns.

8
00:00:21.149 --> 00:00:22.109
目前还没有解决办法。
There is no solution yet.

9
00:00:22.109 --> 00:00:26.519
解决方案可能会在晚些时候出现，但不是现在。
The solution might happen maybe later but not now.

10
00:00:28.170 --> 00:00:33.350
所以我们喜欢在轮流系统中使用异步函数。
So we like to use Asynchronous functions in Turn systems.

11
00:00:33.350 --> 00:00:37.460
回合由外部事件(如消息传递)启动，或者
A Turn is started by an external event, such as delivery of a message, or

12
00:00:37.460 --> 00:00:41.439
异步请求、用户操作或时钟滴答的完成。
a completion of an asynchronous request, a user action, or the ticking of the clock.

13
00:00:42.520 --> 00:00:45.539
调用与该事件关联的回调函数，并
That a callback function associated with that event is called and

14
00:00:45.539 --> 00:00:47.240
它一直运行到完成。
it runs to completion.

15
00:00:47.240 --> 00:00:49.920
它不需要担心种族，因为没有别的
It doesn't have to worry about races because nothing else

16
00:00:49.920 --> 00:00:52.229
将得到运行，直到它完成。
will get to run until it's finished.

17
00:00:52.229 --> 00:00:53.517
当它返回时，转弯结束。
When it returns, the turn ends.

18
00:00:53.517 --> 00:00:57.320
所以不需要线程，没有比赛，没有死锁。
So there's no need for threads, no races, no deadlocks.

19
00:00:57.320 --> 00:01:00.759
这是一个非常可靠，非常简单的编程模型。
It's a very reliable, very straightforward programming model.

20
00:01:00.759 --> 00:01:04.234
我们称它为转弯是因为来自国际象棋的游戏。
We call it turns because of games that comes from chess.

21
00:01:04.234 --> 00:01:08.355
在国际象棋中，轮到我的时候，我可以控制棋子。
That in chess when it's my turn, I get to control the piece.

22
00:01:08.355 --> 00:01:13.629
你不能碰任何棋子，直到我完成，然后它交换。
You don't get to touch any pieces until my turn is done and then it exchanges.

23
00:01:13.629 --> 00:01:15.829
我们正在对函数和事件做类似的事情。
We're doing a similar thing with functions and events.

24
00:01:17.920 --> 00:01:20.890
但是当你使用转弯时，它要求你必须
But when you're using turns it requires that you have to

25
00:01:20.890 --> 00:01:25.650
遵循铁的转弯法则，那就是你永远不能阻挡。
follow the iron Law of Turns which says you must Never block.

26
00:01:25.650 --> 00:01:26.989
你永远不能等待。
You must Never wait.

27
00:01:26.989 --> 00:01:28.689
你必须快点完成。
You must Finish fast.

28
00:01:28.689 --> 00:01:31.159
如果您有任何不能的代码，则必须阻止或
If you have any code which can't, which has to block or

29
00:01:31.159 --> 00:01:33.560
必须等待，否则不能很快完成。
has to wait or can't Finish quickly.

30
00:01:33.560 --> 00:01:36.890
它必须被隔离并在单独的进程中运行。
It has to be isolated and run in a separate process.

31
00:01:36.890 --> 00:01:39.819
不允许在转弯系统中运行。
It is not allowed to run in the Turn system.

32
00:01:39.819 --> 00:01:41.039
所以这是一个成本权利。
So that's a cost right.

33
00:01:41.039 --> 00:01:43.030
它的意思是，你可以运行一些代码，但是
It means, you're allowed to run some code but

34
00:01:43.030 --> 00:01:45.969
有一些代码是绝对不允许你运行的。
there's some code which you're definitely not allowed to run.

35
00:01:48.150 --> 00:01:50.049
我们通常在事件循环中执行此操作。
We usually do this in an Event Loop.

36
00:01:50.049 --> 00:01:52.370
事件循环是基于TURN的系统。
Event loops are Turn based systems.

37
00:01:52.370 --> 00:01:53.545
而且他们都有利弊。
And they come with Pros and Cons.

38
00:01:53.545 --> 00:01:56.849
Pro是一个巨大的Pro。
The Pro is a huge Pro.

39
00:01:56.849 --> 00:01:59.750
它完全没有种族和死锁。
It is Completely free of races and deadlocks.

40
00:01:59.750 --> 00:02:01.709
这是一个巨大的优势。
And that's a huge advantage.

41
00:02:01.709 --> 00:02:05.109
任何应用程序都不应该被编写的系统。
Any system that applications should never be written.

42
00:02:05.109 --> 00:02:08.560
我认为在使用线程的系统中，因为它只是
I think in systems that use threads because it's just

43
00:02:08.560 --> 00:02:12.479
太难推理了，也太不可靠了。
too hard to reason about them and it's too unreliable.

44
00:02:12.479 --> 00:02:15.802
另一个专业是只有一个堆栈和
Another Pro is that there is Only one stack and

45
00:02:15.802 --> 00:02:18.348
我们每次转弯都重复使用那个堆栈。
we reuse that stack on every Turn.

46
00:02:18.348 --> 00:02:22.710
所以它的内存效率非常高，这根本不值得关注。
So it's extremely memory efficient which is of no interest at all.

47
00:02:22.710 --> 00:02:24.030
再说一遍，因为内存太便宜了。
Again, because memory is so cheap.

48
00:02:24.030 --> 00:02:26.502
事实上，我们的记忆效率是无关紧要的。
The fact that we're memory efficient is irrelevant.

49
00:02:26.502 --> 00:02:30.134
更重要的是，它的开销非常低。
What's more important is that it is Very low overhead.

50
00:02:30.134 --> 00:02:34.957
因为我们在事件循环中所做的就是从事件队列中删除一些内容，
Because all we're doing in the Event Loop is take something off an Event queue,

51
00:02:34.957 --> 00:02:38.349
把它交给一个函数，让它运行，接受下一个，依此类推。
hand it to a function, let it run take the next one so on.

52
00:02:38.349 --> 00:02:39.770
所以开销很小。
So there's very little overhead.

53
00:02:39.770 --> 00:02:42.860
而在线程系统中，您需要进行大量的锁定，
Whereas in a threaded system, you're doing lots of locking,

54
00:02:42.860 --> 00:02:45.569
您正在进行大量的流程切换和上下文切换。
you're doing lots of process switching, and context switching.

55
00:02:45.569 --> 00:02:48.275
哪些是CPU上最贵的东西知道怎么做。
Which are the most expensive things at CPU know how to do.

56
00:02:48.275 --> 00:02:51.574
在一个以术语为基础的系统中，你不是这样做的，你只是在做一些事情
In a term base system, you're not doing that you're just pull something off

57
00:02:51.574 --> 00:02:53.879
队列并运行它，拉它并运行它。
the queue and running it, pulling it and running it.

58
00:02:55.069 --> 00:02:57.618
它也是一个令人惊讶的弹性编程模型。
It's also a surprisingly Resilient programming model.

59
00:02:58.759 --> 00:03:03.217
如果一个回合失败，通常情况下程序仍然可以继续。
If a Turn fails, it's usually the case that the program can still go on.

60
00:03:03.217 --> 00:03:06.854
例如，如果您使用任何Web浏览器
For example, if you ever take any web browser and

61
00:03:06.854 --> 00:03:11.044
打开调试器，直接进入Web。
open up the debugger and just go wading out into the Web.

62
00:03:11.044 --> 00:03:14.610
你会看到几乎一连串的失败。
You're gonna see for almost a constant string of failures.

63
00:03:15.810 --> 00:03:18.812
令人惊讶的是，网页中总是有多少失败。
It's amazing how much failure is going on in web pages all the time.

64
00:03:18.812 --> 00:03:22.990
但是如果没有打开调试器，就看不到它。
But if you don't have a debugger open, you don't see it.

65
00:03:22.990 --> 00:03:26.120
现在，在线程环境中，
Now, in a threaded environment when one of those,

66
00:03:26.120 --> 00:03:30.280
当某件事失败时，将会有一个异常出现在
when something fails, then there'll be an exception in one of

67
00:03:30.280 --> 00:03:35.250
其中一个线程中的库存将会受到伤害，它将尝试恢复。
the stocks in one of the threads will get on wound and it'll try to recover.

68
00:03:35.250 --> 00:03:38.120
但与之相比，该线程现在可能处于不一致的状态
But that thread may now be in an inconsistent state compared

69
00:03:38.120 --> 00:03:41.829
其他线程，因为它失去了所有的上下文。
to the other threads because it's lost all of this context.

70
00:03:41.829 --> 00:03:44.829
因此，这可能导致级联线程故障。
And so, that could lead to cascading thread failures.

71
00:03:44.829 --> 00:03:47.550
因此，它往往是一个相当脆弱的模型。
And so, it tends to be a fairly brittle model.

72
00:03:47.550 --> 00:03:51.483
然而，我们在Web浏览器中看到的是，只要仍有任何按钮
Whereas, what we see in web browsers is as long as there is any button that still

73
00:03:51.483 --> 00:03:53.043
工作，用户可以找到它。
works and the user can find it.

74
00:03:53.043 --> 00:03:57.163
他们很有可能完成交易
There's a good chance they're going to be able to complete the transaction and

75
00:03:57.163 --> 00:04:00.741
从来不知道这件事在幕后发生了巨大的失败。
never know that the thing has been failing hugely behind the scenes.

76
00:04:00.741 --> 00:04:04.009
现在，这里有一些重要的缺点。
Now, there's some important cons here.

77
00:04:04.009 --> 00:04:08.310
最重要的缺点是程序决不能阻止必须完成的提交循环
The most important con is that Programs must never block commit turns must finish

78
00:04:08.310 --> 00:04:13.330
很快，我们必须遵守转弯法则，这绝对是一个骗局，但是
quickly that we have to obey the law of turns, that is definitely a con but

79
00:04:13.330 --> 00:04:15.000
这是必须要尊重的事情。
it's something that has to be respected.

80
00:04:16.629 --> 00:04:22.350
另外，另一个缺点是程序是由内而外编写的
Also, another con is that Programs are written inside out and

81
00:04:22.350 --> 00:04:23.819
这会让一些人哭泣。
that makes some people cry.

82
00:04:23.819 --> 00:04:25.060
他们称之为，这是控制的反转。
They call it, it's inversion of control.

83
00:04:25.060 --> 00:04:28.747
这是不自然的，这是一种不切实际的方式
It's unnatural, it's an unrealistic way to

84
00:04:28.747 --> 00:04:33.480
写一些我们做不到的程序太难了[听起来]。
write programs which we can't do it's too hard and [SOUND].

85
00:04:33.480 --> 00:04:35.769
但事实上，这并不难。
But actually it turns out it's not hard.

86
00:04:35.769 --> 00:04:36.970
其实很简单。
It's actually pretty easy.

87
00:04:38.079 --> 00:04:42.569
所以我们在事件驱动的系统中做事情，它们是基于的，
So we do things in Event driven systems, they're Turned based,

88
00:04:42.569 --> 00:04:45.480
没有先发制人，这真的很好，使他们非常可靠。
there's No pre-emption which is really good that makes them very reliable.

89
00:04:45.480 --> 00:04:47.329
我们将事件与行动联系起来。
We associate Events with actions.

90
00:04:47.329 --> 00:04:50.406
事实证明，尽管人们抱怨内心很难
And it turns out, despite the people who are complaining that it's very hard inside

91
00:04:50.406 --> 00:04:51.151
既不自然又不自然。
out and unnatural.

92
00:04:51.151 --> 00:04:55.649
它实际上非常容易，而且实际上初学者可以做到。
It's actually very Easy and in fact beginners can do it.

93
00:04:55.649 --> 00:04:57.564
其实很难。
It's actually very hard.

94
00:04:57.564 --> 00:05:02.516
事实上，即使在具有以下功能的系统上，所有用户界面也是如何实现的
And in fact, it's how all user interfaces are implemented even on systems that have

95
00:05:02.516 --> 00:05:03.293
穿线。
threading.

96
00:05:03.293 --> 00:05:07.973
因为事实证明这是实现用户界面的最佳方式。
Because it just turns out this is the best way to implement a User interface.

97
00:05:07.973 --> 00:05:11.750
线程具有事件循环和
Threading has Event loops and

98
00:05:11.750 --> 00:05:17.800
异步编程有很长的历史。
Asynchronous programming has a long history.

99
00:05:17.800 --> 00:05:22.557
它是在实时系统、实验系统和游戏系统中完成的
It was done in real time systems, in experimental systems and game systems for

100
00:05:22.557 --> 00:05:23.356
很长一段时间。
a long time.

101
00:05:23.356 --> 00:05:27.569
直到Macintosh它才进入主流。
It doesn't get into the mainstream until the Macintosh.

102
00:05:27.569 --> 00:05:32.889
Macintosh是第一款消费设备，尽管它的价格有点昂贵
Macintosh is the first consumer device although it's kind of expensive for

103
00:05:32.889 --> 00:05:33.779
消费设备。
a consumer device.

104
00:05:33.779 --> 00:05:38.670
其仅以基于回合的方式可编程。
Which is programmable only in a Turn based manner.

105
00:05:38.670 --> 00:05:39.329
在此之前
Prior to that,

106
00:05:39.329 --> 00:05:42.550
一切都在使用阻塞IO，一直回到4chan。
everything has been using blocking IO going all the way back to 4chan.

107
00:05:44.639 --> 00:05:48.206
我们对此的记忆是，当苹果推出时，
And our memory of this is that when Apple introduced, and

108
00:05:48.206 --> 00:05:51.415
史蒂夫·乔布斯于1984年推出了Macintosh。
Steve Jobs introduced the Macintosh in 1984.

109
00:05:51.415 --> 00:05:53.264
它改变了世界，而且
It changed the world, and

110
00:05:53.264 --> 00:05:58.590
使苹果成为世界上最成功的公司之一。
turned Apple into one of the world's most successful companies.

111
00:05:58.590 --> 00:06:00.519
事实并非如此。
And that's not actually what happened.

112
00:06:00.519 --> 00:06:02.689
这台机器几乎使苹果破产。
This machine came very close to bankrupting Apple.

113
00:06:03.870 --> 00:06:07.687
部分原因是他们不能卖出很多，原因是
And part of the reason was that they couldn't sell very many and the reason for

114
00:06:07.687 --> 00:06:11.274
那就是他们不能说服程序员为
that was that they couldn't convince programmers to write programs for

115
00:06:11.274 --> 00:06:12.055
这台机器。
this machine.

116
00:06:12.055 --> 00:06:15.654
因为他们以前从未见过事件循环
Because they'd never seen an Event Loop before and

117
00:06:15.654 --> 00:06:19.682
不知道如何在那个模型中写程序。
didn't understand how to write programs in that model.

118
00:06:19.682 --> 00:06:23.682
他们抱怨这不自然，太难了，从里到外，[声音]，
And they were complaining it's unnatural, it's too hard, it's inside out, [SOUND],

119
00:06:23.682 --> 00:06:24.764
我们不会这么做的。
we're not gonna do it.

120
00:06:24.764 --> 00:06:26.391
相反，他们为MS DOS写作。
Instead, they wrote for MS DOS.

121
00:06:26.391 --> 00:06:29.665
这是可怕的和糟糕的。
Which was horrible and crappy.

122
00:06:29.665 --> 00:06:35.558
这是有史以来最糟糕的事情之一，它的销量比这个高出几个订单。
One of the worst things ever imagined which outsold this by several orders.

123
00:06:35.558 --> 00:06:37.610
太荒谬了。
It was just ridiculous.

124
00:06:38.779 --> 00:06:40.610
所以改变这一切的是，
So the thing that changed this,

125
00:06:40.610 --> 00:06:45.600
使这台机器获得成功的是HyperCard。
which turned this machine into a success, was HyperCard.

126
00:06:46.779 --> 00:06:49.600
HyperCard是由Bill Atkinson构建的系统。
HyperCard was a system that was built by Bill Atkinson.

127
00:06:49.600 --> 00:06:51.562
比尔·阿特金森写道，QuickDraw，
Bill Atkinson had written, QuickDraw,

128
00:06:51.562 --> 00:06:54.261
这是最初的Macintosh的图形层。
which was the graphics layer of the original Macintosh.

129
00:06:54.261 --> 00:06:58.617
他还编写了第一个绘画程序，名为MacPaint。
He also wrote the first paint program called, MacPaint.

130
00:06:58.617 --> 00:07:03.511
今天很难将它识别为绘画程序，因为它只有两种颜色
It's hard today to recognize it as a paint program because it only had two colors

131
00:07:03.511 --> 00:07:04.615
黑白分明。
black and white.

132
00:07:04.615 --> 00:07:07.281
但这是一个非常免费的机器
But it was a very it came free with a machine and

133
00:07:07.281 --> 00:07:11.648
当你买了一台Macintosh电脑，这就是它的全部用途。
when you bought a Macintosh that was literally all there was to do with it.

134
00:07:11.648 --> 00:07:15.399
所以，人们用那幅叫做艺术的画做了很多事情。
And so, people did a lot of stuff with that painting called it art.

135
00:07:17.149 --> 00:07:19.526
他的下一个程序是HyperCard。
His next program was HyperCard.

136
00:07:19.526 --> 00:07:24.339
他拍摄了MacPaint，并允许它同时处理几张图片，
He took MacPaint and allowed it to work on several pictures at the same time,

137
00:07:24.339 --> 00:07:26.790
只有一个是可见的。
only one of which would be visible.

138
00:07:26.790 --> 00:07:32.067
他把这些图片称为卡片，文件就是一叠卡片或一堆卡片。
He called these pictures cards and that a file was a stack of cards or a stack.

139
00:07:32.067 --> 00:07:35.755
然后，他有了一个想法，他可以把按钮放在卡片上
And then, he got the idea that he could put buttons on the cards and

140
00:07:35.755 --> 00:07:39.312
将这些按钮连接到行为并将字段放在这些卡上
wire those buttons to behavior and put fields on those cards and

141
00:07:39.312 --> 00:07:41.408
允许这些字段包含文本。
allow those fields to contain text.

142
00:07:41.408 --> 00:07:44.141
然后他可以搜索并处理。
Which he could then search for and process on.

143
00:07:44.141 --> 00:07:48.812
然后，他添加了事件驱动编程
And then, he added an Event driven programming

144
00:07:48.812 --> 00:07:52.470
语言到所谓的超语言。
language to that called HyperTalk.

145
00:07:52.470 --> 00:07:55.909
这是一种事件驱动的编程语言。
Which was an Event driven programming language.

146
00:07:55.909 --> 00:08:01.899
里面的一切都是事件，你会说，on key up，
Everything in it was events and you would say things like, on key up,

147
00:08:01.899 --> 00:08:08.050
鼠标按下等，初学者喜欢HyperCard。
on mouse down and so on, and beginners loved HyperCard.

148
00:08:08.050 --> 00:08:09.839
他们把所有的东西都放进了超级卡里。
They got all into a HyperCard.

149
00:08:09.839 --> 00:08:11.420
他们在写东西。
They were writing stuff.

150
00:08:11.420 --> 00:08:13.879
他们从非常简单的小事件处理程序开始
They'd start with very simple little Event handlers and

151
00:08:13.879 --> 00:08:16.800
然后开始做一些更复杂的事情。
then start doing stuff that was much more sophisticated.

152
00:08:16.800 --> 00:08:21.399
发明了全新的应用程序类别，所有这些应用程序都运行在HyperCard中。
Inventing whole new classes of applications that all ran into HyperCard.

153
00:08:21.399 --> 00:08:24.620
有预测称HyperCard将成为未来的
There were predictions that HyperCard was going to be the future of

154
00:08:24.620 --> 00:08:25.528
软件开发。
software development.

155
00:08:26.959 --> 00:08:30.495
如果不是苹果把它撞到地上，它可能已经被毁了。
And it might have, had Apple not run it into the ground.

156
00:08:30.495 --> 00:08:35.880
Atkinson最初要求Steve Jobs将其分发给
Atkinson originally demanded of Steve Jobs that it be distributed for

157
00:08:35.880 --> 00:08:37.806
免费与Macintoshes。
free with Macintoshes.

158
00:08:37.806 --> 00:08:41.818
乔布斯也同意了，这就是他们几年来的做法。
And Jobs agreed, and that's how they did it for several years.

159
00:08:41.818 --> 00:08:43.790
一旦他们看到它是多么成功，
Once they saw how successful it was,

160
00:08:43.790 --> 00:08:46.788
他们决定我们需要弄清楚如何将其货币化。
they decided we need to figure out how to monetize this.

161
00:08:46.788 --> 00:08:51.024
在这样做的过程中，他们把它杀死了。
And in the process of doing that they killed it to death.

162
00:08:51.024 --> 00:08:57.591
但它起作用了，它启发了浏览器中发生的事情。
But it worked and it inspired stuff that happened in the browser.

163
00:08:57.591 --> 00:09:02.399
事实上，你可以看到COMPs概念中的家居用品
In fact, you see that home thing that the comps concept of

164
00:09:02.399 --> 00:09:05.315
主页来自HyperCard
the home page came out of HyperCard
