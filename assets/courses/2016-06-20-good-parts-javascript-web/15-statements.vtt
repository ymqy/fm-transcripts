WEBVTT

1
00:00:00.000 --> 00:00:04.726
[音乐]
[MUSIC]

2
00:00:04.726 --> 00:00:07.443
&gt；&gt；Douglas Crockford：我们有与您期望看到的相同的语句集
&gt;&gt; Douglas Crockford: We have the same set of statements that you would expect to see

3
00:00:07.443 --> 00:00:09.589
在C语言中，同样有一些不同之处。
in a C language, again with some differences.

4
00:00:12.329 --> 00:00:14.074
&gt；&gt；Douglas Crockford：我们已经标记为Break，这很好。
&gt;&gt; Douglas Crockford: We've got labeled break, which is good.

5
00:00:14.074 --> 00:00:16.783
所以如果你有嵌套的循环和开关
So if you've got nested loops and switches and

6
00:00:16.783 --> 00:00:20.469
东西，你可以打破内心深处的东西，这是好的。
stuff, you can break out of innermost things, which is good.

7
00:00:22.500 --> 00:00:26.179
我们已经得到了for语句，我们可以使用它来迭代数组，但是
We've got the for statement which we can use to iterate through arrays but

8
00:00:26.179 --> 00:00:27.539
我不建议使用那个。
I don't recommend using that.

9
00:00:27.539 --> 00:00:32.531
在ES5中，我们获得了forEach方法，即map方法，您可以在其中
In ES5 we got the forEach method, the map method where you can

10
00:00:32.531 --> 00:00:36.762
在数组的每个元素上调用一个函数。
have a function called on each element of the array.

11
00:00:36.762 --> 00:00:40.286
这几乎消除了对for循环的所有需要，所以我不使用
That eliminates almost all need for the for loops, so I don't use for

12
00:00:40.286 --> 00:00:41.149
再也不是圈圈了。
loops anymore.

13
00:00:42.570 --> 00:00:46.479
我们有一个for in语句，它遍历所有
We have a for in statement which iterates through all of the names of all

14
00:00:46.479 --> 00:00:48.439
对象的属性。
the properties of an object.

15
00:00:48.439 --> 00:00:51.600
不幸的是，它还会迭代所有继承的属性
Unfortunately it also iterates through all of the inherited properties

16
00:00:51.600 --> 00:00:53.140
这通常是你的方法，所以
which is usually your methods and so

17
00:00:53.140 --> 00:00:56.539
你的方法和你的数据混在一起，就会变得一团糟。
your methods get mixed up with your data and it gets to be a mess.

18
00:00:57.549 --> 00:01:02.189
幸运的是，在ES5中我们得到了Object.keys，它接受一个对象和
Fortunately we got, in ES5 we got Object.keys which takes an object and

19
00:01:02.189 --> 00:01:06.310
返回一个字符串数组，它只是可枚举的
returns an array of strings which is just the enumerable

20
00:01:06.310 --> 00:01:09.989
拥有对象的属性，这些属性通常是您想要的属性。
own properties of the object which are usually the ones you want.

21
00:01:09.989 --> 00:01:12.390
因此，我不建议在任何一个中使用for。
So I don't recommend using for in either.

22
00:01:14.483 --> 00:01:16.649
我们已经讨论了switch语句的问题。
We already talked about the problems with the switch statement.

23
00:01:19.930 --> 00:01:21.728
但是关于switch语句有一件事。
One thing about the switch statement though.

24
00:01:21.728 --> 00:01:25.347
JavaScript以一种方式改进了switch语句，并且
JavaScript improved the switch statement in one way and

25
00:01:25.347 --> 00:01:29.870
也就是说，开关值不需要是数字。
that is that the switch value does not need to be a number.

26
00:01:29.870 --> 00:01:34.462
它可以是一个非常漂亮的字符串，因为您可以打开更多的
It can be a string which can be very nice cuz you can switch on a greater set of

27
00:01:34.462 --> 00:01:35.066
价值观。
values.

28
00:01:35.066 --> 00:01:39.729
并且大小写的值可以是表达式，它们不必是常量。
And the case values can be expressions, they don't have to be constants.

29
00:01:39.729 --> 00:01:44.819
因此这在进行国际化应用程序时非常有用，您可以
So that can be useful in doing internationalized applications that you

30
00:01:44.819 --> 00:01:52.180
可以针对将返回该语言的yes值的函数进行大小写。
can case against a function which will return the yes value for this language.

31
00:01:52.180 --> 00:01:55.996
这可能是件好事，&gt；&gt；Douglas Crockford：我们有例外
It could be a nice thing, &gt;&gt; Douglas Crockford: We have exception

32
00:01:55.996 --> 00:01:58.090
用这种语言处理，这是很好的。
handling in this language which is nice.

33
00:01:59.420 --> 00:02:04.310
在ES3之前我们没有，这意味着你必须编写程序
Before ES3 we didn't, which meant that you had to write programs

34
00:02:04.310 --> 00:02:09.080
从来没有出过差错，因为没有办法从任何事情中恢复过来，
that never went wrong ever because there is no way to recover from anything,

35
00:02:09.080 --> 00:02:11.229
这很难，所以我们现在有例外。
that was hard, so we got exceptions now.

36
00:02:12.360 --> 00:02:14.969
你可以抛出字面上的任何值。
You can throw literally any value.

37
00:02:14.969 --> 00:02:18.379
有一个惯例，你抛出的东西来自一个新的
There's a convention that you throw something that comes from a new

38
00:02:18.379 --> 00:02:24.210
构造函数，与创建具有Name属性的对象相同，
constructor, which is the same as creating an object that has a name property,

39
00:02:24.210 --> 00:02:25.829
和消息属性。
and a message property.

40
00:02:25.829 --> 00:02:27.870
但实际上，你可以扔任何东西。
But in fact, you can throw literally anything.

41
00:02:29.490 --> 00:02:35.250
因此，异常的使用方式与Java中有很大的不同。
So the way that exceptions are used is very different than in Java.

42
00:02:35.250 --> 00:02:39.670
因此异常处理非常简单，因为我们没有异常类型。
And so exception handling is very simple because we don't have exception types.

43
00:02:39.670 --> 00:02:43.379
只有一个捕获块，它捕获了所有内容。
There's only one catch block, and it catches everything.

44
00:02:43.379 --> 00:02:46.400
一般来说，它会忽略它捕捉到的任何东西。
And generally, it's going to ignore whatever it caught.

45
00:02:46.400 --> 00:02:47.650
它不在乎发生了什么。
It doesn't care what happened.

46
00:02:47.650 --> 00:02:51.319
它所知道的是或者它所关心的只是没有起作用，所以
All it knows is or all it cares about is that didn't work, so

47
00:02:51.319 --> 00:02:52.360
我们试试别的。
let's try something else.

48
00:02:52.360 --> 00:02:53.659
也许它会起作用。
Maybe it'll work instead.

49
00:02:54.900 --> 00:03:00.199
因此在Java中，您往往会看到用于实现某种形式计算机的异常，
So in Java you tend to see exceptions used to implement a form of computer go to,

50
00:03:00.199 --> 00:03:02.729
在那里可以获得非常复杂的控制路径
where you can get very complicated control paths

51
00:03:02.729 --> 00:03:05.120
由抛出异常的人指示的。
that are dictated by whoever threw the exception.

52
00:03:06.199 --> 00:03:08.780
我认为这可能是一个很大的错误。
And I think that was probably a big mistake.

53
00:03:08.780 --> 00:03:10.819
JavaScript没有犯那个特定的错误。
JavaScript didn't make that particular mistake.

54
00:03:10.819 --> 00:03:16.289
所以我们倾向于正确地使用异常。
So we tend to use exceptions properly.

55
00:03:16.289 --> 00:03:18.400
只在失败时使用它们。
Use them only for failures.

56
00:03:18.400 --> 00:03:23.250
我们永远不会使用异常来执行正常的控制路径。
We'd never do normal control paths using exceptions.

57
00:03:24.900 --> 00:03:25.650
&gt；&gt；扬声器2：对不起。
&gt;&gt; Speaker 2: Sorry.

58
00:03:25.650 --> 00:03:26.370
&gt；&gt；Douglas Crockford：是的。
&gt;&gt; Douglas Crockford: Yeah.

59
00:03:26.370 --> 00:03:27.599
&gt；&gt；发言人2：你能澄清一下吗？
&gt;&gt; Speaker 2: Could you clarify that?

60
00:03:27.599 --> 00:03:31.789
我不明白那句话。
I didn't understand that statement.

61
00:03:31.789 --> 00:03:36.227
&gt；&gt；Douglas Crockford：所以在Java中，人们倾向于研究为什么失败，
&gt;&gt; Douglas Crockford: So in Java there's a tendency to look at why did this fail,

62
00:03:36.227 --> 00:03:36.870
好吧。
right.

63
00:03:36.870 --> 00:03:40.286
&gt；&gt；扬声器2：不同的原因，不同的捕获，尝试异常A，异常B，
&gt;&gt; Speaker 2: Different reasons, different catch, try exception A, exception B,

64
00:03:40.286 --> 00:03:40.960
例外C
exception C.

65
00:03:40.960 --> 00:03:41.771
&GT；&GT；道格拉斯·克罗克福德：是的，没错。
&gt;&gt; Douglas Crockford: Yeah, exactly.

66
00:03:41.771 --> 00:03:47.444
它有一个完整的例外情况，所以你知道谁抛出了例外，
It got a whole exception cases, and so you’ve got who threw the exception,

67
00:03:47.444 --> 00:03:51.254
决定如何遍历代码和
deciding how you're gonna go through your code and

68
00:03:51.254 --> 00:03:57.259
这通常意味着例外并不是真正的例外。
that usually means that the exceptions are not actually exceptional.

69
00:03:57.259 --> 00:04:00.860
它们只是交替的控制路径，对吧？
They're just alternate control paths, right?

70
00:04:00.860 --> 00:04:05.002
有时它是由你所拥有的类型系统中的弱点所驱动的
And sometimes it's motivated by weakness in the type system that you've got

71
00:04:05.002 --> 00:04:07.168
希望返回int但
something that wants to return an int but

72
00:04:07.168 --> 00:04:11.514
其他的事情也会发生，这并不是例外，只是不是int。
something else is gonna happen which is not exceptional, it's just not an int.

73
00:04:11.514 --> 00:04:17.449
[声音]我用完了值，所以你会抛出异常。
[SOUND] I'm out of values and so you'll throw exception instead.

74
00:04:17.449 --> 00:04:21.117
而在JavaScript中，因为我们是松散类型的，所以可以传递一个数字或
Whereas in JavaScript because we're loosely typed you can pass a number or

75
00:04:21.117 --> 00:04:24.720
可以传递未定义的，也可以传递字符串，也可以传递对象，
you can pass undefined or you can pass a string, or you can pass an object,

76
00:04:24.720 --> 00:04:27.439
你可以归还任何你需要的东西。
you can return anything that you need to.

77
00:04:27.439 --> 00:04:30.509
所以这些都不是例外。
And so these things are not exceptions.

78
00:04:30.509 --> 00:04:33.230
它们只是正常处理的更多模式。
They're just more modes of normal processing.

79
00:04:34.409 --> 00:04:36.319
因此，您的控制流往往会变得更简单。
So your control flows tend to get much simpler.

80
00:04:38.610 --> 00:04:41.759
还有其他问题吗？
Any other questions?

81
00:04:41.759 --> 00:04:43.769
好了，这一小时到此结束。
Okay, so that's the end of this hour.

82
00:04:43.769 --> 00:04:45.649
所以让我们休息一下，我们会回来的。
So let's take a break and we'll come back.

83
00:04:45.649 --> 00:04:48.560
&gt；&gt；演讲者3：嘿，我有一个来自聊天的快速问题。
&gt;&gt; Speaker 3: Hey I have a quick question from chat.

84
00:04:48.560 --> 00:04:54.379
人们问你为什么不使用for循环，而是喜欢每个循环。
People were asking why you don't use for loops and instead favor for each.

85
00:04:54.379 --> 00:04:55.090
&gt；&gt；Douglas Crockford：是的。
&gt;&gt; Douglas Crockford: Yeah.

86
00:04:55.090 --> 00:04:58.699
对每个人来说都是更好的选择。
For each is just much nicer.

87
00:05:00.040 --> 00:05:04.069
一旦你习惯了它，它就更具可读性了。
Once you get used to it, it's more readable.

88
00:05:04.069 --> 00:05:06.949
在该语言的未来版本中，它将是可瘫痪的。
In future versions of the language it's going to be paralyzable.

89
00:05:09.459 --> 00:05:11.139
这是一个更现代的建筑。
It's a more modern construct.

90
00:05:11.139 --> 00:05:11.990
它更实用。
It's more functional.

91
00:05:11.990 --> 00:05:13.370
更容易作曲。
It's more composable.

92
00:05:13.370 --> 00:05:15.600
这在各个方面都更好。
It's better in every aspect.

93
00:05:17.220 --> 00:05:22.019
&gt；&gt；演讲者3：那你不能为每个人留下一个回执这一事实呢？
&gt;&gt; Speaker 3: What about the fact that you can't leave a for each with a return?

94
00:05:22.019 --> 00:05:22.839
&GT；&GT；道格拉斯·克罗克福德：你说什么？
&gt;&gt; Douglas Crockford: I'm sorry?

95
00:05:22.839 --> 00:05:26.038
&gt；&gt；演讲者3：事实是你不能为每个人留下a，就像stop a for
&gt;&gt; Speaker 3: The fact that you can't leave a for each, like stop a for

96
00:05:26.038 --> 00:05:26.970
每个循环。
each loop.

97
00:05:26.970 --> 00:05:30.702
&gt；&gt；Douglas Crockford：你可以，你可以代替每次使用，
&gt;&gt; Douglas Crockford: You can, you can instead of using for each use every,

98
00:05:30.702 --> 00:05:35.310
然后你可以让一些东西返回假，然后它就停止了。
and then you can have something return false and then it stops.
