WEBVTT

1
00:00:00.000 --> 00:00:03.708
[音乐]
[MUSIC]

2
00:00:03.708 --> 00:00:07.900
&gt；&gt；Douglas Crockford：switch语句是Thompson的另一个东西。
&gt;&gt; Douglas Crockford: The switch statement is another of Thompson's things.

3
00:00:07.900 --> 00:00:12.390
它是仿照托尼·霍尔的案例陈述，或受其启发，
It was modeled after, or inspired by Tony Hoare's case statement,

4
00:00:12.390 --> 00:00:16.760
这是一个绝妙的想法，我们将有几个独立的条款，并且
which was this brilliant idea that we will have several independent clauses, and

5
00:00:16.760 --> 00:00:20.100
我们将根据表达式的值选择其中一个。
we will pick one of them based on the value of an expression.

6
00:00:20.100 --> 00:00:26.239
绝妙的想法，但汤普森以计算Goto的形式重新解释了它，这
Brilliant idea, but Thompson reinterprets it in the form of a computed GOTO, which

7
00:00:26.239 --> 00:00:32.377
是Fortran中的另一个东西，我们后来认定它是个坏主意，除了
is another thing that was in Fortran which we've since decided is a bad idea, except

8
00:00:32.377 --> 00:00:38.192
它以switch语句的形式存在于几乎所有的现代语言中。
it survives in almost all modern languages in the form of the switch statement.

9
00:00:40.856 --> 00:00:45.293
&gt；&gt；Douglas Crockford：危险就是落差危险，在任何情况下，
&gt;&gt; Douglas Crockford: And the hazard is the fallthrough hazard, that in any case,

10
00:00:45.293 --> 00:00:51.299
如果您没有明确中断，它将自动落入下一个案例。
if you do not explicitly disrupt, it will automatically fall into the next case.

11
00:00:52.570 --> 00:00:55.950
在我开发JSLint的早期，有人写信给我，
And early on when I was developing JSLint, someone wrote to me and

12
00:00:55.950 --> 00:01:01.210
建议JSLint对此发出警告，因为这真的很难
recommended that JSLint give warnings on this because it's really difficult

13
00:01:01.210 --> 00:01:05.209
为了查看代码并观察一个案例正在进入另一个案例，
to look at the code and observe that one case is falling through into another,

14
00:01:05.209 --> 00:01:08.960
因为语法的设计是为了掩盖这一事实。
because the syntax is designed to obscure that fact.

15
00:01:10.599 --> 00:01:13.200
我想了很久，我给他写了回信
And I thought about it deeply, and I wrote back to him and

16
00:01:13.200 --> 00:01:17.560
我说，我可以理解这种危险，但有一个很棒的
I said, I can understand that hazard, but there's this wonderful

17
00:01:17.560 --> 00:01:20.969
如果你能让一个箱子掉进下一个箱子，你可以得到优雅。
elegance that you can get if you can cause one case to fall into the next one.

18
00:01:22.900 --> 00:01:29.245
这是一件有价值的事情，错误可能会发生，但它几乎不会发生。
And that's a valuable thing, and the error can happen, but it hardly ever happens.

19
00:01:29.245 --> 00:01:33.807
所以考虑到你有可能发生的好事和不太可能发生的事
And so given you've got this good thing that can happen versus this unlikely

20
00:01:33.807 --> 00:01:38.451
糟糕的是，我不会测试，我不会给它警告。
bad thing, I'm not gonna test for that, I'm not gonna give warnings on it.

21
00:01:38.451 --> 00:01:40.009
我认为这实际上是语言的一个很好的部分。
I think this is actually a good part of the language.

22
00:01:41.930 --> 00:01:45.911
第二天，同一个人写信给我说，我在JSLint中发现了一个bug。
The next day, the same guy wrote to me and said, I found a bug in JSLint.

23
00:01:45.911 --> 00:01:47.394
所以我说，好的，很好，谢谢。
So I said, okay, good, thank you.

24
00:01:47.394 --> 00:01:52.283
我打开调试器，结果是，你知道这是怎么回事，对吧？
I open the debugger and it turns out, you know where this is going, right?

25
00:01:52.283 --> 00:01:52.974
&gt；&gt；扬声器2：mm-hm。
&gt;&gt; Speaker 2: Mm-hm.

26
00:01:52.974 --> 00:01:54.329
&gt；&gt；Douglas Crockford：我有一个案子失败了。
&gt;&gt; Douglas Crockford: I had a case that was falling through.

27
00:01:55.640 --> 00:02:00.739
在那一刻，我获得了开悟，因为原来我们花了
And in that moment, I achieved enlightenment cuz it turns out we spend

28
00:02:00.739 --> 00:02:06.180
我们大部分时间制造和修复我们自己的错误。
most of our time making and fixing our own bugs.

29
00:02:06.180 --> 00:02:08.789
我们认为，我今天做的事情，我是强力打字。
We think, what I do today, I was power typing.

30
00:02:08.789 --> 00:02:09.849
我在打字。
I was typing.

31
00:02:09.849 --> 00:02:12.180
我们大部分时间都在说，我的上帝，我做了什么？
We spend most of our time saying, my god, what have I done?

32
00:02:13.370 --> 00:02:16.659
然后我们找到了它，我们得到了这种小小的快感。
And then we find it, and we get this little rush of euphoria.

33
00:02:16.659 --> 00:02:17.479
我又做了一次。
I did that again.

34
00:02:17.479 --> 00:02:19.289
砰的一声，我们忘记了。
Boom, and we forget.

35
00:02:19.289 --> 00:02:21.439
所以我们失去了这么多时间。
And so we have all this lost time.

36
00:02:21.439 --> 00:02:24.849
我们忘记了我们在追逐虫子上花了多少时间。
We forget about how much time we spend chasing bugs.

37
00:02:26.210 --> 00:02:28.659
我们没有从错误中吸取教训。
And we fail to learn from our mistakes.

38
00:02:28.659 --> 00:02:32.740
但是在这个特殊的场合，它是如此的羞辱，因为我刚刚给了
But on this particular occasion, it was so humiliating, because I had just given

39
00:02:32.740 --> 00:02:38.199
关于这是一个很好的部分的演讲，然后我看到，由同一个人，
a speech about how this was a good part and then I'm shown, by the same guy,

40
00:02:38.199 --> 00:02:42.500
我自己的代码中的一个bug是由我所捍卫的东西引起的。
a bug in my own code that was caused by that thing that I was defending.

41
00:02:42.500 --> 00:02:45.860
因为太丢人了，我无法避免学到这一课，
And because it was so humiliating, I could not avoid learning the lesson,

42
00:02:45.860 --> 00:02:49.840
也就是说，如果我从来不是故意掉下去的，
which was, if I never intentionally fall through,

43
00:02:49.840 --> 00:02:52.780
我可以找到我不小心跌倒的案例。
I can find the cases where I accidentally fall through.

44
00:02:52.780 --> 00:02:56.763
事实证明这更有价值，这让我重新审视
And that turns out to be much more valuable, and it caused me to re-examine

45
00:02:56.763 --> 00:03:00.824
我的分析，结果证明我在每一个方面都是完全错误的。
my analysis, and it turned out I was completely wrong in every aspect of it.

46
00:03:00.824 --> 00:03:05.360
我以为我在权衡时很合乎逻辑，但我没有。
I thought I was being so logical in measuring the tradeoffs, but I wasn't.

47
00:03:05.360 --> 00:03:09.465
我说过我在为这种美妙的优雅而争辩？
Where I said I was arguing in favor of that wonderful elegance?

48
00:03:09.465 --> 00:03:12.264
不，事实证明这真的是一件坏事，因为它
No, it turns out that's a really bad thing because it

49
00:03:12.264 --> 00:03:15.639
导致这些条款的耦合，这些条款应该是独立的。
causes coupling of these clauses which should be independent.

50
00:03:15.639 --> 00:03:18.229
这意味着代码并不是真的易碎，
And that means that the code is not really brittle,

51
00:03:18.229 --> 00:03:20.579
如果你需要修改一个条款，
that if you need to make a change to one clause,

52
00:03:20.579 --> 00:03:24.270
这将影响其他条款，这些条款现在可能会溢出到其中。
that's going to affect other clauses which can now be spilling into it.

53
00:03:24.270 --> 00:03:29.479
所以你让程序更难维护，你让它更有可能
So you're making the program harder to maintain, you're making it more likely

54
00:03:29.479 --> 00:03:34.900
因为它经过简单的修改，所以引入了bug。
to have bugs introduced to it as a result of its going through simple revisions.

55
00:03:34.900 --> 00:03:39.024
因为我们应该一直在做的就是试图分离事物，对吗？
Because what what we should always be doing is trying to uncouple things, right?

56
00:03:39.024 --> 00:03:43.253
但这会导致隐式耦合，这是不好的。
But this causes an implicit coupling, which is bad.

57
00:03:43.253 --> 00:03:47.800
但更糟糕的是当我说，这几乎不会发生。
But even worse was when I said, that hardly ever happens.

58
00:03:47.800 --> 00:03:50.840
这是另一种说法，对吧。
That's another way of saying it happens, right.

59
00:03:50.840 --> 00:03:52.520
我们不希望它永远发生。
And we don't want it to ever happen.

60
00:03:52.520 --> 00:03:55.689
我们并不是不希望它经常发生，我们希望它永远不会发生，
It's not like we don't want it happen very often, we want it never to happen,

61
00:03:55.689 --> 00:03:57.400
因为我们希望我们的程序是完美的。
because we want our programs to be perfect.

62
00:03:57.400 --> 00:03:59.969
我们不能容忍它出了差错。
We can't tolerate it ever going wrong.

63
00:03:59.969 --> 00:04:01.257
这是系统一号通话。
This is System One talking.

64
00:04:01.257 --> 00:04:04.490
系统一数学很糟糕。
System One is terrible at math.

65
00:04:04.490 --> 00:04:08.039
系统一比所有系统给予更多的重量。
System One gives most more weight than all.

66
00:04:08.039 --> 00:04:12.710
系统一认为零并且不是很多是相同的。
System One thinks zero and not very many are the same.

67
00:04:13.879 --> 00:04:15.080
他们不是。
They're not.

68
00:04:15.080 --> 00:04:19.509
任何时候我们在没有任何数据的情况下进行数学论证，
Any time we're making mathematical arguments without any data,

69
00:04:19.509 --> 00:04:23.430
这可能是系统一的说法，而且很有可能我们错了。
that's probably System One talking, and there's a really good chance we're wrong.

70
00:04:23.430 --> 00:04:30.100
因为它是猜测，它不知道，而我们一直在这样做。
Cuz it's guessing, it doesn't know, and we do this all the time.

71
00:04:32.009 --> 00:04:34.810
所以一个好的风格可以帮助制作出更好的节目。
So a good style can help produce better programs.

72
00:04:34.810 --> 00:04:39.800
风格不应该是关于个人喜好或自我表达或品味。
Style should not be about personal preference or self-expression or taste.

73
00:04:39.800 --> 00:04:42.112
它应该是关于降低你的错误率。
It should be about reducing your error rate.

74
00:04:42.112 --> 00:04:45.519
我们做的每一个关于如何编码这件事的决定，
Every decision we make about how are we gonna code this thing,

75
00:04:45.519 --> 00:04:49.843
我们将如何表达这个东西，它应该是关于我们如何最好地去
how we're gonna express this thing, it should be about how are we best going to

76
00:04:49.843 --> 00:04:52.281
制作一个完美的程序？
make a program which is going to be perfect?

77
00:04:52.281 --> 00:04:53.800
因为归根结底，这就是目标。
Because ultimately, that's the goal.

78
00:04:55.430 --> 00:04:59.129
现在我们可以从文学风格中得到一些关于编程风格的线索。
Now we can get some clues about programming style from the literary style.

79
00:04:59.129 --> 00:05:03.250
罗马人写的拉丁文都是大写的，没有分词或标点符号，而且
The Romans wrote Latin all in uppercase with no word breaks or punctuation, and

80
00:05:03.250 --> 00:05:03.920
对他们有用。
it worked for them.

81
00:05:03.920 --> 00:05:08.050
你可以去罗马，但你仍然可以看到这些字母，我们称之为罗马字母
You can go to Rome and you can still see these letters, we call them Roman letters

82
00:05:08.050 --> 00:05:13.165
今天，因为他们用的就是这个，刻在石头上，看起来就像这样，
today, cuz that's what they used, engraved in stone, looks just like this,

83
00:05:13.165 --> 00:05:16.519
除了他们是用拉丁文写的，但字母是一样的。
except they were writing in Latin, but it's the same letters.

84
00:05:18.490 --> 00:05:19.120
这对他们很管用。
And it worked for them.

85
00:05:19.120 --> 00:05:25.149
他们有一个非常强大的文明，占领了世界的很大一部分，
They had a very powerful civilization that took over a large part of the world,

86
00:05:25.149 --> 00:05:26.490
几个世纪以来。
held it for centuries.

87
00:05:27.620 --> 00:05:29.139
虽然在这方面有不明确的地方，
Although there are ambiguities in this,

88
00:05:29.139 --> 00:05:32.990
例如，我可以将第三行读为，now或db reaks。
for example I can read the third line as, now or db reaks.

89
00:05:34.680 --> 00:05:39.100
这是一种可能的解读，所以这些类型的歧义可能会导致错误。
It's a possible reading, so those sorts of ambiguities can lead to errors.

90
00:05:40.550 --> 00:05:45.279
但在君士坦丁建立基督教之前，它对他们起了很长一段时间的作用
But it worked for them for a long time, until Constantine establishes Christianity

91
00:05:45.279 --> 00:05:47.480
作为罗马帝国的官方宗教。
as the official religion of the Roman Empire.

92
00:05:47.480 --> 00:05:52.312
在这一点上，有必要复制这些文件和
At this point it becomes necessary to make copies of these documents and

93
00:05:52.312 --> 00:05:54.819
把它们分发到世界各地。
distribute them all over the world.

94
00:05:54.819 --> 00:05:58.040
问题是，他们没有这些文件的原件，
And the problem is, they don't have originals for any of those documents,

95
00:05:58.040 --> 00:06:00.370
他们所有的都是复印件。
all they have are copies of copies of copies of copies.

96
00:06:00.370 --> 00:06:03.839
结果发现，没有两个副本是一致的。
And it turns out, no two copies agree.

97
00:06:03.839 --> 00:06:06.285
每次复制它们都会发生变异。
That every time they are copied, they mutate.

98
00:06:06.285 --> 00:06:10.314
如果你试图建立一个派生出
And that's a problem if you're trying to establish an institution that derives

99
00:06:10.314 --> 00:06:14.180
它的权威来自于这个词，没有人能确切地知道这个词是什么。
its authority from the word and nobody can know for certain what the word was.

100
00:06:14.180 --> 00:06:18.223
所以中世纪的模仿者引入了小写，分词，和
So medieval copyists introduce lowercase, word breaks, and

101
00:06:18.223 --> 00:06:21.490
在他们的手稿中加入标点符号。
punctuation into their manuscripts.

102
00:06:21.490 --> 00:06:24.519
而这些创新有助于降低他们的错误率。
And these innovations helped reduce their error rate.

103
00:06:24.519 --> 00:06:28.399
它使复制手稿变得更容易，而不会引入错误。
It made it easier to copy a manuscript without introducing errors into it.

104
00:06:28.399 --> 00:06:30.629
这是一个非常重要的创新。
And that was a really important innovation.

105
00:06:31.889 --> 00:06:35.978
它还出人意料地使手稿更容易阅读。
It also unexpectedly made the manuscripts easier to read.

106
00:06:37.180 --> 00:06:40.340
所以当古腾堡开始用活字印刷时，
So when Gutenberg begins printing with movable type,

107
00:06:40.340 --> 00:06:44.509
他复制了那些惯例，我们还在使用它们。
he copies those conventions and we're still using them.

108
00:06:44.509 --> 00:06:47.786
我们现在有几个世纪使用小写的文学风格的经验，
We now have centuries of experience with literary style using lowercase,

109
00:06:47.786 --> 00:06:49.250
分词和标点符号。
word breaks, and punctuation.

110
00:06:49.250 --> 00:06:54.909
以一种特殊的方式，我们从小就接受过阅读和阅读的训练
In a particular way, we've all been trained since we were children to read and

111
00:06:54.909 --> 00:06:57.029
用那种风格写。
write in that style.

112
00:06:57.029 --> 00:07:01.653
事实证明，这是非常有价值的，你可以很容易地分辨出其中的区别
And that turns out to be really valuable, that you can easily tell the difference

113
00:07:01.653 --> 00:07:05.810
在好的写作和不好的写作之间，它是否符合这一点？
between good writing and bad writing by, does it conform to this or not?

114
00:07:07.939 --> 00:07:11.230
因此，良好的使用风格可以帮助减少错误的发生。
So good use of style can help reduce the occurrence of errors.

115
00:07:12.490 --> 00:07:16.439
我最喜欢的英文风格手册之一是风格元素。
One of my favorite style manuals in English is the Elements of Style.

116
00:07:16.439 --> 00:07:19.189
这是一本小册子，是威廉·斯特伦克自己出版的
It's a little pamphlet that was self published by William Strunk about

117
00:07:19.189 --> 00:07:20.680
100年前
100 years ago.

118
00:07:20.680 --> 00:07:24.319
它已经被EB White和
It's since been updated by EB White and

119
00:07:24.319 --> 00:07:29.899
它需要更新，因为英语从那时起一直在不断发展，但是
it needed to be updated because English has continued to evolve since then, but

120
00:07:29.899 --> 00:07:33.930
斯特伦克的大部分建议仍然很好。
most of Strunk's advice is still really good.

121
00:07:33.930 --> 00:07:37.740
许多计算机科学家将其用作模型
And a number of computer scientists have used it as a model for

122
00:07:37.740 --> 00:07:43.029
写关于编程风格的书非常有效。
writing books on programming style very, very effectively.

123
00:07:44.759 --> 00:07:47.600
所以程序必须清楚地与人沟通。
So programs must communicate clearly to people.

124
00:07:47.600 --> 00:07:50.590
我们应该把我们的节目看作是文学作品。
We should think of our programs as literary works.

125
00:07:50.590 --> 00:07:54.500
而且至少同样重要的是，他们向人们传达他们的所作所为
And it's at least as important that they communicate what they do to people

126
00:07:54.500 --> 00:07:56.180
就像他们对机器做的那样。
as they do to the machine.

127
00:07:56.180 --> 00:08:00.257
写一些真的很草率的东西是不够好的，想着，好吧，
It's not good enough to write something that's really sloppy, thinking that, well,

128
00:08:00.257 --> 00:08:03.360
如果我能让它通过编译器，我已经完成了我的工作。
if I can get it past the compiler, I've done my work.

129
00:08:03.360 --> 00:08:07.170
因为，如果这个程序会被使用不止一次，它将会是
Because, if the program's ever gonna be used more than once, it's gonna to be

130
00:08:07.170 --> 00:08:10.639
对某人来说是必要的，能够理解它并使它变得更好。
necessary for somebody to be able to understand it and make it better.

131
00:08:11.930 --> 00:08:15.930
因此，我们需要让程序传达它们所做的事情，以便允许
And so we need to make the programs communicate what they do in order to allow

132
00:08:15.930 --> 00:08:16.540
我们去做那件事。
us to do that.

133
00:08:16.540 --> 00:08:19.240
否则，我们就是在让自己或他人失败。
Otherwise, we're setting ourselves up or others for failure.
