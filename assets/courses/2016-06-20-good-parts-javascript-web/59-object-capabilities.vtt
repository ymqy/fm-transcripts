WEBVTT

1
00:00:00.000 --> 00:00:04.338
[音乐]
[MUSIC]

2
00:00:04.338 --> 00:00:06.833
&GT；&GT；道格拉斯·克罗克福德：但最小权力原则是有希望的。
&gt;&gt; Douglas Crockford: But there is hope in the principle of least authority.

3
00:00:06.833 --> 00:00:11.750
它告诉我们，任何软件单元都应该具有这样的能力
Which teaches that any unit of software should be given just the capability

4
00:00:11.750 --> 00:00:14.179
因为它需要做它的工作，而不是更多。
as it needs to do its work and no more.

5
00:00:17.114 --> 00:00:19.969
&gt；&gt；Douglas Crockford：能力可以在Actor模型中看到，
&gt;&gt; Douglas Crockford: Capabilities can be seen in the Actor model,

6
00:00:19.969 --> 00:00:22.609
这是1973年在麻省理工学院发现的。
which was discovered at MIT in 1973.

7
00:00:22.609 --> 00:00:28.530
对演员模型的研究导致了Scheme的发明，
The investigation of the Actor model led to the invention of Scheme,

8
00:00:28.530 --> 00:00:32.390
这导致了更高阶的函数和所有的好东西。
which led to higher order functions and all that good stuff.

9
00:00:32.390 --> 00:00:33.670
它也会导致演员。
It also lead to Actors.

10
00:00:34.920 --> 00:00:38.289
因此在Actor模型中，参与者是一个计算实体。
So in the Actor model, an actor is a computational entity.

11
00:00:38.289 --> 00:00:43.450
这就像异步对象系统。
It's like asynchronous object systems.

12
00:00:43.450 --> 00:00:48.100
参与者只有在知道其地址时才能向另一个参与者发送消息。
An actor can send a message to another actor only if it knows its address.

13
00:00:48.100 --> 00:00:51.219
参与者可以创建新参与者，参与者可以创建消息。
An actor can create a new actor and an actor can create messages.

14
00:00:53.409 --> 00:00:57.564
Web工作者有点像参与者，Web服务不是，但应该是。
Web workers are kind of like actors web services aren't but should.

15
00:00:57.564 --> 00:01:02.435
有一个叫Waterken的系统
There is a system called Waterken that was

16
00:01:02.435 --> 00:01:06.844
由HP实验室开发，该实验室将After模型应用于Web服务。
developed at HP Labs, which applies the after model to web services.

17
00:01:06.844 --> 00:01:10.894
我认为这个东西很棒，它给你提供了非常可靠的系统。
I think the stuff is brilliant, it gives you very reliable systems.

18
00:01:10.894 --> 00:01:13.215
我强烈建议进入这一领域。
I highly recommend getting into that.

19
00:01:17.412 --> 00:01:21.478
&gt；&gt；Douglas Crockford：这就是演员所做的事情之一
&gt;&gt; Douglas Crockford: And so one of the things that comes out of the the Actor

20
00:01:21.478 --> 00:01:24.265
模型是能力的概念。
model is the idea of capabilities.

21
00:01:25.280 --> 00:01:30.599
所以对参与者的地址是一种能力，或者对一个对象的引用是一种能力。
So an address to an actor is a capability or reference to an object is a capability.

22
00:01:32.439 --> 00:01:35.820
所以让我们将功能应用于面向对象编程，
So let's apply capabilities to object-oriented programming,

23
00:01:35.820 --> 00:01:37.579
查看对象功能。
looking at object capabilities.

24
00:01:37.579 --> 00:01:39.126
这是一个物体。
So here is an object.

25
00:01:39.126 --> 00:01:41.649
A是一个对象，它有状态和行为。
A is an object, it has state and behavior.

26
00:01:44.520 --> 00:01:48.900
对象A具有对象B的引用，因为对象可以具有引用。
Object A has a reference to object B because objects can have references.

27
00:01:50.379 --> 00:01:54.430
对象A可以与对象B通信，因为它具有该引用。
Object A can communicate with Object B because it has that reference.

28
00:01:56.890 --> 00:02:01.250
对象B提供了一个接口，该接口将访问限制为它自己的状态
Object B provides an interface that constrains access to its own state in

29
00:02:01.250 --> 00:02:02.189
参考资料。
references.

30
00:02:02.189 --> 00:02:08.129
所以对象A不能访问B的内部，只能访问它的接口。
So object A does not get access to B's internals, only to its interface.

31
00:02:08.129 --> 00:02:10.699
这就是为什么我喜欢在JavaScript中冻结。
This is why I like freezing in JavaScript.

32
00:02:10.699 --> 00:02:14.310
因为在JavaScript中，这是保证这一点的唯一方法。
Because in JavaScript, that is the only way to guarantee this.

33
00:02:15.889 --> 00:02:18.329
做好可靠物品的唯一方法。
The only way to make good reliable objects.

34
00:02:20.569 --> 00:02:26.050
对象A没有对C的引用，因此A无法与C通信。
Object A does not have a reference to C, so A cannot communicate with C.

35
00:02:26.050 --> 00:02:29.430
就好像在A和A之间有一道防火墙
It's as though there is a firewall between A and

36
00:02:29.430 --> 00:02:33.120
C期望防火墙是零成本实施的。
C expect that firewall is implemented at zero cost.

37
00:02:35.909 --> 00:02:38.850
&gt；&gt；Douglas Crockford：通过约束产生对象能力系统
&gt;&gt; Douglas Crockford: An object capability system is produced by constraining

38
00:02:38.850 --> 00:02:41.670
参考文献的获取方式。
the ways that references are obtained.

39
00:02:41.670 --> 00:02:45.310
不能简单地通过知道公共对象的名称来获得引用
A reference cannot be obtained simply by knowing the name of a public

40
00:02:45.310 --> 00:02:47.219
全局变量或公共类的。
of a global variable or a public class.

41
00:02:48.469 --> 00:02:52.889
实际上，有三种方法可以通过创造来获得引用，
And in fact, there are exactly three ways to obtain a reference by creation,

42
00:02:52.889 --> 00:02:54.920
通过建造和引进。
by construction, and by introduction.

43
00:02:55.949 --> 00:02:59.329
通过创建意味着如果函数创建对象
By creation means that if a function creates an object

44
00:02:59.329 --> 00:03:00.939
它获取对该对象的引用。
it gets a reference to that object.

45
00:03:02.900 --> 00:03:06.120
通过构造意味着对象可以由其构造函数赋予
By construction means that an object may be endowed by its constructor

46
00:03:06.120 --> 00:03:07.340
还有参考资料。
with references.

47
00:03:07.340 --> 00:03:10.219
这可以包括构造函数上下文中的引用和
This can include references in the constructors context and

48
00:03:10.219 --> 00:03:11.116
继承的引用。
inherited references.

49
00:03:11.116 --> 00:03:17.050
然后3，这是一个有趣的介绍。
And then 3, this is the interesting one by introduction.

50
00:03:17.050 --> 00:03:19.860
所以这里A引用了B和C。
So here A has references to B and C.

51
00:03:19.860 --> 00:03:22.579
B和C没有引用，因此它们无法通信。
B and C have no references, so they cannot communicate.

52
00:03:24.170 --> 00:03:26.629
但是A希望他们能够沟通。
But A wants them to be able to communicate.

53
00:03:26.629 --> 00:03:29.240
所以A和B通信。
So A communicates with B.

54
00:03:29.240 --> 00:03:33.889
将引用传递给C，一旦完成，
Passing a reference to C, and once that is done,

55
00:03:33.889 --> 00:03:38.670
B现在已经获得了与C通信的能力。
B has now acquired the capability to communicate with C.

56
00:03:38.670 --> 00:03:40.750
这就是为什么这被称为能力模型。
That's why this is called the capability model.

57
00:03:43.629 --> 00:03:46.740
如果引用只能通过创建来获得，
If references can only be obtained by creation,

58
00:03:46.740 --> 00:03:50.819
建设，或介绍，那么你可能有一个安全的系统。
construction, or introduction, then you may have a safe system.

59
00:03:50.819 --> 00:03:53.939
如果它们可以通过任何其他方式获得，你就不能。
And if they can be obtained in any other way, you don't.

60
00:03:55.729 --> 00:03:59.090
所以要注意的潜在弱点包括强奸，
So potential weaknesses to watch out for include arrogation,

61
00:03:59.090 --> 00:04:01.979
腐败，混乱和串通。
corruption, confusion, and collusion.

62
00:04:01.979 --> 00:04:06.060
侵占是指无权利地夺取或要求自己的权利。
Arrogation means to take or claim for oneself without right.

63
00:04:06.060 --> 00:04:08.960
这包括全局变量，公共静态变量，
This include global variables, public static variables,

64
00:04:08.960 --> 00:04:14.159
授予强大功能的标准库，地址生成。
standard libraries that grant powerful capabilities, address generation.

65
00:04:14.159 --> 00:04:21.779
这就是为什么C+永远不能像Web系统中的语言和已知URL那样安全。
Which is why C++ can never be as secure a language and known URLs in web systems.

66
00:04:21.779 --> 00:04:24.449
腐败，应该不能篡改或
Corruption, It should not be possible to tamper with or

67
00:04:24.449 --> 00:04:26.990
绕过系统或其他对象。
circumvent the system or other objects.

68
00:04:26.990 --> 00:04:29.589
再说一次，这就是为什么冰冻是如此重要的原因。
Again, that's why the freezing is so critically important.

69
00:04:31.310 --> 00:04:32.560
第三个困惑，
Number 3 confusion,

70
00:04:32.560 --> 00:04:35.750
应该可以创建不受混淆的对象。
it should be possible to create objects that are not subject to confusion.

71
00:04:35.750 --> 00:04:39.550
因为混淆的对象可能被欺骗，然后滥用其功能。
Because a confused object can be tricked, and then misusing its capabilities.

72
00:04:41.340 --> 00:04:42.879
然后，终于串通了。
And then, finally collusion.

73
00:04:42.879 --> 00:04:47.500
在引入两个对象之前，它们必须是不可能通信的。
It must not be possible for two objects to communicate until they are introduced.

74
00:04:47.500 --> 00:04:49.620
如果两个独立对象结束，
If two independent objects conclude,

75
00:04:49.620 --> 00:04:51.930
他们也许能够集中他们的能力来造成伤害。
they might be able to pool their capabilites to cause harm.

76
00:04:55.050 --> 00:04:57.909
有些功能太危险，不能提供给来宾代码。
Some capabilities are too dangerous to give to guest code.

77
00:04:57.909 --> 00:05:01.180
因此，我们可以将这些功能提供给中间对象，这些中间对象将
So we can instead give those capabilities to intermediate objects that will

78
00:05:01.180 --> 00:05:03.000
限制他们的力量。
constrain their power.

79
00:05:03.000 --> 00:05:04.810
例如，用于
For example, an intermediate object for

80
00:05:04.810 --> 00:05:08.350
文件系统可能会限制对特定设备或目录等的访问。
a file system might limit access to a particular device or directory or so on.

81
00:05:11.120 --> 00:05:14.629
最终，每个对象都应该被赋予与其完全相同的功能
Ultimately, every object should be given exactly the capabilities it

82
00:05:14.629 --> 00:05:17.379
需要做它的工作而不是更多。
needs to do its work and no more.

83
00:05:17.379 --> 00:05:20.860
因此，应该在需要做的基础上授予能力
So capability should be granted on a need-to-do basis

84
00:05:20.860 --> 00:05:24.660
就像我们在需要知道的基础上提供信息一样。
just as we grant information on a need-to-know basis.

85
00:05:24.660 --> 00:05:29.990
我们所知道的信息隐藏的原则导致了良好的设计和
The principles of information hiding, which we know leads to good designs and

86
00:05:29.990 --> 00:05:33.860
当你考虑能力隐藏时，软件系统得到了增强。
software systems, are enhanced when you're thinking about capability hiding.

87
00:05:36.500 --> 00:05:39.990
中间对象或facet可以是非常轻量级的。
Intermediate objects or facets can be very lightweight.

88
00:05:39.990 --> 00:05:43.120
并且无类语言可能特别有效。
And class-free languages can be especially effective.

89
00:05:43.120 --> 00:05:47.439
我尝试过用Java制作facet，结果发现，这真的很难，因为每个
I've tried making facets in Java and it turns out, it's really hard because every

90
00:05:47.439 --> 00:05:49.930
当你想做一个小连接器的时候，你必须做另一个类。
time you wanna make a little connector, you have to make another class.

91
00:05:49.930 --> 00:05:51.139
这是很大的工作量。
And that's a lot of work.

92
00:05:51.139 --> 00:05:55.009
而在JavaScript中，这些东西大多只是一个简单的对象或
Whereas in JavaScript, most of these things are just a simple object or

93
00:05:55.009 --> 00:05:56.230
发电机，砰，你完蛋了。
generator and, boom, you're done.

94
00:05:58.590 --> 00:06:04.069
因此，在这里，facet对象限制Guest对象对功能强大的对象的访问。
So here the Facet object limits the Guest object's access to a powerful object.

95
00:06:04.069 --> 00:06:07.009
Guest对象不能篡改facet以获取直接
The Guest object cannot tamper with the Facet to get a direct

96
00:06:07.009 --> 00:06:08.379
对危险对象的引用。
reference to the dangerous object.

97
00:06:11.360 --> 00:06:14.180
引用在能力系统中是不可撤销的，
References are not revocable in a capability system,

98
00:06:14.180 --> 00:06:17.540
一旦你介绍了一个对象，你就不能要求它忘记它。
once you introduce an object, you can't ask it to forget it.

99
00:06:17.540 --> 00:06:20.300
你可以要求，但你不能依赖于请求被尊重。
You can ask but you can not depend on the request being honored.

100
00:06:23.000 --> 00:06:26.240
因此这里Guest对象有一个对Agency对象的引用。
So here the Guest object has a reference to an Agency object.

101
00:06:26.240 --> 00:06:28.339
客人要求
The Guest asks for

102
00:06:28.339 --> 00:06:31.980
介绍强大的对象，&gt；&gt；Douglas Crockford：但是
an introduction to the powerful object, &gt;&gt; Douglas Crockford: But

103
00:06:31.980 --> 00:06:34.079
相反，中情局做了一个方面，
the Agency instead makes a Facet and

104
00:06:34.079 --> 00:06:38.350
将facet提供给Guest，facet可能是一个简单的直通。
gives the Facet to the Guest and the Facet might be a simple pass through.

105
00:06:39.439 --> 00:06:41.319
然后Guest可以调用facet，pass。
The Guest can then call the Facet, the pass.

106
00:06:41.319 --> 00:06:42.740
然后它将调用强大的对象。
It will then call the powerful object.

107
00:06:44.389 --> 00:06:47.209
当中情局想要撤销这项能力时，
When the Agency wants to revoke the capability,

108
00:06:47.209 --> 00:06:50.439
它告诉facet忘记它的能力。
it tells the Facet to forget its capability.

109
00:06:50.439 --> 00:06:53.500
facet现在对来宾没有用处了。
The Facet is now useless to the guest.

110
00:06:53.500 --> 00:06:54.699
这就是你昨天所做的。
This is what you did yesterday.

111
00:06:54.699 --> 00:06:58.909
昨天可撤销的功能是这个模式，所以
Yesterday's revocable function was this pattern, so

112
00:06:58.909 --> 00:07:00.470
这些东西真的很容易实现。
these things are really easy to implement.

113
00:07:02.980 --> 00:07:04.800
facet可以将请求标记为
A Facet can mark requests so

114
00:07:04.800 --> 00:07:07.120
强大的物体可以知道它们来自哪里。
that the Powerful object can know where they came from.

115
00:07:07.120 --> 00:07:08.290
这给了我们责任。
That gives us accountability.

116
00:07:10.079 --> 00:07:14.019
facet是非常有表现力的，它们很容易构造，它们是轻量级的。
Facets are very expressive, they're easy to construct, they're lightweight.

117
00:07:14.019 --> 00:07:16.959
它们提供衰减或功率降低。
They provide attenuation or power reduction.

118
00:07:16.959 --> 00:07:19.750
他们给我们撤销，通知，授权。
They give us revocation, notification, delegation.

119
00:07:19.750 --> 00:07:24.209
事实证明，最好的面向对象模式也是功能模式。
And it turns out the best object-oriented patterns are also capabilities patterns.

120
00:07:24.209 --> 00:07:26.600
有时当你试图设计一个系统
Sometimes when you're trying to design a system and

121
00:07:26.600 --> 00:07:29.990
你想弄清楚这种能力是去那里还是去那里？
you're trying to figure out does this capability go there or there?

122
00:07:31.379 --> 00:07:36.649
而且在早期对它们进行分类，当你在设计分类法时是很困难的。
And sorting those early on in, when you're doing that design a taxonomy is hard.

123
00:07:36.649 --> 00:07:40.689
但如果你从能力的角度考虑，最小的是什么
But if you think about it in terms of capabilities, what is the least

124
00:07:40.689 --> 00:07:44.779
我需要给这个家伙多少能量才能让它正常工作？
amount of power I need to give to this guy in order to have it work correctly?

125
00:07:44.779 --> 00:07:47.079
你往往会得到正确的设计。
You tend to end up with the correct designs.

126
00:07:47.079 --> 00:07:51.790
对安全性的考虑使系统设计更容易，而不是更难。
That thinking about security make system designing easier not harder.

127
00:07:54.529 --> 00:07:57.060
所以镶嵌面可以降低危险物体的威力。
So Facets can reduce the power of dangerous objects.

128
00:07:58.899 --> 00:08:03.250
大多数代码不应该被授予直接访问危险事物的权限，因为
Most code should not be given directly access to dangerous things, for

129
00:08:03.250 --> 00:08:06.540
例如浏览器innerHTML或document.write。
example the browser innerHTML or document.write.

130
00:08:06.540 --> 00:08:09.639
不是试图猜测一段代码是否可以做坏事，
Instead of trying to guess if a piece of code can do something bad,

131
00:08:09.639 --> 00:08:12.759
相反，我们可以给它一组安全的功能。
we can give it a safe set of capabilities instead.

132
00:08:12.759 --> 00:08:15.980
你知道，即使它是坏的，它所能做的也是有限的。
You know that even if it is bad, it's limited in what it can do.

133
00:08:15.980 --> 00:08:17.779
并且功能可以帮助API设计。
And capabilities can aid in API design.
