WEBVTT

1
00:00:00.126 --> 00:00:03.948
[音乐]
[MUSIC]

2
00:00:03.948 --> 00:00:06.476
&gt；&gt；Douglas Crockford：我认为我们可以做得更好
&gt;&gt; Douglas Crockford: I think we can do better than that and

3
00:00:06.476 --> 00:00:11.119
我认为我们做得更好的方法是回到模块模式。
I think the way we do better is by going back to the module pattern.

4
00:00:11.119 --> 00:00:15.455
我们可以把任何一堆东西放在一个函数里面
That we can take any bunch of stuff and put it inside of a function and

5
00:00:15.455 --> 00:00:20.336
立即调用它，它做同样的事情，除了在这个空间中，
invoke it immediately and it does the same thing except that in this space,

6
00:00:20.336 --> 00:00:22.992
我们不是在创建全局变量。
we're not creating global variables.

7
00:00:22.992 --> 00:00:29.681
这种东西在创造中不会泄漏，在那里它是一个危险和危险的地方。
This stuff is not leaking out in creation where it's a danger and a hazard.

8
00:00:29.681 --> 00:00:34.079
所以我们可以用这个模式来制作东西。
So we can make stuff using this pattern.

9
00:00:35.630 --> 00:00:37.847
例如，我想创建一个singleton。
For example I want to make a singleton.

10
00:00:37.847 --> 00:00:41.502
我想创建一个包含两个方法的对象实例，
I want to make one instance of an object containing two methods,

11
00:00:41.502 --> 00:00:43.598
第一方法和第二方法，以及
first method and second method, and

12
00:00:43.598 --> 00:00:47.950
我希望这两个方法共享私有变量和私有函数。
I want those two methods to share private variables and private functions.

13
00:00:50.140 --> 00:00:54.329
在JavaScript中，没有简单的方法可以获得隐私，除了
In JavaScript there is no easy way to get privacy except

14
00:00:54.329 --> 00:00:57.674
当你用模块或
when you're doing this stuff with with module or

15
00:00:57.674 --> 00:01:02.810
功能模块，因为每个功能都有一个功能范围。
function modules because each function has a function scope.

16
00:01:02.810 --> 00:01:05.040
这是一个真正有效的容器
Which is a really effective container for

17
00:01:05.040 --> 00:01:08.530
保持任何东西都不会泄漏出功能范围。
keeping stuff that nothing leaks out of function scope ever.

18
00:01:08.530 --> 00:01:11.810
宇宙中没有力量可以强制一个函数
There's no force in the universe that can force a function

19
00:01:11.810 --> 00:01:13.659
泄露其范围内持有的内容。
to leak what is held in its scope.

20
00:01:15.069 --> 00:01:16.710
我们可以利用这一点。
And we can take advantage of that.

21
00:01:16.710 --> 00:01:20.381
这是一个非常好的模式，所以我要存储的是Singleton，
And it's a very nice pattern so what I'm going to store in singleton,

22
00:01:20.381 --> 00:01:24.816
不是这个外部函数，因为我要立即调用那个函数。
is not this outer function because I'm going to invoke that function immediately.

23
00:01:24.816 --> 00:01:27.527
我要存储的是它的返回值，
What I'm going to store will be its return value,

24
00:01:27.527 --> 00:01:30.500
这个对象包含两个方法。
which is this object containing two methods.

25
00:01:30.500 --> 00:01:34.140
这两种方法将关闭私有国家。
And those two methods will close over the private state.

26
00:01:34.140 --> 00:01:37.390
这两种方法将共享私有国家。
And those two methods will share that private state.

27
00:01:37.390 --> 00:01:39.515
如果一个人改变了这些私有变量中的一个，
If one changes one of those private variables,

28
00:01:39.515 --> 00:01:42.768
另一个，下次他看那个变量时，他会看到变化。
the other, next time he looks at that variable, he will see the change.

29
00:01:45.212 --> 00:01:48.479
&gt；&gt；Douglas Crockford：在我们弄清楚如何使用
&gt;&gt; Douglas Crockford: Before we figured out how to do this stuff with functions in

30
00:01:48.479 --> 00:01:50.680
JavaScript，私有变量和
JavaScript, the private variable and

31
00:01:50.680 --> 00:01:55.430
私有函数可能是全局变量，那里没有隐私。
private function would have been global variables, and there is no privacy there.

32
00:01:58.391 --> 00:02:01.359
&gt；&gt；Douglas Crockford：与经典相比，这是一件好事
&gt;&gt; Douglas Crockford: And one nice thing about this compared to a classical

33
00:02:01.359 --> 00:02:05.206
语言，在古典语言中，如果你想做一个独生子女，
language, in a classical language if you want to make a singleton,

34
00:02:05.206 --> 00:02:09.474
你仍然需要制作一个类，仅仅为了制作一件东西，这需要做很多工作。
you still have to make a class, which is a lot of work just to make one thing.

35
00:02:09.474 --> 00:02:13.110
而在JavaScript中，这些都不是很有用。
Whereas in JavaScript none of these are very much work.

36
00:02:14.590 --> 00:02:16.800
在这个模式上有很多变化。
And there are lots of variations on this pattern.

37
00:02:16.800 --> 00:02:22.670
例如，我可能有，而不是返回我想拥有的对象
For example I might have, instead of returning an object I want to have

38
00:02:22.670 --> 00:02:27.090
一个全局变量，它将成为我的应用程序中所有内容的容器。
a global variable which is going to be the container of everything in my application.

39
00:02:27.090 --> 00:02:30.710
它将是这个物体，它是一切事物的根源。
It's going to be this one object which is the root of everything.

40
00:02:30.710 --> 00:02:35.634
我想要增强它，我想给我们的全球添加一个有条不紊的属性
And I want to enhance it, I want to add a methodical property to our global

41
00:02:35.634 --> 00:02:41.020
对象，其中包含共享此私有状态的这两个方法。
object that has these two methods in it which share this private state.

42
00:02:41.020 --> 00:02:42.840
我们可以很容易做到。
And we can do that easily.

43
00:02:42.840 --> 00:02:46.420
所以我们不需要仅仅为了制造一个类而创建一个类，同样有很多和
So we don't have to make a class just to make one off, and again there are lots and

44
00:02:46.420 --> 00:02:48.979
在这个模式上有很多变化，这是一个非常丰富的模式。
lots of variations on this pattern, it's a very rich pattern.

45
00:02:50.810 --> 00:02:55.400
同样，这是有效的，因为我们立即调用了函数。
And again this works because we're invoking the function immediately.

46
00:02:55.400 --> 00:02:57.990
但如果我们不立即调用函数，
But if we don't invoke the function immediately,

47
00:02:57.990 --> 00:03:02.159
然后我们可以保留这个函数并创建许多实例。
then we can hold onto that function and make lots of instances.

48
00:03:02.159 --> 00:03:03.689
那就这么做吧。
So let's do that.

49
00:03:03.689 --> 00:03:08.840
这个模块模式很容易转换成一个强大的构造函数模式。
This module pattern is easily transformed into a powerful constructor pattern.

50
00:03:08.840 --> 00:03:09.849
食谱是这样的。
So here's the recipe.

51
00:03:11.000 --> 00:03:14.949
第一步，我们将使用所有技术制作一个对象，
Step 1, we're gonna make an object using all of the techniques,

52
00:03:14.949 --> 00:03:16.969
任何可用于制造物体的技术。
any of the techniques available for making objects.

53
00:03:16.969 --> 00:03:21.650
我们可以使用Object文字，我们可以使用new，我们可以使用Object.create。
We can use an object literal, we can use new, we can use Object.create.

54
00:03:21.650 --> 00:03:24.729
我们可以调用这些功率构造函数中的另一个。
We can call another of these power constructors.

55
00:03:24.729 --> 00:03:26.829
只要我们能得到一个物体，我们就能得到一个物体。
Any way we can get an object, we get an object.

56
00:03:28.969 --> 00:03:32.849
第二步，我们将定义一些变量和函数。
Step 2, we will define some variables and functions.

57
00:03:32.849 --> 00:03:35.960
这些将成为我们对象的私有成员。
These will become the private members of our object.

58
00:03:37.259 --> 00:03:41.509
步骤3，我们将用特权方法扩充对象。
Step 3, we will augment the object with privileged methods.

59
00:03:41.509 --> 00:03:45.699
特权方法是对象的公开可用方法
A privileged method is a publicly available method of an object

60
00:03:45.699 --> 00:03:47.810
关闭了私人物品。
which closes over the private stuff.

61
00:03:49.650 --> 00:03:51.889
步骤4，我们返回对象。
And step 4, we return the object.

62
00:03:51.889 --> 00:03:53.840
所以这是一个非常简单的食谱。
So it's a pretty simple recipe.

63
00:03:53.840 --> 00:03:55.900
它太抽象了，搞不懂，对吧？
It's way too abstract to make sense out of it, right?

64
00:03:55.900 --> 00:03:59.099
所以我们需要再深入一点。
So we need to go a little deeper.

65
00:03:59.099 --> 00:04:00.419
所以让我们把它变成一个模板。
So let's turn it into a template.

66
00:04:01.939 --> 00:04:06.789
所以第一步，我要做一个构造函数。
So step 1, I'm going to make a constructor function.

67
00:04:06.789 --> 00:04:11.780
我现在用小写的c而不是大写的c拼写构造函数，
And I'm spelling constructor now with a lowercase c instead of an uppercase c,

68
00:04:11.780 --> 00:04:17.389
因为这种形式的构造函数不关心新的前缀。
because this form of constructor does not care about the new prefix.

69
00:04:17.389 --> 00:04:21.689
如果你用一个新的前缀调用这个函数，它的运行速度会稍微慢一点，
If you call this function with a new prefix it will run a little bit slower,

70
00:04:21.689 --> 00:04:24.829
但它仍然会做正确的事情。
but it will still do exactly the right thing.

71
00:04:24.829 --> 00:04:28.449
所以，这样我们就不用担心别人
So, this way we don't have to worry about people

72
00:04:28.449 --> 00:04:30.500
忘记新的前缀，因为没有什么会出错。
forgetting the new prefix cuz nothing can go wrong.

73
00:04:32.290 --> 00:04:36.550
那么我建议传入一个规范对象。
Then I'm gonna recommend passing in a specification object.

74
00:04:36.550 --> 00:04:39.629
通常编写构造函数的方式是直接传入
The way you normally write constructors is you'll just pass in

75
00:04:39.629 --> 00:04:42.300
一些用逗号分隔的东西。
some number of things separated by commas.

76
00:04:42.300 --> 00:04:46.829
几年前，我设计了一个有十个参数的构造函数，
Some years ago, I designed a constructor that had ten arguments in it,

77
00:04:48.540 --> 00:04:51.740
这是一个问题，因为没有人能记住他们的顺序。
which was a problem because nobody could remember what order they went in.

78
00:04:51.740 --> 00:04:54.620
所以它真的很难使用
So it was really hard to use and

79
00:04:54.620 --> 00:04:58.029
后来发现没有人使用第三个参数。
then it turned out nobody used the third parameter.

80
00:04:58.029 --> 00:04:59.610
但我们不能把它取出来，对吧，
But we couldn't take it out, right,

81
00:04:59.610 --> 00:05:03.329
因为如果我们把这个参数去掉，那么所有的代码都会被破坏。
cuz if we took that argument out, then all of the code would break.

82
00:05:03.329 --> 00:05:06.887
因此，人们不得不永远不必要地使用第三个参数。
And so people had to use the third parameter unnecessarily forever.

83
00:05:06.887 --> 00:05:10.250
那真的很糟糕很脆弱。
That was really awful and brittle.

84
00:05:10.250 --> 00:05:16.069
所以，我要做的是说用一个对象文字传入一个对象。
So, what I would do instead is say pass in an object using an object literal.

85
00:05:16.069 --> 00:05:21.560
因此，只需再添加两个字符，我们现在就可以获得命名参数。
So, by just adding two more characters, we can now have named parameters.

86
00:05:21.560 --> 00:05:25.180
我可以给每个参数起一个名字so，调用是自记录的，所以
I can give each of the parameters a name so, the call is self documenting, so

87
00:05:25.180 --> 00:05:27.470
我们可以看到传入的是什么。
we can see what's getting passed in.

88
00:05:27.470 --> 00:05:31.790
我们可以任何顺序拥有它们，如果我们省略了一些东西，我们可以有很好的默认值，
We can have them in any order, if we leave things out we can have nice defaults,

89
00:05:31.790 --> 00:05:36.430
如果结果是某些参数变得不必要，我们只需忽略它们。
if it turns out some parameters become unnecessary we simply ignore them.

90
00:05:36.430 --> 00:05:39.720
我们有很大的力量可以操纵物体
We have lots of power in the way that we can manipulate objects so

91
00:05:39.720 --> 00:05:41.560
我会利用这一点。
I would take advantage of that.

92
00:05:41.560 --> 00:05:46.610
此外，我们可以从JSON有效负载中获取规范对象。
Also, we could get the specification object from a JSON payload.

93
00:05:46.610 --> 00:05:50.519
因此，我们可能有一些存储，我们希望使用构造函数
So we might have some store that we want to use the constructor to

94
00:05:50.519 --> 00:05:52.110
重建对象。
reconstitute the object.

95
00:05:52.110 --> 00:05:53.970
我们也可以这样做。
We can do that as well.

96
00:05:53.970 --> 00:05:58.560
或导致跨网络创建对象
Or to cause the creation of objects across the network

97
00:05:58.560 --> 00:06:01.579
使用规范通过JSON通过线路传递。
using specifications to get passed over the wire through JSON.

98
00:06:03.579 --> 00:06:07.529
然后我将调用另一个构造函数来创建一个对象
Then I'm going to call another constructor to make an object and

99
00:06:07.529 --> 00:06:11.430
我也会把同样的规范对象传递给他。
I'm gonna pass the same specification object to him as well.

100
00:06:11.430 --> 00:06:15.490
因此，其他构造函数可能会使用
So it maybe that that other constructor will make use of some properties in

101
00:06:15.490 --> 00:06:18.459
规范对象，我不需要，但对他来说是有意义的。
the specification object that I don't need but that makes sense to him.

102
00:06:18.459 --> 00:06:20.600
如果我们都需要什么，我们就一起分享。
And if there's anything we both need we're sharing it.

103
00:06:22.300 --> 00:06:27.430
我以前把这种寄生遗传称为我们将要称之为
I used to call this parasitic inheritance where we're gonna call

104
00:06:27.430 --> 00:06:32.470
另一个构造者，我们要为它的工作而功劳。
another constructor and we're gonna take credit for its work.

105
00:06:32.470 --> 00:06:38.569
我的灵感来自于一只黄蜂，它在活的蜘蛛体内产卵。
I was inspired by a wasp that lays its eggs in the bodies of live spiders.

106
00:06:40.790 --> 00:06:43.620
所以蜘蛛做了大部分创建实例的工作，但是
So the spider does most of the work of making instances but

107
00:06:43.620 --> 00:06:47.029
黄蜂得到了所有的荣誉，会做一些类似的事情。
the wasp gets all the credit, gonna do something like that.

108
00:06:48.250 --> 00:06:52.519
然后我会得到另一个制造者所做的结果，并且
And then I'll take the result of what the other maker did, and

109
00:06:52.519 --> 00:06:54.409
将其放入一个名为that的变量中。
put it in a variable called that.

110
00:06:54.409 --> 00:06:57.220
我不能把它放在叫做this的东西里，因为这是一个保留字。
I can't put it in something called this because this is a reserved word.

111
00:06:59.819 --> 00:07:03.079
然后我可以创建我的成员变量。
Then I can create my member variables.

112
00:07:03.079 --> 00:07:05.500
我可以创建任意多的成员变量。
I can create as many member variables as I want.

113
00:07:05.500 --> 00:07:07.449
因为它们将被保存在函数范围内，
And because they're gonna be held in the function scope,

114
00:07:07.449 --> 00:07:10.889
它们在对象外部不可见，仅在对象内部可见。
they're not visible outside of the object, they're only visible inside the object.

115
00:07:12.560 --> 00:07:17.300
我将创建我的私有方法和我的私有方法
I will create my private methods, and my private methods

116
00:07:17.300 --> 00:07:20.939
将有权访问成员变量的规范对象和
will have access to the specification object to the member variables and

117
00:07:20.939 --> 00:07:22.339
其他方法也一样。
to the other methods as well.

118
00:07:23.470 --> 00:07:26.326
我在这里不用这个，不需要这个，
I do not use this in here, don't need this,

119
00:07:26.326 --> 00:07:28.970
所以代码会变得更小更干净。
so the code's going to be a little bit smaller and cleaner.

120
00:07:31.100 --> 00:07:34.000
以及我需要公开的这些方法中的任何一种，
And any of these methods that I need to be public,

121
00:07:35.779 --> 00:07:37.889
我只是将它们分配给传出对象。
I simply assign them to the outgoing object.

122
00:07:39.180 --> 00:07:41.759
最后一步，我返回对象。
And the last step, I return the object.

123
00:07:44.110 --> 00:07:44.879
就是这样。
And that's it.

124
00:07:44.879 --> 00:07:48.639
这是一个非常灵活的模式，有很多
And it's a very flexible pattern, there are lots and

125
00:07:48.639 --> 00:07:53.840
很多变化，但这是基本的核心思想，我们正在采取
lots of variations on this but this is the basic core idea, that we're taking

126
00:07:53.840 --> 00:07:59.930
使用闭包以便在对象内提供私有状态。
use of closure in order to provide private state within the object.
