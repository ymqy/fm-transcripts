WEBVTT

1
00:00:00.000 --> 00:00:03.729
[音乐]
[MUSIC]

2
00:00:03.729 --> 00:00:04.881
&gt；&gt；Douglas Crockford：这是下一个。
&gt;&gt; Douglas Crockford: Here’s a next one.

3
00:00:04.881 --> 00:00:09.396
编写一个接受二进制函数和参数的函数curry，并且
Write a function curry that takes a binary function and an argument, and

4
00:00:09.396 --> 00:00:12.659
返回可以接受第二个参数的函数。
returns a function that can take a second argument.

5
00:00:12.659 --> 00:00:17.557
在这里，我们将把我们编写的add函数传递给curry函数
Here we'll pass to the curry function the add function that we wrote this

6
00:00:17.557 --> 00:00:18.696
早上3点。
morning and 3.

7
00:00:18.696 --> 00:00:21.399
它将返回一个函数，该函数将向事物添加3。
It will return a function that will add 3 to things.

8
00:00:21.399 --> 00:00:26.699
类似地，我们可以传递给curry乘法函数和5。
And similarly we could pass to curry the multiply function and 5.

9
00:00:26.699 --> 00:00:29.289
它将返回一个将乘以5的函数。
And it will return a function that will multiply things by 5.

10
00:00:29.289 --> 00:00:33.109
&GT；&GT；扬声器2：我们昨天做了咖喱。
&gt;&gt; Speaker 2: We did curry yesterday.

11
00:00:33.109 --> 00:00:36.799
&gt；&gt；扬声器3：[听不见]一切都回到了原地。
&gt;&gt; Speaker 3: [INAUDIBLE] It all comes full circle.

12
00:00:36.799 --> 00:00:45.090
&gt；&gt；[INAUDIBLE]&gt；&gt；Douglas Crockford：它是
&gt;&gt; [INAUDIBLE] &gt;&gt; Douglas Crockford: It's

13
00:00:45.090 --> 00:00:48.929
当我介绍这个问题时，有些人振作起来，这并不少见。
not uncommon when I introduce this problem, that some people perk up.

14
00:00:48.929 --> 00:00:51.185
他们走了，咖喱终于开始变得有趣了。
They go, Curry this is finally starting to get interesting.

15
00:00:51.185 --> 00:00:59.283
&gt；&gt；Speaker 2：在前面的解决方案中，我们有一个var add f。
&gt;&gt; Speaker 2: In the previous solution we had a var add f.

16
00:00:59.283 --> 00:01:02.979
&gt；&gt；道格拉斯·克罗克福德：嗯哼。
&gt;&gt; Douglas Crockford: Mm-hm.

17
00:01:02.979 --> 00:01:06.382
&gt；&gt；Speaker 2：前面我们有一个函数add f。
&gt;&gt; Speaker 2: And earlier on we had a function add f.

18
00:01:06.382 --> 00:01:07.230
&gt；&gt；Douglas Crockford：是的。
&gt;&gt; Douglas Crockford: Yep.

19
00:01:07.230 --> 00:01:10.530
&gt；&gt；Speaker 2：JS Lint抱怨这是一个重新定义。
&gt;&gt; Speaker 2: And JS Lint complains it's a redefinition.

20
00:01:10.530 --> 00:01:11.319
&GT；&GT；道格拉斯·克罗克福德：没错。
&gt;&gt; Douglas Crockford: That's right.

21
00:01:11.319 --> 00:01:12.329
&gt；&gt；演讲者2：是什么？
&gt;&gt; Speaker 2: And is?

22
00:01:12.329 --> 00:01:13.719
&gt；&gt；Douglas Crockford：JS Lint是对的。
&gt;&gt; Douglas Crockford: JS Lint is right.

23
00:01:13.719 --> 00:01:14.219
&gt；&gt；扬声器2：好的。
&gt;&gt; Speaker 2: Okay.

24
00:01:16.590 --> 00:01:18.629
&gt；&gt；Douglas Crockford：好的，这里有一个咖喱函数。
&gt;&gt; Douglas Crockford: Okay, so here's a curry function.

25
00:01:18.629 --> 00:01:21.739
Curry接受一个二进制函数和第一个参数，
Curry takes a binary function and a first argument and

26
00:01:21.739 --> 00:01:24.150
返回接受第二个参数的函数。
returns a function that takes a second argument.

27
00:01:24.150 --> 00:01:26.680
并返回使用第一个AND函数调用二进制函数的结果
And returns the result of calling the binary function with the first and

28
00:01:26.680 --> 00:01:28.000
第二个论点。
second arguments.

29
00:01:28.000 --> 00:01:30.789
那么谁吃了咖喱，非常好。
So who got curry, very good.

30
00:01:30.789 --> 00:01:36.090
如果你没有得到咖喱，现在就得到它，因为你以后会需要它。
If you didn't get curry, get it now because you'll going to need it later.

31
00:01:36.090 --> 00:01:38.150
现在你可以用另一种方式写咖喱，
Now another way you could have written curry,

32
00:01:38.150 --> 00:01:40.849
你可以使用我们之前写的提升函数。
is you could have used the lift function that we wrote earlier.

33
00:01:40.849 --> 00:01:43.450
有人用过电梯吗？
Did anyone use lift f?

34
00:01:43.450 --> 00:01:45.799
如果你这么做了，那就是额外的学分。
That would be extra credit, if you've done that.

35
00:01:46.849 --> 00:01:51.219
所以，这个采用多个参数的函数的过程
So, this process of taking a function with multiple arguments and

36
00:01:51.219 --> 00:01:56.020
将其转换为接受单个参数的多个函数称为转换(Currying)。
turning it into multiple functions that take a single argument is called currying.

37
00:01:56.020 --> 00:01:59.909
它是以Haskell Curry的名字命名的，Haskell Curry是一位数学家，他做了很多工作
And it's named after Haskell Curry who is a mathematician who did a lot of work with

38
00:01:59.909 --> 00:02:02.000
丘奇的Lambda演算。
Church's lambda calculus.

39
00:02:02.000 --> 00:02:07.090
并且通过规范化所有函数以仅接受它所做的一个参数
And by normalizing all functions to take only one argument it made

40
00:02:07.090 --> 00:02:09.460
很多手术更容易想到。
a lot of operations easier to think about.

41
00:02:10.539 --> 00:02:13.340
有些人认为它应该被称为Schonfinkelization
Some people think it should be called Schonfinkelisation

42
00:02:13.340 --> 00:02:16.370
因为之前有个叫Schon Finkel的人在做这件事，但是
because there is a fellow named Schon Finkel who is doing this stuff earlier but

43
00:02:16.370 --> 00:02:17.310
我们称它为醋栗。
we're going to call it currying.

44
00:02:18.500 --> 00:02:21.560
现在有些人希望咖喱能够使用以下功能
Now some people would like curry to be able to work with functions of

45
00:02:21.560 --> 00:02:22.579
任意数量的参数。
any number of arguments.

46
00:02:24.879 --> 00:02:27.829
使用JavaScript可以做到这一点。
And it's possible to do that with JavaScript.

47
00:02:27.829 --> 00:02:31.319
它是可怕的，它是可怕的丑陋。
And it is horrible, it's terribly ugly.

48
00:02:31.319 --> 00:02:34.900
所以，如果我想让这两个函数中的任何一个
So, if I want to have either the two functions take

49
00:02:34.900 --> 00:02:39.150
任何数量的事情，而不仅仅是我们关心的一件事。
any number of things rather than just the one thing that we're concerned with.

50
00:02:39.150 --> 00:02:44.650
你必须这样做，这是不可原谅的可怕，这是因为
You have to do that and it's inexcusably awful, and it's because

51
00:02:44.650 --> 00:02:47.670
参数组并不是真正的数组，所以它不能正常工作，所以
the arguments array isn't really an array and so it doesn't work right, and so

52
00:02:47.670 --> 00:02:49.939
为了让事情发生，你必须做所有这些技巧。
you have to do all these tricks in order to get things to happen.

53
00:02:49.939 --> 00:02:54.079
我不打算解释它的作用，因为
I'm not going to explain what this does because

54
00:02:54.079 --> 00:02:56.939
我只是不想在上面浪费时间，太可怕了。
I just don't want to waste time on it, it's awful.

55
00:02:56.939 --> 00:02:59.210
因此，由于这种可怕。
And so because of this awfulness.

56
00:02:59.210 --> 00:03:02.939
我们今天编写的所有函数只需要固定数量的
All of the functions that we write today will only take a fixed number of

57
00:03:02.939 --> 00:03:03.689
争论。
arguments.

58
00:03:03.689 --> 00:03:06.689
所以我们将有一元函数，将接受一个参数，并且
So we'll have unary functions will take one argument, and

59
00:03:06.689 --> 00:03:10.900
二进制函数将接受两个参数，即使我们有很多应用程序
binary functions will take two arguments even though lots of the applications we're

60
00:03:10.900 --> 00:03:12.770
将要做的事情真的希望它是可变的。
going to do would really like it to be variable.

61
00:03:13.990 --> 00:03:17.659
我不想你在这上面浪费时间，因为你可以看到那里，
I don't want you have to waste your time on this because you can see there,

62
00:03:17.659 --> 00:03:20.319
有一大堆事情都和咖喱无关。
there's a whole lot of stuff going on that has nothing to do with curry.

63
00:03:22.079 --> 00:03:28.370
现在ES6中，它正开始寻找实现的方法。
Now in ES6, which is starting to find its way into implementations.

64
00:03:28.370 --> 00:03:33.460
省略号运算符和点运算符有一些新的语法。
There is some new syntax with the ellipsis operator the dot dot dot operator.

65
00:03:33.460 --> 00:03:37.979
如果你把省略号放在参数列表中，说明的是，
And if you put the ellipsis in a parameter list, what that says is, take

66
00:03:37.979 --> 00:03:42.520
所有其余的参数将它们放入一个数组中
all of the rest of the arguments all the remaining arguments put them into an array

67
00:03:42.520 --> 00:03:48.469
并将该数组绑定到该参数，这样就更清晰了。
and bind that array to that parameter, and that is so much cleaner.

68
00:03:48.469 --> 00:03:54.289
然后在调用端的参数列表中，如果您转到点和
And then on the call side in an argument list, if you go dot dot dot and

69
00:03:54.289 --> 00:03:58.240
那里有一个数组，它说把这个数组展开。
there is an array there, it says take that array and spread it out.

70
00:03:58.240 --> 00:04:01.750
因此数组的每个元素都是一个单独的参数。
So each element of the array will be a separate argument.

71
00:04:01.750 --> 00:04:05.439
通过这样做，我们得到了这个版本的咖喱函数
And so by doing that, we've got this version of the curry function which

72
00:04:05.439 --> 00:04:10.030
看起来和第一个完全一样，只是里面有注释，
looks exactly like the first one except it's got the annotations in it which says,

73
00:04:10.030 --> 00:04:12.609
这就是你可以有多个事物被传递的地方。
this is where you can have a multiple number of things being passed.

74
00:04:14.620 --> 00:04:19.370
这两个都做着完全相同的事情，你更喜欢读哪一个？
Both of these do exactly the same thing, which one would you rather be reading?

75
00:04:19.370 --> 00:04:20.788
我猜这是第二个。
I'm guessing it be the second one.

76
00:04:20.788 --> 00:04:26.432
所以当ES6变得无处不在时，我会改变这个课程，所以
So when ES6 becomes everywhere, then I'll change this course so

77
00:04:26.432 --> 00:04:31.079
我们将编写看起来像这样的函数。
that we'll be writing functions that look like that.

78
00:04:32.449 --> 00:04:33.978
是啊。&gt；&gt；演讲者4：这是我的问题
Yeah. &gt;&gt; Speaker 4: That's kind of questions I

79
00:04:33.978 --> 00:04:36.279
昨天给你的，但现在已经很清楚了。
had for you yesterday, but it's clear now.

80
00:04:36.279 --> 00:04:39.090
就像，当你看到ES32的到来，
So like, when you were seeing the advent from ES32,

81
00:04:39.090 --> 00:04:43.909
像ES5一样，浏览器需要很长时间才能适应？
like ES5, that take like a long time for browsers to adapt?

82
00:04:43.909 --> 00:04:47.470
或者你看到我们现在移动得更快了吗？
Or do you see us moving a little faster now or

83
00:04:47.470 --> 00:04:49.956
只是需要很长时间才能[INAUDIBLE]。
is it just going to take quite a while to [INAUDIBLE].

84
00:04:49.956 --> 00:04:55.180
&gt；&gt；Douglas Crockford：更快的是ES5的大挂断是IE的问题。
&gt;&gt; Douglas Crockford: It's faster that the big hangup with ES5 was the IE problem.

85
00:04:55.180 --> 00:05:01.199
IE已经不是以前那样的问题了。
And IE is not nearly the problem that it was before.

86
00:05:01.199 --> 00:05:03.759
所有其他浏览器都在更新。
And all of the other browsers are out updating.

87
00:05:03.759 --> 00:05:06.889
所以问题不在于传播和收养。
So the problem isn't propagation and adoption.

88
00:05:06.889 --> 00:05:09.689
现在的问题只是实现。
The problem is now just implementation.

89
00:05:09.689 --> 00:05:13.500
所以我希望我们能更快地把所有的东西都拿出来。
So I'm hoping that we'll get all of the stuff out much faster.

90
00:05:17.040 --> 00:05:21.490
所以不管怎样，省略号将是我第二个最喜欢的特性ES6，当和
So anyway, Ellipsis will be my second most favorite feature ES6, when and

91
00:05:21.490 --> 00:05:25.279
如果它能完成，那将是很好的，但同时我们只是
if it ever gets finished so that will be great but in the mean time we're only

92
00:05:25.279 --> 00:05:31.959
会关注带有固定数量参数的函数，好吗？
gonna be concerned with functions taking a fixed number of arguments, Okay?

93
00:05:31.959 --> 00:05:34.069
那么我们准备好下一个了吗？
So we're ready for the next one?

94
00:05:34.069 --> 00:05:36.959
下一个问题会有点不同，因为你不是
This next problem is going to be a little bit different because you are not

95
00:05:36.959 --> 00:05:39.399
准备编写任何新的函数。
going to write any new functions.

96
00:05:39.399 --> 00:05:41.949
相反，您将使用我们已经编写的函数。
Instead you're going to be using functions that we have already written.

97
00:05:43.100 --> 00:05:47.569
因此，无需编写任何新函数，就可以展示创建inc函数的三种方法。
So without writing any new functions show three ways to create the inc function.

98
00:05:47.569 --> 00:05:50.230
inc函数将数字加1并返回它。
The inc function adds one to a number and returns it.

99
00:05:51.850 --> 00:05:54.810
因此，如果您将5传递给inc，它将返回6。
So if you pass five to inc it will return six.

100
00:05:56.850 --> 00:06:03.610
所以你要调用一个函数，它将创建inc函数。
And so you're going to call a function, which will create the inc function.

101
00:06:03.610 --> 00:06:06.785
并且您将展示三种不同的方法来实现这一点，使用您所使用的函数
And you're going to show three different ways to do that using functions you've

102
00:06:06.785 --> 00:06:07.540
已经写好了。
already written.

103
00:06:09.322 --> 00:06:13.339
&gt；&gt；Douglas Crockford：下面是做公司的三种方式。
&gt;&gt; Douglas Crockford: So here are three ways to do inc.

104
00:06:13.339 --> 00:06:15.879
第一个是1的加法f，谁得到了这个？
First one is add f of 1, who got that one?

105
00:06:17.040 --> 00:06:20.860
好的，下一个是加法和1的升力f，谁知道了？
Okay, the next is lift f of add and 1, who got that?

106
00:06:22.199 --> 00:06:24.850
和咖喱的Add和1谁收到了？
And curry of add and 1 who got that?

107
00:06:24.850 --> 00:06:25.660
谁把这三个都拿走了？
And who got all three?

108
00:06:26.660 --> 00:06:31.319
非常好，所以这说明了函数式编程的第一个规则，即，
Very good, so this illustrates the first rule of functional programming which is,

109
00:06:31.319 --> 00:06:33.350
让函数来完成这项工作。
let the functions do the work.

110
00:06:33.350 --> 00:06:36.439
如果您已经编写了完成所需操作的函数，
If you've already written a function that does what you need,

111
00:06:36.439 --> 00:06:37.519
你不需要再写一个。
you don't need to write another one.
