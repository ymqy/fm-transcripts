WEBVTT

1
00:00:00.000 --> 00:00:04.224
[音乐]
[MUSIC]

2
00:00:04.224 --> 00:00:05.799
&gt；&gt；道格拉斯：你说我们做一些面向对象的编程？
&gt;&gt; Douglas: When you say we do some object-oriented programming?

3
00:00:07.480 --> 00:00:08.949
好的。
Yeah, all right.

4
00:00:08.949 --> 00:00:10.400
是啊。
Yeah.

5
00:00:10.400 --> 00:00:12.410
所以我们现在要对一个物体做些什么。
So we're gonna do something with an object now.

6
00:00:13.519 --> 00:00:17.800
我们将编写一个计数器函数，它返回一个包含两个函数的对象
We're gonna write a counter function that returns an object containing two functions

7
00:00:17.800 --> 00:00:21.969
它实现了一个向上向下的计数器，隐藏了计数器。
that implement an up down counter, hiding the counter.

8
00:00:21.969 --> 00:00:26.600
所以我们将调用计数器工厂并传入一个初始值，
So we'll call the counter factory and pass in an initial value,

9
00:00:26.600 --> 00:00:31.329
它将返回一个包含up方法和down方法的对象，并且
and it will return an object containing an up method and a down method, and

10
00:00:31.329 --> 00:00:34.560
当我们调用时，它将向值中加1并返回它。
when we call up, it will add one to the value and return it.

11
00:00:34.560 --> 00:00:37.659
当我们向下调用时，它将从值中减去1
When we call down, it will subtract one from the value and

12
00:00:37.659 --> 00:00:43.787
还给我。&gt；&gt；道格拉斯：和
return it. &gt;&gt; Douglas: And

13
00:00:43.787 --> 00:00:45.890
我给你个提示，没有全局变量。
I'll give you a hint, no global variables.

14
00:00:45.890 --> 00:00:48.573
不是这个，不是那些废话。&gt；&gt；扬声器2：我们不需要这些。
No this, none of that crap. &gt;&gt; Speaker 2: We don't need any of that.

15
00:00:48.573 --> 00:00:50.271
&gt；&gt；扬声器3：该死。
&gt;&gt; Speaker 3: Darn it.

16
00:00:50.271 --> 00:00:52.027
&gt；&gt；扬声器2：我总是使用global
&gt;&gt; Speaker 2: I always use global

17
00:00:52.027 --> 00:00:54.335
变数无处不在。
variables everywhere.

18
00:00:54.335 --> 00:00:57.820
这是Ben教我做的。&gt；&gt；演讲者3：我没有教你怎么做
It's what Ben taught me to do. &gt;&gt; Speaker 3: I did not teach you to do

19
00:00:57.820 --> 00:01:00.054
那个。&gt；&gt；扬声器2：什么能去-本总是
that. &gt;&gt; Speaker 2: What could go- Ben always

20
00:01:00.054 --> 00:01:01.762
说更多的全球信息。&gt；&gt；扬声器3：正好相反
says more globals. &gt;&gt; Speaker 3: It's exactly the opposite of

21
00:01:01.762 --> 00:01:02.281
那个。&gt；&gt；扬声器2：更多
that. &gt;&gt; Speaker 2: More

22
00:01:02.281 --> 00:01:07.340
全球。&gt；&gt；道格拉斯：这里是计数器，
globals. &gt;&gt; Douglas: So here is counter,

23
00:01:07.340 --> 00:01:12.079
它接受一个值，它返回一个包含两个函数的对象。
it takes a value, it returns an object containing two functions.

24
00:01:12.079 --> 00:01:16.519
第一个是up函数，它将值加1并返回。
The first one, the up function, adds one to the value and returns it.

25
00:01:16.519 --> 00:01:18.340
另一个，向下功能，
The other one, the down function,

26
00:01:18.340 --> 00:01:20.750
从值中减去1并返回它。
subtracts one from the value and returns it.

27
00:01:20.750 --> 00:01:21.939
那么谁有用的东西呢？
So who got something that works?

28
00:01:23.349 --> 00:01:23.849
才华横溢。
Brilliant.

29
00:01:24.980 --> 00:01:26.349
如果你没有得到它，写下来，
If you didn't get it, write it down,

30
00:01:26.349 --> 00:01:28.379
因为你以后会想参考这个模式。
cuz you'll want to refer to this pattern later.

31
00:01:28.379 --> 00:01:31.780
所以这与我们昨天讨论的非常相似，我们得到了
So this is very similar to what we talked about yesterday, where we've got

32
00:01:31.780 --> 00:01:36.890
闭包中的两个函数都共享公共数据。
two functions inside of a closure which are both sharing common data.

33
00:01:36.890 --> 00:01:39.299
这是一个非常简单的例子，但是
This is a very simple example of that, but

34
00:01:39.299 --> 00:01:43.189
基本上，所有对象构造函数都将遵循此模式。
basically, all object constructors are gonna follow this pattern.

35
00:01:44.909 --> 00:01:46.000
关于这个有什么问题吗？
Any questions about this?

36
00:01:48.210 --> 00:01:49.159
好的，想再做一个吗？
Okay, want to do another one?

37
00:01:50.430 --> 00:01:52.469
所以下一个，我保证，
So this next one, I promise,

38
00:01:52.469 --> 00:01:55.849
听起来会比实际情况更糟，好吗？
is going to sound much worse than it actually is, okay?

39
00:01:58.000 --> 00:02:00.939
因此，创建一个可撤销的函数，它接受一个二进制函数并
So, make a revocable function that takes a binary function and

40
00:02:00.939 --> 00:02:03.969
返回一个包含Invoke函数的对象，该函数可以调用二进制文件
returns an object containing an invoke function that can invoke the binary

41
00:02:03.969 --> 00:02:06.950
函数和禁用Invoke函数的REVOKE函数。
function and a revoke function that disables the invoke function.

42
00:02:06.950 --> 00:02:11.229
好的，让我来解释一下这里到底发生了什么。
Okay, so let me explain what's actually going on here.

43
00:02:11.229 --> 00:02:15.509
这可能具有一些安全属性，并且我们可能
This is something that might have some security properties, and that we might

44
00:02:15.509 --> 00:02:19.289
有一些客户代码，我们允许进入我们的系统，我们希望它能够
have some guest code that we allow into our system, and we want it to be able to

45
00:02:19.289 --> 00:02:24.009
我们想跑多久就跑多久，但在任何时候，我们都希望能够切断它。
run as long as we want it to, but at any point, we want to be able to cut it off.

46
00:02:24.009 --> 00:02:27.759
我们不想为了实现以下目的而重写现有的API
And we don't want to have to rewrite our existing APIs in order to

47
00:02:27.759 --> 00:02:29.150
适应这一点。
accommodate that.

48
00:02:29.150 --> 00:02:32.514
这是我们之前写的极限函数的一个变体。
So this is a variation on the limit function that we wrote earlier.

49
00:02:32.514 --> 00:02:35.329
实际上，当您正在执行以下操作时，您可能希望参考您的Limit实现
In fact, you might want to refer to your implementation of limit when you're

50
00:02:35.329 --> 00:02:35.949
做这个。
doing this one.

51
00:02:38.039 --> 00:02:42.614
除了这一个，而不是统计你要做多少次
Except in this one, instead of keeping a count about how many times you get to do

52
00:02:42.614 --> 00:02:46.492
它，我们将有一个名为revoke的单独函数，它将，
it, we will have a separate function called revoke, which will,

53
00:02:46.492 --> 00:02:49.430
当我们调用它时，使它停止工作。
when we call it, cause the thing to stop working.

54
00:02:50.930 --> 00:02:55.670
好的，所以我们将调用可撤销的工厂，我们将传入任何现有的函数，在
Okay, so we'll call our revocable factory, we'll pass in any existing function, in

55
00:02:55.670 --> 00:03:01.189
本例中为add函数，它将返回一个包含两个函数的对象。
this case, the add function, and it will return an object containing two functions.

56
00:03:01.189 --> 00:03:05.569
其中之一将是Invoke函数，它是可撤销的Add函数。
One of them will be the invoke function, which is the revocable add function.

57
00:03:05.569 --> 00:03:08.469
我们可以把这个功能交给第三方，但是
And we can give that function to the third party, but

58
00:03:08.469 --> 00:03:11.639
我们将为自己保留REVOKE函数。
we will hold on to the revoke function for ourselves.

59
00:03:11.639 --> 00:03:16.889
因此，可撤销的add函数将像add一样工作，直到
So the revocable add function will work just like add until

60
00:03:16.889 --> 00:03:18.520
我们调用revoke函数。
we call the revoke function.

61
00:03:18.520 --> 00:03:21.731
在这一点上，它所做的就是返回undefined。
At that point, all it does is return undefined.

62
00:03:21.731 --> 00:03:27.299
大家都清楚了吗？&gt；&gt；扬声器2：所以
Everybody clear? &gt;&gt; Speaker 2: So

63
00:03:27.299 --> 00:03:31.055
基本上，我们真正需要的是点参数和
it's basically, what we really need, the dot dot dot arguments and

64
00:03:31.055 --> 00:03:33.365
然后[INAUDIBLE]。&gt；&gt；道格拉斯：是的，我们希望这能起作用
then [INAUDIBLE]. &gt;&gt; Douglas: Yeah, we want this to work for

65
00:03:33.365 --> 00:03:34.841
所有功能，对吗？&gt；&gt；扬声器2：是的，并且
all functions, right? &gt;&gt; Speaker 2: Yeah, and

66
00:03:34.841 --> 00:03:37.081
这只适用于。&gt；&gt；Douglas：用于二进制。
that only works for. &gt;&gt; Douglas: For binary.

67
00:03:37.081 --> 00:03:41.795
实际上，任何适用于二进制的东西，可能都适用于一元，
And actually, anything that works for binary, probably works for unary,

68
00:03:41.795 --> 00:03:45.921
因为我们只是将undefined作为第二个参数传递，
because we're just gonna pass undefined as the second argument,

69
00:03:45.921 --> 00:03:47.522
然后它就被忽略了。&gt；&gt；扬声器2：SO
then it gets ignored. &gt;&gt; Speaker 2: So

70
00:03:47.522 --> 00:03:51.409
[听不见]可以提前计划&gt；&gt；道格拉斯：是的，如果你知道我们从来没有
[INAUDIBLE] could just plan ahead. &gt;&gt; Douglas: Yeah, if you knew we never

71
00:03:51.409 --> 00:03:56.527
使用了十多台路由器，您可以做到这一点，但谁愿意这样做呢？
used more than ten routers, you could do that, but who wants to do that?

72
00:03:56.527 --> 00:04:01.830
是的，很可怕。&gt；&gt；扬声器3：但是
Yeah, it's awful. &gt;&gt; Speaker 3: But

73
00:04:01.830 --> 00:04:06.205
你可以打电话，如果在里面，你可以随时打电话给我们的
you could call, if inside, you could always just call our

74
00:04:06.205 --> 00:04:09.930
[听不见]你可以把它传到任何地方？&gt；&gt；道格拉斯：你
[INAUDIBLE] you can pass that wherever? &gt;&gt; Douglas: You

75
00:04:09.930 --> 00:04:11.009
可以。&gt；&gt；扬声器3：好的。
can. &gt;&gt; Speaker 3: Okay.

76
00:04:11.009 --> 00:04:12.169
&gt；&gt；Douglas：所以你今天可以这样做，
&gt;&gt; Douglas: So you can do that today,

77
00:04:12.169 --> 00:04:15.762
太难看了，我不想浪费你的时间，所以
it's just inexcusably ugly, and I don't want to waste your time with it, so

78
00:04:15.762 --> 00:04:18.204
我们不会那么做的。&gt；&gt；扬声器2：[无法听到]参数为零，
we're not gonna do that. &gt;&gt; Speaker 2: [INAUDIBLE] Argument zero,

79
00:04:18.204 --> 00:04:21.629
参数一，参数二，你不能直接传入参数对象。
argument one, argument two, you can't just pass in the arguments object.

80
00:04:23.470 --> 00:04:24.973
&GT；&GT；道格拉斯：实际上，你不能，是的，
&gt;&gt; Douglas: Actually, you can't, yeah,

81
00:04:24.973 --> 00:04:28.350
这是个问题&gt；&gt；扬声器2：它不起作用
which is kind of a problem. &gt;&gt; Speaker 2: It didn't work for

82
00:04:28.350 --> 00:04:29.764
我就是那样。
me that way.

83
00:04:29.764 --> 00:04:32.411
那是我去的地方，
That was my go to,

84
00:04:32.411 --> 00:04:38.250
尝试那个[INAUDIBLE]好。&gt；&gt；道格拉斯：你可能
to try that [INAUDIBLE] Good. &gt;&gt; Douglas: You probably

85
00:04:38.250 --> 00:04:39.644
做错了什么，这很好。
did something wrong, which is great.

86
00:04:39.644 --> 00:04:40.865
&gt；&gt；[笑]&gt；&gt；Douglas：继续做
&gt;&gt; [LAUGH] &gt;&gt; Douglas: Keep doing

87
00:04:40.865 --> 00:04:41.567
那个。&gt；&gt；扬声器3：它是
that. &gt;&gt; Speaker 3: It's

88
00:04:41.567 --> 00:04:43.829
争论？&gt；&gt；道格拉斯：争论。
arguments? &gt;&gt; Douglas: Arguments.

89
00:04:45.600 --> 00:04:47.279
&gt；&gt；演讲者3：所以如果你在
&gt;&gt; Speaker 3: So if you get arguments in

90
00:04:47.279 --> 00:04:52.720
一个函数，然后调用其中的另一个函数，传递参数，
a function, and you call another function inside of that, passing arguments,

91
00:04:52.720 --> 00:04:57.040
您将数组传递给该函数，而不是传递
you're passing an array to that function, you're not passing

92
00:04:57.040 --> 00:05:00.649
该数组中的每个参数。&gt；&gt；道格拉斯：对。
each of the arguments in that array. &gt;&gt; Douglas: Right.

93
00:05:00.649 --> 00:05:01.343
&gt；&gt；扬声器3：这就是为什么它不起作用。
&gt;&gt; Speaker 3: That's why it doesn't work.

94
00:05:01.343 --> 00:05:03.293
&gt；&gt；Douglas：但然后可以使用Apply
&gt;&gt; Douglas: But you could then use apply

95
00:05:03.293 --> 00:05:07.720
把它展开。&gt；&gt；扬声器3：在ES6或？
to spread it out. &gt;&gt; Speaker 3: In ES6 or?

96
00:05:07.720 --> 00:05:08.639
&gt；&gt；Douglas：在ES3中。
&gt;&gt; Douglas: In ES3.

97
00:05:08.639 --> 00:05:09.252
&gt；&gt；扬声器3：好的。
&gt;&gt; Speaker 3: Okay.

98
00:05:09.252 --> 00:05:10.057
道格拉斯：是的。
&gt;&gt; Douglas: Yeah.

99
00:05:10.057 --> 00:05:12.115
&gt；&gt；扬声器3：阵列。应用[INAUDIBLE]。
&gt;&gt; Speaker 3: Array.apply [INAUDIBLE].

100
00:05:12.115 --> 00:05:15.971
对不起，[INAUDIBLE]争论。&gt；&gt；道格拉斯：不，不幸的是，
I'm sorry, [INAUDIBLE] arguments. &gt;&gt; Douglas: No, unfortunately,

101
00:05:15.971 --> 00:05:17.836
这是函数应用。
it's Function.apply.

102
00:05:17.836 --> 00:05:21.399
所以，我们不会这么做。
So, we're not doing that.

103
00:05:21.399 --> 00:05:23.079
太可怕了。&GT；&GT；扬声器3：对，
It's too awful. &gt;&gt; Speaker 3: That's right,

104
00:05:23.079 --> 00:05:23.930
你昨天给我们看了。
you showed us yesterday.

105
00:05:23.930 --> 00:05:26.189
你说它很丑，所以我忽略了它。道格拉斯：是的，
And you said it was ugly, so I ignored it. &gt;&gt; Douglas: Yeah,

106
00:05:26.189 --> 00:05:28.029
很好你忽略了它。
it was good that you ignored it.

107
00:05:28.029 --> 00:05:29.459
好的，我们准备好撤销了吗？
Okay, we ready for revocable?

108
00:05:30.620 --> 00:05:32.319
所以这里是可撤销的。
So here's revocable.

109
00:05:32.319 --> 00:05:36.740
它接受一个二进制函数并返回一个包含Invoke方法和
It takes a binary function and returns an object containing an invoke method and

110
00:05:36.740 --> 00:05:38.170
REVOKE方法。
a revoke method.

111
00:05:38.170 --> 00:05:43.115
Invoke方法查看是否未定义二进制。
The invoke method looks to see if binary is undefined.

112
00:05:43.115 --> 00:05:47.550
如果不是，那么它将调用它，传递第一个和第二个参数。
If it isn't, then it will call it, passing the first and second argument.

113
00:05:49.069 --> 00:05:51.040
否则，它不做任何事情并返回undefined。
Otherwise, it doesn't do anything and returns undefined.

114
00:05:52.199 --> 00:05:56.980
REVOKE函数将BINARY设置为UNDEFINED，从而禁用Invoke函数。
Revoke function sets binary to undefined, thereby disabling the invoke function.

115
00:05:58.139 --> 00:05:59.310
那么谁有用的东西呢？
So who's got something that works?

116
00:06:00.459 --> 00:06:01.470
非常好。
Very good.

117
00:06:01.470 --> 00:06:03.149
有人做了什么不同的事吗？
Anybody do something different?

118
00:06:04.259 --> 00:06:08.416
有什么值得注意的吗？&gt；&gt；扬声器3：我放了一个变量好的，哪一个
Something notable? &gt;&gt; Speaker 3: I put a variable okay which

119
00:06:08.416 --> 00:06:11.879
我设置为FALSE，但都是一样的。&GT；&GT；道格拉斯：没关系，
I set to false, but it's the same thing. &gt;&gt; Douglas: That is okay,

120
00:06:11.879 --> 00:06:13.290
是啊。&gt；&gt；扬声器3：谢谢。
yeah. &gt;&gt; Speaker 3: Thanks.

121
00:06:13.290 --> 00:06:15.944
所以，我打开这个，所以我创造了。
So, I open this up, so I create.

122
00:06:15.944 --> 00:06:20.269
我们制作了这个物体，它在，
We made this object, which is in the,

123
00:06:20.269 --> 00:06:26.120
我在控制台中看着我的对象，我想反省它。
and I look in the console at my object, and I want to introspect it.

124
00:06:26.120 --> 00:06:27.800
所以我扩展了它。
So I expand it.

125
00:06:29.879 --> 00:06:31.829
二进制在哪里？
Where's binary in there?

126
00:06:31.829 --> 00:06:37.500
很明显，它不是作为这个对象的一部分公开的，
It's obvious, it's not exposed publicly as a part of this object,

127
00:06:37.500 --> 00:06:39.832
但它知道这件事。道格拉斯：对，
but it knows about it. &gt;&gt; Douglas: Right,

128
00:06:39.832 --> 00:06:43.735
二进制隐藏在可撤销函数的函数作用域中，并且
binary is hidden in the function scope of the revocable function, and

129
00:06:43.735 --> 00:06:46.800
只有在其关闭时才可用。
is available only through its closure.

130
00:06:46.800 --> 00:06:51.543
并且宇宙中唯一可以访问该闭包的函数被调用，并且
And the only functions in the universe who have access to that closure are invoke and

131
00:06:51.543 --> 00:06:52.096
撤销。
revoke.

132
00:06:52.096 --> 00:06:58.238
所以这就是为什么我们可以用它来构建安全系统的原因。
So that's why this is something that we can build secure systems out of.

133
00:06:58.238 --> 00:07:01.773
你知道，如果我们拿走你的OK旗帜
You know, if we were to take your okay flag and

134
00:07:01.773 --> 00:07:07.357
将其放在对象本身中，然后攻击者可以进入该对象并
put it in the object itself, then the attacker could go to the object and

135
00:07:07.357 --> 00:07:09.762
把它转到另一个方向。&gt；&gt；扬声器3：好的。
turn it the other way. &gt;&gt; Speaker 3: Right.

136
00:07:09.762 --> 00:07:11.403
&gt；&gt；道格拉斯：所以这不会实现
&gt;&gt; Douglas: So that wouldn't accomplish

137
00:07:11.403 --> 00:07:12.819
我们想在这里做什么。&gt；&gt；扬声器3：SO
what we want to do here. &gt;&gt; Speaker 3: So

138
00:07:12.819 --> 00:07:16.180
我们显然可以查看来源，但你显然会，我的意思是，它是。
we could obviously look at the source, but you'd obviously, I mean, it's.

139
00:07:16.180 --> 00:07:16.987
&gt；&gt；道格拉斯：对，所以
&gt;&gt; Douglas: Right, so

140
00:07:16.987 --> 00:07:21.399
我们假设攻击者总是可以查看源代码。
we assume that the attacker can always look at the source.

141
00:07:22.459 --> 00:07:25.230
但是他们可以看看这个消息来源，这对他们没有帮助，对吧，
But they can look at this source and it doesn't help them, right,

142
00:07:25.230 --> 00:07:30.819
除非他们在创建对象时在场，否则他们无法到达它。
unless they were there at the creation of the object, they can't get to it.

143
00:07:30.819 --> 00:07:32.771
他们不能进入二进制。&gt；&gt；扬声器2：SO
They can't get to binary. &gt;&gt; Speaker 2: So

144
00:07:32.771 --> 00:07:36.485
在这种情况下，撤销是不可撤销的。&GT；&GT；道格拉斯：没错，
revoke is irrevocable in this case. &gt;&gt; Douglas: That's right,

145
00:07:36.485 --> 00:07:37.990
这是单程旅行。
this is a one-way trip.

146
00:07:37.990 --> 00:07:41.129
现在，我们可以设计这个以不同的方式工作。
Now, we could design this to work a different way.

147
00:07:41.129 --> 00:07:45.548
使用他的OK变量作为开关，我们可以提供第二个
Using his okay variable as an on-off switch, we could provide a second

148
00:07:45.548 --> 00:07:50.459
函数或者可能是要撤销的参数，可以将其逆转。
function or maybe an argument to revoke which could reverse it.

149
00:07:50.459 --> 00:07:55.552
但一般来说，我更喜欢这样的系统，一旦我们切断它们，它就会被切断，而我们不会
But generally, I prefer systems where once we cut them off, it's off, and we don't

150
00:07:55.552 --> 00:08:00.100
必须担心有什么东西以一种意想不到的方式再次打开它。
have to worry about something turning it back on again in an unexpected way.

151
00:08:01.230 --> 00:08:03.735
是吗？&gt；&gt；扬声器4：因为你没有明确
Yeah? &gt;&gt; Speaker 4: Since you're not explicitly

152
00:08:03.735 --> 00:08:08.579
返回Invoke中未定义的？&gt；&gt；Douglas：mm-hm。
returning undefined in the invoke? &gt;&gt; Douglas: Mm-hm.

153
00:08:08.579 --> 00:08:09.192
&gt；&gt；扬声器4：这是不是你
&gt;&gt; Speaker 4: Is this a case where you

154
00:08:09.192 --> 00:08:10.870
说，你在是否应该返回未定义或
said, you flip flop on whether you should return undefined or

155
00:08:10.870 --> 00:08:13.220
不是吗？&gt；&gt；道格拉斯：没错。
not? &gt;&gt; Douglas: That's right.

156
00:08:13.220 --> 00:08:17.290
我的意思是，我喜欢，直截了当的想法，我也不喜欢
I mean, I like, the idea of being explicit, and I also like not

157
00:08:17.290 --> 00:08:19.576
做我不需要做的事。&gt；&gt；[笑]。
doing anything I don't have to do. &gt;&gt; [LAUGH].

158
00:08:19.576 --> 00:08:21.346
&gt；&gt；扬声器4：有点不一致
&gt;&gt; Speaker 4: Kind of at odds with each

159
00:08:21.346 --> 00:08:23.048
其他。&gt；&gt；道格拉斯：是的，没错。
other. &gt;&gt; Douglas: Yeah, exactly.

160
00:08:23.048 --> 00:08:24.478
那里有一个真正的冲突。
There's a real conflict there.

161
00:08:24.478 --> 00:08:27.292
但大多数时候，做正确的事情
But most of the time, doing the right thing and

162
00:08:27.292 --> 00:08:30.839
做正确的事显然是一回事。
doing the right thing are obviously the same thing.

163
00:08:30.839 --> 00:08:33.409
这是其中一种情况，它不是那么多。
This is one of the cases where it isn't so much.
