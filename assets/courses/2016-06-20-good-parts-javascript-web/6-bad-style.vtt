WEBVTT

1
00:00:00.000 --> 00:00:04.113
[音乐]
[MUSIC]

2
00:00:04.113 --> 00:00:07.589
&gt；&gt；道格拉斯：所以这是我对汤普森的最后一件事。
&gt;&gt; Douglas: So this is the last thing I'm going to complain about Thompson.

3
00:00:07.589 --> 00:00:12.162
再一次，我要感谢汤普森，汤普森给了我们Unix，
And again, I have to appreciate Thompson, Thompson gave us Unix,

4
00:00:12.162 --> 00:00:16.347
汤普森给了我们B，这导致了我们所有的现代语言。
Thompson gave us B, which led to all of our modern languages.

5
00:00:16.347 --> 00:00:20.423
汤普森给了我们正则表达式，汤普森给了我们UTF-8，
Thompson gave us regular expressions, Thompson gave us UTF-8,

6
00:00:20.423 --> 00:00:24.007
我认为这是我见过的最聪明的事情之一。
which I think is one of the smartest things I've ever seen.

7
00:00:24.007 --> 00:00:26.998
汤普森给了我们一些惊人的礼物
Thompson has given us some amazing gifts, and

8
00:00:26.998 --> 00:00:32.909
作为专业程序员，我们都欠汤普森很大一笔钱。
as professional programmers, we all owe a tremendous amount to Thompson.

9
00:00:32.909 --> 00:00:37.685
不幸的是，汤普森在编程语言方面的品味很差，在编程方面
Unfortunately, Thompson had terrible taste in programming languages, in programming

10
00:00:37.685 --> 00:00:41.780
语言设计，更糟糕的是，他的影响力非常大。
language design, and even worse than that, he was extremely influential.

11
00:00:41.780 --> 00:00:46.395
所以我们所有人从第一次开始就一直在阅读汤普森的设计
So all of us have been reading Thompson's designs from our first

12
00:00:46.395 --> 00:00:48.107
几个小时的编程。
hours of programming.

13
00:00:48.107 --> 00:00:52.159
我们做了这么久，看起来一切都很好，
And we've been doing it so long, it all looks right to us,

14
00:00:52.159 --> 00:00:56.728
我们看不到这件事有多糟糕，也看不到它对我们的影响有多大。
we cannot see how bad this stuff is and how much it compromises us.

15
00:00:56.728 --> 00:01:03.780
例如，+运算符，这是为了做指针运算，
So for example, the ++ operator, this was added to be for doing pointer arithmetic,

16
00:01:03.780 --> 00:01:09.141
并且我们已经确定指针运算是有害的。
and we have since determined that pointer arithmetic is harmful.

17
00:01:09.141 --> 00:01:10.893
所以我们不再这么做了
So we don't do it any more,

18
00:01:10.893 --> 00:01:14.418
现代语言不支持指针运算。
modern languages do not support pointer arithmetic.

19
00:01:14.418 --> 00:01:19.206
最后一种使用指针算法的流行语言是C+，
The last popular language to have pointer arithmetic was C++,

20
00:01:19.206 --> 00:01:23.132
一种如此糟糕的语言，它是以这个运算符命名的。
a language so bad, it was named after this operator.

21
00:01:23.132 --> 00:01:25.019
&gt；&gt；扬声器2：[laugh]&gt；&gt；Douglas：但是
&gt;&gt; Speaker 2: [LAUGH] &gt;&gt; Douglas: But

22
00:01:25.019 --> 00:01:28.771
操作员拒绝死亡，它仍然在我们所有的语言中，
the operator refused to die, it's still in all of our languages,

23
00:01:28.771 --> 00:01:32.268
即使我们不再需要它来增加指针。
even though we don't need it to increment pointers anymore.

24
00:01:32.268 --> 00:01:36.740
所以现在我们用它给变量加1，这是完全不必要的，
So now we use it to add one to variables, which is completely unnecessary,

25
00:01:36.740 --> 00:01:37.526
但我们做到了。
but we do it.

26
00:01:37.526 --> 00:01:42.493
不幸的是，它导致了一种编程风格，在这种风格中，您试图编写一个
And unfortunately, it leads to a style of programming in which you try to write one

27
00:01:42.493 --> 00:01:45.950
衬垫，在里面你试着拿一大堆东西，然后
liners, in which you try to take a whole bunch of stuff and

28
00:01:45.950 --> 00:01:48.039
试着把它挤成一行。
try to smush it down into one line.

29
00:01:49.049 --> 00:01:51.515
这会导致非常糟糕的代码，
And that leads to really bad code,

30
00:01:51.515 --> 00:01:55.860
很难维护，很难纠正的东西。
stuff which is very hard to maintain, very hard to correct.

31
00:01:55.860 --> 00:02:00.120
我们看到了安全错误，缓冲区溢出，诸如此类的事情，
We've seen security errors, buffer overruns, those sorts of things,

32
00:02:00.120 --> 00:02:04.254
这个运算符总是牵涉到这些类型的安全错误中。
this operator is always implicated in those sorts of security errors.

33
00:02:04.254 --> 00:02:08.262
而且我发现在我自己的实践中，任何时候我在任何地方使用+，
And I found in my own practice, any time I use ++ anywhere,

34
00:02:08.262 --> 00:02:11.798
这东西抓住了我，我无法控制它，
this thing takes hold of me, and I can't control it,

35
00:02:11.798 --> 00:02:15.826
它让我想要将代码并尝试将其压缩为一行。
it makes me wanna take code and try to mush it down to one line.

36
00:02:15.826 --> 00:02:20.121
即使我知道这是一件愚蠢的事，我也无法控制自己，
Even though I know that's a stupid thing to do, I can't control myself,

37
00:02:20.121 --> 00:02:24.209
这东西控制了我，我开始写一些非常愚蠢的东西，
this thing takes hold of me, and I start writing really stupid stuff,

38
00:02:24.209 --> 00:02:26.307
以为我真的很聪明。
thinking I'm being really smart.

39
00:02:26.307 --> 00:02:30.780
所以最终，我不得不停下来，因为我做不到一点点。
So eventually, I had to stop because I couldn't do it a little bit.

40
00:02:30.780 --> 00:02:31.474
我必须完全停止。
I had to stop completely.

41
00:02:31.474 --> 00:02:36.334
所以我说不再+了，从现在开始，是+=1，
So I said no more ++, from now on, it's +=1,

42
00:02:36.334 --> 00:02:39.508
我可以放松，这很容易。
and I can relax, and it's easy.

43
00:02:39.508 --> 00:02:40.891
我现在可以写出好的程序了。
I can just write good programs now.

44
00:02:44.141 --> 00:02:48.180
&gt；&gt；道格拉斯：食物味道更好，只是，一切都很棒。
&gt;&gt; Douglas: Food tastes better, it's just, everything's great.

45
00:02:48.180 --> 00:02:52.848
有一段时间，我以为只有我，但现在我推荐大家
And for a while, I thought it was just me, but now I'm recommending everybody

46
00:02:52.848 --> 00:02:57.323
一直都是+=1，每次都是+=1，太棒了，好多了。
+=1 all the time, every time, +=1, it's great, so much better.

47
00:02:57.323 --> 00:03:01.539
但我总是听到人们说，但是
But I hear from people all the time, saying but

48
00:03:01.539 --> 00:03:06.730
我想写x+因为它的意思是一样的，
I wanna be able to write x++ cuz it means the same thing,

49
00:03:06.730 --> 00:03:13.778
而不是必须去，我不能去，我没有那样的时间。
and instead of having to go, and I can't go, I don't have that kind of time.

50
00:03:13.778 --> 00:03:16.768
除了打字时间是不相关的，
Except that the typing time is irrelevant,

51
00:03:16.768 --> 00:03:21.146
这完全无关紧要，我们不会把时间花在打字上。
it is completely irrelevant, we don't spend our time typing.

52
00:03:21.146 --> 00:03:28.002
但更重要的是，它是+x，这意味着和x+=1差不多。
But more than that, it's ++x, which means about the same thing as x+=1.

53
00:03:28.002 --> 00:03:32.646
所以每当我看到有人在增量位置写x+时，我就不得不问，
So any time I see someone writing x++ in increment position, I have to ask,

54
00:03:32.646 --> 00:03:38.170
这个小丑明白增量前后的区别吗？
does this clown understand the difference between pre-increment and post-increment?

55
00:03:38.170 --> 00:03:41.000
这意味着我必须查看他程序中的每个+
And it means I have to look at every ++ in his program and

56
00:03:41.000 --> 00:03:42.479
问他这个答对了吗？
ask did he get this one right?

57
00:03:42.479 --> 00:03:43.485
他这次做对了吗？
Did he get this one right?

58
00:03:43.485 --> 00:03:48.437
因为这是一个小的诵读困难的东西，这真的很难说出来，当你有
Cuz it's a little dyslexic thing, which it's really hard to tell when you've got

59
00:03:48.437 --> 00:03:53.189
它们颠倒了，它导致了一个区域的关闭，这只是一个瞬间的关闭。
them reversed, and it causes an off by one area that's only off for an instant.

60
00:03:53.189 --> 00:03:58.111
但这足以导致bug，而且调试这些东西真的很难。
But that's enough to cause a bug, and it's really hard to debug those things.

61
00:03:58.111 --> 00:04:04.110
支持+的理由是它提高了可读性，这是胡说八道。
The argument in favor of ++ is that it improves readability, which is bullshit.

62
00:04:04.110 --> 00:04:08.024
它没有改善可读性，它改善了模糊性，
It does not improve readability, it improves ambiguity,

63
00:04:08.024 --> 00:04:10.960
它改善了混乱，这是不可取的事情。
it improves confusion, which are things which are not desirable.

64
00:04:12.810 --> 00:04:17.682
所以我在回顾一些代码，我看到了+x，+x，那么那里发生了什么？
So I was reviewing some code and I saw ++x, ++x, so what's going on there?

65
00:04:17.682 --> 00:04:22.086
所以有可能是复制和粘贴错误，除了代码似乎
So it's possible that it was a copy and paste error, except the code seemed to be

66
00:04:22.086 --> 00:04:26.293
工作，所以更有可能，所发生的是有人做了a+x和
working, so more likely, what had happened was someone had done a ++x and

67
00:04:26.293 --> 00:04:30.201
然后其他人注意到，这里有一个问题。
then someone else noticed, there's an off by one problem here.

68
00:04:30.201 --> 00:04:34.478
所以又做了一次，如果原始代码说+=1，
So did it again, if the original code said +=1,

69
00:04:34.478 --> 00:04:38.860
那么显而易见的解决方案是+=2，对吧？
then the obvious solution would be += 2, right?

70
00:04:38.860 --> 00:04:43.500
它提出了一个问题，为什么我们认为我们需要完全不同的
And it raises the question, why do we think we need completely different

71
00:04:43.500 --> 00:04:47.466
将1添加到变量中，然后每隔一个值添加一的语法？
syntax for adding one to a variable, then every other value?

72
00:04:47.466 --> 00:04:49.596
这怎么说得通？
How does that make any sense?

73
00:04:49.596 --> 00:04:53.446
答案是，这没有任何意义，但是
The answer is, it does not make any sense, but

74
00:04:53.446 --> 00:04:59.571
在我们的语言中，我们对糟糕的语法有一种情感上的依恋
there is this emotional attachment we have to bad grammar in our languages

75
00:04:59.571 --> 00:05:05.026
这让我们觉得+就是我，这是我的一部分。
that makes us feel ++ is that's who I am, it's part of who I am.

76
00:05:05.026 --> 00:05:07.521
如果你把+从我身边拿走，我是什么？
If you take ++ away from me, what am I?

77
00:05:07.521 --> 00:05:08.817
还剩下什么？
What's left?

78
00:05:08.817 --> 00:05:10.468
阿华。
Wah.

79
00:05:10.468 --> 00:05:13.372
&gt；&gt；扬声器2：[笑]&gt；&gt；道格拉斯：华。
&gt;&gt; Speaker 2: [LAUGH] &gt;&gt; Douglas: Wah.

80
00:05:13.372 --> 00:05:17.723
所以没有成本，通过采用更严格的风格，
So for no cost, by adopting a more rigorous style,

81
00:05:17.723 --> 00:05:22.384
可以自动避免许多类别的错误。
many classes of errors can be automatically avoided.

82
00:05:22.384 --> 00:05:25.665
所以我想到了，那么谁的写作风格不好呢？
So it occurred to me, so who's writing with bad style?

83
00:05:25.665 --> 00:05:28.697
所以我想出了四类糟糕的造型师
So I came up with four classes of bad stylists, and

84
00:05:28.697 --> 00:05:33.550
在我的职业生涯中，我不得不在不同的时候承认，我曾经是所有这些人。
I have to confess at various times in my career, I have been all of these people.

85
00:05:33.550 --> 00:05:36.860
所以首先是受教育程度较低的人。
So first are the under educated.

86
00:05:36.860 --> 00:05:39.420
我们在Web开发人员中看到了很多这一点。
We see this a lot in web developers.

87
00:05:39.420 --> 00:05:44.298
我们现在有一些人正在编写JavaScript，他们没有接受过正式的培训
We have people who are writing JavaScript now who received no formal training

88
00:05:44.298 --> 00:05:49.175
在JavaScript中，他们通过查看一些源代码自学了如何做到这一点
in JavaScript, who taught themselves how to do it by doing View Source of some

89
00:05:49.175 --> 00:05:51.201
有史以来最糟糕的代码，
of the worst code ever written,

90
00:05:51.201 --> 00:05:55.805
一路送回Dreamweaver的垃圾复印件，简直是糟糕透顶的东西。
copies of crap going all the way back to Dreamweaver, just awful stuff.

91
00:05:55.805 --> 00:05:59.100
从来没有人告诉过这些人，你可以把这些东西做好，对吧？
And nobody ever told these people, you can do this stuff well, right?

92
00:05:59.100 --> 00:06:01.759
他们从来没有见过好的例子，这只是可悲的。
They've never seen good examples, it's just sad.

93
00:06:02.839 --> 00:06:07.519
然后是老派，非常熟练的人
Then there is old school, people who are extremely skilled and

94
00:06:07.519 --> 00:06:12.279
在一种特定的语言方面有经验，现在环境迫使他们工作
experienced in one particular language, and now circumstances force them to work

95
00:06:12.279 --> 00:06:17.149
在另一个，他们没有相同的知识或经验。
in another one, where they don't have that same knowledge or experience.

96
00:06:17.149 --> 00:06:21.716
我们现在Java和C+人员不得不进入的JavaScript中看到了很多这一点
We see this a lot now in JavaScript that Java and C++ guys are having to go into

97
00:06:21.716 --> 00:06:26.858
JavaScript，因为那里有工作，他们真的很苦恼。
JavaScript because that's where the jobs are, and they're really bitter about it.

98
00:06:26.858 --> 00:06:27.637
他们说好的
And they say okay,

99
00:06:27.637 --> 00:06:31.156
我会写你的JavaScript，但我不可能知道我在做什么。
I'll write in your JavaScript, but there's no way I'm gonna know what I'm doing.

100
00:06:31.156 --> 00:06:33.428
这是原则。
That's principle.

101
00:06:33.428 --> 00:06:38.040
&gt；&gt；扬声器2：[笑]&gt；&gt；道格拉斯：出于某种原因，
&gt;&gt; Speaker 2: [LAUGH] &gt;&gt; Douglas: For some reason,

102
00:06:38.040 --> 00:06:41.449
人们对于不知道自己在用JavaScript做什么感觉真的很好。
people feel really good about not knowing what they're doing with JavaScript.

103
00:06:42.579 --> 00:06:45.417
事实上，我们知道编程是一项复杂的业务，而且
In fact, we know that programming is complicated business, and

104
00:06:45.417 --> 00:06:47.387
你永远不想在无知中承担它。
you never want to undertake it in ignorance.

105
00:06:47.387 --> 00:06:50.790
但出于某种原因，我们对JavaScript一无所知感到非常好。
But for some reason, we feel really good about being ignorant about JavaScript.

106
00:06:50.790 --> 00:06:53.279
然后是寻求刺激的人。
And then there are the thrill seekers.

107
00:06:53.279 --> 00:06:56.250
这些人发现了，嘿，你知道你可以把你的分号放在
These are guys who found out, hey, did you know you can put your semicolon at

108
00:06:56.250 --> 00:06:59.231
语句的开头而不是结尾，有时它是有效的？
the beginning of a statement instead of at the end, and sometimes it works?

109
00:06:59.231 --> 00:07:00.160
哇！
Wah!

110
00:07:00.160 --> 00:07:01.992
&gt；&gt；扬声器2：[笑]&gt；&gt；道格拉斯：等
&gt;&gt; Speaker 2: [LAUGH] &gt;&gt; Douglas: And so

111
00:07:01.992 --> 00:07:05.187
他们写这种看起来很愚蠢的废话只是因为。
they just write this stupid looking crap just because.

112
00:07:05.187 --> 00:07:10.000
我认为像那样的人在编码时应该戴头盔。
I think people like that should have to wear helmets when they're coding.

113
00:07:11.439 --> 00:07:15.997
最后，暴露狂，这些人会研究标准，
And finally, the exhibitionist, these are people who will study the standard,

114
00:07:15.997 --> 00:07:19.696
研究实现，找到所有奇怪的角落情况，并且
study the implementations, find all the weird corner cases, and

115
00:07:19.696 --> 00:07:23.348
在这种语言中有很多奇怪的，奇怪的角落案例。
there are a lot of weird, bizarre corner cases in this language.

116
00:07:23.348 --> 00:07:26.475
并有意地在他们写的每一件事中使用它们，
And intentionally use them in everything that they write,

117
00:07:26.475 --> 00:07:30.639
你看着然后去的东西，该死的那是什么意思？
stuff where you look at and go, what the hell's that supposed to mean?

118
00:07:30.639 --> 00:07:31.889
他们以此为荣。
And they're proud of it.

119
00:07:31.889 --> 00:07:33.672
他们走了，看看这个，你根本不知道。
They go, look at that, you have no idea.

120
00:07:33.672 --> 00:07:35.922
但他们正在这么做，而且
But they're doing that, and

121
00:07:35.922 --> 00:07:40.516
他们会说那是故意的，我知道我在做什么。
they'll say that was intentional, I know what I'm doing.

122
00:07:40.516 --> 00:07:45.129
我说不，如果你知道自己在做什么，你就不会这么做了。
And I say no, if you knew what you were doing, you would not be doing that.
