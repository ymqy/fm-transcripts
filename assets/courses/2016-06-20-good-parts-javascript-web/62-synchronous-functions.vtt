WEBVTT

1
00:00:00.025 --> 00:00:03.825
[音乐]
[MUSIC]

2
00:00:03.825 --> 00:00:05.519
&gt；&gt；Douglas Crockford：现在是异步的时候了。
&gt;&gt; Douglas Crockford: It's time now for a Asynchronicity.

3
00:00:07.339 --> 00:00:09.539
所以世界上有两种功能，
So there are two kinds of functions in the world,

4
00:00:09.539 --> 00:00:13.490
有同步功能和异步功能。
there are Synchronous functions and Asynchronous functions.

5
00:00:13.490 --> 00:00:16.460
因此，让我们首先看一下同步函数。
So let's first look at Synchronous functions.

6
00:00:16.460 --> 00:00:19.410
同步函数是不返回的函数
A Synchronous function is a function that does not return

7
00:00:19.410 --> 00:00:22.440
直到工作完成或失败。
until the work is completed or has failed.

8
00:00:22.440 --> 00:00:25.562
所以我们过去几天写的所有函数都是
So all of the functions that we wrote for the last couple of days have been

9
00:00:25.562 --> 00:00:28.022
同步功能，因为它们就是这样工作的。
synchronous functions because that's how they work.

10
00:00:28.022 --> 00:00:32.271
这在函数中是非常有用的，因为它意味着，
And that's a very useful thing to have in a function because it means,

11
00:00:32.271 --> 00:00:35.368
随着时间的推移，很容易对它的行为进行推理。
it's easy to reason about its behavior over time.

12
00:00:35.368 --> 00:00:41.284
当异步函数调用另一个同步函数时。
When asynchronous function calls another synchronous function.

13
00:00:41.284 --> 00:00:43.244
呼叫者被及时挂起
The caller is suspended in time and

14
00:00:44.505 --> 00:00:48.575
在被呼叫者返回之前没有任何进展。
nothing advances until the the callee returns.

15
00:00:49.835 --> 00:00:54.320
如果呼叫者在他们拨打电话的那一刻正在看时钟。
If the caller is looking at a clock at the moment that they make the call.

16
00:00:54.320 --> 00:00:58.200
他们的经验是，双手快速向前跳跃。
Their experience will be, that the hands jump forward quickly.

17
00:00:58.200 --> 00:01:00.789
但除此之外，他们并不知道这件事已经发生了，
But otherwise, they're not aware that this stuff has happened,

18
00:01:00.789 --> 00:01:04.189
除了他们要求的东西已经神奇地完成了。
except that the thing that they asked for has magically been completed.

19
00:01:05.349 --> 00:01:08.090
这使得我们很容易对事情进行推理，
And that makes it easy for us to reason about things,

20
00:01:08.090 --> 00:01:10.799
除非我们需要让多件事情同时发生。
unless we need to make multiple things happen at the same time.

21
00:01:12.180 --> 00:01:16.250
如果你在时间上被暂停，你不能让多件事情同时发生。
You can't make multiple things happen at the same time if you're suspended in time.

22
00:01:16.250 --> 00:01:19.412
所以，Topham减轻的方式是通过使用线程，
So, the way that Topham mitigated is by use of the threads,

23
00:01:19.412 --> 00:01:23.466
该线程允许有多个执行线程通过
that thread allows to have multiple threads of execution happening through

24
00:01:23.466 --> 00:01:25.194
同时存储空间。
a memory space at the same time.

25
00:01:25.194 --> 00:01:28.539
所以这是很多事情，而且同时发生。
So that's lots of things and happen at the same time.

26
00:01:28.539 --> 00:01:31.590
不幸的是，比赛带来了一些问题，包括，
Unfortunately, races come with some problems including,

27
00:01:33.270 --> 00:01:35.990
线程会带来一些问题，包括竞争、死锁和
threads come with problems including races, deadlocks and

28
00:01:35.990 --> 00:01:39.599
其他可靠性问题和性能问题，并将更多地关注这些问题。
other reliability problems and performance problems, and will look more at these.

29
00:01:41.170 --> 00:01:45.879
因此，线程模型，像所有模型一样，都有优点和缺点。
So the threading model, like all models comes with pros and cons.

30
00:01:45.879 --> 00:01:49.969
而第一个专业人士是非常重要，非常重要的一个。
And the first pro is a really important, really significant one.

31
00:01:49.969 --> 00:01:51.859
没有必要重新思考。
No rethinking is necessary.

32
00:01:51.859 --> 00:01:56.420
您可以获取任何现有的代码片段，将其放入线程中，然后
You can take any existing piece of code, put it in a thread and

33
00:01:56.420 --> 00:01:58.039
那样就行了。
it'll just work that way.

34
00:01:58.039 --> 00:01:59.560
你不需要对它做任何改变，
You don't have to make any changes to it,

35
00:01:59.560 --> 00:02:01.478
以便将其引入线程环境。
in order to introduce it to a threaded environment.

36
00:02:02.500 --> 00:02:06.040
现在这并不一定意味着你永远不需要改变它，
Now that doesn't necessarily mean that you'll never need to change it,

37
00:02:06.040 --> 00:02:10.199
但是启动阶段真的很容易。
but the starting up phase is really easy.

38
00:02:10.199 --> 00:02:13.069
下一个专业是阻塞程序是好的。
The next pro is that blocking programs are okay.

39
00:02:13.069 --> 00:02:17.069
程序阻塞是可以的，事实上，这就是线程的用途。
It's okay for programs to block and in fact, that is what threads are for.

40
00:02:17.069 --> 00:02:19.800
线程存在，所以事情可以停止。
Threads exist, so that things can stop.

41
00:02:19.800 --> 00:02:22.900
在它停止的时候还有其他的事情发生。
And have other things happening while it stopped.

42
00:02:22.900 --> 00:02:25.819
只要没有阻塞任何线程，执行就会继续。
Execution will continue as long as any thread is not blocked.

43
00:02:25.819 --> 00:02:27.969
但也有一些缺点。
But there are some cons.

44
00:02:27.969 --> 00:02:32.069
第一个缺点是每个线程都分配了卡住的内存。
The first con is that there is stuck memory allocated per thread.

45
00:02:32.069 --> 00:02:34.810
这曾经是一个重大的问题。
This used to be a significant problem.

46
00:02:34.810 --> 00:02:35.810
不再是了。
It's not any more.

47
00:02:35.810 --> 00:02:38.460
摩尔定律继续增加记忆容量，并且
Moore's Law continued to ramp on memory capacity, and

48
00:02:38.460 --> 00:02:42.319
因此线程堆栈现在处于噪音中。
so thread stacks are now in the noise.

49
00:02:42.319 --> 00:02:44.719
我们不再关心他们了。
We don't care about them anymore.

50
00:02:44.719 --> 00:02:48.715
更重要的缺点是，如果两个线程在相同的时间使用相同的内存
A more important con is that if two threads use the same memory at the same

51
00:02:48.715 --> 00:02:50.122
时间，一场比赛可能会发生。
time, a race may occur.

52
00:02:50.122 --> 00:02:53.150
事实上，这是一个很大的问题。
And the fact, this is a big problem.

53
00:02:53.150 --> 00:02:55.469
所以很多人都在问，
So a lot of people been asking,

54
00:02:55.469 --> 00:02:59.240
我们什么时候才能在JavaScript中获得线程，答案是永远不会。
when are we going get threads in JavaScript and the answer is never.

55
00:02:59.240 --> 00:03:01.530
让我来解释一下原因。
And let me illustrate why.

56
00:03:01.530 --> 00:03:05.824
所以在这里我们有两个程序，每个程序都将在自己的线程中运行
So here we have two programs which will each run in its own thread and

57
00:03:05.824 --> 00:03:08.747
我们在运行它们，可能是在同一时间。
we were run them, possibly at the same time.

58
00:03:08.747 --> 00:03:15.830
这个计划有很多可能的后果。
And there are a number of possible consequences of this program.

59
00:03:15.830 --> 00:03:18.091
一个是包含A和B的数组。
One is, an array containing A and B.

60
00:03:18.091 --> 00:03:21.610
另一个是包含B和A的数组。
And the other is, an array containing B and A.

61
00:03:21.610 --> 00:03:24.539
因为我们可以控制这两个线程运行的顺序，
Because we can control in what order these two threads run,

62
00:03:24.539 --> 00:03:25.780
这是两种可能的结果。
these are two possible outcomes.

63
00:03:26.810 --> 00:03:31.530
但我担心的不是这场比赛，我担心的是这场比赛。
But that's not the race I'm worried about, the race I'm worried about is this one.

64
00:03:31.530 --> 00:03:36.360
这个程序的另一个可能的结果是一个只包含OR的数组
Another possible outcome of this program is an array containing only a or

65
00:03:36.360 --> 00:03:37.780
仅包含b的数组。
an array containing only b.

66
00:03:38.909 --> 00:03:41.800
这不是因为什么
And this is not due to anything,

67
00:03:41.800 --> 00:03:44.770
除了这两个语句中发生的情况之外，您可以查看这些
except what's happening in these two statements, and you can look at these for

68
00:03:44.770 --> 00:03:48.039
很长一段时间，并试图找出我的一半数据去了。
a long time and try to figure out did half of my data go.

69
00:03:49.069 --> 00:03:50.400
这怎么会失败呢？
How did this fail?

70
00:03:50.400 --> 00:03:54.020
很难对线程中的程序进行推理。
It's really hard to reason about programs that race in threads.

71
00:03:54.020 --> 00:03:56.770
所以让我们放大这个，看看发生了什么。
So let's zoom in on this and look at what's going on.

72
00:03:56.770 --> 00:03:58.550
这是第一句话
So that's the first statement.

73
00:03:58.550 --> 00:04:00.560
使工作具有描述性和
One of the things that makes jobs descriptive and

74
00:04:00.560 --> 00:04:04.080
表达能力强大的语言是一种语句可以做的工作
expressively powerful language is that one statement can do the work of

75
00:04:04.080 --> 00:04:05.830
很多声明，就是这样，
many statements and that's the case,

76
00:04:05.830 --> 00:04:10.219
在这一条中，顶部的一条语句做了四条绿线所做的事情。
in this one, that one statement on the top, does what the four green lines do.

77
00:04:11.870 --> 00:04:17.050
它将获得我们将分配给数组部分的当前长度。
It'll get the current length that we'll assign to the part of the array.

78
00:04:17.050 --> 00:04:21.699
如果数组的长度增加了，那么我们将进行更改。
If the length of the array has increased, then we'll make that change.

79
00:04:22.910 --> 00:04:26.970
如果我们看第二个线程，它也会扩展成类似的东西。
And if we look at the second thread, it also expands into stuff like that.

80
00:04:26.970 --> 00:04:33.439
并且我们不能控制这些在实际执行中可能如何排序。
And we cannot control how these might be ordered in actual execution.

81
00:04:33.439 --> 00:04:37.649
所以一种可能的订购方式是
So one possible ordering could be

82
00:04:37.649 --> 00:04:42.459
两者同时捕获长度，并且都将使用该长度
both capture the length at the same time, and both will be using that

83
00:04:42.459 --> 00:04:46.870
为了存储到RAIN中，两者都将使用它来更改数组的长度。
to store into the rain both will be using it to change the length of the arrays.

84
00:04:46.870 --> 00:04:50.699
因此，无论哪一秒跑都可能会赢。
And as a result, which ever one run second is probably going to win.

85
00:04:51.939 --> 00:04:53.086
这就是我们一半的数据去了哪里。
So that's where half of our data went.

86
00:04:53.086 --> 00:04:55.319
这些东西真的很难推理。
And this stuff is really hard to reason about.

87
00:04:55.319 --> 00:05:00.139
首先，你不能在原始代码中看到它，但它比这个更糟糕，
For one thing, you can't see it in the original code but it's worse than this,

88
00:05:00.139 --> 00:05:03.709
因为这些语句中的每一个都可以扩展为多个机器语言
because each of these statements could expand into multiple machine language

89
00:05:03.709 --> 00:05:04.279
声明。
statements.

90
00:05:04.279 --> 00:05:07.160
你不知道这些将如何交错。
And you don't know how those are gonna interleave.

91
00:05:07.160 --> 00:05:10.610
每一个都可以在低层次扩展成微指令
And each of those could expand at the low level into micro instructions and

92
00:05:10.610 --> 00:05:14.069
你不能控制这些交错的方式，可能就是这样
you can't control how those will interleave and it may be that

93
00:05:14.069 --> 00:05:18.689
此线程代码的实时行为随加载而变化。
the real time behavior of this threaded code changes according to loading.

94
00:05:20.269 --> 00:05:22.389
所以在开发过程中可能工作得很好，但是
So might be working fine during development, but

95
00:05:22.389 --> 00:05:24.550
当我们投入生产时就失败了。
then fail when we put in production.

96
00:05:24.550 --> 00:05:27.514
或者它在一年中的大部分时间都工作得很好，但在圣诞节时却失败了。
Or it's working fine most of the year, but it fails at Christmas.

97
00:05:27.514 --> 00:05:32.389
随着事物的变化，那些看起来不会影响行为的事物
As things change, things that wouldn't appear to affect the behavior of

98
00:05:32.389 --> 00:05:37.199
程序实际上可以从根本上影响程序的行为。
the program can actually radically affect the behavior of the program.

99
00:05:37.199 --> 00:05:41.576
所以不可能有应用程序完整性，
So it's impossible to have application integrity,

100
00:05:41.576 --> 00:05:44.990
当我们受到比赛条件的影响时。
when we're subject to race conditions.

101
00:05:47.269 --> 00:05:49.949
这样我们就可以通过相互排斥来缓解这种情况。
So that we mitigate that with mutual exclusion.

102
00:05:49.949 --> 00:05:52.819
互斥只允许一个
Mutual exclusion allows only one

103
00:05:52.819 --> 00:05:56.230
线程一次在存储器的临界区中运行，
thread to be running in a critical section of memory at a time,

104
00:05:56.230 --> 00:06:00.339
这种东西有很长的历史，从Dykstra信号量开始。
and there's a long history of this stuff, starting with Dykstra semaphores.

105
00:06:00.339 --> 00:06:02.889
或者当一匹马监视着编辑的约会，
Or as an horse monitors the editor rendezvousing,

106
00:06:02.889 --> 00:06:07.399
现在我们捕捉到了同步，但这些都是基于相同想法的转换。
now we caught synchronization but these are all transforms on the same idea.

107
00:06:07.399 --> 00:06:09.300
这曾经是操作系统的东西。
This used to be operating system stuff.

108
00:06:10.470 --> 00:06:14.319
过去只有操作系统涉及互斥和
Used to be only operating systems were concerned with mutual exclusion and

109
00:06:14.319 --> 00:06:18.639
同时运行多个东西，但这些都渗入了应用程序，
running multiple things at the same time, but this has all leaked into applications,

110
00:06:18.639 --> 00:06:21.060
因为网络和多核问题。
because of networking and because of the multi-core problem.

111
00:06:22.290 --> 00:06:25.899
与网络有关的问题是，&gt；&gt；Douglas Crockford：我们希望
The concern with networking is that, &gt;&gt; Douglas Crockford: We want

112
00:06:25.899 --> 00:06:31.439
能够让事情发生，而缓慢的事情正在发生。
to be able to have stuff happening while slow things are happening.

113
00:06:31.439 --> 00:06:34.800
我们能做的最慢的事情之一就是进入网络，
And one of the slowest things we can do is go out to the network,

114
00:06:34.800 --> 00:06:37.250
因为它有很大的延迟，并且
cuz that has a large latencies, and

115
00:06:38.290 --> 00:06:43.100
在某些情况下是高贵的潜伏期，所以你可以被停止很长一段时间
In some cases are noble latencies, and so you can be stopped for a long time and

116
00:06:43.100 --> 00:06:46.610
一般来说，你不能让系统挂起那么长时间。
generally, you can't afford to have systems be suspended for that long.

117
00:06:46.610 --> 00:06:48.790
所以你需要线程才能让它们继续。
So you need threads in order to allow them to continue.

118
00:06:50.029 --> 00:06:51.470
然后是多核问题，
Then there is the multi-core problem,

119
00:06:51.470 --> 00:06:55.840
CPU设计者已经失去了让CPU运行得更快的能力。
CPU designers have lost the ability to make CPU's go faster.

120
00:06:55.840 --> 00:06:58.759
所以相反，他们给了我们更多。
So instead, they're giving us more of them.

121
00:06:58.759 --> 00:07:01.923
我们不知道如何使用它们，除非你有问题
And we don't know how to use them, unless if you have a problem that's

122
00:07:01.923 --> 00:07:04.723
令人尴尬的平行，然后我们可以利用它。
embarrassingly parallel, then we can take advantage of it.

123
00:07:04.723 --> 00:07:07.778
但我们所做的大多数事情都是令人尴尬的连续不断
But most of what we do is embarrassingly serial and

124
00:07:07.778 --> 00:07:12.432
我们不知道如何将多个内核放入我们的应用程序中
we don't know how to take multiple cores and put them in our applications and

125
00:07:12.432 --> 00:07:14.629
从中获得显著的好处。
get a significant benefit from it.

126
00:07:17.779 --> 00:07:18.620
所以这就是我们所在的地方。
So that's where we are.

127
00:07:19.949 --> 00:07:21.779
所以在相互排斥的情况下，
So with mutual exclusion,

128
00:07:22.779 --> 00:07:25.990
一次只能在临界区中执行一个线程，并且
only one thread can be executing in a critical section at a time and

129
00:07:25.990 --> 00:07:30.089
在临界区中等待执行的所有其他线程都将被阻止。
all other threads waiting to execute in the critical section will be blocked.

130
00:07:30.089 --> 00:07:31.339
如果线程不相互作用，
If the threads don't interact,

131
00:07:31.339 --> 00:07:34.540
然后程序可以在所有核心上全速运行。
then the programs can run at full speed across all the cores.

132
00:07:34.540 --> 00:07:39.689
但如果它们确实相互作用，那么除非采用互斥，否则就会出现种族。
But if they do interact, then races will occur unless mutual exclusion is employed.

133
00:07:39.689 --> 00:07:42.199
不幸的是，相互排斥也有其阴暗面。
Unfortunately, mutual exclusion comes with its own dark side.

134
00:07:42.199 --> 00:07:45.180
这就是僵局。
And that is deadlock.

135
00:07:45.180 --> 00:07:48.860
这里我们有两个线程，Alphonse和Gaston。
Here we have two threads, Alphonse and Gaston.

136
00:07:48.860 --> 00:07:50.259
它们都是等待的程序
They are both program to wait for

137
00:07:50.259 --> 00:07:53.560
另一个要站起来，才能站起来。
the other to stand up, before they can stand up.

138
00:07:53.560 --> 00:07:54.230
这是僵局。
This is deadlock.

139
00:07:54.230 --> 00:07:57.509
事实证明，计算机系统一直都在这样做。
It turns out computer systems do this all the time.

140
00:07:57.509 --> 00:07:58.274
这是另一个例子。
Here's another example.

141
00:07:58.274 --> 00:08:01.509
这是圣保罗的一个真实世界的例子。
This is a real world example from Sao Paulo.

142
00:08:01.509 --> 00:08:05.204
你可以想到，显然他们一直在这样做。
You can think of, apparently they do this all the time.

143
00:08:05.204 --> 00:08:08.069
&gt；&gt；扬声器2：[笑]&gt；&gt；道格拉斯·克罗克福德：你可以想到
&gt;&gt; Speaker 2: [LAUGH] &gt;&gt; Douglas Crockford: You can think of

144
00:08:08.069 --> 00:08:11.509
这些车中的每一辆都是一条线，随时可以运行。
each of these cars as being a thread, which is ready to run.

145
00:08:11.509 --> 00:08:14.774
它只是在等待阻塞它的线程让路。
It's just waiting for the thread that's blocking it to get out of the way.

146
00:08:14.774 --> 00:08:18.029
&gt；&gt；扬声器2：[laugh]&gt；&gt；Douglas Crockford：所以死锁，
&gt;&gt; Speaker 2: [LAUGH] &gt;&gt; Douglas Crockford: So deadlock,

147
00:08:18.029 --> 00:08:18.839
这是件严肃的事。
it's a serious thing.
