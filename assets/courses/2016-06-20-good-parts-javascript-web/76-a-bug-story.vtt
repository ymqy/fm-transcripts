WEBVTT

1
00:00:00.000 --> 00:00:04.328
[音乐]
[MUSIC]

2
00:00:04.328 --> 00:00:05.599
&gt；&gt；Douglas Crockford：我犯过一次错误，我需要承认。
&gt;&gt; Douglas Crockford: I made a bug once and I need to confess.

3
00:00:05.599 --> 00:00:08.468
我需要坦白和你分享这件事。
I need to come clean and share this with you.

4
00:00:08.468 --> 00:00:09.721
那是在2001年。
It was in 2001.

5
00:00:13.192 --> 00:00:15.230
&gt；&gt；Douglas Crockford：我用Java写的，
&gt;&gt; Douglas Crockford: And I was writing in Java,

6
00:00:15.230 --> 00:00:20.236
我编写了第一批JSON解析器之一，它是引用的一部分
I wrote one of the first JSON parsers and it was part of a reference

7
00:00:20.236 --> 00:00:25.629
实现，向人们展示编写JSON解析器是多么容易。
implementation to show people how easy it was to write a JSON parser.

8
00:00:27.089 --> 00:00:32.170
它包含了这个语句，它创建了一个索引变量，
And it included this statement, which created an index variable,

9
00:00:32.170 --> 00:00:36.810
其将字符计数到正在被解析的字符串或流中。
which counted characters into the string or a stream that was being parsed.

10
00:00:37.829 --> 00:00:40.082
所以如果存在语法错误，
So if there were a syntax error,

11
00:00:40.082 --> 00:00:44.762
我们可以告诉您错误发生在什么字符位置。
we could tell you at what character position that error occurred.

12
00:00:44.762 --> 00:00:50.313
一个int足够大到可以覆盖大约20亿个字符，
And an int is big enough to cover what about 2 billion characters,

13
00:00:50.313 --> 00:00:52.103
这是相当大的。
which is pretty big.

14
00:00:52.103 --> 00:00:55.850
也就是2千兆字节在当时是一个大的磁盘驱动器
That was 2 gigabytes was a big disk drive at that time and

15
00:00:55.850 --> 00:00:59.597
我使用Chase的方式，他们从来没有得到过这样的信息
the way I was using chase and they never had a message that

16
00:00:59.597 --> 00:01:04.260
比几个K还大，所以我认为这是一个很大的空间。
was bigger than a couple of K, so I thought that's a lot of headroom.

17
00:01:04.260 --> 00:01:06.469
你太慷慨了。
That's being pretty generous.

18
00:01:06.469 --> 00:01:08.510
我是未来的证据，这很好。
I'm future proof, this is good.

19
00:01:11.289 --> 00:01:16.799
所以几年前，我从某人那里得到了一份错误报告
So a couple years ago, I got a bug report from somebody

20
00:01:16.799 --> 00:01:21.519
他向解析器传递了一个JSON文本，该解析器有几个
who had passed a JSON text to the parser that was several

21
00:01:21.519 --> 00:01:26.629
大小为千兆字节，包含超过2千兆字节的语法错误。
gigabytes in size that contained a syntax error past 2 gigabytes.

22
00:01:27.689 --> 00:01:32.072
我的解析器提供的错误消息是严重错误的
And the error message that my parser provided was wildly wrong and

23
00:01:32.072 --> 00:01:33.825
他们看了代码
they looked at the code and

24
00:01:33.825 --> 00:01:39.496
他们很快就发现了为什么它是严重错误的，因为我说了，int。
they very quickly figured out why it was wildly wrong, and was because I said, int.

25
00:01:39.496 --> 00:01:42.984
所以我讨厌int。
So I hate int.

26
00:01:42.984 --> 00:01:44.490
INT很糟糕
Int's terrible.

27
00:01:44.490 --> 00:01:50.537
INT，我认为这是编程历史上最糟糕的想法之一
Int, I think is one of the worst ideas in the history of programming and

28
00:01:50.537 --> 00:01:55.472
我讨厌int的原因是因为它在溢出时所做的事情。
the reason I hate int is because what it does on overflow.

29
00:01:55.472 --> 00:02:01.144
所以，让我们从哲学的角度来谈一谈。
So, let's talk philosophically.

30
00:02:01.144 --> 00:02:07.373
那么，如果您有一个太大的值而不能放入一个内存单元，那么应该发生什么呢？
So, what should happen if you have a value that's too big to fit in a cell of memory?

31
00:02:07.373 --> 00:02:08.692
应该发生什么？
What should happen?

32
00:02:08.692 --> 00:02:13.460
有一个流派的思想说，嗯，CPU应该拖曳它。
There's one school of thought that says, well, the CPU should haul it.

33
00:02:13.460 --> 00:02:14.509
有点老派了。
That's kind of old school.

34
00:02:15.870 --> 00:02:17.370
你不会那样得到99分的，但是
You're not going get 99s that way, but

35
00:02:17.370 --> 00:02:21.550
至少你可以保证你不会造成任何糟糕的结果。
at least you're guaranteed you're not going to create any bad results.

36
00:02:22.579 --> 00:02:24.584
在混乱之前死亡。
Death before confusion.

37
00:02:24.584 --> 00:02:29.010
有另一所学校说，我们会有一个中断。
There's another school that says, we'll have an interrupt.

38
00:02:29.010 --> 00:02:30.668
我们将提出一个例外。
We'll raise an exception.

39
00:02:30.668 --> 00:02:34.039
我们会走另一条路，这说明了一些事情。
We'll go to some other path, which says something.

40
00:02:34.039 --> 00:02:36.608
[声音]做一些这方面的工作，给出一些警告和
[SOUND] Do some about that, give some warning and

41
00:02:36.608 --> 00:02:39.635
防止原始操作失败。
prevent the original operation from falling through.

42
00:02:39.635 --> 00:02:41.013
这很合理。
That's reasonable.

43
00:02:41.013 --> 00:02:45.518
另一种方法会说，我们将提供一些哨兵，
Another approach would say, we'll provide some sentinel,

44
00:02:45.518 --> 00:02:49.078
一些非值并将其放入内存中。
some non-value and put that in memory instead.

45
00:02:49.078 --> 00:02:53.405
所以当你回去找它的时候，它会说，不知道你在找什么，
So when you go back and look for it, it'll say, don't know what you're looking for,

46
00:02:53.405 --> 00:02:54.427
但它不在这里。
but it's not here.

47
00:02:54.427 --> 00:02:58.323
另一种方法可能会说，取最大的适合的东西
Another approach might say, take the largest thing that does fit and

48
00:02:58.323 --> 00:02:59.877
把那个放进去。
put that in there instead.

49
00:02:59.877 --> 00:03:01.514
这叫做饱和。
It's called saturation.

50
00:03:01.514 --> 00:03:06.038
在计算机图形和信号处理中这是一件合理的事情，
That's a reasonable thing to do in computer graphics and signal processing,

51
00:03:06.038 --> 00:03:09.340
但你不会想在金融应用程序中这么做的。
but you don't wanna do that in financial applications.

52
00:03:10.490 --> 00:03:11.662
不，不。
No, no, no.

53
00:03:11.662 --> 00:03:16.735
但是假设你想要做的是最大化效果的可能性
But suppose what you want to do is maximize the likelihood in effect of

54
00:03:16.735 --> 00:03:22.330
错误，我认为你要做的是丢弃最重要的部分
errors, I think what you wanna do is throw away the most significant bits and

55
00:03:22.330 --> 00:03:27.937
不要告诉任何人，这就是我们所做的，我认为这是没有意义的。
don't tell anybody and that's what we do and I don't think it makes sense.

56
00:03:27.937 --> 00:03:29.591
那么，我们为什么要这样做呢？
So, why do we do that?

57
00:03:29.591 --> 00:03:33.781
这是因为它在50年代是有意义的。
It's because it made sense in the 50s.

58
00:03:33.781 --> 00:03:40.262
所以在50年代，我们用真空管制造了计算机，真空管很大，
So in the 50s, we made computers out of vacuum tubes and vacuum tubes are big and

59
00:03:40.262 --> 00:03:45.802
它们消耗大量的能量，变得很热，很快就会耗尽。
they consume a lot of power and they get hot and they burn out quickly.

60
00:03:45.802 --> 00:03:48.371
所以你ALU里的管子越多，
So the more tubes you have in your ALU,

61
00:03:48.371 --> 00:03:52.062
建造成本越高，运营成本越高，
the more it costs to build, the more it costs operate,

62
00:03:52.062 --> 00:03:56.740
维护成本越高，平均失败时间越短。
the more it costs to maintain, the shorter the mean time to failure.

63
00:03:56.740 --> 00:04:01.415
所以如果你能想出一种方法取出一些管子，这是一个巨大的胜利
So if you can figure out a way to take some tubes out, that's a huge win and

64
00:04:01.415 --> 00:04:04.265
一些天才，我相信他是个天才。
some genius and I do believe he was a genius.

65
00:04:04.265 --> 00:04:09.444
计算出如果我们使用补数运算而不是有符号幅值，
Figured out that if we use complement arithmetic instead of signed magnitude,

66
00:04:09.444 --> 00:04:13.560
我们不需要实现减法电路。
we don't have to implement the subtract circuit.

67
00:04:13.560 --> 00:04:15.798
我们要做的就是说句恭维话，
All we have to do is put a compliment,

68
00:04:15.798 --> 00:04:20.220
其在ADD电路前面几乎是空闲的并且忽略溢出。
which is almost free in front of the add circuit and ignore the overflow.

69
00:04:20.220 --> 00:04:21.353
太棒了。
That was brilliant.

70
00:04:21.353 --> 00:04:24.430
这在当时是个好主意。
That was a great idea at the time.

71
00:04:24.430 --> 00:04:28.050
但从那以后，摩尔定律随着数量的增加而变得疯狂
But since then, Moore's Law has gone crazy with the number of

72
00:04:28.050 --> 00:04:32.379
芯片上可能存在的设备，我们没有重新考虑这一决定
devices that are possible on a chip and we have not reconsidered that decision that

73
00:04:32.379 --> 00:04:36.149
是在50年代制造的，我认为我们已经远远超过了这一点。
was made in the 50s and I think we are way, way overdue on that.

74
00:04:37.639 --> 00:04:43.343
更糟糕的是，内存曾经是极其稀缺和昂贵的。
To make this even worse, memory used to be extremely scarce and expensive.

75
00:04:43.343 --> 00:04:46.201
机器中可能只有几个K。
Machine might only have a couple of K in it.

76
00:04:46.201 --> 00:04:51.283
如果您还记得，Atari2600只有128字节的RAM。
The Atari 2600, if you remember, only had 128 bytes of RAM.

77
00:04:51.283 --> 00:04:54.130
这是整个机器中的所有公羊。
That was all of the ram in the entire machine.

78
00:04:54.130 --> 00:04:58.090
因此，您在为数字分配内存时非常小心。
So, you were really careful in allocating memory to numbers.

79
00:04:58.090 --> 00:05:02.846
如果你能找到一种将两个数字转换成一个字节的方法，你就会这么做，
And if you could figure out a way to get two numbers into 1 byte, you would do it,

80
00:05:02.846 --> 00:05:05.545
因为你没有太多
because you didn't have very many of them and

81
00:05:05.545 --> 00:05:08.824
我们的编程语言仍然处于这种心态中。
our programming languages are still in that mindset.

82
00:05:08.824 --> 00:05:13.485
例如，在Java中，有byte、char、short、in、long、float和
So for example, in Java, you've got byte, char, short, in, long, float and

83
00:05:13.485 --> 00:05:15.862
Double就像主要的内置类型一样。
double just as the main built-in types.

84
00:05:15.862 --> 00:05:20.656
因此每次创建属性或参数或
So every time you create a property or a parameter or

85
00:05:20.656 --> 00:05:25.346
一个变量，你必须问，是哪一个？
a variable, you have to ask, which one of those?

86
00:05:25.346 --> 00:05:28.209
你得选一个。
You've got to pick one.

87
00:05:29.290 --> 00:05:31.752
如果你做对了，那好吧。
And if you get it right, then okay.

88
00:05:31.752 --> 00:05:34.632
但如果你搞错了程序就会失败
But if you get it wrong, the program is gonna fail and

89
00:05:34.632 --> 00:05:37.197
它不会立即失败必要的。
it's not gonna fail immediately necessary.

90
00:05:37.197 --> 00:05:42.281
事实上，它可能在未来的某一段时间失败，并且测试找不到这一点，
In fact, it might fail some time in the future and tests cannot find that,

91
00:05:42.281 --> 00:05:46.216
因为您的测试都假设有一个特定的数据模型
because your tests all assume a particular data model and

92
00:05:46.216 --> 00:05:50.322
它们不足以查找这些类型的错误。
they are not sufficient for finding these sorts of errors.

93
00:05:50.322 --> 00:05:53.206
测试在这个东西上失败了
Tests fail on this stuff and

94
00:05:53.206 --> 00:05:58.601
选择正确的类型是没有价值的，
there's no value in having picked the right type,

95
00:05:58.601 --> 00:06:03.254
因为我在这个变量上节省了16位。
because I saved 16 bits on this variable.

96
00:06:03.254 --> 00:06:09.978
是的，节省的记忆的现金价值是多少？
Yehey, what's the cash value of the of the savings of that memory?

97
00:06:09.978 --> 00:06:11.954
答案是零。
The answer is zero.

98
00:06:11.954 --> 00:06:14.110
事实上，和你的时间相比根本算不上什么。
In fact, it's nothing compared to your time.

99
00:06:14.110 --> 00:06:18.740
你浪费在决定哪种类型上的时间是无限多的
The time you spent wasted trying to decide which type is infinitely more

100
00:06:18.740 --> 00:06:22.613
比你所节省的记忆的价值更有价值。
valuable than the value of the memory that you're saving.

101
00:06:22.613 --> 00:06:25.750
从另一方面来说，JavaScript做得很好，
Now JavaScript, on the other hand, gets it right,

102
00:06:25.750 --> 00:06:27.975
因为它只有一种数字类型。
because it only has one number type.

103
00:06:27.975 --> 00:06:33.250
这意味着不可能通过选择错误的号码类型和
That means it's impossible to make an error by picking the wrong number type and

104
00:06:33.250 --> 00:06:34.596
这是个巨大的胜利。
that's a huge win.

105
00:06:34.596 --> 00:06:37.004
我完全赞成。
I'm totally in favor of that.

106
00:06:37.004 --> 00:06:42.846
唯一的问题是，它是错误的类型，你知道它是错误的类型，
The only problem is, it's the wrong type and you know it's the wrong type,

107
00:06:42.846 --> 00:06:47.060
因为0.1+0.2不等于0.3。
it's because 0.1+0.2 is not equal to 0.3.

108
00:06:47.060 --> 00:06:50.310
我听过一些人说这无关紧要
I've heard from some people who say that doesn't matter and

109
00:06:50.310 --> 00:06:52.997
他们完全错了，这很重要。
they're absolutely wrong, that matters a lot.

110
00:06:52.997 --> 00:06:56.000
那么，这是怎么发生的？
So, how did this happen?

111
00:06:56.000 --> 00:06:57.268
我们是怎么到这个地方的？
How did we get to this place?

112
00:06:57.268 --> 00:06:59.683
好吧，再一次，我们回到过去。
Well, again, we go back in time.

113
00:06:59.683 --> 00:07:04.783
所以在40年代，当第一台冯·诺依曼机器开始上线时，
So in the 40s, when the first Von Neumann machine start coming online,

114
00:07:04.783 --> 00:07:10.624
它们是只有整数的机器，但大多数程序员都是数学家和
they are integer only machines, but most of the programmers are mathematicians and

115
00:07:10.624 --> 00:07:16.610
他们试图弄清楚如何进行真正的计算，这很难。
they're trying to figure out how to do real computation and it's hard.

116
00:07:16.610 --> 00:07:19.879
他们试图用按比例调整的整数做一些事情，这是一项大量的工作，而且
They're trying to do stuff with scaled integers and it's a lot of work, and

117
00:07:19.879 --> 00:07:24.980
它很容易出错，而且真正聪明的人可以计算出浮点数
it's error prone, and someone who is really smart figures out floating point

118
00:07:24.980 --> 00:07:28.389
我们每个数字都会有两个数字。
that we will have two numbers per number.

119
00:07:28.389 --> 00:07:31.338
一个是数字本身，另一个是比例因子，
One is the number itself and the other is a scale factor,

120
00:07:31.338 --> 00:07:34.552
它告诉我们要移动小数点多少个位置。
which tells us how many positions to move the decimal point.

121
00:07:34.552 --> 00:07:37.228
然后我们可以将其提供给子例程
And then we can just give it to a subroutine and

122
00:07:37.228 --> 00:07:41.667
该子例程将计算出如何添加这些内容，并且它起作用了，并且
the subroutine will figure out how to add these things, and it worked, and

123
00:07:41.667 --> 00:07:44.000
它使编程变得更容易。
it made programming much easier to do.

124
00:07:44.000 --> 00:07:47.399
不幸的是，那些库真的很慢。
Unfortunately, those libraries were really slow.

125
00:07:47.399 --> 00:07:52.159
所以当我们到了50年代，现在有兴趣把浮点放入
So when we get to the 50s, there is now interest in putting floating point into

126
00:07:52.159 --> 00:07:57.480
硬件，但我们正在用管子制造东西，这很难做到。
hardware, but we're making stuff out of tubes and it's hard to do.

127
00:07:57.480 --> 00:08:01.069
一些天才，我相信他是一个天才
And some genius and I do believe he was a genius figured out

128
00:08:01.069 --> 00:08:05.439
如果我们使用二进制浮点而不是十进制浮点，
that if we use binary floating point instead of decimal floating point,

129
00:08:05.439 --> 00:08:09.439
为了进行缩放，我们不必实现除以10。
we don't have to implement a divide by 10 in order to do scaling.

130
00:08:09.439 --> 00:08:11.350
我们可以移动一位，这是免费的。
We can just shift one bit, which is free.

131
00:08:12.750 --> 00:08:13.317
所以，他们就这么做了。
And so, they did that.

132
00:08:13.317 --> 00:08:16.800
现在，这对于科学计算来说非常有效。
Now, that worked great for scientific computing.

133
00:08:16.800 --> 00:08:19.141
因为在科学计算中，
Because in scientific computing,

134
00:08:19.141 --> 00:08:22.737
无论如何，你的低位数字可能是错误的。
your lower order digits are probably wrong, anyway.

135
00:08:22.737 --> 00:08:27.026
因此，不能准确表示十进制数字的事实并不是全部
So the fact that you can't exactly represent the decimal digits is not all

136
00:08:27.026 --> 00:08:30.831
很重要，但它不适用于业务处理，
that important, but it doesn't work for business processing,

137
00:08:30.831 --> 00:08:35.230
因为他们在加钱，他们需要精确。
because they're adding up money and they need to be exact.

138
00:08:35.230 --> 00:08:36.161
他们必须给出准确的感觉。
They have to give the sense exact.

139
00:08:36.161 --> 00:08:39.620
所以有这样的划分，有科学计算和
So there is this division, there is scientific computing and

140
00:08:39.620 --> 00:08:43.154
有商业计算，他们使用不同的硬件。
there is business computing and they use different hardware.

141
00:08:43.154 --> 00:08:45.081
他们使用不同的编程语言。
They use different programming languages.

142
00:08:45.081 --> 00:08:51.005
因此，当您订购大型机时，您要么得到浮点包，要么
So when you order your mainframe, you either get the floating point package or

143
00:08:51.005 --> 00:08:55.327
您将获得用于进行COBOL处理的BCD包。
you get the BCD package for doing your COBOL processing.

144
00:08:55.327 --> 00:09:00.442
这就是世界的运作方式，直到我们进入
And that's sort of the way the world worked until we kind of came into

145
00:09:00.442 --> 00:09:05.557
现代和COBOL消亡了，Java是COBOL的继承者，
the modern age and COBOL dies off and Java is the successor to COBOL,

146
00:09:05.557 --> 00:09:10.533
但是Java来自Fortran学校，而不是COBOL学校。
but Java comes from the Fortran school not from the COBOL school.

147
00:09:10.533 --> 00:09:14.010
它不能很好地处理业务类型，但是
It doesn't do a good job of dealing with the the business types, but

148
00:09:14.010 --> 00:09:16.451
这就是我们现在所处的悲剧。
that's kind of the tragedy that we're in now.

149
00:09:18.975 --> 00:09:22.572
&gt；&gt；Douglas Crockford：所以，我建议修复它，这就是我的解决方案。
&gt;&gt; Douglas Crockford: So, I propose to fix it and this is my solution.

150
00:09:22.572 --> 00:09:27.475
我调用了DEC64，它是一个64位数量，包含两个
I called DEC64 and it's a 64-bit quantity containing two

151
00:09:27.475 --> 00:09:32.668
数字在很大程度上模仿了他们在40年代所做的事情。
numbers modeled very much after what they were doing in the 40s.

152
00:09:32.668 --> 00:09:36.260
所以我得到了一个数字，它是一个系数。
So I've got one number, which is a coefficient.

153
00:09:36.260 --> 00:09:41.292
它有56位长，我有另一个号码，
It's 56 bits long and I've got another number,

154
00:09:41.292 --> 00:09:45.971
这是指数，它是8位长，并且
which is the exponent, which is 8 bits long and

155
00:09:45.971 --> 00:09:51.364
它真的很好而且很管用，因为这10个。
it's really nice and it works, because of this 10.

156
00:09:51.364 --> 00:09:53.995
所以，真的很容易看到某事将会做什么。
So, it's really easy to see what something is going to do.

157
00:09:53.995 --> 00:09:56.384
只是这个公式，非常简单。
It's just this formula, really really simple.

158
00:09:56.384 --> 00:09:59.024
没有复杂的包装或拆包。
No complicated packing or unpacking.

159
00:09:59.024 --> 00:10:03.392
我把低8位放在底部，因为我是英特尔架构，
I put the lower 8 bits in the bottom, because I'm Intel architecture,

160
00:10:03.392 --> 00:10:05.118
我们可以免费打开它。
we can unpack that for free.

161
00:10:05.118 --> 00:10:09.522
因此软件实现可以非常高效，
So a software implementation can be very efficient and

162
00:10:09.522 --> 00:10:14.225
这让我们得到16或17个小数位，非常准确。
this gets us 16 or 17 decimal places, very accurate.

163
00:10:14.225 --> 00:10:17.149
我们可以做精确的业务处理。
We can do exact business processing.

164
00:10:17.149 --> 00:10:20.200
也不是做科学处理的数据。
It's not data doing scientific processing, either.

165
00:10:20.200 --> 00:10:25.509
所以我的建议是，这是未来应用程序中唯一的数据格式
So my proposal is that this be the only data format in future application

166
00:10:25.509 --> 00:10:30.293
语言，我们只有一种数字类型，就是这一种。
languages, that we just have one number type and it be this one.

167
00:10:30.293 --> 00:10:34.793
为了证明这一点，我有一个可用的软件实现
So to prove it, I have a software implementation available

168
00:10:34.793 --> 00:10:38.754
在DEC64汇编语言中，这是在GitHub上。
in DEC64 assembly language, that's on GitHub.

169
00:10:38.754 --> 00:10:43.636
如果你对此很好奇，你可以去看看，然后
If you're curious about this, you can check it out and and

170
00:10:43.636 --> 00:10:45.837
它表现得很好。
it performs pretty well.

171
00:10:45.837 --> 00:10:50.736
所以如果你在软件实现中添加整数，
So if you're adding integers in a software implementation,

172
00:10:50.736 --> 00:10:56.211
它可以在五个指令中添加两个整数，这是非常好的。
it can add two integers in five instructions, which is pretty good.

173
00:10:56.211 --> 00:11:01.179
可能比你想要的多四个，除了这五个指令
It's maybe four more than you'd like, except that with those five instructions

174
00:11:01.179 --> 00:11:06.227
你也得到了溢出保护和名词，这是很好的东西。
you also get overflow protection and you get nouns, which are nice things to have.

175
00:11:06.227 --> 00:11:07.967
我认为必须拥有的东西。
I think essential things to have.

176
00:11:07.967 --> 00:11:13.653
在硬件实现中，整数相加应该在一个周期内发生，
In a hardware implementation, adding integers should happen in one cycle,

177
00:11:13.653 --> 00:11:19.870
这意味着我们不需要将int作为单独的类型来获得性能。
which means we don't need to have ints as separate type in order to get performance.

178
00:11:19.870 --> 00:11:21.490
我们可以获得性能和
We can get performance and

179
00:11:21.490 --> 00:11:25.250
我们可以在一个数字类型中获得我们需要的值的范围。
we can get the range of values that we need in one number type.

180
00:11:26.559 --> 00:11:30.828
所以，我的目标是让世界上的每个人相信这是唯一的数字类型
So, my goal is to convince everybody in the world that this is the one number type

181
00:11:30.828 --> 00:11:32.245
在下一个系统中使用。
to use in the next system.

182
00:11:32.245 --> 00:11:38.427
现在事实证明，我实际上并不需要说服世界上的每个人。
Now it turns out, I don't actually have to convince everybody in the world.

183
00:11:38.427 --> 00:11:42.452
我只需要说服一个人，就是那个人
I only have to convince one person, that's the man or

184
00:11:42.452 --> 00:11:46.570
设计下一种语言的女人。
the woman who designs the next language.

185
00:11:46.570 --> 00:11:50.080
如果我能说服那个人他们想要一种数字类型的语言
If I can convince that person that they want a language with one number type that

186
00:11:50.080 --> 00:11:52.940
与以我们被教导的方式做算术的人类配合得很好
works well with humans that does arithmetic the way we were taught to do

187
00:11:52.940 --> 00:11:57.200
在学校做算术，这样我们就不会迷惑，然后我们就会赢。
arithmetic in school, so that we won't get confused, then we'll win.
