WEBVTT

1
00:00:00.000 --> 00:00:03.608
[音乐]
[MUSIC]

2
00:00:03.608 --> 00:00:09.589
&gt；&gt；Douglas：创建一个函数gensymf，该函数生成一个生成符号的函数。
&gt;&gt; Douglas: Make a function gensymf that makes a function that generates symbols.

3
00:00:09.589 --> 00:00:11.685
所以我们把发电机的想法
So we're taking the generator idea and

4
00:00:11.685 --> 00:00:14.682
我们现在要试着用它做点实际的事情。
we're gonna try to do something practical with it now.

5
00:00:14.682 --> 00:00:20.364
所以gensymf是一个符号生成器或者gensymf是一个工厂
So gensymf is a symbol generator or gensymf is a factory that makes

6
00:00:20.364 --> 00:00:26.149
符号生成器，或生成序列号的东西。
symbol generators, or things that make serial numbers.

7
00:00:26.149 --> 00:00:29.370
所以我们指定一个带有前缀的序列号，然后
So we designate a serial number with a prefix, and

8
00:00:29.370 --> 00:00:33.429
因此，您可以向它发送任何字符串，该字符串将成为前缀字符串，并且
so you can send it any string and that becomes the prefix string, and

9
00:00:33.429 --> 00:00:39.770
然后我们将得到一系列以该符号开头的字符串。
then we will get a series of strings starting with that symbol.

10
00:00:41.250 --> 00:00:45.670
所以这次我们要从同一个工厂制造两台发电机。
So we're gonna make two generators this time from the same factory.

11
00:00:45.670 --> 00:00:50.229
我们将制作G系列和H系列，当我们调用它们时，
We're gonna make the G series and the H series and when we call them,

12
00:00:50.229 --> 00:00:56.161
我们会得到G1，H1，G2，H2。&gt；&gt；道格拉斯：让我们
we'll get G1, H1, G2, H2. &gt;&gt; Douglas: Let's

13
00:00:56.161 --> 00:01:01.271
看看gensymf，&gt；&gt；Douglas：gensymf接受一个前缀字符串，
look at gensymf, &gt;&gt; Douglas: Gensymf takes a prefix string,

14
00:01:01.271 --> 00:01:04.798
它创建了一个数字，它将用于
it creates a number which it's gonna use for

15
00:01:04.798 --> 00:01:08.430
跟踪它在序列中的位置。
keeping track of where it is in the sequence.

16
00:01:08.430 --> 00:01:12.120
它将返回一个函数，该函数将在该数字上加1，并且
It will return a function which will add one to that number, and

17
00:01:12.120 --> 00:01:14.760
返回将数字连接到前缀的结果。
return the result of concatenating the number to the prefix.

18
00:01:14.760 --> 00:01:17.337
那么谁有用的东西呢？
So who got something that works?

19
00:01:17.337 --> 00:01:18.620
很好。
Good.

20
00:01:18.620 --> 00:01:20.662
有没有人做了什么实质上不同的事情？
Anyone do anything substantially different?

21
00:01:20.662 --> 00:01:21.918
是啊。&gt；&gt；扬声器2：你投进去，
Yeah. &gt;&gt; Speaker 2: And you cast in,

22
00:01:21.918 --> 00:01:25.453
那么它是字符串的前缀，你能以数字形式传递它吗？
then it's prefix to the string, can you pass it in digit.

23
00:01:25.453 --> 00:01:30.444
这是第一件事吗？&GT；&GT；道格拉斯：那是明智的
Is that first thing? &gt;&gt; Douglas: That's a wise

24
00:01:30.444 --> 00:01:32.268
预防，是的。
precaution, yeah.

25
00:01:32.268 --> 00:01:34.712
还有谁？&gt；&gt；扬声器2：我使用了find函数。
Anybody else? &gt;&gt; Speaker 2: I used find function.

26
00:01:34.712 --> 00:01:35.427
&gt；&gt；Douglas：使用查找函数
&gt;&gt; Douglas: Use a find function

27
00:01:35.427 --> 00:01:36.150
这将会。
that's going to.

28
00:01:37.520 --> 00:01:41.780
这是一个例子，我们看到很多这样的工厂
So this is an example, we've seen a number of these where we've got a factory

29
00:01:41.780 --> 00:01:45.920
函数，然后生成一些可以做一些工作的东西，以获得
function which then makes something which will do some work, to get

30
00:01:45.920 --> 00:01:49.810
通常是一个生成器，但也可能有很多不同类型的函数。
usually a generator, but it could be there are lots of different kinds of functions.

31
00:01:52.069 --> 00:01:55.650
但它们都是函数，只是其中一个嵌套在另一个中。
But they're both functions, it's just one is nested in the other.

32
00:01:55.650 --> 00:01:59.807
事实上，如果我们进一步嵌套，如果我们把另一个函数放在这个之外，
And in fact if we nest further, if we put another function outside of this,

33
00:01:59.807 --> 00:02:01.793
我们可以建一个工厂，工厂。
we could make a factory, factory.

34
00:02:01.793 --> 00:02:05.790
你可以用工厂包装，工厂。
And you can wrap that with a factory, factory, factory.

35
00:02:05.790 --> 00:02:09.849
所以只是为了好玩，让我们看看如果这是一个工厂会是什么样子，
So just for fun, let's look at what this would look like if it were a factory,

36
00:02:09.849 --> 00:02:13.884
工厂。&gt；&gt；Douglas：那么gensymff就是工厂，
factory. &gt;&gt; Douglas: So gensymff is the factory,

37
00:02:13.884 --> 00:02:19.984
工厂，我们将传递增量函数和初始种子值
factory and we're gonna pass the increment function and the initial seed value

38
00:02:19.984 --> 00:02:26.189
对产品中的gensymff产生一个与gensymf完全相同的函数。
to gensymff in a produce of produces a function that works exactly like gensymf.

39
00:02:27.319 --> 00:02:29.516
它会使序列正确，并且
And it'll make the sequences right, and

40
00:02:29.516 --> 00:02:32.485
我们已经做过几次这样的事情了。
we've done things like this a couple of times already.

41
00:02:32.485 --> 00:02:37.789
所以我要给你看这件事，因为我们已经做了这件事。
So I'm just gonna show you the thing cuz we've already done this one.

42
00:02:37.789 --> 00:02:42.211
所以它看起来与我们之前看到的模式非常相似，工厂，
So it looks very similar to patterns we've seen before, where the factory,

43
00:02:42.211 --> 00:02:45.489
工厂正在提供进入生成器的值。
factory is supplying values that go into the generator.

44
00:02:45.489 --> 00:02:50.695
现在，我们可以实现工厂制造的自动化。
And now, so we can automate the making of factories.

45
00:02:50.695 --> 00:02:55.578
现在，关于这个的有趣之处是那里的声明
Now, the interesting thing about this one is that statement there where

46
00:02:55.578 --> 00:02:59.340
我们正在创建数字变量，它将保持
we're creating the number variable which is gonna hold

47
00:02:59.340 --> 00:03:04.449
用于生成序列号的值。
the value that is being used to generate the sequence numbers.

48
00:03:04.449 --> 00:03:09.389
所以如果我们把它往上移一行，这样它就不再在工厂里了，
So if we were to move that up one line, so that it's not in the factory anymore,

49
00:03:09.389 --> 00:03:11.479
但它在工厂里，工厂里。
but it's in the factory, factory.

50
00:03:11.479 --> 00:03:13.856
这将改变该变量的可见性，因此
That would change the visibility of that variable so

51
00:03:13.856 --> 00:03:15.754
它会被所有的发电机看到。
it would be seen by all of the generators.

52
00:03:15.754 --> 00:03:23.300
所以我们不是生成G1，H1，G2，H2，而是生成G1，H2，G3，H4。
So instead of generating G1, H1, G2, H2, we would generate G1, H2, G3, H4.

53
00:03:24.500 --> 00:03:27.060
这是一个非常有趣的行为变化。
That's a really interesting change in behavior.

54
00:03:28.270 --> 00:03:31.400
它只是将一个变量声明从一个地方移动到另一个地方。
It's just moving one variable declaration one place to another.

55
00:03:32.500 --> 00:03:37.259
所以我们一直在处理结案
So we've been dealing with closure and

56
00:03:37.259 --> 00:03:42.079
我们可以我们看到我们可以有全球性的东西和地方性的东西，而且
we can we saw that we can have things that are global and things that are local, and

57
00:03:42.079 --> 00:03:47.050
介于两者之间的东西，但可能会有更多的东西在两者之间。
things that are sort of in between, but there can be more of those in betweens.

58
00:03:47.050 --> 00:03:52.639
如果我们以有用的方式去筑巢，我们就有
And if we get into nesting things in useful ways, we have

59
00:03:52.639 --> 00:03:57.889
对变量的可见性和生存期的极大控制，以及
tremendous control over the visibility and the lifetime of the variables, and

60
00:03:57.889 --> 00:03:59.759
可以做一些有趣的事情来影响他们的行为。
can do interesting things to affect their behavior.

61
00:04:03.210 --> 00:04:07.957
怎么样，有什么问题吗？
How about that, any questions about that?

62
00:04:07.957 --> 00:04:11.000
准备好再来一次还是你想休息一下？
Ready for another one or do you want to take a break?

63
00:04:13.979 --> 00:04:16.737
让我们做另一个，当然为什么不。
Let's do another one, sure why not.

64
00:04:16.737 --> 00:04:20.230
所以每个人都记得斐波那契，对吧？
So everybody remembers fibonacci, right?

65
00:04:20.230 --> 00:04:21.769
你在学校做过斐波那契数字。
You did fibonacci numbers in school.

66
00:04:21.769 --> 00:04:24.629
所以斐波那契是一位重要的数学家。
So fibonacci was an important mathematician.

67
00:04:24.629 --> 00:04:27.139
他发现了很多好东西，但是
He discovered a lot of good stuff, but

68
00:04:27.139 --> 00:04:30.449
我们似乎只记得斐波那契数列。
the only thing we seem to remember is the fibonacci sequence.

69
00:04:30.449 --> 00:04:33.579
在它们的无限数量的斐波那契序列中，但是
In their infinite number of Fibonacci Sequences, but

70
00:04:33.579 --> 00:04:38.069
大多数情况下，我们只记得著名的一个，它以0和1开头，并且
mostly we only remember the famous one, which started with 0 and 1, and

71
00:04:38.069 --> 00:04:39.310
这就是我们现在要做的。
that's what we're gonna be doing now.

72
00:04:39.310 --> 00:04:44.079
所以我们要建一个工厂，制造斐波那契发电机。
So we're gonna make a factory which will make a Fibonacci generator.

73
00:04:45.470 --> 00:04:50.050
您将使用序列中的前两个数字作为工厂的种子。
And you'll seed the factory with the first two numbers in the sequence.

74
00:04:50.050 --> 00:04:52.120
那么每个人都记得斐波那契数是如何工作的吗？
So everybody remember how Fibonacci numbers work?

75
00:04:53.490 --> 00:04:54.310
让我们回顾一下。
Well let's review.

76
00:04:55.670 --> 00:05:00.079
所以斐波那契序列将是一个整数序列，
So the Fibonacci sequence will be a sequence of integers,

77
00:05:00.079 --> 00:05:04.009
指定序列中的前两个整数，
you specify the first two integers in the sequence,

78
00:05:04.009 --> 00:05:07.379
第三个数字将是前两个数字的总和。
the third number will be the sum of the first two.

79
00:05:08.759 --> 00:05:13.300
第四个数字将是前两个数字的总和，依此类推。
The fourth number will be the sum of the previous two and so on.

80
00:05:14.560 --> 00:05:18.961
所以我们得到的第一个数字是0和1，因为这些是我们提供的数字。
So the first numbers we get are 0 and 1, because those are the ones we provide.

81
00:05:18.961 --> 00:05:22.884
那么下一个1，将是1，因为这是0和1的和，
Then the next 1, will be 1 because that's the sum of 0 and 1,

82
00:05:22.884 --> 00:05:26.470
下一个将是2，因为它是1和1的和。
the next one will be 2, because it's the sum of 1 and 1.

83
00:05:26.470 --> 00:05:29.470
下一个将是3，因为它是1和2的和，
The next will be 3, cuz it's a sum of 1 and 2,

84
00:05:29.470 --> 00:05:34.423
next是5，因为它是2和3的和，那么序列中的下一个将是？
next be 5 because it's the sum of 2 and 3, and the next in the series will be?

85
00:05:34.423 --> 00:05:37.590
完全正确。
8, exactly.

86
00:05:39.420 --> 00:05:41.266
所以这是个棘手的问题，不是吗？
So this was a tricky one, wasn't it?

87
00:05:41.266 --> 00:05:44.889
斐波那契序列本身是完全微不足道的。
The Fibonacci sequence itself is totally trivial.

88
00:05:44.889 --> 00:05:47.360
是三个，很简单的陈述，
It's three, it's simple statements,

89
00:05:47.360 --> 00:05:51.000
但得到前两个数字出来，但这就是诀窍。
but getting the first two numbers to come out but that was the trick.

90
00:05:52.170 --> 00:05:54.694
所以首先你有什么有用的东西吗？
So first off you got something that works?

91
00:05:54.694 --> 00:05:57.590
就像毕业一样，这一次很难，所以
Like graduations this one was hard, so

92
00:05:57.590 --> 00:06:02.250
让我们看看我们可以采取的一些方法。
let’s look at a number of approaches that we could take.

93
00:06:02.250 --> 00:06:07.329
这里有一个，盒子里有斐波那契函数。
So here's one, there is the Fibonacci function there in the box.

94
00:06:07.329 --> 00:06:13.100
就是这样，然后我们得到了一个if语句
So that's it, and then we've got an if statement

95
00:06:13.100 --> 00:06:18.910
围绕它对哪个语句问，我们在序列中的什么位置？
around it versus which statement which asks, where are we in the sequence?

96
00:06:18.910 --> 00:06:23.701
在序列开头的第一个数字中，输出第一个数字，否则
At the first at the beginning of sequence put out the first number, otherwise

97
00:06:23.701 --> 00:06:28.584
输出第二个数字，否则使用斐波那契函数并执行该操作。
put out the second number, otherwise use the Fibonacci function and do that.

98
00:06:28.584 --> 00:06:31.985
这是有效的，绝对有效的，是谁采取了这种方法或
And this works, it absolutely works, who took this approach or

99
00:06:31.985 --> 00:06:35.709
类似的东西可能会被使用，如果取而代之，但基本上。
something like it maybe used and if instead, but basically.

100
00:06:35.709 --> 00:06:39.449
是的，你有一个变量，它告诉你在序列中的位置。
Yeah, you've got a variable which is telling you where you are in the sequence.

101
00:06:39.449 --> 00:06:43.524
这完全是一个，对吗？&gt；&gt；扬声器3：除了
This is a completely, yeah? &gt;&gt; Speaker 3: Except for

102
00:06:43.524 --> 00:06:47.939
第一种情况，你输入的是a和b。
case one, you're inputting a and b.

103
00:06:47.939 --> 00:06:53.615
a和b不一定等于0和1，如果a不是0表示的
A and b don't necessarily equal 0 and 1, if a is something other than 0 for

104
00:06:53.615 --> 00:06:54.783
案例一。&gt；&gt；道格拉斯：对。
case one. &gt;&gt; Douglas: Right.

105
00:06:54.783 --> 00:06:56.891
&gt；&gt；扬声器3：您需要返回a+b，
&gt;&gt; Speaker 3: You need to return a+ b,

106
00:06:56.891 --> 00:06:59.637
不是吗？&GT；&GT；道格拉斯：不是。
don't you? &gt;&gt; Douglas: No.

107
00:06:59.637 --> 00:07:01.800
&GT；&GT；演讲者3：你不知道规则。
&gt;&gt; Speaker 3: You don't know the rule.

108
00:07:01.800 --> 00:07:03.204
&gt；&gt；扬声器2：你打开了i。
&gt;&gt; Speaker 2: You're switching on i.

109
00:07:03.204 --> 00:07:05.221
&gt；&gt；道格拉斯：我得到了我，它告诉我
&gt;&gt; Douglas: I got i which is telling me

110
00:07:05.221 --> 00:07:08.268
我在序列中的位置。&gt；&gt；扬声器3：我知道。
where I am in the sequence. &gt;&gt; Speaker 3: I know.

111
00:07:08.268 --> 00:07:09.661
&gt；&gt；Douglas：这不是我的价值
&gt;&gt; Douglas: Which isn't the value I'm at

112
00:07:09.661 --> 00:07:12.129
序列就是我看了多少个数字。
the sequence just how many numbers have I looked at.

113
00:07:12.129 --> 00:07:13.016
&gt；&gt；扬声器3：我知道。
&gt;&gt; Speaker 3: I know.

114
00:07:13.016 --> 00:07:15.442
&gt；&gt；道格拉斯：所以如果我看到第一个
&gt;&gt; Douglas: So if I'm looking at the first

115
00:07:15.442 --> 00:07:21.456
数字，我输出a，如果我看第二个数字i是1，我输出b。
number, I output a, and if I look at the second number i is 1, I output b.

116
00:07:21.456 --> 00:07:24.649
否则我输出a+b。&gt；&gt；扬声器3：所以如果你想
Otherwise I output a + b. &gt;&gt; Speaker 3: So if you want

117
00:07:24.649 --> 00:07:29.555
斐波那契，如果你的起始元素是5和7，第一个数字是5，
the Fibonacci, if your starting elements are 5 and 7, the first number's 5,

118
00:07:29.555 --> 00:07:33.588
第二个数字是7，第三个数字是12。&gt；&gt；道格拉斯：对。
second number's 7, third number's 12. &gt;&gt; Douglas: Right.

119
00:07:33.588 --> 00:07:34.399
&gt；&gt；扬声器3：好的。
&gt;&gt; Speaker 3: Okay.

120
00:07:34.399 --> 00:07:35.744
&gt；&gt；道格拉斯：是的，他们就是这样
&gt;&gt; Douglas: Yeah, that's how they

121
00:07:35.744 --> 00:07:36.740
工作。&gt；&gt；扬声器3：是的，
work. &gt;&gt; Speaker 3: Yeah,

122
00:07:36.740 --> 00:07:39.050
我在想你加了第一个
I was thinking that you added the first.

123
00:07:39.050 --> 00:07:41.843
首先，你拿了第二个，然后你加了前两个。
First, you took the second then you added the first two.

124
00:07:41.843 --> 00:07:45.185
然后你，不，直到你到达-
Then you, no, it's not until you get to the-

125
00:07:45.185 --> 00:07:46.310
&gt；&gt；道格拉斯：这是前两个数字，
&gt;&gt; Douglas: It's the first two numbers,

126
00:07:46.310 --> 00:07:47.608
然后你加上。&gt；&gt；扬声器3：好的，
then you add. &gt;&gt; Speaker 3: Right,

127
00:07:47.608 --> 00:07:50.625
因为他们告诉你，明白了。道格拉斯：是的。
because they tell you, got it. &gt;&gt; Douglas: Yeah.

128
00:07:50.625 --> 00:07:52.269
&gt；&gt；扬声器3：y是否递增？
&gt;&gt; Speaker 3: Is y incremented or not?

129
00:07:52.269 --> 00:07:55.237
&gt；&gt；道格拉斯：是的，好吧，而不是添加
&gt;&gt; Douglas: Yeah, well instead of adding

130
00:07:55.237 --> 00:07:59.403
1，我将它设置为1，因为我知道它是0。
1, I set it to 1 because I know it's 0.

131
00:07:59.403 --> 00:08:05.101
除此之外，我不需要增加它，一旦我通过了前两个案例，
And beyond that I don't need to increment it, once I get past the first two cases,

132
00:08:05.101 --> 00:08:10.298
我不再在乎我是什么了。&gt；&gt；扬声器3：好的。
I don't care what i is anymore. &gt;&gt; Speaker 3: Okay.

133
00:08:10.298 --> 00:08:10.990
&gt；&gt；道格拉斯：好的，那么
&gt;&gt; Douglas: Okay, so

134
00:08:10.990 --> 00:08:15.156
完全可以接受，这是一种合理的做法。
completely acceptable this is a reasonable way to do it.

135
00:08:15.156 --> 00:08:19.673
我认为一个相当聪明的人可以搞清楚
I would argue that a reasonably intelligent person could figure out what

136
00:08:19.673 --> 00:08:24.430
这段代码正在做，这是我们最希望代码做的事情。
this code is doing and that's most of what we want code to do so.

137
00:08:24.430 --> 00:08:25.860
这很好，没事的。
This is good, it's okay.

138
00:08:25.860 --> 00:08:30.999
我对它的抱怨是，它是一个相当大的功能，而且只有这么多
My complaint with it is, it's a fairly big function and only that much of it is

139
00:08:30.999 --> 00:08:36.320
关心斐波那契的事情，所以我觉得有点不对劲。
concerned with the Fibonacci things, so it just feels kind of loopsided to me.

140
00:08:36.320 --> 00:08:39.096
所以这里有另一种方法。
So here's another approach.

141
00:08:39.096 --> 00:08:43.711
在这一个中，我对斐波那契的陈述进行了排序
In this one, I kind of permuted the statements of the Fibonacci

142
00:08:43.711 --> 00:08:47.713
序列以便延迟第一个序列的输出，
sequence in order to delay the output of the first one,

143
00:08:47.713 --> 00:08:51.990
或者使前两个数字得到输出。
or to cause the first two numbers to get output.

144
00:08:51.990 --> 00:08:54.519
那么是谁做了这样的事？
So who did something like this?

145
00:08:54.519 --> 00:08:58.330
是的，所以这可能是最好的解决方案。
Yeah, so this is probably the most optimal solution.

146
00:08:58.330 --> 00:09:02.956
它将是最小的代码，最快的性能，而不是
It's gonna be the smallest code, the fastest performance not that either of

147
00:09:02.956 --> 00:09:06.601
这些在现实生活中很重要，但它确实有这个优势。
those matter in real life, but it does have that advantage.

148
00:09:06.601 --> 00:09:11.182
这样做的缺点是我不想成为调试它的人，对吗？
The disadvantage of this is I'd hate to be the guy that has to debug it, right?

149
00:09:11.182 --> 00:09:14.759
&gt；&gt；扬声器4：我说b=a+next
&gt;&gt; Speaker 4: I said b = a + next

150
00:09:14.759 --> 00:09:17.413
相反。道格拉斯：是的，
instead. &gt;&gt; Douglas: Yeah,

151
00:09:17.413 --> 00:09:21.919
它有一些变化，但基本上都是相同的想法。
there are variations on it, but it's basically the same idea.

152
00:09:21.919 --> 00:09:26.633
所以我们可以采取的另一种方法是认识到我们正在
So another approach we could take is recognizing that we're making

153
00:09:26.633 --> 00:09:32.460
一个生成器，我们已经有了一些构建生成器的工具。
a generator and we already have some tools for constructing generators.

154
00:09:32.460 --> 00:09:38.570
所以这里有另一种方法，我这里有我的斐波那契发生器，
So here's another approach, I've got my Fibonacci generator here,

155
00:09:38.570 --> 00:09:43.370
这将给我下一个数字，我只需要在它上面得到前两个数字。
which will give me the next number, I just need to get the first two on top of it.

156
00:09:43.370 --> 00:09:45.886
所以我要做一个特殊的生成器，并且
So I'm going to make a special generato, and

157
00:09:45.886 --> 00:09:50.527
我将从取Identityf开始，这是第一个有趣的函数
I'm gonna start by taking identityf which was the first interesting function that

158
00:09:50.527 --> 00:09:54.591
我们今天早上写的，你认为没有实际应用。
we wrote this morning, that you thought had no practical application.

159
00:09:54.591 --> 00:09:58.682
结果是Identifyf是一个常数生成器，
It turns out what identifyf is is a constant generator,

160
00:09:58.682 --> 00:10:02.336
它总是会产生相同的价值。
it will always produce the same value.

161
00:10:02.336 --> 00:10:06.990
所以我将使用它来生成器，然后我将使用极限函数
So I'm gonna use that to make generators and then I'm gonna use the limit function

162
00:10:06.990 --> 00:10:10.879
我们之前写的切断序列，所以我只得到一个。
that we wrote earlier to cut off the sequence, so I only get one.

163
00:10:12.340 --> 00:10:17.330
所以我得到了一对东西，然后我可以把这两个东西连接在一起
So I got a pair of things and I can then concatenate those two together and

164
00:10:17.330 --> 00:10:21.240
然后将其连接到斐波那契函数。
then concatenate that on to the Fibonacci function.

165
00:10:21.240 --> 00:10:22.192
那是谁干的？
So who did that?

166
00:10:22.192 --> 00:10:28.292
[笑]当然没有人会那样做。&gt；&gt；扬声器4：[笑]
[LAUGH] Of course nobody would do that. &gt;&gt; Speaker 4: [LAUGH]

167
00:10:28.292 --> 00:10:31.245
&gt；&gt；道格拉斯：如果你是，是的，所以
&gt;&gt; Douglas: And if you're, yeah, so

168
00:10:31.245 --> 00:10:33.133
就是这样。
there's that.

169
00:10:33.133 --> 00:10:39.205
如果我要经常这样做，我会采取限制身份，
And if I were gonna be doing this a lot, I would take limit identityf,

170
00:10:39.205 --> 00:10:43.919
并将其封装成某种东西
and encapsulate that into something which would make

171
00:10:43.919 --> 00:10:48.551
一个更紧凑的序列，或者我们可以这样做。
sequences of one more compactly or we could do this.

172
00:10:48.551 --> 00:10:53.047
类似的事情，我们采用我们之前编写的element函数make
A similar thing, we take the element function that we wrote earlier make

173
00:10:53.047 --> 00:10:55.775
包含前两个内容的数组和
an array containing the first two things and

174
00:10:55.775 --> 00:10:59.669
将其连接到斐波那契生成器上。
concatenate that onto the Fibonacci generator.

175
00:10:59.669 --> 00:11:00.552
那是谁干的？
So who did that?

176
00:11:00.552 --> 00:11:02.282
不，不。&gt；&gt；[INAUDIBLE]
No, no. &gt;&gt; [INAUDIBLE]

177
00:11:02.282 --> 00:11:05.702
&gt；&gt；道格拉斯：非常，非常好，太棒了。
&gt;&gt; Douglas: Very, very good, brilliant.
