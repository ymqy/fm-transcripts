WEBVTT

1
00:00:00.000 --> 00:00:03.666
[音乐]
[MUSIC]

2
00:00:03.666 --> 00:00:06.990
&gt；&gt；Douglas：RQ中有四种类型的函数，如果您能够管理
&gt;&gt; Douglas: RQ has four types of functions in it and if you can manage

3
00:00:06.990 --> 00:00:11.750
这四种类型的函数，那么它就很容易使用了。
these four types of functions then it's it's pretty easy to use.

4
00:00:11.750 --> 00:00:16.210
我们有请求者函数，这些函数可以执行请求。
We have requestor functions, which are functions that can execute a request.

5
00:00:17.219 --> 00:00:21.120
我们有回调，它们是传递给
We've got callbacks, which are continuation functions that are passed to

6
00:00:21.120 --> 00:00:26.300
请求者这就是请求者返回其结果的方式。
requestors that's how requester returns its result.

7
00:00:26.300 --> 00:00:29.780
我们有工厂，就像你一直在制造的工厂
We have factories, which are like the factories you've been making which

8
00:00:29.780 --> 00:00:33.734
使请求者功能，它们起到了方便的作用。
make requestor functions, they act as a convenience.

9
00:00:33.734 --> 00:00:37.491
事实上，我向你们展示的四个功能都是工厂和
And in fact the four functions that I've shown you are all factories and

10
00:00:37.491 --> 00:00:41.499
那么取消的取消函数可以由请求者返回以取消或
then cancel functions that cancel can be returned by a requestor to cancel or

11
00:00:41.499 --> 00:00:42.070
请求。
request.

12
00:00:44.530 --> 00:00:47.250
回调函数接受两个参数，
A callback function takes two parameters,

13
00:00:47.250 --> 00:00:49.750
成功参数和失败参数。
a success parameter and a failure parameters.

14
00:00:49.750 --> 00:00:53.600
如果未定义成功，则它失败，并且
If success is undefined then it fails and

15
00:00:53.600 --> 00:00:58.700
失败是未定义的，当它成功时，只有一个回调
the failure is undefined when it succeeds and there's just one callback in

16
00:00:58.700 --> 00:01:03.210
例如，承诺将有两个回调，一个用于成功，一个用于失败。
promises for example will be two callbacks one for success, one for failure.

17
00:01:03.210 --> 00:01:04.890
我想如果你只有一个会更容易。
I think it's easier if you just have one.

18
00:01:06.810 --> 00:01:11.060
然后请求者函数将接受回调，并且它还可以可选地采取
Than a requester function will take a call back and it can optionally also take

19
00:01:11.060 --> 00:01:16.150
一个值，这就是序列如何将结果从一个步骤移动到下一个步骤。
a value and that's how a sequence will move results from one step to the next.

20
00:01:17.239 --> 00:01:20.870
请求者函数可以返回Cancel函数，该函数用于
A requestor function can return a cancel function which is used for

21
00:01:20.870 --> 00:01:25.368
取消和工厂提出请求。
cancellation and factories make requestors.

22
00:01:26.780 --> 00:01:30.078
这就是四种函数的关系。
That's the relationship of the four kinds of functions.

23
00:01:32.716 --> 00:01:35.090
&gt；&gt；Douglas：让我们看一个例子。
&gt;&gt; Douglas: Let's look at an example.

24
00:01:35.090 --> 00:01:41.520
这是身份请求者这是最简单的请求者
This is the identity requestor this is the simplest possible requestor It will

25
00:01:41.520 --> 00:01:46.689
接收一个值，然后它会将该值发送到序列中的下一个对象。
receive a value and it will then send the value to the next thing in the sequence.

26
00:01:46.689 --> 00:01:49.930
如果你把这个放在序列的中间，那就是什么都不做
If you put this in the middle of a sequence, it's a do nothing it

27
00:01:49.930 --> 00:01:54.609
会把发生的一切都交给下一个。
will just take whatever's going on and give it to the next one.

28
00:01:54.609 --> 00:01:58.962
你永远不会这样做，但这是最简单形式的模型。
You never do that but this is the model for the simplest form.

29
00:02:07.670 --> 00:02:12.906
&gt；&gt；道格拉斯：我们可以包装这些东西，或者，对不起，这是全名请求
&gt;&gt; Douglas: We can wrap those things or, I'm sorry, this is the fullname request

30
00:02:12.906 --> 00:02:18.679
这个接收包含部分名称的对象，我们将连接
this one receives an object containing parts of names and we'll concatenate

31
00:02:18.679 --> 00:02:23.680
他们一起创建一个名字，然后将其传递给回调。
them together to make a name and then deliver that to the callback.

32
00:02:25.253 --> 00:02:27.699
例如，我可以将此添加为处理步骤。
I could add this as a processing step for example.

33
00:02:29.829 --> 00:02:35.370
我们可以编写一些函数来实现自动化
And we can write functions which will automate that for

34
00:02:35.370 --> 00:02:40.490
我们，所以请求出现类似于您一直在编写的函数。
us, so request arise is similar to functions that you've been writing.

35
00:02:40.490 --> 00:02:46.659
它将产生一个将调用一些普通函数的请求者。
It will produce a requestor that will call some ordinary function.

36
00:02:47.689 --> 00:02:52.293
我们可以获取任何现有的函数，并将其转换为请求者，该请求者可以
We can take any existing function and turn it into a requestor which could

37
00:02:52.293 --> 00:02:56.076
减少你在过渡到RQ时必须做的工作量。
reduce the amount of work you have to do in transiting to RQ.

38
00:02:58.599 --> 00:03:00.189
&gt；&gt；道格拉斯：这是一个延迟请求者。
&gt;&gt; Douglas: This is a Delay Requestor.

39
00:03:00.189 --> 00:03:05.039
这是最简单的实时事件。
This is the simplest real time thing.

40
00:03:05.039 --> 00:03:08.449
您永远不会将延迟放入服务器应用程序中。
You would never put a delay into a server application.

41
00:03:08.449 --> 00:03:11.909
在实际情况下，您将做的不是调用setTimeout，而是
What you would do in a real situation is instead of calling setTimeout, you're

42
00:03:11.909 --> 00:03:16.979
将向某个服务发送消息，而不是调用clearTimeout
going to send a message to some service and instead of calling clearTimeout

43
00:03:16.979 --> 00:03:21.240
您可能会向相同的服务发送一条消息，告诉它请停止。
you would send a message probably to the same service telling it to please stop.

44
00:03:22.990 --> 00:03:27.329
您只需进行替换，但如果您要接受延迟请求者和
You just make the substitution but if you were to take the delay requestor and

45
00:03:27.329 --> 00:03:32.379
把它放在一个序列中，这个序列将运行与它刚刚需要的完全相同
put it in a sequence, the sequence will run exactly the same it will just take

46
00:03:32.379 --> 00:03:35.289
更长，但它将需要更长的时间没有阻塞。
longer but it will take longer without blocking.

47
00:03:38.240 --> 00:03:41.829
如果是的话，这就是延迟工厂。
If then this is the Delay Factory.

48
00:03:43.199 --> 00:03:46.060
这个代码是延迟请求者，除了
It's this code is the delay requestor except

49
00:03:46.060 --> 00:03:49.599
工厂正在提供毫秒值。
the factory is providing the milliseconds value.

50
00:03:49.599 --> 00:03:52.418
&gt；&gt；扬声器2：这些都是RQ的一部分吗？
&gt;&gt; Speaker 2: These are all part of RQ?

51
00:03:52.418 --> 00:03:54.593
&gt；&gt；Douglas：不，这些是你如何使用RQ的例子。
&gt;&gt; Douglas: No these are examples of how you could use RQ.

52
00:03:54.593 --> 00:03:57.406
&gt；&gt；扬声器2：你放进去的东西没问题。
&gt;&gt; Speaker 2: Things that you put in there okay.

53
00:03:57.406 --> 00:03:58.421
&gt；&gt；Douglas：现在知道这个代码是。
&gt;&gt; Douglas: Now know that this code is.

54
00:03:58.421 --> 00:04:02.108
&gt；&gt；[CROSSTALK]&gt；&gt；Douglas：请求。
&gt;&gt; [CROSSTALK] &gt;&gt; Douglas: Request.

55
00:04:06.234 --> 00:04:10.770
&gt；&gt；Douglas：那么这是一个读取文件的工厂。
&gt;&gt; Douglas: Then this is a factory for reading files.

56
00:04:10.770 --> 00:04:15.289
这个工厂将产生一个请求者，然后你可以
This factory will produce a requestor which you can then

57
00:04:15.289 --> 00:04:20.019
放入一个列表，然后该列表将为您读取文件并
put in a list which will then read files for you and

58
00:04:20.019 --> 00:04:23.519
这一个正在包装节点文件系统。
this one is wrapping the node file system.

59
00:04:26.759 --> 00:04:30.829
这是我之前展示给你的演示中的小部件。
This is the widget that was in the demo that I showed you earlier.

60
00:04:30.829 --> 00:04:37.139
这都是HTML垃圾，所以我不想用它来打扰你，但是
This is all HTML crap, so I'm not gonna bother you with that but

61
00:04:37.139 --> 00:04:40.090
我这样做是因为我不想依赖任何人
and I did it this way cause I didn't want to have to depend on any one

62
00:04:40.090 --> 00:04:44.189
图书馆，因为如果我选择了一个不是每个人都喜欢的图书馆，而且
library because if I chose a library that's not everybody's favorite, and

63
00:04:44.189 --> 00:04:49.319
原来并不是每个人都是某人的最爱，所以
it turns out everybody is not somebody's favorite so

64
00:04:49.319 --> 00:04:52.959
它只是，所以它是可怕的。
it's just, so it's awful.

65
00:04:52.959 --> 00:04:58.564
但这里有趣的功能是，这是一个快速处理程序或
But the interesting features here are that this is the quick handler or

66
00:04:58.564 --> 00:05:03.220
成功处理程序，所以当我在成功上点击是时，
the success handler, so when I clicked on yes on success,

67
00:05:03.220 --> 00:05:07.019
我将小部件的颜色更改为绿色
I'd changed the color of the widget to green and

68
00:05:07.019 --> 00:05:12.529
我调用了回调，让它知道它已成功完成，并且
I called the callback to let it know that it finished successfully and

69
00:05:12.529 --> 00:05:18.514
在失败方面是相似的，除了我将背景颜色设置为粉红色和
on the failure side was similar except I set the background color to pink and

70
00:05:18.514 --> 00:05:24.024
现在未定义成功，以指示我们有失败的结果和
success is undefined now to indicate that we have a failure result and

71
00:05:24.024 --> 00:05:29.170
在取消的情况下，我只是将背景设置为灰色。
in the case of cancellation, I just set the background to gray.

72
00:05:31.961 --> 00:05:36.480
&gt；&gt；演讲者2：为什么要逆转你的成功填充者信念节点？
&gt;&gt; Speaker 2: Why'd you reverse your success fillers conviction node?

73
00:05:36.480 --> 00:05:37.588
&gt；&gt；Douglas：因为节点弄错了。
&gt;&gt; Douglas: Because node got it wrong.

74
00:05:37.588 --> 00:05:38.122
&gt；&gt；扬声器2：因为它弄错了吗？
&gt;&gt; Speaker 2: Because it got it wrong?

75
00:05:38.122 --> 00:05:39.026
&gt；&gt；道格拉斯：是的，&gt；&gt；扬声器2：好的，
&gt;&gt; Douglas: Yeah &gt;&gt; Speaker 2: Okay,

76
00:05:39.026 --> 00:05:41.632
我同意这看起来真的很奇怪，但是
I agree that it seemed really weird but

77
00:05:41.632 --> 00:05:47.103
现在你开始用雇佣的人来做正确的事情，这看起来很奇怪。
now you start to use to hire people who do it the right way it seems weird.

78
00:05:47.103 --> 00:05:49.584
&GT；&GT；道格拉斯：是的，没错，我知道我在危险中提到过这一点，
&gt;&gt; Douglas: Yeah, exactly and I know I mentioned this in the hazard,

79
00:05:49.584 --> 00:05:51.978
在一个做错事的系统中做正确的事情。
doing things right in a system that does things wrong.

80
00:05:51.978 --> 00:05:53.755
&gt；&gt；[笑]&gt；&gt；道格拉斯：是的，而且
&gt;&gt; [LAUGH] &gt;&gt; Douglas: It's going to, yeah, and

81
00:05:53.755 --> 00:05:54.670
我明白。
I understand that.

82
00:05:54.670 --> 00:05:56.000
我为此道歉。
I apologize for it.

83
00:05:56.000 --> 00:05:57.209
&gt；&gt；扬声器2：好的。&gt；&gt；道格拉斯：我就是不能让自己
&gt;&gt; Speaker 2: Okay. &gt;&gt; Douglas: I just couldn't bring myself

84
00:05:57.209 --> 00:05:57.889
用错误的方式去做。
to do it the wrong way.
