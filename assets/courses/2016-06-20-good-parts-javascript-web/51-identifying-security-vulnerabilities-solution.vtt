WEBVTT

1
00:00:00.000 --> 00:00:03.944
[音乐]
[MUSIC]

2
00:00:03.944 --> 00:00:06.870
&gt；&gt；Douglas：那么让我们看看我们刚才概述的攻击。
&gt;&gt; Douglas: So let's look at the attack that we've just outlined.

3
00:00:06.870 --> 00:00:09.779
所以我们得到了一个全局变量，我称之为stash。
So we've got a global variable, I'm calling it stash.

4
00:00:09.779 --> 00:00:12.519
有人提出了一个全局变量，它就是这样的。
Someone suggested a global variable and there it is.

5
00:00:12.519 --> 00:00:16.960
然后我们将存储到推送函数中
Then we will store into push a function

6
00:00:16.960 --> 00:00:20.329
它将接受这个并将其存储在那个全局变量中。
which will take this and store it in that global variable.

7
00:00:21.769 --> 00:00:27.160
然后为了得到这个要执行的函数，调用append。
And then in order to get to this function to be executed, you call append.

8
00:00:27.160 --> 00:00:32.481
append将调用推送，因为这是一个方法调用，
append will call the push, and because this is a method invocation,

9
00:00:32.481 --> 00:00:34.968
这将被绑定到数组。
this will be bound to the array.

10
00:00:37.869 --> 00:00:42.783
&gt；&gt；Douglas：所以这次攻击利用了其中的几个混淆
&gt;&gt; Douglas: So this attack exploits several confusions that are in this

11
00:00:42.783 --> 00:00:43.770
语言。
language.

12
00:00:45.460 --> 00:00:50.240
原则上的困惑是，在这种语言中没有数组。
The principle confusion is, there are not arrays in this language.

13
00:00:50.240 --> 00:00:53.020
它们的行为与其他语言中的数组不同。
They don't behave like arrays in other languages.

14
00:00:53.020 --> 00:00:58.219
但我们认为我们做到了，甚至是那些构建JavaScript引擎的人，
But we think that we do and even the people who built JavaScript engines,

15
00:00:58.219 --> 00:00:59.750
当他们看到这个问题时，
when they were shown this problem,

16
00:00:59.750 --> 00:01:04.599
他们知道JavaScript中的数组是如何工作的，至少比任何人都要好。
they know how arrays in JavaScript work, at least better than anybody.

17
00:01:04.599 --> 00:01:08.319
他们看不到它，因为每个人都认为这就是数组的作用。
And they couldn't see it because everybody thinks this is what arrays do.

18
00:01:08.319 --> 00:01:12.450
所以当你有这个的时候，我在这里，即使我们知道我们没有
So when you have this I here, even though we know we don't have

19
00:01:12.450 --> 00:01:15.319
在这种语言中，每个人都认为它是int，对吗？
ints in this language, everybody thinks it's an int, right?

20
00:01:15.319 --> 00:01:18.829
所以任何人都不会想到这可能是其他任何东西。
So it doesn't occur to anybody that this could be anything else.

21
00:01:20.150 --> 00:01:23.359
但这只是一把钥匙，对吧？
But it's just a key, right?

22
00:01:23.359 --> 00:01:26.760
事实上，JavaScript将做的是，它将接受您传入的任何内容。
That in fact what JavaScript will do is it will take whatever you pass in.

23
00:01:26.760 --> 00:01:29.268
如果这里不是字符串，它会把它变成字符串。
If it's not a string here it will turn it into a string.

24
00:01:33.735 --> 00:01:35.695
&gt；&gt；Douglas：JavaScript就是这么做的，但是
&gt;&gt; Douglas: That's what JavaScript does but

25
00:01:35.695 --> 00:01:40.579
这不是我们认为编程语言应该表现的，对吗？
that's not how we think a programming language should behave, right?

26
00:01:40.579 --> 00:01:45.219
当你的系统做了一些与我们期望的不同的事情时，
And when you have a system that does something other than what we expect,

27
00:01:45.219 --> 00:01:49.819
您会得到混淆，并且混淆可能会导致安全漏洞，就像本例中一样。
you get confusion and confusion can lead to security exploits, as in this case.

28
00:01:50.840 --> 00:01:53.650
这个问题的另一个来源是
The other source of this problem is that

29
00:01:53.650 --> 00:01:58.625
语言中的所有变量绑定都是静态的，因为函数作用域，
all variable bindings in the language are static, because functions scope,

30
00:01:58.625 --> 00:02:04.670
如果在那里定义了数组，那么这个数组将绑定到那个数组。
if array is defined there then this one will be bound to that one.

31
00:02:04.670 --> 00:02:08.590
除了这个，它是可以预测的。
It's predictable with the exception of this.

32
00:02:08.590 --> 00:02:10.460
这是动态绑定的。
This is bound dynamically.

33
00:02:12.539 --> 00:02:16.620
所以很难推断这个的价值会是多少
And so it's much harder to reason about what the value of this is gonna be at any

34
00:02:16.620 --> 00:02:20.909
即时，因为它可以根据调用的位置和
instant because it can be different depending on where it's called and

35
00:02:20.909 --> 00:02:21.479
当它被称为。
when it's called.

36
00:02:22.610 --> 00:02:26.379
结果是，如果你在考虑系统的安全性或者
And that turns out, if you're thinking about the security of systems or

37
00:02:26.379 --> 00:02:29.289
系统的可靠性，是一件坏事。
the reliability of systems, to be a bad thing.

38
00:02:30.300 --> 00:02:33.949
这就是为什么我更喜欢尝试用这种语言进行编程的方法
That's why I prefer to try to figure out ways of programming in this language

39
00:02:33.949 --> 00:02:38.170
这并不依赖于这一点，因为这往往是不可靠的。
that don't depend on this since this tends to be unreliable.

40
00:02:40.590 --> 00:02:43.793
那么你对这个问题的看法，是不是很有趣？
So what you think of that problem, is that interesting?

41
00:02:43.793 --> 00:02:46.304
所以，现在你明白了袭击的原因，
So, now that you understand the attack,

42
00:02:46.304 --> 00:02:50.620
您将如何更正此代码以防止攻击发生？
how would you correct this code to prevent that attack from happening?

43
00:02:50.620 --> 00:02:51.433
是吗？
Yeah?

44
00:02:51.433 --> 00:02:52.783
&gt；&gt；演讲者2：仅为表扬，
&gt;&gt; Speaker 2: Just to give credit,

45
00:02:52.783 --> 00:02:57.584
文森特在聊天室我想他比我们先拿到这个，但是
Vincent in the chat room I think he had got this a little bit before we did, but

46
00:02:57.584 --> 00:03:03.500
然后他说要修复它，他只是将(I)强制为int，比如+i。
then he's saying to fix it, he would just force the (i) to an int, like +i.

47
00:03:03.500 --> 00:03:04.490
&GT；&GT；道格拉斯：完全正确。
&gt;&gt; Douglas: That's exactly right.

48
00:03:04.490 --> 00:03:05.860
我也会这么做的。
I would do that too.

49
00:03:05.860 --> 00:03:10.759
所以，我会在这里放一个+i。
So, I would put a +i here.

50
00:03:10.759 --> 00:03:16.554
这样做的结果是加号将字符串转换为数字。
What that accomplishes is is plus will turn the string into a number.

51
00:03:16.554 --> 00:03:21.103
如果你传入一个数字，它只是保持一个数字，所以它是一个无操作。
If you pass in a number, it just stays a number so it's a no op.

52
00:03:21.103 --> 00:03:26.680
但是如果你传入Push这个词，它会把它变成一个数字。
But if you pass in the word push, it will turn it into a number.

53
00:03:26.680 --> 00:03:28.210
PUSH变成什么数字？
What number does push turn into?

54
00:03:29.699 --> 00:03:33.560
NaN，然后将NaN转换为字符串。
NaN, and so then turn NaN into a string.

55
00:03:33.560 --> 00:03:40.060
因此，我们将把v存储在arra.NaN中，这很愚蠢，但至少它不是push。
So, we'll be storing v at array.NaN which is stupid but at least it's not push.

56
00:03:40.060 --> 00:03:42.120
对，所以我们绕过这一点。
Right, so we get around that.

57
00:03:42.120 --> 00:03:45.439
我们可以做的另一件事是不使用推，
The other thing we could do is not use push,

58
00:03:45.439 --> 00:03:50.300
取而代之的是，使用老式的方法为当前长度赋值。
instead use the old fashioned way of assigning to the current length.

59
00:03:50.300 --> 00:03:54.937
这说明了我认为语言中的另一个设计错误
This illustrates another design error in the language that I think

60
00:03:54.937 --> 00:04:00.090
像追加到数组这样基本的东西应该是一个运算符。
something as fundamental as appending to an array should be an operator.

61
00:04:00.090 --> 00:04:04.407
它应该是建立在语言中的东西，不可能是
It should be something that's just built into the language which can't be

62
00:04:04.407 --> 00:04:06.061
被破坏了，但它不是。
corrupted, but it's not.

63
00:04:06.061 --> 00:04:14.039
JavaScript允许，而且还有关于这些如何获得磅的奇怪方式。
JavaScript allows, and there's also the weird way of about how these get pound.

64
00:04:14.039 --> 00:04:18.750
因此，通常在调用push方法时，
So, ordinarily you would when you call push method,

65
00:04:18.750 --> 00:04:22.930
您将使用继承的array.prototype.push。
you're going to be using the inherited array.prototype.push.

66
00:04:22.930 --> 00:04:27.768
但是当我们使用store将我们自己的push属性分配给这个对象时，
But when we assigned our own push property to this object using store,

67
00:04:27.768 --> 00:04:32.283
现在推送是本地的，所以我们看起来不是array.prototype.push。
now push is local and so we don't look array.prototype.push.

68
00:04:33.740 --> 00:04:38.209
这也不符合大多数人的心态
And that again doesn't match most people's mindset about how

69
00:04:38.209 --> 00:04:40.831
编程语言应该可以工作。
programming language should work.

70
00:04:40.831 --> 00:04:45.634
这可能不是您希望此函数成为的那种行为
That's probably not the kind of behavior that you want this function to be

71
00:04:45.634 --> 00:04:46.880
可以修改。
able to to modify.

72
00:04:49.422 --> 00:04:51.572
&GT；&GT；道格拉斯：那么你对这个问题有什么看法，是不是很有趣，
&gt;&gt; Douglas: So what do you think of that problem, was that fun,

73
00:04:51.572 --> 00:04:52.579
有趣吗？
was that interesting?

74
00:04:52.579 --> 00:04:53.644
&gt；&gt；扬声器3：是的。
&gt;&gt; Speaker 3: Yes.

75
00:04:53.644 --> 00:04:54.394
道格拉斯：先生。
&gt;&gt; Douglas: Sir.

76
00:04:54.394 --> 00:04:55.134
&gt；&gt；扬声器3：是吗？
&gt;&gt; Speaker 3: Yeah?

77
00:04:55.134 --> 00:05:01.560
为什么不直接给JavaScript实数组，它会破坏它吗？
Why not just give JavaScript real arrays, is it going to break it?

78
00:05:01.560 --> 00:05:02.923
&gt；&gt；道格拉斯：当然，打破它。
&gt;&gt; Douglas: Absolutely, break it.

79
00:05:02.923 --> 00:05:06.119
是的，互联网上到处都是代码
Yeah, there's code all over the Internet

80
00:05:06.119 --> 00:05:09.170
这就假设了这个可怕的行为&gt；&gt；Speaker 3：and
that assumes this terrible behavior &gt;&gt; Speaker 3: And

81
00:05:09.170 --> 00:05:14.430
你不能只说ECMA6是一个新的标准，有一个新的。
you can't just say that ECMA 6 is a new standard that has a new.

82
00:05:14.430 --> 00:05:19.420
&gt；&gt；道格拉斯：我希望，顺便说一句，网络不同于任何
&gt;&gt; Douglas: I wish, the way, the web is unlike any

83
00:05:19.420 --> 00:05:24.447
其他平台，如果你正在开发一个服务器，
other platform in that, if you're developing a server,

84
00:05:24.447 --> 00:05:30.920
您可以指定在哪个版本级别上安装什么软件，等等。
you dictate what software is installed on that at what revision level and so on.

85
00:05:30.920 --> 00:05:33.209
您可以控制服务器上发生的一切，因此
You've got control over everything happening on the server so

86
00:05:33.209 --> 00:05:35.110
你可以口授这些东西。
you can dictate that stuff.

87
00:05:35.110 --> 00:05:39.199
所以你可以容忍突破性的变化，因为你决定什么时候
And so you can tolerate breaking changes because you decide when you're going to

88
00:05:39.199 --> 00:05:39.740
做出改变。
make the change.

89
00:05:40.879 --> 00:05:46.401
但在网络上，你必须与任何人被安装的东西一起运行。
But on the web, you have to run with what ever it is that someone's got installed.

90
00:05:46.401 --> 00:05:50.336
如果他们正在运行一些可怕的旧东西，您的代码仍然可以运行
And if they're running some awful old thing your code is still expected to run

91
00:05:50.336 --> 00:05:51.314
在那个旧东西上。
on that old thing.

92
00:05:51.314 --> 00:05:55.173
&gt；&gt；扬声器3：所以对于ECMA 6，他们必须有一些新的。
&gt;&gt; Speaker 3: So for ECMA 6, they're gonna have to have some new.

93
00:05:55.173 --> 00:05:58.096
对不起，我不知道怎么继续，对不起，
I'm sorry, I don't how to continue, sorry to,

94
00:05:58.096 --> 00:06:02.071
他们必须有一个新的东西可以吃ECMA 6，对吗？
they're gonna have to have a new stuff that can eat ECMA 6, right?

95
00:06:02.071 --> 00:06:02.571
&gt；&gt；道格拉斯：对。
&gt;&gt; Douglas: Right.

96
00:06:04.660 --> 00:06:08.589
&gt；&gt；Speaker 3：那么为什么不创建一个新的东西而不是一个数组，称之为列表。
&gt;&gt; Speaker 3: So why not create a new thing instead of an array, call it a list.

97
00:06:09.740 --> 00:06:13.319
&gt；&gt；Douglas：他们可以这样做，事实上他们已经在ES6中添加了新内容，因为
&gt;&gt; Douglas: They could do that, in fact they have added new things in ES6, for

98
00:06:13.319 --> 00:06:20.079
例如，有一种叫做地图的新东西，它的行为就像对象应该表现的那样。
example, there's a new thing called a map which behaves like objects should behave.

99
00:06:20.079 --> 00:06:24.939
它更像是一个哈希表，并且
It is more correctly like a hash table and

100
00:06:24.939 --> 00:06:31.410
有新的形式可以做到这一点，但它看起来不是这样的。
there are new forms for doing that but it doesn't look like this.

101
00:06:31.410 --> 00:06:36.396
因此很难让人们使用它，因为它没有
And so it's gonna be very difficult to get people to use it because it doesn't have

102
00:06:36.396 --> 00:06:38.927
这一句法的便利之处在于
the syntactic conveniences that this one

103
00:06:38.927 --> 00:06:43.750
道格拉斯：是的，所以-
has &gt;&gt; Douglas: Yeah, so the-

104
00:06:43.750 --> 00:06:45.096
&gt；&gt；演讲者3：我知道有好的
&gt;&gt; Speaker 3: I know there are good

105
00:06:45.096 --> 00:06:47.879
这些事情的答案，我只是&GT；&GT；道格拉斯：不，
answers for these things, I'm just &gt;&gt; Douglas: No,

106
00:06:47.879 --> 00:06:51.699
我不是想让它消失，我是说，网络真的是，
I'm not trying to wave it off, I mean, the web is a really,

107
00:06:51.699 --> 00:06:55.154
一旦我们在Web标准中犯了一个错误，我们就会被它卡住。
once we make a mistake in a web standard we're stuck with it.

108
00:06:55.154 --> 00:06:57.768
&gt；&gt；扬声器3：[笑]&gt；&gt；道格拉斯：我们所能做的就是继续
&gt;&gt; Speaker 3: [LAUGH] &gt;&gt; Douglas: And all we can do is pile on

109
00:06:57.768 --> 00:07:02.353
更多的错误在它上面，我们不能纠正任何曾经的东西
more mistakes on top of it, we can't correct any of the stuff that's ever been

110
00:07:02.353 --> 00:07:06.591
完成了[大笑]，所以你们都知道使用Web标准是令人难以置信的
done [LAUGH] And so working with web standards as you all know is incredibly

111
00:07:06.591 --> 00:07:10.714
令人沮丧，因为没有什么会变得更好，它只会变得更大。
frustrating because nothing ever gets better, it just gets bigger.

112
00:07:12.345 --> 00:07:13.300
&gt；&gt；扬声器3：他们没有去掉空白标签。
&gt;&gt; Speaker 3: They didn't get rid of the blank tag.

113
00:07:15.730 --> 00:07:16.730
&gt；&gt；道格拉斯：嗯，不完全是。
&gt;&gt; Douglas: Well, not entirely.

114
00:07:16.730 --> 00:07:21.588
我的意思是你仍然可以写眨眼，而且不会再让你头疼了，但是
I mean you can still write blink and it's not gonna give you headaches anymore, but

115
00:07:21.588 --> 00:07:26.742
它仍然被允许，它仍然在DOM中构建结构，它仍然在那里。
it's still allowed, it's still building structures in the Dom, it's still there.

116
00:07:26.742 --> 00:07:30.798
事实上，您可以编写CSS，这将使闪烁恢复生机。
And in fact, you can write CSS, which will cause the blink to come back to life.

117
00:07:30.798 --> 00:07:34.805
&gt；&gt；扬声器3：[听不到][大笑]&gt；&gt；道格拉斯：所以是[大笑]
&gt;&gt; Speaker 3: [INAUDIBLE] [LAUGH] &gt;&gt; Douglas: So it's [LAUGH]

118
00:07:34.805 --> 00:07:35.423
&gt；&gt；扬声器4：是的，
&gt;&gt; Speaker 4: Yeah,

119
00:07:35.423 --> 00:07:39.653
人们已经用CSS编写了JavaScript插件。
people have written JavaScript plugins in CSS.

120
00:07:39.653 --> 00:07:40.634
&gt；&gt；道格拉斯：是的，它-&gt；&gt；扬声器4：带来
&gt;&gt; Douglas: Yeah, it- &gt;&gt; Speaker 4: Bring

121
00:07:40.634 --> 00:07:41.810
返回GeoCities页面。
back the geocities page.

122
00:07:41.810 --> 00:07:43.720
把眨眼的东西拿回来。
Bring back the blink.

123
00:07:43.720 --> 00:07:46.240
&GT；&GT；道格拉斯：是的，修复Web非常困难。
&gt;&gt; Douglas: Yeah, it's very, very hard to fix the Web.

124
00:07:47.360 --> 00:07:52.069
因为当错误发生时，错误的问题
Cuz when something wrong happens, the problem with the wrong

125
00:07:52.069 --> 00:07:55.659
事情并不是它们毫无用处，而是它们很危险，很奇怪。
things isn't that they're useless, it's that they're dangerous and weird.

126
00:07:55.659 --> 00:07:58.569
还有一些非常聪明的人会说哇，
And there are very clever people who will go wow,

127
00:07:58.569 --> 00:08:00.579
太糟糕了，我能用它做什么？
that's crappy, what can I do with that?

128
00:08:00.579 --> 00:08:02.970
他们会想出来的。
And they'll figure it out.

129
00:08:02.970 --> 00:08:06.759
他们会拿走你见过的最愚蠢的东西，现在它变成了
They'll take the stupidest thing you ever saw and it now becomes

130
00:08:06.759 --> 00:08:11.470
一些流行图书馆的一部分，我们再也摆脱不了它了。
part of some popular library and we can't get rid of it anymore.
