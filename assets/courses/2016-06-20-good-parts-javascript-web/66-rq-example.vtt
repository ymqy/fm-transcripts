WEBVTT

1
00:00:00.000 --> 00:00:04.054
[音乐]
[MUSIC]

2
00:00:04.054 --> 00:00:07.019
&gt；&gt；Douglas Crockford：这是RQ计划的一个例子。
&gt;&gt; Douglas Crockford: So this is an example of an RQ program.

3
00:00:07.019 --> 00:00:12.660
您可以嵌套数组的形式编写RQ，嵌套数组
You can write RQ in the form of nested arrays which

4
00:00:12.660 --> 00:00:17.629
描述你想用RQ代理的电话做的工作
describe the work that you wanna do with the calls to RQ acting

5
00:00:17.629 --> 00:00:22.370
作为关于并行发生什么，串行发生什么的注释。
as annotations as to what happens in parallel, what happens in serial.

6
00:00:22.370 --> 00:00:27.980
所以这里我们有一个请求，它将并行地做一些事情。
So here we've got one request, that's gonna do stuff in parallel.

7
00:00:27.980 --> 00:00:30.460
同时，它会做几个序列
In parallel, it's gonna do a couple of sequences and

8
00:00:30.460 --> 00:00:33.920
然后是一个独立的东西，一个比赛和一个后备。
then one standalone thing and a race and a fallback.

9
00:00:33.920 --> 00:00:35.049
同时
And simultaneously,

10
00:00:35.049 --> 00:00:38.579
它也会做这个可选的设置，只是类似的东西。
it will also do this optional set, just a similar sort of stuff.

11
00:00:38.579 --> 00:00:40.030
当一切都完成后，
And when it's all done,

12
00:00:40.030 --> 00:00:46.505
然后我们将调用这个函数，这是将显示结果的延续。
we will then call this function that's the continuation which will show the result.

13
00:00:46.505 --> 00:00:49.710
这是一个实际的JavaScript程序，所以让我执行它
So this is an actual JavaScript program, so let me execute it so

14
00:00:49.710 --> 00:00:50.982
你可以看到它的作用。
you can see what it does.

15
00:00:54.948 --> 00:00:58.932
&gt；&gt；Douglas Crockford：这些小部件中的每一个都代表一些服务
&gt;&gt; Douglas Crockford: So each of these widgets represents some service which is

16
00:00:58.932 --> 00:01:01.509
正在被该程序访问。
being accessed by that program.

17
00:01:01.509 --> 00:01:04.640
所以这些就是立即开始的。
So those are the ones that start immediately.

18
00:01:04.640 --> 00:01:07.790
我可以决定哪一个会成功
And I get to decide which of these are going to succeed and

19
00:01:07.790 --> 00:01:09.030
都会失败。
which are going to fail.

20
00:01:09.030 --> 00:01:11.689
例如，如果我有一个失败，
For example, if I have that one fail,

21
00:01:11.689 --> 00:01:16.500
然后整个请求失败，您可以看到我取消了其他所有内容
then the entire request failed and you can see I cancelled everything else

22
00:01:16.500 --> 00:01:20.500
因为如果整个工作都行不通的话我们就不需要它了。
because we don't need it if the whole job's not gonna work.

23
00:01:20.500 --> 00:01:22.200
所以让我重置一下，我们再试一次。
So let me reset and we'll try it again.

24
00:01:24.299 --> 00:01:29.010
所以假设这一次有一个成功了，好的，我们还在运行，
So let's say this time that one succeeded, okay, we're still running,

25
00:01:29.010 --> 00:01:29.629
一切都很好。
things are good.

26
00:01:30.680 --> 00:01:33.680
这个是可选的，假设它失败了。
This one is optional, let's say it fails.

27
00:01:33.680 --> 00:01:37.939
好吧，它失败了，但没问题，它是可选的，所以我们仍然在运行。
Okay, it failed but no problem, it's optional so we're still running.

28
00:01:37.939 --> 00:01:44.109
假设这个序列开始，这里它是成功的，很好，然后A2开始。
Let's say this sequence starts, here it's successful, good, so then A2 started.

29
00:01:44.109 --> 00:01:47.569
我们完成了请求A1，所以A2开始了。
We got the request A1 finished so A2 starts.

30
00:01:47.569 --> 00:01:52.219
你对B1做类似的事情，成功了，所以B2现在正在运行。
You do a similar thing with B1, that succeeded, so B2 is now running.

31
00:01:52.219 --> 00:01:57.307
我们有一场D1，D2，D3的比赛，哪一个应该赢？
We've got a race with D1, D2, D3, which one should win?

32
00:01:57.307 --> 00:01:57.956
&gt；&gt；扬声器2：2。
&gt;&gt; Speaker 2: 2.

33
00:01:57.956 --> 00:01:58.629
&gt；&gt；道格拉斯·克罗克福德(Douglas Crockford)：2。
&gt;&gt; Douglas Crockford: 2.

34
00:01:58.629 --> 00:02:01.159
所以第二场比赛赢了。
So race 2 wins.

35
00:02:01.159 --> 00:02:05.150
我们取消了D1和D3，因为我们不再需要那些结果了。
And we canceled D1 and D3 because we don't need those results any more.

36
00:02:05.150 --> 00:02:08.719
假设我们的后备失败了，这不是问题。
Let's say our fallback fails, not a problem.

37
00:02:08.719 --> 00:02:11.370
回退中的下一步成功。
The next step in the fallback succeeds.

38
00:02:11.370 --> 00:02:14.180
我可以按任何顺序完成这些。
And I can finish these in any order.

39
00:02:14.180 --> 00:02:17.920
这么说吧，也许这成功了
So let's say that goes and maybe that succeeds and

40
00:02:17.920 --> 00:02:22.060
成功了，我们现在很好。
that succeeds, that succeeds and we're now good.

41
00:02:22.060 --> 00:02:24.270
所以在这一点上，整个事情都完成了。
So at that point the whole thing finished.

42
00:02:24.270 --> 00:02:26.639
所有尚未完成的可选项目，
All of the optional things that were still pending,

43
00:02:26.639 --> 00:02:29.099
那些被取消了我们就完事了。
those got canceled and we're done.

44
00:02:31.870 --> 00:02:32.808
有什么问题吗？
Any questions about that?

45
00:02:32.808 --> 00:02:33.430
&gt；&gt；扬声器3：是的，
&gt;&gt; Speaker 3: Yeah,

46
00:02:33.430 --> 00:02:38.920
你能给我们一个真实世界的例子来说明你会在哪里使用它吗？
could you give us a real world example of where you'd use this?

47
00:02:38.920 --> 00:02:44.120
&gt；&gt；Douglas Crockford：是的，我会的，我一直在这么做。
&gt;&gt; Douglas Crockford: Yeah, I will, and I've been sort of doing that.

48
00:02:44.120 --> 00:02:48.849
所以我举了例子，我们得到了导航，我们得到了广告，所有这些。
So I gave examples that we get the nav and we get the ads and all of those.

49
00:02:48.849 --> 00:02:50.439
那些都是现实世界的东西。
Those are real world things.

50
00:02:50.439 --> 00:02:53.242
这些就是您在Web应用程序中将拥有的流的种类。
Those are the sorts of flows that you would have in a web application.

51
00:02:53.242 --> 00:02:56.429
&gt；&gt；扬声器3：他们想要3个广告，但12个中的任何一个都可以在那里加载，
&gt;&gt; Speaker 3: They want 3 ads but any of 12 could load there,

52
00:02:56.429 --> 00:02:59.090
只需要前3个？
it'll just take the first 3?

53
00:02:59.090 --> 00:03:01.741
&gt；&gt；Douglas Crockford：当然，你可以做这些事情，无论你需要什么。
&gt;&gt; Douglas Crockford: Sure, you can do those sorts of things, whatever you need.

54
00:03:06.233 --> 00:03:09.629
&gt；&gt；Douglas Crockford：这又是一个实现了这一点的程序。
&gt;&gt; Douglas Crockford: So this again is the program that accomplished that.

55
00:03:09.629 --> 00:03:17.670
所有这些行为都发生在处理这些内容的RQ函数中。
All of that behavior happened just in the RQ functions handling that stuff.

56
00:03:19.560 --> 00:03:22.409
所以你可以用很多方法来组合这些东西。
So and you can compose these things in lots of ways.

57
00:03:22.409 --> 00:03:26.310
例如，这是一个序列，我们将做一件事
For example, this is a sequence in which we'll do one thing and

58
00:03:26.310 --> 00:03:30.889
我们会得到它的结果，我们会把它传递给三个不同的东西，他们会
we'll take its result and we'll pass that to three different things, and they will

59
00:03:30.889 --> 00:03:35.129
将所有结果累加到一个数组中，并将该数组传递给最后一个数组。
accumulate all of their results into an array and pass that array to the last one.

60
00:03:36.469 --> 00:03:37.979
这样你就可以得到很多工作流程。
So you can get lots of workflows.

61
00:03:37.979 --> 00:03:38.530
所以
So for

62
00:03:38.530 --> 00:03:43.090
一个真实世界的例子，这是我最近一直在做的事情。
a real world example, this is the most recent thing that I've been working on.

63
00:03:43.090 --> 00:03:45.300
我正在写一本百科全书。
I'm working on an encyclopedia.

64
00:03:45.300 --> 00:03:48.810
我正在用一种创作语言写作
And I'm writing in a authoring language and

65
00:03:48.810 --> 00:03:52.840
这是我在节点中运行的过程，用于构建图书。
this is the process that I run in node for building the book.

66
00:03:53.909 --> 00:03:58.254
所以我首先读取文件并将结果传递给include
So I first read the file and I pass that result to the include

67
00:03:58.254 --> 00:04:02.969
处理器，处理所有包含文件的内容。
processor which handles the stuff with all the include files.

68
00:04:02.969 --> 00:04:10.280
然后我把它传递给一个东西，然后它会编译它并生成HTML。
And then I pass it to a thing which will then compile it and produce the HTML.

69
00:04:10.280 --> 00:04:13.639
然后我有另一件事，然后将它写出到文件系统。
And then I have another thing which will then write it out to the file system.

70
00:04:15.259 --> 00:04:19.149
所以这是一个序列，一件事发生在另一件事上。
So this is a sequence, one thing happens to another.

71
00:04:19.149 --> 00:04:22.069
但它不是作为嵌套的事件处理程序编写的，
But it's not being written as nested event handlers,

72
00:04:22.069 --> 00:04:25.459
它被写成一张清单，列出了一件又一件发生的事情。
it's written as a list of things that happen one thing after another.

73
00:04:25.459 --> 00:04:27.290
所以它看起来更像是一个程序。
So it looks more like a program.

74
00:04:27.290 --> 00:04:28.110
&gt；&gt；扬声器3：什么是回拨？
&gt;&gt; Speaker 3: What's the callback?

75
00:04:28.110 --> 00:04:30.439
回调的，是下一个函数的回调，
The callback's, is the callback the next function,

76
00:04:30.439 --> 00:04:33.600
或-&gt；&gt；Douglas Crockford：回调是
or- &gt;&gt; Douglas Crockford: The callback is

77
00:04:33.600 --> 00:04:36.819
类似于我们今天早上用Continue WISE所做的事情。
similar to the thing that we did with continue wise this morning.

78
00:04:36.819 --> 00:04:38.487
这是会收到结果的东西。
It's the thing that will receive the result.

79
00:04:42.514 --> 00:04:46.072
&gt；&gt；Douglas Crockford：所以这是延续传递风格的特例
&gt;&gt; Douglas Crockford: So this is a special case of continuation passing style where

80
00:04:46.072 --> 00:04:48.653
在每一步，我们不返回结果，
at each step, we don't return the result,

81
00:04:48.653 --> 00:04:52.454
相反，我们将结果传递给提供给我们的函数。
instead we pass the result to a function that's provided to us.

82
00:04:52.454 --> 00:04:56.579
&gt；&gt；Speaker 4：[咳嗽]，最终回调本质上是控制台日志吗？
&gt;&gt; Speaker 4: [COUGH] And final callback is essentially a console log?

83
00:04:56.579 --> 00:04:58.649
&gt；&gt；Douglas Crockford：是的，最后一个会将它发送到控制台。
&gt;&gt; Douglas Crockford: Yeah, the last one will send it to the console.

84
00:04:58.649 --> 00:04:59.675
&gt；&gt；演讲者3：总之，这是你的节目，对吗？
&gt;&gt; Speaker 3: Anyway, this is your program, right?

85
00:04:59.675 --> 00:05:00.348
&gt；&gt；Douglas Crockford：是的。
&gt;&gt; Douglas Crockford: Yep.

86
00:05:00.348 --> 00:05:04.163
&gt；&gt；扬声器3：所以这个要排序的第一个函数，
&gt;&gt; Speaker 3: So this first function to sequence,

87
00:05:04.163 --> 00:05:08.838
首先它将调用第一个函数
first it's gonna call the first function and

88
00:05:08.838 --> 00:05:16.529
它将调用第二个函数，然后调用第三个和第四个函数。
it's gonna call the second function and then the third and the fourth.

89
00:05:16.529 --> 00:05:17.829
&gt；&gt；Douglas Crockford：对。
&gt;&gt; Douglas Crockford: Right.

90
00:05:17.829 --> 00:05:20.730
&gt；&gt；Speaker 3：其中第一个是传入的回调的值
&gt;&gt; Speaker 3: Where's the first, the value of callback that gets passed into

91
00:05:20.730 --> 00:05:22.670
第一个函数，它是从哪里来的？
the first function, where's that come from?

92
00:05:24.259 --> 00:05:27.170
&gt；&gt；Douglas Crockford：它将被调用，所以
&gt;&gt; Douglas Crockford: It'll be called by, so

93
00:05:27.170 --> 00:05:30.649
我在这里没有展示的是RQ.sequence返回一个函数。
what I didn't show here is that RQ.sequence returns a function.

94
00:05:32.170 --> 00:05:34.000
当我们调用该函数时，
When we call that function,

95
00:05:34.000 --> 00:05:38.891
然后它将调用这个列表中的第一个，为它提供一个回调函数。
it will then call the first in this list providing a callback function to it.

96
00:05:41.363 --> 00:05:45.689
&gt；&gt；Speaker 3：这就是使它调用第二个的钩子。
&gt;&gt; Speaker 3: And that's the hook that makes it call the second one.

97
00:05:45.689 --> 00:05:46.846
&gt；&gt；Douglas Crockford：对。
&gt;&gt; Douglas Crockford: Right.

98
00:05:46.846 --> 00:05:50.259
&gt；&gt；Speaker 3：某种RQ.sequence类型总是自己传递
&gt;&gt; Speaker 3: Sort of RQ.sequence kind of always passes itself

99
00:05:50.259 --> 00:05:52.909
插入到它调用的每个函数中？
into each of the functions that it calls?

100
00:05:52.909 --> 00:05:53.740
&gt；&gt；Douglas Crockford：差不多，是的。
&gt;&gt; Douglas Crockford: Sort of, yeah.

101
00:05:53.740 --> 00:05:55.009
&gt；&gt；扬声器3：好的。
&gt;&gt; Speaker 3: Okay.

102
00:05:55.009 --> 00:05:58.490
&gt；&gt；Speaker 5：它传递上一个[INAUDIBLE]的值。
&gt;&gt; Speaker 5: It passes the value from the previous [INAUDIBLE].

103
00:05:58.490 --> 00:05:59.869
&gt；&gt；Douglas Crockford：是的，所以-&gt；&gt；扬声器3：那，好的，
&gt;&gt; Douglas Crockford: Yeah, so- &gt;&gt; Speaker 3: That, okay,

104
00:05:59.869 --> 00:06:02.120
你之前提到过，是的。
you mentioned that earlier, yeah.

105
00:06:02.120 --> 00:06:03.959
&gt；&gt；Douglas Crockford：对，所以你可以想到它。
&gt;&gt; Douglas Crockford: Right, so you can think of it.

106
00:06:03.959 --> 00:06:08.430
它有点像一根管子，它把东西穿过，所以
It's sort of like a pipe that's passing the stuff through so

107
00:06:08.430 --> 00:06:10.180
每个人都从前一个人那里得到了东西。
each gets the thing from the previous one.

108
00:06:11.759 --> 00:06:12.860
&gt；&gt；扬声器3：这不是节点。
&gt;&gt; Speaker 3: And this is not node.

109
00:06:12.860 --> 00:06:15.589
这只是纯JS
This is just pure JS.

110
00:06:15.589 --> 00:06:16.750
&gt；&gt；Douglas Crockford：对，这是纯JS。
&gt;&gt; Douglas Crockford: Right, this is pure JS.

111
00:06:16.750 --> 00:06:19.769
如果你有异步的话你也可以在浏览器上运行它
You could run this on a browser as well if you've got asynchronous

112
00:06:19.769 --> 00:06:20.459
那里有事情要做。
things to do there.

113
00:06:20.459 --> 00:06:22.488
它也会跑的。
It would run as well.

114
00:06:22.488 --> 00:06:25.807
&gt；&gt；扬声器3：是的，它不是一个模块，它只是一个全局模块。
&gt;&gt; Speaker 3: Yeah, it's not a module, it's just a global.

115
00:06:25.807 --> 00:06:28.673
RS将是一个全局或任何你声明它的地方。
RS would be a global or wherever you declare it.

116
00:06:28.673 --> 00:06:31.975
&gt；&gt；Douglas Crockford：这只是一个JS文件，您可以随心所欲地加载它。
&gt;&gt; Douglas Crockford: It's just a JS file, you can load it however you want.

117
00:06:37.230 --> 00:06:38.117
&GT；&GT；扬声器3：它只是一个JS。
&gt;&gt; Speaker 3: It's just a JS.

118
00:06:38.117 --> 00:06:43.680
但是，它在名称空间中创建名为RS的全局。
It creates global, though, called RS in the namespace.

119
00:06:43.680 --> 00:06:46.656
&gt；&gt；Douglas Crockford：在浏览器中，它创建一个全局命名空间并
&gt;&gt; Douglas Crockford: In a browser it creates a global namespace and

120
00:06:46.656 --> 00:06:49.009
在节点中，它将添加一些内容。
in node it will add something.

121
00:06:49.009 --> 00:06:50.348
是的，它会作为模型出口。
Yeah, it'll export as a model.

122
00:06:50.348 --> 00:06:57.340
因此RQ也可以处理超时。
So RQ can also deal with timeouts.

123
00:06:57.340 --> 00:07:03.009
所以这些函数中的每一个也将花费以毫秒为单位的时间，这表示，
So each of those functions will also take a time in milliseconds which says,

124
00:07:03.009 --> 00:07:09.475
这需要在这么多时间内成功完成，否则我们将失败。
this needs to complete successfully in this much time or we will fail it.

125
00:07:09.475 --> 00:07:14.319
在并行的情况下，还可以指定untiliseconds，
In the case of the parallel, you can also specify untiliseconds,

126
00:07:14.319 --> 00:07:16.290
这给出了可选集合。
which gives the optional set.

127
00:07:16.290 --> 00:07:18.829
在你被取消之前你还有这么多时间，所以
You got this much time until you get cancelled, so

128
00:07:18.829 --> 00:07:21.141
以防主要的工作提前结束。
just in case that the main ones finish early.

129
00:07:25.233 --> 00:07:27.279
&gt；&gt；Douglas Crockford：那么我们也可以处理取消。
&gt;&gt; Douglas Crockford: Then we can also deal with cancellation.

130
00:07:27.279 --> 00:07:30.949
因此任何请求者函数都可以有选择地返回Cancel函数，并且
So any requestor function can optionally return a cancel function, and

131
00:07:30.949 --> 00:07:35.829
调用Cancel函数时，它将尝试取消请求。
that cancel function when it is called will attempt to cancel the request.

132
00:07:35.829 --> 00:07:39.459
不能保证取消会在请求完成之前发生，
There's no guarantee that the cancellation will happen before the request completes,

133
00:07:39.459 --> 00:07:42.610
因为它们可以是网络竞赛和其他正在进行的事情。
because they can be network races and other things going on.

134
00:07:42.610 --> 00:07:44.810
所以它的目的是停止不必要的工作。
So it's intended to stop unnecessary work.

135
00:07:44.810 --> 00:07:46.959
这不是撤销，也不是回滚。
It's not an undo, it's not a rollback.

136
00:07:46.959 --> 00:07:49.750
此外，如果您正在尝试取消交易，对于
And also if you're trying to cancel a transaction, for

137
00:07:49.750 --> 00:07:53.360
例如，这不是您想要执行的取消操作。
example, this is not the cancellation that you want to do.
