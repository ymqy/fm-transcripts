WEBVTT

1
00:00:00.000 --> 00:00:04.246
[音乐]
[MUSIC]

2
00:00:04.246 --> 00:00:07.525
&gt；&gt；Douglas Crockford：所以，无论在哪里，我们都应该使用构图良好的元素
&gt;&gt; Douglas Crockford: So, we should use elements of good composition wherever

3
00:00:07.525 --> 00:00:11.830
适用，我认为我们应该，例如，在逗号后使用空格，
applicable and I think we should, for example, use a space after a comma,

4
00:00:11.830 --> 00:00:13.400
不是在逗号之前。
not before a comma.

5
00:00:13.400 --> 00:00:15.599
这就是我们在文学风格中的做法。
That's how we do it in literary style.

6
00:00:15.599 --> 00:00:20.129
在编程风格中，除非我们有明确的证据，否则我们应该做同样的事情
In a programming style, we should do the same thing unless we have clear evidence

7
00:00:20.129 --> 00:00:24.660
从这种差异中产生的利益。
of a benefit that occurs from that difference.

8
00:00:24.660 --> 00:00:29.530
因为我们已经把所有这些教育都锁定在我们的大脑里了
Because we already have all this education locked into our brains about

9
00:00:29.530 --> 00:00:30.940
这种模式。
those sorts of patterns.

10
00:00:30.940 --> 00:00:32.526
我们可以利用这一点让它变得更容易
We can use that to make it easier for

11
00:00:32.526 --> 00:00:35.640
编写我们的程序。&gt；&gt；Douglas Crockford：现在
writing our programs. &gt;&gt; Douglas Crockford: Now

12
00:00:35.640 --> 00:00:39.585
编程比编写需要更高的精确度，所以
programming requires significantly more precision than writing does, so

13
00:00:39.585 --> 00:00:41.759
我们需要更多的规则。
we'll need additional rules.

14
00:00:41.759 --> 00:00:45.810
例如，我建议我们使用空格来消除父母的歧义。
For example I propose that we use spaces to disambiguate parents.

15
00:00:45.810 --> 00:00:50.100
我们使用父代来指示语句的某些部分，以指示调用和
We use parents to indicate parts of statements, to indicate invocations and

16
00:00:50.100 --> 00:00:53.159
函数定义和分组。
function definitions and grouping.

17
00:00:53.159 --> 00:00:58.049
因此，为了帮助我们区分这些情况，我提出了一个规则。
And so to help us to distinguish those cases, I propose a rule.

18
00:00:58.049 --> 00:01:01.670
在函数名和左Paren之间没有空格。
There is no space between a function name and a left paren.

19
00:01:01.670 --> 00:01:07.489
所有其他名字之间总是有一个空格，还有一个左帕伦。
And there's always one space between all other names, and a left paren.

20
00:01:07.489 --> 00:01:10.549
所以，根据这个规则，这些形式都是错误的。
So, by that rule these forms are all wrong.

21
00:01:12.019 --> 00:01:16.789
例如，return不是这种语言中的函数。
For example, return is not a function in this language.

22
00:01:16.789 --> 00:01:19.489
所以，我们不应该让它看起来像一个函数调用。
So, we shouldn't make it look like a function invocation.

23
00:01:20.870 --> 00:01:25.069
现在你可以争辩，有人可以很容易地理解这些是什么意思，对吧？
Now you can argue, well someone could easily figure out what these mean, right?

24
00:01:25.069 --> 00:01:27.409
所以这无关紧要。
So it doesn't matter.

25
00:01:27.409 --> 00:01:31.768
但这很重要，因为你想让阅读的人
But it does matter because you want the person who's reading

26
00:01:31.768 --> 00:01:35.450
你的程序了解程序的作用。
your program to understand what the program does.

27
00:01:35.450 --> 00:01:39.703
你不希望他们在心理上纠正你和校对它，
You don't don't want them to be mentally correcting you and proofreading it,

28
00:01:39.703 --> 00:01:44.085
因为这会分散他们对更重要的工作的注意力
because that is distracting them from the much more important work of figuring out

29
00:01:44.085 --> 00:01:46.829
你的程序做了什么以及我们如何使它更好。
what your program does and how do we make it better.

30
00:01:49.450 --> 00:01:52.460
所以JavaScript的优点之一就是可以立即调用
So one of the good parts in JavaScript is the immediately invocable

31
00:01:52.460 --> 00:01:53.229
函数表达式。
function expression.

32
00:01:55.719 --> 00:01:59.420
今天晚些时候我们将更多地关注这些。
And we'll look a lot at these much more later today.

33
00:02:00.599 --> 00:02:04.030
不幸的是JavaScript的设计没有
And unfortunately the design of JavaScript didn't

34
00:02:04.030 --> 00:02:06.000
预期这是该语言的一个特性。
anticipate that this was a feature of the language.

35
00:02:07.400 --> 00:02:10.680
所以这里我们有一个函数语句，我们想要
So here we've got a function statement and we want to

36
00:02:10.680 --> 00:02:15.280
立即调用该函数，但我们不能，这是语法错误。
invoke that function immediately but we can't, it's a syntax error.

37
00:02:15.280 --> 00:02:19.060
有人认为我们可以将函数包装在括号中。
Someone figured out that we can wrap the function in parens.

38
00:02:19.060 --> 00:02:22.000
该函数现在是一个表达式位置，并且
That function is now an expression position and

39
00:02:22.000 --> 00:02:23.550
现在我们可以立即调用它。
now we can immediately invoke it.

40
00:02:24.979 --> 00:02:28.590
但是你有额外的父母
But then you've got the extra invoking parents

41
00:02:28.590 --> 00:02:30.659
像一对狗球一样挂在一端。
hanging off on the end like a pair of dog balls.

42
00:02:32.889 --> 00:02:35.449
所以我们可以做得更好
So we can do better for

43
00:02:35.449 --> 00:02:40.560
通过将整个调用表达式包装在括号中来实现读取器。
the reader by wrapping the entire invocation expression in parens.

44
00:02:40.560 --> 00:02:44.530
所以现在的目标不仅仅是将其传递给编译器，而是
So now the goal is not to just get it passed to the compiler, but

45
00:02:44.530 --> 00:02:48.819
给读者提供更多的信息，这样当读者看到
to give a little bit more information to the reader, so that when the reader sees

46
00:02:48.819 --> 00:02:54.780
一个函数和括号中的结束括号，这意味着一些东西。
a function and the closing parens wrapped in parentheses, that means something.

47
00:02:54.780 --> 00:02:58.189
这意味着这里重要的不是功能，
That means what's important here is not the function,

48
00:02:58.189 --> 00:02:59.459
这是函数的结果。
it's the result of the function.

49
00:03:00.729 --> 00:03:04.740
只需在一个空间中移动一对，
And just by moving the pair in one space over,

50
00:03:04.740 --> 00:03:08.729
我们给读者提供了更多的信息，这可能是有帮助的。
we give a little bit more information to the reader and that can be helpful.

51
00:03:08.729 --> 00:03:10.300
我们再一次免费做这件事。
And again we do it at no cost.

52
00:03:11.729 --> 00:03:16.199
所以你还记得之前我警告过你不要自动插入分号
So you remember earlier I warned you about automatic semicolon insertion

53
00:03:16.199 --> 00:03:20.000
有时它会把他们放在你认为不应该的地方
how it sometimes puts them in places where you think it shouldn't and

54
00:03:20.000 --> 00:03:23.139
有时不会把它们放在应该放的地方。
sometimes doesn't put them in places where it should.

55
00:03:23.139 --> 00:03:24.939
这就是其中之一。
This is one of those times.

56
00:03:24.939 --> 00:03:26.829
所以这里我们有一个表达式语句，
So here we've got an expression statement,

57
00:03:26.829 --> 00:03:32.469
有人省略了分号，以为系统会添加分号，但是
someone left out the semi-colon expecting that the system was going to add it but

58
00:03:32.469 --> 00:03:35.150
在这种情况下，系统不会添加它。
in this case the system is not going to add it.

59
00:03:35.150 --> 00:03:39.139
因此，我们不是将y赋值给x，而是将调用y的结果赋值为
So instead of assigning y to x, we're going to assign the result of calling y as

60
00:03:39.139 --> 00:03:41.908
函数传递另一个函数的结果作为其参数，
a function passing the result of the other function as its argument,

61
00:03:42.939 --> 00:03:48.159
这不是任何人都会读到的，但编译器就是这样读的。
which is not how anybody would read this, but that's how the compiler reads it.

62
00:03:48.159 --> 00:03:53.460
因此我建议永远不要依赖自动分号插入。
And so I recommend never rely on automatic semicolon insertion.

63
00:03:53.460 --> 00:03:56.000
始终将分号放在正确的位置。
Always put the semicolons in, and in the right place.

64
00:03:56.000 --> 00:04:00.310
如果你不确定它在哪里，你会很高兴告诉你他们去了哪里。
If you're not sure where that is, will be really happy to tell you where they go.

65
00:04:02.750 --> 00:04:07.490
JavaScript有一个with语句，该语句模仿Pascal with语句。
JavaScript has a with statement, which was modeled after the Pascal with statement.

66
00:04:07.490 --> 00:04:11.699
其目的是为了更容易地编写某些类型的函数访问或
Which was intended to make it easier to write certain kinds of function access or

67
00:04:11.699 --> 00:04:13.530
对象访问。
object accesses.

68
00:04:13.530 --> 00:04:15.909
不幸的是，它的设计不正确。
Unfortunately it wasn't designed correctly.

69
00:04:15.909 --> 00:04:18.230
所以这里我们有一个WITH语句和
So here we've got a with statement and

70
00:04:18.230 --> 00:04:21.920
在这里，我们有四个陈述，它展开成。
here we have four statements that it expands into.

71
00:04:21.920 --> 00:04:24.997
有人能猜出这其中哪一个可以吗？
Can anyone guess which of these that will do?

72
00:04:31.363 --> 00:04:32.319
&gt；&gt；道格拉斯·克罗克福德：有人吗？
&gt;&gt; Douglas Crockford: Anybody?

73
00:04:34.665 --> 00:04:36.509
&gt；&gt；扬声器2：可能是第一个。
&gt;&gt; Speaker 2: Maybe it's the first one.

74
00:04:36.509 --> 00:04:37.079
&gt；&gt；Douglas Crockford：实际上
&gt;&gt; Douglas Crockford: Actually it's

75
00:04:37.079 --> 00:04:37.889
一个骗人的问题。
a trick question.

76
00:04:37.889 --> 00:04:39.709
可能是他们中的任何一个。
It could be any of them.

77
00:04:39.709 --> 00:04:44.100
通过阅读程序，你不可能知道这些程序将会做什么。
There's no way you can tell by reading the program, which of these it's going to do.

78
00:04:44.100 --> 00:04:49.093
实际上，有可能每次执行该语句时，
And in fact, it's possible that every time that statement executes,

79
00:04:49.093 --> 00:04:51.100
可能是不同的。
it could be a different one.

80
00:04:51.100 --> 00:04:52.529
&gt；&gt；扬声器2：[听不到]O.&gt；&gt；Douglas Crockford：是的，
&gt;&gt; Speaker 2: [INAUDIBLE] O. &gt;&gt; Douglas Crockford: Yeah,

81
00:04:52.529 --> 00:04:53.069
这取决于O。
it depends on O.

82
00:04:54.439 --> 00:04:59.542
因为它不能知道O是什么，所以没有办法阅读程序。
And since it can't know what O is at time, there's no way to read the program.

83
00:04:59.542 --> 00:05:02.781
所以我们希望有信心我们的程序是完美的，但你怎么知道
So we want to be confident that our programs are perfect, but how can you know

84
00:05:02.781 --> 00:05:05.615
如果你连程序都看不懂，你的程序就是完美的
that your program is perfect if you can't even read the program and

85
00:05:05.615 --> 00:05:06.439
知道它是干什么的吗？
know what it does?

86
00:05:07.720 --> 00:05:11.889
因此，出于这个原因，我建议永远不要使用WITH语句。
So for that reason, I recommend don't ever use the with statement.

87
00:05:11.889 --> 00:05:13.100
你不需要它。
You don't need it.

88
00:05:13.100 --> 00:05:13.889
别管了。
Leave it out.

89
00:05:13.889 --> 00:05:16.139
没有它你会过得更好。
You're better off without it.

90
00:05:16.139 --> 00:05:19.160
现在WITH语句有很多非常聪明的用法。
Now there are a lot of very clever uses for the with statement.

91
00:05:19.160 --> 00:05:21.850
以及发现这些巧妙用途的人
And the people who discover these clever uses

92
00:05:21.850 --> 00:05:24.930
认为他们应该有权使用它，因为它非常有用。
think that they should be entitled to use it, because it's so useful.

93
00:05:26.319 --> 00:05:28.449
但我不是说它没用
But I'm not saying it isn't useful,

94
00:05:28.449 --> 00:05:30.480
我是说，从来没有一个案例不让人困惑。
I'm saying there is never a case where it isn't confusing.

95
00:05:31.610 --> 00:05:33.449
而困惑是敌人。
And confusion is the enemy.

96
00:05:34.509 --> 00:05:35.829
必须避免混淆。
Confusion must be avoided.

97
00:05:35.829 --> 00:05:39.060
混淆是当一个程序看起来做一件事并且
Confusion is when a program appears to do one thing and

98
00:05:39.060 --> 00:05:40.659
它实际上做了其他的事情。
it actually does something else.

99
00:05:40.659 --> 00:05:43.420
另一个词，虫子。
Another word for that, bug.

100
00:05:43.420 --> 00:05:44.810
我们不想要虫子。
We don't want bugs.

101
00:05:44.810 --> 00:05:49.560
所以我想尽可能地消除混乱的根源
So I want to eliminate as many sources of confusion as possible

102
00:05:49.560 --> 00:05:52.250
因为我在努力达到完美。
because I'm trying to attain perfection.

103
00:05:52.250 --> 00:05:57.199
我可能永远也到不了那里，但全能的上帝，那就是我要去的地方，
I may never get there but God Almighty that's where I'm going,

104
00:05:57.199 --> 00:05:58.980
我想尝试制作完美的程序。
I wanna try and make programs that are perfect.

105
00:06:00.529 --> 00:06:03.019
JavaScript有一个双等运算符。
JavaScript has a double equal operator.

106
00:06:03.019 --> 00:06:05.709
我对此有问题，我认为它应该被称为平等。
I have problems with that, I think it should've been called equal.

107
00:06:05.709 --> 00:06:08.250
但这是汤普森对我们做的另一件事。
But that's another thing that Thompson did to us.

108
00:06:10.209 --> 00:06:15.420
但不幸的是，比汤姆森所做的更糟糕的是，它确实是类型强制的。
But unfortunately even worse than what Thomson did, it does type coercion.

109
00:06:15.420 --> 00:06:20.670
因此，首先它看一下它的两种类型的论点，并且
So first it looks at the two types of its arguments, and

110
00:06:20.670 --> 00:06:23.139
如果它们不是相同的类型，它将转换一个或
if they're not the same type it will convert one or

111
00:06:23.139 --> 00:06:27.069
将它们都转换为另一种类型，然后比较该结果。
both of them to another type and then compare that result.

112
00:06:27.069 --> 00:06:33.420
结果，你得到了假阳性，这也意味着你失去了传递性。
And as a result, you get false positives and it also means you lose transitivity.

113
00:06:33.420 --> 00:06:36.579
传递性意味着如果两个事物等于同一事物，
Transitivity means that if two things are equal to the same thing,

114
00:06:36.579 --> 00:06:37.879
那么它们应该是相等的。
then they should be equal to each other.

115
00:06:38.879 --> 00:06:40.790
这里不是这样的。
That's not the case here.

116
00:06:40.790 --> 00:06:44.925
所以当JavaScript被开发出来时，
So when JavaScript was developed,

117
00:06:44.925 --> 00:06:48.930
这被认为是一个好主意。
this was thought to be a good idea.

118
00:06:48.930 --> 00:06:50.620
结果不是。
Turns out it's not.

119
00:06:50.620 --> 00:06:53.980
所以语言的发明者意识到他犯了一个错误。
So the inventor of the language realized he'd made a mistake.

120
00:06:53.980 --> 00:06:57.699
所以当它被标准化时，他去了标准化委员会
So when it went to be standardized, he went to the standardization committee and

121
00:06:57.699 --> 00:07:01.410
说，我搞砸了双倍的平等，但我知道它的修复。
said, I screwed up the double equal but I know the fix for it.

122
00:07:01.410 --> 00:07:03.660
我们只是让它不做类型强制。
We just have it not do type coercion.

123
00:07:03.660 --> 00:07:08.649
我已经在Netscape代码库中测试了它
I've already tested it in the Netscape codebase and

124
00:07:08.649 --> 00:07:12.079
它实际上运行得更快，而且都更小，所以这很好。
it actually runs a little faster and it's all smaller, so that's good.

125
00:07:12.079 --> 00:07:12.959
这是个很大的胜利。
It's a big win.

126
00:07:12.959 --> 00:07:14.399
所以我们开始吧，对吧。
So let's do this, right.

127
00:07:14.399 --> 00:07:19.160
委员会说不，我们要保持现状。
And the committee said no, no, we're gonna keep it the way it is.

128
00:07:19.160 --> 00:07:21.769
但作为折衷方案，我们会给你三倍的优惠。
But we'll offer you triple equal as a compromise.

129
00:07:23.269 --> 00:07:27.762
所以，很多人不喜欢三倍相等，因为
So, a lot of people don't like triple equal because instead of

130
00:07:27.762 --> 00:07:29.213
得走了[噪音]。
having to go [NOISE].

131
00:07:29.213 --> 00:07:35.829
现在你必须去[噪音]并说，是的，三倍相等。
You now have to go [NOISE] and say, yeah triple equal.

132
00:07:35.829 --> 00:07:39.911
始终使用三重相等。&gt；&gt；扬声器2：JSLint。
Always use triple equal. &gt;&gt; Speaker 2: There's JSLint.

133
00:07:39.911 --> 00:07:40.766
&gt；&gt；Douglas Crockford：是的，JSLint Tell
&gt;&gt; Douglas Crockford: Yeah, JSLint tell

134
00:07:40.766 --> 00:07:42.129
肯定是你。
you for sure.

135
00:07:42.129 --> 00:07:45.744
JSLint将推荐这种三重相等。&gt；&gt；扬声器2：会修复它吗？
JSLint will recommend this triple equal. &gt;&gt; Speaker 2: Will fix it?

136
00:07:45.744 --> 00:07:46.481
&gt；&gt；Douglas Crockford：它不会修复它，
&gt;&gt; Douglas Crockford: It won't fix it,

137
00:07:46.481 --> 00:07:47.723
你必须修正你自己的代码。
you have to fix your own code.

138
00:07:47.723 --> 00:07:53.778
[笑]但是JSLint很高兴告诉你可怕的事情
[LAUGH] But JSLint is very happy to tell you about the terrible

139
00:07:53.778 --> 00:08:00.029
你做过的事，但要靠你来弥补。
things you've done but it's on you to make it right.

140
00:08:00.029 --> 00:08:01.339
理应如此。
As it should be.

141
00:08:01.339 --> 00:08:03.959
现在有一些案例。
Now there are some cases.

142
00:08:03.959 --> 00:08:09.860
因为那个双等号意外地做了你想要的。
Because that double equal accidentally does exactly what you want.

143
00:08:09.860 --> 00:08:11.480
那你应该用它吗？
Should you use it then?

144
00:08:11.480 --> 00:08:12.300
我建议不要。
I recommend no.

145
00:08:12.300 --> 00:08:13.240
那就别用了。
Don't even use it then.

146
00:08:14.660 --> 00:08:17.810
因为你不想让读你代码的人问，
Because you don't want the person who's reading your code to have to ask,

147
00:08:17.810 --> 00:08:21.060
他有没有发现Double Equity真正做到了你想要的？
did he find the one case where double equal actually does exactly what you want?

148
00:08:21.060 --> 00:08:22.233
还是他只是无能？
Or is he just incompetent?

149
00:08:22.233 --> 00:08:26.259
[笑]你不希望人们在阅读时问这个问题
[LAUGH] You don't want people asking that question when they're reading

150
00:08:26.259 --> 00:08:26.910
你的密码，对吧？
your code, right?

151
00:08:26.910 --> 00:08:29.439
你想让他们明白它在做什么
You want them to understand what it's doing and

152
00:08:29.439 --> 00:08:32.250
去吧，是的，这是写得很好的东西，我可以让它变得更好。
go, yeah this is well written stuff, I can make this better.

153
00:08:34.460 --> 00:08:38.090
因此，如果语言的某个特性有时会有问题，并且
So if there is a feature of the language that is sometimes problematic, and

154
00:08:38.090 --> 00:08:41.024
如果它可以被另一个更可靠的特征代替，
if it could be replaced by another feature that is more reliable,

155
00:08:41.024 --> 00:08:44.259
然后总是使用更可靠的功能。
then always use the more reliable feature.

156
00:08:44.259 --> 00:08:51.384
这是一个令人惊讶的有争议的声明，但我认为它显然是真实的。
This is a surprisingly controversial statement but I think it's obviously true.

157
00:08:51.384 --> 00:08:55.100
这是在S5中添加的一个特性，多行字符串文字。
So this is a feature that was added in the s5, multiline string literals.

158
00:08:55.100 --> 00:08:58.840
还有许多其他语言以完全相同的方式完成此操作。
There are lots of other languages that do this in exactly the same way.

159
00:08:58.840 --> 00:08:59.830
我觉得这是个错误。
I think it was a mistake.

160
00:09:01.769 --> 00:09:05.720
首先，因为它打破了缩进，因为延续必须是
First because it breaks indentation because the continuation has to be

161
00:09:05.720 --> 00:09:06.554
在边上。
over on the margin.

162
00:09:06.554 --> 00:09:11.636
缩进对于理解我们的组成非常重要
And indentation is really important for understanding the composition of our

163
00:09:11.636 --> 00:09:17.418
程序正确，因为我们有嵌套的函数，嵌套的对象，嵌套的块。
programs right, because we've got nested functions nested objects, nested blocks.

164
00:09:17.418 --> 00:09:22.119
嵌套非常重要，这会破坏缩进。
That nesting is critically important and this breaks indentation.

165
00:09:22.119 --> 00:09:26.360
而且它确实会损害可读性，这是一件坏事。
And it does impair readability and that's a bad thing.

166
00:09:26.360 --> 00:09:32.809
但更糟糕的是，这个语句正确的地方存在语法风险。
But worse than that, there's this syntax hazard where this statement is correct.

167
00:09:32.809 --> 00:09:34.519
这是一个语法错误。
This one is a syntax error.

168
00:09:34.519 --> 00:09:36.096
有人能在第二秒中发现错误吗？
Can anybody spot the error in the second

169
00:09:36.096 --> 00:09:40.936
声明？&gt；&gt；扬声器3：有一个空格在
statement? &gt;&gt; Speaker 3: There's a space at

170
00:09:40.936 --> 00:09:44.179
第二行的开头？&gt；&gt；Douglas Crockford：没有。
the beginning of the second line? &gt;&gt; Douglas Crockford: Nope.

171
00:09:44.179 --> 00:09:46.716
&gt；&gt；扬声器2：指向\的空格。
&gt;&gt; Speaker 2: Space Towards the \.

172
00:09:46.716 --> 00:09:47.601
&GT；&GT；道格拉斯·克罗克福德：是的，没错，
&gt;&gt; Douglas Crockford: Yeah, exactly,

173
00:09:47.601 --> 00:09:50.799
这里有个空位。&gt；&gt；扬声器2：你看不到吗？
there's a space right here. &gt;&gt; Speaker 2: Can't you see it?

174
00:09:50.799 --> 00:09:51.328
&gt；&gt；Douglas Crockford：是的，
&gt;&gt; Douglas Crockford: Yeah,

175
00:09:51.328 --> 00:09:54.684
一旦你指出它就很明显了，对吧。
it's obvious once you point it out, right.

176
00:09:54.684 --> 00:09:56.669
但我正在努力制作完美的程序。
But I'm trying to make programs that are perfect.

177
00:09:56.669 --> 00:10:01.440
我想看一眼就走，是的，这是完美的，但我不能。
I wanna be a look at and go, yes, that is perfect, and I can't.

178
00:10:01.440 --> 00:10:03.600
所以我不想用这个。
So I don't wanna use this.

179
00:10:03.600 --> 00:10:08.250
我们花了很多时间在大海捞针。
We spend a lot of our time searching for the needle in the haystack.

180
00:10:08.250 --> 00:10:11.399
如果我们的程序看起来不那么像干草堆，我们可以缩短这段时间。
We can cut that time down if our programs look less like haystacks.

181
00:10:12.629 --> 00:10:15.230
因此，避免难以区分的形式
So, avoid forms that are difficult to distinguish from common

182
00:10:15.230 --> 00:10:19.687
错误。&gt；&gt；Douglas Crockford：这是另一个
errors. &gt;&gt; Douglas Crockford: This is another one

183
00:10:19.687 --> 00:10:21.330
因为汤普森。
due to Thompson.

184
00:10:21.330 --> 00:10:26.259
他允许您将赋值表达式放入
He allowed you to put assignment expressions in

185
00:10:27.350 --> 00:10:30.230
if语句的条件位置。
condition position of an if statement.

186
00:10:30.230 --> 00:10:33.860
Java做到了这一点，Java说你必须放一些计算结果为布尔值的东西。
Java got this right, Java says you have to put something that evaluates to a boolean.

187
00:10:35.940 --> 00:10:38.620
但后来JavaScript搞错了，回到了C方式
But then JavaScript got it wrong and went back to the C way and

188
00:10:38.620 --> 00:10:40.049
说你可以在里面放任何表情。
said you can put any expression in there.

189
00:10:41.120 --> 00:10:44.100
所以这句话看起来和这句话一样。
So this statement appears to do what this one does.

190
00:10:45.220 --> 00:10:46.559
但它实际上和这个一样。
But it actually does what this one does.

191
00:10:48.210 --> 00:10:50.994
所以你永远不会想写这个。
And so you don't ever wanna write this one.

192
00:10:50.994 --> 00:10:54.769
你想弄清楚你指的是哪一个然后写出来。
You wanna figure out which one you mean and write that instead.

193
00:10:54.769 --> 00:10:58.740
使你的程序看起来像它们所做的那样，而不是让你的读者猜测，
Make your programs look like what they do and don't make your reader guess,

194
00:10:58.740 --> 00:10:59.820
你做的对不对。
did you get it right or not.
