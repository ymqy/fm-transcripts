WEBVTT

1
00:00:00.000 --> 00:00:03.947
[音乐]
[MUSIC]

2
00:00:03.947 --> 00:00:06.610
&gt；&gt；Speaker 1：JavaScript在语法上是C家族的成员。
&gt;&gt; Speaker 1: JavaScript is syntactically a member of the C family.

3
00:00:09.041 --> 00:00:10.702
&gt；&gt；扬声器1：我们有标识符
&gt;&gt; Speaker 1: We've got identifiers which

4
00:00:10.702 --> 00:00:13.696
可以从字母或下划线或美元符号开始。
can start with letters or underbars or dollar signs.

5
00:00:13.696 --> 00:00:19.321
我建议不要以下划线或以下划线开始或结束您的属性名称
I recommend not starting or ending your property names with underbars or

6
00:00:19.321 --> 00:00:23.291
美元符号，但它们似乎真的很受欢迎。
dollar signs, but they seem to be really popular.

7
00:00:23.291 --> 00:00:26.998
美元符号被添加到语言中，以便于机器使用
Dollar sign was added to the language for the benefit of machines for

8
00:00:26.998 --> 00:00:29.210
宏处理器和代码生成器，
macro processors and code generators,

9
00:00:29.210 --> 00:00:33.241
希望能够创建名称的东西可以保证它们不会
things that wanted to be able to create names be guaranteed they wouldn't

10
00:00:33.241 --> 00:00:37.750
与你的名字冲突，他们可以使用美元符号，这使他们安全。
conflict with your names that they could use a dollar sign and that made them safe.

11
00:00:37.750 --> 00:00:42.600
不幸的是，一些孩子发现你可以有一个叫做美元的函数
Unfortunately, some kids found out that you could have a function called dollar

12
00:00:42.600 --> 00:00:44.036
然后就疯狂了。
and went crazy with it.

13
00:00:44.036 --> 00:00:46.558
所以，现在到处都是美元函数。
So, dollar functions are all over the place now.

14
00:00:50.076 --> 00:00:52.246
&gt；&gt；扬声器1：我们有两种格式
&gt;&gt; Speaker 1: We have both formats for

15
00:00:52.246 --> 00:00:53.877
做评论。
doing comments.

16
00:00:53.877 --> 00:00:57.585
我建议只使用这些斜线格式，
I recommend using just these slashslash line format,

17
00:00:57.585 --> 00:01:02.262
因为有时我们想使用注释来注释代码和
because sometimes we want to use comments for commenting out code and

18
00:01:02.262 --> 00:01:06.956
正则表达式文字可以包含星形斜杠和斜杠。
regular expression literals can contain starslash and slashstar.

19
00:01:06.956 --> 00:01:10.414
所以怪异可能会发生，
So weirdness can happen,

20
00:01:10.414 --> 00:01:15.132
如果您使用的是块注释。
if you're using a block comments.

21
00:01:15.132 --> 00:01:21.299
我们有与您期望在类C语言中看到的运算符相同的一组运算符。
We have the same set of operators that you would expect to see in a C-like language.

22
00:01:21.299 --> 00:01:24.210
其中有几个工作方式略有不同，您需要了解这一点。
A few of them work a little bit differently that you need to be aware of.

23
00:01:25.299 --> 00:01:31.060
语言中的一个大错误是加运算符既做加法又做加法
One big mistake in the language is that the plus operator does both addition and

24
00:01:31.060 --> 00:01:32.569
串联。
concatenation.

25
00:01:32.569 --> 00:01:35.421
这是JavaScript从Java中学到的一个坏习惯。
This is a bad habit JavaScript learn from Java.

26
00:01:35.421 --> 00:01:38.141
在Java中，它并没有那么糟糕，因为它是强类型的。
In Java, it's not so bad, because it strongly typed.

27
00:01:38.141 --> 00:01:40.885
所以，你可以预测它会做哪一个。
So, you can predict which one it's going to do.

28
00:01:40.885 --> 00:01:42.158
JavaScript是松散类型的。
JavaScript is loosely typed.

29
00:01:42.158 --> 00:01:46.866
所以直到你去做加号，它才会看操作数。
So it's not until you go to do the plus, there it looks at the operands.

30
00:01:46.866 --> 00:01:50.796
如果它们都是数字，它会将它们相加，否则，
And if they're both numbers it'll add them, otherwise,

31
00:01:50.796 --> 00:01:55.835
它会将它们都转换为字符串并将它们连接起来，这是不好的。
it'll convert them both into strings and concatenate them, which is bad.

32
00:01:55.835 --> 00:01:57.894
例如，在Web应用程序中，
For example, in a web application,

33
00:01:57.894 --> 00:02:02.278
当您要求用户在字段中键入数字时，您可能有一个表单域，
you might have a form field when you ask the user to type a number into the field,

34
00:02:02.278 --> 00:02:05.478
然后你想把那个号码拿出来，再加上一些东西。
you then wanna take that number out and add to something.

35
00:02:05.478 --> 00:02:09.924
忘记了从表单元素中获取的值总是
Forgetting that the value you take out of a form element is always

36
00:02:09.924 --> 00:02:14.467
一个字符串，尽管它周围的一切都说，它是一个数字。
a string even though everything around it says, it's a number.

37
00:02:14.467 --> 00:02:19.286
这真的是一个很大的困惑的来源，你不会得到一个错误，你只是得到
That's a really big source of confusion and you don't get an error you just get

38
00:02:19.286 --> 00:02:25.387
极其恶劣的行为。&gt；&gt；扬声器1：所以，我们可以转换和
extremely bad behavior. &gt;&gt; Speaker 1: So, we can convert and

39
00:02:25.387 --> 00:02:29.889
我们可以使用加酉运算符将字符串转换为数字。
we can use the plus unitary operator to convert strings into numbers.

40
00:02:29.889 --> 00:02:32.687
所以，你经常想这样做是作为一种防御的事情。
And so, you often wanna do that is as a defensive thing.

41
00:02:32.687 --> 00:02:37.454
如果你有一个值，你想要添加它，但你担心它可能不会
If you've got a value and you want to add it and you're concerned that it might not

42
00:02:37.454 --> 00:02:41.676
是一个数字，你可以在做加法之前强制它是一个数字。
be a number, you can coerce it to be a number before you do the addition.

43
00:02:41.676 --> 00:02:45.461
但如果你这样做了，我建议在它周围加上括号。
But if you do that, I recommend putting parens around it.

44
00:02:45.461 --> 00:02:47.855
因为否则，你就会有两个相邻的加号，
Because otherwise, you end up with two plusses next to each other,

45
00:02:47.855 --> 00:02:53.389
这看起来像是另一个问题。&gt；&gt；扬声器1：我们
which can look like another problem. &gt;&gt; Speaker 1: We

46
00:02:53.389 --> 00:02:55.394
没有正式的整数。
don't have integers formally.

47
00:02:55.394 --> 00:02:59.067
因此可以使用除法运算符除两个整数，但是
So you can divide two integers using the divide operator, but

48
00:02:59.067 --> 00:03:02.038
不能保证得到整数结果。
you're not guaranteed to get an integer result.

49
00:03:02.038 --> 00:03:03.798
所以，你需要做好准备。
So, you need to be prepared for that.

50
00:03:03.798 --> 00:03:07.492
因为它是二进制浮点，甚至浮点结果，你得到
And because it's binary floating point, even the floating point result, you get

51
00:03:07.492 --> 00:03:13.068
可能不是你所期待的。&gt；&gt；扬声器1：百分比
might not be the one you would expect. &gt;&gt; Speaker 1: The percent

52
00:03:13.068 --> 00:03:17.670
符号运算符是余数运算符而不是模运算符，
sign operator is the remainder operator not the modulo operator,

53
00:03:17.670 --> 00:03:22.122
这是一个遗憾，因为我认为模是更有用的。
which is a shame, because I think modulo is the more useful one.

54
00:03:22.122 --> 00:03:25.865
不同之处在于哪一方签字
The difference is in which sign it

55
00:03:25.865 --> 00:03:30.739
用途。&gt；&gt；演讲者1：我们已经谈过了
uses. &gt;&gt; Speaker 1: We already talked

56
00:03:30.739 --> 00:03:33.498
关于双等和它的问题。
about double equal and the problems with it.

57
00:03:33.498 --> 00:03:37.574
我建议你总是使用三重相等代替，只是因为有这样的
I recommend you always use triple equal instead, just because there are so

58
00:03:37.574 --> 00:03:40.305
里面有很多奇怪的东西，是人们所期待的。
many weirdness in it, things that are expected.

59
00:03:40.305 --> 00:03:42.545
YouTube上有一个叫Wat的迷因。
There's a meme on YouTube called WAT.

60
00:03:42.545 --> 00:03:43.418
W-A-T
W-A-T.

61
00:03:43.418 --> 00:03:45.170
有人看到Wat了吗？
Has anybody seen WAT?

62
00:03:45.170 --> 00:03:47.194
是啊，这是一场闹剧。
Yeah, it's a crackup.

63
00:03:47.194 --> 00:03:49.389
最主要的是，它在玩这个游戏。
And mostly, it's playing fun with this.

64
00:03:49.389 --> 00:03:53.736
他们拿了两样东西，这两样差别很大，而且是它们的两倍
They take two things, which are wildly different and double equal them and

65
00:03:53.736 --> 00:03:55.680
然后说，真的和他们去哪里？
then says, true and they go WAT?

66
00:03:55.680 --> 00:03:56.418
他们会大笑一场。
And they get a big laugh.

67
00:03:58.579 --> 00:03:59.740
所以，不要使用double equals。
So, don't use double equal.

68
00:04:01.740 --> 00:04:06.840
逻辑AND运算符的工作方式与Java略有不同，
With the logical and operator works a little differently than it does in Java,

69
00:04:06.840 --> 00:04:11.877
因为操作数不需要是金条，它们只需要是牛市。
because the operands do not need to be bullion, they only need to be bullish.

70
00:04:11.877 --> 00:04:16.245
因此，如果第一个操作数为true，则结果是第二个操作数的值。
So if the first operand is truthy, the result is the value of the second operand.

71
00:04:16.245 --> 00:04:19.533
否则，它是第一个操作数的结果。
Otherwise, it's the result of the first operand.

72
00:04:19.533 --> 00:04:24.793
但是它确实做了短路，所以第二个操作数
It does do the short circuiting though, so the second operand

73
00:04:24.793 --> 00:04:30.153
仅当第一个错误且符合逻辑或时才进行评估
will only be evaluated if the first one was faulty and logical or

74
00:04:30.153 --> 00:04:36.331
工作方式类似。&gt；&gt；扬声器1：感叹号是
works in a similar way. &gt;&gt; Speaker 1: The exclamation point is

75
00:04:36.331 --> 00:04:40.492
逻辑NOT运算符，如果操作数为true，则结果为false。
the logical not operator, if the operand is truthy than the result is false.

76
00:04:40.492 --> 00:04:42.492
否则，结果为真。
Otherwise, the result is true.

77
00:04:42.492 --> 00:04:46.959
如果你有bang，bang两次，它会把看涨的值变成布尔值。
If you have bang, bang twice, it will turn a bullish value into a Boolean.

78
00:04:50.257 --> 00:04:52.052
&gt；&gt；扬声器1：我们有按位运算符，
&gt;&gt; Speaker 1: We have bitwise operators,

79
00:04:52.052 --> 00:04:53.632
但我们没有INT
but we don't have ints.

80
00:04:53.632 --> 00:04:58.468
所以工作的方式是我们采用64位的二进制浮点，
So the way that works is we'll take the 64-bit binary floating point,

81
00:04:58.468 --> 00:05:01.209
将其转换为32位有符号整数。
turn it into a 32-bit signed integer.

82
00:05:01.209 --> 00:05:04.403
对它做恶作剧，然后把它转换回来。
Do the nasty to it and then convert it back.

83
00:05:04.403 --> 00:05:07.382
所以在一些语言中，你会看到人们在做转换，
So in some languages, you'll see people doing a shift,

84
00:05:07.382 --> 00:05:10.435
因为他们认为它会比乘法快。
because they think it's gonna be faster than a multiply.

85
00:05:10.435 --> 00:05:13.733
即使在那些语言中也不应该这样做，因为编译器足够聪明。
You shouldn't do that even in those languages, cuz compilers are smart enough.

86
00:05:13.733 --> 00:05:15.738
你应该写你想写的东西，所以
You should write the thing that you intend, so

87
00:05:15.738 --> 00:05:19.093
阅读程序的人会知道应该发生什么。
that someone reading the program will know what supposed to be happening.

88
00:05:19.093 --> 00:05:22.317
编译器将挑选出最快的方法来做这件事。
The compiler will sort out the fastest way to do it.

89
00:05:22.317 --> 00:05:23.954
但在这种语言中，绝对的，
But in this language, definitely,

90
00:05:23.954 --> 00:05:26.870
你不能通过错误的方式来提高速度。
you're not getting speed improvement by doing it the wrong way.
