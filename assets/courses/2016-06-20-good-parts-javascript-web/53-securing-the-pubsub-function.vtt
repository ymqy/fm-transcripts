WEBVTT

1
00:00:00.000 --> 00:00:03.754
[音乐]
[MUSIC]

2
00:00:03.754 --> 00:00:05.503
&gt；&gt；Douglas Crockford：预防人类的最简单的攻击
&gt;&gt; Douglas Crockford: The simplest attack to prevent people

3
00:00:05.503 --> 00:00:10.493
从获得出版物，&gt；&gt；Douglas Crockford：这是我们
from getting publications, &gt;&gt; Douglas Crockford: Is this one where we

4
00:00:10.493 --> 00:00:13.195
简单地订阅什么都不用。
simply subscribe with nothing.

5
00:00:13.195 --> 00:00:17.420
这意味着我们将把未定义的推送到订阅者数组上。
So that means we're gonna push undefined on to the subscribers array.

6
00:00:17.420 --> 00:00:21.000
所以当我们做这个循环的时候，对吗？
So when we go to do this loop, kaboom right?

7
00:00:21.000 --> 00:00:26.036
所以每个跟在我们后面的人都不会收到任何信息。
And so everybody after us doesn't get any messages sent.

8
00:00:26.036 --> 00:00:28.117
那你怎么解决这个问题？
So how would you fix that?

9
00:00:28.117 --> 00:00:31.524
&gt；&gt；演讲者2：这不是问题，因为在你之前的人
&gt;&gt; Speaker 2: That's not the problem though, because the people before you

10
00:00:31.524 --> 00:00:33.286
仍然得到它，所以-&gt；&gt；Douglas Crockford：对，但是
still get it, so- &gt;&gt; Douglas Crockford: Right, but

11
00:00:33.286 --> 00:00:36.805
之后的人不会这样做，所以-&gt；&gt；演讲者2：问题是我们试图
the people after don't, and so- &gt;&gt; Speaker 2: The problem is we try to

12
00:00:36.805 --> 00:00:38.579
防止任何人-&gt；&gt；Douglas Crockford：我们必须确保
prevent anyone- &gt;&gt; Douglas Crockford: We have to make sure

13
00:00:38.579 --> 00:00:40.308
每个人都会收到每一条信息。
that everybody receives every message.

14
00:00:43.079 --> 00:00:46.439
如果一个人得到了它，我们不能说我们成功了，但是
If one person gets it we can't say that we've succeeded, but

15
00:00:46.439 --> 00:00:47.899
每个人都必须得到它。
everybody has to get it.

16
00:00:47.899 --> 00:00:51.079
&gt；&gt；扬声器3：你可以对我的标签进行类型检查，对吗？
&gt;&gt; Speaker 3: You can just do a type check for your tag on me, right?

17
00:00:51.079 --> 00:00:52.079
&GT；&GT；道格拉斯·克罗克福德：我们可以这样做。
&gt;&gt; Douglas Crockford: We could do that.

18
00:00:52.079 --> 00:00:57.179
在这里，我们可以做类型检查，如果类型等于函数。
Up here, we could do type check you know, if type of equals function.

19
00:00:57.179 --> 00:01:01.479
&gt；&gt；扬声器4：您应该用里面的内容重新包装您的呼叫。
&gt;&gt; Speaker 4: You should be re-wrapping your call in a try catch with what inside.

20
00:01:01.479 --> 00:01:05.349
&gt；&gt；Douglas Crockford：是的，因为如果他们要传递任何函数
&gt;&gt; Douglas Crockford: Yeah, that's it because if they were to pass any function

21
00:01:05.349 --> 00:01:10.373
这抛出它不会这样做，所以-&gt；&gt；扬声器5：so pubsub
that throws then it wouldn't do that, so- &gt;&gt; Speaker 5: So pubsub

22
00:01:10.373 --> 00:01:13.001
是我们给予所有人的东西-&gt；&gt；Douglas Crockford：我们给予
is something we give out to all the- &gt;&gt; Douglas Crockford: We give

23
00:01:13.001 --> 00:01:15.111
对于所有第三方，他们都共享该实例。
to all the third parties, they all share that instance.

24
00:01:15.111 --> 00:01:17.432
&gt；&gt；扬声器5：所以在这种情况下，它实际上有点不信任用户输入。
&gt;&gt; Speaker 5: So really in this case it's kind of don't trust user input.

25
00:01:19.811 --> 00:01:21.460
&gt；&gt；扬声器5：他们可以发送给订阅者，但是
&gt;&gt; Speaker 5: They can send to subscribers but

26
00:01:21.460 --> 00:01:24.650
他们可以向您发送一个作为订阅者的函数，一个空字符串。
they can send you a function as subscriber, an empty string.

27
00:01:24.650 --> 00:01:28.118
&gt；&gt；Douglas Crockford：对，好吧，在这种情况下，它可能是一个恶意的失败，但是
&gt;&gt; Douglas Crockford: Right, well, in this case it could be a malicious failure but

28
00:01:28.118 --> 00:01:30.859
也可能是意外故障。
it could also be an accidental failure.

29
00:01:30.859 --> 00:01:33.370
有些人可能会简单地错误地将其命名为
Someone might simply call it incorrectly and

30
00:01:33.370 --> 00:01:36.180
我们不希望整个系统因此而失败。
we don't want the whole system to fail because of that.

31
00:01:36.180 --> 00:01:39.689
所以这就是try接球的目的，对吗？
So this is what try catches for, right?

32
00:01:39.689 --> 00:01:45.079
所以我们可以简单地抓住这个东西，忽略错误，然后继续处理。
So we can simply catch the thing, ignore the error and we'll keep on processing.

33
00:01:45.079 --> 00:01:46.969
所以，这很好。
So, that's good.

34
00:01:46.969 --> 00:01:50.829
所以我们现在准备好接受你的第二次观察了。
So we're now ready for your second observation.

35
00:01:50.829 --> 00:01:52.560
&gt；&gt；Speaker 4：将SUBSCRIBE设置为NULL。
&gt;&gt; Speaker 4: Set subscribe to null.

36
00:01:52.560 --> 00:01:58.469
&gt；&gt；Douglas Crockford：是的，所以我们可以篡改pubsub实例本身
&gt;&gt; Douglas Crockford: Yeah, so we can tamper with the pubsub instance itself and

37
00:01:58.469 --> 00:02:00.150
我们可以删除属性。
we can delete the properties.

38
00:02:02.340 --> 00:02:07.709
将它们之一更改为undefined或null，或用其他函数替换它们
Change either of them to undefined or null or replace them with other functions

39
00:02:07.709 --> 00:02:13.680
这可能会做一些更阴险的事情，比如只允许某些人订阅或
that could do things more insidious like allow only certain people to subscribe or

40
00:02:13.680 --> 00:02:16.530
允许人们认为他们订阅了，而他们没有订阅。
allow people to think they subscribed when they didn't.

41
00:02:16.530 --> 00:02:18.536
或在发布消息时对其进行过滤，或
Or to filter the messages when they publish, or

42
00:02:18.536 --> 00:02:20.199
为了在消息发布时篡改消息，
to tamper with the messages when they publish,

43
00:02:20.199 --> 00:02:24.340
在这个主题上有无数可怕的变化。
there's an infinite number of terrible variations on this theme.

44
00:02:26.069 --> 00:02:27.849
那你怎么解决这个问题？
So how would you fix that?

45
00:02:27.849 --> 00:02:31.330
&gt；&gt；扬声器6：使用服务器。
&gt;&gt; Speaker 6: Use a server.

46
00:02:31.330 --> 00:02:32.110
&GT；&GT；道格拉斯·克罗克福德：你说什么？
&gt;&gt; Douglas Crockford: I'm sorry?

47
00:02:32.110 --> 00:02:35.627
&gt；&gt；扬声器4：所以你不会真的公开发布所以
&gt;&gt; Speaker 4: So you aren't gonna really expose publish so

48
00:02:35.627 --> 00:02:41.207
非常像，&gt；&gt；扬声器4：您是
much as, &gt;&gt; Speaker 4: You're

49
00:02:41.207 --> 00:02:45.912
将返回一个函数。
gonna return a function.

50
00:02:45.912 --> 00:02:48.391
你要返回一个函数。
You're gonna return a function.

51
00:02:48.391 --> 00:02:49.271
返回函数？
Returns a function?

52
00:02:50.852 --> 00:02:52.651
&gt；&gt；扬声器4：我不知道。
&gt;&gt; Speaker 4: I don't know.

53
00:02:52.651 --> 00:02:56.289
它就像是一个getter和setter。
It's something like a getter and a setter.

54
00:02:56.289 --> 00:02:58.729
如果他们只能得到，你不会想设置它的。
You're don't wanna set it if they can only get it.

55
00:02:59.939 --> 00:03:01.969
&gt；&gt；Douglas Crockford：你可以，但有一件事比那更容易做。
&gt;&gt; Douglas Crockford: You could, but there's an easier thing to do than that.

56
00:03:03.360 --> 00:03:04.300
&gt；&gt；扬声器7：冻结此处的选项？
&gt;&gt; Speaker 7: Freeze the option here?

57
00:03:04.300 --> 00:03:05.819
&gt；&gt；Douglas Crockford：是的，你想冷冻它。
&gt;&gt; Douglas Crockford: Yeah, you wanna freeze it.

58
00:03:05.819 --> 00:03:11.990
因此，如果我们冻结对象，那么所有这些攻击都是完全失败的。
So if we freeze the object then all of those attacks are completely frustrated.

59
00:03:11.990 --> 00:03:13.770
&gt；&gt；Speaker 4：你现在会用JavaScript做这个吗？
&gt;&gt; Speaker 4: Would you do this right now in JavaScript?

60
00:03:13.770 --> 00:03:16.430
&gt；&gt；Douglas Crockford：是的，S5中增加了冻结。
&gt;&gt; Douglas Crockford: Yeah, freeze was added in the S5.

61
00:03:16.430 --> 00:03:17.009
&gt；&gt；扬声器4：好的。
&gt;&gt; Speaker 4: Okay.

62
00:03:17.009 --> 00:03:21.902
&gt；&gt；Douglas Crockford：所以它在IE9，10和11中
&gt;&gt; Douglas Crockford: So it's in IE 9 and 10 and 11 and

63
00:03:21.902 --> 00:03:25.175
所有好的浏览器。
all the good browsers.

64
00:03:25.175 --> 00:03:28.655
这样我们就可以冻结了。
So we can freeze.

65
00:03:28.655 --> 00:03:31.969
这样就完全解决了这个问题。
So that completely solves this.

66
00:03:31.969 --> 00:03:35.250
所以这就是为什么我喜欢把冻结作为一种物体构造的原因之一
And so that's one of the reasons why I like freeze as an object construction

67
00:03:35.250 --> 00:03:39.420
模式，因为有很多东西我们永远不用担心
pattern because there's a whole lot of stuff we'll never have to worry about

68
00:03:39.420 --> 00:03:41.210
如果物体被冻结。
if the objects are frozen.

69
00:03:41.210 --> 00:03:44.180
冻结这个物体并不会削弱它的能力
And freezing this object does not impair its ability

70
00:03:44.180 --> 00:03:46.219
去做它应该做的事。
to do what it's supposed to do.

71
00:03:46.219 --> 00:03:49.389
这些方法仍然可以访问订阅者数组，并且
That these methods still have access to the subscribers array and

72
00:03:49.389 --> 00:03:52.150
仍然可以做所有那些动态的东西。
still can do all that dynamic stuff.

73
00:03:52.150 --> 00:03:54.737
只是没有人可以篡改实例。
It's just nobody can tamper with the instance.

74
00:03:56.897 --> 00:04:00.080
&gt；&gt；Douglas Crockford：好的，我们现在准备好接受你的下一个建议，
&gt;&gt; Douglas Crockford: Okay, we're now ready for your next suggestion,

75
00:04:00.080 --> 00:04:01.118
你的第一个
your first one.

76
00:04:01.118 --> 00:04:01.799
&gt；&gt；扬声器4：我已经忘了。
&gt;&gt; Speaker 4: I forgot it already.

77
00:04:01.799 --> 00:04:07.436
&gt；&gt；Douglas Crockford：[笑]&gt；&gt；扬声器4：我们要进去了。
&gt;&gt; Douglas Crockford: [LAUGH] &gt;&gt; Speaker 4: We're gonna pass in.

78
00:04:07.436 --> 00:04:12.530
我们将订阅一个删除功能，
We're gonna subscribe with a function that deletes,

79
00:04:12.530 --> 00:04:17.290
遍历此操作并删除所有内容。
iterates through this and deletes everything.

80
00:04:17.290 --> 00:04:18.120
&GT；&GT；道格拉斯·克罗克福德：是的，没错。
&gt;&gt; Douglas Crockford: Yeah, exactly.

81
00:04:18.120 --> 00:04:19.029
&gt；&gt；扬声器4：差不多吧。
&gt;&gt; Speaker 4: Something like that.

82
00:04:19.029 --> 00:04:19.990
&gt；&gt；Douglas Crockford：是的，差不多吧。
&gt;&gt; Douglas Crockford: Yeah, something like that.

83
00:04:19.990 --> 00:04:22.425
所以应该是这样的。
So that'd be something like this.

84
00:04:22.425 --> 00:04:28.600
所以我们要订阅一个可以访问这个的功能。
So we're going to subscribe with a function which will get access to this.

85
00:04:28.600 --> 00:04:32.980
然后我们可以访问订阅者阵列。
And then that gives us access to the subscribers array.

86
00:04:32.980 --> 00:04:37.742
因为这是一个方法调用，即使它看起来不像一个方法。
Because this is a method invocation, even though it doesn't look like a method.

87
00:04:37.742 --> 00:04:41.031
我们调用一个存储在数组中的函数，
We're calling a function that is stored in array,

88
00:04:41.031 --> 00:04:45.783
我们不认为这是一个方法调用，但JavaScript认为是。
we don't think of that as being a method invocation but JavaScript does.

89
00:04:45.783 --> 00:04:51.043
所以从现在开始一切都会和这个联系在一起。
So everything from here on will get bound to this.

90
00:04:51.043 --> 00:04:55.283
因此在本例中，我们将把this.length设置为0。
So in this case, we're going to set this.length to 0.

91
00:04:55.283 --> 00:04:58.367
这将删除所有订阅者，但
That will delete all of the subscribers but

92
00:04:58.367 --> 00:05:01.800
我们也可以做更阴险的事情。
we could do much more insidious things as well.

93
00:05:01.800 --> 00:05:05.601
同样，如果您对此对象执行以下操作，则您可以对该对象执行的坏事数量是无限的
Again, there's an infinite number of bad things you can do to this object if you

94
00:05:05.601 --> 00:05:06.579
拿到这个。
get access to this.

95
00:05:09.038 --> 00:05:14.019
&gt；&gt；Douglas Crockford：所以这又是一个很大的困惑来源，对吗？
&gt;&gt; Douglas Crockford: And so this is a big source of confusion again, right?

96
00:05:14.019 --> 00:05:18.603
在JavaScript中，带括号的东西是方法调用，但是
That in JavaScript, things with brackets are method invocations but

97
00:05:18.603 --> 00:05:21.485
我们不认为这些是方法调用。
we don't see those as method invocations.

98
00:05:21.485 --> 00:05:26.233
所以再一次，这是一种混淆，导致对我们的
So again, this is a confusion which leads to misunderstanding of what our

99
00:05:26.233 --> 00:05:31.375
程序是这样做的，这使得漏洞和安全漏洞的发生成为可能。
programs do, which make it possible for bugs and security exploits to happen.

100
00:05:31.375 --> 00:05:36.225
&gt；&gt；Speaker 4：在您刚才编写的这个函数中，
&gt;&gt; Speaker 4: Inside this function that you've just written,

101
00:05:36.225 --> 00:05:39.689
这是支付子对象，对吧，
this is the paysub object, right,

102
00:05:39.689 --> 00:05:45.995
有了var订阅者，这就是它的范围，对吧？
with its var subscribers, that's its scope, right?

103
00:05:45.995 --> 00:05:48.798
&gt；&gt；Douglas Crockford：不，在这种情况下，这是订阅者数组。
&gt;&gt; Douglas Crockford: No, in this is case, this is the subscribers array.

104
00:05:51.009 --> 00:05:53.090
因为这就是方法。
Because this is the method meant.

105
00:05:53.090 --> 00:05:57.939
好的，这是你的函数，你把它传递给订阅。
Okay, so here's your function, you pass it in to subscribe.

106
00:05:57.939 --> 00:05:59.949
因此它被存储在订阅者数组中。
So it gets stored in the subscribers array.

107
00:06:01.089 --> 00:06:06.889
在这个循环中，它现在被调用，但它被作为一个方法调用。
And in this loop, it now gets called but it's being called as a method.

108
00:06:11.089 --> 00:06:13.649
在这种语言中有四种方法可以调用方法。
There are four ways to call a method in this language.

109
00:06:13.649 --> 00:06:16.730
我认为应该只有一个，但有四个。
I think there should only be one, but there are four.

110
00:06:16.730 --> 00:06:21.230
并且至少有一种形式对于它是哪种调用感到困惑。
And at least one of the forms is confusing as to which kind of invocation it is.

111
00:06:23.771 --> 00:06:25.370
&gt；&gt；Douglas Crockford：那你怎么解决这个问题呢？
&gt;&gt; Douglas Crockford: So how would you fix that?

112
00:06:33.071 --> 00:06:35.930
&GT；&GT；扬声器7：我的大脑说呼叫，不？
&gt;&gt; Speaker 7: My brain says call, no?

113
00:06:35.930 --> 00:06:36.692
&GT；&GT；道格拉斯·克罗克福德：你说什么？
&gt;&gt; Douglas Crockford: I'm sorry?

114
00:06:36.692 --> 00:06:38.691
&gt；&gt；扬声器7：我的大脑说使用呼叫。
&gt;&gt; Speaker 7: My brain says using call.

115
00:06:38.691 --> 00:06:42.454
&gt；&gt；Douglas Crockford：如果我们说，
&gt;&gt; Douglas Crockford: That would be one way to do it if we say,

116
00:06:42.454 --> 00:06:47.420
订户[i]点调用，然后传入。
subscribers[i] dot call and then pass in that.

117
00:06:47.420 --> 00:06:48.271
这是一种方法。
That would be one way to do it.

118
00:06:50.391 --> 00:06:52.343
&gt；&gt；Douglas Crockford：我更喜欢的方式还是
&gt;&gt; Douglas Crockford: The way I would prefer to do it or

119
00:06:52.343 --> 00:06:57.154
您可以做的另一件事是将Subscriber[i]分配给局部变量，
the other thing you could do is assign subscriber[i] to a local variable,

120
00:06:57.154 --> 00:06:59.050
然后调用该变量。
and then call that variable.

121
00:07:00.980 --> 00:07:04.269
或者，我们可以做的是使用for Each。
Or, what we could do is use forEach.

122
00:07:04.269 --> 00:07:09.519
我现在一般不信任for循环，我更喜欢for each。
I'm now distrustful of for loops in general and I like forEach much better.

123
00:07:09.519 --> 00:07:16.024
所以我可以传递给forEach一个函数，它将调用函数的每个元素，并且
So I can pass to forEach a function which will call each element of the function and

124
00:07:16.024 --> 00:07:21.500
忽略任何例外，我真的很喜欢这一点。
ignore any exceptions and I really like this.

125
00:07:21.500 --> 00:07:23.129
我觉得这非常好。
I think this is very, very nice.

126
00:07:24.779 --> 00:07:27.329
所以我不再使用for loop了。
So I'm not using for loops anymore.

127
00:07:27.329 --> 00:07:31.339
我在做这件事，因为它正在过去
I'm doing this stuff instead and because it's passing

128
00:07:31.339 --> 00:07:36.189
在每个单独的元素中，关于如何调用这一点没有混淆。
in each individual element, there's no confusion about how this gets called.

129
00:07:36.189 --> 00:07:37.769
它永远不会是一个方法调用。
It's never gonna be a method invocation.

130
00:07:39.449 --> 00:07:41.590
实际上，这个函数甚至看不到数组。
In fact, this function doesn't even see the array.

131
00:07:41.590 --> 00:07:44.170
它所看到的都是个别的元素。
All it sees are the individual elements.

132
00:07:45.370 --> 00:07:47.310
&gt；&gt；演讲者4：提醒我们如何逃脱每一次。
&gt;&gt; Speaker 4: Remind us how to escape forEach.

133
00:07:47.310 --> 00:07:48.159
&GT；&GT；道格拉斯·克罗克福德：你说什么？
&gt;&gt; Douglas Crockford: I'm sorry?

134
00:07:48.159 --> 00:07:50.480
&gt；&gt；演讲者4：提醒我们，如何突破forEach。
&gt;&gt; Speaker 4: Remind us, how do you break out of a forEach.

135
00:07:50.480 --> 00:07:52.019
&gt；&gt；Douglas Crockford：您使用Each而不是ForEach。
&gt;&gt; Douglas Crockford: You use every instead of forEach.

136
00:07:53.449 --> 00:07:56.711
我们会设计它，使这个函数总是返回true。
And we would design it so that this function would always return true.

137
00:08:00.052 --> 00:08:01.660
&gt；&gt；Speaker 4：返回false，然后离开。
&gt;&gt; Speaker 4: It returns false then it leaves.

138
00:08:01.660 --> 00:08:05.250
&gt；&gt；Douglas Crockford：那么是的，假的是退出信号。
&gt;&gt; Douglas Crockford: Then yeah, false is the exit signal.

139
00:08:06.600 --> 00:08:08.411
&gt；&gt；扬声器8：在上一张幻灯片中，
&gt;&gt; Speaker 8: On the previous slide,

140
00:08:08.411 --> 00:08:13.216
有人想让你澄清为什么这指的是数组。
somebody wants you to clarify why does this refer to the array.

141
00:08:13.216 --> 00:08:17.072
&gt；&gt；Douglas Crockford：对，这就是函数
&gt;&gt; Douglas Crockford: Right, so this is the function

142
00:08:17.072 --> 00:08:21.677
在这里被处决，好吗？
that is being executed here, okay?

143
00:08:21.677 --> 00:08:27.396
这种形式的函数调用就是方法形式。
And this form of function invocation is the method form.

144
00:08:27.396 --> 00:08:32.017
方法表单中将有一个点或一个括号。
The method form will have a dot in it or a bracket in it.

145
00:08:32.017 --> 00:08:38.161
所以，所有在最后一个点左边的东西
And so, everything to the left of the last dot or

146
00:08:38.161 --> 00:08:42.614
最后一个括号绑定到这个
last bracket gets bound to this and

147
00:08:42.614 --> 00:08:46.158
这就是为什么会发生这种事。
that's why that happens.
