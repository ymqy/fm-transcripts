WEBVTT

1
00:00:00.000 --> 00:00:03.842
[音樂]
[MUSIC]

2
00:00:03.842 --> 00:00:06.389
&gt；&gt；道格拉斯·克羅克福德：我會給你出一系列問題。
&gt;&gt; Douglas Crockford: I'm gonna give you a series of problems.

3
00:00:06.389 --> 00:00:07.625
問題可能如下所示。
A problem might look like this.

4
00:00:13.295 --> 00:00:16.190
&gt；&gt；Douglas Crockford：編寫一個接受引數和
&gt;&gt; Douglas Crockford: Write an identity function that takes an argument and

5
00:00:16.190 --> 00:00:18.070
返回該引數。
returns that argument.

6
00:00:18.070 --> 00:00:20.574
我會舉一個例子來說明你會怎麼稱呼它
And I'll show an example of how you would call it and

7
00:00:20.574 --> 00:00:22.448
那通電話的結果會是什麼。
what the result of that call would be.

8
00:00:22.448 --> 00:00:24.839
然後我會給你一些時間來做這件事。
I will then give you some time to work on it.

9
00:00:24.839 --> 00:00:26.190
大概十分鐘左右吧。
Probably about ten minutes or so.

10
00:00:27.719 --> 00:00:30.920
你們中的一些人會比其他人工作得更快，所以
Some of you are gonna work faster than others, so for

11
00:00:30.920 --> 00:00:33.189
你們中那些完成得很快的人，你們會很沮喪的，
those of you who finish quickly, you're gonna get frustrated,

12
00:00:33.189 --> 00:00:36.850
因為你得等時間我們才能繼續。
because you're gonna have to wait for the time before we go on.

13
00:00:36.850 --> 00:00:39.710
對於你們中的一些人來說，工作速度會變慢，你們會感到沮喪
And for some of you are gonna be working slower, and you're gonna get frustrated

14
00:00:39.710 --> 00:00:42.689
因為你可能沒有足夠的時間來完成每一道題。
cuz you might not have enough time to finish every problem.

15
00:00:42.689 --> 00:00:46.859
所以，我今天的目標是平等地挫敗每個人，好嗎？
So, my goal today is to frustrate everybody equally, okay?

16
00:00:46.859 --> 00:00:49.149
這就是我們要帶著這個去的地方。
That's where we're gonna be going with this.

17
00:00:49.149 --> 00:00:51.039
所以，你需要一些時間，
So, you'll take some time,

18
00:00:51.039 --> 00:00:53.530
你會解決這個問題，你會想出解決辦法的。
you'll work on the problem, you'll come up with the solution.

19
00:00:53.530 --> 00:00:56.320
然後我會給你看我的解決方案。
I will then show you my solution.

20
00:00:56.320 --> 00:00:59.929
在某些情況下，我可能會向您展示多種解決方案
And in some cases, I may show you multiple solutions and

21
00:00:59.929 --> 00:01:01.700
你可以把你的和我的比較一下。
you can compare yours with mine.

22
00:01:01.700 --> 00:01:06.000
如果你喜歡我的勝過你的，你想錄下來，
If you like mine better than yours, you want to record it,

23
00:01:06.000 --> 00:01:11.870
因為後面的每一個問題都會涉及到前面的問題。
because each of these later problems will refer to earlier problems.

24
00:01:11.870 --> 00:01:15.310
或者在模式中，或者我們將實際呼叫前面的函式，
Either in pattern or we'll actually be calling the earlier functions,

25
00:01:15.310 --> 00:01:19.370
因此，請確保您至少獲得了所有可以正常工作的版本。
so make sure that you get at least one version of everything that works.

26
00:01:20.730 --> 00:01:24.831
另外，我強烈建議您使用與我完全相同的函式名，
Also, I highly recommend that you use exactly the same function names that I do,

27
00:01:24.831 --> 00:01:29.299
因為稍後我們將編寫呼叫這些函式的函式，如果您
because later we're gonna write functions which call these functions, and if you're

28
00:01:29.299 --> 00:01:33.241
給他們不同的名字，真的很容易混淆，好嗎？
giving them different names, it'll be really easy to get confused, okay?

29
00:01:35.692 --> 00:01:38.810
&gt；&gt；道格拉斯·克羅克福德：那麼你可能會想要測試一下。
&gt;&gt; Douglas Crockford: Then you'll probably want to test it.

30
00:01:38.810 --> 00:01:44.909
例如，如果您的計算機上有JavaScript引擎以及如何使用它，
If you have a JavaScript engine on your machine and how to use it, for example,

31
00:01:44.909 --> 00:01:48.049
如果您安裝了Node，並且知道如何使用repo，那就太好了。
if you have Node installed and you know how to use the repo, that's great.

32
00:01:48.049 --> 00:01:51.210
你只要把它插在那裡，它就能用了。
You can just plug it in there, and it'll work.

33
00:01:51.210 --> 00:01:54.109
如果沒有，您至少有一個Web瀏覽器。
If you don't, you have at least one web browser.

34
00:01:54.109 --> 00:01:56.905
現在所有的網路瀏覽器都有非常好的偵錯程式，所以
And all the web browsers now come with very nice debuggers, so

35
00:01:56.905 --> 00:01:58.689
你也可以這麼做。
you can do that as well.

36
00:01:58.689 --> 00:02:01.159
這是使用Web瀏覽器的一種方式。
This is one way to use a web browser.

37
00:02:01.159 --> 00:02:08.500
您可以簡單地擁有一個類似這樣的表單，或者一個包含指令碼標記的頁面。
You could simply have a form like this, or a page containing a script tag.

38
00:02:08.500 --> 00:02:11.882
為了方便起見，我建立了一個日誌函式，這樣我就可以記錄結果，
For my convenience, I created a log function so I could log results,

39
00:02:11.882 --> 00:02:13.936
它會直接把它們寫到螢幕上。
and it'll just write them to the screen.

40
00:02:13.936 --> 00:02:16.931
然後在盒子裡，我有我寫的函式，
Then in the box, I've got the function that I wrote, and

41
00:02:16.931 --> 00:02:20.060
然後我呼叫函式，將結果傳送到日誌。
then I called the function sending the result to the log.

42
00:02:20.060 --> 00:02:22.229
如果你想做更復雜的事，
If you wanna do something more sophisticated,

43
00:02:22.229 --> 00:02:23.500
當然歡迎你去做那件事。
you're certainly welcome to do that.

44
00:02:23.500 --> 00:02:26.180
這在某種程度上是您入門所需的最低要求。
This is sort of the minimum that you need to get started.

45
00:02:27.829 --> 00:02:30.659
您不需要測試您的功能，但是您可能想測試一下，對嗎？
You don't have to test your functions, but you probably want to, right?

46
00:02:30.659 --> 00:02:34.129
因為否則的話，你就不能相信它們工作正常。
Cuz otherwise you can't have confidence that they're working correctly.

47
00:02:34.129 --> 00:02:37.379
當每個人都還在準備的時候，我們要做個測驗。
While everybody is still getting set up, we're gonna do a quiz.

48
00:02:37.379 --> 00:02:38.120
突擊測驗。
Pop quiz.

49
00:02:38.120 --> 00:02:40.039
我們開始吧，準備好了嗎？
So here we go, ready?

50
00:02:40.039 --> 00:02:44.050
第一個問題，我們有一個叫做Funky的函式。
Question number one, we have a function called funky.

51
00:02:44.050 --> 00:02:46.389
它接受引數o，將o設定為空。
It takes an argument o, sets o to null.

52
00:02:48.039 --> 00:02:53.219
我們建立一個全域性變數x，它是一個空陣列，我們將x傳遞給Funky。
We create a global variable x, which is an empty array, we pass x to funky.

53
00:02:53.219 --> 00:02:55.300
現在x的值是多少？
What is now the value of x?

54
00:03:00.110 --> 00:03:02.919
那麼誰認為x為空呢？
So who thinks x is null?

55
00:03:02.919 --> 00:03:06.445
誰認為x是空陣列呢？
And who thinks x is the empty array?

56
00:03:06.445 --> 00:03:09.625
誰認為它是不確定的呢？
And who thinks it's undefined?

57
00:03:09.625 --> 00:03:12.596
誰認為它會丟擲一個例外呢？
And who thinks it'll throw an exception?

58
00:03:12.596 --> 00:03:16.389
好的，答案是B，空陣列。
Okay, the answer is B, the empty array.

59
00:03:17.430 --> 00:03:19.569
那麼讓我們來看看這裡發生了什麼。
So let's look at what's happening here.

60
00:03:19.569 --> 00:03:25.860
所以如果我們開始，我們有指向陣列的全域性變數x。
So if we start off, we have the global variable x that points at the array.

61
00:03:27.219 --> 00:03:32.218
我們傳遞x的內容，這是對Funky的引用，
We pass the contents of x, which is that reference to funky,

62
00:03:32.218 --> 00:03:35.780
這使它與o繫結在一起。
which has it bound to o.

63
00:03:35.780 --> 00:03:38.050
我們用NULL替換o。
We replace o with null.

64
00:03:38.050 --> 00:03:39.829
然後你就來了。
And then there you are.

65
00:03:39.829 --> 00:03:43.340
所以，就像寫的那樣，時髦是一個完全無用的功能。
So funky, as written, is a completely useless function.

66
00:03:44.879 --> 00:03:49.060
在這方面，變數的工作方式並不是JavaScript獨有的。
And in this thing about the way variables work is not peculiar to JavaScript.

67
00:03:49.060 --> 00:03:51.110
幾乎所有的現代語言都是這樣工作的。
Almost all modern languages work this way.

68
00:03:52.210 --> 00:03:57.360
大多數語言都不允許您傳遞對變數的引用。
Most languages do not allow you to pass a reference to a variable.

69
00:03:57.360 --> 00:04:00.030
它們允許您做的是傳遞對內容的引用
What they allow you to do is to pass a reference to the contents of

70
00:04:00.030 --> 00:04:02.169
變數，好的。
the variable, okay.

71
00:04:02.169 --> 00:04:07.150
ALGOL 60是一種很棒的語言，裡面有一種叫做，
ALGOL 60, which was a brilliant language, had something in it called,

72
00:04:07.150 --> 00:04:11.449
按名稱呼叫，實際上可以傳遞對變數的引用。
call by name, where you actually could pass a reference to a variable.

73
00:04:11.449 --> 00:04:15.360
這是ALGOL 60中為數不多的、非常糟糕的想法之一。
That was one of the very few, very bad ideas in ALGOL 60.

74
00:04:15.360 --> 00:04:17.230
準備好再來一次了嗎？
Ready for another one?

75
00:04:18.824 --> 00:04:23.740
好的，這是一個函式交換，有兩個引數a和b，
Okay, here's a function swap, takes two arguments a and b, and

76
00:04:23.740 --> 00:04:25.589
它使用TEMP變數交換它們。
it swaps them using a temp variable.

77
00:04:26.665 --> 00:04:30.670
我們有兩個全域性變數x和y，它們的值是1和2。
We have two global variables, x and y, whose values are 1 and 2.

78
00:04:30.670 --> 00:04:35.012
我們把x和y傳遞給交換，現在x的值是多少？
We pass x and y to swap, what is now the value of x?

79
00:04:37.803 --> 00:04:40.103
道格拉斯·克羅克福德：那麼誰認為x是1呢？
&gt;&gt; Douglas Crockford: So who thinks x is 1?

80
00:04:41.590 --> 00:04:44.180
誰認為x是2？
Who thinks x is 2?

81
00:04:44.180 --> 00:04:46.569
好吧，這次我不會騙你的。
Okay I'm not gonna fool you this time.

82
00:04:46.569 --> 00:04:48.324
答案是1。
The answer is 1.

83
00:04:48.324 --> 00:04:50.639
這和我們之前做的類似。
And it's similar to what we did before.

84
00:04:50.639 --> 00:04:57.329
這裡我們有兩個全域性變數，x和y，指向1和2。
So here we've got our two global variables, x and y, that point to 1 and 2.

85
00:04:57.329 --> 00:04:59.769
我們將x和y傳遞給交換。
We pass x and y to swap.

86
00:04:59.769 --> 00:05:02.089
然後我們用掉期交易來擺弄他們，但是
Then we fiddle them around with swap, but

87
00:05:02.089 --> 00:05:04.839
這並沒有改變x和y正在做的事情。
that did not change what x and y are doing.

88
00:05:04.839 --> 00:05:09.160
我希望在未來的某一天，JavaScript可以獲得巨集。
I'm hoping that some day in the future, JavaScript gets macros.

89
00:05:09.160 --> 00:05:11.620
所以我不會說函式互換，我會說巨集觀互換。
So instead of saying function swap, I'd say macro swap.

90
00:05:11.620 --> 00:05:18.824
在這種情況下，巨集確實會被呼叫，或者確實會用變數名傳遞，並且
And in that case, macros do get called or do get passed with variable names, and

91
00:05:18.824 --> 00:05:24.500
巨集互換是有用的，但是正如所寫的那樣，函式互換是非常無用的。
macro swap would be useful thing, but as written, function swap is pretty useless.

92
00:05:26.649 --> 00:05:28.300
好的，關於測驗有什麼問題嗎？
Okay, any questions about the quiz?

93
00:05:29.420 --> 00:05:30.620
好了，測驗結束了。
Okay, quiz is done.

94
00:05:30.620 --> 00:05:32.920
是時候做點實實在在的工作了，你準備好了嗎？
It's time to do some real work, are you ready?

95
00:05:32.920 --> 00:05:36.340
所以第一個是非常瑣碎的，沒有花招，
So the first one is going to be totally trivial, no tricks,

96
00:05:36.340 --> 00:05:39.558
它只是允許您測試您的環境的東西。
it's just something to allow you to test your environment.

97
00:05:41.909 --> 00:05:44.310
所以寫三個二進位制函式。
So write three binary functions.

98
00:05:44.310 --> 00:05:47.590
二進位制函式是接受兩個引數的函式。
A binary function is a function that takes two arguments.

99
00:05:47.590 --> 00:05:52.340
ADD、SUB和MUL，它們接受兩個數字，並返回它們的和、差和
Add, sub and mul, that take two numbers and return their sum, difference and

100
00:05:52.340 --> 00:05:53.930
產品，好的。
product, okay.

101
00:05:53.930 --> 00:05:55.829
這聽起來很微不足道。
This is as trivial as it sounds.

102
00:05:55.829 --> 00:05:57.360
沒有什麼詭計。
There are no tricks.

103
00:05:57.360 --> 00:06:00.750
我們這麼做是為了讓你可以練習
We're doing this so that you can practice and also so

104
00:06:00.750 --> 00:06:05.649
我們將擁有稍後編寫的函式可以呼叫的函式。
that we'll have functions that functions that we write later will be able to call.

105
00:06:07.790 --> 00:06:10.399
所以這裡我們有加法、第一法和多法。
So here we have add, first and mul.

106
00:06:10.399 --> 00:06:12.927
我想每個人都有這個，對吧？
I assume that everybody got this, right?

107
00:06:12.927 --> 00:06:14.238
是的，這是誰拍的？
Yes, who got this?

108
00:06:15.779 --> 00:06:19.029
是的，如果你沒有，那就寫下來，因為你以後會用到這些的。
Yeah, if you didn't, write it down because you're going to need these for later.

109
00:06:21.500 --> 00:06:23.629
好了，準備好今天第一個有趣的問題了嗎？
Okay, ready for the first interesting problem of the day?

110
00:06:25.129 --> 00:06:25.709
我們開始吧。
Here we go.

111
00:06:28.189 --> 00:06:31.560
編寫一個接受引數的函式標識f，並
Write a function identityf that takes an argument and

112
00:06:31.560 --> 00:06:35.100
返回返回該引數的函式。
returns a function that returns that argument.

113
00:06:35.100 --> 00:06:38.560
因此，我們將其命名為身份f，我們將傳遞它3。
So, we're gonna call it identityf, we're gonna pass it 3.

114
00:06:38.560 --> 00:06:40.528
這將返回一個函式。
That will return a function.

115
00:06:40.528 --> 00:06:45.526
當我們呼叫該函式時，它將返回3。
When we call that function, it will return 3.

116
00:06:45.526 --> 00:06:48.168
那麼，這就是身份f。
So, here is identityf.

117
00:06:48.168 --> 00:06:52.860
Identityf接受一個引數並返回返回該引數的函式。
identityf takes an argument and returns a function that returns that argument.

118
00:06:52.860 --> 00:06:54.983
那麼誰拿到身份了？
So who got identityf?

119
00:06:54.983 --> 00:06:56.240
非常好。
Very good.

120
00:06:56.240 --> 00:06:58.240
如果你沒拿到，就寫下來，
If you didn't get it, write it down,

121
00:06:58.240 --> 00:07:00.230
因為你以後肯定需要它。
because you gotta definitely need it later.

122
00:07:00.230 --> 00:07:04.939
不要氣餒，我並不是期望每個人都能解決所有的問題。
And don't be discouraged, I'm not expecting everybody to get every problem.

123
00:07:04.939 --> 00:07:08.300
我期望的是每個人都能得到最後一個問題。
What I'm expecting is that everybody gets the last problem.

124
00:07:08.300 --> 00:07:13.329
好的，如果你看不到馬上會發生什麼，就繼續看著它。
Okay, so if you don't see what's going on immediately, just stay with it.

125
00:07:13.329 --> 00:07:16.870
最終，這些模式應該會開始變得更加清晰
Eventually the patterns should start to become clearer and

126
00:07:16.870 --> 00:07:19.310
你會知道我們要去哪裡的，好嗎？
you'll get a sense of where we're going, okay?

127
00:07:19.310 --> 00:07:22.396
到目前為止還有什麼問題嗎？
Any questions so far?

128
00:07:22.396 --> 00:07:23.750
好的，我們準備好下一場了嗎？
Okay, are we ready for the next one?

129
00:07:25.060 --> 00:07:31.389
好的，編寫一個從兩次呼叫相加的函式ADDF。
Okay, write a function addf that adds from two invocations.

130
00:07:31.389 --> 00:07:35.579
因此，如果我們將3傳遞給ADDF，它將返回一個函式。
So if we pass a 3 to addf, it would return a function.

131
00:07:35.579 --> 00:07:40.887
如果我們將4傳遞給該函式，它將返回7。
If we pass 4 to that function, it will return 7.

132
00:07:40.887 --> 00:07:42.430
這就是ADDF。
So here is addf.

133
00:07:45.079 --> 00:07:49.920
ADDF接受第一個引數，它返回接受第二個引數的函式
addf takes a first argument, it returns a function that takes the second argument

134
00:07:49.920 --> 00:07:53.610
並返回呼叫第一個和第二個引數的結果。
and it returns the result of calling the first and second argument.

135
00:07:53.610 --> 00:07:54.310
那麼誰得到了ADDF呢？
So who got addf?

136
00:07:55.670 --> 00:07:56.439
好的，很好。
Okay, very good.

137
00:07:56.439 --> 00:07:58.079
如果你沒有收到，就寫下來。
If you didn't get it, write it down.

138
00:07:58.079 --> 00:07:59.540
下一次你會需要它的。
You're gonna wanna need it for the next one.

139
00:08:01.110 --> 00:08:04.666
這個問題是德米特里·巴拉諾夫斯基向我提出的，
So this problem was suggested to me by Dmitry Baranovskiy,

140
00:08:04.666 --> 00:08:09.680
他是居住在澳大利亞悉尼的一位才華橫溢的烏克蘭程式設計師。
who is a brilliant Ukrainian programmer living in Sydney, Australia.

141
00:08:09.680 --> 00:08:15.029
他是RaphaelJS的作者，這是一個非常好的瀏覽器圖形包。
He's the author of RaphaelJS, a very nice graphics package for the browser.

142
00:08:16.129 --> 00:08:20.410
他建議這應該是一個招聘問題，如果你沒弄錯的話，
He suggested that this should be a hiring question, and if you got this right,

143
00:08:20.410 --> 00:08:21.310
也許你也這麼認為。
maybe you think so, too.

144
00:08:24.000 --> 00:08:25.707
那麼我們準備好下一場了嗎？
So we ready for the next one?

145
00:08:27.959 --> 00:08:28.920
&gt；&gt；道格拉斯·克羅克福德：好的，我們開始吧。
&gt;&gt; Douglas Crockford: Okay, here we go.

146
00:08:30.850 --> 00:08:34.889
編寫一個函式liftf，該函式接受一個二進位制函式
Write a function liftf that takes a binary function and

147
00:08:34.889 --> 00:08:37.779
使其可通過兩次呼叫來呼叫。
makes it callable with two invocations.

148
00:08:37.779 --> 00:08:41.590
所以，如果我們傳遞今天早上我們編寫的第一件事Add函式
So, if we pass the add function that we wrote the first thing this morning

149
00:08:42.600 --> 00:08:43.679
把它舉起來，
to liftf,

150
00:08:43.679 --> 00:08:47.940
它返回一個工作方式與我們剛才編寫的ADDF函式完全相同的函式。
it returns a function that works exactly like the addf function that we just wrote.

151
00:08:48.980 --> 00:08:52.960
更有趣的是，我們可以傳遞其他的二進位制函式，
And to make it even more interesting, we can pass other binary functions,

152
00:08:52.960 --> 00:08:56.330
喜歡乘法函式，並獲得類似的功能。
like the multiply function, and get a similar kind of capability.

153
00:08:58.669 --> 00:09:00.210
讓我們看一下liftf。
Let's look at liftf.

154
00:09:00.210 --> 00:09:04.519
Liftf接受一個二進位制函式，返回一個接受第一個引數的函式，
Liftf takes a binary function, returns a function that takes a first argument,

155
00:09:04.519 --> 00:09:08.470
它返回一個接受第二個引數的函式，該函式返回
that returns a function that takes a second argument, that returns a result of

156
00:09:08.470 --> 00:09:13.090
將第一和第二引數傳遞給二進位制函式。
passing the first and second arguments to the binary function.

157
00:09:13.090 --> 00:09:14.139
那麼誰被抬走了？
So who got liftf?

158
00:09:15.519 --> 00:09:16.090
非常好。
Very good.

159
00:09:16.090 --> 00:09:17.769
如果你沒有收到，就寫下來。
If you didn't get it, write it down.

160
00:09:17.769 --> 00:09:19.220
以後你會需要它的。
You're gonna want to need it for a later one.

161
00:09:20.330 --> 00:09:23.409
這是一個高階函式的例子。
This is an example of a higher order function.

162
00:09:23.409 --> 00:09:29.169
高階函式是接收其他函式作為引數的函式
Higher order functions are functions that receive other functions as parameters and

163
00:09:29.169 --> 00:09:32.019
將其他函式作為結果返回。
return other functions as results.

164
00:09:33.220 --> 00:09:36.669
所以我們開始往兔子洞裡走，進入一個非常
So we're starting to get moving down the rabbit hole into a very

165
00:09:36.669 --> 00:09:38.250
有趣的建造方式。
interesting way of constructing things.
