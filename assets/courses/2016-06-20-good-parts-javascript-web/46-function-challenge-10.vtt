WEBVTT

1
00:00:00.000 --> 00:00:03.955
[音乐]
[MUSIC]

2
00:00:03.955 --> 00:00:05.879
&gt；&gt；Douglas Crockford：好的，让我们看看addg。
&gt;&gt; Douglas Crockford: Okay, let's look at addg.

3
00:00:05.879 --> 00:00:10.169
Addg接受第一个参数，它创建了一个more函数。
Addg takes a first argument, it creates a more function.

4
00:00:10.169 --> 00:00:14.609
如果第一个参数没有定义，则返回more函数。
If the first argument is not undefined it returns the more function.

5
00:00:14.609 --> 00:00:19.609
如果未定义下一个参数，则More函数接受下一个参数
The more function takes the next argument If the next argument is undefined

6
00:00:19.609 --> 00:00:24.839
它首先返回，否则它添加到第一个并返回自身。
it returns first otherwise it adds next to first and returns itself.

7
00:00:24.839 --> 00:00:28.390
通过返回本身允许
By returning itself allows for

8
00:00:28.390 --> 00:00:32.859
接下来发生的事情，我称之为这个返回递归。
the next thing to happen and I call this return recursion.

9
00:00:32.859 --> 00:00:36.070
递归是指具有调用自身的函数
Recursion is when you have a function that calls itself

10
00:00:36.070 --> 00:00:38.310
递归是当您有一个返回自身的函数时。
recursion is when you have a function that returns itself.

11
00:00:39.640 --> 00:00:41.859
还有人做了什么吗？
So anybody do anything else?

12
00:00:41.859 --> 00:00:43.179
采取不同的方法来解决这个问题？
Take a different approach to solving this?

13
00:00:43.179 --> 00:00:48.792
有很多可能的解决方案。
There are lots of possible solutions.

14
00:00:48.792 --> 00:00:54.768
&gt；&gt；扬声器2：你在做同样的事情，你提前计算下一个值。
&gt;&gt; Speaker 2: You're doing the same thing where you compute ahead the next value.

15
00:00:54.768 --> 00:01:01.429
那个你，你昨天在另一个地方做了另一个。
That you, you did it in another part another one yesterday.

16
00:01:01.429 --> 00:01:02.756
&gt；&gt；Douglas Crockford：所以如果你没有得到这个，
&gt;&gt; Douglas Crockford: So if you didn't get this one,

17
00:01:02.756 --> 00:01:05.420
请把它写下来，因为我们下一次需要它。
please write it down cuz we're gonna need it for the next one.

18
00:01:07.439 --> 00:01:08.109
还有人吗？
Anybody else?

19
00:01:10.519 --> 00:01:12.879
&gt；&gt；演讲者3：嗯，这是不同的，我不知道怎么读和说。
&gt;&gt; Speaker 3: Well, it is different and I don't know how to read it and say that.

20
00:01:21.236 --> 00:01:25.662
&gt；&gt；扬声器3：效果未定义，返回undefined。
&gt;&gt; Speaker 3: The effects is undefined, return undefined.

21
00:01:25.662 --> 00:01:29.210
我不知道，我什么也看不到，没关系，继续走。
I don't know, I don't see anything, never mind, keep going.

22
00:01:29.210 --> 00:01:29.710
&GT；&GT；道格拉斯·克罗克福德：好的。
&gt;&gt; Douglas Crockford: All right.

23
00:01:32.810 --> 00:01:34.450
&gt；&gt；Douglas Crockford：所以我给你一分钟来捕捉这一点。
&gt;&gt; Douglas Crockford: So I'll give you a minute to capture this.

24
00:01:35.479 --> 00:01:41.895
所以在发生这件事的时候，有人能猜出这个名字吗？
So while that's happening can anyone guess the name

25
00:01:41.895 --> 00:01:47.256
对于我们应该编写的下一个函数&gt；&gt；Speaker 3：Lift g，
of the next function that we should write &gt;&gt; Speaker 3: Lift g,

26
00:01:47.256 --> 00:01:49.582
道格拉斯·克罗克福德：是的，非常好，
lift g &gt;&gt; Douglas Crockford: Yeah very very good,

27
00:01:49.582 --> 00:01:50.909
当然，举起g。
lift g, of course.

28
00:01:50.909 --> 00:01:52.438
接下来你还想写什么？
What else would you want to write next?

29
00:01:54.310 --> 00:01:55.864
编写一个函数Liftg。
Write a function liftg.

30
00:01:55.864 --> 00:02:00.079
这将接受一个二进制函数并将其应用于许多调用。
That will take a binary function and apply it to many invocations.

31
00:02:00.079 --> 00:02:01.549
所以它与我们以前做过的类似。
So it's similar to what we've done before.

32
00:02:01.549 --> 00:02:07.540
如果您将add函数传递给liftg，它将为您提供Aggi函数。
If you pass the add function to liftg it gives you the Aggi function.

33
00:02:07.540 --> 00:02:11.139
我们可以用乘法做同样的事情，你做多功能。
We can do the same thing with multiply you make the multifunction.

34
00:02:13.620 --> 00:02:16.795
&gt；&gt；Speaker 2：如果您传递了add into liftg，
&gt;&gt; Speaker 2: If you passed add into liftg,

35
00:02:16.795 --> 00:02:21.884
第一次操作的价值是多少？
what would the value of the first operation be?

36
00:02:24.990 --> 00:02:28.030
&gt；&gt；扬声器2：你第一次打电话会得到什么？
&gt;&gt; Speaker 2: What would you get back from the first time you call?

37
00:02:28.030 --> 00:02:30.610
&gt；&gt；Douglas Crockford：未定义。&gt；&gt；扬声器2：未定义。
&gt;&gt; Douglas Crockford: Undefined. &gt;&gt; Speaker 2: It would be undefined.

38
00:02:30.610 --> 00:02:33.129
&gt；&gt；Douglas Crockford：好吧，如果你要调用结果-
&gt;&gt; Douglas Crockford: Well if you were to call the resulting-

39
00:02:33.129 --> 00:02:34.361
&gt；&gt；扬声器2：不，而不是传入
&gt;&gt; Speaker 2: No, instead of passing in

40
00:02:34.361 --> 00:02:35.699
穆尔，你传给阿德。
mul, you pass in add.

41
00:02:35.699 --> 00:02:39.977
&gt；&gt；Douglas Crockford：对，虽然这样你得到一个未定义的，你得到3，然后
&gt;&gt; Douglas Crockford: Right, although so you get an undefined, you get 3, and

42
00:02:39.977 --> 00:02:41.560
然后你会得到7个。
then you’ll get 7.

43
00:02:41.560 --> 00:02:42.699
然后你会在表格上得到7和0。
And then you'll get 7 and 0 against the form.

44
00:02:42.699 --> 00:02:43.650
&gt；&gt；扬声器2：你得到3，0。
&gt;&gt; Speaker 2: You got 3, 0.

45
00:02:43.650 --> 00:02:46.007
&gt；&gt；Douglas Crockford：是的。
&gt;&gt; Douglas Crockford: Yeah.

46
00:02:46.007 --> 00:02:50.893
&gt；&gt；扬声器2：但是如果使用mul，则是3乘以1。
&gt;&gt; Speaker 2: But with mul you’re multiplying 3 times 1.

47
00:02:50.893 --> 00:02:54.590
好吧。&gt；&gt；Douglas Crockford：好的，那么
Okay. &gt;&gt; Douglas Crockford: All right so

48
00:02:54.590 --> 00:03:00.120
这里是liftg，liftg返回一个函数，
here is liftg, liftg returns a function,

49
00:03:01.210 --> 00:03:06.199
该函数获取第一个参数，如果未定义First，则返回First。
that function gets the first argument if first is undefined it returns first.

50
00:03:06.199 --> 00:03:08.909
否则，它将返回more函数。
Otherwise it returns the more function.

51
00:03:08.909 --> 00:03:14.030
more函数获取next参数，如果未定义next，则它首先返回。
The more function gets the next argument if next is undefined it returns first.

52
00:03:14.030 --> 00:03:18.530
否则，它将FIRST设置为带有FIRST和的二进制函数的结果
Otherwise it sets first to the result of the binary function with first and

53
00:03:18.530 --> 00:03:21.129
下一个并返回自身。
next And returns itself.

54
00:03:21.129 --> 00:03:25.860
那么，谁得到的东西，工作出色，非常好。
So who got something that works outstanding very very good.

55
00:03:25.860 --> 00:03:30.253
关于这个的任何问题，
Any questions about this one,

56
00:03:30.253 --> 00:03:35.492
任何人做一个不同的方法
anybody do a different approach that

57
00:03:35.492 --> 00:03:40.229
他们认为值得一提的是。
they think is worth mentioning.

58
00:03:40.229 --> 00:03:47.050
&gt；&gt；扬声器4：我做得很好，但我尝试了第一个选项编号。
&gt;&gt; Speaker 4: I do a great work but I tried First option number.

59
00:03:47.050 --> 00:03:53.599
&gt；&gt；Douglas Crockford：对，所以如果你没有得到这个，就把它放下来。
&gt;&gt; Douglas Crockford: Right so if you didn't get this one get it down.

60
00:03:53.599 --> 00:03:55.960
您可能想在下一篇文章中引用它。
You might want to refer to it in the next one.

61
00:03:55.960 --> 00:03:57.550
&gt；&gt；扬声器3：这当然还不错
&gt;&gt; Speaker 3: This is certainly good yet

62
00:03:57.550 --> 00:04:01.536
您可以在新函数内部执行函数，并泛化。
you function inside Inside the new function and generalize the.

63
00:04:04.762 --> 00:04:05.780
&gt；&gt；扬声器3：ig功能。
&gt;&gt; Speaker 3: The ig function.

64
00:04:05.780 --> 00:04:10.739
&gt；&gt；扬声器2：所以如果您第一次在没有任何内容的情况下调用它
&gt;&gt; Speaker 2: So the first time if you call this with nothing

65
00:04:10.739 --> 00:04:14.921
然后你会，你传入未定义的
then you would, you pass in undefined

66
00:04:17.798 --> 00:04:22.120
&gt；&gt；扬声器2：你只要找回自己。
&gt;&gt; Speaker 2: You just get back itself.

67
00:04:22.120 --> 00:04:24.050
&gt；&gt；Douglas Crockford：对，我们返回undefined so。
&gt;&gt; Douglas Crockford: Right we return undefined so.

68
00:04:24.050 --> 00:04:27.360
&gt；&gt；扬声器2：下次当你，所以如果你传入一个数字。
&gt;&gt; Speaker 2: The next time when you, so if you pass in a number.

69
00:04:28.769 --> 00:04:31.379
&gt；&gt；Douglas Crockford：这个数字现在是第一
&gt;&gt; Douglas Crockford: That number is now first and

70
00:04:31.379 --> 00:04:34.629
然后第二次，如果我们没有定义，我们首先返回。
then the second time if we get undefined we return first.

71
00:04:34.629 --> 00:04:37.060
&gt；&gt；扬声器2：号码现在是我看到的第一个。
&gt;&gt; Speaker 2: The number is now First I see.

72
00:04:39.740 --> 00:04:40.819
是的很好。
Yeah great.

73
00:04:43.680 --> 00:04:47.029
&gt；&gt；Douglas Crockford：编写一个函数组G，它将构建一个数组
&gt;&gt; Douglas Crockford: Write a function array G that will build an array for

74
00:04:47.029 --> 00:04:52.500
许多调用，所以如果我们调用数组G并且不传递任何内容，它将返回一个空数组。
many invocations So if we call array Gand pass it nothing It returns an empty array.

75
00:04:53.699 --> 00:04:58.360
如果我们传递给它三个，然后为空，它返回包含三个的数组。
If we pass it three and then nothing it returns array containing three.

76
00:04:58.360 --> 00:05:02.430
如果我们把它传递给三，然后是四，然后是五，没有返回三，
If we pass it through three and then four and then five, and nothing returns three,

77
00:05:02.430 --> 00:05:03.319
四和五。
four and five.

78
00:05:06.639 --> 00:05:13.600
好，这里是arrayg，arrayg接受第一个参数，它创建一个数组。
Okay so here is arrayg, arrayg takes a first argument, it creates an array.

79
00:05:14.610 --> 00:05:16.550
它使一个更多的功能和
It makes a more function and

80
00:05:16.550 --> 00:05:20.819
它返回使用第一个参数调用more函数的结果。
it returns the result of calling the more function with the first argument.

81
00:05:20.819 --> 00:05:26.339
more函数获取next参数，如果未定义next，则返回Array。
The more function gets the next argument if next is undefined it returns the Array.

82
00:05:26.339 --> 00:05:31.550
否则，它将下一个参数推送到Array上，并返回自身。
Otherwise it pushes the next argument onto the Array, and returns itself.

83
00:05:31.550 --> 00:05:32.750
那么谁有用的东西呢？
So who got something that works?

84
00:05:33.930 --> 00:05:35.699
非常好。
Very good, very good.

85
00:05:35.699 --> 00:05:38.610
有人试过用升降机吗？
Did anybody try using liftg?

86
00:05:40.379 --> 00:05:41.279
有人吗？
Anyone?

87
00:05:41.279 --> 00:05:45.762
那就有额外的学分了。
That would have an extra credit all right.

88
00:05:45.762 --> 00:05:48.149
所以我们再来一次。
So let's do another one.

89
00:05:48.149 --> 00:05:50.889
好的，我们知道了，我知道了，这对你来说是个不错的选择。
Okay we've I've got got this is a good one for you.

90
00:05:51.949 --> 00:05:56.139
使函数Continuize采用酉函数并
Make a function continuize that takes a unitary function and

91
00:05:56.139 --> 00:05:59.649
返回接受回调和参数的函数。
returns a function that takes a callback and an argument.

92
00:05:59.649 --> 00:06:03.720
有一种编程风格叫做延续传递风格。
There's a style of programming called continuation passing style.

93
00:06:03.720 --> 00:06:07.779
其中函数不是返回值，
In which functions, instead of returning values,

94
00:06:07.779 --> 00:06:12.970
取而代之的是提供一个额外的参数，该参数是要传递到的函数
instead are given an additional argument which is the function to which to deliver

95
00:06:12.970 --> 00:06:18.329
该值和延续传递样式的计算总是向前发展，
that value and in continuation passing style computation is always going forward,

96
00:06:18.329 --> 00:06:21.149
函数往往不返回任何内容。
functions tend not to return anything.

97
00:06:21.149 --> 00:06:24.850
他们总是向前走，这是令人惊异的。
They're always going forward and it's amazing.

98
00:06:24.850 --> 00:06:29.569
当JavaScript获得ES6的尾递归时，
And when JavaScript gets tail recursion with ES6,

99
00:06:29.569 --> 00:06:33.360
然后我们将能够在JavaScript中实现这一点，这将是非常棒的。
then we'll be able to do that in JavaScript and that will be great.

100
00:06:33.360 --> 00:06:38.649
因此，此函数旨在帮助我们迁移到这种编程风格。
So this function is intended to help us to migrate toward that style of programming.

101
00:06:39.779 --> 00:06:44.540
所以它所做的就是允许我们将任何现有的一元函数
So what it'll do is Allow us to take any existing unary function and

102
00:06:44.540 --> 00:06:47.939
将其转换为将接受回调的函数。
turn it into a function that will take a call back.

103
00:06:47.939 --> 00:06:51.509
所以在这种情况下，我们将传递平方根函数以继续WISE，
So in this case we're gonna pass the square root function to continue wise,

104
00:06:51.509 --> 00:06:55.600
它将使用回调函数返回平方根。
it will return the square root with a callback function.

105
00:06:55.600 --> 00:07:01.180
然后我们将调用该函数，并传入一个将接收结果的函数。
We will then call that function passing in a function that will receive the result.

106
00:07:01.180 --> 00:07:05.480
在这种情况下，我建议它可能是Alert函数，它是
In this case I'm suggesting that it could be the Alert function, which is something

107
00:07:05.480 --> 00:07:09.610
它存在于浏览器中，它将弹出一个框并向您显示答案。
that lives in the browser, which will pop up a box and show you the answer.

108
00:07:09.610 --> 00:07:13.529
如果您没有在浏览器中运行，您可以登录到控制台或
If you're not running in a browser you could log to the console or

109
00:07:13.529 --> 00:07:15.060
不管你在做什么。
whatever you're doing.

110
00:07:15.060 --> 00:07:19.759
一些仅仅是看到结果走向的某种方式。
Some just some way of seeing where the result is going to go.

111
00:07:19.759 --> 00:07:24.560
然后将传入81，这是我们想要取的平方根的数字。
And then will pass in 81 which is the number we want to take the square root of.

112
00:07:24.560 --> 00:07:26.949
所以如果这个函数工作正常，
So if this function is working correctly,

113
00:07:26.949 --> 00:07:30.680
然后我们应该在浏览器上看到一个带有数字9的框。
then we should see a box show up on the browser with the number 9 in it.

114
00:07:32.350 --> 00:07:37.639
好的，这里是Continuize，Continuize取一元函数返回
Okay, so here's continuize, continuize takes a unary function The returns

115
00:07:37.639 --> 00:07:41.269
获取回调和参数并返回调用结果的函数的
of function that takes a callback and an argument and returns result of calling

116
00:07:41.269 --> 00:07:45.579
带有一元函数和参数结果的回调函数。
the callback function with the result of the unary function and the argument.

117
00:07:45.579 --> 00:07:46.819
那么谁有用的东西呢？
So who got something that works?

118
00:07:48.220 --> 00:07:53.220
恭喜您现在已经跻身JavaScript程序员的90%行列。
Congratulations you are now in the 90% tile of JavaScript programmers.

119
00:07:54.480 --> 00:07:58.259
并不是说门槛很高，而是&gt；&gt；扬声器2：[笑]
Not that the bar was ever very high but &gt;&gt; Speaker 2: [LAUGH]

120
00:07:58.259 --> 00:07:59.120
&gt；&gt；Douglas Crockford：但是你在上面
&gt;&gt; Douglas Crockford: But you're up there

121
00:07:59.120 --> 00:08:03.660
这是因为你理解了语言的一个方面，
and it's because you understand an aspect of the language which is really,

122
00:08:03.660 --> 00:08:07.959
非常重要，非常重要的是，大多数使用这种语言的人
really important, vitally important that most of the people working this language

123
00:08:07.959 --> 00:08:10.670
不知道，甚至不知道它在那里。
don't know, don't know that it's even there.

124
00:08:10.670 --> 00:08:12.949
这真的很重要。
And it's really important.

125
00:08:12.949 --> 00:08:18.980
我们在过去的一天里所做的是一个范式的转变。
What we've been doing over the last day is a paradigm shift.

126
00:08:18.980 --> 00:08:22.920
我可以说上几个小时
I could talk for hours and hours about

127
00:08:22.920 --> 00:08:25.870
当您有一个函数返回一个函数，并返回一个函数时，会发生什么情况
what could happen when you have a function that returns a function and

128
00:08:25.870 --> 00:08:28.980
你会认为你会明白这些话然后说是的但是，
you would think you would understand those words and go yeah but,

129
00:08:28.980 --> 00:08:33.600
除非你已经做了几十次，否则真的不会有什么不同。
unless you've done it a few dozen times, it really won't make any difference.

130
00:08:33.600 --> 00:08:36.340
这不会有任何意义，但你现在已经做到了。
It won't make any sense but you've done it now.

131
00:08:36.340 --> 00:08:38.480
昨天早上你进来的时候。
When you came in here yesterday morning.

132
00:08:38.480 --> 00:08:40.850
你不知道如何写这个函数。
You did not know how to write this function.

133
00:08:40.850 --> 00:08:42.019
你刚刚把它敲下来了。
And you just knocked it off.

134
00:08:42.019 --> 00:08:43.990
你写得很快，而且写对了。
You wrote it very quickly and you got it right.

135
00:08:43.990 --> 00:08:45.610
对你太好了。
So good for you.

136
00:08:45.610 --> 00:08:51.019
我们经历这一切的原因是我想再次向你解释
And the reason we went through all of this is that I wanted to explain to you again

137
00:08:51.019 --> 00:08:56.059
我在第一天做的事情，你以为你明白了，但你没有。
something that I did on the first day that you thought you understood but you didn't.

138
00:08:56.059 --> 00:08:57.960
所以，我们要再来一遍。
So, we're going to go through that again.

139
00:08:57.960 --> 00:09:02.789
现在和这一次，您已经有了上下文的工具
Now and this time you now have the tools of the context

140
00:09:02.789 --> 00:09:04.519
为了理解我在说什么
in order to understand what I was talking about
