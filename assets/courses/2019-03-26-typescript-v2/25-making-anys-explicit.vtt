WEBVTT

1
00:00:00.450 --> 00:00:06.009
迈克 · 诺斯: 第二步，你们将从通过测试开始,
&gt;&gt; Mike North: Step 2,
you will start with your tests passing,

2
00:00:06.009 --> 00:00:08.119
你要禁止暗藏的茴香酒。
you will ban implicit anys.

3
00:00:08.119 --> 00:00:15.570
这是一个 tsconfig 编译器选项，noImplicitAny，true。
And this is a tsconfig compiler option,
noImplicitAny, true.

4
00:00:15.570 --> 00:00:21.649
因此，设置为 true 意味着，而不是打字稿回落到任何地方
So setting that to true means, instead of
TypeScript falling back to any in places

5
00:00:21.649 --> 00:00:26.760
如果它不能通过推理解决问题，它就会向你抛出一个错误。
where it can't figure things out through
inference, it will throw an error at you.

6
00:00:26.760 --> 00:00:28.905
不抛出一个错误，但它会给你一个编译错误。
Not throw an error but
it will give you a compile error.

7
00:00:31.193 --> 00:00:35.561
迈克 · 诺斯: 那么你就会有一个基本的待办事项清单
&gt;&gt; Mike North: So you're gonna then have
basically a to-do list, and it's mostly

8
00:00:35.561 --> 00:00:40.420
隐式 anys 组成，现在已经变成了编译错误。
going to consist of implicit anys that
now have turned into compile errors.

9
00:00:40.420 --> 00:00:45.969
你们要尽可能提供有意义的类型,
And you are gonna go through and
provide meaningful types where you can,

10
00:00:45.969 --> 00:00:49.770
如果你不能，你可以使用一个明确的“任何”。
and where you can't,
you'll use an explicit any.

11
00:00:49.770 --> 00:00:53.920
你可以添加一个类型注释，这是一个 any,
You'll add a type annotation saying,
this is an any,

12
00:00:53.920 --> 00:00:58.140
我明确地说，这里什么都行。
I am explicitly saying,
whatever is fine here.

13
00:00:59.429 --> 00:01:02.619
这是一个很好的时间来强调明确的类型,
This is a good time for
me to highlight DefinitelyTyped,

14
00:01:02.619 --> 00:01:07.719
这是一个提供环境类型信息的开源项目，对吗？
which is an open source project that
provides ambient type information, right?

15
00:01:07.719 --> 00:01:10.280
这就像 DTS 文件一样。
This is like the DTS files.

16
00:01:10.280 --> 00:01:17.250
它提供单独的 npm 包，您可以带入，理想情况下，它将完美
It provides separate npm packages that you
can bring in and it'll, ideally, perfectly

17
00:01:17.250 --> 00:01:21.920
在你习惯使用的基础 JavaScript 代码基础之上。
lay on top of the underlying JavaScript
code base that you're used to using.

18
00:01:21.920 --> 00:01:25.719
例如，如果要使用 Lodash，则
For example,
if you want to use Lodash, which

19
00:01:25.719 --> 00:01:28.750
除非最近发生了什么变化，否则这不是用打字稿写的。
unless something has changed recently,
that is not written in TypeScript.

20
00:01:28.750 --> 00:01:30.510
它是用常规的 JavaScript 编写的。
It's written in regular JavaScript.

21
00:01:30.510 --> 00:01:32.340
您可以导入 Lodash 类型，以及
You can import the Lodash types, and

22
00:01:32.340 --> 00:01:37.469
你会从输入代码中得到所有的好处。
you'll get all of the benefits
that you get from typed code.

23
00:01:37.469 --> 00:01:39.810
但是它真的很像实现
But it's really like
the implementation and

24
00:01:39.810 --> 00:01:41.849
然后把类型信息放在上面。
then the type information
laying on top of it.

25
00:01:43.340 --> 00:01:47.569
打印出来的出版物，成千上万的图书馆和
DefinitelyTyped publishes out
to thousands of libraries and

26
00:01:47.569 --> 00:01:53.748
它们都在 npm 包作用域中输入或输入类型。
they all are in the npm package
scope at typed or at types.

27
00:01:55.159 --> 00:01:58.430
所以你会看到在类型斜杠粗线。
So you'll see at types slash lodash.

28
00:01:58.430 --> 00:02:01.430
如果你看一下这个工作坊项目的 JSON 包,
And if you look in the package
JSON on this workshop project,

29
00:02:01.430 --> 00:02:05.420
我想您将在类型斜杠节点中看到。
I think you'll see at types slash node.

30
00:02:05.420 --> 00:02:08.689
这里有 fs 模块和 path 模块,
So that has the fs module and
the path module,

31
00:02:08.689 --> 00:02:11.900
所有的类型信息都在这里，对吗？
all the type information there, right?

32
00:02:11.900 --> 00:02:16.728
所以现在是一个很好的时机，开始把它作为一种
So this is a good time to sort of
start bringing that in as a way of

33
00:02:17.789 --> 00:02:20.979
与这些暗藏的杀手作斗争。
combating these implicit anys.

34
00:02:20.979 --> 00:02:23.280
然后你就可以让你的测试再次通过
And then you're going to get
your test passing again, and

35
00:02:23.280 --> 00:02:25.900
这是第二次独立民意调查。
this is a second independent poll request.
