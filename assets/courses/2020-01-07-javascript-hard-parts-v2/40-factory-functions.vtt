WEBVTT

1
00:00:00.220 --> 00:00:05.080
威尔 · 森塔斯: 还有什么其他的方法可以做到，内置函数是什么
&gt;&gt; Will Sentance: What's another way that
I can, what's a built-in function of

2
00:00:05.080 --> 00:00:10.230
的输出将永远是一个空对象？
JavaScript whose output will be
an empty object forevermore?

3
00:00:10.230 --> 00:00:11.082
是的，亚当，拜托？
Yeah, Adam, please?

4
00:00:11.082 --> 00:00:11.910
亚当: 反对，创造。
&gt;&gt; Adam: Object.create.

5
00:00:11.910 --> 00:00:15.955
威尔 · 森坦斯: 反对。创建，非常好，来自亚当，是的，完全正确。
&gt;&gt; Will Sentance: Object.create,
very nice, from Adam, yeah, spot-on.

6
00:00:15.955 --> 00:00:18.129
用户3使用 object.create。
User3 using object.create.

7
00:00:18.129 --> 00:00:19.829
这是 JavaScript 中的一个内置函数。
This is a built-in function in JavaScript.

8
00:00:21.179 --> 00:00:27.140
它会给我们一些细粒度的，这是一个书呆子的词。
It's gonna give us later on some
fine-grained, it's such a nerdy word.

9
00:00:27.140 --> 00:00:30.440
给我们一些对对象的细粒度控制。
Give us some fine-grained
control over our object.

10
00:00:30.440 --> 00:00:34.009
但我只想让你们知道，这是唯一的事情
But I just want you all to know for
now, it's only thing

11
00:00:35.929 --> 00:00:42.060
就我们的对象本身而言，就是返回一个空对象。
in terms of our object itself, that it
does, is return out an empty object.

12
00:00:42.060 --> 00:00:43.780
右手边这里。
So right hand side here.

13
00:00:44.990 --> 00:00:47.369
我们先从左边开始。
Well let's just declare
left hand side here first.

14
00:00:48.399 --> 00:00:50.210
轮到你了，凯拉。
Over to you Kayla.

15
00:00:50.210 --> 00:00:53.399
等等，为什么我总是跳过最后一个字母？
Hold on,
why do I always skip the last letter?

16
00:00:53.399 --> 00:00:55.070
这很有趣，不是吗？
It's very interesting, right?

17
00:00:55.070 --> 00:00:57.789
一定是我在加速我的写作。
It must be me trying to
accelerate my writing.

18
00:00:57.789 --> 00:00:59.244
好吧。
All right, yeah.

19
00:00:59.244 --> 00:01:01.750
先从左手边开始，吉拉。
Left-hand side first Kyla.

20
00:01:02.909 --> 00:01:05.159
我们宣布一个常量用户3。
&gt;&gt; Kayla: We're declaring
a constant User3.

21
00:01:05.159 --> 00:01:06.269
威尔 · 森坦斯: 是的，用户3，非常好。
&gt;&gt; Will Sentance: Yeah, user3, excellent.

22
00:01:06.269 --> 00:01:10.069
右手边的人会马上从我们这里回来什么，凯拉？
Right-hand side is gonna immediately
return fro us what Kyla?

23
00:01:10.069 --> 00:01:10.780
一个空物体。
&gt;&gt; Kayla: An empty object.

24
00:01:10.780 --> 00:01:11.760
一个空的物体。
&gt;&gt; Will Sentance: An empty object.

25
00:01:11.760 --> 00:01:12.950
就是这样，人们。
That is it people.

26
00:01:12.950 --> 00:01:18.045
所以即使我愿意，威尔 · 森塔斯: 甚至
And so even if I were to,
&gt;&gt; Will Sentance: Even

27
00:01:18.045 --> 00:01:20.242
如果我进入了那些幻想,
if I were to pass into those parethens,

28
00:01:20.242 --> 00:01:24.409
你可能认为那些有知识的父母是聪明的 md。
you might think those parethens
having knowledge is wise MD.

29
00:01:24.409 --> 00:01:29.120
我可以传入一个对象，这个对象充满了各种属性,
I could pass in an object in there
full of objects full of properties,

30
00:01:29.120 --> 00:01:32.609
我不管我通过它，我可以通过一个麻木任何我想要的。
I don't matter what I pass it,
I could pass in a numb anything I want.

31
00:01:32.609 --> 00:01:35.609
它将返回一个空对象。
It's going to return out an empty object.

32
00:01:35.609 --> 00:01:40.591
现在，这个空对象可能具有一些隐藏属性，这取决于我们
Now that empty object might have some
hidden properties on depending on what we

33
00:01:40.591 --> 00:01:42.707
进入，或隐藏的财产。
pass in, or hidden property on.

34
00:01:42.707 --> 00:01:47.759
但它总是一个空对象，没有直接属性。
But it's always an empty object,
no direct properties on it.

35
00:01:47.759 --> 00:01:53.140
然后，我们将分配到它的 name 属性，即值。
We then assign through to it name
property, which is the value.

36
00:01:53.140 --> 00:01:57.920
伊娃学校已经储存在它。
Eva school which has stored in it.

37
00:01:59.400 --> 00:02:03.659
9和再增量方法，这是一个函数。
9 and again increment
method which is a function.

38
00:02:08.530 --> 00:02:12.372
让我们来确认一下我是否能做我自己的重要事情。
Let's just confirm whether I
can do my own important thing.

39
00:02:12.372 --> 00:02:19.590
3. increment，Todd 我能帮你吗？
Use3.increment, Todd can I assist you?

40
00:02:19.590 --> 00:02:22.979
我的第一次是一次又一次，他是我的绿色从我看这里。
My first time ever was again and again and
he's my green from I look up here.

41
00:02:24.139 --> 00:02:26.210
是的，绿色的杯子。
Yeah green for the cup.

42
00:02:26.210 --> 00:02:28.854
我在哪里可以找到 user3，Todd？
Where do I look for user3, Todd?

43
00:02:28.854 --> 00:02:29.723
托德: 在对象存储器里。
&gt;&gt; Todd: In the Object memory.

44
00:02:29.723 --> 00:02:31.090
威尔 · 森塔斯: 进化记忆，是吗？
&gt;&gt; Will Sentance: Evo memory, isn't it?

45
00:02:31.090 --> 00:02:31.969
托德: 是的。
&gt;&gt; Todd: Yes.

46
00:02:31.969 --> 00:02:33.848
为什么我要寻找增量？
&gt;&gt; Will Sentance: Why do I look for
increments?

47
00:02:33.848 --> 00:02:35.227
Todd: 在 user3对象中。
&gt;&gt; Todd: In the user3 object.

48
00:02:35.227 --> 00:02:36.399
威尔 · 森特斯: 我找到了吗。
&gt;&gt; Will Sentance: And do I find it.

49
00:02:36.399 --> 00:02:37.509
托德: 是的 威尔 · 森特斯: 如果我这么做。
&gt;&gt; Todd: Yes.
&gt;&gt; Will Sentance: If I do.

50
00:02:37.509 --> 00:02:41.969
抓住它的代码和执行它是一个梦想成真。
Grab its code and
execute it be was a dream come true.

51
00:02:41.969 --> 00:02:43.430
梦想成真了。
It's a dream come true.

52
00:02:43.430 --> 00:02:45.250
我做的这个是面向对象的。
I done this is an object oriented.

53
00:02:47.530 --> 00:02:50.729
我有数据和函数，数据方法一起工作
I've got data and functions,
data methods that work together and

54
00:02:50.729 --> 00:02:51.689
不要和其他东西一起工作。
don't work with other stuff.

55
00:02:51.689 --> 00:02:54.400
现在，严格地说，我可以在其他领域使用这些函数。
Now, strictly I could always use
these function in other areas.

56
00:02:54.400 --> 00:02:57.000
所以它不是严格意义上的保护
So it's not strictly kind of protected but
for

57
00:02:57.000 --> 00:02:59.189
一般来说，我们可以走了。
general purposes,
we're pretty much good to go.

58
00:03:01.430 --> 00:03:04.960
但是我的代码越来越重复，我们违反了什么原则，瑞安？
But I codes getting repetitive,
what principles are we breaking Ryan?

59
00:03:06.210 --> 00:03:06.870
瑞恩: 画画 威尔 · 句子: 抽签,
&gt;&gt; Ryan: Draw.
&gt;&gt; Will Sentance: Draw,

60
00:03:06.870 --> 00:03:10.319
我不想重复你的话，这些命令都是我们手工制作的。
I don't repeat yourself,
we hand crafting these orders.

61
00:03:10.319 --> 00:03:11.500
每次用户登录,
Every time a user logs in,

62
00:03:11.500 --> 00:03:15.900
我们得把幕后的开发商都写出来。
we're gonna have to write out fully the
developers behind the scenes filling out.

63
00:03:15.900 --> 00:03:17.520
它们的特性。
Their properties.

64
00:03:17.520 --> 00:03:23.050
无论何时，只要我们的代码被多次执行，比如添加属性。
Whenever we have code that is being done
multiple times, like adding properties.

65
00:03:23.050 --> 00:03:27.930
当我们一遍又一遍地写代码的时候，我们倾向于做什么？
What do we tend to do whenever we're doing
lines of code, again and again and again?

66
00:03:27.930 --> 00:03:29.400
我们用什么把他们包起来，托德？
What do we wrap them up in, Todd?

67
00:03:29.400 --> 00:03:33.310
托德: 我会归纳函数，抽象它，然后向下。
&gt;&gt; Todd: I would generalize function,
abstract it, down.

68
00:03:33.310 --> 00:03:34.199
威尔 · 句子: 加入一个函数。
&gt;&gt; Will Sentance: Put in a function.

69
00:03:34.199 --> 00:03:36.280
保存它一次又一次地使用。
Save it once use again and again.

70
00:03:36.280 --> 00:03:40.199
唯一需要修改的部分是 Parson 作为要指定的输入
And the only bits you want to change have
those be Parson as inputs to specify

71
00:03:40.199 --> 00:03:42.189
当你运行这个函数的时候，它到底要做什么。
when you run the function,
what it's actually going to do.

72
00:03:42.189 --> 00:03:45.090
是的，但是对付托德正是我们要做的。
Yes but
on Todd is exactly what we're gonna do.

73
00:03:45.090 --> 00:03:46.960
人们的解决方案之一就是
And folks solution one for and

74
00:03:46.960 --> 00:03:50.340
我只是想再钻探一次，以防人们真的没有这种感觉。
I just wanna drill one more time in case
people aren't really really feeling this.

75
00:03:50.340 --> 00:03:51.697
这是一个梦想成真
It is a dream come true for

76
00:03:51.697 --> 00:03:55.973
当我写100,000行代码的时候，当我说我的数据。
me when I'm writing with 100,000 lines
of code that when I say my data.

77
00:03:55.973 --> 00:04:00.602
我的功能并不神秘。
There's no mystery as to
what my functionality is.

78
00:04:03.432 --> 00:04:07.134
威尔 · 森塔斯: 我的功能是什么
&gt;&gt; Will Sentance: Well, what my
functionality is that will apply to that

79
00:04:07.134 --> 00:04:11.319
数据，因为看看那些人，就在那里。
data because look at that folk,
it's right there.

80
00:04:11.319 --> 00:04:13.240
可以应用于该数据的函数。
The function that could
be applied to that data.

81
00:04:13.240 --> 00:04:17.519
一旦你开始思考这个范式,
And once you start thinking
in terms of this paradigm,

82
00:04:17.519 --> 00:04:21.610
把你的数据和功能放在一起。
of putting your data and
the functionality together in one place.

83
00:04:21.610 --> 00:04:24.430
用户3所需要的所有功能都在这里。
All the functionality I could ever
need for the user3 is right there.

84
00:04:24.430 --> 00:04:28.329
一旦你开始以这种方式思考，你就开始经常这样做。
Once you start thinking in that way,
you start doing this a lot.

85
00:04:28.329 --> 00:04:30.790
您开始将应用程序中的所有内容都考虑为
You start thinking of everything
in your applications as

86
00:04:30.790 --> 00:04:34.470
这个特殊功能的功能数据是什么？
what's the data in the functionality
connected to that particular feature?

87
00:04:34.470 --> 00:04:36.329
这真的非常非常好。
It's actually really, really nice.

88
00:04:36.329 --> 00:04:39.259
这并不像我强调的那样受欢迎
It's not as popular as why
I'm really emphasizing

89
00:04:39.259 --> 00:04:41.360
这是关于理解 JavaScript 的原则。
this is about understanding
the principles in JavaScript.

90
00:04:41.360 --> 00:04:43.970
让我们这样做，我们使用的各地。
Let us do this,
which we use all over the place.

91
00:04:43.970 --> 00:04:47.740
因为面向对象编程的范例并不是越来越流行
Because the paradigm of object oriented
programming is not as popular increasingly

92
00:04:47.740 --> 00:04:52.579
作为函数式编程风格，但是非常惊人，非常直观。
as the functional programming style,
but are amazing, really intuitive.

93
00:04:52.579 --> 00:04:57.177
构造应用程序的思维方式，应用程序就是数据。
Way of thinking about structuring
an application, application is data.

94
00:04:57.177 --> 00:05:00.745
用户得分，无论是什么功能，改变用户得分的能力,
User scores, whatever functionality,
the ability to change that user score,

95
00:05:00.745 --> 00:05:01.545
把它放在一起。
put it together.

96
00:05:01.545 --> 00:05:05.867
看看这个，就是这个。
And look at it, is that right there.

97
00:05:05.867 --> 00:05:07.879
很漂亮，但我们正在进行移动时间。
Beautiful, but we're doing a mobile time.

98
00:05:07.879 --> 00:05:14.000
现在让我们来创建对象，保存一次。
So now let's do the work of
creating the object, save it once.

99
00:05:15.600 --> 00:05:20.449
创建对象，然后想用多少次就用多少次。
Create the objects and
then use it as many times as we like.

100
00:05:20.449 --> 00:05:22.170
这正是我们要做的。
That's exactly what we're gonna do here.

101
00:05:22.170 --> 00:05:24.699
生成我们的对象，生成甚至不是正确的词。
Generate our objects,
generate isn't even the right word.

102
00:05:24.699 --> 00:05:28.620
使用函数创建并返回对象。
Create and
return our objects using a function.

103
00:05:28.620 --> 00:05:32.079
这个解决方案，一个人最终会被证明是站不住脚的。
This solution one people going
to turn out to be untenable.

104
00:05:32.079 --> 00:05:36.949
你永远不可能在实践中使用它，但它可以让我们走很长的路。
You can never use it in practice,
but it gets us a long way there.

105
00:05:36.949 --> 00:05:40.230
我们所做的一切都是为了让这个过程更有效率。
Everything else we do it's just about
making this much, much more efficient.

106
00:05:40.230 --> 00:05:40.949
在这一点上，我已经给了你一个提示。
I have given you a hint there.
