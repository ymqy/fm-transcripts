WEBVTT

1
00:00:00.110 --> 00:00:02.988
现在我们进入函数式编程的一个很酷的部分,
&gt;&gt; Will Sentance: Now we move on to
a cool part of functional programming,

2
00:00:02.988 --> 00:00:06.982
也许你们中的一些人认为我在这里的函数式编程演讲。
which maybe some of you thought the
functional programming talk I gave here.

3
00:00:06.982 --> 00:00:09.490
但是让我们从为什么我们有功能开始吧？
But let's start off with why
do we even have functions?

4
00:00:09.490 --> 00:00:10.429
为什么我们会有它们？
Why do we even have them?

5
00:00:11.789 --> 00:00:12.380
让我们看看为什么。
Let's see why.

6
00:00:12.380 --> 00:00:16.940
让我们创建一个函数10的平方，不接受输入，返回10乘以10，并且
Let's create a function 10 squared,
takes no input, returns 10 by 10, and for

7
00:00:16.940 --> 00:00:19.809
一旦我想要这些函数的确切措辞。
once I want the exact
wordings of these functions.

8
00:00:19.809 --> 00:00:22.679
那么，Ryan，这个函数的确切措辞是什么？
So, Ryan,
what's the exact wording of this function?

9
00:00:24.329 --> 00:00:29.105
函数10的平方没有输入返回，具体的措辞是什么，Ryan，在这里？
Function 10 squared take no input returns,
what'll be the exact wording Ryan, here?

10
00:00:29.105 --> 00:00:31.539
我们要用传统的风格。
We're gonna use the traditional style.

11
00:00:31.539 --> 00:00:35.570
顺便说一句，我应该说，我们将看到一个更加流行的风格
By the way, I should say, we're gonna
see an ever more popular style of

12
00:00:35.570 --> 00:00:38.350
声明和保存功能。
declaring and saving functions
in a moment in a little bit.

13
00:00:38.350 --> 00:00:41.350
但是现在，让我们使用传统的函数声明样式。
But for now, let's use the traditional
function declaration style.

14
00:00:41.350 --> 00:00:42.719
我怎样申报？
How do I declare?

15
00:00:42.719 --> 00:00:44.179
如何保存一个函数的10平方？
How do I save a function 10 square?

16
00:00:44.179 --> 00:00:47.399
我要告诉计算机什么关键字，我要保存一个函数？
What keyword do I tell the computer,
I'm gonna save a function?

17
00:00:47.399 --> 00:00:49.104
讲者2: 功能 威尔 · 斯坦斯: 功能，非常好,
&gt;&gt; Speaker 2: Function?
&gt;&gt; Will Sentance: Function, pretty good,

18
00:00:49.104 --> 00:00:50.200
好极了。
excellent.

19
00:00:50.200 --> 00:00:51.960
这就是功能。
There it is, function.

20
00:00:51.960 --> 00:00:54.039
我该怎么称呼它呢？
What should I call it?

21
00:00:54.039 --> 00:00:55.030
演讲者2:10的平方？
&gt;&gt; Speaker 2: 10 squared?

22
00:00:55.030 --> 00:00:56.479
是的，它需要任何输入吗？
&gt;&gt; Will Sentance: Yeah,
does it take any inputs?

23
00:00:57.609 --> 00:00:58.240
讲者2: 没有。
&gt;&gt; Speaker 2: Does not.

24
00:00:58.240 --> 00:01:00.490
威尔 · 句子: 不，所以是空括号。
&gt;&gt; Will Sentance: No,
so empty parenthesis.

25
00:01:00.490 --> 00:01:02.895
然后在函数的主体里，我们得到了？
And then in the body of the function Ryan,
we've got?

26
00:01:02.895 --> 00:01:06.299
演讲者2:10乘以10。
&gt;&gt; Speaker 2: Returns 10 times 10.

27
00:01:06.299 --> 00:01:10.641
威尔 · 森特斯: 是的，太棒了，瑞安。
&gt;&gt; Will Sentance: Yeah, brilliant, Ryan.

28
00:01:10.641 --> 00:01:15.515
Ryan 对这个功能很失望，我可以从他的语气中看出来。
Ryan is disappointed with this function
I can tell already by his tone of voice.

29
00:01:15.515 --> 00:01:19.106
威尔 · 森特斯: 你的语气瑞恩,
&gt;&gt; [LAUGH]
&gt;&gt; Will Sentance: Your tone of voice Ryan,

30
00:01:19.106 --> 00:01:21.060
我不怪你。
I don't blame you.

31
00:01:21.060 --> 00:01:22.579
我们打电话，我们得到什么莱恩？
We call it, we get what Ryan?

32
00:01:24.090 --> 00:01:25.637
大家会怎么评估？
It's gonna evaluate to what everybody?

33
00:01:25.637 --> 00:01:26.802
讲者3:100 威尔 · 森坦斯: 100。
&gt;&gt; Speaker 3: 100.
&gt;&gt; Will Sentance: 100.

34
00:01:26.802 --> 00:01:31.647
很好，但是我们要写这个函数吗？
Great, but do we write this function?

35
00:01:31.647 --> 00:01:32.978
演讲者3: 没有
&gt;&gt; Speaker 3: No.
[LAUGH]

36
00:01:32.978 --> 00:01:33.810
威尔 · 森特斯: 我喜欢这个功能,
&gt;&gt; Will Sentance: I love this function,

37
00:01:33.810 --> 00:01:35.280
这是一个可怕的功能。
this is a terrible function.

38
00:01:35.280 --> 00:01:37.740
9的平方怎么样？
What about 9 squared?

39
00:01:37.740 --> 00:01:40.420
伊森，我该怎么做才能改变这一切？
Ethan, what would I do to change this or
no?

40
00:01:40.420 --> 00:01:41.968
保存后无法编辑函数。
Can't edit functions once I've saved them.

41
00:01:41.968 --> 00:01:43.250
想要建立9的平方。
Wanna build 9 squared.

42
00:01:43.250 --> 00:01:45.319
我走了，我该写什么，伊森？
Off I go.
What would I write, Ethan?

43
00:01:45.319 --> 00:01:48.259
演讲者2: 声明一个函数，9的平方。
&gt;&gt; Speaker 2: Declare a function,
9 squared.

44
00:01:48.259 --> 00:01:50.918
威尔 · 森特斯: 难道我必须写作，所以你和我一起受苦吗
&gt;&gt; Will Sentance: Do I have to write,
so you suffer with me, and

45
00:01:50.918 --> 00:01:52.962
我们意识到为什么我们有功能。
we realize why we have functions.

46
00:01:52.962 --> 00:01:55.879
我要再写一遍，不过没问题。
I'm gonna write it out again, yet okay.

47
00:01:55.879 --> 00:01:56.520
没有。
No.

48
00:01:56.520 --> 00:01:57.549
说吧，伊森。
Go ahead, Ethan.

49
00:01:57.549 --> 00:01:59.479
你知道吗? ，这可不仅仅是擦板子那么简单？
This is gonna be more wiping
down the board, you know that?

50
00:01:59.479 --> 00:02:01.030
讲者2: 报税表9乘以9。
&gt;&gt; Speaker 2: Returns 9 times 9.

51
00:02:01.030 --> 00:02:02.409
威尔 · 森塔斯: 实际上，事实就是这样
&gt;&gt; Will Sentance: Actually,
the fact it takes so

52
00:02:02.409 --> 00:02:06.049
把黑板擦干净是我们前提的比喻。
long to wipe the board down is something
of a metaphor for our premise.

53
00:02:06.049 --> 00:02:10.550
这相当于编辑和编写代码，非常合适。
That's equivalent to editing and
writing code, it's very appropriate.

54
00:02:10.550 --> 00:02:12.907
我们要写这个函数吗，伊森？
Yeah, do we write this function, Ethan?

55
00:02:12.907 --> 00:02:13.509
不不,
No.
No,

56
00:02:13.509 --> 00:02:15.259
我们不想重写这样的东西。
we don't wanna rewrite stuff like this.

57
00:02:16.469 --> 00:02:19.091
那么9的平方呢？
But what about, there you go, 9 squared?

58
00:02:19.091 --> 00:02:21.872
我会证实我的小朋友，看看那个小家伙。
I'll confirm my little friendly,
look at that little guy.

59
00:02:21.872 --> 00:02:25.502
所以他很不安，很不安。
So he's so perturbed, there so perturbed.

60
00:02:25.502 --> 00:02:26.556
谁知道呢? 心烦意乱，心烦意乱。
Who knows?
There perturbed, perturbed.

61
00:02:26.556 --> 00:02:30.550
加上一个8平方的函数，125平方的函数人。
Add an 8 squared function,
125 squared function people.

62
00:02:30.550 --> 00:02:33.189
各位，我们要打破什么原则？
What principle, everybody,
are we breaking?

63
00:02:33.189 --> 00:02:33.759
每个人都知道吗？
Does everyone know?

64
00:02:33.759 --> 00:02:34.620
是的，干的。
Yeah, DRY.

65
00:02:34.620 --> 00:02:35.637
不要重复自己的话，好吗？
Don't repeat yourself, right?

66
00:02:35.637 --> 00:02:39.670
这是编程的一个基本原则，写得越少越好。
This is a fundamental principle in
programming, write as little as possible.

67
00:02:39.670 --> 00:02:48.180
而且不仅仅是以每小时一美元的单词为前提。
And not just from a premise
of words per hour per dollar.

68
00:02:48.180 --> 00:02:54.020
但是，从更深的意义上说，我们不想在不必要的时候重写代码。
But, in a deeper sense, we don't wanna
be rewriting code when we don't have to.

69
00:02:54.020 --> 00:02:58.370
因为如果我们这样做的话，跟踪和维护我们正在做的事情就会变得非常非常困难。
Because it gets much, much harder to track
and maintain what we're doing if we do so.

70
00:02:58.370 --> 00:03:01.150
我们打破了我们的原则干，不要重复你自己。
We're breaking our principal DRY,
Don't Repeat Yourself.

71
00:03:01.150 --> 00:03:04.030
那么，我们在这里能做些什么呢？
So, what could we do here, instead?

72
00:03:04.030 --> 00:03:07.443
接下来，彼得，我们在这里能做些什么呢,
Turning to, Peter,
what could we do here, instead,

73
00:03:07.443 --> 00:03:10.205
除了写出一个9的平方？
besides writing out a function 9 squared?

74
00:03:10.205 --> 00:03:11.337
函数8的平方？
A function 8 squared?

75
00:03:11.337 --> 00:03:13.858
什么东西每次都是一样的？
What is the thing that's the same,
each time?

76
00:03:13.858 --> 00:03:15.680
那么，我们能做什么，而不是在这里，彼得？
So, what could we do,
instead, here, Peter?

77
00:03:15.680 --> 00:03:17.030
演讲者2: 方形是一样的。
&gt;&gt; Speaker 2: The squaring is the same.

78
00:03:17.030 --> 00:03:19.020
所以，我们可以归纳输入。
So, we could generalize the input.

79
00:03:19.020 --> 00:03:20.509
威尔 · 森特斯: 美丽，奇妙,
&gt;&gt; Will Sentance: Beautiful, fantastic,

80
00:03:20.509 --> 00:03:24.939
我们可以通过泛化函数使其更具可重用性。
we can generalize the function
to make it more reusable.

81
00:03:24.939 --> 00:03:28.439
我们可以构建一个像 squared 这样的函数，不，我们保存它的代码，但是
We could build a function like squared,
no, we save the code of it, but

82
00:03:28.439 --> 00:03:31.969
我们留下一点代码待定。
we leave a little bit of that code TBD.

83
00:03:31.969 --> 00:03:36.765
具体来说，我们留下了什么样的数据，什么样的东西可以乘以它自己。
Specifically, we leave exactly what data,
what thing we're gonna multiply by itself.

84
00:03:36.765 --> 00:03:37.546
因为他们都是一样的。
Cuz they're all the same.

85
00:03:37.546 --> 00:03:39.093
9 * 9.
9 by 9.

86
00:03:39.093 --> 00:03:40.656
10乘10。
10 by 10.

87
00:03:40.656 --> 00:03:43.836
奇数与其本身相乘。
The odd number multiplied by itself.

88
00:03:43.836 --> 00:03:48.644
如果我可以留下的东西，我要去乘空，直到我运行代码,
If instead I can leave the thing I'm gonna
to multiply blank until I run the code,

89
00:03:48.644 --> 00:03:51.765
我编写了一次乘以它们的代码。
I write the code once of
multiplying them by itself.

90
00:03:51.765 --> 00:03:56.929
然后在运行函数的时候动态地运行它,
And then run it and dynamically at
the moment of running the function,

91
00:03:56.929 --> 00:03:58.865
把它变成10乘10。
turn it into 10 by 10.

92
00:03:58.865 --> 00:04:00.800
把它变成9乘9。
Turn it into 9 by 9.

93
00:04:00.800 --> 00:04:02.409
把它变成8 * 8。
Turn it into 8 by 8.

94
00:04:02.409 --> 00:04:06.860
从字面上看，10是要飞和取代数量，我要得到10乘10。
Literally, the 10 is gonna fly and
replace num, I'm gonna get 10 by 10.

95
00:04:06.860 --> 00:04:09.490
8号飞起来了，我要8号乘8号飞起来。
The 8 is gonna fly, I'm gonna get 8 by 8.

96
00:04:09.490 --> 00:04:12.250
这是我们的前提或共同前提的功能。
This is our premise or
co premise of functions.

97
00:04:12.250 --> 00:04:15.650
制作我们可以编写一次然后再重用的代码
Making code that we can write once and
then reuse again and

98
00:04:15.650 --> 00:04:18.689
不同的值，不同的数据。
again with different values,
different data.

99
00:04:18.689 --> 00:04:20.129
这就是参数的作用。
That is what a parameter is for.

100
00:04:21.790 --> 00:04:25.250
但是等等，伙计们，如果，我们开始吧。
But wait folk, what if, here we go.

101
00:04:25.250 --> 00:04:29.495
参数，占位符，这意味着我们不需要决定使用哪些数据
Parameters, placeholders, meaning we
don't need to decide what data to run out

102
00:04:29.495 --> 00:04:31.846
直到我们运行这个函数。
functionality on until
we run the function.

103
00:04:31.846 --> 00:04:39.180
民众，如果它不仅仅是数据，我们可以留待定在我们的功能？
Folk, what if it weren't just the data
that we could leave TBD in our function?

104
00:04:39.180 --> 00:04:43.939
如果它不仅仅是留下一个空白来填充数字、字符串或者速率呢？
What if it weren't just leaving a blank to
fill in with numbers or strings or rate?

105
00:04:43.939 --> 00:04:48.252
如果我们也可以留下一点代码 TBD 会怎样？
What if we could also leave
a little bit of our code, TBD?

106
00:04:48.252 --> 00:04:52.292
只留下一小部分代码在实际运行之后确定
Leave a little bit of our code only
to be determined once we actually run

107
00:04:52.292 --> 00:04:53.590
功能？
the function?

108
00:04:53.590 --> 00:04:57.079
留下一点我们的功能空白？
Leave a little bit of our
functionality to be left blank?

109
00:04:57.079 --> 00:04:59.290
当我们运行这个函数的时候，填充这个函数？
And when we run the function,
fill that functionality in?

110
00:05:00.399 --> 00:05:05.029
这将使我们的功能超级可重用，超级通用。
That would make our functions
super reusable, super general.

111
00:05:05.029 --> 00:05:08.360
这正是高阶函数要做的。
And that's exactly what higher
order functions are gonna do.

112
00:05:08.360 --> 00:05:12.689
我们可能不想确切地决定我们的某些功能是什么,
We may not want to decide exactly
what some of our functionality is,

113
00:05:12.689 --> 00:05:14.279
直到我们运行我们的功能。
until we run our function.
