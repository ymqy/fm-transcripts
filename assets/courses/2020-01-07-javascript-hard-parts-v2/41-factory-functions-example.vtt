WEBVTT

1
00:00:00.090 --> 00:00:02.205
威尔 · 森特斯: 我们开始吧，杰森，一号线,
&gt;&gt; Will Sentance: Let's get going,
Jason, line one,

2
00:00:02.205 --> 00:00:04.799
我们在我们的全球记忆中存储了什么？
what are we saving in our
global memory [SOUND]?

3
00:00:04.799 --> 00:00:08.618
说话人2: 我们将标签用户创建器绑定到函数,
&gt;&gt; Speaker 2: We are binding the label
user creator, to the function,

4
00:00:08.618 --> 00:00:11.039
对于功能时间，威尔 · 森特斯: 太棒了。
to the function time
&gt;&gt; Will Sentance: Fantastic.

5
00:00:11.039 --> 00:00:11.660
就是这个。
There it is.

6
00:00:12.720 --> 00:00:15.119
有一个函数定义。
There's a function definition.

7
00:00:15.119 --> 00:00:19.859
下一行，到伊森，一直往下，打左手边的什么,
Next line, over to Ethan, all the way
down, to hit, what, on the left-hand side,

8
00:00:19.859 --> 00:00:22.890
演讲者2: 定义一个常量用户1。
&gt;&gt; Speaker 2: Defining a const user one.

9
00:00:22.890 --> 00:00:24.059
威尔 · 森特斯: 顺便说一句，我想告诉你们,
&gt;&gt; Will Sentance: By the way,
I want to tell you people,

10
00:00:24.059 --> 00:00:27.679
只要知道你有多不寻常，即使是在专业的工程环境中
just know how unusual you are, even in
the professional engineering environment

11
00:00:27.679 --> 00:00:30.629
你现在只要去，是的，酷，JavaScript 线程去那里。
that you now just go, yeah, cool,
JavaScript thread goes away down there.

12
00:00:30.629 --> 00:00:34.939
就像那是非标准的，即使是完全的，如此直观的再生,
Like that is non standard, to even have
that fully, so intuitive regrowth,

13
00:00:34.939 --> 00:00:36.509
你刚才的表现 Ethan 太棒了。
what you did there, Ethan, excellent.

14
00:00:36.509 --> 00:00:37.909
现在。
Now.

15
00:00:37.909 --> 00:00:39.509
天啊，我睡得太香了。
My God, I just slept terribly.

16
00:00:39.509 --> 00:00:40.046
哇！
Wow!

17
00:00:40.046 --> 00:00:41.020
我累了。
I'm getting tired.

18
00:00:41.020 --> 00:00:42.148
我为什么要这么做？
Why did I just do that?

19
00:00:42.148 --> 00:00:43.969
对不起，各位。
Sorry, everybody.

20
00:00:43.969 --> 00:00:46.590
你知道一号用户要输入什么吗？
Do you have any idea what's
gonna go in user one?

21
00:00:46.590 --> 00:00:48.210
不知道。
No idea.

22
00:00:48.210 --> 00:00:51.390
我这样做几乎是好的，因为这就像，我们不知道。
It's almost good that I did that,
cuz it's like, we have no idea.

23
00:00:52.840 --> 00:00:54.649
因为我们要离开去做什么，伊森？
Because we've gotta go off and
do, what, Ethan?

24
00:00:55.659 --> 00:00:57.340
演讲者2: 一个呼叫用户创建器。
&gt;&gt; Speaker 2: A call user creator.

25
00:00:57.340 --> 00:00:58.530
威尔 · 森特斯: 是的，与此同时,
&gt;&gt; Will Sentance: Right,
and in the meantime,

26
00:00:58.530 --> 00:01:01.530
一号用户肯定不是一个物体，也不知道它会是什么,
user one is definitely not an object,
and it has no idea what it's gonna be,

27
00:01:01.530 --> 00:01:03.359
事实上是这样吗？
it's in fact instead?

28
00:01:03.359 --> 00:01:03.950
说话人2: 未初始化。
&gt;&gt; Speaker 2: Uninitialized.

29
00:01:03.950 --> 00:01:05.980
威尔 · 森特斯: 没有初始化，完全正确。
&gt;&gt; Will Sentance: Uninitialized, exactly.

30
00:01:05.980 --> 00:01:10.602
谢谢你，彼得，你也会这么说，伊森，所以
Thank you Peter, you're gonna say
the same thing, that, as well, Ethan, so

31
00:01:10.602 --> 00:01:12.280
我们打电话给用户创造者。
let's call user creator.

32
00:01:12.280 --> 00:01:14.519
我们已经进入决赛了，各位。
We're in the final straight here, people.

33
00:01:14.519 --> 00:01:20.379
最后，最后，最后一个回路，最后一个直道。
Well, the final, the final, the final
loop, the final straight of the final.

34
00:01:20.379 --> 00:01:22.670
好吧，我不知道。
All right, I don't know.

35
00:01:22.670 --> 00:01:25.210
我本该继续前进的，好吧，我们正在失去它。
I was meant to be moving on,
alright, we're losing it.

36
00:01:25.210 --> 00:01:29.478
所以，我们开始了，我们称之为用户创造者,
So, there we go,
we're calling user Creator,

37
00:01:29.478 --> 00:01:32.268
全新的-演讲者2: 执行环境。
brand new-
&gt;&gt; Speaker 2: Execution context.

38
00:01:32.268 --> 00:01:34.009
执行上下文，完全正确。
&gt;&gt; Will Sentance: Execution context,
spot on, exactly.

39
00:01:34.009 --> 00:01:34.750
我们开始吧。
Into it we go.

40
00:01:36.379 --> 00:01:38.210
你们每个人都很紧张。
Very intense at all of you.

41
00:01:38.210 --> 00:01:40.753
我们开始吧。
Into it we go.

42
00:01:40.753 --> 00:01:43.479
好了，开始了。
Okay, here we go.

43
00:01:43.479 --> 00:01:49.246
在本地记忆里，让我们,
And in the Local Memory, let's have,

44
00:01:49.246 --> 00:01:53.798
让我们请出我们的朋友 Dan。
let's have our friend, Dan.

45
00:01:53.798 --> 00:01:57.889
Dan，让我们来处理第一件事，我们总是在执行函数时处理
Dan, let's handle the first thing, we
always handle when we execute a function

46
00:01:57.889 --> 00:02:00.189
调用一个函数，那就是处理我们的？
call a function, and
that is to handle our?

47
00:02:00.189 --> 00:02:00.879
讲者二: 论点。
&gt;&gt; Speaker 2: Arguments.

48
00:02:00.879 --> 00:02:03.420
威尔 · 森塔斯: 我们的论点，都是人类的第一个论点，是意志，是人类的第一个论点
&gt;&gt; Will Sentance: Our arguments, and
are all human first one is will, and

49
00:02:03.420 --> 00:02:05.430
它的参数是什么？
its parameter which is assigned is?

50
00:02:05.430 --> 00:02:06.900
讲者2: 姓名 威尔 · 森特斯: 名字，是的,
&gt;&gt; Speaker 2: Name.
&gt;&gt; Will Sentance: Name, yeah,

51
00:02:06.900 --> 00:02:09.379
准确地说，是因为它被冻住了，各位。
let's be really precise,
it was because it's bit froze, people.

52
00:02:09.379 --> 00:02:13.229
我上周给了你这个，你知道那个小工程师，他们
I gave this to you last week,
you know the small engineer, they were

53
00:02:13.229 --> 00:02:18.699
被我们将要看到的东西抛出一点，因为我可以看到两个名字，在下面的那行。
thrown a bit by what we're at to see, cuz
I can see two names, in that line below.

54
00:02:18.699 --> 00:02:19.689
我们马上就知道为什么了。
We'll see why, in a second.

55
00:02:19.689 --> 00:02:20.500
好的，名字，很好。
Okay, name, excellent.

56
00:02:20.500 --> 00:02:22.688
下一个参数是？
And then the next parameter is?

57
00:02:22.688 --> 00:02:23.860
演讲者2: 得分，三分。
&gt;&gt; Speaker 2: Score, value of three.

58
00:02:23.860 --> 00:02:24.810
威尔 · 森特斯: 是的。
&gt;&gt; Will Sentance: Yeah.

59
00:02:24.810 --> 00:02:26.699
难道没有人认为这些是属性吗。
Don't anybody think that
these are properties.

60
00:02:26.699 --> 00:02:29.729
这些只是数据变量，你知道，标签，就像其他的一样。
These are just data variables,
you know, labels, like any other.

61
00:02:29.729 --> 00:02:32.139
它们只是一些，我们必须为它们留下一个占位符，在早期，和
They're just ones, which we got to
leave a placeholder for, early on, and

62
00:02:32.139 --> 00:02:35.420
然后在运行函数时预填充。
then prefilled when we run the function,
okay.

63
00:02:35.420 --> 00:02:37.250
现在，我们进入函数体。
Now, we enter the body of the function.

64
00:02:37.250 --> 00:02:39.123
布莱登，一号线怎么办？
Braden, what do we do in line one?

65
00:02:39.123 --> 00:02:44.509
Speaker 2: 声明常量 new user，这是一个新对象。
&gt;&gt; Speaker 2: Declare constant new user,
which is a new object.

66
00:02:44.509 --> 00:02:46.490
威尔 · 森坦斯: 太棒了，谢谢你，布莱登。
&gt;&gt; Will Sentance: Fantastic,
thank you, Braden.

67
00:02:46.490 --> 00:02:47.937
好了轮到你了 Kayla。
Okay, over to you, Kayla.

68
00:02:47.937 --> 00:02:53.189
等一下，我总是很纠结这个问题。
Hold on [LAUGH],
I always really struggle with that.

69
00:02:53.189 --> 00:02:53.800
轮到你了 Kayla。
Over to you, Kayla.

70
00:02:55.020 --> 00:02:59.098
扬声器3: 我们正在为新用户设置属性名
&gt;&gt; Speaker 3: We are setting
the property name on the new user

71
00:02:59.098 --> 00:03:00.211
反对-威尔 · 桑坦斯: 我喜欢这个。
object-
&gt;&gt; Will Sentance: I love that.

72
00:03:00.211 --> 00:03:03.418
Speaker 3: 参数名的值。
&gt;&gt; Speaker 3: To the value
of the argument name.

73
00:03:03.418 --> 00:03:05.620
威尔 · 森特斯: 太好了，说得太对了。
&gt;&gt; Will Sentance: That's excellent,
that's spot-on.

74
00:03:05.620 --> 00:03:08.699
这一点非常重要，因为它确实有点重要
Now, that's really important there,
because it is a bit

75
00:03:08.699 --> 00:03:13.680
奇怪的是，我们说，去寻找新用户，并有种暗示，有
odd that we are saying, go look for
new user, and kind of implying that there

76
00:03:13.680 --> 00:03:18.590
是一个名称属性，或者如果对象中没有创建它。
is a name property on it, or if there
isn't create it now within the object.

77
00:03:18.590 --> 00:03:20.530
这不是一个变量，对吗？
This is not a variable, right?

78
00:03:20.530 --> 00:03:22.219
这不是标签，这不是标识符。
This is not a label,
this is not an identifier.

79
00:03:22.219 --> 00:03:24.689
这是对象上的属性，新用户。
This is a property on the object,
new user.

80
00:03:24.689 --> 00:03:30.599
正如 Kayla 所说创建它然后分配给它任何东西,
Exactly as Kayla said, create it,
and assign to it whatever,

81
00:03:30.599 --> 00:03:34.280
进入等号的右边，右边的那个,
so into the right-hand side of the equals,
whatever is on the right hand-side there,

82
00:03:34.280 --> 00:03:36.099
去回忆一下吧。
go look for that in memory.

83
00:03:36.099 --> 00:03:44.039
它将添加字符串 will，并且我们正确地存储在名称中。
It will add the string will, and
we stored in the name properly.

84
00:03:44.039 --> 00:03:45.800
正如凯拉所说。
Exactly as Kayla said.

85
00:03:45.800 --> 00:03:48.949
我们再来一遍 Kayla 如果你不介意下一句台词是什么？
Let's do it again, Kayla, if you mind,
what's the next line say to do?

86
00:03:48.949 --> 00:03:54.900
扬声器3: 我们将新用户对象的属性值设置为 score,
&gt;&gt; Speaker 3: We set the property score on
the new user object to the value of score,

87
00:03:54.900 --> 00:03:55.460
也就是2。
which is 2.

88
00:03:55.460 --> 00:03:56.909
威尔 · 森坦斯: 是的，我们的论点，完全正确。
&gt;&gt; Will Sentance: Yeah,
our argument, exactly.

89
00:03:56.909 --> 00:04:00.530
参数 score 是存储在那里的参数值3。
The parameter score is what
the argument value, 3, stored in there.

90
00:04:01.590 --> 00:04:05.271
丹，这是最后一块了，我们要做什么？
Dan, final piece here, what are we doing?

91
00:04:05.271 --> 00:04:09.582
演讲者2: 我们正在创造一个增量
&gt;&gt; Speaker 2: We are creating a increment

92
00:04:09.582 --> 00:04:11.919
威尔 · 斯坦斯: 是的。
function-
&gt;&gt; Will Sentance: Yep.

93
00:04:11.919 --> 00:04:13.219
说话人2: 关于新用户-威尔 · 森坦斯: 是的，没错。
&gt;&gt; Speaker 2: On new user-
&gt;&gt; Will Sentance: Yeah, exactly.

94
00:04:13.219 --> 00:04:14.860
说到这里，威尔 · 森塔斯: 就是这里,
&gt;&gt; Speaker 2: And saying that-
&gt;&gt; Will Sentance: There it is,

95
00:04:14.860 --> 00:04:19.439
保存所有代码，保存所有代码，考虑保存所有代码。
saving all its code, saving all its code,
think about saving all its code.

96
00:04:19.439 --> 00:04:23.050
但是我想要那样，因为我想要能够在一秒钟之内做出新的用户。
But I want that, because I wanna be able
to do new user, well, within a second.

97
00:04:23.050 --> 00:04:24.728
在那里，我有一个美丽的对象。
There it is, I've a beautiful object.

98
00:04:24.728 --> 00:04:25.800
这里有我需要的一切。
It's got everything I need.

99
00:04:25.800 --> 00:04:29.490
但是，Jeff，它被限制在用户创建器的执行上下文中。
But, Jeff, it's stuck inside
the execution context of user creator.

100
00:04:29.490 --> 00:04:33.139
我需要做什么才能把它输出到用户1中？
What do I need to do to get it out,
into user one?

101
00:04:34.430 --> 00:04:37.529
我退回去，完全正确，退回去。
I return it, exactly right, return it out.

102
00:04:37.529 --> 00:04:40.500
要知道这里的整个部分实际上是求值的,
And know that this whole portion
here actually evaluates,

103
00:04:40.500 --> 00:04:44.800
转换成这个返回对象，并存储这个不寻常的。
turns into this return that object,
and store that unusual.

104
00:04:44.800 --> 00:04:48.329
就这样，就这样,
So there we go, there it is,

105
00:04:48.329 --> 00:04:54.367
用户一个对象，看看这个，人们,
the user one object, and
look at that, people,

106
00:04:54.367 --> 00:05:00.125
和我们之前设置的一模一样。
it's exactly the same
as our previous set up.

107
00:05:02.588 --> 00:05:07.519
威尔 · 森塔斯: 就是这样，现在我们有了我们美丽的功能。
&gt;&gt; Will Sentance: There it is, and
now we have our beautiful function there.

108
00:05:09.300 --> 00:05:11.879
我想说一件小事，我不想死。
I want to say one little thing,
that I don't, die.

109
00:05:11.879 --> 00:05:13.319
我们来看第二部分。
We'll come to the second.

110
00:05:15.040 --> 00:05:22.197
让我们回到现在的 global，点击下一行，声明用户2。
Let's go back to global as we are, and
hit our next line, declaring user 2.

111
00:05:22.197 --> 00:05:26.336
我要在这里做这个，尽管看起来有点重复，因为我希望你这么做
I'm gonna do this one here, even though
it seems repetitive, cuz I want you to

112
00:05:26.336 --> 00:05:30.425
找出一些可能有点多余的，或者非常多余的，或者。
spot something that may be a little
bit redundant, or very redundant, or.

113
00:05:30.425 --> 00:05:36.558
从根本上来说，从字面上来说,
Fundamentally, and word fundamentally,

114
00:05:36.558 --> 00:05:43.197
而且，不要介意，基本上是多余的。
and, nevermind, fundamentally redundant.

115
00:05:43.197 --> 00:05:47.954
我们要再运行一次用户创建器，我们要创建
We're gonna run user creator one
more time, we're gonna create

116
00:05:47.954 --> 00:05:52.639
一个新的执行环境，这个汤米保尔森，蒂姆，和五。
a new execution context,
this Tommy Paulson, Tim, and five.

117
00:05:53.769 --> 00:05:57.300
我的朋友是我的同学。
My friend is my friend from, from school.

118
00:05:58.449 --> 00:05:59.220
非常好的朋友。
Very good friends.

119
00:05:59.220 --> 00:06:01.670
我不知道为什么，我早就应该改掉这些名字了。
I don't know why, I should have
changed these names long ago.

120
00:06:01.670 --> 00:06:04.110
我认为我想在 OP 版本的所有，但是
I thought I think in
the OP version of all, but

121
00:06:04.110 --> 00:06:08.759
我确实改了名字，我不知道为什么很久以前，四年前,
I did change the names, I do not
know why long ago, four years ago,

122
00:06:08.759 --> 00:06:13.990
我把它称为蒂姆，我的朋友，我研究生院唯一的朋友。
I put it as Tim, my friend,
my only friend from grad school.

123
00:06:13.990 --> 00:06:17.180
事实上，我想把它记录下来，我有很多，不,
Actually, I wanna get it on the record,
I have many, no,

124
00:06:17.180 --> 00:06:20.389
不，即使是他，我也不确定他把我当朋友。
no, [LAUGH] even him,
I'm not sure he considers me a friend.

125
00:06:20.389 --> 00:06:24.970
好吧，不管怎样，我想他把我当成同事了。
All right, anyway,
I think he considers me a colleague.

126
00:06:24.970 --> 00:06:31.668
好的，在这个执行上下文中，我们会这样做，Will Sentance: i’ ll
Okay, so in this execution context we go
&gt;&gt; Will Sentance: I'll

127
00:06:31.668 --> 00:06:33.259
暂时先小点声。
keep it small, for now.

128
00:06:33.259 --> 00:06:39.000
在当地的记忆里，威尔 · 森特斯: 我们将会有,
And in the local memory,
&gt;&gt; Will Sentance: We're gonna have,

129
00:06:39.000 --> 00:06:41.340
我不知道为什么我把它弄得这么小，但是我们开始吧。
I don't know why I made it this small,
but here we go.

130
00:06:41.340 --> 00:06:46.860
名字，蒂姆，得分，5分。
Name, Tim, score, five.

131
00:06:46.860 --> 00:06:49.610
然后我们创建一个对象，新用户。
We then create an object, new user.

132
00:06:49.610 --> 00:06:51.716
这真的很糟糕，我不知道为什么我把它做得这么小。
This is really bad,
I don't know why I made this so small.

133
00:06:51.716 --> 00:06:56.620
一个对象，具有名称属性的新用户,
An object, new user with a name property,

134
00:06:56.620 --> 00:07:02.649
保存到 name 参数的值，该参数的参数为2。
save that to the value of the name
parameter, whose argument was two.

135
00:07:04.180 --> 00:07:08.120
得分，五，为什么我把它弄得这么小？
Score, five, why did I make it so small?

136
00:07:08.120 --> 00:07:08.959
我不知道。
I do not know.

137
00:07:08.959 --> 00:07:13.658
并且，增量，保存一个品牌
And, increment, save a brand

138
00:07:13.658 --> 00:07:18.930
新的函数，所有的代码。
new function, all of its code.

139
00:07:18.930 --> 00:07:23.798
所以我知道对于这个对象，当它返回到用户2时,
So I know that on that object,
when it gets returned out into user two,

140
00:07:23.798 --> 00:07:27.350
它将会有一个美丽的,
it's gonna have a beautiful,

141
00:07:30.569 --> 00:07:34.500
它会有一个漂亮的增量方法。
it's gonna have a beautiful
increment method on it.

142
00:07:36.250 --> 00:07:41.425
名字，蒂姆，分数,
There it is, name, Tim, score,

143
00:07:41.425 --> 00:07:47.314
5和递增是一个函数,
five, and increment, is a function,

144
00:07:47.314 --> 00:07:53.259
现在我们要做最重要的检查。
and now we do our all important check.

145
00:07:53.259 --> 00:07:57.992
我们可以做，用户2，点，或者其中任何一个，但是
Can we do, user 2, dot,
or any of them, but

146
00:07:57.992 --> 00:08:01.612
这就是 user2.increment。
that's the user2.increment.

147
00:08:01.612 --> 00:08:05.709
托德，在你，查找时间，用户2，它在哪里？
Todd, over to you, look up time,
user 2, where is it?

148
00:08:05.709 --> 00:08:06.329
演讲者2: 在全局记忆中。
&gt;&gt; Speaker 2: In global memory.

149
00:08:06.329 --> 00:08:07.430
威尔 · 森特斯: 全局记忆，我们拥有它。
&gt;&gt; Will Sentance: Global memory,
we have it.

150
00:08:07.430 --> 00:08:08.288
讲者2: 是的 威尔 · 森特斯: 是的，没错。
&gt;&gt; Speaker 2: Yes.
&gt;&gt; Will Sentance: Yes, it is.

151
00:08:09.319 --> 00:08:12.170
增量，它是一个属性，它是用户2上的一个方法吗？
Increment, is it a property,
is it a method on user 2?

152
00:08:12.170 --> 00:08:15.209
讲者2: 是的 威尔 · 森特斯: 是的，我们抓住了它。
&gt;&gt; Speaker 2: Yes.
&gt;&gt; Will Sentance: Yes, it is, we grab it.

153
00:08:15.209 --> 00:08:17.029
我现在不打算执行。
I'm not gonna execute it right now.

154
00:08:17.029 --> 00:08:20.310
但是想想增量代码是怎么说的。
But just think about what
increments code says.

155
00:08:20.310 --> 00:08:25.930
它说，新用户点评 + + ，但我很确定这里没有新用户。
It says, new user dot score++, but I'm
pretty sure there's no new user out here.

156
00:08:25.930 --> 00:08:27.410
而我们失去了这一点。
And we lost that.

157
00:08:27.410 --> 00:08:31.853
除非存储在这里的函数增量有一个[ CROSSTALK ]背包,
Unless the function increment that was
stored in here had a [CROSSTALK] backpack,

158
00:08:31.853 --> 00:08:36.356
这是一个链接的名称，旧的名称为同一个函数，意味着如果我运行,
which was a link to the name, the old name
for the same function, meaning if I run,

159
00:08:36.356 --> 00:08:40.860
作为一个小小的奖励，同志们，不要担心这个，如果你去,
as a very little brief bonus, and, people,
don't worry about this, if you go,

160
00:08:40.860 --> 00:08:44.756
当我运行 increment you 时，因为我们不会使用这个样式。
when I run increment you,
because we're not going to use this style.

161
00:08:44.756 --> 00:08:47.419
我们永远不会用这种风格，所以我们不需要详细讨论它。
We're never gonna use this style,
so we don't need to dwell on it.

162
00:08:47.419 --> 00:08:53.309
但是请注意闭包是如何随处可见的，对象被返回,
But just notice how closure is everywhere,
the object gets returned out,

163
00:08:53.309 --> 00:08:58.373
里面的增量函数是 newUser.score + + 。
the increment function inside
of it says newUser.score++.

164
00:08:58.373 --> 00:09:00.340
新用户在哪里？
Where's newUser?

165
00:09:00.340 --> 00:09:05.190
这个执行上下文，让我们明确一点，已经被删除了。
This execution context,
let's be clear, has been deleted.

166
00:09:07.740 --> 00:09:11.669
两者都被删除了，但是，因为对象返回时已经有了
Both have been deleted, but, because
the object, when it returned out had

167
00:09:11.669 --> 00:09:15.730
上面的一个函数，这个函数与周围的所有记忆相连
a function on it, that function was
linked to all the surrounding memory

168
00:09:15.730 --> 00:09:18.700
包括新用户，这是同一个对象的标签。
including the new user, which was
a label for the very same object.

169
00:09:18.700 --> 00:09:22.809
我的意思是，我们得到的新用户标签仍然是在 increment 中，并且
I mean we get the new user label
still inside of increment, and

170
00:09:22.809 --> 00:09:25.570
它将引用 user2。
it will refer to user2.

171
00:09:25.570 --> 00:09:27.457
背包到处都是。
The backpack is everywhere.

172
00:09:27.457 --> 00:09:29.163
我只是想给你点奖励,
I just wanna give that a little bonus,

173
00:09:29.163 --> 00:09:32.429
因为我们在这次治疗中看到了背包，不过别担心。
because we saw the backpack in this
session, but don't worry about it.

174
00:09:33.450 --> 00:09:35.450
因为我们永远不会使用这种方法。
Because we're never going
to use this approach.

175
00:09:35.450 --> 00:09:39.769
但是这种方法从根本上起了作用，容易理解吗？
But this approach fundamentally
has worked, easy to reason about?

176
00:09:39.769 --> 00:09:40.929
当然了。
You bet it is.

177
00:09:40.929 --> 00:09:45.830
我的函数就在这里，在点的右边，我可以
I've got my function right there, to the
right-hand side of my dot, I can literally

178
00:09:45.830 --> 00:09:50.649
谷歌搜索预填，用户2点，它将填写。
have it Google Search pre-filled,
user two dot, it's gonna fill in.

179
00:09:50.649 --> 00:09:52.480
如果我有其他功能存储在那里，他们都会在那里,
If I had other functions stored on there,
they'd all be there,

180
00:09:52.480 --> 00:09:55.100
我可以开始写作，然后他们就会出现。
I could start writing, and
they're literally gonna show up.

181
00:09:55.100 --> 00:09:59.649
这是你选择的抄本的设计，但它说明了一个事实
That's the design of the codex of your
choice, but it speaks to the fact

182
00:09:59.649 --> 00:10:05.379
这些函数绝对是，字面上的对象。
that those functions are absolutely,
literally on the object.

183
00:10:05.379 --> 00:10:06.279
可供下载。
Available.

184
00:10:06.279 --> 00:10:07.830
太美了，太棒了。
Beautiful, wonderful.

185
00:10:07.830 --> 00:10:08.879
说完了吗？
Are we done?

186
00:10:08.879 --> 00:10:10.000
我们结束了。
We're done.

187
00:10:10.000 --> 00:10:14.870
很容易理解不需要功能性的打猎,
Easy to reason about,
no hunting with functions,

188
00:10:14.870 --> 00:10:17.659
没有想到这个函数实际上适用于我的测验用户。
no thinking this function
actually applies to my quiz user.

189
00:10:17.659 --> 00:10:22.686
我的测验问题17，因为它在这个物体上
My quiz question 17,
because it's on this object, and

190
00:10:22.686 --> 00:10:27.711
然而，这种方法是完全不可用的，因为我说
yet this approach is completely unusable,
because I said

191
00:10:27.711 --> 00:10:33.782
还有另外两个目标，我的范例，我说的，是什么？
there were two other goals, and
my paradigm, what I say, they were?

192
00:10:33.782 --> 00:10:38.307
很容易添加新的功能，但是,
Easy to add features to new,
new functionality, and nevertheless,

193
00:10:38.307 --> 00:10:42.678
正式来说，大家告诉我，这种风格,
officially before when, people,
tell me what, with this style,

194
00:10:42.678 --> 00:10:47.301
我永远不会用这个，丹，继续。
is fundamentally wrong, that I could
never use this, Dan, go ahead.

195
00:10:47.301 --> 00:10:50.090
说话人2: 我们把同一个功能存储了两次。
&gt;&gt; Speaker 2: We're storing
the same function twice.

196
00:10:50.090 --> 00:10:51.330
威尔 · 森塔斯: 他说得对。
&gt;&gt; Will Sentance: He's spot on.

197
00:10:51.330 --> 00:10:54.950
我们无法摆脱它，这些数据我们无法摆脱。
There's no getting away from it,
that this data we can't.

198
00:10:54.950 --> 00:10:59.490
我们不能，你知道，不存储 t 和5，Will 和3，那是不同的数据。
We can't, you know, not store T and five,
Will and three, that's different data.

199
00:10:59.490 --> 00:11:04.455
我再讲一个故事，它不同，但是这个函数的代码
So I got a story again, it's different,
but the code of this function, and

200
00:11:04.455 --> 00:11:07.480
这个函数的代码是相同的
the code of this function,
is identical, and

201
00:11:07.480 --> 00:11:11.981
如果我有500个用户需要增量函数，所以
if I've got 500 users who need to
have the increment function, so

202
00:11:11.981 --> 00:11:17.758
我们可以做一个703。 我说我们五个人，然后使用495。 增量。
that we can do us a 703.increment, I say
five of us, and use it 495.increment.

203
00:11:17.758 --> 00:11:20.090
我得有一份副本，对吧？
I gotta have a copy of it, right?

204
00:11:20.090 --> 00:11:24.211
不管怎样，我只有一个函数，100,200,3,4,
And if either way, I just got one
function, I have 100, 200, three, four,

205
00:11:24.211 --> 00:11:25.674
五个，差不多几百个。
five, literally hundreds.

206
00:11:25.674 --> 00:11:29.303
他们都会被叫去吗我会把他们每个人的名字都复印一份,
Are they all gonna be called,
I'm gonna have copies of each of them,

207
00:11:29.303 --> 00:11:31.440
每个都可能有10行代码。
each of them maybe 10 lines of code.

208
00:11:31.440 --> 00:11:33.945
我有1000个用户，相当于10000个。
I've got 1000 users, as 10,000.

209
00:11:33.945 --> 00:11:35.758
每个函数都是100。
And then each function is 100.

210
00:11:35.758 --> 00:11:38.659
我在这里浪费了上千行代码中的10行。
I'm wasting 10s of thousands of lines,
of codes here.

211
00:11:38.659 --> 00:11:44.580
因此，内存中的空间也会增加。
So, space in memory will also add.

212
00:11:44.580 --> 00:11:46.990
还有另外一件让人头疼的事情，也许，或者
Also another thing that's a pain
in the ass about this, perhaps, or

213
00:11:46.990 --> 00:11:49.350
有点问题是的 Peter。
problematic about this, yeah, Peter.

214
00:11:49.350 --> 00:11:51.389
演讲者2: 如果你想增加一个功能,
&gt;&gt; Speaker 2: If you wanted
to add a feature to this,

215
00:11:51.389 --> 00:11:52.730
你必须把它添加到每个用户。
you'd have to add it to each user.

216
00:11:52.730 --> 00:11:55.000
威尔 · 森特斯: 完全正确，就像我说的。
&gt;&gt; Will Sentance: Perfect,
exactly as I say.

217
00:11:55.000 --> 00:11:58.626
是的，完全正确，如果我们想添加函数，就必须手动添加
Yeah, spot on, we would have to add
the function manually if we wanted to add

218
00:11:58.626 --> 00:12:00.960
一个功能，这是新的功能。
a feature, which is new functionality.

219
00:12:00.960 --> 00:12:03.366
手动添加到每个对象中。
Manually add it to every single object.

220
00:12:06.214 --> 00:12:09.919
威尔 · 森塔斯: 但我要说的是，超级直觉。
&gt;&gt; Will Sentance: But
I will say this, super intuitive.

221
00:12:11.279 --> 00:12:14.019
没有什么神秘的，当然我可以使用增量函数 user2,
There is no mystery, of course I can
use the increment function user2,

222
00:12:14.019 --> 00:12:15.399
就在那个物体上。
it's right there on the object.

223
00:12:17.730 --> 00:12:21.190
使用函数问题生成对象，每次我们创建一个新用户,
Generate objects using a function
problems, every time we create a new user,

224
00:12:21.190 --> 00:12:23.789
我们在计算机内存中留出空间，用于我们的数据功能。
we make space in that computer's memory,
for our data functions.

225
00:12:23.789 --> 00:12:26.467
但是这个函数只是相同代码的拷贝。
But that function are just
copies of the same code.

226
00:12:26.467 --> 00:12:27.330
还有更好的办法吗？
Is there a better way?

227
00:12:27.330 --> 00:12:27.830
我们走着瞧。
We'll see.
