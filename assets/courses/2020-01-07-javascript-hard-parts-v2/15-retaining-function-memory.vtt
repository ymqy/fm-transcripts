WEBVTT

1
00:00:00.170 --> 00:00:03.431
威尔 · 森坦斯: 好了，伙计们，我们开始吧，我们开始吧,
&gt;&gt; Will Sentance: All right folks,
so here we go, let's jump in,

2
00:00:03.431 --> 00:00:05.990
一号线，我们要对伊森做什么。
line one, what are we doing to Ethan.

3
00:00:07.349 --> 00:00:11.382
这句话很奇怪，第一行，我们在做什么，逗号，给伊桑。
That phrasing was very strange, line one,
what are we doing, comma, to Ethan.

4
00:00:11.382 --> 00:00:13.930
[笑声]演讲者2: 我宣布
&gt;&gt; [LAUGH]
&gt;&gt; Speaker 2: I'm declaring

5
00:00:13.930 --> 00:00:14.960
外部函数。
the function outer.

6
00:00:14.960 --> 00:00:17.879
威尔 · 森特斯: 太好了，谢谢你，伊森,
&gt;&gt; Will Sentance: Excellent,
thank you, Ethan,

7
00:00:17.879 --> 00:00:22.791
就是这样，外面，好的，保存，下一行，伊森。
there it is, Outer, okay,
Save, next line, Ethan.

8
00:00:22.791 --> 00:00:27.140
说话人2: 然后我们声明常量 myNewFunction。
&gt;&gt; Speaker 2: And then we are declaring
the constant myNewFunction.

9
00:00:27.140 --> 00:00:29.746
威尔 · 森坦斯: 非常好，我的新功能,
&gt;&gt; Will Sentance: Very nice,
myNewFunction,

10
00:00:29.746 --> 00:00:34.222
知道里面放什么吗，伊森？
any idea what to store in there, Ethan?

11
00:00:34.222 --> 00:00:35.005
讲者2: 还没有。
&gt;&gt; Speaker 2: Not yet.

12
00:00:35.005 --> 00:00:37.359
威尔 · 森特斯: 不，因为我们必须继续前进，做什么？
&gt;&gt; Will Sentance: No,
because we've gotta go ahead and do what?

13
00:00:37.359 --> 00:00:40.057
演讲者2: 我们必须叫外层？
&gt;&gt; Speaker 2: We have to call Outer?

14
00:00:40.057 --> 00:00:41.738
威尔 · 森特斯: 你说得非常完美，完全正确,
&gt;&gt; Will Sentance: You put it perfectly,
exactly,

15
00:00:41.738 --> 00:00:44.146
我们得把 Outer 放到调用堆栈上。
we've got to go and
put Outer on the call stack.

16
00:00:44.146 --> 00:00:48.159
它在调用堆栈上，总是在底部得到全局。
There it is on the call stack,
always got global on the bottom.

17
00:00:49.159 --> 00:00:53.816
一个全局执行上下文，多个函数级执行上下文。
One global execution context,
many function level execution contexts.

18
00:00:53.816 --> 00:00:58.646
它现在还没有初始化，我们出发运行 Outer，没错,
It's uninitialized for now while we
head off and run Outer, that's right,

19
00:00:58.646 --> 00:01:01.926
各位，深呼吸，它来了。
everybody, take that deep breath,
it's coming.

20
00:01:05.001 --> 00:01:07.712
威尔 · 森塔斯: 我们必须执行 Outer，它的结果，当我们排序
&gt;&gt; Will Sentance: We've got to execute
Outer, its results when we sort of

21
00:01:07.712 --> 00:01:10.859
在对 myNewFunction 进行排序时，myNewFunction 是返回的值。
myNewFunction is returned values
when we sort myNewFunction.

22
00:01:10.859 --> 00:01:12.730
我们需要一个全新的？
We need a brand new?

23
00:01:12.730 --> 00:01:13.960
演讲者3: 执行上下文！
&gt;&gt; Speaker 3: Execution context!

24
00:01:13.960 --> 00:01:17.569
威尔 · 森特斯: 太好了，谢谢你，马克，谢谢大家，给你。
&gt;&gt; Will Sentance: Beautiful, thank you
Mark, thank you to everybody, here it is.

25
00:01:17.569 --> 00:01:21.962
我要试着画出来，看这个，我要试着画出来
I'm going to try and draw,
look at this, I'm going to try and

26
00:01:21.962 --> 00:01:24.881
这次把另一条线画直。
draw the other line straight this time.

27
00:01:24.881 --> 00:01:28.769
这不像往常那么糟糕，对吧，不像往常那么糟糕。
That's not as bad as usual,
right, not as bad as usual.

28
00:01:28.769 --> 00:01:32.873
好了，我们开始吧
Okay, into it we go and

29
00:01:32.873 --> 00:01:37.409
首先在我们当地的记忆中
in our local memory first

30
00:01:37.409 --> 00:01:41.739
我们拯救的东西 Kayla？
thing we save, Kayla?

31
00:01:41.739 --> 00:01:46.266
演讲者4: 我们要声明一个计数器变量为零。
&gt;&gt; Speaker 4: We're going to
declare a counter variable to zero.

32
00:01:46.266 --> 00:01:48.685
威尔 · 森坦斯: 是的，发送到0，字面意思是，人们,
&gt;&gt; Will Sentance: Yeah, send it to 0,
that literally means, people,

33
00:01:48.685 --> 00:01:50.649
它曾经让我困惑，我曾经认为。
it used confuse me and I used to think.

34
00:01:50.649 --> 00:01:53.590
也许这就像是说计数器是0。
Maybe it's like just sort
of saying counter is 0.

35
00:01:53.590 --> 00:01:55.490
不是字面意思是我们接受了那个标签那个词,
No, literally we took that label,
that word,

36
00:01:55.490 --> 00:01:57.799
放到电脑的0和1内存里。
put it in the computer's memory 0s and 1s.

37
00:01:57.799 --> 00:02:01.019
拉出那个0，把它放进电脑的存储器，它绝对是存储的。
Pull that 0, put it in the computer's
memory, it is absolutely stored.

38
00:02:01.019 --> 00:02:03.846
好了，下一句，布莱登，我们现在该怎么做？
Okay, next line, Braden,
what are we to say to do here?

39
00:02:03.846 --> 00:02:07.549
这是一句有趣的台词，但是希望很清楚。
It's a funny sort of single line,
but it's hopefully clear.

40
00:02:07.549 --> 00:02:09.864
扬声器2: 所以你声明了函数增量计数器。
&gt;&gt; Speaker 2: So you're declaring
the function increment counter.

41
00:02:09.864 --> 00:02:16.329
威尔 · 森特斯: 很漂亮，现在我要用不同的颜色来定义它。
&gt;&gt; Will Sentance: Beautiful, now I'm going
to do it definition in a different color.

42
00:02:16.329 --> 00:02:22.626
Braden 这个函数是不是被挖空了,
Braden, is this function being cored,

43
00:02:22.626 --> 00:02:29.079
被调用，被运行，还是我们要用它做点别的事情？
being invoked, being run right now, or are
we instead doing something else with it?

44
00:02:29.079 --> 00:02:30.280
演讲者2: 我们正在用它做其他的事情。
&gt;&gt; Speaker 2: We're doing
something else with it.

45
00:02:30.280 --> 00:02:32.703
威尔 · 森塔斯: 当然，我们不会运行它,
&gt;&gt; Will Sentance: Absolutely,
we are not running it,

46
00:02:32.703 --> 00:02:35.293
不会接我们的电话。
is not going on our call stacks up here.

47
00:02:35.293 --> 00:02:38.370
相反，我们抓住它，用它做什么，布莱登？
Instead we grabbing it and
doing what with it, Braden?

48
00:02:38.370 --> 00:02:42.060
演讲者2: 把它返回到 myNewFunction。
&gt;&gt; Speaker 2: Returning
it to myNewFunction.

49
00:02:42.060 --> 00:02:45.900
绝对的，把它返回到 myNewFunction。
&gt;&gt; Will Sentance: Absolutely,
returning it out to myNewFunction.

50
00:02:45.900 --> 00:02:49.870
它将是调用 outer 和
It's going to be the output
of calling outer, and

51
00:02:49.870 --> 00:02:53.469
我们要把它存在我的新功能里。
we're gonna store it in myNewFunction.

52
00:02:53.469 --> 00:02:59.379
再次强调，它诞生于 incrementCounter，但我们不会再这样称呼它了。
Again, it was born as incrementCounter,
but we're not gonna call it that anymore.

53
00:02:59.379 --> 00:03:02.030
这就是它的诞生，这是它最初的名字。
That was its birth,
thatt's sort of Its original name.

54
00:03:02.030 --> 00:03:06.591
现在它已经被返回，并被存储为 myNewFunction。
Now it's been returned out and
it's now stored as myNewFunction.

55
00:03:06.591 --> 00:03:13.412
人们，这个执行环境和其中的一切，会发生什么？
People, this execution context and
everything in it, what happens to it?

56
00:03:13.412 --> 00:03:18.252
删除，消失，一个线程编织，它编织出来
Deleted, gone, a thread wove in and
it wove out and

57
00:03:18.252 --> 00:03:21.639
执行上下文被删除。
the execution context is deleted.

58
00:03:21.639 --> 00:03:26.173
希望那里不会太乱，我们可以清楚地看到这一点，[声音]走了。
Hope that's not too messy there,
we can see this clearly, [SOUND] gone.

59
00:03:26.173 --> 00:03:28.430
在调用堆栈上发生了什么？
What happens to on
the call stack everybody?

60
00:03:28.430 --> 00:03:31.044
弹掉了我应该说得更清楚点,
It's popped off,
I should have made it clearer,

61
00:03:31.044 --> 00:03:35.289
popped 就是从堆栈中取出一些东西，这只是用来移除它的一个比较好的词。
popped is to take something off a stack,
it's just a fancy word for removing it.

62
00:03:35.289 --> 00:03:37.442
而 push 是添加到堆栈中的。
And push is to add on to the stack.

63
00:03:37.442 --> 00:03:41.356
所以在堆栈中添加对函数的调用堆栈,
So add on to a stack, in this case,
a stack of calls to functions,

64
00:03:41.356 --> 00:03:43.439
运行的功能，已经消失了。
running of functions, has gone.

65
00:03:43.439 --> 00:03:48.096
现在我们回到全球动力局，我们碰到什么了，杰夫？
And we're back out to global,
where we hit what line, Jeff?

66
00:03:48.096 --> 00:03:49.770
我们在全球范围内遇到的那条线是什么？
What is that line we hit in global?

67
00:03:50.780 --> 00:03:52.750
演讲者2: 我们称之为 myNewFunction。
&gt;&gt; Speaker 2: We call myNewFunction.

68
00:03:52.750 --> 00:03:54.884
威尔 · 森塔斯: 绝对的，就我们的调用堆栈而言，杰夫,
&gt;&gt; Will Sentance: Absolutely, and
in terms of our call stack, Jeff,

69
00:03:54.884 --> 00:03:55.861
会发生什么？
what's gonna happen?

70
00:03:55.861 --> 00:03:58.020
演讲者2: 创建一个新的执行上下文。
&gt;&gt; Speaker 2: Create
a new execution context.

71
00:03:58.020 --> 00:04:01.163
Will Sentance: 是的，还有我们要添加的所有工具堆栈。
&gt;&gt; Will Sentance: Yeah, and all the tool
stack that we are going to add.

72
00:04:01.163 --> 00:04:02.150
讲者2: MyNewFunction 威尔 · 森特斯: 是的,
&gt;&gt; Speaker 2: MyNewFunction.
&gt;&gt; Will Sentance: Yeah,

73
00:04:02.150 --> 00:04:06.501
对 myNewFunction 的调用，完美，漂亮的笔迹。
the call to myNewFunction,
perfect, nice handwriting.

74
00:04:06.501 --> 00:04:11.843
全新的执行环境,
All right, brand new execution context,

75
00:04:11.843 --> 00:04:18.084
我把你们从伤痛中拯救出来，那从来都不管用。
I saved you all from injury go,
that never works.

76
00:04:18.084 --> 00:04:23.781
伤病走了，我们走了，什么是我们的
Injury go and we go and what is our

77
00:04:23.781 --> 00:04:29.694
作为我们的本地记忆？
line of code as our local memory?

78
00:04:29.694 --> 00:04:34.112
我们在这个函数里面碰到的那行代码是什么，马克？
What is that line of code that we
hit inside of this function, Mark?

79
00:04:34.112 --> 00:04:37.949
它现在被称为 myNewFunction，但它是作为递增计数器而诞生的。
It's now called myNewFunction, but
it was born as increment counter.

80
00:04:37.949 --> 00:04:41.362
我们的眼睛会慢慢向上移动，乔布斯不会这么做。
Our eyes are gonna creep back up the page,
jobs is not doing that.

81
00:04:41.362 --> 00:04:44.810
它实际上保存了这个函数的代码
It has literally the code of that
function saved over here, and

82
00:04:44.810 --> 00:04:46.971
密码就是，确切的词，马克？
that code is, the exact words, Mark?

83
00:04:46.971 --> 00:04:49.307
Mynewfunction 的代码中的确切词是什么,
What are the exact that words
of the code of myNewFunction,

84
00:04:49.307 --> 00:04:50.555
前递增计数器？
formerly increment counter?

85
00:04:50.555 --> 00:04:52.269
确切的代码是什么？
What's the exact code it's gonna run?

86
00:04:52.269 --> 00:04:54.973
事实上，我得把这个交给托德。
Actually, I've got to
get this one to Todd.

87
00:04:54.973 --> 00:04:58.480
说话者2: 是的，计数器 + + 将句子: 计数器 + + ，干得好,
&gt;&gt; Speaker 2: Yeah, Counter ++
&gt;&gt; Will Sentance: Counter ++, well done,

88
00:04:58.480 --> 00:05:01.815
托德，没错，这是计数器 + + 。
Todd, exactly, there it is counter ++.

89
00:05:01.815 --> 00:05:09.331
绿色是我的查找颜色，我首先要看哪里，托德？
Green is my look-up color,
where do I look first, Todd?

90
00:05:09.331 --> 00:05:11.237
演讲者2: 是的，所以你看看你的本地记忆。
&gt;&gt; Speaker 2: Yeah, so
you look in your local memory.

91
00:05:11.237 --> 00:05:12.334
句子: 我找到反了吗？
&gt;&gt; Will Sentance: Do I find counter?

92
00:05:12.334 --> 00:05:14.574
讲者二: 不要。
&gt;&gt; Speaker 2: Do not.

93
00:05:14.574 --> 00:05:16.427
威尔 · 桑特斯: 托德，我在哪里运行我的新函数？
&gt;&gt; Will Sentance: Where am I
running myNewFunction, Todd?

94
00:05:16.427 --> 00:05:17.649
讲者2: 在全球。
&gt;&gt; Speaker 2: In the global.

95
00:05:17.649 --> 00:05:20.550
威尔 · 森塔斯: 所以直觉告诉我，我在哪里
&gt;&gt; Will Sentance: And so everything
intuitively would say where do I

96
00:05:20.550 --> 00:05:21.720
看下一个，托德？
look next, Todd?

97
00:05:21.720 --> 00:05:23.427
演讲者2: 在全局记忆中。
&gt;&gt; Speaker 2: In the global memory.

98
00:05:23.427 --> 00:05:25.483
威尔 · 森坦斯: 在全球，谢谢你，伙计。
&gt;&gt; Will Sentance: In global,
thank you, man.

99
00:05:25.483 --> 00:05:27.475
我在全球找到柜台吗？
Do I find counter in global?

100
00:05:27.475 --> 00:05:28.120
讲者二: 没有。
&gt;&gt; Speaker 2: No.

101
00:05:28.120 --> 00:05:33.076
威尔 · 森特斯: 绝对不行，这是一场灾难[声音]。
&gt;&gt; Will Sentance: Absolutely not,
this is a disaster [SOUND] disaster.

102
00:05:33.076 --> 00:05:37.536
多么奇怪的语言，让我们保存函数，返回它们,
What a strange language that let's
save functions, return them out,

103
00:05:37.536 --> 00:05:40.822
打电话给他们，尝试使用已经消失的数据[声音]。
call them, and try and
use data [SOUND] that's gone.

104
00:05:40.822 --> 00:05:45.843
我们在全局中运行 myNewFunction，我们在 myNewFunction 中查找，没有计数器。
We're running myNewFunction in global,
we look in myNewFunction, no counter.

105
00:05:45.843 --> 00:05:49.422
我们向全球看齐，没有对手。
And we look out to global, no counter.

106
00:05:49.422 --> 00:05:52.927
如果你们已经知道接下来会发生什么，请举手。
Raise your hand if you already know
the answer to what's gonna happen here.

107
00:05:52.927 --> 00:05:56.538
所以不一定清楚，对吧，这是一个谜。
So not necessarily clear,
right, this is a mystery.

108
00:05:56.538 --> 00:05:59.543
谁知道举手的人是否知道呢？
And who knows if the people who
raise their hands even know?

109
00:05:59.543 --> 00:06:05.000
因为这是非常神秘的，我们不完全。
For this is very mysterious,
we don't exactly.

110
00:06:05.000 --> 00:06:12.430
我还能坚持多久，[听起来]很悲伤。
How long can I play it out,
[SOUND] very sad.

111
00:06:12.430 --> 00:06:15.973
天哪这太傻了,
God, this is just silly,

112
00:06:15.973 --> 00:06:20.480
我们没有找到我们的计数器,
we didn't find our counter hmm,

113
00:06:20.480 --> 00:06:24.509
我们为什么要做这些工作？
why would we do all this work?

114
00:06:24.509 --> 00:06:28.089
我可以用多长时间来让这个变得多尴尬啊。
How awkward can I make
this by how long [LAUGH.

115
00:06:28.089 --> 00:06:34.920
为什么我们做这一切的工作，如果只是找不到反？
Why do we do all this work
if only not to find counter?

116
00:06:34.920 --> 00:06:38.331
这是一场灾难，这是一场灾难！
This is a disaster, this is a disaster!

117
00:06:38.331 --> 00:06:39.759
但是，你们知道吗？
And yet, people, you know what?

118
00:06:40.879 --> 00:06:42.209
有些事情我们没有说。
There's something we didn't say here.

119
00:06:43.720 --> 00:06:49.720
结果是，当我接受递增计数器函数定义时,
It turns out that when I took that
increment counter function definition,

120
00:06:49.720 --> 00:06:50.399
所有的代码。
all its code.

121
00:06:50.399 --> 00:06:58.519
并将其作为运行 Outer [ SOUND ]到 myNewFunction 的输出返回。
And returned it out as the output of
running Outer [SOUND] into myNewFunction.

122
00:06:58.519 --> 00:07:03.939
我得到的不仅仅是函数 counter + + 的代码。
I got more than just the code
of the function counter ++.

123
00:07:03.939 --> 00:07:09.399
我得到的不仅仅是保存的代码，还有函数定义。
I got more than just saved code,
the function definition.

124
00:07:09.399 --> 00:07:14.500
各位，我还有一些非常非常有力量的东西，看看这个。
People, I got something so, so
powerful in addition, check this out.

125
00:07:14.500 --> 00:07:18.629
这是非常非常特别的，这是 JavaScript 的一个优雅的特性。
This is very, very special,
this is an elegant feature of JavaScript.

126
00:07:18.629 --> 00:07:19.497
我来处理,
I got this,

127
00:07:19.497 --> 00:07:24.779
当我返回这个函数的时候，我得到了这个函数的其他东西。
when I returned this function out,
I got something else with that function.

128
00:07:26.029 --> 00:07:31.230
当这个函数离开的时候，它带走了所有的东西，并且
As that function left,
it took with it all, and

129
00:07:31.230 --> 00:07:36.058
我们稍后会加上一些注意事项。
we'll add some caveats
on this in a moment.

130
00:07:36.058 --> 00:07:41.389
它带走了保存这个函数的所有周围数据,
It took with it all the surrounding
data from where that function was saved,

131
00:07:41.389 --> 00:07:44.233
它出生的地方，存放的地方。
where it was born, where it was stored.

132
00:07:44.233 --> 00:07:47.762
它抓取了周围的数据，把它带了出来
It grabbed its surrounding data,
and brought it out and

133
00:07:47.762 --> 00:07:49.877
来展示它的旅程。
to sort of show it on its journey.

134
00:07:49.877 --> 00:07:55.707
[声音][笑声]它把周围的数据都带出来了,
[SOUND] [LAUGH] it brought all
that surrounding data out,

135
00:07:55.707 --> 00:08:01.805
在功能的后面加上一个功能。
racing along with a function
on the back of the function.

136
00:08:01.805 --> 00:08:06.091
是的，是的，你喜欢小功能吗？
Yes, yes, you like little functions?

137
00:08:06.091 --> 00:08:08.108
在这一点上，它是滑稽模仿，不是吗？
At this point it's parody, isn't it?

138
00:08:08.108 --> 00:08:12.617
背面的功能，就像一个小背包上的功能。
On the back of the functions,
like a little backpack on the function.

139
00:08:12.617 --> 00:08:16.918
是的，在线观众就像一个背包，这是一个合法的技术术语,
Yes, online viewers, like a backpack,
it's a legitimate technical term,

140
00:08:16.918 --> 00:08:18.036
这是真的。
it's a real thing.

141
00:08:18.036 --> 00:08:21.733
在函数的背面，当函数出来的时候，它带来了它的背面,
On the back of the function, as the
function came out, it brought on its back,

142
00:08:21.733 --> 00:08:24.492
所有周围的数据，有一点需要注意。
all the surrounding data,
little bit of a caveat on that.

143
00:08:24.492 --> 00:08:29.670
它的所有周围数据，带回的功能，附加。
All its surrounding data, brought on
the back of the function, attached.

144
00:08:29.670 --> 00:08:34.369
当我们将之前所知的 incrementCounter 函数保存到
And when we saved that formerly known
as incrementCounter function into

145
00:08:34.369 --> 00:08:35.530
Mynewfunction.
myNewFunction.

146
00:08:35.530 --> 00:08:37.293
我们不仅仅得到了函数定义。
We didn't just get
the function definition.

147
00:08:37.293 --> 00:08:42.453
我们在它上面安装了一个背包
We got attached onto it a backpack from

148
00:08:42.453 --> 00:08:48.097
当这个函数诞生于实时数据时,
when that function was born of live data,

149
00:08:48.097 --> 00:08:51.498
这里的计数器是0。
and there counter is 0.
