WEBVTT

1
00:00:00.160 --> 00:00:02.201
那么 JavaScript 在哪里运行呢？
&gt;&gt; Will Sentance: Where does
JavaScript actually run?

2
00:00:02.201 --> 00:00:04.217
它在哪里运行代码？
Where is it running its code?

3
00:00:04.217 --> 00:00:06.051
彼得，JavaScript 在哪里运行？
Peter, where's JavaScript running?

4
00:00:06.051 --> 00:00:07.663
通常是在浏览器中。
&gt;&gt; Peter: Typically in a browser.

5
00:00:07.663 --> 00:00:08.316
威尔 · 森坦斯: 在浏览器中,
&gt;&gt; Will Sentance: In the browser,

6
00:00:08.316 --> 00:00:10.561
是啊，我们不开一个叫 JavaScript 的应用，对吧？
yeah, we don't open an app
called JavaScript, right?

7
00:00:10.561 --> 00:00:17.115
我们在打开的浏览器中运行它，现在浏览器是一个了不起的创造。
We, run it in a browser we turn on,
now the browser is a remarkable creation.

8
00:00:17.115 --> 00:00:21.897
它不仅仅包含了 JavaScript，所以让我们,
It has so much more than just
JavaScript in it, so let's just,

9
00:00:21.897 --> 00:00:25.711
我们在这里使用一支白色的笔作为 JavaScript 引擎。
we use a white pen here for
the JavaScript engine.

10
00:00:25.711 --> 00:00:31.228
作为蓝色的一部分，整个网页浏览器,
As part of the blue,
the overall web browser,

11
00:00:31.228 --> 00:00:36.325
比如说，我不会画 Firefox。
sort of say is, I can't draw the Firefox.

12
00:00:36.325 --> 00:00:41.624
这就是 JavaScript，它不是孤立运行的，它有大量的特性
There it is JavaScript, it doesn't run
in isolation, it has a ton of features

13
00:00:41.624 --> 00:00:47.106
浏览器的其他特性是什么？
in the web browser as well, what are the
other features that the web browser has?

14
00:00:47.106 --> 00:00:50.671
亚当，你能想到网页浏览器的其他特性吗
Adam, can you think of some other features
the web browser has that JavaScript

15
00:00:50.671 --> 00:00:51.381
没有吗？
does not have?

16
00:00:51.381 --> 00:00:53.671
亚当: 比如开发工具？
&gt;&gt; Adam: Like dev tools?

17
00:00:53.671 --> 00:00:57.746
威尔 · 森特斯: 当然，是的，绝对的，老实说，是的，开发工具,
&gt;&gt; Will Sentance: Sure, yeah,
absolutely, honestly, yeah, dev tools,

18
00:00:57.746 --> 00:01:03.704
让我们把它放在开发工具，控制台，是的，绝对的，还有什么其他的东西，马特？
let's put it in dev tools, console, yeah,
absolutely, what other things, Matt?

19
00:01:03.704 --> 00:01:04.391
Matt: Web sockets？
&gt;&gt; Matt: Web sockets?

20
00:01:04.391 --> 00:01:06.233
威尔 · 森特斯: 是的，当然，套接字。
&gt;&gt; Will Sentance: Yeah, sure, sockets.

21
00:01:08.188 --> 00:01:09.930
威尔: 还有什么？
&gt;&gt; Will Sentance: What other thing?

22
00:01:09.930 --> 00:01:13.242
有一些非常关键，两个非常关键，丹，你有一个吗？
There are some really key,
two really key ones, Dan, you got one?

23
00:01:13.242 --> 00:01:16.129
能和互联网对话吗？
Can Javascript speak to the Internet?

24
00:01:16.129 --> 00:01:18.359
它能通过因特网发出网络请求吗？
Can it make network
requests over the Internet?

25
00:01:18.359 --> 00:01:22.051
不 JavaScript 不具备与互联网对话的能力,
No, JavaScript does not have
the ability to speak to the Internet,

26
00:01:22.051 --> 00:01:24.338
这不是 JavaScript 的一个特性。
that is not a feature inside JavaScript.

27
00:01:24.338 --> 00:01:27.876
所以你知道吗，浏览器是这样的,
So you know what,
the browser does, though,

28
00:01:27.876 --> 00:01:30.975
浏览器可以发出网络请求。
the browser can make network requests.

29
00:01:30.975 --> 00:01:36.302
浏览器是一个令人难以置信的应用程序，它充满了所有这些，它是一个复合体
The browser is this incredible app, that's
full of all of these, it's a composite

30
00:01:36.302 --> 00:01:41.341
一个 JavaScript 引擎，加上大量的非 JavaScript 特性。
of a JavaScript engine that this bit,
plus a ton of non-JavaScript features.

31
00:01:41.341 --> 00:01:46.063
其中之一就是它发出网络请求的能力,
One of which is the ability for
it to make network requests,

32
00:01:46.063 --> 00:01:50.509
还有什么东西是 JavaScript 绝对没有的？
what other thing does
JavaScript definitely not have?

33
00:01:50.509 --> 00:01:51.349
马特: 渲染。
&gt;&gt; Matt: Rendering.

34
00:01:51.349 --> 00:01:55.848
是的，渲染，确切地说，是用 JavaScript 实现的吗？
&gt;&gt; Will Sentance: Yeah, rendering,
exactly, is that in JavaScript?

35
00:01:55.848 --> 00:02:01.248
不那是在网页浏览器里我们的 HTML DOM,
No, that's in the web browser,
our HTML DOM,

36
00:02:01.248 --> 00:02:08.814
这就是我们的模型，我们简化版的纸上内容。
that is our model, our simplified
version of what's on the page.

37
00:02:08.814 --> 00:02:11.926
这是我们在页面上的简化版本
That's our simplified version
of what's on the page so

38
00:02:11.926 --> 00:02:15.381
我们可以和它互动，这样我们就可以在页面上添加东西。
that we can interact with it, so
we can add stuff to that page.

39
00:02:15.381 --> 00:02:20.127
文档对象模型，它是一个模型，一个对象的简化版本
Document Object Model, it's a model,
a simplified version in an object

40
00:02:20.127 --> 00:02:24.884
文档的样式格式，也就是页面的视觉效果。
style format of what's on the document,
which is the visual of the page.

41
00:02:24.884 --> 00:02:28.948
所有这些我们不能直接编码的功能,
Yeah, all these features we
cannot code for directly,

42
00:02:28.948 --> 00:02:33.711
不管浏览器是用什么写的，它们都是用 c + + 写的。
they're written in whatever
the browser is written, in C++.

43
00:02:33.711 --> 00:02:37.262
或者其他语言的浏览器,
Or whatever other languages,
the browser is written in,

44
00:02:37.262 --> 00:02:39.225
我们直接写这些吗？
do we write for these directly?

45
00:02:39.225 --> 00:02:44.998
但是人们，我们确实有一种编程语言，可以让我们使用这些特性。
But people, we do have a programming
language that lets us use these features.

46
00:02:44.998 --> 00:02:49.760
这种编程语言是 JavaScript，但我们不会
And that programming language is
JavaScript, but we're not actually gonna

47
00:02:49.760 --> 00:02:54.389
在 JavaScript 中找到这些特性，那么我们如何与它们交互呢？
find any of these features in JavaScript,
so how do we interact with them?

48
00:02:54.389 --> 00:02:56.937
我们如何与它们交互？
How do we interface with them?

49
00:02:56.937 --> 00:03:00.902
在 JavaScript 中，我们得到了一些我称之为 facade 函数的东西
In JavaScript we get a bunch of
what I call facade functions, and

50
00:03:00.902 --> 00:03:03.407
我说清楚了，这不流行。
it's not catching on, I'll be clear.

51
00:03:03.407 --> 00:03:07.975
这个短语并没有流行起来，我把它们叫做正面
This phrase is not catching on, a bunch
of what's called, I call them facade

52
00:03:07.975 --> 00:03:12.149
这些函数看起来像是 JavaScript。
functions, they are functions that
look like they're JavaScript.

53
00:03:12.149 --> 00:03:19.870
但是实际上是网页浏览器功能的正面，正面，你知道吗？
But are actually fronts, facades, for
web browser features and you know what?

54
00:03:19.870 --> 00:03:23.639
其中一个浏览器功能信不信由你,
One of those web browser
features believe it or not,

55
00:03:23.639 --> 00:03:29.740
甚至没有 web 浏览器中的定时器功能。
JavaScript doesn't even have the feature
of a timer that's in the web browser too.

56
00:03:29.740 --> 00:03:33.545
我们得到了这些功能的标签,
And we get labels for
each of these features,

57
00:03:33.545 --> 00:03:40.670
希望和名字完全一致，那会很好，对吧？
let's hope are perfectly aligned to
the name, that'll be very nice, right?

58
00:03:40.670 --> 00:03:44.707
如果它们与名称完全对齐,
If they were perfectly
aligned to the name instead,

59
00:03:44.707 --> 00:03:48.763
凯拉你觉得我们定时器的标签是什么？
Kayla what do you think our label for
timer would be?

60
00:03:48.763 --> 00:03:50.687
定时器？
&gt;&gt; Kayla: Timer?

61
00:03:50.687 --> 00:03:54.792
威尔 · 森坦斯: 这个名字很有道理，是个完美的名字，但在现实中,
&gt;&gt; Will Sentance: That makes sense, that
would be a perfect name, but in reality,

62
00:03:54.792 --> 00:03:59.567
我们在 JavaScript 中使用什么标签来启动计时器来延迟函数
what label do we get in JavaScript in
order to start a timer to delay a function

63
00:03:59.567 --> 00:04:00.106
凯拉？
Kayla?

64
00:04:00.106 --> 00:04:01.919
设定时间。
&gt;&gt; Kayla: Set time out.

65
00:04:01.919 --> 00:04:05.634
威尔 · 森特斯: 设定时间，就是这样，设定时间不是做什么
&gt;&gt; Will Sentance: Set time out,
that's it, set time out is not doing

66
00:04:05.634 --> 00:04:10.044
所有在 JavaScript 中感兴趣的东西都是一个标签
anything of interest in JavaScript
instead it's a label for

67
00:04:10.044 --> 00:04:12.651
网页浏览器上的定时器。
the timer built to the web browser.

68
00:04:12.651 --> 00:04:17.362
Braden，HTML DOM 的标签是什么，希望是 DOM，对吗？
Braden, what's our label for the HTML DOM,
hopefully it's like DOM, right?

69
00:04:17.362 --> 00:04:18.487
布雷顿: 那太好了。
&gt;&gt; Braydon: That would be nice.

70
00:04:18.487 --> 00:04:19.571
威尔 · 森特斯: 那太好了，那是什么呢？
&gt;&gt; Will Sentance: That'd be nice,
what is it instead?

71
00:04:19.571 --> 00:04:20.536
布雷顿: 我不知道。
&gt;&gt; Braydon: I don't know.

72
00:04:20.536 --> 00:04:24.170
Will Sentance: 当我们想要使用 JavaScript 的时候，我们有什么样的标签呢
&gt;&gt; Will Sentance: Well, what label do we
have in JavaScript whenever we wanna use

73
00:04:24.170 --> 00:04:28.768
一种允许我们显示的网页浏览器特性的集合，以及
a kind of collection of features of the
web browser that allow us to display, and

74
00:04:28.768 --> 00:04:31.119
渲染，并在页面上显示东西？
render, and display stuff on the page?

75
00:04:31.119 --> 00:04:31.740
彼得: 文件。
&gt;&gt; Peter: Document.

76
00:04:31.740 --> 00:04:33.519
威尔 · 森塔斯: 文件，彼得的观点正确。
&gt;&gt; Will Sentance: Document,
Peter's spot on.

77
00:04:33.519 --> 00:04:36.691
没错，文档，所以每当你看到文档,
Exactly, Document, so
whenever you see Document,

78
00:04:36.691 --> 00:04:39.300
在 JavaScript 中什么也做不了。
that ain't doing anything in JavaScript.

79
00:04:39.300 --> 00:04:43.649
这是一个使用网页浏览器特性的命令，这有点疯狂。
It's a command to go and use a feature of
the web browser, that's kind of crazy.

80
00:04:43.649 --> 00:04:46.981
托德，我们对网络特征的定义是什么
Todd, what do we have as our label for
the feature of the web

81
00:04:46.981 --> 00:04:50.808
浏览器，让我们做网络请求对互联网说话？
browser that lets us do network
request speaking to the Internet?

82
00:04:50.808 --> 00:04:52.223
有人知道吗？
Anyone know?

83
00:04:52.223 --> 00:04:54.737
你知道吗？
Dan you know?

84
00:04:54.737 --> 00:04:56.009
阿丹: 是吗？
&gt;&gt; Dan: Is it get?

85
00:04:56.009 --> 00:04:59.178
威尔 · 森塔斯: 不完全是，那是我们过去常用的,
&gt;&gt; Will Sentance: Not quite,
that's the one which we used to kind of,

86
00:04:59.178 --> 00:05:01.350
那是特写的包装纸。
that was a wrapper for the feature.

87
00:05:01.350 --> 00:05:02.870
Tcp UDP.
&gt;&gt; Dan: TCP UDP.

88
00:05:02.870 --> 00:05:04.000
威尔 · 森塔斯: 我们有什么 Tcp UDP.
&gt;&gt; Will Sentance: What did we have?
&gt;&gt; Dan: TCP UDP.

89
00:05:04.000 --> 00:05:04.786
威尔 · 桑塔斯: 不是直接的。
&gt;&gt; Will Sentance: Not directly.

90
00:05:04.786 --> 00:05:06.038
捡回来？
&gt;&gt; Kayla: Fetch?

91
00:05:06.038 --> 00:05:08.829
威尔 · 森坦斯: “取” ，凯拉的名字，是我们比较新的名字
&gt;&gt; Will Sentance: Fetch, Kayla's spot on,
that's our sort of newer name for

92
00:05:08.829 --> 00:05:12.019
但我们以前给它取了个不同的名字，大家还记得吗？
it, but we used to have a different
name for it, everyone remember?

93
00:05:12.019 --> 00:05:13.127
阿贾克斯。
&gt;&gt; Kayla: AJAX.

94
00:05:13.127 --> 00:05:15.841
威尔 · 森特斯: 不，是 xhr，大家还记得 xhr 吗？
&gt;&gt; Will Sentance: No, it was something
it was xhr, everyone remember xhr?

95
00:05:15.841 --> 00:05:22.452
不过顺便说一句看看我们的名字和底层特征是多么一致,
Though, by the way, look how consistent
our names are with the underlying feature,

96
00:05:22.452 --> 00:05:26.889
好吧控制台这个更合理一点,
okay, console,
this one's a little bit more reasonable,

97
00:05:26.889 --> 00:05:29.764
控制台的标签是什么，杰夫？
what's the label for console, Jeff?

98
00:05:29.764 --> 00:05:31.055
杰夫: 控制台。
&gt;&gt; Jeff: Console.

99
00:05:31.055 --> 00:05:36.105
威尔 · 森特斯: 控制台，抓住杰夫，太好了，杰夫完美地着陆了,
&gt;&gt; Will Sentance: Console, hold on Jeff,
excellent, Jeff landed that perfectly,

100
00:05:36.105 --> 00:05:42.052
我们还有其他特性，比如本地存储，IndexedDB，所有这些。
and we have other features here like
local storage, IndexedDB, all of those.

101
00:05:42.052 --> 00:05:47.149
所以本地存储的名字是本地存储，所以他们随着时间的推移变得越来越好。
So local storage's name is local storage,
so they got better at it over time.

102
00:05:47.149 --> 00:05:50.016
他们在 JavaScript 标签的命名上确实做得更好
They definitely got better at
naming the JavaScript label for

103
00:05:50.016 --> 00:05:51.675
网页浏览器功能。
the web browser feature over time.

104
00:05:51.675 --> 00:05:56.024
但在早期，我不知道它们是否是最聪明的。
But in the early days, I don't know
these were not the smartest, whatever.

105
00:05:56.024 --> 00:06:00.978
好吧，乡亲们，这意味着我们的一大部分
Alright, so folk,
that means a big part of what we're

106
00:06:00.978 --> 00:06:05.726
在 JavaScript 中所做的事情根本不是 JavaScript。
doing in JavaScript isn't
even JavaScript at all.

107
00:06:05.726 --> 00:06:10.209
也就是说我需要在这里扩展我的 JavaScript 平台,
Meaning I'm gonna need to expand
my platform of JavaScript on here,

108
00:06:10.209 --> 00:06:14.403
从 JavaScript 的三大部分开始。
taking it from being just those
big three pieces in JavaScript.

109
00:06:14.403 --> 00:06:17.223
作为 JavaScript 的三大部分，加上,
Being the big three pieces in JavaScript,
plus,

110
00:06:17.223 --> 00:06:22.072
我会把下面所有的东西都放在网页浏览器里。
I'm gonna have everything below here be
stuff that's happening in the web browser.

111
00:06:22.072 --> 00:06:29.398
我要做蓝色，当你看到蓝色，它代表网页浏览器和
I'm gonna do in blue, and when you see
blue, it represents the web browser and

112
00:06:29.398 --> 00:06:35.173
与 JavaScript 无关，好了，伙计们，我们开始吧。
not anything to do with JavaScript,
okay folks, here we go.

113
00:06:35.173 --> 00:06:39.827
这是一个擦拭停机时间，所以转向你的伙伴，转向你的邻居和
It's a board wipe downtime, so turn to
your partner, turn to your neighbor and

114
00:06:39.827 --> 00:06:43.591
开始尝试导航和用语言表达这些代码在做什么。
start trying to navigate and
verbalize what this code is doing.

115
00:06:43.591 --> 00:06:47.610
试一试吧，我们还没有工具来做这件事，但是
Give it a shot, we don't have
the tools yet to do this, but

116
00:06:47.610 --> 00:06:53.115
既然我们知道设置超时，那么它就是网页浏览器中计时器的标签。
given that we know set timeout, is gonna
be a label for timer in the web browser.

117
00:06:53.115 --> 00:06:55.875
想想这里可能会发生什么，并且
Have a think what might be happening here,
and

118
00:06:55.875 --> 00:06:58.793
好好想想该怎么解释布莱登。
have a think about how
one might explain Braden.

119
00:06:58.793 --> 00:07:03.555
伊桑的直觉告诉我们这里的执行顺序是怎样的
And Ethan's instincts around what the
order of execution here might be, try and

120
00:07:03.555 --> 00:07:04.543
走在它前面。
get ahead of it.
