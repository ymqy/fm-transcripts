WEBVTT

1
00:00:00.320 --> 00:00:02.029
威尔 · 森塔斯: 但问题是。
&gt;&gt; Will Sentance: But here's the question.

2
00:00:02.029 --> 00:00:05.830
我不仅仅是从 Twitter 上得到数据而不使用它。
I didn't just get that data
from Twitter to not use it.

3
00:00:05.830 --> 00:00:10.220
我让它使用它，展示它，不管它可能是什么。
I got it to use it, display it,
whatever it might be.

4
00:00:10.220 --> 00:00:11.759
但我不知道那些数据什么时候能回来。
But I don't know when that
data's gonna come back.

5
00:00:11.759 --> 00:00:13.949
它随时都可能回来。
It could come back any time.

6
00:00:13.949 --> 00:00:19.155
所以当数据回来的时候我需要 JavaScript
So I'm gonna need JavaScript to somehow
when the data does come back and

7
00:00:19.155 --> 00:00:24.897
存储在一个属性中，自动运行一些代码来使用它。
get stored in a property, automatically
run some code on it to use it.

8
00:00:24.897 --> 00:00:26.829
但我要怎么做呢？
But how am I gonna do that?

9
00:00:28.829 --> 00:00:33.280
人们发现这个空数组
It turns out people that this empty array

10
00:00:33.280 --> 00:00:38.109
在自己的履行财产也是非常重要的。
in the own fulfilled property
is also super damn important.

11
00:00:38.109 --> 00:00:45.840
这个空数组将会有，或者我们可以放在这里，任何函数，任何代码,
This empty array is gonna have, or we can
put in there, any functions, any code,

12
00:00:45.840 --> 00:00:51.799
我们希望在 JavaScript be 的帮助下自动生成
that we want to have automatically
with the help of JavaScript be

13
00:00:51.799 --> 00:00:56.579
值属性填充时触发运行。
triggered to run when the value
property gets filled in.

14
00:00:56.579 --> 00:00:58.899
当数据从 Twitter 上传回来的时候,
Which happens when the data
comes back from Twitter,

15
00:00:58.899 --> 00:01:00.840
无论什么时候都会发生。
which happens whenever it does.

16
00:01:00.840 --> 00:01:06.319
它会自动触发，在那一刻，数据
And it's going to automatically trigger,
at that moment, the data

17
00:01:06.319 --> 00:01:11.150
从 Twitter 返回，自动获得 value 属性的更新。
comes back from Twitter, gets updated
on the value property, automatically.

18
00:01:11.150 --> 00:01:14.689
它会自动触发存储在这个数组中的任何功能。
It's gonna automatically trigger any
functionality stored in this array.

19
00:01:14.689 --> 00:01:17.679
因为在 JavaScript 中，你可以把函数存储在一个列表中。
Cuz in JavaScript,
you can store functions as in a list.

20
00:01:19.620 --> 00:01:22.500
通常你可以在这里存储一个函数数组,
And usually into it you can store
an array of functions here,

21
00:01:22.500 --> 00:01:24.060
我们可以加入一个函数。
we can put in a function.

22
00:01:24.060 --> 00:01:28.329
我们在这个数组中插入的任何函数都会被自动触发运行
And any function we stick in this array
will be automatically triggered to run

23
00:01:29.950 --> 00:01:31.329
当 value 属性更新时。
when the value property gets updated.

24
00:01:31.329 --> 00:01:32.463
等待时机,
And wait for it,

25
00:01:32.463 --> 00:01:37.003
值属性中的数据将自动插入作为输入,
that data in the value property
will be auto inserted as the input,

26
00:01:37.003 --> 00:01:42.460
作为参数来填充任何存储在这里的函数的参数。
as the argument to fill in the parameter
of any function that's stored in here.

27
00:01:42.460 --> 00:01:47.599
看看这个显示功能，得到了一个小参数，他们的数据。
So take a look at that display function
there, got a little parameter their data.

28
00:01:47.599 --> 00:01:51.659
如果我们可以把显示存储在数组中,
If we could just get display
to be stored in that array,

29
00:01:52.700 --> 00:01:57.329
它会自动运行，我们的数据会回来填补,
it would be automatically run and
our data that came back would fill in,

30
00:01:57.329 --> 00:02:01.260
数据参数时，它是自动运行时显示为自动运行。
that data parameter when it's auto
run when display as auto run.

31
00:02:02.359 --> 00:02:06.370
但是我们怎样才能把显示信息加入到数组中呢？
But how would we get
display into that array?

32
00:02:06.370 --> 00:02:10.819
我如何通常实际洋红匹配这个地图？
How do I typically actually
magenta to match on this map?

33
00:02:10.819 --> 00:02:12.870
我通常如何添加到什么方法？
How would I typically add to what method?

34
00:02:12.870 --> 00:02:15.340
我必须加两个数组吗？
Do I have to add two arrays?

35
00:02:15.340 --> 00:02:16.539
讲者2: 推 威尔 · 森特斯: 推。
&gt;&gt; Speaker 2: Push.
&gt;&gt; Will Sentance: Push.

36
00:02:16.539 --> 00:02:17.960
它在未完成的属性上。
It's on the unfulfilled properties.

37
00:02:17.960 --> 00:02:19.920
你只是在想我通常会怎么做。
You just sort of think
what would I do typically.

38
00:02:19.920 --> 00:02:22.340
未来数据，点。
Future data, dot.

39
00:02:22.340 --> 00:02:24.469
演讲者2: 点，未完成，点，推。
&gt;&gt; Speaker 2: Dot, unfulfilled, dot, push.

40
00:02:24.469 --> 00:02:27.789
将句子: 点，推，然后通过显示功能。
&gt;&gt; Will Sentance: Dot, push and
then pass in the display function.

41
00:02:29.810 --> 00:02:33.819
不幸的是，我们不能这样做，但是从根本上来说，是的，完全正确。
We can't do that unfortunately but
it's fundamentally, yeah, exactly right.

42
00:02:33.819 --> 00:02:34.650
我们不能这么做。
We can't do that.

43
00:02:34.650 --> 00:02:37.439
有没有人从我之前说的看出为什么我们不能这么做？
Did anyone spot why we can't do
that from what I said earlier?

44
00:02:37.439 --> 00:02:38.219
汤姆 演讲者2: 这是一个隐藏的属性。
Tom?
&gt;&gt; Speaker 2: It's a hidden property.

45
00:02:38.219 --> 00:02:39.150
威尔 · 森坦斯: 隐藏财产。
&gt;&gt; Will Sentance: Hidden property.

46
00:02:39.150 --> 00:02:41.979
隐藏的财产，甚至无法访问这个。
Hidden property,
can't even get access to this.

47
00:02:41.979 --> 00:02:43.759
完全正确从 Tolls Pom。
Exactly right from Tolls Pom.

48
00:02:43.759 --> 00:02:45.159
但是不要惊慌。
Don't panic though.

49
00:02:45.159 --> 00:02:50.159
给了我们一个内置的方法，允许我们传递任何东西
JavaScript gives us a method built
in that allows us whatever we pass

50
00:02:50.159 --> 00:02:54.770
它作为输入是否会被捕获并卡在数组中。
to whether it as input will be grabbed and
stuck in that array.

51
00:02:54.770 --> 00:02:56.447
顺便问一下，在幕后，他们在做什么
By the way, behind the scenes,
what are they doing for

52
00:02:56.447 --> 00:02:57.479
这些数据来抵消这个推动？
the data to unfulfill that push?

53
00:02:59.379 --> 00:03:02.295
人们能发现什么可能是隐藏的，而不是隐藏的。
And what can people spot might
be that hidden, not that hidden.

54
00:03:02.295 --> 00:03:06.776
你能发现什么，可能是把一个函数插入其中的方法
What can you spot might be that method
that sticks a function into that

55
00:03:06.776 --> 00:03:08.717
未完成的任务，彼得？
unfulfilled array, Peter?

56
00:03:08.717 --> 00:03:09.373
讲者2: 然后。
&gt;&gt; Speaker 2: Then.

57
00:03:09.373 --> 00:03:12.520
威尔 · 森特斯: 没错，那么方法，那么点方法，没错，而且
&gt;&gt; Will Sentance: Exactly, the Then
method, the dot Then method, exactly, and

58
00:03:12.520 --> 00:03:14.219
这就是我们将要看到的。
that's what we're going to see.

59
00:03:14.219 --> 00:03:17.750
顺便说一下，我们稍后也会看到,
By the way, we're also going
to see in a moment later on,

60
00:03:17.750 --> 00:03:22.310
我们稍后会讲到，这种方法是从哪里来的？
we're gonna see a little bit later on,
where's that method come from?

61
00:03:22.310 --> 00:03:26.030
- 因为它不在这里-它不在这个物体上？
Because it ain't on here.
It isn't on this object?

62
00:03:26.030 --> 00:03:28.569
我们来看看这么长时间以来,
We'll see, for
once we're in a session that so long,

63
00:03:28.569 --> 00:03:31.430
今天下午我们要看看这个方法到底是从哪里来的。
we're gonna see where that method
actually comes from this afternoon.

64
00:03:31.430 --> 00:03:32.479
好了。
There we go.

65
00:03:32.479 --> 00:03:36.658
但是现在，让我们确切地做这一行。
But for now,
let's exactly do that line there.

66
00:03:36.658 --> 00:03:40.409
我们来看看这里有什么东西能起作用。
Let's get something that's
going to function in here.

67
00:03:40.409 --> 00:03:43.219
因为没有必要把数据从 Twitter 上带回来只是为了
Because there's no point bringing
data back from Twitter only for

68
00:03:43.219 --> 00:03:44.439
消失在价值属性中。
it to disappear in the value property.

69
00:03:44.439 --> 00:03:47.759
我们不知道会出现什么，所以我们不能直接使用它。
And we've no idea what's going to
show up so we can't use it directly.

70
00:03:47.759 --> 00:03:50.870
我们必须确保我们有一个函数存储在这里。
We've got to make sure we have
a function stored in here.

71
00:03:50.870 --> 00:03:53.110
它将由 JavaScript 自动运行。
It's going to be auto run
by JavaScript for us.

72
00:03:53.110 --> 00:03:57.658
我们开始吧,
So here we go,

73
00:03:57.658 --> 00:04:03.750
那就未来数据点吧
future data dot then

74
00:04:03.750 --> 00:04:08.879
传递整个显示函数定义。
passing the entire display
function definition.

75
00:04:10.590 --> 00:04:17.363
未来数据就是这个对象。
Okay, so future data is this object here.

76
00:04:17.363 --> 00:04:21.439
它有一个未完成的属性。
It has an unfulfilled property.

77
00:04:21.439 --> 00:04:27.029
我不会把所有的财产名称，我们已经得到了未履行的财产和
I'm not gonna put all the property names
and we've got the unfulfilled property and

78
00:04:27.029 --> 00:04:31.379
不管传递到哪里，都会被拿走，对不起。
whatever gets passed to then,
it's just going to be nabbed, sorry.

79
00:04:31.379 --> 00:04:33.389
在美国有这个词吗？
Is that a word in America?

80
00:04:33.389 --> 00:04:34.829
是的。演讲者2: 是的。
It is.
&gt;&gt; Speaker 2: Yes.

81
00:04:34.829 --> 00:04:40.810
威尔 · 森塔斯: 英语中像19世纪棉花一样的单词将会被采用。
&gt;&gt; Will Sentance: British word like a 19th
century cottony word is going to be taken.

82
00:04:42.170 --> 00:04:46.860
只要有解析器，就会有解析器卡在里面。
Whenever it's parser there's gonna
be taken and stuck in there.

83
00:04:46.860 --> 00:04:48.300
这正是我们所做的。
And that's exactly what we do.

84
00:04:48.300 --> 00:04:53.939
我们使用 display 函数，然后使用未实现的数组。
We take the display function and
stuck into the unfulfilled array.

85
00:04:53.939 --> 00:04:55.954
我们把它放进去。
Let's put it in.

86
00:04:55.954 --> 00:05:03.930
这就是我们在未实现的数组中的显示功能。
There it is, our display function
in the unfulfilled array.

87
00:05:03.930 --> 00:05:05.649
看看，多漂亮啊？
Look at that, isn't that beautiful?

88
00:05:07.220 --> 00:05:07.930
我的天啊。
My goodness.

89
00:05:07.930 --> 00:05:11.870
啊哈,
[LAUGH]
Aha,

90
00:05:11.870 --> 00:05:14.819
这些都是通过这两条线实现的。
that was all achieved by those two lines.

91
00:05:14.819 --> 00:05:17.850
但是这位女神已经准备好了吗？
But has this goddess all set up?

92
00:05:17.850 --> 00:05:18.939
当然了。
You bet it has.

93
00:05:18.939 --> 00:05:20.379
我们现在有了所有的设备。
We have all our setup now.

94
00:05:20.379 --> 00:05:21.329
我们在背景中对着互联网说话。
We're speaking to the Internet
in the background.

95
00:05:21.329 --> 00:05:26.026
我们有一个很好的连接到一个很好的对象在这里回到 JavaScript。
We've got a nice connection to a nice
object here back in JavaScript.

96
00:05:26.026 --> 00:05:30.199
当时间来自网络的时候，我们的价值就会被填满
It's gonna be filled in with our value
when the time comes from the network

97
00:05:30.199 --> 00:05:31.850
请求响应。
request responses.

98
00:05:31.850 --> 00:05:36.090
凯拉说，旧的满足数组现在有一个功能，将
Kayla said, the old fulfilled
array now has a function that will

99
00:05:36.090 --> 00:05:37.909
当数据返回时自动运行。
automatically run when
that data comes back.

100
00:05:37.909 --> 00:05:39.709
我们结束了。
We're done.

101
00:05:39.709 --> 00:05:44.490
我们继续大概，比如说一毫秒。
We get to plow on to at roughly,
let's say one millisecond.

102
00:05:44.490 --> 00:05:46.329
到哪一行。
What line over to.

103
00:05:46.329 --> 00:05:49.389
伊森，我们一毫秒到达哪条线？
Ethan, what line do we
hit at one millisecond?

104
00:05:49.389 --> 00:05:51.009
演讲者2: 控制台日志，我先来。
&gt;&gt; Speaker 2: Console log, me first.

105
00:05:51.009 --> 00:05:53.819
威尔 · 森特斯: 太棒了，我喜欢每个人都这样。
&gt;&gt; Will Sentance: Fantastic,
I love everybody staying so.

106
00:05:53.819 --> 00:06:01.160
精确地聚焦，控制台日志(“我第一”) ,
Focus as well exactly,
console log('Me first'),

107
00:06:01.160 --> 00:06:05.350
就在控制台里。
there it is in a console.

108
00:06:05.350 --> 00:06:08.752
我们有，我先来。
And we have, Me first.

109
00:06:08.752 --> 00:06:14.043
这里是1毫秒。
There it is at 1 millisecond.

110
00:06:16.771 --> 00:06:19.817
威尔 · 森特斯: 我对这件事感到遗憾的是，这里的这一点是这样的
&gt;&gt; Will Sentance: The one thing I regret
on this is this bit here being so

111
00:06:19.817 --> 00:06:22.250
接近狂躁的创造物的权利。
close to the manic creation to the right.

112
00:06:22.250 --> 00:06:24.720
让我们稍微移动一下。
So let's move this slightly.

113
00:06:24.720 --> 00:06:27.334
意识到准备就绪---- 那是半程马拉松的长度，对吗？
Sense of readiness,
that's how long a half marathon is, right?

114
00:06:29.531 --> 00:06:33.120
威尔 · 森塔斯: 3英里，3英里。
&gt;&gt; Will Sentance: 3 miles, 3 miles.

115
00:06:34.250 --> 00:06:39.050
我姐姐三月份要参加全程马拉松，亲爱的，随便啦。
My sister's doing a full marathon
in March, dear, whatever.

116
00:06:39.050 --> 00:06:44.920
非常为她骄傲，非常骄傲，非常骄傲。
Very proud of her, very proud, very proud.

117
00:06:44.920 --> 00:06:45.980
那么我们用的是哪一个呢？
So which one are we using here?

118
00:06:45.980 --> 00:06:48.420
我们正在使用网络请求功能，不是吗？
We're using the network request feature,
weren't we?

119
00:06:48.420 --> 00:06:50.129
大家听好了，标签是什么？
What was the label, everybody?

120
00:06:50.129 --> 00:06:52.110
说话人3: 取回 威尔 · 森特斯: 拿回来，没错，是的,
&gt;&gt; Speaker 3: Fetch.
&gt;&gt; Will Sentance: Fetch, exactly, yeah,

121
00:06:52.110 --> 00:06:52.636
取。
fetch.

122
00:06:55.052 --> 00:06:57.807
这是我们使用网络请求的 JavaScript 标签
&gt;&gt; Will Sentance: That's our JavaScript
label for using the network request for

123
00:06:57.807 --> 00:06:58.379
彼此。
each other.

124
00:06:59.409 --> 00:07:00.730
但这是双管齐下的，所以
But it's a two-pronged, so

125
00:07:00.730 --> 00:07:03.649
在 JavaScript 中也有类似的结果---- 相当惊人。
it also has consequences in
JavaScript as well, pretty amazing.

126
00:07:04.769 --> 00:07:09.737
好吧，当我这么做的时候，你不会相信发生了什么。
Okay, so while I was doing that,
you won't believe what happened.

127
00:07:09.737 --> 00:07:14.216
成功地把我们送回到，比如说，我们应该说什么,
Twitter successfully sends us back at,
let's say, what should we say,

128
00:07:14.216 --> 00:07:17.334
大概270毫秒吧？
like 270 milliseconds,
something like that?

129
00:07:17.334 --> 00:07:19.327
是的，270毫秒。
Yeah, 270 milliseconds.

130
00:07:19.327 --> 00:07:24.339
在270毫秒时，我们得到了好消息。
At 270 milliseconds, we got good news.

131
00:07:24.339 --> 00:07:29.288
我们得到了数据，一条来自 Twitter 的消息
We got data back,
a message back from Twitter

132
00:07:29.288 --> 00:07:33.596
在270，完成，它回来了。
at 270, complete and it came back.

133
00:07:33.596 --> 00:07:39.024
好的，简化的幻灯片在这里，回来作为一个美丽的小字符串在这里，嗨。
Okay, simplified slide here, came back
as a beautiful little string here, Hi.

134
00:07:39.024 --> 00:07:43.199
完成后，这就是回来的东西。
On completion, that's what came back.

135
00:07:44.720 --> 00:07:47.920
她以一个对象的形式回来，因为他说包装成一个对象的形式，但是
And she comes back in an object for
he says package into an object form but

136
00:07:47.920 --> 00:07:50.819
我们可以得到数据所在的属性。
we can get the property
on which that data is.

137
00:07:50.819 --> 00:07:53.278
就是这样，这是一个很棒的 tweet。
And there it is,
is the high string with a great tweet.

138
00:07:54.629 --> 00:07:56.409
跟着这个人，嗯？
Follow this person, hmm?

139
00:07:56.409 --> 00:08:00.949
所以在完成的时候，我们得到了这个可爱的回答，但是
So on completion,
we've got this lovely response, but

140
00:08:00.949 --> 00:08:01.810
它卡在浏览器里了。
it's stuck in the web browser.

141
00:08:03.089 --> 00:08:04.449
怎么做？
How?

142
00:08:04.449 --> 00:08:07.329
托德，它是怎么回到 JavaScript 中的呢？
How, Todd,
does it get back into JavaScript?

143
00:08:07.329 --> 00:08:10.889
在 JavaScript 的全局内存中它会被分配到什么地方？
What is it gonna be assigned to back
in global memory in JavaScript?

144
00:08:10.889 --> 00:08:11.870
演讲者2: 未来数据值。
&gt;&gt; Speaker 2: Future data value.

145
00:08:11.870 --> 00:08:14.759
Will Sentance: Future data value property spot on.
&gt;&gt; Will Sentance: Future
data value property spot on.

146
00:08:14.759 --> 00:08:18.745
就这样，他会触发什么运行，托德？
And at that,
he's gonna trigger what to run, Todd?

147
00:08:18.745 --> 00:08:20.509
讲者2: 未完成的功能。
&gt;&gt; Speaker 2: The unfulfilled functions.

148
00:08:20.509 --> 00:08:22.740
威尔 · 森特斯: 是的，没有完成的功能，说得好。
&gt;&gt; Will Sentance: Yeah,
the unfulfilled functions, well put.

149
00:08:22.740 --> 00:08:25.209
哪一个是特别的，这里是我们的？
Which is specifically, here is our?

150
00:08:25.209 --> 00:08:27.009
讲者二: 展示 显示功能,
&gt;&gt; Speaker 2: Display.
&gt;&gt; Will Sentance: Display function,

151
00:08:27.009 --> 00:08:28.860
输入了什么？
with what as its input?

152
00:08:30.250 --> 00:08:31.759
讲者2: 价值。
&gt;&gt; Speaker 2: The value.

153
00:08:31.759 --> 00:08:34.830
Will Sentance: 太棒了，值属性就是值，字符串？
&gt;&gt; Will Sentance: Fantastic, the value
property which is the value, the string?

154
00:08:34.830 --> 00:08:36.190
讲者二: 你好 威尔 · 森坦斯: 嗨。
&gt;&gt; Speaker 2: Hi.
&gt;&gt; Will Sentance: Hi.

155
00:08:36.190 --> 00:08:38.269
托德说的非常好，非常非常好。
Excellent from Todd, very very nice.

156
00:08:38.269 --> 00:08:44.789
所以我们在这里，大大延迟了270毫秒。
So here we are,
way later at 270 milliseconds.

157
00:08:44.789 --> 00:08:48.409
270毫秒,
270 milliseconds,

158
00:08:48.409 --> 00:08:53.419
我们会打电话给你，你可能已经打过去了，等等，真的吗？
we are going to call, and
you may already be going, hold on, really?

159
00:08:53.419 --> 00:08:54.879
什么？
What?

160
00:08:54.879 --> 00:08:56.889
我们把它放到调用堆栈上。
We'll just put it on the call stack.

161
00:08:56.889 --> 00:09:00.370
我们要调用的输入显示
We're gonna call display with the input of

162
00:09:03.370 --> 00:09:05.990
嗨，找到了。
hi, there it is.

163
00:09:05.990 --> 00:09:07.750
我的一些颜色开始变得。
Some of my colors starting to become.

164
00:09:07.750 --> 00:09:14.573
显示与喜的输入，全新的。
Display with the input of hi,
and brand new.

165
00:09:14.573 --> 00:09:15.250
所有人？
Everybody?

166
00:09:15.250 --> 00:09:17.260
演讲者3: 执行情境。
&gt;&gt; Speaker 3: Execution context.

167
00:09:17.260 --> 00:09:17.884
威尔 · 森特斯: 是的，没错。
&gt;&gt; Will Sentance: Yeah, exactly.

168
00:09:17.884 --> 00:09:22.399
我们开始了吗，我们把父母放在最后了吗？
Did we initiated,
did we put the parenths on the end?

169
00:09:22.399 --> 00:09:24.500
不，这些会自动启动
No, these will auto stuck on for

170
00:09:24.500 --> 00:09:27.080
仍然是一个全新的执行环境。
us by JavaScript,
still a brand new execution context.

171
00:09:27.080 --> 00:09:30.832
所以我们进入它，然后它是本地的。
So and into it we go and then it's local.

172
00:09:33.639 --> 00:09:38.106
威尔 · 森特斯: 记忆就是输入的数据，托德,
&gt;&gt; Will Sentance: Memory is what's
the data that goes in, Todd,

173
00:09:38.106 --> 00:09:40.899
就是再次提醒我们。
is just remind us again.

174
00:09:40.899 --> 00:09:41.908
价值是多少? 演讲者2: 高。
The value is?
&gt;&gt; Speaker 2: High.

175
00:09:41.908 --> 00:09:47.110
威尔 · 森特斯: 高，但是里面显示，它的标签是什么？
&gt;&gt; Will Sentance: High, but
inside display, what's the label for it?

176
00:09:47.110 --> 00:09:48.889
讲者二: 资料 威尔 · 森特斯: 数据，是的，正是如此。
&gt;&gt; Speaker 2: Data.
&gt;&gt; Will Sentance: Data, yeah, spot on.

177
00:09:50.059 --> 00:09:50.600
就是这个。
There it is.

178
00:09:51.639 --> 00:09:56.259
数据，然后我们控制日志数据，也就是说我们控制日志，托德？
Data, and then we console log data
which is to say we console log, Todd?

179
00:09:56.259 --> 00:09:56.830
讲者二: 高 威尔 · 森塔斯: 高,
&gt;&gt; Speaker 2: High.
&gt;&gt; Will Sentance: High,

180
00:09:57.929 --> 00:09:59.309
托德不厌其烦地说高。
Todd's not tired of saying high.

181
00:09:59.309 --> 00:10:02.720
这就是，在270毫秒，人们。
There it is, and
at 270 milliseconds, people.

182
00:10:02.720 --> 00:10:05.534
我们有一个控制台日志。
We have a console log.

183
00:10:05.534 --> 00:10:08.336
嗨，我的天哪。
Hi, my goodness.

184
00:10:08.336 --> 00:10:09.130
我的天啊。
My goodness.

185
00:10:09.130 --> 00:10:12.750
[笑声]我的天啊，看看那个。
[LAUGH] My goodness, look at that.

186
00:10:12.750 --> 00:10:17.395
所有的主动栏不可思议的获取功能是不可思议的,
All of that initiative bar incredible
fetch function are incredible,

187
00:10:17.395 --> 00:10:18.346
不是函数。
not function.

188
00:10:18.346 --> 00:10:21.413
外观函数，触发这个背景工作,
Facade function,
that triggered this background work,

189
00:10:21.413 --> 00:10:23.399
触发网络请求。
trigger the network request.

190
00:10:23.399 --> 00:10:25.929
去上网，把数据带回来。
Off to the Internet,
brought back the data.

191
00:10:25.929 --> 00:10:29.019
它会去哪里，我们该怎么处理它？
Where is it gonna go, and
what are we gonna do with it?

192
00:10:29.019 --> 00:10:29.950
不要惊慌。
Don't panic.

193
00:10:29.950 --> 00:10:32.990
我们立刻在 JavaScript 中得到了一个漂亮的对象,
We got immediately in
JavaScript a beautiful object,

194
00:10:32.990 --> 00:10:35.870
承诺对象，有两个属性。
the promise object, with two properties.

195
00:10:35.870 --> 00:10:39.259
一个值，这是自动的
One, a value, that was automatically

196
00:10:40.470 --> 00:10:45.210
更新了你好，刚说完话
updated with the Hi,
that came back from speaking

197
00:10:45.210 --> 00:10:48.370
在互联网的背景下，获取工作的另一面。
to the Internet in the background,
the other side of fetches work.

198
00:10:49.460 --> 00:10:53.889
当它回来的时候，我们不知道谁会回来，不要惊慌。
And when it did come back, we don't
know who's gonna come back, don't panic.

199
00:10:53.889 --> 00:10:58.169
我们准备了一个可以自动运行的函数，输入是
We had a function ready to be auto run,
with the input being that

200
00:10:58.169 --> 00:11:02.049
返回的 value 属性或者从 Twitter 返回的数据的值。
value property that came back or the value
of the data that came back from Twitter.

201
00:11:02.049 --> 00:11:07.038
由于该函数的输入在230毫秒显示卡住了
As the input of that function at 230
milliseconds display was stuck on

202
00:11:07.038 --> 00:11:11.394
凉爽的一面与高输入，我们能够控制日志 hi。
the cool side with high input and
we were able to console log hi.
