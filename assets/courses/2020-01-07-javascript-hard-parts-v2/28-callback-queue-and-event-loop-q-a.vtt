WEBVTT

1
00:00:00.100 --> 00:00:02.140
威尔 · 森特斯: 让我们去找丹，去吧，伙计。
&gt;&gt; Will Sentance: Let's go to Dan,
go ahead man.

2
00:00:02.140 --> 00:00:04.940
阿丹: 告诉我，如果我进入杂草，但回到最后一个例子在哪里
&gt;&gt; Dan: Tell me if I'm getting in the
weeds, but back to the last example where

3
00:00:04.940 --> 00:00:09.289
我们有一千毫秒的暂停时间，它只是在等待。
we have the thousand millisecond
timeout and it's just waiting.

4
00:00:09.289 --> 00:00:11.789
事件循环只是检查。
That event loop is just checking.

5
00:00:12.849 --> 00:00:15.750
那整整一秒钟的通话记录呢？
Is there anything on the call sack for
that entire second?

6
00:00:15.750 --> 00:00:17.969
威尔 · 森特斯: 是的，当然。
&gt;&gt; Will Sentance: Yeah, absolutely.

7
00:00:17.969 --> 00:00:23.835
它要做的就是继续评估是否有代码要运行,
The way it's gonna do it is continue
to assess if there's any code to run,

8
00:00:23.835 --> 00:00:28.565
然后在幕后循环，比较
and then each loop behind the scenes,
it's comparing what

9
00:00:28.565 --> 00:00:33.213
计时器显示的是等待的时间，等待的时间是当前的时间。
the timer says is the wait time
to what is the current time.

10
00:00:33.213 --> 00:00:36.857
它会不断地检查时间是否足够一旦它检查完,
And it's gonna constantly check, is enough
time passed, and as soon as it has,

11
00:00:36.857 --> 00:00:39.017
它会抓住那个函数并执行它。
it's gonna grab that function and
execute it.

12
00:00:39.017 --> 00:00:42.587
那个事件循环是不是和你的浏览器一样持续运行
&gt;&gt; Dan: Is that event loop running
constantly as long as your browser

13
00:00:42.587 --> 00:00:43.151
是开着的吗？
is open?

14
00:00:43.151 --> 00:00:45.409
威尔 · 森坦斯: 只要我们的应用程序还在运行，是的，是的。
&gt;&gt; Will Sentance: As long as our
application's running, yeah, yeah.

15
00:00:45.409 --> 00:00:46.399
Peter 说吧。
Peter, go ahead.

16
00:00:46.399 --> 00:00:50.750
彼得: 如果，锁一秒代替，运行我们的循环为
&gt;&gt; Peter: If, Lock for one second
was instead, running our loop for

17
00:00:50.750 --> 00:00:54.030
500 milliseconds and then called Portillo and ran for
500 milliseconds and
then called Portillo and ran for

18
00:00:54.030 --> 00:00:57.155
再过500毫秒，我们能听到你好吗？
another 500 milliseconds,
would we get that hello?

19
00:00:57.155 --> 00:01:01.750
先是“我” ，然后计时器又用完了一个“你好” ？
And then @me first, and
then when the timer ran out another hello?

20
00:01:01.750 --> 00:01:03.189
威尔 · 森特斯: 如果我们打电话给印刷公司打招呼,
&gt;&gt; Will Sentance: Well if
we are calling print hello,

21
00:01:03.189 --> 00:01:06.000
你说我们要打电话给 printHello 在1号区域内。
you say we're calling printHello
inside of blockFor1Sec.

22
00:01:06.000 --> 00:01:06.760
彼得: 是的，威尔 · 森特斯: 是的，当然。
&gt;&gt; Peter: Yeah,
&gt;&gt; Will Sentance: Yeah, absolutely.

23
00:01:06.760 --> 00:01:10.189
所以如果我们用传统的方式称呼 printHello,
So if we were calling printHello
in the conventional sense,

24
00:01:10.189 --> 00:01:13.569
我们是不是命令那个指纹去运行？
and it's did we command
that print hello to run?

25
00:01:13.569 --> 00:01:18.180
所以它在一个区块里，我们自己编写了调用 printHello。
So it's inside a blockFor1Sec,
we'd written call printHello ourselves.

26
00:01:18.180 --> 00:01:22.118
这是同步代码，这是常规代码，所有典型的全局代码,
Well that's synchronous code, that's
regular, all your typical global code,

27
00:01:22.118 --> 00:01:24.700
不是全局代码，是1秒区域内的代码。
not global code, code inside blockFor1Sec.

28
00:01:24.700 --> 00:01:26.400
当我们告诉它运行时，它就会运行。
That will just run when we tell it to run.

29
00:01:27.430 --> 00:01:31.289
这就是我们，我们有没有在 printHello 的结尾加上任何括号？
This is when we, did we put any
parens on the end of printHello?

30
00:01:31.289 --> 00:01:32.599
现在设置超时。
With set timeout now.

31
00:01:32.599 --> 00:01:38.379
我们将依靠设置超时来运行这个函数
We're going to rely with set timeout
on that function to be able to run for

32
00:01:38.379 --> 00:01:41.734
我们，我们需要非常，非常严格的规则，当这可以自动运行。
us and we need very, very strict
rules when that can be auto run.
