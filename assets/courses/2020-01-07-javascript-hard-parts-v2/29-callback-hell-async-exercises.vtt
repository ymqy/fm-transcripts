WEBVTT

1
00:00:00.270 --> 00:00:02.254
让我们简要地分析一下这种方法。
&gt;&gt; Will Sentance: Let's
briefly analyze this approach.

2
00:00:02.254 --> 00:00:05.179
在结对编程之后我们会看到,
And we'll see this now
after pair programming,

3
00:00:05.179 --> 00:00:08.880
这是一种比较新的方法。
it's sort of a newer
approach to this model.

4
00:00:08.880 --> 00:00:09.730
方法的问题。
Problems of the approach.

5
00:00:11.009 --> 00:00:16.559
很多时候，这些背景功能，功能
A lot of the time,
these background features, the function

6
00:00:16.559 --> 00:00:23.039
然后自动调用，后台特性获取一些数据。
that's then automatically called,
the background feature gets some data.

7
00:00:23.039 --> 00:00:27.250
例如，如果背景功能是通过网络传播的,
So for example, if the background
feature's speaking over the network,

8
00:00:27.250 --> 00:00:31.820
得到一些新的数据，那么，这些数据会出现在哪里呢？
to get some new data in, well then,
where's that data gonna show up?

9
00:00:31.820 --> 00:00:35.000
这些数据显示为输入,
That data shows up as the input,

10
00:00:35.000 --> 00:00:38.920
自动插入到运行的 printHello 函数。
automatically inserted into the running
of that printHello function.

11
00:00:38.920 --> 00:00:40.000
真是太神奇了。
That's pretty amazing.

12
00:00:40.000 --> 00:00:45.039
但问题是，这意味着数据只是可用的
But the problem with that is that
means that data is only available

13
00:00:45.039 --> 00:00:49.320
在 printHello 函数的执行上下文中。
inside the execution context
of that printHello function.

14
00:00:49.320 --> 00:00:54.783
所以如果你去了 Twitter，抓取了一些数据，这个函数会
So if you've gone off to Twitter, grabbed
a bunch of data, the function that's gonna

15
00:00:54.783 --> 00:00:58.070
自动运行完成这个是在 Twitter 的后台,
run automatically own the completion of
this being to Twitter in the background,

16
00:00:58.070 --> 00:00:59.558
这个函数会自动运行。
the function's gonna run automatically.

17
00:01:00.679 --> 00:01:03.972
它会输入来自 Twitter 的数据。
It's gonna have its input
be that data from Twitter.

18
00:01:03.972 --> 00:01:07.114
你只能在函数中使用这些数据,
You could only use that
data inside that function,

19
00:01:07.114 --> 00:01:09.829
因为我们不能运行这个函数。
because we don't get to run this function.

20
00:01:09.829 --> 00:01:12.030
因此，我们不能让它返回任何东西。
Therefore we can't have
it return anything out.

21
00:01:12.030 --> 00:01:14.870
因为我们不能在任何地方分配它的返回值。
Because we can't assign
the return value of it anywhere.

22
00:01:14.870 --> 00:01:17.049
所以取而代之的是，所有的数据都将在这里面使用。
So instead, that data's all
gonna be used inside of here.

23
00:01:18.810 --> 00:01:20.680
这是相当粗糙的。
That's pretty rough.

24
00:01:20.680 --> 00:01:23.730
这就是所谓的回调地狱,
And that's what created something
known as callback hell,

25
00:01:23.730 --> 00:01:28.609
我们所有的工作都是在一个功能中完成的。
where we are doing all of our work on that
data from Twitter, inside of one function.

26
00:01:28.609 --> 00:01:30.829
正如我们在函数内部，在函数内部所做的功能。
As we do function, inside a function,
inside a function.

27
00:01:30.829 --> 00:01:33.939
我看得出来，这很粗糙。
That's pretty rough, I see that.

28
00:01:33.939 --> 00:01:38.170
但是我要告诉你们的是，我们实际上在做什么
But I'm gonna show you that,
in terms of what we're actually doing

29
00:01:38.170 --> 00:01:41.670
在后来的新版本中，引擎盖下面，变化不大。
later on in a newer version,
under the hood, it's not changing much.

30
00:01:41.670 --> 00:01:44.890
但是在可读性方面，它使它更好。
But in terms of readability,
it makes it much better.

31
00:01:46.069 --> 00:01:47.740
我甚至不知道我是否完全同意这一点。
I don't even know if I
fully agree with this.

32
00:01:47.740 --> 00:01:51.009
也许把一个功能分解成另一个功能有点奇怪
Maybe it feels a little odd to think of
parting a function into another function

33
00:01:51.009 --> 00:01:52.189
只是让它运行得更晚。
only for it to run much later.

34
00:01:52.189 --> 00:01:53.560
看，我们经过 printHello。
Look, we pass in printHello.

35
00:01:53.560 --> 00:01:56.460
只是让它在很久以后自动运行。
Only for it to run automatically,
much later.

36
00:01:56.460 --> 00:02:00.280
但是只要你生活在一种语言中，你就会使用背景知识
But as long as you live in a language
where you're going to use background

37
00:02:00.280 --> 00:02:03.579
语言之外的特征，你不可避免地会这么做，对吗？
features outside of the language,
you're kinda inevitably doing that, right?

38
00:02:03.579 --> 00:02:05.621
你不能，没有真正的解决办法。
You can't, there's no real way around it.

39
00:02:05.621 --> 00:02:08.182
你要依靠背景知识,
You're gonna rely on that background,

40
00:02:08.182 --> 00:02:12.777
这个网页浏览器本身就带有 JavaScript，可以把这个函数带回浏览器中
the web browser itself with JavaScript
to bring that function back in for

41
00:02:12.777 --> 00:02:16.336
你和运行它，当它知道后台工作已经完成。
you and run it when it knows
the background work is done.

42
00:02:16.336 --> 00:02:22.250
好处，我会说这种风格，超级明确，超级点击。
Benefits, I'll say of this style,
super explicit, super click.

43
00:02:22.250 --> 00:02:28.003
一旦你知道它实际上是如何工作的，它就变得相当简单，相当公平。
Once you know how it's actually working,
it's fairly kind of simple, fairly.

44
00:02:28.003 --> 00:02:32.310
你等着看下一个版本吧。
[LAUGH] Well,
you wait till you see the next version.

45
00:02:32.310 --> 00:02:33.909
至少在这里，它相当直接。
At least here, it's fairly direct.

46
00:02:33.909 --> 00:02:36.490
我接受一个函数，我把它附加到背景功能,
I take in a function,
I attach it to the background feature,

47
00:02:36.490 --> 00:02:39.180
当后台特性完成后，它会被放入队列中。
it gets put in the queue when
the background feature is done.

48
00:02:39.180 --> 00:02:41.606
即使这是一个0毫秒的特性，它也会出现在背景中。
Even if it's a 0 millisecond feature,
it goes in the background.

49
00:02:41.606 --> 00:02:45.305
说清楚点 Brayden 这就是为什么即使它是个0毫秒计时器,
Yeah, to be clear, Brayden, this is why
even though it's a 0 millisecond timer,

50
00:02:45.305 --> 00:02:47.912
只要它被去掉了 printHello 函数,
as long as it's being thrown
out the printHello function,

51
00:02:47.912 --> 00:02:50.170
要排队才能进去。
it's gotta queue up before
it's allowed back in.

52
00:02:51.250 --> 00:02:54.819
我认为，这种方法的另一个问题是
The other, I think,
problem with this approach is that for

53
00:02:54.819 --> 00:02:59.210
错误处理，不是很干净。
error handling, it's not as clean.

54
00:02:59.210 --> 00:03:01.569
你等待直到你看到承诺的方法。
You wait til you see the promise approach.

55
00:03:01.569 --> 00:03:03.740
它的错误处理非常好。
Its error handling is super nice.

56
00:03:03.740 --> 00:03:07.669
我们将看到，人们，虽然，在一些结对编程。
We will see that, people, though,
after some pair programming.

57
00:03:07.669 --> 00:03:13.710
你会看到一个快速拨号 / 异步，你知道如何运行，并得到结对编程。
Gonna see a speed dial/async, you know
how to pan out, and get pair programming.
