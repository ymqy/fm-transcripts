WEBVTT

1
00:00:00.190 --> 00:00:01.629
威尔 · 森塔斯: 我们来看看这个美丽的概念,
&gt;&gt; Will Sentance: We're on
to the beautiful concept of,

2
00:00:01.629 --> 00:00:06.219
关于闭包的优雅概念，因为我们涉及到词法范围和
the elegant concept of closure,
as we involve lexical scoping and

3
00:00:06.219 --> 00:00:07.610
执行上下文。
execution context.

4
00:00:07.610 --> 00:00:09.380
它们之间的根本区别在于,
And the fundamental
difference between them,

5
00:00:09.380 --> 00:00:12.470
我们大多数人都没有意识到。
that most of us don't really realize.

6
00:00:12.470 --> 00:00:17.140
但是这个背景会为它画上句号所以我们开始,
But it's gonna be the backdrop on
which closes it, so here we go,

7
00:00:17.140 --> 00:00:21.160
我认为这是 JavaScript 中最深奥的概念。
I think this is the most
esoteric concept in JavaScript.

8
00:00:21.160 --> 00:00:24.899
如果你真的明白，我想你会找到工作的,
This is the bit that If you really
understand, I think you'll get jobs,

9
00:00:24.899 --> 00:00:25.530
毫无疑问。
no doubt about it.

10
00:00:25.530 --> 00:00:28.629
这是一个特殊的部分，如果你也能理解的话,
This is a special bit,
if you understand it as well,

11
00:00:28.629 --> 00:00:31.190
你可以做一些非常强大的事情。
you can do some really powerful things.

12
00:00:31.190 --> 00:00:35.560
你可以建立专业级别的功能，像一次，这是一个功能，可以
You can build professional level functions
like once, this is a function that can

13
00:00:35.560 --> 00:00:38.710
将其他函数转换为只运行一次的函数。
turn other functions into
functions that are gonna run once.

14
00:00:38.710 --> 00:00:42.030
如果它们再次运行，它们就不起作用了，你可能会想,
If they run them again, they don't work,
and already, you might be thinking,

15
00:00:42.030 --> 00:00:45.350
等等，这说不通，因为我知道函数是怎么工作的。
hold on, that doesn't make sense,
because I know how functions work.

16
00:00:45.350 --> 00:00:48.070
他们不记得之前跑步的任何事情,
They don't remember anything
from their previous running,

17
00:00:48.070 --> 00:00:50.310
每次都是全新的，我们想要那样。
they're brand new every time,
we want that.

18
00:00:50.310 --> 00:00:54.140
但是，等一下，我告诉你，他们会记得他们已经逃跑了
And yet, hold on, I'm telling you they're
gonna somehow remember they've been run

19
00:00:54.140 --> 00:00:56.363
不要再跑了。
before, and not run again.

20
00:00:56.363 --> 00:01:01.179
我们可以在年、年和年实现记忆、核心性能优化器
We can achieve memorization,
a core performance optimizer in, and

21
00:01:01.179 --> 00:01:02.689
这是我之前说过的,
this is something I talked about,
you know,

22
00:01:02.689 --> 00:01:05.299
现在最重要的资产是开发者时间。
the most important asset
now is developer time.

23
00:01:05.299 --> 00:01:08.201
我会说这种记忆仍然是一个需要练习的方法
I will say this memorization
is still a go to practice for

24
00:01:08.201 --> 00:01:11.250
优化我们如何编写代码，性能如何。
optimizing how we write our code,
how performance it is.

25
00:01:11.250 --> 00:01:13.495
这样我们就不会重复任务,
That's going to enable
us to not repeat tasks,

26
00:01:13.495 --> 00:01:16.986
如果我们以前做过，就不会重复耗时的计算。
not repeat calculations that take
a long time if we've done them before.

27
00:01:18.507 --> 00:01:22.507
Will Sentance: 许多设计模式的工作，比如在模块模式中
&gt;&gt; Will Sentance: Many jobs of design
patterns like in the module pattern that

28
00:01:22.507 --> 00:01:27.879
使用一个结点使用闭包，然后，我只是基本上列出了他们在这里。
use a node uses closure, and then,
I just basically listed them all off here.

29
00:01:27.879 --> 00:01:31.849
迭代器、部分应用程序、运行、在异步中维护状态
Iterators, partial application, carrying,
maintaining state in an asynchronous

30
00:01:31.849 --> 00:01:35.129
所有剩下的就是理解引擎盖下的结束,
world, all of the rest on
understanding closure under the hood,

31
00:01:35.129 --> 00:01:36.879
我们不打算实施这些东西。
we're not going to
implementing these things,.

32
00:01:36.879 --> 00:01:40.028
伙计们，你们可以进入所有困难的部分，关于执行所有这些事情,
You can go to all the hard parts, folks,
about implementing all those things,

33
00:01:40.028 --> 00:01:43.135
实际上，你知道，我们将实现一个同步的。
actually that, you know,,we will
be implementing a synchronous one.

34
00:01:43.135 --> 00:01:45.197
但是他们都依赖于结束，所以
But they all depend on closure, so

35
00:01:45.197 --> 00:01:50.039
这一切都始于我们提醒自己，我们之前看到的这些原则。
it all starts with us reminding ourselves
of these principles we saw earlier on.

36
00:01:50.039 --> 00:01:52.859
我不认为我们会一头扎进去，我们能接受吗？
I don't think we're going to go through
and dive on how to get, can we take that?

37
00:01:52.859 --> 00:01:57.030
不，我们不能再来一次，但是，我们知道每次一个函数
No, we can't take that again, but,
we do know that every time a function gets

38
00:01:57.030 --> 00:02:03.319
执行，运行，作为调用调用，它创建一个全新的本地内存。
executed, run, invoke as an invocation,
it creates a brand new local memory.

39
00:02:03.319 --> 00:02:06.984
记住，一个全新的执行上下文作为一个小的临时存储内存,
Remember, a brand new execution context
as a little temporary store memory,

40
00:02:06.984 --> 00:02:09.884
当我们运行完那个函数后，这些都被删除了。
when we finish running that function,
that's all deleted.

41
00:02:09.884 --> 00:02:13.715
我们再次运行这个函数，它不记得以前的运行,
We run the function again,
it doesn't remember the previous running,

42
00:02:13.715 --> 00:02:17.228
数据存储在先前运行的函数，事实上,
the data stored in the previous
running of the function, In fact,

43
00:02:17.228 --> 00:02:18.955
如果有的话，那也太老了。
it would be pretty old if it did.

44
00:02:18.955 --> 00:02:23.490
我不想用2乘以7然后有记忆,
I don't want to run multiply by two with
seven, and then kind of have a memory,

45
00:02:23.490 --> 00:02:26.569
一个关于它之前和七个一起运行的幻想。
a reverie over it previously
being run with seven.

46
00:02:26.569 --> 00:02:31.349
我们希望它是新鲜的运行与十，这是很好的，我们不希望输入数字为
We want it to be fresh to run with ten,
that's good, we don't want input number to

47
00:02:31.349 --> 00:02:37.530
上面有七个印记，我想重新开始，事实也的确如此。
sort of have an imprint of seven on it and
I want to start fresh and it does.

48
00:02:37.530 --> 00:02:41.728
函数从来不会记住它们以前运行的任何东西，即本地内存
Functions never remember anything from
their previous running, that local memory

49
00:02:41.728 --> 00:02:45.409
在运行过程中产生的数量乘以2每次都是新鲜的。
that gets created inside the running
multiply by two, fresh every time.

50
00:02:45.409 --> 00:02:50.165
然而，如果我们也有这个功能会怎样
And yet,
what if we could have that function also

51
00:02:50.165 --> 00:02:54.110
有永久的记忆吗？
have a permanent memory attached to it?

52
00:02:55.439 --> 00:02:58.539
这可能会改变我们写代码的方式,
That could change everything
about how we write code,

53
00:02:58.539 --> 00:03:00.360
让我们看看，有记忆的功能。
let's see, functions with memories.

54
00:03:00.360 --> 00:03:04.219
当我们的函数被调用的时候，我们创建一个生命存储的数据,
When our function gets called invoked,we
create a little life store of data,

55
00:03:04.219 --> 00:03:07.169
我们称之为局部内存，我们可以称之为可变环境。
we call it local memory,
we might call it variable environment.

56
00:03:07.169 --> 00:03:13.783
我之前没有说过，但是我会继续写下去
I didn't say this earlier on,
but I'm gonna draw on for

57
00:03:13.783 --> 00:03:18.709
等一下，假设我乘以2(7)
a sec, suppose I run multiply by 2 (7)

58
00:03:18.709 --> 00:03:24.057
这是本地内存，在它的本地内存中,
here's local memory, in its local memory,

59
00:03:24.057 --> 00:03:29.019
我会找到输入数字设置为7，好吧。
I will find input number set to 7, okay.

60
00:03:29.019 --> 00:03:32.444
那个本地内存，当我运行完这个函数，它就被删除了,
That local memory, when I finish
running this function, that is deleted,

61
00:03:32.444 --> 00:03:34.250
除了返回的值。
except for the returned value.

62
00:03:34.250 --> 00:03:40.229
本地内存的另一个名称是它的变量环境,
Another name for that local memory
is its variable environment,

63
00:03:40.229 --> 00:03:43.344
环境就是我身边的东西，对吗？
environment is the stuff around me, right?

64
00:03:43.344 --> 00:03:45.159
这是我的环境，你在我的环境,
This my environment here,
you're in my environment,

65
00:03:45.159 --> 00:03:49.629
这些是变量，或者常量，或者函数
where these are the variables, or
constants, or functions that are in and

66
00:03:49.629 --> 00:03:53.150
在这个函数里面，我可以在函数里面。
around me inside this function,
available to me inside the function.

67
00:03:53.150 --> 00:03:55.870
顺便说一句，他们有时也把这叫做本地记忆,
They also sometimes, by the way,
call this local memory,

68
00:03:55.870 --> 00:03:58.710
我现在只想告诉你们这些，作为奖励，他们称之为国家。
I just wanna tell you this stuff now,
as a bonus, they call it state.

69
00:03:58.710 --> 00:04:03.409
无论何时你听到国家这个词，它都是一个非常奇怪的词,
Whenever you hear about the term state,
it's one of those really bizarre terms,

70
00:04:03.409 --> 00:04:07.110
也就是说，在那个特定时刻的实时数据,
that just means,
the live data at that particular moment,

71
00:04:07.110 --> 00:04:09.180
在我的申请表里，这些信息都被存储了。
given moment in my application,
that's being stored.

72
00:04:09.180 --> 00:04:11.384
所以我的应用程序状态，在这一点上,
So my application state,
and at that point,

73
00:04:11.384 --> 00:04:15.195
我的函数状态是输入数字7这是我的状态，就是这样。
my function's state is input number is 7,
that's my state, that's it.

74
00:04:15.195 --> 00:04:20.795
所以当函数结束时，我们也可以把这个状态称为函数的状态
So we can call this the state as well of
the function, when the function finishes

75
00:04:20.795 --> 00:04:25.910
运行时，其本地内存将被删除，除了所有返回的值。
running, its local memory is deleted,
except for any returned value.

76
00:04:28.009 --> 00:04:33.529
但是，如果我们的函数在执行过程中保留了活动数据，又会怎样呢？
But what if our functions could hold
on to live data during their execution?

77
00:04:33.529 --> 00:04:37.730
如果我有一些数据不会被自动删除,
What if I could have some of that data,
not be deleted automatically,

78
00:04:37.730 --> 00:04:40.769
不会被退回，但是不知怎么的坚持下来了。
not be returned, but
somehow persisted and held onto.

79
00:04:40.769 --> 00:04:45.149
这样，下次我运行这个函数时，它可以有一些内存，一些
Such that the next time I run this
function, it can have some memory, some

80
00:04:45.149 --> 00:04:50.519
回忆起之前的死刑，想象一下那会让我们做什么。
remembrance of its previous execution,
imagine what that would allow us to do.

81
00:04:50.519 --> 00:04:54.442
这样我们的函数定义，函数定义本身,
That would let our function definitions,
the function definition itself,

82
00:04:54.442 --> 00:04:56.629
注意，当我们运行它有一点内存。
notice when we run it
have a little memory.

83
00:04:56.629 --> 00:05:00.012
但是这个定义本身有一个持久的记忆
But the definition itself have
a persistent memory attached like

84
00:05:00.012 --> 00:05:02.290
一个永久的记忆附在上面。
a permanent memory attached onto it.

85
00:05:02.290 --> 00:05:06.839
那将是非常非常特别的让我们可以做一些事情，比如说,
That would be really, really special that
would allow us to do things like say,

86
00:05:08.339 --> 00:05:09.839
你之前运行过这个函数。
you've previously run this function.

87
00:05:09.839 --> 00:05:13.920
我之所以知道是因为在我对以前跑步的回忆中,
I know that because in my
remembrance of the previous running,

88
00:05:13.920 --> 00:05:18.160
我已经拖延，你以前运行我，所以你不能再次运行我。
I've stalled that you previously run me,
so you can't run me again.

89
00:05:18.160 --> 00:05:20.759
所以我可以限制一个函数只运行一次
So I can limit a function
to only run one time and

90
00:05:20.759 --> 00:05:22.209
我们还会看到更多的东西。
a thousand more things we're gonna see.
