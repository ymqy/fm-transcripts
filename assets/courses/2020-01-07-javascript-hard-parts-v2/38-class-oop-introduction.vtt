WEBVTT

1
00:00:00.090 --> 00:00:04.559
威尔 · 森坦斯: 我们现在到了最后一节课和
&gt;&gt; Will Sentance: We now reach
our final section classes and

2
00:00:04.559 --> 00:00:09.109
原型面向对象编程，但特别关注下
prototypes object oriented programming,
but particularly focusing on under

3
00:00:09.109 --> 00:00:12.890
我们每天在 JavaScript 中看到的一些特性是什么。
the hood, what are some of these features
that we see day to day in JavaScript.

4
00:00:12.890 --> 00:00:17.359
像这样的原型链，我们听说像这样的原型财产，我们看到
Like this prototype chain we hear about
like this prototype property, we see on

5
00:00:17.359 --> 00:00:22.239
我们的函数，就像我们看到的这个新的关键词，就像我们看到的这个类关键词。
our Functions, like this new key word we
see, like this class key word we see.

6
00:00:22.239 --> 00:00:24.350
这些到底是什么意思？
What are of these actually mean?

7
00:00:24.350 --> 00:00:29.789
在这里，我们甚至没有过多地关注于构建 AOP 范例，而是使用
We're not even per se so much focused here
on building out the AOP paradigm as using

8
00:00:29.789 --> 00:00:34.909
作为一个透镜，我们理解它在 JavaScript 中的实现,
that as a lens from which we understand
the implementation of it in JavaScript,

9
00:00:34.909 --> 00:00:37.880
意思是了解原型链。
meaning understand prototype chain.

10
00:00:37.880 --> 00:00:39.534
这真是一件优雅而美丽的东西。
It's a really elegant and beautiful thing.

11
00:00:39.534 --> 00:00:42.740
我又用优雅了，不知道是什么意思。
I'm using elegant again
not know what it means.

12
00:00:42.740 --> 00:00:43.750
这是一个真正的，这是一个东西，我们走吧。
It's a really, it's a thing, there we go.

13
00:00:43.750 --> 00:00:45.310
好了，我们走吧。
All right, there we go.

14
00:00:45.310 --> 00:00:49.920
所以这是一个非常流行的范例，用于构造我们复杂的代码。
So an enormously popular paradigm for
structuring our complex code.

15
00:00:49.920 --> 00:00:51.799
年复一年的面向对象编程
Object oriented programming for
years and years and

16
00:00:51.799 --> 00:00:56.560
我们处理一个文件中10万行代码的方式。
years has been the way that we handle
having 100,000 lines of code in one file.

17
00:00:56.560 --> 00:01:00.390
不是一个文件，一个应用程序，有一些结构这样
Not really one file, one application,
having some structure so

18
00:01:00.390 --> 00:01:03.250
不只是这样，然后这样，然后这样，然后这样
it's not just do this, then this,
then this, then this and

19
00:01:03.250 --> 00:01:06.879
这里，但某种组织结构。
this here, but
some sort of organizing structure.

20
00:01:06.879 --> 00:01:09.370
在 JavaScript 中，它依赖于原型链。
in JavaScript,
it depends on the prototype chain.

21
00:01:09.370 --> 00:01:13.650
这是幕后功能，使我们能够实现一些
This is the behind the scenes feature
that enables us to achieve some

22
00:01:13.650 --> 00:01:17.019
类似于 JavaScript 中的面向对象模式。
semblance of object oriented
pattern in JavaScript.

23
00:01:17.019 --> 00:01:20.430
但是我也要说，一个本身就很有吸引力的工具是非常不错的。
But it's also as I'm saying a compelling
tool in its own right is pretty nice.

24
00:01:20.430 --> 00:01:23.760
我们要理解原型和原型的区别。
We're gonna understand the difference
between proto and prototype.

25
00:01:23.760 --> 00:01:27.170
我们将看到新的类，新的类关键字。
We're going to see the new class,
the new in class keywords.

26
00:01:27.170 --> 00:01:30.939
尽管我们能够真诚地去理解，比如说,
As much honestly for
us to be able to understand, for example,

27
00:01:30.939 --> 00:01:35.520
在采访中，最受欢迎的问题之一是一个中高级开发人员
in interview where one of the most popular
questions to ask of a mid senior developer

28
00:01:35.520 --> 00:01:39.659
引擎盖下的新词是什么。
is, what's the newkey word
doing under the hood.

29
00:01:39.659 --> 00:01:43.670
我们将从头开始构建它，以完全理解它
We're going to build it out from
scratch to fully understand it

30
00:01:43.670 --> 00:01:45.879
让我们的工作自动化，但是
as an allowed to automate
some of our work, but

31
00:01:45.879 --> 00:01:50.500
我们也将看到我们的功能和词汇范围的力量。
we're also going to see the power of our
functions and lexical scoping within them.

32
00:01:50.500 --> 00:01:52.990
我们来看看这个关键词是如何工作的。
We're going to see how this keyword works.

33
00:01:52.990 --> 00:02:00.150
我们还要学习一下这个大的 Headline 对象,
We're going to also learn about
that big Headline object,

34
00:02:00.150 --> 00:02:04.569
原型，我们得到所有的共享函数和所有的对象。
the object.prototype, where we get all
our shared functions and all objects get.

35
00:02:05.620 --> 00:02:09.669
接下来，我们将从提醒自己
All to come, we're gonna start it
off with reminding ourselves what

36
00:02:09.669 --> 00:02:12.509
甚至是开发和运行代码的核心。
even is the core of development and
running code.

37
00:02:12.509 --> 00:02:16.659
我们要记住两件事: 保存数据和运行代码。
Two things we do remember,
save data and run code.

38
00:02:16.659 --> 00:02:18.810
在一个典型的应用程序中，例如,
In a typical application that might be,
for example,

39
00:02:18.810 --> 00:02:21.250
这个测验游戏，保存分数
the quiz games, saving the scores and

40
00:02:21.250 --> 00:02:26.229
两个用户的用户名，也许是100个用户，1000个用户同时在玩。
the user names of two users, maybe 100
users, 1000 users all playing at once.

41
00:02:26.229 --> 00:02:29.189
不要以为在用户界面上看到,
Don't think that by seeing on the UI,

42
00:02:29.189 --> 00:02:33.139
比如看益智游戏的视觉效果，这就是保存的数据。
like looking at the quiz games
visuals that that's the data saved.

43
00:02:33.139 --> 00:02:36.770
这就是显示的数据，它保存在 Java 内存的幕后。
That's the data displayed, it saved
behind the scenes in Java's memory.

44
00:02:36.770 --> 00:02:40.120
它就是这样存在的，所以它不是魔术，它仍然在幕后。
That's how it's there, so it's not magic,
it's still behind the scenes.

45
00:02:40.120 --> 00:02:41.240
这些只是像素。
Those are just pixels.

46
00:02:41.240 --> 00:02:42.610
它是电脑的幕后工作。
It's a behind the scenes of the computer.

47
00:02:43.770 --> 00:02:46.389
另一半运行在应用程序开发或
The other half run over
application development or

48
00:02:46.389 --> 00:02:51.050
运行代码实际上是运行代码，功能函数的数据。
running code is to actually run code,
functionality functions on that data.

49
00:02:51.050 --> 00:02:55.560
例如，我们有一个用户想用它来增加用户得分
For example, we've got a user want to
use it to increasing user to score

50
00:02:55.560 --> 00:02:57.439
当他们答对一道测验题的时候。
when they get a quiz question right.

51
00:02:57.439 --> 00:02:58.050
就是这样。
That is it.

52
00:02:58.050 --> 00:03:01.889
顺便说一句，我不知道为什么我们有10万行代码
By the way, I don't know how we therefore
have a hundred thousand lines of code and

53
00:03:01.889 --> 00:03:05.419
太复杂了，就是这样。
it's so complex, because that's it.

54
00:03:05.419 --> 00:03:06.979
为什么学习如此困难？
Why is learning so hard?

55
00:03:08.370 --> 00:03:12.379
在一个问答游戏中，你知道吗，我需要拯救很多用户。
In a quiz game, you know what,
I need to save a lot of users.

56
00:03:12.379 --> 00:03:14.800
但不仅仅是用户，我还要保存,
But not just even users,
I've got to save and by the way,

57
00:03:14.800 --> 00:03:20.729
它们都有很多不同的属性，关于它们的信息。
all of them have lots of different
properties, information about them.

58
00:03:20.729 --> 00:03:25.897
分数，用户名，头像，个人资料网址，电子邮件商店,
Score, username, avatar,
profile URL, email store,

59
00:03:25.897 --> 00:03:31.710
状态，他们与应用程序接触的最后状态。
status, last status of their
engagement with the application.

60
00:03:31.710 --> 00:03:35.479
这仅仅是个开始，仅仅是用法。
And that's just the start,
that's just usage.

61
00:03:35.479 --> 00:03:39.250
人们有管理员，我们有测验问题需要保存。
People's got admins,
we've got quiz questions we need to save.

62
00:03:39.250 --> 00:03:41.129
我们得到了测验的结果。
We've got quiz outcomes.

63
00:03:41.129 --> 00:03:45.090
我们有排名表和其他1000件作品。
We've got league tables and
1000 other pieces.

64
00:03:45.090 --> 00:03:51.900
所有这些都有数据存储在我们的应用程序运行时的内存和
All of these have data stored in our
applications runtime in the memory and

65
00:03:51.900 --> 00:03:57.229
关联的功能，这是代码，我们可以用来交互和
associated functionality that is code
that we can use to interact with and

66
00:03:57.229 --> 00:03:58.509
利用这些数据。
use that data.

67
00:03:58.509 --> 00:04:01.911
或者显示它，呈现它，显示它，更改它更新,
Or display it, render it,
display it, change it alter updated,

68
00:04:01.911 --> 00:04:05.013
删除它为所有的应用程序是功能和
delete it whatever for
all application is functionality and

69
00:04:05.013 --> 00:04:06.865
运行相关数据。
the associated data to run on that.

70
00:04:06.865 --> 00:04:11.979
所以如果我们从用户开始，我不知道，这可能会增加分数。
So if we start with users, it might be,
I don't know, increasing that score.

71
00:04:11.979 --> 00:04:15.830
它可以显示这些但在100,000行代码,
It could be displaying these but
in 100,000 lines of code,

72
00:04:15.830 --> 00:04:18.649
很快就会变得很复杂。
it gets really complicated really fast.

73
00:04:18.649 --> 00:04:21.209
当我需要它时，它的功能在哪里？
Where is the functionality when I need it?

74
00:04:21.209 --> 00:04:24.750
我有我的用户1，我有他们的得分和名字的可爱数据,
I've got my user one and I've got the
lovely data of their score and their name,

75
00:04:24.750 --> 00:04:27.100
他们的用户名，但我想更新分数。
their username, but
I want to update the score.

76
00:04:27.100 --> 00:04:29.750
但是让我给分数打分的功能在哪里呢？
But where's the function that
allows me to rate the score?

77
00:04:29.750 --> 00:04:32.129
我有100,000行代码，函数在哪里？
I've got 100,000 lines of code,
where is that function?

78
00:04:33.409 --> 00:04:36.420
不仅如此，这个函数只适用于用户评分。
Not only that, that function
only applies to the users score.

79
00:04:37.629 --> 00:04:42.466
不要让我试图开始，我不知道，或者我认为这是一种改变
Don't get me trying to start, I don't
know, or I suppose it was like a change

80
00:04:42.466 --> 00:04:47.250
用户名，或者，更新用户图像。
username, or yeah, update users image.

81
00:04:47.250 --> 00:04:50.750
不要试图在我的排行榜上使用这个功能。
Don't try and use that
functionality on my league tables.

82
00:04:50.750 --> 00:04:53.720
不要试图在我的测验问题上使用这个功能。
Don't try to use that
functionality on my quiz question.

83
00:04:53.720 --> 00:04:56.370
所以我不仅不知道功能在我的百里哪里
So not only I do not know where
the functionality is in my hundred

84
00:04:56.370 --> 00:04:57.040
上千行代码。
thousand lines of code.

85
00:04:57.040 --> 00:05:00.610
我不知道它适用于我的哪一部分数据
I don't know which bits of
my data it applies to and

86
00:05:00.610 --> 00:05:03.120
这就是为什么编码如此复杂。
that's what makes coding so complex.

87
00:05:03.120 --> 00:05:08.339
这么多的数据，这么多的功能，它只适用于某些位。
So much data, so much functionality and
it only applies to certain bits.

88
00:05:08.339 --> 00:05:09.579
找到正确的功能
And finding the right functionality and

89
00:05:09.579 --> 00:05:11.339
确保它只适用于正确的位,
making sure it only
applies to the right bit,

90
00:05:11.339 --> 00:05:14.240
我们需要某种组织结构。
we need some sort of organizing structure.

91
00:05:14.240 --> 00:05:16.540
我称之为这里的一小部分，很容易理解。
I call that the bit here,
easy to reason about.

92
00:05:16.540 --> 00:05:19.500
我希望我的代码很容易理解发生了什么。
I want my code to be easy to
figure out what's going on.

93
00:05:20.579 --> 00:05:23.449
但我也希望我的代码易于添加特性。
But I also want my code to
be easy to add features to.

94
00:05:23.449 --> 00:05:28.529
这对于任何给定的数据都是新的功能，就像用户得到的那样
That is new functionality for
any given data, like users got

95
00:05:28.529 --> 00:05:32.860
他们现在可以，我不知道，他们现在可以登录 Facebook。
new functionality they can now, I don't
know, they can now log in with Facebook.

96
00:05:32.860 --> 00:05:35.590
我想很容易地添加功能。
I want to be easy to add functionality.

97
00:05:35.590 --> 00:05:38.769
但我不希望所有这些都以牺牲为代价
But I don't want all of
that to come at the expense

98
00:05:38.769 --> 00:05:44.689
我的代码是合理的性能低效率，因为它可能会这样做。
of my code being reasonably performance
unefficient cuz it might well do so.

99
00:05:44.689 --> 00:05:46.230
面向对象的范例，以及
The object oriented paradigm, and

100
00:05:46.230 --> 00:05:50.840
实际上所有的代码范例都是指导方针的集合,
really all paradigms of code,
they're sets of guidelines,

101
00:05:50.840 --> 00:05:56.213
它们是让我们实现这三个目标的最佳实践方法。
they're best practices approaches that
allow us to achieve these three things.

102
00:05:56.213 --> 00:06:00.629
它们是组织我们代码的一系列方式，它们将一起工作
They are kind of a bunch of ways of
organizing our code that will together

103
00:06:00.629 --> 00:06:02.639
希望能达到这三个目标。
hopefully achieve these three goals.

104
00:06:02.639 --> 00:06:06.639
这就是我们要做的，我们要实现这三个目标,
And that's what it's about,
we're gonna achieve all three of these,

105
00:06:06.639 --> 00:06:09.980
顺便说一句，我认为。
by the way from solution
to on was in my opinion.

106
00:06:09.980 --> 00:06:14.069
但是由于开发者通常来自其他语言,
But because developers often
come from other languages,

107
00:06:14.069 --> 00:06:18.920
他们认为什么是容易推理的，可能不是
their idea of what easy to
reason about might not be

108
00:06:18.920 --> 00:06:24.129
编写和组织我们的代码的 JavaScript 本地风格。
a JavaScript native style of writing and
organizing our code.

109
00:06:24.129 --> 00:06:29.000
所以解决方案三和四实现结构化我们的代码在一个可管理的方式,
So solution three and four for achieving
structuring our code in a manageable way,

110
00:06:29.000 --> 00:06:33.709
主要是关于写作方面的人手不足
are primarily going to be
about shorthands for writing

111
00:06:33.709 --> 00:06:37.500
让它看起来更像其他编程语言的代码。
the code that make it look a little bit
more like other programming languages.

112
00:06:39.259 --> 00:06:41.290
换句话说，更容易推理但是
In other words easier to reason about but

113
00:06:41.290 --> 00:06:44.909
真的很容易推理，只要你明白这一点。
really easy to reason about,
only if you understand it under the hood.
