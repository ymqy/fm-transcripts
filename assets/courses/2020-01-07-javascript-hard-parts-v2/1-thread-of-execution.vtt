WEBVTT

1
00:00:00.050 --> 00:00:03.339
&gt；&gt；will Sentance：今天，我们从JavaScript的原则开始。
&gt;&gt; Will Sentance: Today,
we start with principles of JavaScript.

2
00:00:03.339 --> 00:00:06.280
JavaScript不是那么花哨，它做两件事。
JavaScript is not that fancy,
it does two things.

3
00:00:06.280 --> 00:00:09.359
第一，它通过我们的代码，一行接一行。
One, it goes through our code,
line by line.

4
00:00:09.359 --> 00:00:11.500
我们现在要处理的是一段代码。
There's a block of code we're
gonna work through right now.

5
00:00:11.500 --> 00:00:13.169
它一行地穿过它，然后
It goes through it line by line, and

6
00:00:13.169 --> 00:00:17.250
做每一行代码，他们称之为执行线程。
does each of the line of code,
they call this the thread of execution.

7
00:00:17.250 --> 00:00:21.429
它以线程的方式向下执行，这是做代码的一个花哨的词，
It threads its way down and executes,
that's a fancy word for doing the code,

8
00:00:21.429 --> 00:00:24.539
正如它所说的，这是JavaScript的特性之一。
as it goes,
that's feature one of JavaScript.

9
00:00:24.539 --> 00:00:28.219
JavaScript的第二个特点是它遇到的东西，
Feature two of JavaScript is
the stuff that it encounters,

10
00:00:28.219 --> 00:00:32.950
如果它说保存一些东西，比如变量，或者常量，或者
if it's saying save something,
like a variable, or a constant, or

11
00:00:32.950 --> 00:00:36.030
甚至一些代码本身，称为函数。
even some code itself,
known as a function.

12
00:00:36.030 --> 00:00:39.409
嗯，它把这些东西保存在电脑的内存里，
Well, it saves that stuff
in the computer's memory,

13
00:00:39.409 --> 00:00:41.780
稍后回来使用。
to come back to later on and use.

14
00:00:41.780 --> 00:00:43.649
好的，这里的这个区域，
All right, and this area here,

15
00:00:43.649 --> 00:00:47.576
各位，我将捕获，就像JavaScript在引擎盖下所做的那样。
people, I'm gonna capture,
just as JavaScript does under the hood.

16
00:00:47.576 --> 00:00:51.119
所有被存储的东西，当我们通过代码时，一行接一行。
All of the stuff that's being stored,
as we go through the code, line by line.

17
00:00:51.119 --> 00:00:54.340
这不是魔法，这不是我对正在发生的事情的抽象，
This isn't magic, this isn't me creating
an abstraction of what's happening,

18
00:00:54.340 --> 00:00:57.310
这是字面上正在发生的事情，我的意思是，不是明显的，视觉上的。
this is literally what's happening,
I mean, not obviously, visually.

19
00:00:57.310 --> 00:00:59.759
但这是我们正在存储的每一行。
But this is every line
we're storing as we go.

20
00:00:59.759 --> 00:01:05.200
这就是我们遇到的所有东西都存储在记忆中。
And that's all that stuff we
encounter is stored into the memory.

21
00:01:05.200 --> 00:01:08.159
这是JavaScript中的花哨词汇，在编程中，
This is the fancy word in JavaScript,
in programming,

22
00:01:08.159 --> 00:01:10.349
用于存储数据的位置。
for the place in which we store data.

23
00:01:10.349 --> 00:01:14.599
所以，我们开始吧，谁会有幸做一号线？
And so, here we go, who is gonna
have the honor of doing line one?

24
00:01:14.599 --> 00:01:15.885
是凯拉吗？
Was it Kyla?

25
00:01:15.885 --> 00:01:19.106
凯拉，第一行，我们在这里用我们的代码做什么？
Kayla, line one,
what are we doing with our code here?

26
00:01:19.106 --> 00:01:21.015
替我说说，凯拉。
Verbalize it for me, Kyla.

27
00:01:21.015 --> 00:01:24.036
&gt；&gt；屏幕外女性：您正在定义一个名为num的常量。
&gt;&gt; off screen female: You're
defining a constant called num.

28
00:01:24.036 --> 00:01:25.161
&gt；&gt；Will Sentance：很漂亮，然后呢？
&gt;&gt; Will Sentance: Beautiful, and?

29
00:01:25.161 --> 00:01:25.819
&gt；&gt；幕后女性：三个。&gt；&gt；Will Sentance：和
&gt;&gt; off screen female: Three.
&gt;&gt; Will Sentance: And

30
00:01:25.819 --> 00:01:27.769
给它赋值3。
assigning it the value three.

31
00:01:27.769 --> 00:01:31.460
就是这样，各位，这意味着，从现在开始，如果我们在代码中看到num，
There it is, people, that means,
from now on if we see num in our code,

32
00:01:31.460 --> 00:01:34.870
我们知道它会去找它的价值，什么Kayla？
we know that it’s gonna go look and
find the value, what Kayla?

33
00:01:34.870 --> 00:01:36.770
&gt；&gt；幕后女性：3。&gt；&gt；Will Sentance：3，她在现场。
&gt;&gt; off screen female: 3.
&gt;&gt; Will Sentance: 3, she’s spot on.

34
00:01:36.770 --> 00:01:40.430
凯拉是第一个被召唤的人，这对她来说太棒了。
Excellent to Kayla for
being the first person to be called upon.

35
00:01:41.719 --> 00:01:46.258
下一行，现在我转向马特。
Next line, now I turn to Matt.

36
00:01:46.258 --> 00:01:48.156
&gt；&gt；Off Screen Male：我们定义函数乘以2。
&gt;&gt; off screen male: We’re defining
the function multiply by two.

37
00:01:48.156 --> 00:01:50.150
&GT；&GT；Will Sentance：非常感谢，马特。
&gt;&gt; Will Sentance: Thank you Matt, exactly.

38
00:01:50.150 --> 00:01:56.668
这就是说，人们，当我们定义一个函数时，有两个部分。
And this is to say, people, when we
define a function, there's two parts.

39
00:01:56.668 --> 00:01:59.992
这是我们的标识符，这是标签的花哨词汇
There's our identifier,
that is the fancy word for the label for

40
00:01:59.992 --> 00:02:02.599
任何你储存在电脑内存中的东西。
anything you're storing
in computer's memory.

41
00:02:02.599 --> 00:02:06.530
这里的标识符乘以2，之前的标识符是num。
The identifier here is multiplied by two,
the identifier before was num.

42
00:02:06.530 --> 00:02:09.091
我最近学会了这个词，标识符，
I recently learned this word,
the identifier,

43
00:02:09.091 --> 00:02:11.467
然后我们得到函数的所有代码。
and we then take all
the code of the function.

44
00:02:11.467 --> 00:02:13.039
我们现在什么都不会做。
We're not gonna run any of it right now.

45
00:02:13.039 --> 00:02:17.509
我们要把它捆绑起来，储存在电脑的内存里，
We're gonna take it, bundle it up,
and store it in the computer's memory,

46
00:02:17.509 --> 00:02:20.539
就像字符串一样，该函数的所有代码。
like a string of characters,
all the code of that function.

47
00:02:20.539 --> 00:02:24.039
我不会写出所有的代码，但从字面上想象它们都保存在这里。
I'm not gonna write all that code out,
but literally imagine it all saved here.

48
00:02:24.039 --> 00:02:27.475
相反，我将用这个带有f的小盒子来表示它，
Instead, I'm gonna represent it
with this little box with an f in,

49
00:02:27.475 --> 00:02:31.509
表示函数的。
that represents the function.

50
00:02:31.509 --> 00:02:33.219
给你，好的。
There you go, all right.

51
00:02:33.219 --> 00:02:37.040
因此，我们的执行线程，JavaScript的奇特特性，
And therefore, our thread of execution,
the fancy feature of JavaScript,

52
00:02:37.040 --> 00:02:40.824
可以接受代码，去做。
that can take the code, do it, take
the code, do it, take the code, do it.

53
00:02:40.824 --> 00:02:45.634
现在向下编织到哪里，布拉登。
Now weaves down to where, Braden.

54
00:02:45.634 --> 00:02:48.473
接下来它会撞到什么？
What does it hit next?

55
00:02:48.473 --> 00:02:50.020
&gt；&gt；Off Screen Male：定义变量输出。
&gt;&gt; off screen male: It
defines the variable output.

56
00:02:50.020 --> 00:02:53.659
&GT；&GT；Will Sentance：是的，我会称之为常量，人们似乎倾向于使用
&gt;&gt; Will Sentance: Yeah, I'm gonna call it
constant, people tend to seem to be using

57
00:02:53.659 --> 00:02:59.430
变量作为标签加数据、标识符加数据的通用术语。
variable as a generic term for
label plus data, identifier plus data.

58
00:02:59.430 --> 00:03:00.240
但想想看
But think about it,

59
00:03:00.240 --> 00:03:04.509
它的字面意思是，我可以改变存储在该标签中的数据。
it literally means, I can vary
the data that I store in that label.

60
00:03:04.509 --> 00:03:06.234
在常量的情况下，我不能改变，
And with a constant I can't vary,

61
00:03:06.234 --> 00:03:10.293
我不能把我以前存储在那里的东西拿走，然后再把其他东西放在那里。
I can't take away what I had stored there
before and store something else there.

62
00:03:10.293 --> 00:03:11.608
我们稍后会看到更多关于这方面的内容。
We'll see more about that later on.

63
00:03:11.608 --> 00:03:15.169
所以假设我们声明一个恒定的输出，非常好。
So let's say we declare a constant output,
excellent.

64
00:03:15.169 --> 00:03:18.280
现在Braden，我要在输出中存储什么？
Now Braden,
what am I gonna store in output?

65
00:03:18.280 --> 00:03:20.039
我知道了吗？
Do I know yet?

66
00:03:20.039 --> 00:03:20.939
&gt；&gt；屏幕外男：否。
&gt;&gt; off screen male: No.

67
00:03:20.939 --> 00:03:21.479
&GT；&GT；Will Sentance：我不，
&gt;&gt; Will Sentance: I don't,

68
00:03:21.479 --> 00:03:24.310
没错，因为这个右手边是什么，布雷登？
exactly, because this right
hand side is what, Braden?

69
00:03:24.310 --> 00:03:25.090
&gt；&gt；屏幕外男：这是你的职能。
&gt;&gt; off screen male: It's to your function.

70
00:03:26.150 --> 00:03:27.379
&gt；&gt；Will Sentance：它是-&gt；&gt；Off Screen Male：一个函数调用。
&gt;&gt; Will Sentance: It's-
&gt;&gt; off screen male: A function call.

71
00:03:27.379 --> 00:03:31.389
&gt；&gt；will Sentance：函数调用，来自Dan的优秀。
&gt;&gt; Will Sentance: Function call,
excellent from Dan.

72
00:03:31.389 --> 00:03:32.329
丹太棒了。
Excellent from Dan.

73
00:03:32.329 --> 00:03:34.659
对函数的调用，这是一个命令。
A call to a function, it's a command.

74
00:03:34.659 --> 00:03:38.289
我只能存储值，这是固定的，最终的东西。
I can only store values,
that's fixed, final things.

75
00:03:38.289 --> 00:03:42.090
我不能存储一个去做一些工作。
I can't store a go do some work.

76
00:03:42.090 --> 00:03:44.578
丹，什么告诉我右手边是命令？
Dan, what tells me this right
hand side is a command?

77
00:03:44.578 --> 00:03:45.300
&gt；&gt；屏幕外男性：括号。
&gt;&gt; off screen male: The parenthesis.

78
00:03:45.300 --> 00:03:48.329
&gt；&gt；Will Sentance：括号，完全正确。
&gt;&gt; Will Sentance: Parenthesis,
exactly, exactly, right.

79
00:03:48.329 --> 00:03:51.020
所以现在，它将保持未初始化状态。
So for now,
it's gonna remain uninitialized.

80
00:03:51.020 --> 00:03:53.900
这与过去没有定义的日子形成了鲜明的对比。
This is in contrast to the old
days where it's undefined.

81
00:03:53.900 --> 00:03:58.236
因为再一次，如果你声明一个常量输出，如果我们保存了文字
Because again, if you're declaring
a constant output, if we saved the literal

82
00:03:58.236 --> 00:04:02.062
这里的数据未定义，那么我们就不能将其更改为
data undefined here, well then we
wouldn't be able to change it out for

83
00:04:02.062 --> 00:04:04.509
从函数返回的值。
the value that comes
back from the function.

84
00:04:04.509 --> 00:04:07.274
所以现在我们只说它还没有完全储存起来。
So now we just say it's not
really even fully stored yet.

85
00:04:07.274 --> 00:04:10.680
我将在这里展示它，但它还没有任何价值。
I'm gonna show it here, but
it's not got any value in it yet.

86
00:04:10.680 --> 00:04:14.340
好的，所以我们甚至不会，如果我们在跑道内乘以2
Okay, so we wouldn't even, if we were to
inside the running and multiply by two

87
00:04:14.340 --> 00:04:18.250
尝试并记录输出，我们不会看到undefined，我们只会看到它不在那里。
try and log output, we wouldn't see
undefined, we'd just see it's not there.

88
00:04:18.250 --> 00:04:22.529
好的，当我们出发并运行乘以2。
Okay, while we head off and
run multiply by two.

89
00:04:22.529 --> 00:04:29.459
每个人都准备好了，因为这是JavaScript的核心特性。
Everybody be ready because this is
the core feature of JavaScript.

90
00:04:29.459 --> 00:04:31.769
这是你们一直在等待的时刻。
This is the moment that
you've all been waiting for.

91
00:04:31.769 --> 00:04:34.040
我们要用num来称呼它。
We're gonna call it with num.

92
00:04:34.040 --> 00:04:35.689
凯拉，num的价值是什么？
Kayla, what does num evaluate to?

93
00:04:35.689 --> 00:04:37.840
它会变成什么价值？
What value does it turn into?

94
00:04:37.840 --> 00:04:38.920
&gt；&gt；幕后女性：三个。&gt；&gt；Will Sentance：三个，干得好。
&gt;&gt; off screen female: Three.
&gt;&gt; Will Sentance: Three, well done.
