WEBVTT

1
00:00:00.840 --> 00:00:04.504
>> Jem Young: 我们在使用旧协议之前讨论的所有内容
&gt;&gt; Jem Young: Everything we were
discussing before use the old protocol

2
00:00:04.504 --> 00:00:07.940
HTTP1.1。
HTTP1.1.

3
00:00:07.940 --> 00:00:11.605
这是 89年发明的吗
This was invented in 89?

4
00:00:11.605 --> 00:00:12.667
1.0 ?
1.0?

5
00:00:12.667 --> 00:00:15.470
1.1 就像 98 之类的
And 1.1 was like 98 or
something like that.

6
00:00:15.470 --> 00:00:18.280
我猜到日期了但我想我是对的
I'm guessing on the dates but
I think I'm about right.

7
00:00:18.280 --> 00:00:21.536
但这一协议只是每个人都同意的标准。
But again this protocol is just
a standard that everybody agreed on.

8
00:00:21.536 --> 00:00:27.429
是最新最伟大的东西直到人们说你知道什么
HTTP1.1 was the latest and
greatest until people said you know what?

9
00:00:28.570 --> 00:00:30.839
这不为我们工作我们需要点不同的东西
This isn't working for us,
we need something a little bit different.

10
00:00:30.839 --> 00:00:34.750
我们需要一些不只是 1.2 的东西，我们需要完全不同的东西。
We need something that not just 1.2, we
need something that's entirely different.

11
00:00:34.750 --> 00:00:39.780
因此  来了，任何人，请原谅，任何人都知道  是什么吗 ?
Thus HTTP/2 came along, anybody,
excuse me, anybody know what HTTP/2 is?

12
00:00:42.176 --> 00:00:46.695
>> Jem Young: 任何人，对吗 ?
&gt;&gt; Jem Young: Anybody, anybody, yes?

13
00:00:46.695 --> 00:00:48.700
>> 扬声器 2: 这是流式包的一种方式
&gt;&gt; Speaker 2: It's a way
of streaming packets so

14
00:00:48.700 --> 00:00:51.118
你有一个持续的联系
that you have a persistent connection and

15
00:00:51.118 --> 00:00:55.350
您不必创建与每个请求链接的多个连接。
you don't have to create multiple
connections with each request link.

16
00:00:56.890 --> 00:01:00.064
> > Jem Young: 是的，你接近了，你几乎是在描述，
&gt;&gt; Jem Young: Yeah, you're close,
you're describing almost,

17
00:01:00.064 --> 00:01:02.329
你开车去 HTTP/3
you're driving HTTP/3 actually.

18
00:01:02.329 --> 00:01:07.400
很棒的工作但是我们跳得挺快的你就在右边的轨道上
So nice job, but we're jumping a little
ahead, you're on the right track, though.

19
00:01:07.400 --> 00:01:08.560
有同样的答案吗
Get the same answer?

20
00:01:08.560 --> 00:01:12.239
>> 扬声器 2: 是。 所以它依赖的是 SSL ，
&gt;&gt; Speaker 2: Yeah.
So it relies on SSL being in place,

21
00:01:12.239 --> 00:01:15.530
您必须具有  设置。
you have to have HTTPS setup.

22
00:01:15.530 --> 00:01:18.829
否则，它是 HTTP/2 的交易断路器。
Otherwise, it's a deal breaker for HTTP/2.

23
00:01:18.829 --> 00:01:20.659
一旦你有了这个位置
Once you have that in place,

24
00:01:20.659 --> 00:01:25.500
那是谷歌的 SPD 线，快速协议的扩展吗 ?
then it's an extension of
Google's SPD wire, speedy protocol?

25
00:01:26.819 --> 00:01:29.250
但基本上它允许多路复用。
But basically it allows multiplexing.

26
00:01:29.250 --> 00:01:30.533
>> Jem Young: 是- >> 演讲者 2: 这很重要。
&gt;&gt; Jem Young: Yes-
&gt;&gt; Speaker 2: That's a big deal.

27
00:01:30.533 --> 00:01:32.799
> > Jem Young: [LAUGH] Nayled it ，再钉一次。
&gt;&gt; Jem Young: [LAUGH] Nailed it,
nailed it again.

28
00:01:32.799 --> 00:01:37.479
这就是为什么我们，再次，这个旅程，我们关注的是标题和
That's why we, again, this journey, we're
following from looking at the headers and

29
00:01:37.479 --> 00:01:40.939
检查状态码，了解请求和响应的外观。
checking off status codes, we understand
what a request and response looks like.

30
00:01:40.939 --> 00:01:44.150
要将  添加到我们的站点，现在我们将添加 。
To adding HTTPS to our site,
now we're gonna add HTTP/2.

31
00:01:44.150 --> 00:01:48.569
由于 HTTP/2 的其中一个要求是首先启用了 SSL 。
Because one of the requirements for
HTTP/2 is you have SSL enabled first.

32
00:01:48.569 --> 00:01:51.829
同样地，它们只是让你朝着正确的方向发展。
Again, they're just kinda nudging
you in the right direction.

33
00:01:51.829 --> 00:01:53.500
你想用最先进的技术
You wanna use the latest
greatest technology.

34
00:01:53.500 --> 00:01:57.128
你得加密了
You gotta have the encryption placed.

35
00:01:57.128 --> 00:02:01.039
有了  就像阿达说的
With HTTP1.1, like Adar was just saying,

36
00:02:01.039 --> 00:02:05.769
每个请求都有自己的线程它自己的管道
every single request had its own thread,
its own pipe.

37
00:02:05.769 --> 00:02:09.569
因此，如果我想请求 main.js，请请求响应。
So if I wanna request main.js,
request response.

38
00:02:09.569 --> 00:02:11.379
但记住这都是基于 TCP的
But remember, this is all over TCP,

39
00:02:11.379 --> 00:02:16.189
并且 TCP 在发送这些 SYN 包时具有长的握手。
and TCP has that long handshake
where it sends those SYN packets.

40
00:02:16.189 --> 00:02:19.108
然后发送确认包， ACK。
And then it send the acknowledge packets,
the ACK.

41
00:02:19.108 --> 00:02:22.379
然后你把 SYN/ACK 发送回来，它叫做握手，
And then you send back SYN/ACK,
and it's called the handshake, and

42
00:02:22.379 --> 00:02:23.775
真的很烦人
that's really cumbersome.

43
00:02:23.775 --> 00:02:26.562
这意味着我想要的每一个资源
So that means every single
resource that I want,

44
00:02:26.562 --> 00:02:30.519
需要单独的握手，让它在缺省情况下更慢。
is gonna need a separate handshake
which makes it slower by default.

45
00:02:30.519 --> 00:02:32.891
使用  可以复用，因此
With HTTP/2 we can multiplex, so

46
00:02:32.891 --> 00:02:36.620
你是对的我们可以把我们的联系流过去
you're right that we can
stream our connections over.

47
00:02:36.620 --> 00:02:39.240
我们不是流的但我们可以建立一个联系
Well, we're not streaming but
we can make one connection.

48
00:02:39.240 --> 00:02:42.219
然后我们就可以请求更大的管道了
Then we can request everything
just over a larger pipe.

49
00:02:42.219 --> 00:02:45.750
而塞米提到了这一点，但这就是所谓的多路复用。
And Sammy mentioned it, but
that's what's known as multiplexing.

50
00:02:45.750 --> 00:02:48.800
使用一个连接并通过单个连接执行多个操作。
Using one connection and doing multiple
things over a single connection.

51
00:02:48.800 --> 00:02:52.777
所以我希望每次我都想要一个涂鸦
So instead of that, every single
time I want a dog.png, index.html,

52
00:02:52.777 --> 00:02:54.026
我们会握手的
we do that handshake.

53
00:02:54.026 --> 00:02:57.961
这会导致开销并增加使用的数据量。
Which causes overhead and
increase just an amount of data using.

54
00:02:57.961 --> 00:03:00.341
我们只能通过一个连接
We can just do with one connection,
that said,

55
00:03:00.341 --> 00:03:03.206
我们可以建立的联系数量有限。
there is a limit to the number
of connections we can make.

56
00:03:03.206 --> 00:03:05.949
这在很大程度上取决于你的电脑。
And that's largely
depending on your computer.

57
00:03:05.949 --> 00:03:06.699
我应该加上一个字条
I should add a side note,

58
00:03:06.699 --> 00:03:10.509
这只是书呆子的问题我想是 10 个
this is just nerd trivia, and
I think it's ten, actually.

59
00:03:10.509 --> 00:03:12.603
大家都做了，我觉得看浏览器和电脑，
People have done, I think it depends
on the browser and the computer,

60
00:03:12.603 --> 00:03:13.181
就像这样
things like that.

61
00:03:13.181 --> 00:03:15.449
>> 扬声器 2: 大多数浏览器限制为 6 个连接。
&gt;&gt; Speaker 2: Most browsers
are limited to six connections.

62
00:03:15.449 --> 00:03:15.975
>> Jem Young: 6?
&gt;&gt; Jem Young: Six?

63
00:03:15.975 --> 00:03:16.766
我以为是十
I thought it was ten.

64
00:03:16.766 --> 00:03:17.852
>> 扬声器 3: 它已更改。
&gt;&gt; Speaker 3: It changed.

65
00:03:17.852 --> 00:03:20.060
>> Jem Young: 每个域。 >> 扬声器 3: 它已使用 6个。
&gt;&gt; Jem Young: Per domain.
&gt;&gt; Speaker 3: It used to be six.

66
00:03:20.060 --> 00:03:20.807
> > Jem Young: 不是十家吗 ?
&gt;&gt; Jem Young: It's not ten?

67
00:03:20.807 --> 00:03:22.302
>> 扬声器 3: 它取决于您的浏览器。
&gt;&gt; Speaker 3: It depends on your browser.

68
00:03:22.302 --> 00:03:25.487
> > Jem Young: 是的，但这不像一颗银弹。
&gt;&gt; Jem Young: Yeah, but
this isn't like a silver bullet.

69
00:03:25.487 --> 00:03:27.769
没有，我可以建立一个联系，一切都通过它。
This isn't, I can make one connection and
everything goes through it.

70
00:03:27.769 --> 00:03:30.860
您可以对每个连接进行最大数量的连接。
There is a maximum amount of connections
you can make per connection.

71
00:03:30.860 --> 00:03:35.604
所以在很大程度上它会增加网络，你只会看到这些请求的失败，
So largely it'll be add networks,
you'll just see the deluge of requests,

72
00:03:35.604 --> 00:03:38.389
就会有多个联系
that's gonna be multiple connections.

73
00:03:38.389 --> 00:03:40.610
所以 HTTP/2 不是这神奇的东西但是
So HTTP/2 is not this magic thing but
however,

74
00:03:40.610 --> 00:03:44.360
当你谈论发生的事情时就能摆脱这种握手
just getting rid of that handshake, when
you talk about something that happens.

75
00:03:46.139 --> 00:03:47.352
什么规模大于 1 万亿?
What's bigger than a trillion?

76
00:03:47.352 --> 00:03:48.840
我都不知道
I don't even know.

77
00:03:48.840 --> 00:03:49.539
>> 演讲者 2: Quadrillion。
&gt;&gt; Speaker 2: Quadrillion.

78
00:03:49.539 --> 00:03:52.530
>> Jem Young: Quadrilion ，我们说的是四万亿的要求，
&gt;&gt; Jem Young: Quadrillion, we're
talking about quadrillions of requests,

79
00:03:52.530 --> 00:03:56.289
每次都要摆脱这种握手，节省了大量的时间和精力，
getting rid of this handshake every single
time, saves a lot of time and energy and

80
00:03:56.289 --> 00:03:57.490
就能更快地上网
just makes the internet faster.

81
00:03:59.159 --> 00:04:00.520
所以，让我们添加 。
So let's add HTTP/2.

82
00:04:02.385 --> 00:04:04.550
>> Jem Young: 这个比 Certbot 更容易。
&gt;&gt; Jem Young: This one's
even easier than Certbot.

83
00:04:04.550 --> 00:04:11.766
在  中，仅在 443 和 SSL 部分之间添加  。
In our nginx conf, just add HTTP/2
in between the 443 and the SSL part.

84
00:04:15.519 --> 00:04:18.411
>> Jem Young: 对不起，我之前骗了你， Certbot 很容易。
&gt;&gt; Jem Young: I'm sorry, I lied to
you before, Certbot was pretty easy.

85
00:04:18.411 --> 00:04:19.595
这一个更容易
This one's even easier.

86
00:04:22.755 --> 00:04:23.843
> > Jem Young: 我要继续做这个。
&gt;&gt; Jem Young: I'm gonna go ahead and
do that.

87
00:04:23.843 --> 00:04:28.771
我要上去下潜
I'm just gonna go up and come down

88
00:04:28.771 --> 00:04:34.971
在此， >> Jem Young: 并开启 。
here,
&gt;&gt; Jem Young: And turn on http2.

89
00:04:38.649 --> 00:04:41.942
>> Jem Young: 接下来我也要在这里做
&gt;&gt; Jem Young: And
then I'm gonna turn on http2 here as well.

90
00:04:58.497 --> 00:05:01.971
> > Jem Young: 好的，有人输了，谁知道我在哪里 ?
&gt;&gt; Jem Young: Okay, anybody lost,
anybody know where I am?

91
00:05:01.971 --> 00:05:07.194
如果您需要，如果在 nginx 配置的 blob 中找不到，
If you need to, if you can't find in
that blob of nginx configuration,

92
00:05:07.194 --> 00:05:11.211
/443 并将您转至正确的位置。
/443 and
that'll take you to the right location.

93
00:05:12.785 --> 00:05:14.856
>> Jem Young: Slash 只是 find 命令。
&gt;&gt; Jem Young: Slash is
just the find command.

94
00:05:17.415 --> 00:05:22.658
> > Jem Young: 当我们完成后，我们就会像往常一样写和退出。
&gt;&gt; Jem Young: Then when we're done,
we want to write and quit as usual.

95
00:05:22.658 --> 00:05:25.588
Wq 确保我们重新装入我们的 nginx。
Wq and make sure we reload our nginx.

96
00:05:25.588 --> 00:05:29.721
因此 sudo 服务 nginx 重新装入。
So, sudo service nginx reload.

97
00:05:32.846 --> 00:05:34.452
>> Jem Young: 我们来测试一下我们的网站。
&gt;&gt; Jem Young: And let's test out our site.

98
00:05:40.807 --> 00:05:42.170
>> Jem Young: 嘿，漂亮的工作， Jem!
&gt;&gt; Jem Young: Hey, nice work, Jem!

99
00:05:43.620 --> 00:05:45.019
你可能不知道有什么区别
You probably don't notice a difference.

100
00:05:45.019 --> 00:05:48.298
但如果你在你的任何一个浏览器里进了你的检查
But if you go into your inspector
in whatever browser you're using,

101
00:05:48.298 --> 00:05:49.266
你可以看到 h2
you can see the h2.

102
00:05:49.266 --> 00:05:52.956
这意味着您现在正在使用  协议。
That just means you are now
using HTTP/2 protocol.

103
00:05:57.233 --> 00:05:58.706
>> Jem Young: 我认为有一个很好的演示。
&gt;&gt; Jem Young: And
I think there's a good demo.

104
00:05:58.706 --> 00:06:00.798
让我看看能不能把这个拉上来
Let me see if I can pull this up here,
let's see.

105
00:06:00.798 --> 00:06:05.663
Akamai
Akamai http2 demo, yeah,

106
00:06:05.663 --> 00:06:08.507
我喜欢这个
I like this one.

107
00:06:11.139 --> 00:06:12.913
>> Jem Young: 是的，我喜欢这个演示，
&gt;&gt; Jem Young: Yeah, so I like this demo,

108
00:06:12.913 --> 00:06:18.329
我没有包括它，因为我没有版权，但我可以给你看。
I didn't include it because I don't have
copyright on it, but I can show it to you.

109
00:06:18.329 --> 00:06:19.310
这只是 Akamai 演示
This is just the Akamai demo,

110
00:06:19.310 --> 00:06:21.447
说明  和 HTTP/2 之间的差异。
demonstrating the difference
between HTTP/1 and HTTP/2.

111
00:06:21.447 --> 00:06:26.048
你看它真的有很大的图像，所以因为那个 multlexing，
You see it really with large images,
so because of that multplexing,

112
00:06:26.048 --> 00:06:27.615
我可以请求一个图像。
I can request an image.

113
00:06:27.615 --> 00:06:29.620
它只会把一块的管子从一个管子上
And it just sends down
the chunk over one pipe.

114
00:06:29.620 --> 00:06:32.639
因为这不是握手，而是要快得多。
And because it's not doing that handshake,
it's much faster.

115
00:06:32.639 --> 00:06:36.659
您认为它主要对您发送的大文件有好处。
You see it primarily the benefit on
large files you're sending down.

116
00:06:36.659 --> 00:06:40.649
不是那么小，而是转向  那么痛苦和轻松。
Not so much small ones, but
turning HTTP/2, it's so painless and easy.

117
00:06:40.649 --> 00:06:43.771
做得不痛，我们看到它很起码，我再跑一次。
It doesn't hurt to do it, we saw it's
pretty minimal, I'll run that again.

118
00:06:45.658 --> 00:06:48.567
>> Jem Young: 不错，不错。
&gt;&gt; Jem Young: Not bad, not bad at all.

119
00:06:48.567 --> 00:06:53.207
这就像我们能得到的那么简单
That was pretty as
straightforward as we can get.

120
00:06:53.207 --> 00:06:54.920
这很容易
That was pretty easy.

121
00:06:54.920 --> 00:06:57.250
我不是经常这样说，但那很容易，对吧 ?
I don't say that very often, but
that was pretty easy, right?

122
00:06:58.269 --> 00:07:04.199
第二个优势是 HTTP/2 ，而多路复用是称为 HPACK的。
The second benefit to HTTP/2 besides that
multiplexing is something called HPACK.

123
00:07:05.300 --> 00:07:09.100
HPACK 是一个压缩算法，但它不是
HPACK is a compression algorithm again,
but instead of,

124
00:07:09.100 --> 00:07:15.072
让我跳回 >> Jem Young: 我会
let me jump back to the
&gt;&gt; Jem Young: I'll

125
00:07:15.072 --> 00:07:16.451
跳转回标题部分。
jump back to the header section.

126
00:07:16.451 --> 00:07:21.927
所以 HTTP/2 允许的是，大部分都是一样的。
So what HTTP/2 allows is,
most of these are the same.

127
00:07:21.927 --> 00:07:25.999
我的用户代理程序通常不会在请求与
My user agent generally is not gonna
change magically between requests and

128
00:07:25.999 --> 00:07:26.716
响应。
responses.

129
00:07:26.716 --> 00:07:29.502
随着时间的推移我的接受不会改变
It's not gonna change over time,
my Accepts is not gonna change,

130
00:07:29.502 --> 00:07:31.470
我的语言是不会改变的
my language isn't going to change.

131
00:07:31.470 --> 00:07:35.990
那么 HPACK 压缩算法就是把所有这些头
So what the HPACK compression algorithm
does is it takes all these headers,

132
00:07:35.990 --> 00:07:38.250
把它们压缩成一个杂凑
compresses them into a hash.

133
00:07:38.250 --> 00:07:39.970
而它只是比较了它们的时间。
And it just compares them over time.

134
00:07:39.970 --> 00:07:43.310
相比之下，我们大约有 30% ， 40% 的速度。
That comparison gives us about a 30,
40% speed up.

135
00:07:43.310 --> 00:07:46.279
因为不是每次发送这些标题
Because instead of sending these
headers every single time,

136
00:07:46.279 --> 00:07:49.620
它可以将这些向下压缩，然后按其意愿进行读取。
it can just compress these down and
then read them at will.

137
00:07:49.620 --> 00:07:54.172
那是很有力量的，在多路复用中可能是次要的，
That's really powerful and that's beside
multiplexing is probably the secondary,

138
00:07:54.172 --> 00:07:56.449
使用  的最强大的优势。
most powerful benefit of using HTTP/2.

139
00:07:56.449 --> 00:07:59.459
这是我们得到的另一个速度，正在压缩这些标题。
That's the other speed up that we get,
is compressing those headers.

140
00:08:00.519 --> 00:08:03.889
但记住， cookies 一般不能压缩。
But remember,
cookies can't be compressed generally.

141
00:08:03.889 --> 00:08:06.329
你可以但它可能不会
You can, but it probably won't.

142
00:08:06.329 --> 00:08:08.930
因为饼干随着时间的推移而变化，它们更有活力。
Because cookies change over time,
they're more dynamic.

143
00:08:08.930 --> 00:08:13.259
因此，如果发送大量 cookie 有效内容，那么  无法帮助您。
So if you send a large cookie payload,
HTTP/2 is not gonna help you very much.

144
00:08:13.259 --> 00:08:14.829
你想尽量减少你寄的饼干量
You wanna minimize the amount
of cookies you send.
