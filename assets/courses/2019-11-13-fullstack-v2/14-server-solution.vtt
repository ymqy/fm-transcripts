WEBVTT

1
00:00:00.350 --> 00:00:01.740
>> Jem Young: 好的，大家都很自信，
&gt;&gt; Jem Young: Okay,
everybody's looking confident,

2
00:00:01.740 --> 00:00:03.560
这就意味着你可能已经做到了
that means you're probably done.

3
00:00:03.560 --> 00:00:05.940
或者你错了，你有个打字号，你还不知道。
Or you're wrong and you have a typo and
you don't know it yet.

4
00:00:05.940 --> 00:00:07.250
我们会很快发现的
We'll find out real fast.

5
00:00:07.250 --> 00:00:09.820
那就让我们继续吧
So let's go ahead and run that.

6
00:00:09.820 --> 00:00:13.098
所以，如果我们只运行节点 simpleServer.js，
So if we just run node simpleServer.js,
which I already did here,

7
00:00:13.098 --> 00:00:17.251
节点 simpleServer.js >> Jem Young: And
node simpleServer.js
&gt;&gt; Jem Young: And

8
00:00:17.251 --> 00:00:22.875
在您的 Web 浏览器中，仅点
in your web browser, just point yourself

9
00:00:22.875 --> 00:00:27.861
端口 8080上的本地主机。
to your local host on port 8080.

10
00:00:31.245 --> 00:00:33.292
>> Jem Young: 你应该看到这样的东西，
&gt;&gt; Jem Young: You should see
something that looks like this,

11
00:00:33.292 --> 00:00:34.374
让我把它炸掉
let me blow that up a bit.

12
00:00:34.374 --> 00:00:35.819
我的书签正在显示。
My bookmarks are showing.

13
00:00:35.819 --> 00:00:43.786
您 >> Jem Young: 没有任何内容。
You
&gt;&gt; Jem Young: Nothing to it.

14
00:00:43.786 --> 00:00:47.746
我不应该说，当涉及工程学的时候，我尽量不讲简单，或者
I shouldn't say that, when it comes to
engineering I try not to say simple, or

15
00:00:47.746 --> 00:00:50.310
这很简单因为那是相对的
it's easy,
because that's totally relative.

16
00:00:50.310 --> 00:00:52.820
如果你不明白它会让你感到难过
And then if you don't get
it makes you feel bad.

17
00:00:52.820 --> 00:00:56.340
但这是我能想到的最简单的服务器。
But this is the simplest
server I could think of.

18
00:00:56.340 --> 00:00:59.990
可能有人在外面写一个集会，那也不是
There's probably someone out there who
can write one assembly, well it's not

19
00:00:59.990 --> 00:01:03.179
技术上更简单也许稍快一点也不重要
technically simpler, probably
slightly faster, it doesn't matter.

20
00:01:03.179 --> 00:01:05.739
但关键是什么都可以成为服务器。
But the point is anything can be a server.

21
00:01:05.739 --> 00:01:08.620
我们可以用各种语言为服务器提供脚本
And we can script a server
in every language,

22
00:01:08.620 --> 00:01:10.689
每个 Web 语言都有一个写服务器的方法。
every web language there's
a way to write a server.

23
00:01:11.739 --> 00:01:13.489
我们回去看看我们在这里做什么
Let's go back and
see what are we doing here.

24
00:01:13.489 --> 00:01:17.519
我们正在做的是在节点上，我们正在导入 http 库。
What we're doing is we're in node,
we're importing the http library.

25
00:01:18.640 --> 00:01:22.989
然后 http 具有创建服务器的能力，我们只会写
And then http has this ability to create
a server, and we're just gonna write

26
00:01:22.989 --> 00:01:28.010
到输出，响应，我们将写 " Hello World" 。
to the output, to the response,
we're gonna writes Hello World.

27
00:01:28.010 --> 00:01:29.370
我们在港口 8080 上收听
And we're listening on port 8080.

28
00:01:29.370 --> 00:01:32.569
我们正在设置一个控制台，让您知道服务器已启动并且
And we're setting a console just to
let you know that the server is up and

29
00:01:32.569 --> 00:01:34.700
一旦我们拿到了它就跑了
running once we get it going.

30
00:01:34.700 --> 00:01:38.879
您将使用的每个单节点服务器的基本信息
The basics of every single node
server you're ever gonna use

31
00:01:38.879 --> 00:01:41.859
此调用返回请求响应。
is this call back with request response.

32
00:01:41.859 --> 00:01:43.969
可能是，您可能会使用承诺，您可以使用异步等待，但是
It may be, you might use promises,
you might use async await, but

33
00:01:43.969 --> 00:01:47.469
总会有要求回应的
there's always gonna be request response.

34
00:01:47.469 --> 00:01:51.000
第三个参数通常是下一个，用于
And the third parameter is usually next,
which is used for

35
00:01:51.000 --> 00:01:54.564
在您要执行此请求时创建中间件，并且
creating middleware when you're
saying do this request and

36
00:01:54.564 --> 00:01:56.280
然后通过这些中间件进行传递，然后进行响应。
then pass it through these middleware and
then respond.

37
00:01:56.280 --> 00:02:00.859
但在这种情况下，我们并不是用这种方式，而是熟悉这个模式。
But in this case, we're not using any of
that, but be familiar with this pattern.

38
00:02:00.859 --> 00:02:04.609
我可能不会太投入，还有其他的 Frontoo Masters'
I probably won't get too much into it,
there are other Frontend Masters'

39
00:02:04.609 --> 00:02:09.199
更深入的课程，更细致的课程，更深入的程度，
courses which go much, mush deeper into
note servers, much more granular level,

40
00:02:09.199 --> 00:02:10.879
我们待会儿再考虑
and we'll think those out later.

41
00:02:10.879 --> 00:02:14.478
但一般来说这都是要求回应的
But in general it's always
going to be request response,

42
00:02:14.478 --> 00:02:19.191
这就是你写的每台单节点服务器的基本模式
that's the basic pattern to every
single nodes server you'll ever write.

43
00:02:19.191 --> 00:02:24.741
我们在监听一个任意的港口它可能是港口
And we're listening on an arbitrary port,
it could be port,

44
00:02:24.741 --> 00:02:31.020
我不知道 6304 甚至 6305 也不重要
I don't know 6304 or
even 6305, it doesn't matter.

45
00:02:31.020 --> 00:02:36.810
一般下面的端口想说 1000 是保留的，所以
Generally ports below want
to say 1000 are reserved, so

46
00:02:36.810 --> 00:02:43.099
因特网在端口 80 上运行，在  上，因特网在端口上运行，任何人吗 ?
the internet runs over Port 80, on HTTPS,
the Internet runs over port, anybody?

47
00:02:44.889 --> 00:02:47.270
>> 扬声器 2: 443 >> Jem Young: 是， 443，是，非常好。
&gt;&gt; Speaker 2: 443
&gt;&gt; Jem Young: Yes, 443, yes, very good.

48
00:02:47.270 --> 00:02:50.520
有保留的港口的概念
There's this concept of reserved ports and
pretty much

49
00:02:50.520 --> 00:02:53.789
1000 以下的任何内容都可能被某些程序或语言保留。
anything below 1000 is probably
reserved by some program or language.

50
00:02:53.789 --> 00:02:55.199
所以你不想和那些人乱搞
So you don't want to mess with those, but

51
00:02:55.199 --> 00:02:58.609
选择任意高的数字 ( 如端口 8080 ) 通常非常安全。
choosing an arbitrarily high number
like port 8080 is usually pretty safe.

52
00:03:01.479 --> 00:03:07.724
我们在 localhost中，我也可以输入，这只是 127.0.0.1的速记。
And we're in localhost, I can also type,
that's just shorthand for 127.0.0.1.

53
00:03:07.724 --> 00:03:12.396
哎呀我在跑 Nginx[ LAUGH] 我在跑 Nginx
Whoops, am I running Nginx,
[LAUGH] I am running Nginx.

54
00:03:12.396 --> 00:03:16.579
通常 127.0.0.1 是回送命令。
Usually 127.0.0.1 is a loopback command.

55
00:03:16.579 --> 00:03:20.659
只是说不出去上网打港口的服务器
It's just saying instead of going out to
the Internet and hitting a server on port

56
00:03:20.659 --> 00:03:24.349
8080我要在 8080上打我的 localhost
8080, I'm just gonna hit my
localhost running important at 8080.

57
00:03:24.349 --> 00:03:27.229
我有 Nginx 从不同的配置中运行
I have Nginx running from
a different configuration.

58
00:03:28.969 --> 00:03:33.060
别担心你什么都没看见就假装没发生
Don't worry about that you didn't see
anything, just pretend that didn't happen.

59
00:03:33.060 --> 00:03:35.439
但一般来说，当你跑的时候，做地方发展，
But generally, when you're running,
doing local development,

60
00:03:35.439 --> 00:03:37.259
你总是会打你的 localhost
you're always gonna hit your localhost.

61
00:03:37.259 --> 00:03:41.789
如果进行远程开发，那么可以命中远程主机，而这就是服务器。
If you do remote development, you can
hit remote host, and that's a server.

62
00:03:41.789 --> 00:03:46.310
或者如果你想知道我是怎么做的，我把它放进来了，但是
Or if you're wondering how I did the line
numbers, I put it in the notes here, but

63
00:03:46.310 --> 00:03:49.610
对他们很有好处
in them it's good to try that.

64
00:03:49.610 --> 00:03:51.490
我要杀了这个命令
And I'm just gonna kill this command.

65
00:03:51.490 --> 00:03:55.721
看看你是否想展示路线号码我打了 Esc
See if you wanna show the line
number oops, I hit Esc,

66
00:03:55.721 --> 00:03:59.420
最后一个线路节点我说集合号
last line node, and I'll say set number.

67
00:03:59.420 --> 00:04:02.218
我觉得这是对的，对，感谢我的行号。
I think that's right, yes,
thanks to my line number.

68
00:04:07.068 --> 00:04:10.217
>> Jem Young: 如果我想隐藏他们，我想再说一次。
&gt;&gt; Jem Young: And if I want to hide them,
I think say set number again.

69
00:04:10.217 --> 00:04:13.759
噢，不，不，不，不，不，不，不，不
Oops, nope, no number.

70
00:04:13.759 --> 00:04:16.430
我喜欢这个简单的说重点
I like that, it's simple, to the point.

71
00:04:16.430 --> 00:04:20.660
设置无数字和 [INAUDIBLE]，仅在个案中设置。
Set no number and
[INAUDIBLE], just in case.

72
00:04:20.660 --> 00:04:23.562
我不想做任何你想做的事情他是怎么做到的
I'm not trying to do anything that
you're like, well, how did he do that?

73
00:04:23.562 --> 00:04:27.089
我想让你知道我所知道的一切除了我对快速和
I want you to know everything I know,
except my in depth knowledge of Fast and

74
00:04:27.089 --> 00:04:28.699
疯狂的特里维那是我的
Furious trivia, that's mine.

75
00:04:28.699 --> 00:04:29.341
没有其他人可以这么做
No one else can have that.

76
00:04:32.476 --> 00:04:33.237
>> Jem Young:
&gt;&gt; Jem Young: And right clear.

77
00:04:37.788 --> 00:04:40.273
>> Jem Young: 那个服务器，最简单的，
&gt;&gt; Jem Young: That server,
let's the simplest,

78
00:04:40.273 --> 00:04:43.730
裸机服务器创建应用程序的方式。
bare bones way of creating an application.

79
00:04:43.730 --> 00:04:47.569
或者像 Sam 说的那样，是回应要求的东西。
Or, like Sam said,
something that responds to requests.

80
00:04:48.860 --> 00:04:51.379
直说吧我们能搞定的
Pretty straightforward,
we can handle this.

81
00:04:51.379 --> 00:04:54.000
现在我们要更先进的了这就是简单的
And now we're going to get much more
advanced this is this is as simple

82
00:04:54.000 --> 00:04:54.959
就像它一样
as it gets.

83
00:04:54.959 --> 00:04:56.889
现在，我们要加快速度。
And now we're going to pick
up a little bit of speed.

84
00:04:56.889 --> 00:04:58.590
我们说的是规模上的服务器
We're talking about servers at scale,

85
00:04:58.590 --> 00:05:03.750
因为很明显我无法在我的笔记本上运行 frontendmasters.com
because obviously I can't run
frontendmasters.com on my laptop.

86
00:05:03.750 --> 00:05:06.810
我也许能，实际上你会感到惊讶的是
I probably could, actually you'd be
surprised that how efficient servers

87
00:05:06.810 --> 00:05:08.839
现在是这样，但这并不是个好主意。
are now, but it's really not a good idea.

88
00:05:08.839 --> 00:05:12.040
它变得更复杂我们会讨论并发症
It gets more complicated,
which we'll talk about the complications,

89
00:05:12.040 --> 00:05:13.480
这就是我们来这里的原因
that's why we're here.

90
00:05:13.480 --> 00:05:17.158
如果服务器这么简单，那么每个人都是完全同步的工程师。
If servers were this simple,
everybody would be full sync engineer.

91
00:05:17.158 --> 00:05:22.639
但是在这些服务器上，它们的启动非常简单，非常简单。
[LAUGH] But they start off really,
really simple, as far as these servers go.
