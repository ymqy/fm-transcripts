WEBVTT

1
00:00:00.970 --> 00:00:04.232
>> Jem Young: 最着名的集装箱化平台
&gt;&gt; Jem Young: The most famous
containerization platform you've probably

2
00:00:04.232 --> 00:00:05.301
是 Docker。
heard of is Docker.

3
00:00:05.301 --> 00:00:06.980
这很适合它是鲸鱼
It's fitting that it's a whale.

4
00:00:06.980 --> 00:00:08.339
因为它是
Because it is.

5
00:00:08.339 --> 00:00:10.039
当你思考容器时，你会想到 Docker。
When you think containers,
you're thinking Docker.

6
00:00:12.109 --> 00:00:15.724
Amazon 拥有自己的 Amazon Elastic Container 服务。
Amazon has their own
Amazon Elastic Container Service.

7
00:00:15.724 --> 00:00:17.760
Apache Mesos 是另一个
Apache Mesos is another one.

8
00:00:17.760 --> 00:00:23.300
CoreOS rkt是另一个集装箱化服务。
And CoreOS rkt, known as Rocket,
is another containerization service.

9
00:00:23.300 --> 00:00:28.213
集装箱化仅意味着在应用程序之间进行对话的层
And containerization just means it's that
layer that talks between the application

10
00:00:28.213 --> 00:00:30.199
和操作系统。
and the operating system.

11
00:00:30.199 --> 00:00:33.057
你可以把它移到周围，这只是一层。
And you can move that around,
it's just one layer.

12
00:00:33.057 --> 00:00:36.707
所以我可以有一层，但很多应用，都是工作，
So I can have one layer, but
many applications, and they all work,

13
00:00:36.707 --> 00:00:41.539
而不是虚拟机，它是每个容器的操作系统。
rather than a virtual machine, which is an
operating system per individual container.

14
00:00:41.539 --> 00:00:45.990
Netflix 有它自己的，很好。
Netflix has its own and
it works pretty well.

15
00:00:45.990 --> 00:00:50.469
我们运行了数百万个容器和数以千计的服务器。
We run millions of containers and
thousands of servers.

16
00:00:50.469 --> 00:00:54.414
因此，这是大多数人永远不会得到的规模，所以别担心。
So it's a scale that most people will
never get to, so don't worry about it.

17
00:00:54.414 --> 00:00:57.433
这就是为什么我们不能在这里做任何实际的集装箱化
That's why we're not going to do
any actual containerization here,

18
00:00:57.433 --> 00:00:58.918
因为如果你是那么大的
because if you're at that scale,

19
00:00:58.918 --> 00:01:02.570
你可能需要知道比我今天要教你的还要多
you'll probably need to know a bit
more than I'm gonna teach you today.

20
00:01:02.570 --> 00:01:05.340
但很高兴知道一个容器是什么，它是如何运作的。
But it's good to know what a container is,
how it works.

21
00:01:05.340 --> 00:01:09.969
Netflix 在一个名为 Titus 的平台上运行，这就是我们的集装箱化。
Netflix runs on a platform called Titus,
and that does our containerization.

22
00:01:09.969 --> 00:01:11.096
而且效果很好
And it works pretty well and

23
00:01:11.096 --> 00:01:13.903
如果你的公司有兴趣调查它是公开的
it's open source if your company
is interested in looking into it.

24
00:01:17.359 --> 00:01:19.430
>> Jem Young: 所以我谈到了集装箱化，
&gt;&gt; Jem Young: So
I talked about containerization, and

25
00:01:19.430 --> 00:01:20.930
那就好了
that's all well and good.

26
00:01:20.930 --> 00:01:26.037
但如何处理成千上万个容器，百万个容器?
But how do you roll out thousands of
containers, millions of containers?

27
00:01:26.037 --> 00:01:27.769
您需要编排某种编排。
You need some sort of orchestration.

28
00:01:27.769 --> 00:01:31.140
Czuz 我不能只复制粘贴，然后用一堆服务器来运行。
Cuz I can't just copy paste and
then run that against a bunch of servers.

29
00:01:31.140 --> 00:01:35.810
我需要某种形式的传导
I need some sort of way
of conducting that.

30
00:01:35.810 --> 00:01:37.417
这就是为什么叫编排
That's why it's called orchestration,

31
00:01:37.417 --> 00:01:40.370
因为您需要确保正确安装操作系统。
because you need to make sure the
operating systems are installed correctly.

32
00:01:40.370 --> 00:01:43.868
您需要确保已安装容器化平台
You need to make sure your
containerization platform is installed

33
00:01:43.868 --> 00:01:44.557
正确。
correctly.

34
00:01:44.557 --> 00:01:47.617
这很像交响乐，就像这里是弦，
And it's a lot like a symphony,
where it's like here are the strings,

35
00:01:47.617 --> 00:01:51.239
这里是大提琴，是黄铜，他们都进来了，一起来了
here's the cello, here's the brass, and
they all come in and it comes together and

36
00:01:51.239 --> 00:01:55.120
然后交响乐就会播放这就是为什么它被称为编排
then the symphony plays out, and
that's why it's called orchestration.

37
00:01:55.120 --> 00:01:58.957
当你把它卷出来，说实话，它很漂亮，你可以看到一个完整的集群
And when you roll it out, honestly, it's
beautiful, and you see an entire cluster

38
00:01:58.957 --> 00:02:01.730
因为他们从旧的集群中切换过来了
turn green because they switched
over from the old cluster.

39
00:02:01.730 --> 00:02:06.542
我不知道也许晚点我会给你看一些截屏
And it's, I don't know, maybe later,
I'll show you some screenshots of some of

40
00:02:06.542 --> 00:02:10.000
我们是怎么把东西滚出去的因为它真的很棒
how we roll things out,
because it's really impressive.

41
00:02:11.319 --> 00:02:14.139
但你需要一个把所有这些容器和
But you need a way of taking
all these containers and

42
00:02:14.139 --> 00:02:18.689
所有这些单独的操作系统并将它们应用于服务器本身。
all these individual operating systems and
applying them to the servers itself.

43
00:02:18.689 --> 00:02:21.872
仅仅说，我跑的是容器，很酷。
It's not enough to just say,
I run containers, cool.

44
00:02:21.872 --> 00:02:26.461
但千万次你会发现奇怪的虫子
But do that a million times and
you're going to discover weird bugs and

45
00:02:26.461 --> 00:02:28.812
有负载平衡的奇怪的东西
weird things with load balancing.

46
00:02:28.812 --> 00:02:32.780
更不用说，我们讨论了弹性计算。
Not to mention,
we talked about elastic computing.

47
00:02:32.780 --> 00:02:38.389
所以如果我需要一万个容器，有多少台服务器 ?
So if I need 10,000 more containers,
how many servers is that?

48
00:02:38.389 --> 00:02:39.251
我不知道我不知道 我不知道
I don't know.
I don't

49
00:02:39.251 --> 00:02:41.699
了解每个容器需要多少资源。
know how much resources
each container needs.

50
00:02:41.699 --> 00:02:44.099
我不知道服务器有多少资源。
And I don't know how much
resources the server has.

51
00:02:44.099 --> 00:02:48.057
所以我们有这个编排层说，哎，我有一个 Node 应用程序，
So we have this orchestration layer that
says, hey, I have a Node application and

52
00:02:48.057 --> 00:02:53.430
我需要的是 200 个 RAM 和 10 兆字节的硬盘空间。
I need, let's say 200 megs of RAM and
about 10 megabytes hard drive space.

53
00:02:53.430 --> 00:02:55.159
我知道服务器需要多少。
I know how much the server needs.

54
00:02:55.159 --> 00:02:56.389
我可以把这些都滚出去
And I can roll these out.

55
00:02:56.389 --> 00:02:59.187
我可以在服务器上均匀滚动
And I can roll these out
evenly across the servers so

56
00:02:59.187 --> 00:03:01.669
没有一个服务器正在占用所有流量。
that no one server is
taking all the traffic.

57
00:03:01.669 --> 00:03:03.799
这就是编排的内容。
And that's what the orchestration does.

58
00:03:04.949 --> 00:03:07.520
你要听的最有名的就是库伯内特
The famous one you're
gonna hear is Kubernetes.

59
00:03:07.520 --> 00:03:10.090
那是屋子里的大号
That's the big one in the room.

60
00:03:10.090 --> 00:03:11.659
速记为 K8s。
The shorthand is K8s.

61
00:03:11.659 --> 00:03:14.689
所以如果你看到它，它指的是库伯内特。
So if you ever see that,
it's referring to Kubernetes.

62
00:03:14.689 --> 00:03:19.009
因为，它是一个很长的名字，我不知道它是什么意思。
Because, well, it's a long name that
I don't actually know what it means.

63
00:03:19.009 --> 00:03:20.170
有人知道这意味着什么吗
Anybody know what it means?

64
00:03:20.170 --> 00:03:21.081
那是什么意思
What does it mean, please?

65
00:03:21.081 --> 00:03:23.139
>> Student : k 和 s 之间有八个字符。
&gt;&gt; Student: There's eight
characters between k and s.

66
00:03:23.139 --> 00:03:24.159
> > Jem Young: 不，不，我知道
&gt;&gt; Jem Young: No, no, I know that.

67
00:03:24.159 --> 00:03:25.389
库伯内特是什么意思
What does Kubernetes mean?

68
00:03:25.389 --> 00:03:26.300
这意味着什么吗
Does it mean anything?

69
00:03:26.300 --> 00:03:27.237
我不知道我不知道
I don't know.

70
00:03:27.237 --> 00:03:28.204
我可以查一查
I could probably look this up.

71
00:03:28.204 --> 00:03:33.010
>> Student2: 在 Twitter 上有一个笑话，它是以支出之神命名的。
&gt;&gt; Student2: There's a joke on Twitter
that it's named after the god of spending

72
00:03:33.010 --> 00:03:34.463
在云中的钱
money in the cloud.

73
00:03:34.463 --> 00:03:35.937
>> Jem Young: [LAUGH] 是。
&gt;&gt; Jem Young: [LAUGH] Yes.

74
00:03:35.937 --> 00:03:39.069
我是说我不知道
I mean, I don't know.

75
00:03:39.069 --> 00:03:41.939
也许这就是它的意思 但你有时会看到 K8s
Maybe that's what it means.
But you'll see K8s sometimes.

76
00:03:41.939 --> 00:03:44.039
再来一次我得把你的书呆子给我
Again, I gotta get your
nerd credit up here.

77
00:03:44.039 --> 00:03:45.719
你就像我在用 K8s
So you're like, yeah, I'm using K8s.

78
00:03:45.719 --> 00:03:47.409
但这只是一个编排层。
But it's just an orchestration layer.

79
00:03:47.409 --> 00:03:51.002
与 Docker不同， Docker是一个容器程序， Kubernetes 是控制
So unlike Docker, which is a
containerizer, Kubernetes is what controls

80
00:03:51.002 --> 00:03:53.920
滚出所有你要部署的集装箱
the rolling out of all these
containers you're deploying.

81
00:03:53.920 --> 00:03:58.270
还有 Docker Swarm ，他们有他们的，也是一个大玩家。
There's also Docker Swarm, they have
their, that's also a big player too.

82
00:03:58.270 --> 00:04:02.840
下一个是 Amazon Elastic Kubernetes 服务。
The next one would be
Amazon Elastic Kubernetes service.

83
00:04:02.840 --> 00:04:07.009
Apache Mesos 是一个容器程序和编排层。
Apache Mesos is a containerizer and
an orchestration layer.

84
00:04:07.009 --> 00:04:10.909
还有 AKS ，我认为是微软的。
Then there's AKS,
which I think is Microsoft's.

85
00:04:10.909 --> 00:04:14.615
他们有自己的 Azure ， Kubernetes 服务，
They have their own Azure,
Kubernetes service, something like that,

86
00:04:14.615 --> 00:04:16.519
有些人用的
which some people use.

87
00:04:16.519 --> 00:04:19.831
但有趣的是我们现在有集装箱了
But it's funny that we are like,
we have containers now, and

88
00:04:19.831 --> 00:04:21.500
然后我们就有弹性计算
then we have elastic computing.

89
00:04:21.500 --> 00:04:24.672
但没有人认为，我们需要一个控制所有这些事物的方法。
But no one thought, well, we need
a way of controlling all these things.

90
00:04:24.672 --> 00:04:28.889
因为现在不是一台服务器，而是一百万台服务器。
Because now instead of one server,
we have a million servers.

91
00:04:28.889 --> 00:04:32.362
所以它真的很复杂得非常快
So it gets really,
really complicated really fast.

92
00:04:32.362 --> 00:04:36.329
但我要说的是当你在这个工程的时候
But I'll say this,
when you're at this level of engineering,

93
00:04:36.329 --> 00:04:39.889
你在 DevOps 的土地上更少的堆，更多的 DevOps。
you're in DevOps land,
less full stack, more DevOps.

94
00:04:39.889 --> 00:04:41.742
你要知道你在做什么
And you need to know
precisely what you're doing,

95
00:04:41.742 --> 00:04:44.288
因为你带来了价值数千美元的服务器
because you're bringing up thousands
of dollars worth of servers and

96
00:04:44.288 --> 00:04:46.764
很快就会开始你需要知道如何平衡这一点
taking down very quickly, and
you need to know how to balance that.

97
00:04:46.764 --> 00:04:51.930
但我不想再插 Netflix 了
But I don't want to plug Netflix anymore.

98
00:04:51.930 --> 00:04:54.254
但我们的速度如此之快我不会说
But we've gotten so
fast at, I won't say we,

99
00:04:54.254 --> 00:04:58.132
我和它没什么关系，比我更聪明的人，但是他们有
I have nothing to do with it, much smarter
people than me, but they've got so

100
00:04:58.132 --> 00:05:01.915
很快就会得到数百万的服务
fast at taking out millions of services
and taking them down very quickly.

101
00:05:01.915 --> 00:05:07.139
我们可以在 7 分钟内从西部到东部
We can roll over from uswest to us
east one region in seven minutes.

102
00:05:07.139 --> 00:05:08.696
这就是交通量的十亿字节
So that's gigabytes of traffic,

103
00:05:08.696 --> 00:05:11.646
数百万的连接上百万的容器
millions of millions of connections,
millions of containers,

104
00:05:11.646 --> 00:05:15.199
我们可以很快地将这些信息滚动到一个真正的立体编排层
we can roll those over very quickly due
to a really solid orchestration layer.

105
00:05:15.199 --> 00:05:19.637
然后当区域重新上线时我们可以把这些都搬回来
And then when the region comes back
online, we can move all those back and

106
00:05:19.637 --> 00:05:21.100
人们不注意
people don't notice.

107
00:05:21.100 --> 00:05:22.600
我们一直都这么做
We do it all the time.

108
00:05:22.600 --> 00:05:25.750
这就是一个非常好的编排层的力量。
That's the power of like a really
good orchestration layer.
