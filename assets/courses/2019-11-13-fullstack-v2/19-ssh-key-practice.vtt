WEBVTT

1
00:00:00.183 --> 00:00:04.067
>> Jem Young: 因此，让我们创建 SSH 密钥。
&gt;&gt; Jem Young: So let's create an SSH key.

2
00:00:04.067 --> 00:00:08.319
我们想做的是想把它变成我们的 .ssh 目录
What we wanna do is we wanna
cd into our .ssh directory.

3
00:00:08.319 --> 00:00:11.846
如果你是在一台 Mac 机器上
If you're on a Mac machine,
that's gonna be the default place for

4
00:00:11.846 --> 00:00:13.237
所有 SSH 密钥都存在。
all of your SSH keys live.

5
00:00:13.237 --> 00:00:18.064
我想让你用 ls 命令把那些文件列出来看看里面有什么
I want you to list out those files using
ls command just to see what's in there.

6
00:00:18.064 --> 00:00:24.044
然后我们将运行 ssh-keygen >> Jem Young: 所以我现在就做。
And then we're gonna run ssh-keygen
&gt;&gt; Jem Young: So I'll do that now.

7
00:00:24.044 --> 00:00:25.227
那是第一排
That's row one.

8
00:00:27.949 --> 00:00:33.587
>> Jem Young: So my home directory .ssh。
&gt;&gt; Jem Young: So
cd my home directory .ssh.

9
00:00:33.587 --> 00:00:35.357
现在我在这里
Now I'm in here.

10
00:00:35.357 --> 00:00:39.500
我的钥匙不是什么意思
List of my keys, they don't mean anything.

11
00:00:39.500 --> 00:00:41.755
然后我们要运行 ssh-keygen
And then we're gonna run ssh-keygen.

12
00:00:41.755 --> 00:00:45.496
所以让我澄清一下， ssh-keygen.
So let me just clear that, ssh-keygen.

13
00:00:45.496 --> 00:00:47.774
你的小费和你会用什么时间
Pro tip and
what you will use all the time,

14
00:00:47.774 --> 00:00:51.811
如果你签了就会为你自动完成，真的，真的，
if you tab it will try to autocomplete for
you, which is really, really,

15
00:00:51.811 --> 00:00:53.914
真的很有用而且我想逃跑
really useful and I wanna run keygen.

16
00:00:53.914 --> 00:00:55.734
我可以这样说，我也可以。
So I can say that, and I tab.

17
00:00:57.405 --> 00:01:00.259
>> Jem Young: 它会问我想要保存文件名的内容。
&gt;&gt; Jem Young: It's gonna ask me what
I want to save the file name as.

18
00:01:00.259 --> 00:01:02.738
如果你有一个叫 ID_rsan的 SSH 密钥
If you have an SSH key called ID_rsan,

19
00:01:02.738 --> 00:01:07.641
这是缺省名称，请使用其他名称，否则会发生冲突。
which is the default name, use a different
name otherwise it will conflict.

20
00:01:07.641 --> 00:01:12.268
我要用全堆的前端
I'm gonna use full stack front end.

21
00:01:12.268 --> 00:01:13.878
我要用两个你不用用两个
I'm gonna use two,
you don't have to use two.

22
00:01:13.878 --> 00:01:16.197
我已经有一个完整的栈前端密钥了
I already have an original
full stack front end key,

23
00:01:16.197 --> 00:01:18.260
我不记得哪个服务器去了
which I don't remember
which server goes to.

24
00:01:18.260 --> 00:01:20.549
所以我不想把它删掉
So I don't wanna delete it
cuz if I lose my ssh-key,

25
00:01:20.549 --> 00:01:22.013
我被关在自己的服务器上了
I'm locked out of my own server.

26
00:01:22.013 --> 00:01:23.882
所以我会创造一个新的
So I'll create a new one.

27
00:01:23.882 --> 00:01:25.400
如果需要，可以使用口令。
You can use a passphrase if you want.

28
00:01:25.400 --> 00:01:30.201
我不会这么做的但如果你是你的
I won't for this case, but
you generally should if you're

29
00:01:30.201 --> 00:01:35.110
定期使用 ssh 密钥，并将其保留为空白。
using ssh-key regularly, and
it's gonna leave it blank.

30
00:01:35.110 --> 00:01:41.338
它生成了这个随机的关键艺术图像。
And it generated this
random key art image.

31
00:01:41.338 --> 00:01:43.287
所有人都有 SSH 密钥吗
All right, everybody have an SSH key?

32
00:01:43.287 --> 00:01:47.073
>> 扬声器 2: 否，当我尝试使用 cd 命令时，没有这样的文件或目录
&gt;&gt; Speaker 2: No, I'm getting on no
such file or directory when I try to cd

33
00:01:47.073 --> 00:01:51.638
- > > Jem Young: 好的，没问题。
the into the-
&gt;&gt; Jem Young: Okay, not a problem.

34
00:01:51.638 --> 00:01:56.466
所以我们能做的就是去 cd，其实我就做，
So what we can do is we can go to cd,
actually I'll just do,

35
00:01:56.466 --> 00:01:58.742
我们可以制作目录
we can run make directory.

36
00:01:58.742 --> 00:02:04.612
所以 mkdir -/.ssh ，实际上我要运行 -p，
So mkdir -/.ssh, actually,
I'm gonna run -p,

37
00:02:04.612 --> 00:02:10.879
只要它还不存在就可以了
p just means it will make it
if it doesn't already exist.

38
00:02:10.879 --> 00:02:14.189
现在应该有 SSH 目录。
And you should have an SSH directory now.

39
00:02:14.189 --> 00:02:20.695
所以现在如果我们清楚了，我就会去列出档案。
So now if we clear, so
I'll do ls to list files.

40
00:02:20.695 --> 00:02:26.562
我要用管道运营商来管输出，就是这条棒。
I'm gonna pipe the output using the pipe
operator, which is just this bar.

41
00:02:26.562 --> 00:02:30.981
我要去格雷普所以我要定期
And I'm going to grep, so
I'm gonna run a regular

42
00:02:30.981 --> 00:02:36.152
表达式尝试查找我的密钥，完整堆栈前端 2。
expression to try to find my key,
full stack front end 2.

43
00:02:36.152 --> 00:02:38.521
如果您进行搜索，那么应该有两个文件。
And you should have two
files if you do a search.

44
00:02:38.521 --> 00:02:41.615
当然根据你的档案你的贪欲
And of course, depending on what
you named your file, you grep for

45
00:02:41.615 --> 00:02:42.729
不一样的东西
something different.

46
00:02:42.729 --> 00:02:45.780
但我们有私人钥匙
But here we have the private key.

47
00:02:45.780 --> 00:02:48.747
所以它不会在 .pub 中结束，然后我们就有了公钥。
So it doesn't end in .pub, and
then we have the public key.

48
00:02:48.747 --> 00:02:53.810
我可以给你展示公共钥匙，完整的堆前端 2。
So I can show you that public key,
full stack front end 2.

49
00:02:53.810 --> 00:02:55.867
我不是担心你闯入我的服务器
Not that I'm worried about you
breaking into my server but

50
00:02:55.867 --> 00:02:57.884
你一般都不应该给人看你的私人钥匙
you generally shouldn't show
people your private key.

51
00:03:01.129 --> 00:03:05.133
>> Jem Young: 长串的长串长串
&gt;&gt; Jem Young: And It looks like
this long string of gibberish and

52
00:03:05.133 --> 00:03:06.953
这才是关键
that's just the key.

53
00:03:06.953 --> 00:03:10.775
所以我可以和任何人分享这个公钥，我可以把它发邮件给你。
So I can share this public key out
with anybody, I can email it to you.

54
00:03:10.775 --> 00:03:12.784
我要把它放到我的服务器上
I'm gonna end up putting it on my server.

55
00:03:12.784 --> 00:03:14.122
但我可以在任何地方都分享
But I can share it everywhere.

56
00:03:14.122 --> 00:03:18.111
通过使用这个公用密钥，我可以加密我要发送给您的所有数据。
And using this public key, I can
encrypt all the data I wanna send you.

57
00:03:18.111 --> 00:03:22.941
现在，我是唯一一个使用此专用密钥来解密数据的人。
And I am the only one now using this
private key that can decrypt that data.

58
00:03:22.941 --> 00:03:26.759
这是一个很神奇的概念。
It's a really amazing concept.

59
00:03:26.759 --> 00:03:30.330
每个人都有类似的产出我们都有钥匙
Everybody have like some sort of output
looks like that, we all have keys,

60
00:03:30.330 --> 00:03:31.131
我猜也是
I'm assuming.

61
00:03:31.131 --> 00:03:33.637
有什么问题吗
Any questions on the commands I used?

62
00:03:33.637 --> 00:03:38.552
好的私人钥匙公用钥匙
Cool, yeah, private key, public key.

63
00:03:38.552 --> 00:03:40.718
这是我喜欢的事我不知道为什么
This is something that I like
honestly I don't know why but

64
00:03:40.718 --> 00:03:42.449
我花了很长时间包围着它
it took me a long time to
wrap my head around it.

65
00:03:42.449 --> 00:03:43.921
也许这不是私人的
Probably cuz it's not .private.

66
00:03:43.921 --> 00:03:46.415
我不知道他们为什么不把它给我私人和酒吧
I don't know why they didn't make
it .private and .pub, I'm like,

67
00:03:46.415 --> 00:03:47.384
哪个才是对的
which one is the right one?

68
00:03:47.384 --> 00:03:49.497
它永远是一个公共的钥匙
It's always gonna be a public key.

69
00:03:49.497 --> 00:03:51.978
绝不会是私人钥匙
Never gonna be a private key.

70
00:03:51.978 --> 00:03:53.560
所以现在我们要登录了
And so now, we're gonna log in.

71
00:03:56.074 --> 00:03:58.168
>> Jem Young: 其实在我们之前
&gt;&gt; Jem Young: Actually before we do that,

72
00:03:58.168 --> 00:04:03.067
这整个过程都在给这个数字海洋添加一个 SSH 密钥。
the whole point of this was adding
an SSH key to this Digital Ocean.

73
00:04:03.067 --> 00:04:05.252
记住我们需要那个公用钥匙吗
So remember, we need that public key?

74
00:04:05.252 --> 00:04:07.397
所以我们想做的是你能用
So what we wanna do is you can use,

75
00:04:07.397 --> 00:04:11.780
根据您所开启的操作系统，您可以说 pd 副本。
depending on the operating system
you're on, you can say pd copy.

76
00:04:11.780 --> 00:04:13.459
但我要在这里用鼠标
But I'm just gonna use my mouse here.

77
00:04:13.459 --> 00:04:14.269
别对我说
Don't judge me.

78
00:04:16.531 --> 00:04:17.615
> > Jem Young: 我要把它贴在其中。
&gt;&gt; Jem Young: And I'm gonna paste that in.

79
00:04:20.572 --> 00:04:26.502
>> Jem Young: 我将它称为全堆栈前端 p2 键。
&gt;&gt; Jem Young: And I'll just call
it full stack front end p2 key.

80
00:04:26.502 --> 00:04:29.658
如果你再挂的话，这就是我喜欢数字海洋的原因。
And if anytime you get hung up again,
that's why I love Digital Ocean.

81
00:04:29.658 --> 00:04:31.012
他们有一个很好的社区
They have a really good community.

82
00:04:31.012 --> 00:04:35.574
他们有完整的指示信息如何保存和复制您的公共和
They have entire instructions here about
how to save and copy your public and

83
00:04:35.574 --> 00:04:37.649
私人钥匙之类的
private key and things like that.

84
00:04:37.649 --> 00:04:40.759
它们更详细地研究了这些其他的东西。
And they go into more detail and
all these other things.

85
00:04:40.759 --> 00:04:44.901
我们可以接着说，很酷。
And we can just go ahead and
add that, cool.

86
00:04:44.901 --> 00:04:46.771
确保这个被检查过
And make sure this one is checked.

87
00:04:46.771 --> 00:04:50.480
如果您有其他要使用的键，就像在您的
If you have additional keys that you
wanna use, as in they're already on your

88
00:04:50.480 --> 00:04:54.432
计算机，您不想生成新的计算机，也可以单击这些。
computer, you don't wanna generate a new
one, you can just click those as well.

89
00:04:54.432 --> 00:04:55.939
但我现在就用一个
But I'm just gonna use one for now.

90
00:04:58.716 --> 00:05:00.865
>> Jem Young: 当我们向下滚动到我们需要的微滴时
&gt;&gt; Jem Young: And when we scroll down
to how many droplets we need, so

91
00:05:00.865 --> 00:05:02.701
微滴就像一个服务器的一小部分
droplets are just like
a fraction of a server.

92
00:05:02.701 --> 00:05:08.283
我可以创造两，三，四，无论我想要什么，但我不会这么做。
I can create two, three, four, whatever
I want, but I'm not gonna do that.

93
00:05:08.283 --> 00:05:12.877
我今天才要创建一个我们不想去处理你的账单
I'm just gonna create one today,
cuz we don't wanna run up your bill.

94
00:05:12.877 --> 00:05:16.456
还有主持人的名字，老实说，这不重要。
And the host name, honestly,
it doesn't matter.

95
00:05:16.456 --> 00:05:20.973
[ LAUGH] 有一个 XKCD 关于命名服务器的笑话，这真的很困难，因为
[LAUGH] There's an XKCD joke about naming
servers, that it's really hard because

96
00:05:20.973 --> 00:05:24.843
服务器将会使用很长的时间，并且无法重命名。
servers will live a very long time and
they're impossible to rename.

97
00:05:24.843 --> 00:05:26.750
不是不可能的但要重命名很难
Well, not impossible but
it's very difficult to rename.

98
00:05:26.750 --> 00:05:30.684
所以如果你想聪明就像堆前堆一样
So if you try to get clever and
like full stack front end,

99
00:05:30.684 --> 00:05:33.547
永远不会死的我不知道
never gonna die server, I don't know.

100
00:05:33.547 --> 00:05:35.649
我不知道我的名字在哪里
I don't know where I'm going
with my naming thing, but

101
00:05:35.649 --> 00:05:37.324
对计算机科学的命名很困难
naming things in computer science is hard.

102
00:05:37.324 --> 00:05:40.213
随便取个名字就不重要了
Just pick a random name,
it doesn't really matter.

103
00:05:40.213 --> 00:05:44.869
我们已经，我可以在 Netflix 上说，因为我们的服务器名称
We have been, I can say at Netflix we've
been burned on our server names because

104
00:05:44.869 --> 00:05:48.981
我们会给它打电话我不知道我们会把它叫做 EC 网络服务器
we'll call it, I don't know,
we'll call it like EC web server one.

105
00:05:48.981 --> 00:05:52.463
如果我们移动到不同的主机，我们就不再是 AWS 中的 EC2 实例了，所以
And if we move to a different host, we're
no longer on EC2 instances from AWS, so

106
00:05:52.463 --> 00:05:54.134
这名字就没道理了
the name doesn't make sense anymore.

107
00:05:54.134 --> 00:05:57.033
那么五年之后，人们就像这样意味着什么 ?
So five years later,
people are like what does this mean?

108
00:05:57.033 --> 00:05:59.749
没人知道我们的名字已经消失了
And then nobody knows anymore
cuz the naming is lost.

109
00:05:59.749 --> 00:06:01.180
命名很困难。
Naming is hard.

110
00:06:01.180 --> 00:06:03.846
完全是正切的
Totally, totally a tangent there.

111
00:06:03.846 --> 00:06:05.038
但没关系
But that's okay.

112
00:06:05.038 --> 00:06:06.360
我们可以制造一个小滴。
And we can create a droplet.

113
00:06:06.360 --> 00:06:10.033
我们不需要备份，因为我们没有做任何重要的事情。
We don't need backups because, well,
we're not doing anything that critical.

114
00:06:10.033 --> 00:06:13.163
但是，总体而言，您要一直备份您的数据。
But, in general,
you wanna back up your data all the time.

115
00:06:13.163 --> 00:06:16.197
Stuff 出错，数据中心发生火灾，黑客入侵。
Stuff goes wrong,
data centers have fires, hackers get in.

116
00:06:16.197 --> 00:06:17.934
你几乎总是想备份你的数据
You almost always wanna back up your data.

117
00:06:17.934 --> 00:06:19.374
但在这件事上我们会没事的
But in this case, we'll be okay.

118
00:06:19.374 --> 00:06:21.033
我要去创造那个小滴
I'm just gonna create that droplet.

119
00:06:23.600 --> 00:06:24.716
>> Jem Young: 它在建筑。
&gt;&gt; Jem Young: And it's building.

120
00:06:26.103 --> 00:06:27.644
>> 演讲者 3: 您是否启用了备份?
&gt;&gt; Speaker 3: Did you enable backups?

121
00:06:27.644 --> 00:06:30.194
>> Jem Young: 不，除非你真的想
&gt;&gt; Jem Young: No,
not unless you really want to but

122
00:06:30.194 --> 00:06:34.233
这会给你带来更多的钱没有特别的理由
it'll just cost you more money for
no particular reason.

123
00:06:34.233 --> 00:06:35.391
现在它正在建筑中
And now it's building.

124
00:06:39.709 --> 00:06:44.011
> > Jem Young: Cool，我们该起床了
&gt;&gt; Jem Young: Cool,
we should be up and running now.

125
00:06:45.978 --> 00:06:48.324
>> Jem Young: 因此，我已为服务器分配了 IP 地址，因此
&gt;&gt; Jem Young: So I've been assigned
IP address to my server so

126
00:06:48.324 --> 00:06:49.564
我能联系到它
that I can connect to it.

127
00:06:49.564 --> 00:06:51.524
所以我要去打拷贝
So I'm gonna hit copy.

128
00:06:51.524 --> 00:06:54.935
这里是个很棒的小指令或者你可以只强调
It's a nice little command there or
you can just highlight but

129
00:06:54.935 --> 00:06:57.045
其实是不好的
it actually doesn't work that well.

130
00:06:57.045 --> 00:06:58.050
那就复制吧
So copy that.
