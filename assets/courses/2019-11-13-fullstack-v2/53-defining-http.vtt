WEBVTT

1
00:00:00.000 --> 00:00:03.354
>> Jem Young: 在此部分中，我们将讨论 HTTP。
&gt;&gt; Jem Young: In this section,
we're gonna discuss HTTP.

2
00:00:03.354 --> 00:00:06.988
它可能是其他非安全的部分之一
And it's probably one of the longer
sections of other than security,

3
00:00:06.988 --> 00:00:09.898
因为安全的重要性和 HTTP 是重要的。
because security's important and
HTTP is important.

4
00:00:09.898 --> 00:00:14.484
作为 UI 开发者，我们对底层的挖掘程度感到惊讶。
It's surprising as UI developers how
little we kind of dig into the underlying

5
00:00:14.484 --> 00:00:18.032
把我们所有的密码都转换了
protocol of the thing that's
transforming all of our code.

6
00:00:18.032 --> 00:00:22.373
我的意思是， [ LAUGH] ，我们确实写了超文本标记。
I mean, [LAUGH] we literally
write hypertext markup.

7
00:00:22.373 --> 00:00:23.702
这就是其中的一个方法
And this is one of the ways, or

8
00:00:23.702 --> 00:00:26.754
这就是超文本传输通过因特网传输的方式。
this is the way that hypertext gets
transferred over the Internet.

9
00:00:26.754 --> 00:00:30.376
但我们从来没花过很多时间思考它是如何工作的
But we never spent a lot of time
thinking about, how it's working or

10
00:00:30.376 --> 00:00:31.464
为什么要工作
why it's working?

11
00:00:31.464 --> 00:00:34.572
在我看来要成为一个优秀的全职工程师
So in my mind,
to be a good full stack engineer,

12
00:00:34.572 --> 00:00:37.621
你得明白这个协议是什么
you have to understand
what this protocol is.

13
00:00:37.621 --> 00:00:41.597
就像所有在 P 中结束的其他东西一样，这意味着它是一种协议。
And like everything else that ends in a P,
it means it's a protocol.

14
00:00:41.597 --> 00:00:45.140
[ LAUGH]  是什么 ?
[LAUGH] So what is HTTP?

15
00:00:48.094 --> 00:00:49.206
>> Jem Young: 没有错误的答案。
&gt;&gt; Jem Young: There are no wrong answers.

16
00:00:49.206 --> 00:00:51.612
如果你还没弄明白就扔个东西吧
If you haven't figured that out,
just throw something out, yeah?

17
00:00:51.612 --> 00:00:53.851
>> 扬声器 2: 超文本传输协议。
&gt;&gt; Speaker 2: HyperText
Transport Protocol.

18
00:00:53.851 --> 00:00:54.661
>> Jem Young: 这很好。
&gt;&gt; Jem Young: That's pretty good.

19
00:00:54.661 --> 00:00:55.651
你看到下一张幻灯片了吗
Did you look at the next slide?

20
00:00:55.651 --> 00:00:56.893
>> 扬声器 2: 否。
&gt;&gt; Speaker 2: No.

21
00:00:56.893 --> 00:00:59.607
>> Jem Young: 对，对，你是绝对正确的。
&gt;&gt; Jem Young: Right, yes,
you're absolutely right.

22
00:00:59.607 --> 00:01:00.625
超文本传输协议。
HyperText Transport Protocol.

23
00:01:00.625 --> 00:01:04.959
但除了这个定义之外，它到底是什么呢 ?
But what is it really,
besides that definition?

24
00:01:07.176 --> 00:01:08.063
>> 演讲者 2: 这是一个标准吗 ?
&gt;&gt; Speaker 2: It's a standard?

25
00:01:08.063 --> 00:01:10.739
>> Jem Young: 是的，这东西携带着我们的代码。
&gt;&gt; Jem Young: Yeah,
it's this thing that carries our code.

26
00:01:10.739 --> 00:01:15.468
它定义代码如何从服务器移动到客户端。
It defines how the code moves
from the server to our client.

27
00:01:15.468 --> 00:01:17.019
更重要的是如何解密
And how to decrypt that, more importantly.

28
00:01:17.019 --> 00:01:21.003
HTTP 通过 TCP 运行。
And HTTP runs over TCP.

29
00:01:21.003 --> 00:01:26.448
我们谈了一些关于 TCP 和 IP 以及 UDP 和所有 P的问题。
And we talked a bit about TCP and
IP and UDP and all the Ps.

30
00:01:26.448 --> 00:01:28.114
但我们最关心的是 HTTP 。
But HTTP's really the one
we care most about.

31
00:01:28.114 --> 00:01:30.885
因为作为一个 UI 工程师，甚至是一个完整的堆工程师，
Because as a UI engineer, or
even a full stack engineer,

32
00:01:30.885 --> 00:01:32.691
你不关心 TCP的事
you don't care that much about TCP.

33
00:01:32.691 --> 00:01:33.757
你知道的
You know that it works.

34
00:01:33.757 --> 00:01:37.564
你知道有个标准组织他们都同意如果我送你
You know that there's a standards body,
that they all agreed that if I send you

35
00:01:37.564 --> 00:01:41.545
信息包与 TCP 协议，传输控制协议，
a packet of information with the TCP
protocol, Transmission Control Protocol,

36
00:01:41.545 --> 00:01:42.945
你知道怎么破译的
you know how to decode that.

37
00:01:42.945 --> 00:01:46.849
但 HTTP 是真的，数据是由它组成的。
But HTTP is really,
it's what the data is comprised of.

38
00:01:46.849 --> 00:01:51.033
因此，包会合并 HTTP 数据，然后对其进行解码。
So a packet wraps HTTP data and
then we decode that.

39
00:01:51.033 --> 00:01:53.441
浏览器都知道解码，他们会说这种共同语言。
And the browser's all know to decode,
they speak this common language.

40
00:01:55.151 --> 00:01:58.491
>> Jem Young: HTTP 的模型是请求和响应，类似于 TCP。
&gt;&gt; Jem Young: The model for HTTP is
request and response, much like TCP.

41
00:01:58.491 --> 00:02:03.149
像我们所说的 UDP 或 ICMP一样
Versus something,
like we talked about UDP or ICMP.

42
00:02:03.149 --> 00:02:05.745
这些只是广播的信息包。
Those are just packets
that are broadcasting.

43
00:02:05.745 --> 00:02:07.703
这一问题涉及到请求和响应。
This one cares about request and response.

44
00:02:07.703 --> 00:02:09.965
这是整个 HTTP 模型。
That's the entire model of HTTP.

45
00:02:09.965 --> 00:02:10.947
请求和响应。
The request and response.

46
00:02:10.947 --> 00:02:11.860
我们会去调查的
And we'll dig into that.

47
00:02:13.725 --> 00:02:16.144
>> Jem Young: HTTP 请求实际上类似于以下内容 :
&gt;&gt; Jem Young: An HTTP request
actually looks something like this,

48
00:02:16.144 --> 00:02:17.491
以及数据有效内容。
along with the data payload.

49
00:02:17.491 --> 00:02:20.727
但主要的是，我们看到这里有几个关键部分。
But mainly, we see a few key parts here.

50
00:02:20.727 --> 00:02:23.033
我们看到 GET ，所以方法。
We see the GET, so the method.

51
00:02:23.033 --> 00:02:24.741
然后我们看到一堆头头
Then we see a bunch of headers.

52
00:02:24.741 --> 00:02:27.448
然后就会有一个数据有效载荷。
And then somewhere in there
will be a data payload.

53
00:02:27.448 --> 00:02:31.073
如果我给你看这个并且没有告诉你是 HTTP的，这很有趣。
And it's funny if I showed you this and
didn't tell you it was HTTP.

54
00:02:31.073 --> 00:02:35.366
您可能猜测这是 HTTP 图的外观。
You could probably guess this is
what an HTTP diagram looks like.

55
00:02:35.366 --> 00:02:37.139
但我们从不考虑
But we never think about,

56
00:02:37.139 --> 00:02:41.183
实际结构的细分情况是什么 ?
what is the breakdown of
the actual structure what HTTP is?
