WEBVTT

1
00:00:00.024 --> 00:00:02.950
> > Jem Young: 好的，这样很好，像我说的，
&gt;&gt; Jem Young: All right, so
that that's fine and nginx, like I said,

2
00:00:02.950 --> 00:00:03.830
是一个网络服务器
it's a web server.

3
00:00:03.830 --> 00:00:07.580
因此，我们可以为静态 HTML 页面和所有这些页面提供服务。
So we can serve static HTML pages and
all that.

4
00:00:07.580 --> 00:00:10.029
但在某个时候，我们想创造复杂的应用。
But at some point,
we wanna create complex applications.

5
00:00:10.029 --> 00:00:12.050
具有不同路径的应用程序，
Applications that have different paths,

6
00:00:12.050 --> 00:00:14.869
不同的方法可以连接到数据库
different ways of maybe
connect to a databas.

7
00:00:14.869 --> 00:00:19.089
只是编码，更像我们每天所做的。
Just coding, kind of more akin
to what we do in our day to day.

8
00:00:19.089 --> 00:00:21.649
为此，我们将创建应用程序服务器。
To do that,
we're gonna create an application server.

9
00:00:21.649 --> 00:00:22.850
这与 Web 服务器不同。
And that's different from a web server.

10
00:00:22.850 --> 00:00:24.750
而网络服务器只接收了大量的网络流量
And the web server's just
receiving a lot of web traffic and

11
00:00:24.750 --> 00:00:25.780
做点什么
doing something with it.

12
00:00:25.780 --> 00:00:27.929
应用程序正在执行所有重型提升。
The application is doing
all the heavy lifting.

13
00:00:27.929 --> 00:00:30.870
对于我们今天的申请，我们将使用 NodeJS。
For our application today
we're gonna use NodeJS.

14
00:00:30.870 --> 00:00:36.130
我的网站是用 Python 构建的，但我今天不会走那条路。
My website is built in Python using Flask,
but I won't go that route today.

15
00:00:36.130 --> 00:00:40.460
让我们做 NodeJS ，因为我们大多数人都知道 JavaScript ，我在假定。
Let's do NodeJS because, well,
most of us know JavaScript, I'm assuming.

16
00:00:40.460 --> 00:00:43.328
如果不是的话 NodeJS 有很多课程
If not,
there's a lot of courses on NodeJS,

17
00:00:43.328 --> 00:00:45.750
将添加到将来的链接。
will add links to those in the future.

18
00:00:45.750 --> 00:00:49.115
我们将更多地了解到 NodeJS 的详细信息，但对于
And we'll get more into more
details into NodeJS but for

19
00:00:49.115 --> 00:00:51.844
现在我想创造最基本的网络服务器
now I wanna create
the most basic web server.

20
00:00:53.728 --> 00:00:54.863
>> Jem Young: 什么是 NodeJS ?
&gt;&gt; Jem Young: What is NodeJS though?

21
00:00:54.863 --> 00:00:58.119
有人能告诉我是什么吗
Can someone tell me just like what it is?

22
00:00:58.119 --> 00:00:59.840
这只是一个简单的问题
And it seems like a really
simple question but

23
00:00:59.840 --> 00:01:04.510
如果你问一个简单的问题，那就是运行 JavaScript的事情。
if you're asked a simple questions you're,
it's that thing that runs JavaScript.

24
00:01:04.510 --> 00:01:06.049
NodeJS 是什么 ?
What is NodeJS?

25
00:01:06.049 --> 00:01:08.039
>> 扬声器 2: 服务器端的 JavaScript 环境。
&gt;&gt; Speaker 2: JavaScript environment for
the server side.

26
00:01:10.444 --> 00:01:13.400
> > Jem Young: 我会接受的，对，对，对。
&gt;&gt; Jem Young: I'll take that,
yeah, yeah, that's right.

27
00:01:15.289 --> 00:01:17.930
>> 扬声器 2: 是，但它也是对
&gt;&gt; Speaker 2: Yeah, that but
it's also a binding for

28
00:01:19.810 --> 00:01:23.599
Google 为 Chrome 开发的 V8 引擎。
the V8 engine that Google developed for
Chrome.

29
00:01:23.599 --> 00:01:26.105
>> Jem Young: 是。 >> 扬声器 2: 它是最重要的
&gt;&gt; Jem Young: Yes.
&gt;&gt; Speaker 2: It's one of the most

30
00:01:26.105 --> 00:01:31.740
性能刚刚好的 LLVM 编译器
performant just-in-time
LLVM compilers out there.

31
00:01:31.740 --> 00:01:34.729
> > Jem Young: 是的，每个人都有正确的比特，
&gt;&gt; Jem Young: Yes, everybody had
bits of it correct and altogether,

32
00:01:34.729 --> 00:01:38.719
我们都是对的很好这就是我们在一个过程中的原因
we're all right, which is good,
that's why we're in a course.

33
00:01:38.719 --> 00:01:43.810
好的，它本质上只是一个在 V8 之上运行的 JavaScript 引擎，
All right, it is essentially just a
JavaScript engine that runs on top of V8,

34
00:01:43.810 --> 00:01:46.039
是 Google Chrome开发的
which is developed by Google Chrome.

35
00:01:46.039 --> 00:01:48.527
通常是几个版本，所以
It's usually a few versions behind, so

36
00:01:48.527 --> 00:01:52.414
Chrome 具有节点尚未实际支持的功能。
Chrome has features that Node
doesn't actually support yet.

37
00:01:52.414 --> 00:01:56.963
但是本质上它是一个单线程的 JavaScript 引擎
But essentially, it's a single threaded
JavaScript engine that executes

38
00:01:56.963 --> 00:02:00.530
JavaScript 并且可以处理请求，即它。
JavaScript and
can handle requests, that's it.

39
00:02:00.530 --> 00:02:03.540
这条线索就像我们工程师一样
The single thread in this is
something that as we engineers,

40
00:02:03.540 --> 00:02:05.849
我们可能不喜欢
we probably don't appreciate.

41
00:02:05.849 --> 00:02:07.769
所以这意味着如果请求来了
So, that means if a request comes in,

42
00:02:07.769 --> 00:02:13.000
它可以非常非常好的处理异步的事情。
it can handle things being
asynchronous very very very well.

43
00:02:13.000 --> 00:02:17.710
所以我们可以用这个 JavaScript λ，当然是请求块。
So much so that we can use that JavaScript
Lambda, of course request on block.

44
00:02:17.710 --> 00:02:21.199
但在 Python 或 Java 或大多数其他语言请求块中。
But in Python or Java or
in most other languages request block.

45
00:02:21.199 --> 00:02:24.974
所以这意味着如果我对一个非常大的图像文件发出一个请求
So that means if I make a single
request for a very large image file,

46
00:02:24.974 --> 00:02:29.439
这是我不知道伦敦要花时间的
and that's a fetching from, I don't know,
London, it's gonna take time.

47
00:02:29.439 --> 00:02:32.868
这意味着任何其他的请求都会被阻止
And that means every other request
that comes in is gonna get blocked,

48
00:02:32.868 --> 00:02:36.075
等待其他请求解决与运行节点的问题。
waiting for the other requests to
resolve versus running a node.

49
00:02:36.075 --> 00:02:38.953
节点是异步的，它说，嘿，我想得到这个图像。
Node is asynchronous, it says,
hey, I wanna get this image.

50
00:02:38.953 --> 00:02:41.100
我要去拿这幅照片
I'm gonna go get this image,
in the meantime,

51
00:02:41.100 --> 00:02:43.259
我要去处理其他的要求
I'm gonna go handle all
these other requests.

52
00:02:43.259 --> 00:02:45.783
这就是所谓的事件循环，不断地不停地运行
And that's what's known as the event loop,
is just constantly running over and

53
00:02:45.783 --> 00:02:47.021
说，有什么事吗 ?
saying like, is there anything to do?

54
00:02:47.021 --> 00:02:48.550
有什么事吗
Is there anything to do?

55
00:02:48.550 --> 00:02:50.259
那是一个很强大的概念
That's a really powerful concept,

56
00:02:50.259 --> 00:02:52.500
你可能不喜欢用语言来交换语言
you probably won't appreciate
it to switch languages.

57
00:02:52.500 --> 00:02:54.620
你是在处理拦截请求
And you're you're dealing
with blocking requests,

58
00:02:54.620 --> 00:02:56.430
你得处理好申请钥匙之类的事
you have to handle request keys and
things like that.

59
00:02:56.430 --> 00:02:58.409
而节点仅能无缝地处理这一问题。
Whereas Node just handles that seamlessly.

60
00:02:58.409 --> 00:03:01.789
这就是为什么节点通常是我在创建 Web 服务器时的首选项
That's why Node is usually my go-to when
it comes to creating a web server cuz

61
00:03:01.789 --> 00:03:03.810
它只会处理好的事情
it just handles things really well.

62
00:03:03.810 --> 00:03:04.842
最快吗 ?
Is it the fastest?

63
00:03:04.842 --> 00:03:10.079
不， Java 通常是更快的，或者 Go 或 Rust。
No, Java is generally gonna be faster or
Go or Rust.

64
00:03:10.079 --> 00:03:12.919
或者很多其他语言，不是最快的语言。
Or many other languages,
it's not the fastest languages.

65
00:03:12.919 --> 00:03:16.931
但如果有人想讨论你的问题
But if anybody wants to nerd debate you,
which people do,

66
00:03:16.931 --> 00:03:19.670
就是有我需要的人
just be, Node does what I need.

67
00:03:19.670 --> 00:03:24.219
大部分时间你都不会被引擎的速度限制
And most of the time you're not gonna
be limited by the speed of the engine

68
00:03:24.219 --> 00:03:24.789
正在运行。
that is running.

69
00:03:24.789 --> 00:03:29.024
就像你写的代码一样
It's gonna be something else,
like the code you wrote.

70
00:03:29.024 --> 00:03:31.872
你会在某个时候听到关于什么更好特别是
You will at some point gonna hear
a debate about what's better, especially,

71
00:03:31.872 --> 00:03:34.939
如果你能和 C 开发者说话之类的话
if you get to talking to C developers and
things like that.

72
00:03:34.939 --> 00:03:36.844
对不起，这是一个正切，让我们安装节点。
Sorry, that was a tangent,
let's install Node.

73
00:03:36.844 --> 00:03:40.289
[LAUGH] 我们将与 npm一起安装 NodeJS 。
[LAUGH] We're gonna install
NodeJS along with npm.

74
00:03:41.629 --> 00:03:47.231
因此， sudo 适合安装 nodejs npm，因此请同时安装这两个节点。
So sudo apt install nodejs npm, so
install both of them at the same time.

75
00:03:51.747 --> 00:03:54.377
> > Jem Young: 所以我要继续做这个， sudo apt。
&gt;&gt; Jem Young: So I'm gonna go ahead and
do that, sudo apt.

76
00:04:00.348 --> 00:04:01.118
>> Jem Young: 是。
&gt;&gt; Jem Young: Yes.

77
00:04:04.764 --> 00:04:08.447
>> Jem Young: 如果您想知道为什么我说 NodeJS 而不是 Node，
&gt;&gt; Jem Young: If you're wondering
why I said NodeJS and not Node,

78
00:04:08.447 --> 00:04:12.909
节点最初是 Linux 的无线应用。
Node originally was a radio
application for Linux.

79
00:04:12.909 --> 00:04:16.259
在最长的时间内，如果已安装节点，那么它将安装此应用程序。
For the longest time, if you installed
Node it would install this application.

80
00:04:16.259 --> 00:04:18.504
但人们对这一问题感到非常不满
But people got really annoyed
at it because they're,

81
00:04:18.504 --> 00:04:20.812
使用此与使用节点的人数对比的人员吗 ?
who uses this versus the number
of people that use Node?

82
00:04:20.812 --> 00:04:24.028
现在只是 NodeJS ，如果我输入节点，它就会接管，
So now it's just NodeJS and
it's gonna take over, if I type in Node,

83
00:04:24.028 --> 00:04:25.089
它会用这个
it's gonna use that.

84
00:04:25.089 --> 00:04:28.170
在先前版本的类中，实际上有一个符号链接它。
In the previous version of the class
actually had a symbolic link it back.

85
00:04:28.170 --> 00:04:30.750
因此，我将符号链接指向实际的 NodeJS
So I make a symbolic link
to the actual NodeJS so

86
00:04:30.750 --> 00:04:34.529
节点等于节点 JS，而不是每次输入 NodeJS 。
Node equals Node JS,
rather than typing NodeJS every time.

87
00:04:34.529 --> 00:04:38.850
内德 - 特里维娅没必要知道但我们在 JavaScript里有了很长的路
Nerd trivia, didn't need to know, but
we've come a long way in JavaScript.

88
00:04:38.850 --> 00:04:44.300
有一段时间，节点被向下看，是 JavaScript 的后端。
There's a time when Node was looked down,
it's, JavaScript's for the back end.

89
00:04:44.300 --> 00:04:46.850
现在 Netflix 运行，我不会完全在节点上说，但是
Now Netflix runs,
I won't say entirely on Node, but

90
00:04:46.850 --> 00:04:48.649
主要在节点和 JavaScript上运行。
runs largely on Node and JavaScript.

91
00:04:49.959 --> 00:04:53.797
其他部分以多种语言编写，大部分是 Java。
With other parts written in
various languages, mostly Java.

92
00:04:53.797 --> 00:04:56.137
但别让任何人给你胡说胡话
But don't let anybody give you crap,
if they talk about Node,

93
00:04:56.137 --> 00:04:57.120
这就是我要说的
that's all I'm saying.

94
00:04:58.360 --> 00:05:01.389
我们已经完成了我也要安装 Git
And we're done, and
I'm gonna install Git, too.

95
00:05:01.389 --> 00:05:05.120
它通常是在缺省情况下安装的，但这是将来的自我证明。
It's usually installed by default,
but this is future-proofing ourselves.

96
00:05:05.120 --> 00:05:11.949
哎呀，忘了 sudo， sudo apt install git.
So oops, forgot the sudo,
sudo apt install git.

97
00:05:11.949 --> 00:05:14.358
它通常已经安装了但就用在箱子里
And it's usually installed already,
but just in case,

98
00:05:14.358 --> 00:05:15.872
我们会确保 Git 的安装
we'll make sure Git is installed.

99
00:05:18.300 --> 00:05:21.709
>> Jem Young: 因此，只需为我们的版本控制安装 git 。
&gt;&gt; Jem Young: So just apt install git for
our version in control.
