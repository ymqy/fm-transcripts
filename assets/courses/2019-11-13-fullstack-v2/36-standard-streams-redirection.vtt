WEBVTT

1
00:00:00.000 --> 00:00:06.512
>> Jem Young: 第 1 部，这就是我的封面，有点这个。
&gt;&gt; Jem Young: Parts 1s, this is where I
cover bit of this, a little bit of that.

2
00:00:06.512 --> 00:00:08.894
我认为你应该拥有的一般知识
Just general knowledge that
I think you should have.

3
00:00:08.894 --> 00:00:13.691
但今天运行您的应用程序并不一定是核心。
But it's not necessarily core to
running your application today.

4
00:00:13.691 --> 00:00:16.733
我想说的第一件事就是标准流
The first thing I wanna talk
about it standard streams.

5
00:00:16.733 --> 00:00:21.085
有人知道标准和标准是什么，这听起来很熟悉吗 ?
Anybody know what standard in and standard
out, does that sound familiar to anybody?

6
00:00:21.085 --> 00:00:22.312
是啊你可能已经习惯了
Yeah, you've probably used it.

7
00:00:22.312 --> 00:00:24.614
如果你写了任何 Unix 或
If you've written any sort of Unix or

8
00:00:24.614 --> 00:00:27.743
即使是一个音符应用程序也要用这些东西
even a note application
you use these things too.

9
00:00:27.743 --> 00:00:30.038
有些东西叫做标准流
There's things called standard streams,

10
00:00:30.038 --> 00:00:34.142
标准输出就是标准输出你会看到它写的
they're standard output which is stdout
that you'll see it written as that.

11
00:00:34.142 --> 00:00:39.576
标准输入标准输入，标准错误，标准错误。
Standard input stdin, and
there's standard error, stderr.

12
00:00:39.576 --> 00:00:45.237
这很棒，因为这是几乎所有 Unix 应用程序的标准。
It's great because this is the standard
for almost all Unix applications.

13
00:00:45.237 --> 00:00:47.773
有个叫 POSIX 标准的东西
There's something called
the POSIX standards, which,

14
00:00:47.773 --> 00:00:50.420
我不记得 POSIX 是什么意思，但它在音符中。
I don't remember what POSIX means,
but it's in the notes.

15
00:00:50.420 --> 00:00:52.713
便携式操作系统接口。
Portable Operating System Interface.

16
00:00:52.713 --> 00:00:57.279
所以它是一群人决定了，嘿，如果你在写任何一种 Unix
So it's a group of people that decided,
hey, if you're writing any sort of Unix

17
00:00:57.279 --> 00:01:01.713
应用程序，应该有某种标准的输入输出或
application, there should be some sort
of standard way that inputs come out or

18
00:01:01.713 --> 00:01:04.757
输入输入，输出超时并处理错误。
inputs go in, outputs go out and
errors are handled.

19
00:01:04.757 --> 00:01:08.465
你已经在电话里看到过如果你写了任何
And you've already seen in call backs
everywhere if you've written any sort of

20
00:01:08.465 --> 00:01:12.445
节点应用程序，您会看到它总是发送给它，发送出去，发送到错误或
node application, you'll see it's always
send it in, send it out, send to error or

21
00:01:12.445 --> 00:01:13.912
那些线条里的东西
something along those lines.

22
00:01:13.912 --> 00:01:17.984
这真是太棒了它突出了我们昨天说的
And it is really awesome cuz it highlights
what we're talking about yesterday how

23
00:01:17.984 --> 00:01:19.581
互联网是建立在信任之上的
the Internet is build on trust.

24
00:01:19.581 --> 00:01:22.073
信任与合作是惊人的。
And trust and
cooperation which is amazing.

25
00:01:22.073 --> 00:01:27.099
尤其是在当今世界，我们都不同意什么是最棒的。
Especially in today's world where we all
disagree about what is the best burritos.

26
00:01:27.099 --> 00:01:30.114
在世界上最适合居住的地方是这样的。
And where's the best place to live
in the world, things like that.

27
00:01:30.114 --> 00:01:33.266
但你知道我们都同意一切都应该有标准
But you know what we all agree that
everything should have standard out,

28
00:01:33.266 --> 00:01:34.722
标准误差和标准误差。
standard in and standard error.

29
00:01:34.722 --> 00:01:36.781
它让程序真的很容易阅读。
And it makes programs really,
really readable.

30
00:01:36.781 --> 00:01:42.111
这意味着任何一个我正在运行的 Unix 程序，我可以管输入，
That means any sort of Unix program
that I'm running, I can pipe the input,

31
00:01:42.111 --> 00:01:46.629
我可以管输出，我可以把错误管到标准的地方。
I can pipe the output,
I can pipe the errors to a standard place.

32
00:01:46.629 --> 00:01:49.381
他们都处理好了我知道
And they're all handled and
I know that for

33
00:01:49.381 --> 00:01:53.138
他们都能分享这个共同的API
a fact it's gonna work cuz they
all share this common API.

34
00:01:53.138 --> 00:01:56.115
我们用这些输入，输出和
And what we do with these inputs,
outputs, and

35
00:01:56.115 --> 00:01:59.176
错误是使用被调用的重定向。
errors is we use something
called redirection.

36
00:01:59.176 --> 00:02:02.524
你昨天看到我用管工的时候
You saw yesterday when I
use the pipe operator.

37
00:02:02.524 --> 00:02:06.411
所以管道运营商就是从标准出来的一个很好的例子，
So the pipe operator is a good
example of reading from standard out,

38
00:02:06.411 --> 00:02:10.723
因为我做了什么然后所有的输出都给我管了
because I run something and then all
the output I pipe it to something else.

39
00:02:10.723 --> 00:02:13.259
让我们举个例子。
Let's do an example of that.

40
00:02:13.259 --> 00:02:17.634
如果您尚未登录，请转至您的服务器，然后让我清除此问题。
Just go and log in to your server if
you're not already on, let me clear this.

41
00:02:22.474 --> 00:02:23.759
>> Jem Young: 我想跑什么 ?
&gt;&gt; Jem Young: And what do I wanna run?

42
00:02:23.759 --> 00:02:26.875
我说， ps，什么都没发生。
I'll say, ps, nothing happening.

43
00:02:26.875 --> 00:02:29.331
Ps 正给我展示我的跑步过程
Ps is just showing me
my running processes.

44
00:02:29.331 --> 00:02:32.361
但如果我想把这个写在档案里我可以说
But if I wanna write this to a file,
I can say ps.

45
00:02:32.361 --> 00:02:34.587
其实我也会去查的
And actually I'll do a search for it.

46
00:02:34.587 --> 00:02:39.281
然后我就会去找你了然后我就会说巴什
And then I'll do grep to do a search,
and I'll say bash.

47
00:02:39.281 --> 00:02:41.716
就这样了 所以它把所有的输出都拿走了
That was it.
So it took all the output from ps, and

48
00:02:41.716 --> 00:02:44.274
然后就把它写在 grep program上了。
then it just wrote it
over to the grep program.

49
00:02:44.274 --> 00:02:47.347
然后格雷普会对它做一个普通的正则表达式。
And then grep is gonna do a general
regular expression on it.

50
00:02:47.347 --> 00:02:52.007
然后它只搜索我想要的一切并返回线路。
And then it just searches over
everything I want and returns the line.

51
00:02:52.007 --> 00:02:53.698
这是重定向运算符。
That's a redirection operator.

52
00:02:53.698 --> 00:02:55.802
所以我们可以用重定向做很多事情。
So we could do lots of
things with redirection.

53
00:02:55.802 --> 00:02:58.179
我们可以编写文件，可以从文件中读取。
We can write the files,
we can read from files.

54
00:02:58.179 --> 00:03:01.831
我可以做一些非常复杂的事情，你喜欢的不是真正的代码。
I can do some really complex things
that you're like that's not real code.

55
00:03:01.831 --> 00:03:03.775
这一点都没道理
This doesn't make any sense.

56
00:03:03.775 --> 00:03:06.177
但我可以
But it does, I can.

57
00:03:06.177 --> 00:03:09.640
但我决定离开这些例子因为他们看起来很酷
But I decided to leave out those examples
because they're just cool looking and

58
00:03:09.640 --> 00:03:10.787
他们其实也不知道
they don't actually do.

59
00:03:10.787 --> 00:03:14.896
白天他们不会帮你所以我今天不想走那条路
They won't help you in your day to day, so
I don't wanna go down that route today.

60
00:03:14.896 --> 00:03:19.676
你见过的另一个是错误运算符
Another one you've seen
is the error operator or

61
00:03:19.676 --> 00:03:25.049
大于运算符或箭头 ( 如果您愿意的话 ) 。
the greater than operator,
or that arrow if you will.

62
00:03:25.049 --> 00:03:26.189
它将写入文件。
It will write to a file.

63
00:03:26.189 --> 00:03:28.843
所以不要把它从一边打字
So rather than typing it
from one side to the other,

64
00:03:28.843 --> 00:03:31.390
只要你愿意就能把它写在档案里
it's just gonna write to the file,
if you want.

65
00:03:31.390 --> 00:03:34.819
这对于写入日志文件非常有用。
This is super useful for
writing to a log file.

66
00:03:34.819 --> 00:03:37.026
因此，我将创建一个假日志文件。
So I'll create a fake log file.

67
00:03:37.026 --> 00:03:38.852
所以我会说点什么
So I'll say touch.

68
00:03:38.852 --> 00:03:43.457
实际上，让我确定我在我的主目录里。
Actually, let me make sure
that I'm in my home directory.

69
00:03:43.457 --> 00:03:44.584
把它关了
Close that out.

70
00:03:44.584 --> 00:03:50.115
我要说的是 CD 和清晰的
I'll say CD and clear.

71
00:03:50.115 --> 00:03:53.251
我说 PS 其实
And I'll say PS- Actually,

72
00:03:53.251 --> 00:03:57.772
请允许我清除锁定，触摸 test.log。
let me clear locks out, touch test.log.

73
00:03:57.772 --> 00:04:04.442
我说 PS 我去写 test.log
I'll say PS and I'll write to test.log.

74
00:04:04.442 --> 00:04:08.877
什么都没发生因为输出被写在了
And nothing happened because the output
was being gobbled up by writing to this

75
00:04:08.877 --> 00:04:09.490
日志文件。
log file.

76
00:04:09.490 --> 00:04:15.250
但如果我们保存了日志文件，我们发现它只写了所有输出。
But if we kept the log file,
we see that it just wrote all that output.

77
00:04:15.250 --> 00:04:19.103
现在很多时候你要做的就是输出
Now a lot of times what you're gonna
do is you're gonna take output and

78
00:04:19.103 --> 00:04:21.144
你会把它写在档案里
you're gonna write it to log files.

79
00:04:21.144 --> 00:04:25.625
最伟大的是，您输入所有常用的日志文件。
And what's great about that is you type
all the log files that are commonplace.

80
00:04:25.625 --> 00:04:29.809
您是否记得通常保存日志文件的位置 ?
Do you remember where the log
files are kept generally?

81
00:04:29.809 --> 00:04:31.454
没人响铃吗
Nobody ringing a bell?

82
00:04:31.454 --> 00:04:32.201
没事的没事的
It's okay.

83
00:04:32.201 --> 00:04:36.367
斜杠 " 斜杠 " 日志是您始终保留所有
Slash bar slash log is the economical
place where you always keep all of

84
00:04:36.367 --> 00:04:37.076
您的日志。
your logs.

85
00:04:37.076 --> 00:04:37.971
所以我们可以说
So we can say,

86
00:04:37.971 --> 00:04:42.692
实际上让我们来看看我们的日志，因为我们在一段时间内没有看到过这个。
actually let's take at our log since
we haven't looked at that in a while.

87
00:04:45.490 --> 00:04:46.372
>> Jem Young: 您将看到所有日志
&gt;&gt; Jem Young: You see all the logs for

88
00:04:46.372 --> 00:04:48.887
你的所有服务总是写在同一个地方
all your services are always gonna
be written in the same place.

89
00:04:48.887 --> 00:04:52.331
所以，一般来说，如果你在做任何记录，你总是想把它放在这里。
So generally if you're doing any sort
of logging you always want put it here.

90
00:04:52.331 --> 00:04:55.795
你看到有一个引擎的 x 日志，上面有一个日志。
So you see there's an engine x log,
there's off the log.

91
00:04:55.795 --> 00:05:01.891
让我看看我能不能
Let me see if I can sudo ls and

92
00:05:01.891 --> 00:05:05.079
/var/log。
/var/log.

93
00:05:05.079 --> 00:05:07.898
是啊它什么都没给我看
Yeah, it didn't show me anything new.

94
00:05:07.898 --> 00:05:11.208
但输出的文字可能是比较常见的
But the writing to output is probably
one of the more common ones, and

95
00:05:11.208 --> 00:05:12.244
还有一个管道
also the piping one.

96
00:05:12.244 --> 00:05:16.038
如果你见过那些擅长 Unix 的人
If you've ever seen people who
are good at their Unix fu,

97
00:05:16.038 --> 00:05:21.507
你会发现他们从 AWK 和他们的废话中就会把事情链过去
you'll see they just chain things over and
over as they go from AWK and their crap.

98
00:05:21.507 --> 00:05:25.163
他们可以运行 Perl 脚本在命令行上做些神奇的事情
They might run a Perl script and they'll
do just amazing things on the command line

99
00:05:25.163 --> 00:05:28.663
使用重定向运算符，因为我们知道有一个标准
using the redirection operator, all
because we know that there's a standard

100
00:05:28.663 --> 00:05:30.533
in， standard out和 standard 错误。
in, standard out, and standard error.

101
00:05:30.533 --> 00:05:35.249
我很喜欢这个，因为它展示了一个普通的 API的力量。
And I really love this because it shows
the power of just having a common API.

102
00:05:35.249 --> 00:05:39.509
当你有这个完善的模式时，你可以做这些神奇的事情。
And when you have this well established
pattern, you can do such amazing things.

103
00:05:39.509 --> 00:05:42.262
现在如果你想把问题写在一个标准的档案里
Now if you wanna just, the problems
writing to a standard out file,

104
00:05:42.262 --> 00:05:44.213
它会把你以前的一切都搞砸了
it's gonna blow away
whatever you had before.

105
00:05:44.213 --> 00:05:50.189
所以如果你想参加它，你只会做翻倍，大于，看。
So if you want to attend it,
you just do the double, greater than, see.

106
00:05:50.189 --> 00:05:50.978
是啊我有个笑话
Yeah, I got I got a chuckle.

107
00:05:50.978 --> 00:05:51.485
谢谢你 Zach
Thank you, Zach.

108
00:05:51.485 --> 00:05:53.004
我很感激
I appreciate that.

109
00:05:53.004 --> 00:05:55.838
如果你想从星期六开始读我们就用另一种方式
If you want to read from Saturday and
we just type it the other way.

110
00:05:55.838 --> 00:06:00.237
因此，我们可以将文件输入到我们正在尝试运行的程序中。
So we can take a file and type it into
the the program that we're trying to run.

111
00:06:00.237 --> 00:06:03.540
标准误差有点不同，两者都比。
And standard error is a little different,
it's the two with greater than.

112
00:06:03.540 --> 00:06:05.997
这有点奇怪但我觉得他们真的是从符号中跑出来的
It's a little weird, but
I think they ran out of symbols honestly.

113
00:06:05.997 --> 00:06:08.019
我想这就是为什么它是两个
I think that's why it's a two.

114
00:06:08.019 --> 00:06:10.918
很奇怪的事实你可能看到了
Weird useless fact, but you might see it.

115
00:06:10.918 --> 00:06:14.249
如果我想写一个标准，其实是一个大的。
If I wanna write a standard out,
it's actually a one greater than.

116
00:06:14.249 --> 00:06:17.639
如果我想从标准中读到，它实际上是一个零。
And if I wanna read from standard in,
it's actually a zero less than.

117
00:06:17.639 --> 00:06:20.619
但我没放进去，卡兹你不会经常看到那种格式。
But I didn't put that in there,
cuz you won't see that format that often.

118
00:06:20.619 --> 00:06:24.497
但如果你是这样的话我真的很喜欢洗劫
But in case you're like, man, I really
love full sack I want to look things up.

119
00:06:24.497 --> 00:06:26.562
您可能会在某处看到该语法，并且
You might see that syntax somewhere, and

120
00:06:26.562 --> 00:06:28.870
那么这两个大于标准误差。
then the two greater
than the standard error.

121
00:06:28.870 --> 00:06:30.697
所以实际上是 0， 1和 2。
So it's actually 0, 1, 2.

122
00:06:30.697 --> 00:06:35.716
所以它的标准是标准的，标准的误差。
So its standard in,
standard out, standard error.

123
00:06:35.716 --> 00:06:38.901
现在，你看到两个大的感觉就更有意义了吗 ?
Makes a little more sense now now
you see the two greater than?

124
00:06:38.901 --> 00:06:40.072
是吗 ?
Yeah?

125
00:06:40.072 --> 00:06:41.045
好吧好吧
All right.

126
00:06:41.045 --> 00:06:44.788
有些头我知道它早我就直接跳下去了
Some heads, I know it's early and
I just jumped right in.

127
00:06:44.788 --> 00:06:48.634
别担心我要从这里开始慢慢地下去
Don't worry, I'm gonna start off here and
we're gonna slowly ramp down and

128
00:06:48.634 --> 00:06:51.827
然后我要向你撒谎然后我们要回去了
then I'm gonna lie to you, and
then we're gonna ramp back up and

129
00:06:51.827 --> 00:06:53.442
那将是一个伟大的日子
then it's gonna be a great day.

130
00:06:53.442 --> 00:06:55.329
好吧这到底是干什么的
All right, so what does this do?

131
00:06:55.329 --> 00:06:59.158
只是为了向任何人展示任何一个人吗
Just to show the anybody, anybody at all?

132
00:06:59.158 --> 00:07:00.122
什么事萨姆
Yes, Sam?

133
00:07:00.122 --> 00:07:01.579
> > Sam: 接受 foo 并将其写入条形图。
&gt;&gt; Sam: Takes foo and it writes it to bar.

134
00:07:01.579 --> 00:07:02.548
>> Jem Young: 完全正确。
&gt;&gt; Jem Young: Exactly.

135
00:07:02.548 --> 00:07:05.156
你会经常看到这个的
You'll see this quite often though, so

136
00:07:05.156 --> 00:07:08.925
稍后在这个过程中可能就会做这样的事情。
later in the course will
probably do something like this.

137
00:07:08.925 --> 00:07:10.589
我想让你熟悉语法
And I want you to be
familiar with the syntax.

138
00:07:10.589 --> 00:07:15.699
但如果你需要参考的话这很直接
But if you ever need to reference,
this is pretty straightforward, hopefully
