WEBVTT

1
00:00:00.300 --> 00:00:01.889
>> Jem Young: 最终项目。
&gt;&gt; Jem Young: The final projects.

2
00:00:01.889 --> 00:00:05.370
要做到这一点，我们需要了解 Web 套接字是什么。
To do that we need to understand
what a web socket is.

3
00:00:05.370 --> 00:00:06.078
什么是 Web 套接字 ?
What is a web socket?

4
00:00:06.078 --> 00:00:07.320
嗯。
Yes.

5
00:00:07.320 --> 00:00:13.160
>> 扬声器 2: 您可以从客户机使用它来打开长期连接，
&gt;&gt; Speaker 2: You can use it from the
client to open a long-lived connection,

6
00:00:13.160 --> 00:00:16.199
你只会把讯息传达给服务器
and you just push messages back and
forth, client to server.

7
00:00:16.199 --> 00:00:18.309
这是两分多路复用
It's two way and multiplexed.

8
00:00:20.170 --> 00:00:22.870
> > Jem Young: 我不知道你是否读了这条指令，但这完全正确。
&gt;&gt; Jem Young: I don't know if you read
the instruction, but that's exactly right.

9
00:00:22.870 --> 00:00:26.423
这是客户机与服务器之间的持久双向连接。
It's a persistent bidirectional
connection between the client and server.

10
00:00:26.423 --> 00:00:30.600
不像目前使用 TCP的现状
So unlike the current status quo with TCP,

11
00:00:30.600 --> 00:00:32.904
每个连接都需要握手
which every single connection
requires that handshake.

12
00:00:32.904 --> 00:00:36.479
通过已移交的 Web 套接字，您只能建立一个连接
With the handed off web socket,
you only make one connection and

13
00:00:36.479 --> 00:00:38.329
它把它保持在隧道里
it keeps that alive through a tunnel.

14
00:00:38.329 --> 00:00:41.280
因此，客户机可以发送数据，服务器可以发送数据，并且
So that way the client can send data,
the server can send data, and

15
00:00:41.280 --> 00:00:44.869
它比 TCP 连接快得多，即使它通过 TCP 运行也是如此。
it's much faster than a TCP connection,
even though it runs over TCP.

16
00:00:44.869 --> 00:00:47.579
故事的道德性是网络套接字是这个持续存在的
The moral of the story,
is the web socket is this persistent

17
00:00:47.579 --> 00:00:50.250
可以发送流数据的连接。
connection that we can
send streaming data.

18
00:00:50.250 --> 00:00:53.979
在聊天的时候用的很多都是你知道的
It's used a lot in chat applications
things like that where you know for

19
00:00:53.979 --> 00:00:56.189
客户机将保持与服务器的通信。
a fact the client is gonna keep
communicating with the server.

20
00:00:56.189 --> 00:00:58.950
所以，为什么不只是保持联系呢 ?
So why not just keep that connection open.

21
00:00:58.950 --> 00:01:03.531
我们以前做的就是这个长轮询的概念，打开了一个 TCP
What we used to do was this concept
of long polling, which was open a TCP

22
00:01:03.531 --> 00:01:08.400
连接，并使其保持活动状态，并不断地不断地推送数据。
connection, and just keep it alive and
just keep pushing data back and forth.

23
00:01:08.400 --> 00:01:12.349
如果客户机保持打开状态，服务器将保持打开状态。
And that way the client stays open,
the server stays open.

24
00:01:13.480 --> 00:01:15.730
没问题但这和网站的效率不一样
It's fine, but
it's not as efficient as web sockets.
