WEBVTT

1
00:00:00.660 --> 00:00:02.819
>> Jem Young: 因此，让我们继续设置我们的注释应用程序。
&gt;&gt; Jem Young: So let's go in to
set up our note application.

2
00:00:04.530 --> 00:00:07.349
我们想做的第一件事就是要改变对 /var/www 的所有权
The first thing we wanna do is we
wanna change ownership of the /var/www

3
00:00:07.349 --> 00:00:08.080
目录。
directory.

4
00:00:08.080 --> 00:00:11.429
所以我们不需要在任何时候都要做一个文件或者修改它。
So we don't have to sudo whenever
we wanna make a file or modify it.

5
00:00:11.429 --> 00:00:14.380
我们只是想用它来做
We just wanna be able
to access it at will.

6
00:00:14.380 --> 00:00:16.370
所以我们要用它的命令
So we're gonna use the chown command.

7
00:00:16.370 --> 00:00:20.149
它是 c-h - own ，更改所有权。
Which is c-h-own, change ownership.

8
00:00:20.149 --> 00:00:21.320
挺有道理的
Kind of makes sense.

9
00:00:21.320 --> 00:00:23.379
-R 表示它是递归的。
The -R means it's recursive.

10
00:00:23.379 --> 00:00:30.018
因此，它将更改 /var www 目录，以拥有下面的所有内容。
So, it's gonna change that /var www
directory to own everything below that.

11
00:00:30.018 --> 00:00:32.829
对不起，我要澄清。
Sorry, I should clarify.

12
00:00:32.829 --> 00:00:35.762
这是您的用户名，实际上不是 $USER。
This is your user name,
not actually $USER.

13
00:00:35.762 --> 00:00:37.994
不等待，该值为 $USER:$USER，抱歉。
Wait no, this one is $USER:$USER, sorry.

14
00:00:37.994 --> 00:00:41.582
[LAUGH] 我将稍后解决此问题，但它是 $USER:$USER。
[LAUGH] I'm gonna fix this later but
it is $USER:$USER.

15
00:00:41.582 --> 00:00:43.170
也可以说正义运动正义运动。
Or you could also say JEM JEM.

16
00:00:43.170 --> 00:00:46.100
这并不重要，但我们正在改变这个目录的所有权。
It doesn't really matter, but we're
changing the ownership of that directory.

17
00:00:46.100 --> 00:00:48.890
所以我现在要做的是确保我的笔记正确无误。
So I'm gonna go to do that now to
make sure I have my notes correct.

18
00:00:50.560 --> 00:00:57.250
很清楚我要说苏多 chown -R
So clear, and I'm gonna say sudo chown -R.

19
00:00:58.729 --> 00:01:00.210
我认为我可以使用 $USER。
I think I can use $USER.

20
00:01:00.210 --> 00:01:01.475
实际上让我看看
Actually, let me just check.

21
00:01:01.475 --> 00:01:05.945
请回传 $USER。
Say, echo $USER.

22
00:01:05.945 --> 00:01:08.000
好的好的
Yes, so that works.

23
00:01:08.000 --> 00:01:09.894
我们可以使用 $USER。 您可以使用实际的命令。
We can use $USER.
You can use your actual command.

24
00:01:14.024 --> 00:01:16.397
>> Jem Young: 但我只会使用 $USER 看起来更酷。
&gt;&gt; Jem Young: But
I will use $USER just cuz it looks cooler.

25
00:01:16.397 --> 00:01:23.099
Chown -R $USER:$USER。
Chown -R $USER:$USER.

26
00:01:23.099 --> 00:01:24.572
然后我们说 /var var.
And we say /var var.

27
00:01:29.864 --> 00:01:31.890
>> Jem Young: /www 酷。
&gt;&gt; Jem Young: /www cool.

28
00:01:33.777 --> 00:01:36.277
>> Jem Young: 许可权问题可能是蹬性的。
&gt;&gt; Jem Young: The permissions
thing may seem pedantic.

29
00:01:36.277 --> 00:01:37.189
何必呢
Why bother?

30
00:01:37.189 --> 00:01:41.120
但这意味着，每当您创建文件时，您就不必再执行该文件。
But this means every time you create
a file you don't have to sudo it anymore.

31
00:01:41.120 --> 00:01:42.350
你不是说苏多六
You don't say sudo VI.

32
00:01:42.350 --> 00:01:45.700
您只能说 VI ，因为目录现在归您所有。
You can just say VI because
the directory is now owned by you.

33
00:01:45.700 --> 00:01:47.444
这都是些小东西 [LAUGH ] 。
It's little things [LAUGH].

34
00:01:47.444 --> 00:01:51.439
多年的努力，我学到了，从长远来说，这让它变得容易一点。
Years of doing this I've learned this make
it a little bit easier in the long run.

35
00:01:52.670 --> 00:01:54.229
所以，让我们制作一个应用程序目录。
So let's make an application directory.

36
00:01:54.229 --> 00:01:59.441
因此 mkdir /var/www/app。
So mkdir /var/www/app.

37
00:01:59.441 --> 00:02:05.760
所以 mkdir /www/app，凉爽，
So mkdir /www/app, cool,

38
00:02:05.760 --> 00:02:12.847
我要把它变成这样
and I'm just gonna cd into that.

39
00:02:24.665 --> 00:02:26.377
>> Jem Young: 再一次，你可以随意调用它。
&gt;&gt; Jem Young: And again,
you're free to call it whatever you want.

40
00:02:26.377 --> 00:02:28.742
你可以称之为 Sweet New Application。
You can call it Sweet New Application.

41
00:02:28.742 --> 00:02:30.811
你可以叫它 Foo
You can call it Foo.

42
00:02:30.811 --> 00:02:33.312
这并不重要，但我只是为了简单的缘故，把它称为应用。
Doesn't really matter, but I'm calling
it app just for simplicity's sake.

43
00:02:36.211 --> 00:02:39.719
> > Jem Young: 然后我会在它上运行 git init ，所以它是init 。
&gt;&gt; Jem Young: And then I'm gonna
run git init on it, so git init.

44
00:02:39.719 --> 00:02:43.289
我现在就初始化一个空的 git 存储库。
I'm just gonna initialize
an empty git repository for now.

45
00:02:45.759 --> 00:02:47.189
好了到目前为止所有人都来了吗
All right, everybody with me so far?

46
00:02:48.870 --> 00:02:52.699
这可能是 UI 工程师通常来的地方
This is probably the part where
UI engineers generally come in,

47
00:02:52.699 --> 00:02:53.780
其实还有点进一步的
actually a little bit further.

48
00:02:53.780 --> 00:02:56.909
但你喜欢的地方好吧我知道该怎么做
But this the part where you're like,
okay, I know what to do from here.

49
00:02:56.909 --> 00:02:58.840
但这里是所有工作的地方
But getting here is
where all the work's in.

50
00:02:58.840 --> 00:03:01.150
通过这样做，我们就快到了。
And by doing it, we're almost there.

51
00:03:01.150 --> 00:03:03.340
我们几乎是堆的主人
We're almost masters of the stack.

52
00:03:04.460 --> 00:03:06.909
我有时会使用 && 。
I use the &amp;&amp; sometimes.

53
00:03:06.909 --> 00:03:10.909
这就意味着执行此命令，然后执行此命令。
That just means do this command and
then do this command.

54
00:03:10.909 --> 00:03:12.414
这是一种好的链接方式。
It's a good way of chaining things.

55
00:03:12.414 --> 00:03:15.915
我最喜欢做的就是拉它
One of my favorite ones to
do is probably git pull, so

56
00:03:15.915 --> 00:03:19.112
把它从神秘物上拉下来
git pull to pull down from mastery or
whatever.

57
00:03:19.112 --> 00:03:23.151
然后 &&和纱安装因为人们不断更新包
And then &amp;&amp;, and yarn install because
people are constantly updating packages

58
00:03:23.151 --> 00:03:26.129
当我拉一拉的时候它只会在一个命令中完成
when I do a pull and
it just does it all in one command.

59
00:03:26.129 --> 00:03:28.033
没必要 这是个不错的捷径
Not necessary.
It's a nice little shortcut to have.

60
00:03:32.776 --> 00:03:34.479
>> Jem Young: 如果需要，我们可以制作目录。
&gt;&gt; Jem Young: We can make
the directories if you want.

61
00:03:34.479 --> 00:03:38.554
我们今天不需要这样做，现在我们可以跳过它了。
We don't have to do that today and,
[SOUND] we can skip it for now.

62
00:03:38.554 --> 00:03:39.643
我们明天就需要它了
We'll need it for tomorrow.

63
00:03:39.643 --> 00:03:44.508
但是，如果需要，您可以创建目录， ui/js ui/html， ui/css。
But if you want, you can make directories,
ui/js ui/html, ui/css.

64
00:03:47.393 --> 00:03:50.599
> > Jem Young: 其实我现在就做，为什么不呢 ?
&gt;&gt; Jem Young: Actually,
I'll just do it now, cuz why not?

65
00:03:50.599 --> 00:03:51.575
太好了
So mdir.

66
00:04:02.723 --> 00:04:03.800
>> Jem Young: Ui/js。
&gt;&gt; Jem Young: Ui/js.

67
00:04:20.773 --> 00:04:23.379
>> Jem Young: 如果您想查看目录以查看其中的内容
&gt;&gt; Jem Young: And if you wanna check
a directory to see what's in it without

68
00:04:23.379 --> 00:04:26.047
实际上，你可以说，你可以说，目录名。
actually going in, you can just say ls,
the directory name.

69
00:04:26.047 --> 00:04:28.779
苏瑞告诉我目录在里面
So ls ui tells me
the directory's in there.

70
00:04:31.904 --> 00:04:36.100
>> Jem Young: Nice，现在我们要创建一个空文件。
&gt;&gt; Jem Young: Nice, so now we're
going to create just an empty file.

71
00:04:36.100 --> 00:04:39.990
我们可以把我的 app.js 保存好
We can save the I app.js which is fine but

72
00:04:39.990 --> 00:04:44.000
如果我们只想创建一个空白文件我们就用这个触摸指令
if we just want to create just a blank
file, we're gonna use the touch command.

73
00:04:44.000 --> 00:04:47.259
触摸只需要修改时间戳记，以防您想
Touch just modifies the time
stamp on it in case you wanna

74
00:04:47.259 --> 00:04:48.379
运行系统的搜索。
run a search of the system.

75
00:04:48.379 --> 00:04:52.802
说，过去一小时我修改过的文件是什么，所以请使用触摸。
Say, what were the files that I modified
in the past hour, so use touch.

76
00:04:52.802 --> 00:04:56.720
不经常使用，但是使用触摸的好处是只能触摸一个文件
Not used that often, but the benefit of
using touch is we can just touch a file

77
00:04:56.720 --> 00:04:57.980
它就会自动产生
and it just creates it automatically.

78
00:04:57.980 --> 00:05:00.459
这就像创建一个空文件的最激烈的方法。
It's like the laziest way
of creating an empty file.

79
00:05:00.459 --> 00:05:03.565
所以我要说的是 app.js
So I'm gonna say touch app.js.

80
00:05:07.944 --> 00:05:09.192
>> Jem Young: 还有 app-js。
&gt;&gt; Jem Young: And have an app-js.

81
00:05:09.192 --> 00:05:12.807
它比打字快得快多了
It's much faster than typing going VI and
then right quitting saving,

82
00:05:12.807 --> 00:05:14.081
只是有点捷径
just a little shortcut.

83
00:05:14.081 --> 00:05:18.329
接下来我们要做的事很多人都不知道
Next we're gonna do is something that
a lot of people don't know about,

84
00:05:18.329 --> 00:05:22.175
即使我们每天晚上可能使用 npm ，也就是 npm init 命令。
even though we probably use npm
every day is the npm init command.

85
00:05:25.339 --> 00:05:27.800
>> Jem Young: 请参阅 npm init 将设置节点模块。
&gt;&gt; Jem Young: See,
npm init will set up your node modules.

86
00:05:27.800 --> 00:05:29.180
它会设置您的包名。
It'll set up your package name.

87
00:05:29.180 --> 00:05:30.110
它会添加许可证。
It'll add a licence.

88
00:05:30.110 --> 00:05:31.930
它会自动为你做所有的事情
It'll do all the stuff for
you automatically.

89
00:05:31.930 --> 00:05:34.514
我要打这个电话应用没问题
So I'm gonna call this, app is fine.

90
00:05:34.514 --> 00:05:36.625
随你说吧
Call it whatever you want.

91
00:05:36.625 --> 00:05:42.992
版本精细，描述，完整堆栈前端或其他内容。
Version fine, description,
full stack front end or something.

92
00:05:46.199 --> 00:05:49.029
>> Jem Young: 入口点，应用程序 js，测试命令，还没有。
&gt;&gt; Jem Young: Entry point, app-js,
test command, don't have one yet.

93
00:05:49.029 --> 00:05:50.788
Git 存储库，还没有。
Git repository, don't have one yet.

94
00:05:50.788 --> 00:05:53.680
关键词，作者， Jem.
Keywords, author, Jem.

95
00:05:53.680 --> 00:05:57.569
许可证我们说 MIT 不重要
License, let's say MIT, doesn't matter.

96
00:05:57.569 --> 00:05:58.473
看起来好酷
Looks okay, cool.

97
00:06:02.781 --> 00:06:07.341
>> Jem Young: 现在是晚上的晚上，它为我创造了这个容器 .json ，
&gt;&gt; Jem Young: And now what npm did was
it created this package.json for me,

98
00:06:07.341 --> 00:06:08.589
这很不错
which is nice.

99
00:06:08.589 --> 00:06:10.050
这只是你的支架
It just scaffolds that out for you.

100
00:06:10.050 --> 00:06:12.490
这比手动创造所有这些东西要简单得多。
It's much easier than just manually
creating all these things.

101
00:06:12.490 --> 00:06:14.040
你必须记住语法和所有这些
You have to remember the syntax and
all that.

102
00:06:14.040 --> 00:06:17.889
Npm init 是一个很好的命令。
Npm init is a nice command.

103
00:06:17.889 --> 00:06:19.930
我们现在就安装 Express 。
Let's install Express now.

104
00:06:19.930 --> 00:06:25.970
Express 是基于节点的基于 JavaScript 的 Web 服务器。
Express is a node
JavaScript-based web server.

105
00:06:25.970 --> 00:06:27.089
它是最受欢迎的
It's one of the more popular ones.

106
00:06:27.089 --> 00:06:30.100
我认为它是受欢迎的，但是那里有很多选择。
I think it's waning in popularity,
but there's lots of options there.

107
00:06:30.100 --> 00:06:31.288
有乐乐
There's Happy.

108
00:06:31.288 --> 00:06:35.834
这是 Netflix 发明的
There's the one that Netflix invented.

109
00:06:35.834 --> 00:06:37.937
我不记得它现在叫什么了
I don't remember [LAUGH]
what it's called now.

110
00:06:37.937 --> 00:06:39.170
是我们用的
It's the one we use.

111
00:06:39.170 --> 00:06:40.310
我晚点再查
I'll look it up later.

112
00:06:40.310 --> 00:06:42.699
但最常见的可能是 Express 。
But Express is probably
the most common one.

113
00:06:42.699 --> 00:06:46.680
我试着选择你能轻易地用谷歌搜索的东西
I try to choose things that you can
Google search easily expressing this,

114
00:06:46.680 --> 00:06:49.430
Express 是最容易使用的。
and Express is the easiest one to use.

115
00:06:49.430 --> 00:06:52.980
现在，我们从使用应用程序切换到 npm ，因为我们正在使用节点模块。
So now, we switch from using app to
npm because we're using node modules.

116
00:06:52.980 --> 00:06:57.774
因此， npm i或 npm install express，我们将进行保存。
So, npm i, or npm install express,
and we're gonna save that.

117
00:07:05.641 --> 00:07:07.101
>> Jem Young: Express --保存。
&gt;&gt; Jem Young: Express --save.

118
00:07:12.206 --> 00:07:15.689
>> Jem Young: Cool，如果我们看看我们的 package.json，
&gt;&gt; Jem Young: Cool, and
if we check out our package.json,

119
00:07:15.689 --> 00:07:19.550
我们认为它是一种依赖的表达方式
we see it added as a dependency express.

120
00:07:19.550 --> 00:07:23.630
我所犯的一个常见错误是我忘记做了 -- 当我安装我的节点时
A common mistake I make all the time is I
forget to do --save when I install my node

121
00:07:23.630 --> 00:07:24.240
包。
packages.

122
00:07:24.240 --> 00:07:25.898
他们只安装了一次
So they're installed one time and

123
00:07:25.898 --> 00:07:29.279
然后每当我把它拉到另一台电脑的时候
then whenever I pull this repo to
another computer nothing's there.

124
00:07:29.279 --> 00:07:31.603
我想，为什么不工作呢，我忘了保存。
I'm like, why isn't stuff working,
cuz I forgot to save it.

125
00:07:31.603 --> 00:07:32.518
所以别忘了保存
So don't forget to save.

126
00:07:34.598 --> 00:07:36.949
>> Jem Young: 但现在，我们进入更熟悉的领域，
&gt;&gt; Jem Young: But now, we're getting
into more familiar territory that we're

127
00:07:36.949 --> 00:07:38.293
就更舒服些了
all a little bit more comfortable in.

128
00:07:38.293 --> 00:07:41.566
因此，让我们编辑 app.js 文件。
So, let's edit that app.js file.

129
00:07:41.566 --> 00:07:48.762
我们要做的就是创建一个骨头表达服务器
And what we're gonna do is we're gonna
create a bare-bones express server.

130
00:07:50.284 --> 00:07:52.651
> > Jem Young: 我们要做的正是我们以前所做的事情，
&gt;&gt; Jem Young: And it's gonna do
exactly what we were doing before,

131
00:07:52.651 --> 00:07:53.733
简单的 HP 服务器。
that simple HP server.

132
00:07:53.733 --> 00:07:58.259
我本可以使用节点模块 HTTP 构建到节点中。
I could've used the node module HTTP,
which is built into node.

133
00:07:59.370 --> 00:08:03.786
但因为我们使用 Express ，语法略有不同。
But because we're using Express,
the syntax is slightly different.

134
00:08:03.786 --> 00:08:08.685
我们使用 Express cusz 的时间比现在要快得多
We're using Express cuz we can build
on that later a lot faster than

135
00:08:08.685 --> 00:08:11.057
我们可以使用基本的 HTTP 服务器。
we can with a basic HTTP server.

136
00:08:11.057 --> 00:08:13.485
如果你懒不懒
And if you're lazy or not lazy.

137
00:08:13.485 --> 00:08:14.286
我不该这么说
I shouldn't say that.

138
00:08:14.286 --> 00:08:17.074
如果你有手抽筋或是厌倦打字
If you're getting hand cramps or
you just tired of typing,

139
00:08:17.074 --> 00:08:19.319
您可以转至该 URL 并仅复制并粘贴该 URL 。
you can go to this URL and
just copy and paste it.

140
00:08:19.319 --> 00:08:20.509
我会原谅你的
I will forgive you.

141
00:08:23.654 --> 00:08:24.440
>> 演讲者 2: 我想你缺少一个括号。
&gt;&gt; Speaker 2: I think you're
missing a parenthesis.

142
00:08:28.610 --> 00:08:29.810
>> Jem Young: 我缺少括号。
&gt;&gt; Jem Young: I am missing a parenthesis.

143
00:08:29.810 --> 00:08:31.019
你只复制并粘贴 [LAUGH]。
You just copy and paste [LAUGH].

144
00:08:31.019 --> 00:08:32.179
我会解决的
I'll fix it.

145
00:08:32.179 --> 00:08:33.029
其实我能修吗
Actually can I fix it?

146
00:08:34.269 --> 00:08:35.519
我想这是个截图
I think it's a screenshot.

147
00:08:36.919 --> 00:08:38.480
[ SOUND] 仅复制并粘贴 [LAUGH]。
[SOUND] just copy and paste it [LAUGH].
