WEBVTT

1
00:00:00.320 --> 00:00:03.496
> > Jem Young: 我的大学教授，我最喜欢的教授，博士
&gt;&gt; Jem Young: My professor in college,
my favorite professor, Dr.

2
00:00:03.496 --> 00:00:06.089
大卫 - 吉布森来自我的大学
David Gibson, from my university.

3
00:00:06.089 --> 00:00:11.400
他曾经告诉我 90% 的软件工程师
He once told me that 90% of what
you do as a software engineer

4
00:00:11.400 --> 00:00:15.240
正在将事物写入数据库并从数据库中读取内容。
is writing things into a database and
reading things out of a database.

5
00:00:15.240 --> 00:00:17.318
做了很多年的软件工程师
And having been a software engineer for
many years,

6
00:00:17.318 --> 00:00:19.359
我知道 [ LAUGH] 是绝对正确的。
I know that [LAUGH] is absolutely true.

7
00:00:19.359 --> 00:00:22.390
当你仔细想想你的工作是什么的时候
When you think about what your job
really is, it's mostly reading stuff and

8
00:00:22.390 --> 00:00:24.320
把东西从数据库里写出来
writing stuff out of a database.

9
00:00:24.320 --> 00:00:27.500
尤其是在 UI 工程师和网络开发人员的情况下，我们没有给出很多想法
But especially as UI engineers and web
developers, we don't give a lot of thought

10
00:00:27.500 --> 00:00:33.710
这数据是如何被拯救的，在哪里，它应该在哪里生活。
to how that data is getting saved, where
it's going, where it should even live.

11
00:00:34.770 --> 00:00:38.700
所以当我们谈到保存数据时，最简单的是什么，
So when we talk about saving data,
what's the easiest,

12
00:00:38.700 --> 00:00:41.520
最简单的拯救方法吗
simplest way of saving something?

13
00:00:41.520 --> 00:00:44.540
是否在一段时间内持久保存 ?
Persisting it over time?

14
00:00:44.540 --> 00:00:45.387
>> Studt1: 将其写入文件?
&gt;&gt; Student1: Write it to a file?

15
00:00:45.387 --> 00:00:47.350
>> Jem Young: 一个文件， [LAUGH] 。
&gt;&gt; Jem Young: A file, [LAUGH] yeah.

16
00:00:47.350 --> 00:00:51.009
文件是在某个位置保存某些数据的最简单方法。
A file is the simplest way of
saving some data somewhere.

17
00:00:52.170 --> 00:00:54.969
使用文件有什么问题 ?
What's the problem with using a file?

18
00:00:54.969 --> 00:00:56.740
我们为什么不能把一切都保存在档案里
Why can't we just save
everything to a file?

19
00:00:58.289 --> 00:01:01.722
>> Student2: 读和写的开销。
&gt;&gt; Student2: There's overhead
on reading and writing.

20
00:01:01.722 --> 00:01:03.090
数据的管理也很困难。
And it's hard to manage the data.

21
00:01:04.780 --> 00:01:06.909
>> Jem Young: 是的，但还有一点，为什么数据很难管理 ?
&gt;&gt; Jem Young: Yeah, but a bit more,
why is it hard to manage the data?

22
00:01:06.909 --> 00:01:12.700
>> Student3: Cuz 未按您可能需要的方式进行组织。
&gt;&gt; Student3: Cuz it's not organized
the way that you might need it.

23
00:01:12.700 --> 00:01:14.376
>> Jem Young: 是的，我们可以解决这个问题。
&gt;&gt; Jem Young: Yeah,
we could fix that, though.

24
00:01:14.376 --> 00:01:16.010
那是绝对正确的
That's absolutely right.

25
00:01:16.010 --> 00:01:20.310
但我们可以组织数据，以它对我们有意义的方式进行保存。
But we can organize the data and save it
in such a way that it makes sense to us.

26
00:01:20.310 --> 00:01:21.289
出什么事了
What's the problem?

27
00:01:21.289 --> 00:01:26.019
>> Student3: 您可能只需要几页中的一个字。
&gt;&gt; Student3: You might only need
one word out of several pages.

28
00:01:26.019 --> 00:01:32.569
您必须阅读整个文件才能获得该词的访问权。
And you have to read the entire file in
order to get access to that one word.

29
00:01:32.569 --> 00:01:35.090
>> Jem Young: 是的，文件未被优化为在中间读，
&gt;&gt; Jem Young: Yeah, files are not
optimized to be read in the middle,

30
00:01:35.090 --> 00:01:36.629
从一开始就结束了
in the beginning, and the end.

31
00:01:36.629 --> 00:01:38.719
我们可以但他们不是为了这个而建的
We can, but they're not built for that.

32
00:01:38.719 --> 00:01:40.700
按我们说的速度
And at the speed we're talking about,

33
00:01:40.700 --> 00:01:43.710
我们每天都在谈论数十亿的交易
we're talking about billions
of transactions a day.

34
00:01:43.710 --> 00:01:45.950
我们需要一些最优化的方法来做到这一点。
We need something that's
optimized to do that.

35
00:01:45.950 --> 00:01:49.879
但我想用纯平的纯文本文件来表达最大的问题
But I'd say the biggest problem with
using just a plain, pure-flat file for

36
00:01:49.879 --> 00:01:52.650
保存数据不是便携的
saving data, it's not portable.

37
00:01:52.650 --> 00:01:53.802
它只会在一台服务器上生存
It's only gonna live on one server.

38
00:01:53.802 --> 00:01:57.579
我们说我有十个服务器，我们都是同时写一个文件吗 ?
And let's say I have ten servers, do we
all write to one file at the same time?

39
00:01:57.579 --> 00:02:02.501
这很困难，因为写文件需要写硬盘，
That would be hard, because writing to
a file requires writing to a hard disk,

40
00:02:02.501 --> 00:02:07.510
而硬盘就像是，不像，它是最慢的缓存级别。
and hard disk is like, not like,
it's the slowest level of caching.

41
00:02:07.510 --> 00:02:10.455
如果您认为将数据写入作为持久数据的某种高速缓存，
And if you think of writing data as
some sort of caching as persisting data,

42
00:02:10.455 --> 00:02:12.961
会有你的 CPU 缓存最快的
there's gonna be your CPU cache
that's gonna be the fastest.

43
00:02:12.961 --> 00:02:15.250
你会有你的记忆缓存
You're gonna have your memory cache.

44
00:02:15.250 --> 00:02:17.530
你会有其他的缓存层
You're gonna have other layers of caching.

45
00:02:17.530 --> 00:02:19.289
最慢的是硬盘高速缓存
And the slowest is gonna
be a hard drive cache.

46
00:02:19.289 --> 00:02:21.639
所以从档案里写得很慢
So writing from a file is gonna be slow.

47
00:02:21.639 --> 00:02:26.829
而且，在成千上万的服务器上持续存在这一点，它是不可扩展的。
And also, persisting that across thousands
of servers, it's just not scalable.

48
00:02:26.829 --> 00:02:30.659
因此，我们需要专门为其构建的某种数据平台
So we need some sort of data platform
that is built specifically for

49
00:02:30.659 --> 00:02:33.079
保存数据和信息。
saving data and information.

50
00:02:34.110 --> 00:02:36.569
这就是为什么发明数据库的原因。
That's why the database was invented.

51
00:02:36.569 --> 00:02:40.545
它为我们提供了一种结构化的方式来保存数据，从而使其可读和
It gives us a structured way of saving
data in such a way that it's readable and

52
00:02:40.545 --> 00:02:42.319
所有各方都可写。
writable by all parties.

53
00:02:42.319 --> 00:02:44.550
这才是合理的
And it just makes sense.

54
00:02:44.550 --> 00:02:48.420
当你在说大数据的时候，我们就会说数据太字节了，
When you're talking big data, so
we're talking petabytes of data,

55
00:02:48.420 --> 00:02:51.729
您必须以可查询的方式来构造该数据。
you have to structure that data
in a way that it's queryable.

56
00:02:51.729 --> 00:02:56.170
我们不能把东西保存在一个硬盘里，希望它能有效。
We can't just save things to a hard drive
somewhere, and hopefully, it works.

57
00:02:56.170 --> 00:02:56.930
希望我能对它进行查询。
And hopefully, I can run queries on it.

58
00:02:56.930 --> 00:03:00.060
你得在某种意义上做到这一点
You have to do it in
a way that makes sense.
