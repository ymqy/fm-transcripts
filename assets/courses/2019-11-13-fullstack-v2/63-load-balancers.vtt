WEBVTT

1
00:00:00.000 --> 00:00:03.544
>> Jem Young: 好的，我们讨论了集装箱和
&gt;&gt; Jem Young: All right,
we talked about containers and

2
00:00:03.544 --> 00:00:07.392
编排和弹性云计算。
orchestration and elastic cloud computing.

3
00:00:07.392 --> 00:00:11.090
有人提醒我弹性云计算是什么。
Someone remind me what
elastic cloud computing is.

4
00:00:11.090 --> 00:00:12.746
听起来就像这样
It's what it sounds like.

5
00:00:12.746 --> 00:00:13.448
>> Jem Young: 是。
&gt;&gt; Jem Young: Yes.

6
00:00:13.448 --> 00:00:17.004
>> 演讲者 2: 根据您随时间的需求展开和签订合同。
&gt;&gt; Speaker 2: It expands and
contracts based on your needs over time.

7
00:00:17.004 --> 00:00:18.937
>> Jem Young: 没错，这对
&gt;&gt; Jem Young: Exactly,
and it's useful for,

8
00:00:18.937 --> 00:00:23.501
我想我所举的例子是在节假日期间，有很多的流动。
I think the example I gave was during
the holidays there's a lot of streaming.

9
00:00:23.501 --> 00:00:25.435
另一个例子是 " 前端大师" 。
Another example would be Frontend Masters.

10
00:00:25.435 --> 00:00:28.867
午夜可能没有很多人在看，所以
At midnight, there might not be
a lot of people watching, so

11
00:00:28.867 --> 00:00:31.239
他们可以减少一些资源
they can take down some of the resources.

12
00:00:31.239 --> 00:00:34.737
白天，当更多的人在看的时候，他们把他们带回来。
And during the day, when more people
are watching, they bring them back up.

13
00:00:34.737 --> 00:00:38.381
但我们用一个概念来了解服务器的负载
But we do that with a concept of
knowing the load of the servers and

14
00:00:38.381 --> 00:00:42.582
然后说，哎，这个东西是 90% 的负荷。
then measuring that and saying like,
hey, this thing is at 90% load.

15
00:00:42.582 --> 00:00:44.545
我们得去别的地方
We need to route traffic somewhere else.

16
00:00:44.545 --> 00:00:48.213
或者我们有 10% 的负荷，实际上我们不需要这些服务器。
Or we're at 10% load,
we actually don't need these servers.

17
00:00:48.213 --> 00:00:52.459
但是负载均衡器是将所有流量路由到相应集群的路由。
But a load balancer is what routes all
the traffic to the appropriate cluster.

18
00:00:52.459 --> 00:00:56.911
它是你不考虑的事情直到你有了规模
And it's something that you don't
think about until you're at scale,

19
00:00:56.911 --> 00:00:58.890
当你有两个服务器的时候
when you have even two servers.

20
00:00:58.890 --> 00:01:00.256
我们将为一个示例使用两个服务器。
We'll take two servers for an example.

21
00:01:00.256 --> 00:01:03.732
一个服务器可能会得到所有流量，因为这就是
One server might get all the traffic
because that's just the way

22
00:01:03.732 --> 00:01:05.545
交通会被改道
the traffic's getting routed.

23
00:01:05.545 --> 00:01:07.972
然后另一个服务器就没做任何事了
And then the other server,
it's just not doing anything.

24
00:01:07.972 --> 00:01:09.774
只是在浪费循环
It's just wasting cycles.

25
00:01:09.774 --> 00:01:12.810
但运行 90% 负载的问题是速度较慢。
But the problem with running
a 90% load is that's a bit slow.

26
00:01:12.810 --> 00:01:15.930
而另一个服务器却没有做任何事情。
Whereas, the other server
is not doing anything.

27
00:01:15.930 --> 00:01:18.253
这就是负载均衡器的概念。
That's where the concept of
a load balancer comes in.

28
00:01:18.253 --> 00:01:22.599
它确保在所有服务器之间均匀分割流量。
It makes sure that traffic is split
evenly between all of your servers.

29
00:01:22.599 --> 00:01:25.328
如果你有一万台服务器就不重要了
Cuz it doesn't matter if
you have 10,000 servers,

30
00:01:25.328 --> 00:01:29.123
如果他们三个都在做这些他们其他人什么都没做
if three of them are doing all the work,
the rest of them aren't doing anything.

31
00:01:30.310 --> 00:01:33.519
>> Jem Young: 负载均衡器使用称为调度算法的概念。
&gt;&gt; Jem Young: Load balancers work with
a concept called a scheduling algorithm.

32
00:01:33.519 --> 00:01:39.930
我知道，这听起来很无聊，但对我来说，这是最有趣的部分。
I know, this sounds dull but this, to me,
is some of the most interesting parts.

33
00:01:39.930 --> 00:01:43.358
好吧，你觉得这些调度算法是什么呢 ?
All right, what do you think some
of these scheduling algorithms do?

34
00:01:43.358 --> 00:01:45.457
他们的名字叫
They're kinda in the name.

35
00:01:45.457 --> 00:01:48.191
IP 散列有点棘手所以我不知道
The IP Hashing is a little tricky so
I don't.

36
00:01:48.191 --> 00:01:52.150
如果你有 10 台服务器我就有个请求了
So think if you had ten servers and
I have a request coming in.

37
00:01:52.150 --> 00:01:55.411
负载均衡器如何确定要运行哪个服务器 ?
How does the load balancer
determine which server it goes to?

38
00:01:55.411 --> 00:01:58.186
这是调度算法的操作。
That's what a scheduling algorithm does.

39
00:01:58.186 --> 00:01:59.918
那你觉得罗宾会怎么做
So, what do you think Round Robin does?

40
00:02:01.736 --> 00:02:04.006
>> 扬声器 3: 转至序列中的下一个。
&gt;&gt; Speaker 3: Just goes to
the next one in the sequence.

41
00:02:04.006 --> 00:02:06.500
>> Jem Young: 完全正确，
&gt;&gt; Jem Young: Exactly,
that's exactly right,

42
00:02:06.500 --> 00:02:11.415
这是大多数负载均衡器的缺省负载均衡器策略。
that's the default load balancer
strategy for most load balancers.

43
00:02:11.415 --> 00:02:14.056
还有 IP 散列，将 IP 散列化。
There's also IP Hashing,
which hashes your IP.

44
00:02:14.056 --> 00:02:17.625
这意味着它通过散列算法来运行
That means it runs it
through a hashing algorithm,

45
00:02:17.625 --> 00:02:23.280
将其转换为一组字符，然后与另一组 IP 匹配。
converts it to a set of characters, then
matches that against a other set of IPs.

46
00:02:23.280 --> 00:02:27.163
因此 IP 散列的好处是保证您可以访问同一服务器
So the benefit of IP Hashing is that
you're guaranteed to go to the same server

47
00:02:27.163 --> 00:02:29.389
每次都是基于您的 IP 地址。
every time based on what
your IP address is.

48
00:02:29.389 --> 00:02:31.331
也有随机的
There's also just random.

49
00:02:31.331 --> 00:02:33.890
有趣的是我们花了很多时间
And what's funny is we've
spent a lot of time and

50
00:02:33.890 --> 00:02:36.022
对调度算法的研究。
research into scheduling algorithms.

51
00:02:36.022 --> 00:02:38.728
但 Random Choice 其实挺好的
But Random Choice actually
works pretty well,

52
00:02:38.728 --> 00:02:41.099
随便选一个服务器就行了
just picking a random server works okay.

53
00:02:41.099 --> 00:02:43.620
这不是默认值，但实际上不是一个糟糕的策略。
It's not the default, but
it's actually not a bad strategy.

54
00:02:43.620 --> 00:02:45.754
也有最少的连接。
There's also Least Connections.

55
00:02:45.754 --> 00:02:49.060
因此，这意味着负载均衡器需要知道每个单值上的负载是什么
So that means the load balancer needs to
know what the load is on every single

56
00:02:49.060 --> 00:02:52.528
服务器，说该服务器有 20 个连接，这个有 10 个。
server and it's saying this server
has 20 connections, this one has 10.

57
00:02:52.528 --> 00:02:54.764
我要去那个有 10个的人
I'm gonna go to the one that has 10.

58
00:02:54.764 --> 00:02:55.912
还有载荷的概念。
There's also the concept of load.

59
00:02:55.912 --> 00:02:59.680
因此，如果您具有真正的过程密集型应用程序，那么
So if you have really process-intensive
applications, the server with

60
00:02:59.680 --> 00:03:03.710
最少量的量会得到更多的流量直到它平衡。
the least amount of load is gonna get more
of the traffic until it balances out.

61
00:03:03.710 --> 00:03:10.318
就像我说的， Round Robin 是大多数负载均衡器的默认值。
And like I said, Round Robin is
the default on most load balancers.

62
00:03:10.318 --> 00:03:18.159
现在让我们来看一下我们的服务器负载是什么，让我们来运行。
So let's take a look at what our server
load is right now, let's run top.

63
00:03:18.159 --> 00:03:21.360
>> Jem Young: 因此，我们可以说最上面的内容。
&gt;&gt; Jem Young: So
to run top, we can say top.

64
00:03:23.120 --> 00:03:27.859
>> Jem Young: 这让我们实时查看
&gt;&gt; Jem Young: And this gives us
a real-time view of what's happening on

65
00:03:27.859 --> 00:03:28.931
我们的服务器
our server.

66
00:03:28.931 --> 00:03:31.578
它告诉我们我们有多少线程
It tells us the amount of
threads we have available,

67
00:03:31.578 --> 00:03:34.359
也许我们只会有一个 CPU
which is probably gonna be
one cuz we only have one CPU.

68
00:03:34.359 --> 00:03:37.820
还有多少 RAM ，之类的，而且是实时的，所以
How much RAM there is, things like that,
and it's real-time, so

69
00:03:37.820 --> 00:03:39.354
一直都在跟踪
it's always keeping track.

70
00:03:39.354 --> 00:03:41.379
你不想一直跑这么大
You don't wanna run top all the time,

71
00:03:41.379 --> 00:03:44.042
因为顶部本身需要资源 [LAUGH] 才能运行。
because top itself takes
resources [LAUGH] to run.

72
00:03:44.042 --> 00:03:48.605
在我们的小服务器上如果你一直在运行
And on our single tiny little server,
if you're running top all the time,

73
00:03:48.605 --> 00:03:51.292
你会看到资源消耗上升
you'd see the resource consumption go up.

74
00:03:51.292 --> 00:03:54.014
但说实话这不是用户友好的问题
But honestly,
this isn't that user friendly.

75
00:03:54.014 --> 00:03:55.893
我可以分解它
I could break it down.

76
00:03:55.893 --> 00:04:00.885
我可以写一个剧本来提取告诉我的一切
I could write a script that extracts
out everything that this is telling me

77
00:04:00.885 --> 00:04:01.698
详细说明。
in detail.

78
00:04:01.698 --> 00:04:05.621
但让我们安装一些小一点的清洁装置。
But let's install something
a little bit cleaner.

79
00:04:05.621 --> 00:04:08.788
让我们安装 htop ，并从顶部退出 Q。
Let's install htop, and
to quit out of top, Q.

80
00:04:12.514 --> 00:04:17.567
>> Jem Young: 我们安装 htop，它有点 nicer。
&gt;&gt; Jem Young: And let's install htop,
which is a little bit nicer.

81
00:04:17.567 --> 00:04:19.737
因此， sudo apt 安装 htop。
So sudo apt install htop.

82
00:04:21.290 --> 00:04:24.268
>> Jem Young: 我想其实已经安装了。
&gt;&gt; Jem Young: And
it's actually already installed, I think.

83
00:04:24.268 --> 00:04:28.144
所以我们现在就跑吧
So let's just run htop now.

84
00:04:28.144 --> 00:04:30.112
太酷了
That's much cooler.

85
00:04:30.112 --> 00:04:33.350
这就是你能在电脑上留下的东西
This is one of those things you
can leave up on your computer and

86
00:04:33.350 --> 00:04:36.105
人们会走过来，他们在做什么 ?
people'll walk by like,
what are they working on?

87
00:04:36.105 --> 00:04:38.814
他们一定很聪明看看这些数字
They must be really smart,
look at all those numbers!

88
00:04:38.814 --> 00:04:42.781
但它与顶部完全相同，只是一个更漂亮的格式。
But it's really the same thing as top,
it's just in a prettier format.

89
00:04:42.781 --> 00:04:45.834
它告诉我们我们的 CPU 负载，我们的内存消耗。
And it tells us our CPU load,
our memory consumption.

90
00:04:45.834 --> 00:04:49.812
有趣的是，如果我们看看所有 CPU的使用情况， htop 在顶部附近。
Funny enough, if we look at what's using
up all the CPU, htop is near the top.

91
00:04:49.812 --> 00:04:53.391
[ LAUGH] 它用大量的 CPU 来运行这个
[LAUGH] It's using a lot
of CPU just to run this.

92
00:04:53.391 --> 00:04:57.838
如果我们转至 Fn+F7，等待，不需要树方式， F5。
And if we go to Fn+F7, wait,
no I want the tree mode, F5.

93
00:04:57.838 --> 00:05:01.494
记得我说 PM2 能帮助集群吗
Remember I said PM2 can
help with clustering?

94
00:05:01.494 --> 00:05:06.428
它会将您的节点的多个实例
It'll actually spin up multiple
instances of your Node

95
00:05:06.428 --> 00:05:11.678
向您申请，并将其添加到您。
application for you and it adds and
subtracts them for you.

96
00:05:11.678 --> 00:05:17.238
我们可以看到，这 PM2 是运行节点，但也在运行
We can see that here, that PM2 is running
node but it's also running all these

97
00:05:17.238 --> 00:05:23.069
节点的不同实例以及 PM2的所有这些不同实例。
different instances of node and there's
all these different instances of PM2.

98
00:05:23.069 --> 00:05:24.466
这就是树的模式。
So that's just tree mode.

99
00:05:25.985 --> 00:05:30.338
>> Jem Young: 但是，如果您的系统运行速度较慢，正在运行顶部或顶部
&gt;&gt; Jem Young: But really, if your system
is running slow, running top or htop is

100
00:05:30.338 --> 00:05:35.021
能把我的所有 CPU 周期都拉上来吗 ?
a good thing to pull up and say what
exactly is using up all my CPU cycles?

101
00:05:35.021 --> 00:05:38.865
麦肯等价会是，让我们说， " 活动监控器" 。
The Mac equivalent would be,
let's say, Activity Monitor.

102
00:05:38.865 --> 00:05:42.730
我可以在一个更清洁的 UI上为我的 Mac 启动 Activity Monitor 。
And I can pull up Activity Monitor for
my Mac in a much cleaner UI.

103
00:05:42.730 --> 00:05:47.718
我们可以看到 Activity Monitor 实际上是 [LAUGH] 使用我的所有 CPU ，但是
And we can see that Activity Monitor is
actually [LAUGH] using up all my CPU, but

104
00:05:47.718 --> 00:05:51.810
一般都是 Chrome 的主犯或 VS 码
it's generally gonna be Chrome
as the main culprit or VS Code.

105
00:05:51.810 --> 00:05:54.262
但最重要的是知道你的负担
But top is just a good
thing to know your load.

106
00:05:54.262 --> 00:05:59.266
当我们谈到负载均衡器时，这就是我们所说的，
And so when we talk about load balancers,
this is what we're talking about,

107
00:05:59.266 --> 00:06:03.814
了解 CPU 负载，连接负载，内存负载。
understanding the CPU load,
the connection load, the memory load.

108
00:06:03.814 --> 00:06:06.526
要退出，我只能按 Ctrl+C，我想，或者实际上是 F10。
And to quit, I can just Ctrl+C,
I think, or actually F10.

109
00:06:06.526 --> 00:06:10.600
>> 扬声器 4: 内存部分中的颜色代码是什么，您知道吗 ?
&gt;&gt; Speaker 4: What are the color codes
in the memory section, do you know?

110
00:06:10.600 --> 00:06:12.656
>> Jem Young: 我不知道权威，但是
&gt;&gt; Jem Young: I don't
know authoritatively, but

111
00:06:12.656 --> 00:06:14.922
我想说绿色还可以
I wanna say green is you're still okay.

112
00:06:14.922 --> 00:06:18.759
我想我们是蓝色的所以我们要接近一半
I think we're in blue, so
we're getting close to halfway.

113
00:06:18.759 --> 00:06:22.500
我想当你更进一步时，它会改变颜色。
And I think when you get a little further,
it's gonna change colors.

114
00:06:22.500 --> 00:06:24.860
等等我可能是向后看的
Wait, I might have that backwards.

115
00:06:24.860 --> 00:06:28.475
我不能确切地说颜色码是什么意思
I couldn't say authoritatively
what the color codes mean exactly.

116
00:06:30.300 --> 00:06:35.182
> > Jem Young: 我想说红色是不好的，但有时是红色的，
&gt;&gt; Jem Young: I wanna say red would be
bad, but sometimes this goes in the red,

117
00:06:35.182 --> 00:06:37.999
我不知道那是什么意思
which I don't know what that means.

118
00:06:37.999 --> 00:06:41.341
可能是指正在使用或不使用 CPU 。
Maybe it means the CPU is being used or
not.

119
00:06:41.341 --> 00:06:43.646
如果有人知道你可以把它推给我
If anybody knows, you can tweet it at me.

120
00:06:43.646 --> 00:06:49.268
我们要离开这里了 F10我们又回来了
And we're just gonna quit out of here,
so F10, and we're back.

121
00:06:49.268 --> 00:06:52.819
>> Jem Young: 我之前说 Nginx 是所有行业的千斤顶。
&gt;&gt; Jem Young: And earlier I said
Nginx is the jack-of-all-trades.

122
00:06:52.819 --> 00:06:53.504
你知道吗
Well, you know what?

123
00:06:53.504 --> 00:06:57.971
我们可以使用 Nginx 作为负载均衡器，因为它很酷。
We can use Nginx as a load balancer,
too, because it's just that cool.

124
00:06:57.971 --> 00:07:02.057
因为我们只有一个服务器所以我们今天就不实施了
We're not gonna implement one today
because we only have one server, so

125
00:07:02.057 --> 00:07:04.338
真的没什么可平衡的
there's really nothing to balance to.

126
00:07:04.338 --> 00:07:08.959
但是如果我们有两台服务器或三台服务器，我们会添加这个上游的后端。
But if we had two servers or three
servers, we add this upstream backend.

127
00:07:08.959 --> 00:07:11.389
然后， proxy_pass 将所有连接传递到一个。
And then we proxy_pass
all connections to one.

128
00:07:11.389 --> 00:07:16.269
因此，我们可以在不同的服务器上运行 Node 应用程序，或者
So what we can do is we can run a Node
application on different servers or

129
00:07:16.269 --> 00:07:17.855
不同的聚类。
different clusters.

130
00:07:17.855 --> 00:07:20.524
然后如果我们向其中一个提供 proy_pass ，
And then if we proxy_pass to one of them,
and

131
00:07:20.524 --> 00:07:24.757
Nginx 根据我们使用的服务器的策略来决定。
Nginx decides based on the strategy
we're using which server to go to.

132
00:07:24.757 --> 00:07:26.596
太好了
That's pretty nice.

133
00:07:26.596 --> 00:07:31.305
所以从盒子里我可以用一个 Nginx 负载运行 1000 台服务器
So out of the box, I could probably
run 1,000 servers with one Nginx load

134
00:07:31.305 --> 00:07:35.084
它就会完美地处理交通
balancer and it's just gonna
handle the traffic perfectly.

135
00:07:35.084 --> 00:07:38.380
我们可以在上游后端设置策略。
We can set the strategy
in the upstream backend.

136
00:07:38.380 --> 00:07:42.346
如果你在这一点上你的资源非常密集
If you ever get to this point where you
have a very high resource intensive

137
00:07:42.346 --> 00:07:44.305
我们可以说 least_conn
service, we can say least_conn.

138
00:07:44.305 --> 00:07:48.238
这就意味着我们要用最少的连接服务
That just means we're gonna use
the least connection service.

139
00:07:48.238 --> 00:07:50.502
这很棒 Nginx 为你做的
Which is awesome that Nginx does this for
you.

140
00:07:50.502 --> 00:07:54.132
将其自动连接到服务器，获取负载，
Cuz it automatically connects to a server,
gets the load,

141
00:07:54.132 --> 00:07:58.139
每一个我都不知道几毫秒
reports back every, I don't know,
couple milliseconds or so.

142
00:07:58.139 --> 00:08:01.149
它会报告您每次有多少连接。
And it reports back how many
connections you have every single time.

143
00:08:01.149 --> 00:08:03.024
我们也能做圆圆罗宾
We can also do Round Robin.

144
00:08:03.024 --> 00:08:04.666
我们可以做 IP 散列之类的
We could do IP Hashing, things like that.

145
00:08:04.666 --> 00:08:07.117
我不知道我是否谈到了粘性会话。
I don't know if I talked
about sticky sessions.

146
00:08:07.117 --> 00:08:10.250
说实话我喜欢 Nginx 很棒的软件
Honestly, I love Nginx,
it's great software.

147
00:08:10.250 --> 00:08:12.966
这些都是给你的
It does all these things for you.

148
00:08:12.966 --> 00:08:17.533
从字面上来说，我可以用成百上千的方式运行整个 Web 应用程序
Literally, I can run entire web
applications with hundreds of

149
00:08:17.533 --> 00:08:21.504
服务器仅具有 Nginx ，它将无缝工作。
servers with just Nginx and
it would work seamlessly.

150
00:08:21.504 --> 00:08:25.668
但有个问题要问你，会议数据呢 ?
But here's a question for
you, what about session data?

151
00:08:25.668 --> 00:08:28.276
那么，如果我登录到服务器呢 ?
So, what if I log into a server?

152
00:08:28.276 --> 00:08:30.245
我在这台服务器上被授权了
I am authorized on this one server.

153
00:08:30.245 --> 00:08:35.937
我该如何知道我不会被路由到未登录的其他服务器 ?
How do I know that I won't get routed to a
different server where I'm not logged in?

154
00:08:35.937 --> 00:08:39.134
这是我遇到的一个真正的问题。
And this is a real
problem that I run into.

155
00:08:39.134 --> 00:08:43.628
现在主要解决了，但是你认为会发生什么呢 ?
It's mostly solved now, but
what do you think would happen there?

156
00:08:43.628 --> 00:08:47.610
>> 扬声器 5: 那么它取决于您是否正在使用粘性会话。
&gt;&gt; Speaker 5: Well, it depends on
if you're using sticky sessions.

157
00:08:47.610 --> 00:08:48.735
>> Jem Young: 什么是粘性会话?
&gt;&gt; Jem Young: What's a sticky session?

158
00:08:48.735 --> 00:08:51.395
>> 扬声器 5: 将您粘贴到特定服务器上
&gt;&gt; Speaker 5: It's sticks you
to a particular server so

159
00:08:51.395 --> 00:08:53.754
你不会被人碰的
you don't get bumped between them.

160
00:08:53.754 --> 00:08:57.352
>> Jem Young: 没错，这是我们不考虑的事情，直到你必须要
&gt;&gt; Jem Young: Exactly, it's something
we don't think about until you have to

161
00:08:57.352 --> 00:09:00.567
实现某种登录或授权功能。
implement some sort of login or
authorization function.

162
00:09:00.567 --> 00:09:03.331
就像这样我们会投以负载均衡器
Be like, yeah,
we'll throw in load balancers,

163
00:09:03.331 --> 00:09:05.385
我要 20 台服务器我很好
I'll spin up 20 servers, I'm good.

164
00:09:05.385 --> 00:09:08.321
但是我登录了但我点击链接或刷新页面
But then I'm logged in, but
I hit a link or refresh the page and

165
00:09:08.321 --> 00:09:09.572
我不再登录了
I'm no longer logged in.

166
00:09:09.572 --> 00:09:10.804
太令人沮丧了
That's frustrating,

167
00:09:10.804 --> 00:09:14.941
因为负载均衡器可以每次将我路由到不同的服务器。
because the load balancer can route me
to a different server every single time.

168
00:09:14.941 --> 00:09:16.436
解决这一问题的方式是 IP 散列。
Ways of solving that would be IP Hashing.

169
00:09:16.436 --> 00:09:18.149
所以这意味着当我散列 IP 时
So that means when I hash the IP,

170
00:09:18.149 --> 00:09:20.880
我每次都要去同一台服务器
I'm always gonna go to
the same server every time.

171
00:09:20.880 --> 00:09:24.052
另一种方法就是在我们之前
Another way would just be implementing
an authorization layer before we

172
00:09:24.052 --> 00:09:24.783
甚至打 Nginx
even hit Nginx.

173
00:09:24.783 --> 00:09:27.701
所以它只会让我完全得到授权
So it just makes sure I'm
authorized completely.

174
00:09:27.701 --> 00:09:28.807
如果不是我就把我退回去
If I'm not, it just bounces me out.

175
00:09:28.807 --> 00:09:33.017
如果我授权的话，就转服务器了，我就不重要了
If I am authorized, it just goes to the
server and it doesn't matter if I'm logged

176
00:09:33.017 --> 00:09:36.138
因为我们知道我们穿过了防火墙
it or not, because we know we
passed through that firewall.

177
00:09:36.138 --> 00:09:39.428
想想当我们想到我们不能盲目地
It's something to consider when we
think about we can't just blindly

178
00:09:39.428 --> 00:09:40.384
执行任务。
implement things.

179
00:09:40.384 --> 00:09:44.677
正如 [LAUGH] Nginx 一样，这些都是我们必须做的考虑。
As easy as [LAUGH] Nginx makes it to be,
these are considerations we have to make.
