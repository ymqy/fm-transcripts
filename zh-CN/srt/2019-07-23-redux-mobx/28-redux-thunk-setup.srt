WEBVTT

1
00:00:00.460 --> 00:00:03.000
&gt;&gt; Steve Kinney: So
talking about thunks is fun, but

2
00:00:03.000 --> 00:00:04.880
what do you say we implement one?

3
00:00:04.880 --> 00:00:08.348
All right, cool.

4
00:00:13.797 --> 00:00:18.100
&gt;&gt; Steve Kinney: So
we'll kinda go in here and so

5
00:00:18.100 --> 00:00:23.728
tweet-stream ideally should get us a,

6
00:00:23.728 --> 00:00:28.692
basically I have a very simple API,

7
00:00:28.692 --> 00:00:33.342
we need to actually check it out.

8
00:00:35.984 --> 00:00:38.280
&gt;&gt; Steve Kinney: So
we do need to kick it off, right?

9
00:00:38.280 --> 00:00:40.300
And so
this tweet stream here will basically,

10
00:00:40.300 --> 00:00:43.980
I have a little Node server that is
listening to the Twitter livestream for

11
00:00:43.980 --> 00:00:45.840
anything with the word JavaScript.

12
00:00:45.840 --> 00:00:50.450
Apparently, it is all, do you like
a desktop or a notebook computer, and

13
00:00:50.450 --> 00:00:52.000
some jobs.

14
00:00:52.000 --> 00:00:55.780
There is nothing more terrifying than
revolving around a Twitter livestream, but

15
00:00:55.780 --> 00:00:56.640
here we are.

16
00:00:56.640 --> 00:01:00.380
That way we could have some
new data along the way.

17
00:01:00.380 --> 00:01:05.130
And so the tweet-stream will basically
have an API that we can hit up and

18
00:01:05.130 --> 00:01:06.710
we can do stuff with.

19
00:01:06.710 --> 00:01:08.861
Let's actually fire it up.

20
00:01:13.295 --> 00:01:14.359
&gt;&gt; Steve Kinney: With npm start,

21
00:01:14.359 --> 00:01:17.708
and as we do that we'll kinda
take a tour of the code.

22
00:01:21.155 --> 00:01:25.101
&gt;&gt; Steve Kinney: All right, so index
isn't anything really all that special,

23
00:01:25.101 --> 00:01:27.120
some basic Redux boilerplate.

24
00:01:27.120 --> 00:01:32.150
We are gonna need to modify this to use
the Redux thunk middleware at some point.

25
00:01:32.150 --> 00:01:36.509
An empty actions file, a reducer that

26
00:01:36.509 --> 00:01:41.010
we're gonna need to put some stuff in.

27
00:01:41.010 --> 00:01:44.500
We're using the function here and
combining it immediately.

28
00:01:44.500 --> 00:01:48.630
And we've got some react
components that we can use.

29
00:01:48.630 --> 00:01:53.260
So first thing we need to do is we
need to pull in the middleware.

30
00:01:53.260 --> 00:01:56.480
And then we saw earlier that that
applyMiddleware function that

31
00:01:56.480 --> 00:02:01.150
comes with Redux, that will give us the
ability to pop that piece of middleware

32
00:02:01.150 --> 00:02:06.180
into the middle of our
flow that we saw earlier.

33
00:02:06.180 --> 00:02:11.900
So we'll go in and we'll go into index.js,
and we'll kinda pull in.

34
00:02:13.680 --> 00:02:17.610
So createStore, we need createStore
we're gonna need applyMiddleware.

35
00:02:18.870 --> 00:02:20.880
And then okay,
what middleware do you wanna apply?

36
00:02:20.880 --> 00:02:27.054
So we'll import thunk from redux-thunk.

37
00:02:27.054 --> 00:02:28.480
Great.

38
00:02:28.480 --> 00:02:33.341
Now, the other thing is when we create the
store, we're gonna say applyMiddleware.

39
00:02:34.843 --> 00:02:36.151
&gt;&gt; Steve Kinney: And
we'll give it that thunk.

40
00:02:39.512 --> 00:02:43.940
&gt;&gt; Steve Kinney: Cool, so now we've
effectively installed Redux thunk.

41
00:02:43.940 --> 00:02:49.980
Now what we need to do is
create a action creator.

42
00:02:49.980 --> 00:02:51.550
I used air quotes there.

43
00:02:51.550 --> 00:02:54.920
An action creator that's gonna return
a function that is eventually going to

44
00:02:54.920 --> 00:02:55.760
dispatch an action.

45
00:02:55.760 --> 00:02:58.020
Redux wants no business in your Async.

46
00:02:58.020 --> 00:03:01.020
It's trying to stay in
a world of pure functions.

47
00:03:01.020 --> 00:03:03.700
All that stuff should be
isolated out to middleware.

48
00:03:03.700 --> 00:03:08.120
It should not happen in your reducer,
it should ideally not happen in your map

49
00:03:08.120 --> 00:03:10.989
dispatch to props or
anything along those lines.

50
00:03:12.190 --> 00:03:18.284
So actions, we'll go ahead and
we'll say export const fetchTweets.

51
00:03:22.719 --> 00:03:25.100
&gt;&gt; Steve Kinney: And this [INAUDIBLE]
needs to return a function.

52
00:03:32.599 --> 00:03:34.518
&gt;&gt; Steve Kinney: Which will go ahead and
it will fetch.

53
00:03:36.237 --> 00:03:40.012
&gt;&gt; Steve Kinney: And
I will go back over here.

54
00:03:40.012 --> 00:03:41.414
We'll deal with that momentarily.

55
00:03:43.289 --> 00:03:44.738
&gt;&gt; Steve Kinney: We got
this Tweet Stream and

56
00:03:44.738 --> 00:03:48.518
if we go to,
&gt;&gt; Steve Kinney: Api/tweets there,

57
00:03:48.518 --> 00:03:55.047
it's a giant JSON mess of all the data
you get back from the Twitter API.

58
00:03:57.860 --> 00:03:59.680
&gt;&gt; Steve Kinney: So
we can just paste that in there.

59
00:03:59.680 --> 00:04:07.970
So it's just
tweet.stream.glitch.me/api/tweets.

60
00:04:07.970 --> 00:04:11.000
So we'll fetch that and
we're just using the fetch API, right.

61
00:04:11.000 --> 00:04:12.130
You can use anything you want.

62
00:04:12.130 --> 00:04:12.980
You don't have to use a fetch API.

63
00:04:12.980 --> 00:04:15.860
If you wanna use XiOS,
use XiOS, you wanna use jQuery.

64
00:04:15.860 --> 00:04:21.640
Ajax, use jQuery.Ajax, right,
use whatever way you like to hit APIs.

65
00:04:21.640 --> 00:04:27.070
I'm just gonna go with the built in one
mostly, I don't wanna play favorites here.

66
00:04:27.070 --> 00:04:29.990
So the fetch API,
you basically have to say whatever it is,

67
00:04:29.990 --> 00:04:31.470
how do you wanna parse it.

68
00:04:31.470 --> 00:04:35.280
Right, and so we know it as JSON,
cuz the fetch API is super flexible.

69
00:04:35.280 --> 00:04:38.400
It can fetch you images, it can
fetch you blobs, so on and so forth.

70
00:04:38.400 --> 00:04:40.778
We're saying this is JSON.

71
00:04:40.778 --> 00:04:45.463
And then we'll just say,
turn to the JSON, we'll say response.

72
00:04:47.774 --> 00:04:49.100
&gt;&gt; Steve Kinney: We'll just
console log it for now.

73
00:04:51.136 --> 00:04:53.880
We'll console log this dispatch, right,
which is just gonna be a function.

74
00:04:53.880 --> 00:04:56.550
It won't be anything truly surprising.

75
00:04:56.550 --> 00:04:58.560
But this is it.

76
00:04:58.560 --> 00:05:01.260
This is how you're gonna add
asynchronous code to your Redux store.

77
00:05:01.260 --> 00:05:06.680
Now, if you're like, I think it's
generally a good idea to have a belief

78
00:05:06.680 --> 00:05:13.780
system that if something seems easy,
it is probably a foot gun right [LAUGH].

79
00:05:13.780 --> 00:05:18.800
Anything that's easy means,
let's say you had hit multiple APIs,

80
00:05:18.800 --> 00:05:22.030
there's no difference from,
it's again, it's just Java Script.

81
00:05:23.560 --> 00:05:27.580
And you're gonna end up in call back hell,
right?

82
00:05:27.580 --> 00:05:31.740
And coordinate a bunch of stuff,
because there's no obstruction.

83
00:05:31.740 --> 00:05:34.990
When we saw editing objects
immutably was hard,

84
00:05:34.990 --> 00:05:36.750
we made an obstruction and made it easier.

85
00:05:36.750 --> 00:05:40.200
Right, with that kind of add entity and
stuff along those lines.

86
00:05:40.200 --> 00:05:43.870
Because this is so transparent and simple,
it means that you are on the hook for

87
00:05:43.870 --> 00:05:46.860
dealing with, okay,
what if something happened?

88
00:05:46.860 --> 00:05:48.180
Or what if a user hit cancel and

89
00:05:48.180 --> 00:05:51.680
we don't actually want to do
the thing when this promise resolves?

90
00:05:51.680 --> 00:05:52.720
We'll deal with that in a little bit.

91
00:05:52.720 --> 00:05:55.110
So, it is simple, but

92
00:05:55.110 --> 00:06:00.004
simple means that all the stuff that
it doesn't do, you're on the hook for.

93
00:06:00.004 --> 00:06:03.670
So, I, if I'm doing a small project,
I will absolutely reach for this.

94
00:06:03.670 --> 00:06:05.770
Cuz it's a very easy way to do it.

95
00:06:05.770 --> 00:06:09.840
But if things get more complicated you
will be on the hook to deal with that.

96
00:06:09.840 --> 00:06:12.516
So let's go into this fetchTweets.

97
00:06:12.516 --> 00:06:19.640
It has, it basically go ahead and
we have this,

98
00:06:19.640 --> 00:06:24.540
we're going ahead, it's calling this
function that doesn't exist on click.

99
00:06:24.540 --> 00:06:26.410
FetchTweets is going to
get us into the tweets.

100
00:06:26.410 --> 00:06:28.080
It's gonna put it into Redux, but

101
00:06:28.080 --> 00:06:32.350
then the tweets component still needs to
read that state and be able to map it out.

102
00:06:32.350 --> 00:06:33.340
So we'll go in there.

103
00:06:35.380 --> 00:06:36.760
Right now it's just a dumb component,

104
00:06:36.760 --> 00:06:42.589
we'll do something very similar to what we
did before, which is we'll import connect

105
00:06:42.589 --> 00:06:47.381
from react-redux.

106
00:06:48.590 --> 00:06:53.340
Great, and then we'll just
export default that as well.

107
00:06:53.340 --> 00:06:56.757
We'll give ourselves a mapStateToProps,
it's a pretty easy one.

108
00:07:02.647 --> 00:07:04.296
&gt;&gt; Steve Kinney: That'll take the state.

109
00:07:04.296 --> 00:07:11.453
In fact really we just wanna
pull the tweets off that object.

110
00:07:11.453 --> 00:07:14.631
I don't, I can just hand this as
the first argument to connect.

111
00:07:14.631 --> 00:07:19.657
I don't need to put it in a variable
&gt;&gt; Steve Kinney: He

112
00:07:19.657 --> 00:07:23.075
says as he decides to
put it in a variable.

113
00:07:23.075 --> 00:07:26.830
So mapStateToProps around
the tweets component.

114
00:07:30.495 --> 00:07:31.134
&gt;&gt; Steve Kinney: Great.

