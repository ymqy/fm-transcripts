WEBVTT

1
00:00:00.170 --> 00:00:01.850
&gt;&gt; Jason Lengstorf: Once
we have the template,

2
00:00:01.850 --> 00:00:06.660
we can define component to use the query.

3
00:00:06.660 --> 00:00:10.290
And so that is gonna get
the result of this query as data.

4
00:00:10.290 --> 00:00:13.200
So the way that Gatsby works during
the build is it's gonna look for

5
00:00:13.200 --> 00:00:14.910
this exported query.

6
00:00:14.910 --> 00:00:18.010
And it will actually execute it,
get the data,

7
00:00:18.010 --> 00:00:22.480
and then inject that data as
a data prop to this component.

8
00:00:23.750 --> 00:00:24.990
This is all done during the build.

9
00:00:24.990 --> 00:00:27.250
So there's kind of a rewrite process.

10
00:00:27.250 --> 00:00:29.750
Again, another reason to keep
these templates separate so

11
00:00:29.750 --> 00:00:31.540
that it's clear that they
get special handling.

12
00:00:32.980 --> 00:00:37.260
That data then is going
to be put somewhere.

13
00:00:37.260 --> 00:00:42.869
And what I like to do is just pass it
directly to a component that will use it.

14
00:00:42.869 --> 00:00:44.167
And so I'm just gonna do that.

15
00:00:44.167 --> 00:00:51.540
I'm gonna go straight into
the data.docsPage, can go in.

16
00:00:52.770 --> 00:00:54.840
And now we have to define that.

17
00:00:54.840 --> 00:00:57.950
But first, let's export this DocsPage.

18
00:00:59.790 --> 00:01:02.870
Okay, so we're gonna need to
go get this this docs page.

19
00:01:02.870 --> 00:01:08.270
I'm gonna put it in components,
we'll call it docs-page.js.

20
00:01:08.270 --> 00:01:12.320
And inside of this one,
we're going to import react from 'react'.

21
00:01:12.320 --> 00:01:15.190
We will import the MDXRenderer.

22
00:01:16.330 --> 00:01:22.620
And the MDXRenderer is used to actually
make this into something readable.

23
00:01:22.620 --> 00:01:27.522
So all of these code that MDX generates,
we wanna be able to use it and

24
00:01:27.522 --> 00:01:30.790
the MDXRenderer makes that possible for
us.

25
00:01:33.180 --> 00:01:37.830
I'm also gonna pull in
the layout that we used.

26
00:01:37.830 --> 00:01:41.987
So let me get that.

27
00:01:41.987 --> 00:01:46.454
And then, we can do a DocsPage component.

28
00:01:49.679 --> 00:01:54.200
&gt;&gt; Jason Lengstorf: We will
then put this layout in here.

29
00:01:54.200 --> 00:01:58.703
Do an h1, do page.title and then put in

30
00:01:58.703 --> 00:02:04.719
the MDXRenderer,
&gt;&gt; Jason Lengstorf: page.body

31
00:02:04.719 --> 00:02:05.930
goes inside of that.

32
00:02:07.050 --> 00:02:10.869
And then we'll put a little note at
the bottom that says this page was

33
00:02:10.869 --> 00:02:15.164
updated,
&gt;&gt; Jason Lengstorf: Whenever the updated

34
00:02:15.164 --> 00:02:15.691
value is.

35
00:02:15.691 --> 00:02:19.310
And again, it's plain language so we can
just drop it right into the sentence.

36
00:02:20.390 --> 00:02:23.650
So we're gonna export default DocsPage.

37
00:02:23.650 --> 00:02:28.603
And then I can save that,
come back here and let's import this so

38
00:02:28.603 --> 00:02:30.081
that we can use it.

39
00:02:30.081 --> 00:02:37.374
import DocsPage from
.../components/ docs-page.

40
00:02:37.374 --> 00:02:39.860
And now, if I stop and

41
00:02:39.860 --> 00:02:45.210
restart, before we stop and restart,
we need to actually use these templates.

42
00:02:45.210 --> 00:02:52.700
So we've defined them but now we need
to run the Create Page API hook.

43
00:02:52.700 --> 00:02:57.420
So back in our Gatsby node,
all the way down at the bottom here.

44
00:02:57.420 --> 00:03:02.660
We're going to use exports.createPages.

45
00:03:04.320 --> 00:03:06.640
And because we're gonna make a request for
data,

46
00:03:06.640 --> 00:03:08.610
we're gonna mark this
as an async function.

47
00:03:11.420 --> 00:03:14.340
And the create pages API
gives us a few things.

48
00:03:14.340 --> 00:03:18.532
The first is an actions object that
gives us a bunch of helper functions.

49
00:03:18.532 --> 00:03:22.190
A graphql function that'll
allow us to get some data.

50
00:03:22.190 --> 00:03:26.140
And then we also have a reporter in case
we want to help put anything to the to

51
00:03:26.140 --> 00:03:26.924
the console.

52
00:03:26.924 --> 00:03:31.683
And then the second argument is
gonna be the options from the theme.

53
00:03:31.683 --> 00:03:36.477
So,
&gt;&gt; Jason Lengstorf: We're not really

54
00:03:36.477 --> 00:03:37.854
using the options.

55
00:03:37.854 --> 00:03:41.908
So I'm gonna just,
&gt;&gt; Jason Lengstorf: Skip that actually.

56
00:03:44.008 --> 00:03:47.167
&gt;&gt; Jason Lengstorf: So
we're gonna get an object full of actions,

57
00:03:47.167 --> 00:03:50.410
the graphql function and
a reporter function.

58
00:03:51.840 --> 00:03:58.830
And then inside, we start out by getting
our data, so we wanna do a graphql query.

59
00:03:58.830 --> 00:04:03.300
And inside the createPages,
graphql is a function, not a template tag.

60
00:04:03.300 --> 00:04:06.790
That's a little bit of
a gotcha at the beginning.

61
00:04:07.910 --> 00:04:12.730
And inside, I'm gonna get all
the DocsPages and I want all the nodes.

62
00:04:12.730 --> 00:04:14.950
And all I need in here is the id and
the path.

63
00:04:14.950 --> 00:04:19.060
So the id,
I'm gonna use to pass in this context.

64
00:04:19.060 --> 00:04:24.960
And the path,
I'm gonna use as definition for the URL.

65
00:04:27.140 --> 00:04:29.580
So we've awaited that result.

66
00:04:29.580 --> 00:04:31.730
And then we're just gonna do a quick
check to see if anything wrong.

67
00:04:31.730 --> 00:04:35.970
So, if result.errors, we will panic.

68
00:04:37.310 --> 00:04:41.870
So I'll do reporter.panic and
we'll say error loading docs,

69
00:04:43.490 --> 00:04:46.580
and just pass in the errors.

70
00:04:48.820 --> 00:04:51.610
If we get through that,
we can assume everything's okay.

71
00:04:51.610 --> 00:04:55.950
So just grab out our pages by
diving into our data here.

72
00:04:55.950 --> 00:05:02.086
So we'll do
result.data.allDocsPages.nodes.

73
00:05:02.086 --> 00:05:04.330
And then once we've got those pages,
we can loop through them.

74
00:05:04.330 --> 00:05:08.370
So we'll do a forEach because
we're not returning anything.

75
00:05:08.370 --> 00:05:13.420
And forEach page, we're going to
run an action called createPage.

76
00:05:13.420 --> 00:05:17.690
And that accepts an object which
has two required fields and

77
00:05:17.690 --> 00:05:19.510
one optional field that we're gonna use.

78
00:05:19.510 --> 00:05:22.130
The first required field is path.

79
00:05:22.130 --> 00:05:24.420
And for that,
we're gonna use the page path.

80
00:05:24.420 --> 00:05:29.350
And that's again what we desire
defined using the base path,

81
00:05:29.350 --> 00:05:30.850
the relative directory and
then the file name.

82
00:05:32.610 --> 00:05:35.600
Next, we need to give it a component and

83
00:05:35.600 --> 00:05:38.970
that component is gonna be
the template that we just defined.

84
00:05:38.970 --> 00:05:44.110
So we'll do a require dot resolve,
go into our source templates and

85
00:05:44.110 --> 00:05:46.150
the docs page template.

86
00:05:46.150 --> 00:05:48.550
And finally we need to set some context.

87
00:05:48.550 --> 00:05:51.750
And the context is an object, this is
arbitrary, we can put whatever we want.

88
00:05:51.750 --> 00:05:56.650
There are a few reserved fields but
for the most part, it should be okay.

89
00:05:58.060 --> 00:06:01.880
In the context, you'll get a big
warning if you use a reserved field.

90
00:06:01.880 --> 00:06:05.830
So in the context,
I'm gonna pass in this pageID and

91
00:06:05.830 --> 00:06:10.130
I want that to be the page.id.

92
00:06:10.130 --> 00:06:15.120
And whatever name I give it now, it will
become available as a graphql variable.

93
00:06:15.120 --> 00:06:19.120
So, we defined in here, pageID.

94
00:06:20.360 --> 00:06:24.300
So by defining pageID in the context,
we're able to access it.

95
00:06:26.430 --> 00:06:31.740
Now once we've done this, we are,
fingers crossed, ready to rock and roll.

96
00:06:31.740 --> 00:06:33.579
So let's build some pages.

97
00:06:37.010 --> 00:06:37.610
That's promising.

98
00:06:37.610 --> 00:06:38.590
We're getting two pages.

99
00:06:39.940 --> 00:06:40.600
And let's give it a look.

100
00:06:42.140 --> 00:06:43.170
Hey, there we go.

101
00:06:43.170 --> 00:06:45.800
So now, we've got our homepage.

102
00:06:45.800 --> 00:06:48.230
It shows the MDX content.

103
00:06:48.230 --> 00:06:52.000
It shows our layout, and
it shows us when the page was updated.

104
00:06:52.000 --> 00:06:56.820
So that means that we've
got data coming in,

105
00:06:56.820 --> 00:07:00.180
getting customized through Gatsby's
data layer and now is on the screen.

106
00:07:00.180 --> 00:07:01.430
So this is pretty powerful, right?

107
00:07:01.430 --> 00:07:03.280
We're in pretty good shape here.

108
00:07:03.280 --> 00:07:06.620
So our next move here, is going to be

109
00:07:07.840 --> 00:07:12.080
to make this look slightly less terrible
and in a way that's more extensible.

110
00:07:12.080 --> 00:07:13.480
What's up?

111
00:07:13.480 --> 00:07:14.920
&gt;&gt; Speaker 2: Why did
it put out two pages?

112
00:07:14.920 --> 00:07:17.760
I thought it was only the one MDX file.

113
00:07:17.760 --> 00:07:19.320
&gt;&gt; Jason Lengstorf: So,
there's only the one MDX file,

114
00:07:19.320 --> 00:07:21.730
but Gatsby will always
give you a 404 page.

115
00:07:22.980 --> 00:07:25.610
So, if we go to a page
that I haven't disabled.

116
00:07:25.610 --> 00:07:28.557
If we go to a page that doesn't exist, so

117
00:07:28.557 --> 00:07:33.317
let me boot this up,
&gt;&gt; Jason Lengstorf: It will

118
00:07:33.317 --> 00:07:36.590
also give us this 404 page.

119
00:07:36.590 --> 00:07:39.650
So this is the page that's being
referenced as the second one.

120
00:07:41.580 --> 00:07:44.970
And that's a really nice thing to have
during development because especially if

121
00:07:44.970 --> 00:07:46.270
you haven't set up your navigation or

122
00:07:46.270 --> 00:07:50.570
something yet, you can get to the point
where you've created a bunch of pages but

123
00:07:50.570 --> 00:07:53.640
you haven't built the list
to show them all.

124
00:07:53.640 --> 00:07:54.960
Well this will give you that list.

125
00:07:54.960 --> 00:07:58.990
So it's a nice little convenience thing
to have when you're still in progress and

126
00:07:58.990 --> 00:08:03.390
things are kinda in various stages of flux
to make sure that you don't forget to link

127
00:08:03.390 --> 00:08:04.160
to certain pages.

128
00:08:05.500 --> 00:08:08.160
&gt;&gt; Speaker 2: So
were you exporting the page queries,

129
00:08:08.160 --> 00:08:11.260
do you need that export to
static queries as well?

130
00:08:11.260 --> 00:08:12.020
&gt;&gt; Jason Lengstorf: No, so

131
00:08:12.020 --> 00:08:16.840
the the page query is our special case
where we are signifying to Gatsby

132
00:08:16.840 --> 00:08:21.410
that during the build process
specifically during on create pages.

133
00:08:21.410 --> 00:08:25.670
This template is gonna be used, and this
query should be treated as a page query,

134
00:08:26.880 --> 00:08:31.179
that gives it access to the context which
is the like the variables and stuff.

135
00:08:32.470 --> 00:08:34.680
In a static query.

136
00:08:34.680 --> 00:08:37.660
A static query is just any use of

137
00:08:37.660 --> 00:08:41.280
usestatic query inside of
a component will be picked up.

138
00:08:41.280 --> 00:08:44.490
But again the limitation here
is that we can't use variables.

139
00:08:44.490 --> 00:08:46.870
There's is no access to outside context.

140
00:08:46.870 --> 00:08:50.660
We can even interpolate a data,
I couldn't take a prop and

141
00:08:50.660 --> 00:08:52.540
then put that prop in here.

142
00:08:52.540 --> 00:08:56.460
So a static query needs to
be hard coded at build time.

143
00:08:56.460 --> 00:09:01.450
And the reason for that is that the way
that gatsby's handling the graphql layer

144
00:09:01.450 --> 00:09:05.870
under the hood, that graphql layer doesn't
continue to work once the site is built.

145
00:09:05.870 --> 00:09:08.240
It's only there during the built and

146
00:09:08.240 --> 00:09:11.620
that means that all of these queries
are actually getting compiled away.

147
00:09:11.620 --> 00:09:17.192
And that's being done using abstract
syntax tree transformations.

148
00:09:17.192 --> 00:09:20.460
It's kinda how Babel works under the hood,
it takes the code and

149
00:09:20.460 --> 00:09:23.074
it breaks it into its component pieces and
tokens.

150
00:09:23.074 --> 00:09:26.625
And then it kind of understands
those as a programming language.

151
00:09:26.625 --> 00:09:29.721
And then the AST gets modified.

152
00:09:29.721 --> 00:09:34.228
So Gatsby will take the component,
look for these use static query instances,

153
00:09:34.228 --> 00:09:38.396
break that down into an AST, replace
it with the results of the query, and

154
00:09:38.396 --> 00:09:41.690
then rewrite that component
with the data in place.

155
00:09:41.690 --> 00:09:44.840
So that's why there are restrictions
on it because when you get into

156
00:09:44.840 --> 00:09:46.470
AST transformations,

157
00:09:46.470 --> 00:09:50.340
trying to chase down a variable to where
it's declared is really challenging.

158
00:09:50.340 --> 00:09:54.180
That is something that the team is
working on but it is not in place yet.

159
00:09:54.180 --> 00:09:59.170
&gt;&gt; Speaker 2: He wants to know if we can
export only one page brief on page file or

160
00:09:59.170 --> 00:10:01.420
you can export multiple queries.

161
00:10:01.420 --> 00:10:04.060
&gt;&gt; Jason Lengstorf: You can only
export one query per page file.

162
00:10:04.060 --> 00:10:06.831
But that actually isn't a problem.

163
00:10:06.831 --> 00:10:12.876
Because you can just add as many
queries as you want next to each other.

164
00:10:12.876 --> 00:10:18.889
And it would just be
data.docspage data.allfile.

165
00:10:18.889 --> 00:10:20.860
So you can only do one query, but

166
00:10:20.860 --> 00:10:24.170
that query can have as many
sub queries in it as you want.

