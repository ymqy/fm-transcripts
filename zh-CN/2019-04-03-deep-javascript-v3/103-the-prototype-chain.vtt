WEBVTT

1
00:00:00.060 --> 00:00:03.080
&gt；&gt；Kyle Simpson：同样，请遵循幻灯片上的代码。
&gt;&gt; Kyle Simpson: So again, follow along with that code on the slide.

2
00:00:03.080 --> 00:00:06.459
我将为你们绘制图表，我们将逐行进行
And I'm gonna be diagramming it for you and we're gonna go line by line and

3
00:00:06.459 --> 00:00:08.070
创建实体。
create the entities.

4
00:00:08.070 --> 00:00:09.640
在我们到达一号线之前，
Before we even get to line one,

5
00:00:09.640 --> 00:00:13.830
我们需要画出一些零行发生的事情，换句话说，
we need to diagram a bit about what's happening in line zero, in other words,

6
00:00:13.830 --> 00:00:18.640
在你的程序开始运行之前发生了什么。
what's happening before your program has even started to run.

7
00:00:18.640 --> 00:00:22.359
在这个图表中，我将使用一个非常简单的符号，即我将
And in this diagramming I'm gonna use a very simple notation which is I'm gonna

8
00:00:22.359 --> 00:00:26.690
使用正方形表示对象和圆或
use squares to represent objects and circles or

9
00:00:26.690 --> 00:00:31.179
只要我能近似它来表示函数。
whatever I can approximate thereof to represent functions.

10
00:00:31.179 --> 00:00:32.539
我正在用触控板画，所以
I am drawing with a trackpad so

11
00:00:32.539 --> 00:00:36.329
这不会是伟大的绘画，请原谅我的艺术作品的质量。
it's not gonna be great drawing please forgive the quality of my artwork.

12
00:00:37.960 --> 00:00:42.560
我首先要画出零环境线，我要这样做
I'm going to diagram first the lines zero environment i'm going to do that by

13
00:00:42.560 --> 00:00:47.710
在这里划一条线，基本上就是说这条线以上的所有东西都是
drawing a line across here that basically says everything above this line is

14
00:00:47.710 --> 00:00:52.840
零线环境，然后下面是我们要绘制程序图的地方。
the line zero environment, and then below it is where we'll diagram the program.

15
00:00:52.840 --> 00:00:55.310
在我们的零线环境中，
Above this line in our line zero environment,

16
00:00:55.310 --> 00:00:57.929
有一个非常关键的实体。
there's one very critical entity.

17
00:00:57.929 --> 00:01:02.966
它是一个函数，所以我将它画成一个近似的圆
It is a function, so I will draw it as approximately a circle and

18
00:01:02.966 --> 00:01:08.864
它有一个非常熟悉的名字，它的名字是大写O，Object。
it goes by a pretty familiar name, it goes by the name capital O, object.

19
00:01:11.986 --> 00:01:14.536
&gt；&gt；Kyle Simpson：我只是缩写，因为我不喜欢写出来
&gt;&gt; Kyle Simpson: And I'm just gonna abbreviate cuz I don't like writing out

20
00:01:14.536 --> 00:01:17.341
这整个单词，但它被称为对象，大写O对象和
this whole words, but it's called object, capital O object and

21
00:01:17.341 --> 00:01:18.769
这是一个存在的函数。
that's a function that exists.

22
00:01:18.769 --> 00:01:21.950
你们都看到了这是我们的基本目标之一
And you all have seen that that's one of our fundamental objects

23
00:01:21.950 --> 00:01:25.188
这是语言中内置的，可能是其中最重要的一个。
that's built into the language, probably one of the most important of those.

24
00:01:26.579 --> 00:01:31.063
我们有大写的O对象，顺便说一下，它上面有几个东西。
We have capital O object there, and by the way, it has several things on it.

25
00:01:31.063 --> 00:01:36.174
它有object.key和object.values以及各种其他实用程序。
It's got object.keys and object.values, and various other utilities.

26
00:01:36.174 --> 00:01:37.807
所以它不仅是一个函数，而且
So it's not only a function, but

27
00:01:37.807 --> 00:01:40.620
它还可以用作名称空间，以便在其上使用其他方法。
it also serves as a namespace to have other methods on it.

28
00:01:40.620 --> 00:01:45.049
所以有一堆我们使用的非常重要的通用工具
So there are a bunch of really important general utilities that we use

29
00:01:45.049 --> 00:01:49.170
在整个JavaScript中，它们直接位于该函数上。
across JavaScript, that are located directly on that function.

30
00:01:49.170 --> 00:01:53.490
但还有另一个存在的实体，它是一个正方形。
But there's another entity that exists and it is a square.

31
00:01:53.490 --> 00:01:58.319
所以我将在这里画一个正方形，类似于正方形。
So I will draw a square here, something like a square.

32
00:01:59.539 --> 00:02:06.200
它可能是所有JavaScript中最重要的对象。
And it is probably the most important object in all of JavaScript.

33
00:02:06.200 --> 00:02:09.118
它是如此重要，事实上，我们甚至没有它的名字。
It's so important in fact that we don't even have a name for it.

34
00:02:10.560 --> 00:02:12.270
我们不能给它起个好名字。
We can't come up with a good name for it.

35
00:02:12.270 --> 00:02:18.052
所以你知道我们怎么命名它，是不是我们命名它指的是它所指的点。
So you know how we name it, is we name it referring to what points at it.

36
00:02:18.052 --> 00:02:22.997
对象函数上有一个属性指向
There's a property on the object function that points

37
00:02:22.997 --> 00:02:28.269
在这个东西上，那个属性叫做原型。
over at this thing and that property is called prototype.

38
00:02:28.269 --> 00:02:30.479
在这里写作真的很痛苦。
Writing is really painful here.

39
00:02:30.479 --> 00:02:32.759
我只是在这里用Proto缩写。
I'm just gonna abbreviate with proto here.

40
00:02:32.759 --> 00:02:33.879
这叫原型。
It's called prototype.

41
00:02:35.699 --> 00:02:37.340
这是该属性的名称。
That is the name of that property.

42
00:02:37.340 --> 00:02:41.689
因此，如果您曾经看到过object.prototype，那就是指向
So if you've ever seen object.prototype, that's the property pointing from

43
00:02:41.689 --> 00:02:46.069
对象函数转移到一个名为object.prototype的东西上。
the object function over to this thing called object.prototype.

44
00:02:46.069 --> 00:02:49.229
在对象上有一堆非常重要的东西。原型，
And there's a bunch of really important stuff on object.prototype,

45
00:02:49.229 --> 00:02:51.969
像toString、valueOf和
like toString, and valueOf, and

46
00:02:51.969 --> 00:02:55.650
所有这些存在于我们语言中的基本工具。
all these other fundamental utilities that exist in our language.

47
00:02:55.650 --> 00:03:00.067
所有非原语都是直接从这个对象派生出来的。Prototype，所以
All non-primitives descend directly from this object.prototype, so

48
00:03:00.067 --> 00:03:02.139
这是一个非常重要的物品。
it's a really important object.

49
00:03:04.319 --> 00:03:07.484
&gt；&gt；Kyle Simpson：在我们的零线环境中还有一件事
&gt;&gt; Kyle Simpson: There is one other thing that exists in our line zero environment

50
00:03:07.484 --> 00:03:11.159
这是一个指向另一个方向的属性。
which is a property that's pointing back the other direction.

51
00:03:11.159 --> 00:03:14.270
它从这里指向这里
It's pointing from here over to here and

52
00:03:14.270 --> 00:03:19.770
他们为这个财产选择了一个令人费解和令人沮丧的名字。
that property they chose a really perplexing and frustrating name for.

53
00:03:21.030 --> 00:03:25.229
他们选择一个特定的名字，因为他们试图做的事情本质上是谎言
They choose a specific name because what they were trying to do was essentially lie

54
00:03:25.229 --> 00:03:30.920
对你来说，假装JavaScript系统有类
to you, to pretend as if JavaScript system had classes so

55
00:03:30.920 --> 00:03:33.000
他们选择命名这个构造函数。
they choose to name this constructor.

56
00:03:35.530 --> 00:03:37.849
我只想写c-o-n来缩写。
And I'm just going to write c-o-n to abbreviate.

57
00:03:37.849 --> 00:03:39.879
这叫做构造函数。
It's called constructor.

58
00:03:39.879 --> 00:03:43.229
所以你有这个object.prototype，它指向这个对象，并且
So you have this object.prototype which points at this object, and

59
00:03:43.229 --> 00:03:46.159
如果您有该对象，然后说.structor，
if you had that object and then said .constructor,

60
00:03:46.159 --> 00:03:51.810
它会指向这个对象函数，就好像对象
it'd be pointing back at this object function as if the object

61
00:03:51.810 --> 00:03:56.949
函数是指向它的对象的构造函数。
function was the constructor of the object that pointed to it.

62
00:03:58.520 --> 00:04:03.310
但是基本原型中工作构造函数
But that work constructor in the fundamental prototype

63
00:04:03.310 --> 00:04:06.990
系统没有比单词fubar更多的含义。
system has no more meaning than the word fubar.

64
00:04:06.990 --> 00:04:09.020
除了说服你
Other than to convince you,

65
00:04:09.020 --> 00:04:13.490
这是一个类系统，因为它包含构造函数，我们将看到一些
that this is a class system because it has constructors in it and we will see a bit

66
00:04:13.490 --> 00:04:18.449
稍后，这就是构造函数基本上进入并假装它，
later that's what constructor basically comes in and pretends it,

67
00:04:18.449 --> 00:04:22.279
如果你愿意的话，这有助于技巧，我们正在处理的是一个阶级系统。
it helps the artifice if you will, that we are dealing with a class system.

68
00:04:23.829 --> 00:04:26.470
所以我们的零线环境。
So that our line zero environment.

69
00:04:26.470 --> 00:04:29.339
现在我要用同样的符号重新开始绘制图表，但是
Now I'm gonna start diagraming again with the same notation but

70
00:04:29.339 --> 00:04:31.170
我从一号线开始。
I'm gonna start with line one.

71
00:04:31.170 --> 00:04:34.090
在一号线，我们有一个车间功能，
On line one, we have a workshop function,

72
00:04:34.090 --> 00:04:38.584
我是不是要画一个圆圈，这叫做工作坊。
do I'm gonna draw a circle and it's called workshop.

73
00:04:38.584 --> 00:04:40.829
但我只想缩写w代表工作坊。
But I'm just gonna abbreviate w for workshop.

74
00:04:42.409 --> 00:04:44.870
这是存在于第一行的函数。
That's the function that exists on line one.

75
00:04:44.870 --> 00:04:48.750
但也存在于一号线上，这并不明显，
But also what exists on line one, that is not obvious,

76
00:04:48.750 --> 00:04:54.569
是存在另一个对象，该对象是作为第一行的结果而创建的，并且
is that there is another object that has been created as a result of line one and

77
00:04:54.569 --> 00:04:57.680
那个对象也是相当重要的。
that object is also pretty important.

78
00:04:57.680 --> 00:05:01.230
目前它是空的，但它将起到非常重要的作用
At the moment it's empty but it's gonna serve a pretty important purpose

79
00:05:01.230 --> 00:05:03.738
只是它太重要了，我们没有一个好的名字。
except it's so important that we don't have a good name for it.

80
00:05:04.920 --> 00:05:10.569
因此我们通过指向它的属性来引用它。
And so we refer to it by the property that points at it.

81
00:05:10.569 --> 00:05:12.879
我打赌你能猜到那房子叫什么？
And I bet you can guess what that property's called?

82
00:05:12.879 --> 00:05:17.391
那个财产叫Proto，Prototype，好吗？
That property's called proto, prototype, okay?

83
00:05:20.555 --> 00:05:22.062
&gt；&gt；Kyle Simpson：我可能正在使用文本工具，
&gt;&gt; Kyle Simpson: I could probably be using the text tool,

84
00:05:22.062 --> 00:05:24.605
但我只是不想在工具之间切换。
but I just didn't wanna mess around with switching between tools.

85
00:05:24.605 --> 00:05:26.589
这就是所谓的原型。
So that's called prototype.

86
00:05:26.589 --> 00:05:29.899
因此我们将该对象称为workshop.prototype，
So we refer to that object as workshop.prototype,

87
00:05:29.899 --> 00:05:33.540
这就是你在第四行看到的，Workshop.Prototype。
which is what you see on line four, workshop.prototype.

88
00:05:33.540 --> 00:05:36.899
这是一个奇怪的名字，比如Prototype到底是从哪里来的？
It's a bizarrely named word like where does prototype even come from?

89
00:05:36.899 --> 00:05:40.659
我试图在计算机科学中寻找原型的起源，并且
I've tried to search for the origins of prototype within computer science, and

90
00:05:40.659 --> 00:05:43.939
这充其量是一个模糊的词源。
it's a murky etymology at best.

91
00:05:43.939 --> 00:05:47.093
我想不出为什么我们用这个词Prototype或者
I can't come up with why we use this word prototype or

92
00:05:47.093 --> 00:05:49.180
它到底是什么意思。
what it's even supposed to mean.

93
00:05:49.180 --> 00:05:52.409
但在这条线上还有另外一件事，
But there is one other thing that exist on this line one,

94
00:05:52.409 --> 00:05:55.571
这就是从这里回到这里有一个联系，
which is that there is a linkage from here back to here,

95
00:05:55.571 --> 00:06:00.067
有一个属性指向后，该属性也称为构造函数。
there is a property pointing back, and that one is also called constructor.

96
00:06:02.754 --> 00:06:07.134
&gt；&gt；Kyle Simpson：再一次，它们的存在只是为了试图假装
&gt;&gt; Kyle Simpson: And again, that exist only for the purpose of trying to pretend

97
00:06:07.134 --> 00:06:11.595
对于您来说，该对象是由车间功能创建的，
to you that, that object was created by the workshop function,

98
00:06:11.595 --> 00:06:15.660
就好像车间函数是类的构造函数一样。
as if the workshop function is a constructor for classes.

99
00:06:17.610 --> 00:06:22.399
最后一个存在的东西，是一种隐藏的关系
And one final thing that exists, there is a hidden relationship

100
00:06:22.399 --> 00:06:26.629
在这个物体和这个物体之间。
between this object and this object.

101
00:06:27.759 --> 00:06:30.798
如果可以的话，我会用虚线来做。
I'm gonna do it, if I can, with a dotted line.

102
00:06:33.860 --> 00:06:36.050
这两个人之间有一种隐藏的关系。
There's a hidden relationship between those two.

103
00:06:37.579 --> 00:06:39.600
我们稍后再谈这段关系。
We'll come back to that relationship later.

104
00:06:39.600 --> 00:06:41.670
但所有这些都是一号线的结果。
But all that's a result of line one.

105
00:06:42.870 --> 00:06:44.504
你听懂了吗？
You follow me?

106
00:06:44.504 --> 00:06:46.043
好的，让我们转到四号线。
All right, let's move to line four.

107
00:06:46.043 --> 00:06:47.678
我们稍后会回到两个。
We'll come back to two later.

108
00:06:47.678 --> 00:06:48.899
让我们转到四号线。
Let's move to line four.

109
00:06:48.899 --> 00:06:54.216
在第四行，我们创建一个属性并将其添加到workshop.prototype。
On line four, we make a property and add it to workshop.prototype.

110
00:06:54.216 --> 00:06:56.740
在这种情况下，它是一个函数并不重要。
It doesn't matter that it's a function at this case.

111
00:06:56.740 --> 00:06:58.403
所以我真的要把它写进去。
So I'm just gonna literally write it in.

112
00:06:58.403 --> 00:07:04.028
我们只是将名为ask的属性直接添加到此对象。
We're just adding a property called ask directly to this object.

113
00:07:06.939 --> 00:07:08.283
你和我一起吗？
You with me?

114
00:07:08.283 --> 00:07:09.737
这就是第四行所做的。
That's what line four does.

115
00:07:09.737 --> 00:07:11.519
我们跳到八号线。
We'll skip down to line eight.

116
00:07:11.519 --> 00:07:13.420
这才是真正有趣的地方。
That's what's really interesting.

117
00:07:13.420 --> 00:07:16.170
我想回顾一下，如果你想拉出一张幻灯片或者
And I wanna review, if you wanna pull up a slide or

118
00:07:16.170 --> 00:07:20.220
翻回你的幻灯片，无论何时都会发生四件事
flip back in your slides, there were four things that happened whenever

119
00:07:20.220 --> 00:07:24.639
new运算符被放在函数调用的前面，就像它在第八行中的方式一样。
the new operator was put in front of a function call the way it is on line eight.

120
00:07:24.639 --> 00:07:28.819
现在我们想要做这四件事，我将把它们每一件都画成图表。
Now we want to do those four things and I'm gonna diagram each one of them.

121
00:07:28.819 --> 00:07:32.250
所以第一，当新的东西被放在前面时发生的第一件事
So number one, the first thing that happens when new is put in front of

122
00:07:32.250 --> 00:07:36.699
一个函数调用是，它凭空创建了一个全新的空对象。
a function call is that it creates a brand new empty object out of thin air.

123
00:07:38.120 --> 00:07:41.029
所以这就是我的全新的空虚物体。
So here is my brand new empty object out of thin air.

124
00:07:42.370 --> 00:07:46.949
然后它将该对象链接到另一个对象。
And then it links that object to another object.

125
00:07:46.949 --> 00:07:48.790
所以在这里我要做一个链接，
So here I'm gonna do a linkage,

126
00:07:50.100 --> 00:07:52.779
这个隐藏的小链接与虚线。
this little hidden linkage with the dotted line.

127
00:07:54.000 --> 00:07:56.750
它将该对象链接到另一个对象。
It links that object to another object.

128
00:07:58.779 --> 00:07:59.810
三号。
Number three.

129
00:07:59.810 --> 00:08:02.910
它调用它前面被调用的函数。
It invokes the function that it was called in front of.

130
00:08:02.910 --> 00:08:05.910
它用this关键字指向对象来调用它。
It invokes that with the this keyword pointing at the object.

131
00:08:05.910 --> 00:08:08.855
所以我们到了，现在，我要移到二号线，然后
So here we are, now, I'm gonna move to line two, and

132
00:08:08.855 --> 00:08:13.819
this关键字指向这个特定的对象，它做什么？
the this keyword is pointing at this particular object, and what does it do?

133
00:08:13.819 --> 00:08:18.779
它添加了一个名为Teacher的属性，所以我们将把Teacher
It adds a property called teacher, so we're gonna put teacher

134
00:08:18.779 --> 00:08:24.343
就在这里，我将用t-e-a缩写它。
directly right here on it, and I'm just gonna abbreviate that with t-e-a.

135
00:08:25.779 --> 00:08:27.990
我们把老师直接放在那个物体上。
We put teacher directly on that object.

136
00:08:27.990 --> 00:08:29.480
二号线就是这么做的。
That's what line two does.

137
00:08:29.480 --> 00:08:31.470
大家都跟着我吗？
Everybody following me?

138
00:08:31.470 --> 00:08:36.525
现在new关键字做的第四个也是最后一个，当它返回它时，
Now the fourth and final that the new keyword does, when it returns it back,

139
00:08:36.525 --> 00:08:41.423
如果函数没有返回对象(在本例中没有)，
if the function does not return an object, which in this case it does not,

140
00:08:41.423 --> 00:08:46.716
new关键字假设您的意思是返回this关键字，that brand
the new keyword assumes that you meant to return to the this keyword, that brand

141
00:08:46.716 --> 00:08:51.640
新创建的对象，以便返回，并将其命名为Deep JS。
new created object so that's get returned back and it gets named deepJS.

142
00:08:51.640 --> 00:08:57.224
因此，这个对象称为Deep JS。
So this object is called deepJS.

143
00:08:57.224 --> 00:08:58.490
我会叫它深沉的。
I'll call it deep.

144
00:09:03.500 --> 00:09:06.519
这就是第八行发生的事情，如果你知道行发生了什么
That's what happened with line eight and if you understand what happened with line

145
00:09:06.519 --> 00:09:09.470
同样的事情发生在第九行。
eight the exact same thing happens with line nine.

146
00:09:09.470 --> 00:09:10.942
所以我会简单地把它画进去。
So I'll simply draw it in.

147
00:09:22.770 --> 00:09:25.679
&gt；&gt；Kyle Simpson：我的画越来越差了。
&gt;&gt; Kyle Simpson: My drawing is getting much worse.

148
00:09:25.679 --> 00:09:30.549
然后它将教师属性添加到它上，然后它回来
And then it gets the teacher property added on to it and it comes back and

149
00:09:30.549 --> 00:09:33.190
在这种情况下叫做反应JS。
it's called in this case reactJS.

150
00:09:33.190 --> 00:09:37.320
所以我只说R-e代表反应JS。
So I'll just say R-e for reactJS.

151
00:09:37.320 --> 00:09:39.389
这是第九行对象。
That's that object from line nine.

152
00:09:39.389 --> 00:09:41.799
每个人都知道这些实体是从哪里来的
Everybody understand where these entities are coming from and

153
00:09:41.799 --> 00:09:43.330
他们的关系是什么？
what their relationships are?

154
00:09:43.330 --> 00:09:46.429
好的，让我们看看第11行。
Okay, so let's look at line 11.

155
00:09:46.429 --> 00:09:51.163
在该代码片段的第11行，我们说Deep JS.ask。
On line 11 of that code snippet, we say deepJS.ask.

156
00:09:52.686 --> 00:09:56.929
Deep JS对象，这里的这个对象，它有一个ask方法吗？
Does the deepJS object, this object right here, does it have an ask method?

157
00:09:58.529 --> 00:09:59.029
不是的。
It does not.

158
00:10:00.309 --> 00:10:03.750
那么为什么我们能够调用那个方法呢？
So why is it that we're able to call that method?

159
00:10:03.750 --> 00:10:06.919
因为如果我们把这些看作是类，我们的心智模型
Because our mental model if we were thinking about these as classes

160
00:10:06.919 --> 00:10:10.929
Ask方法将被复制到实例，但它不在那里。
is that the ask method would have been copied to the instance but it isn't there.

161
00:10:12.519 --> 00:10:17.409
相反，将会发生的是内部链接，称为
Instead, what is gonna happen is that internal linkage, which is called

162
00:10:17.409 --> 00:10:22.960
原型链，在SPECK中，他们使用括号，括号原型。
the prototype chain, in Speck, they use bracket, bracket prototype.

163
00:10:22.960 --> 00:10:27.725
它被称为原型链，因此在内部有一个来自
It's called the prototype chain, and so internally there's a linkage from

164
00:10:27.725 --> 00:10:31.330
深层物体，这个就在这里，一直到这个物体。
the deep object, this one right here, up to this object.

165
00:10:31.330 --> 00:10:34.179
所以当我们在一个对象上寻找一个属性并且
So when we look for a property on an object and

166
00:10:34.179 --> 00:10:38.349
它不存在，默认情况下，我们所做的就是做。
it doesn't exist, by default, what we do is do do do do do do do.

167
00:10:38.349 --> 00:10:42.461
我们向上走一层到链中的下一个对象
We walk up one level to the next object in the chain and

168
00:10:42.461 --> 00:10:44.903
我们问它有没有那个财产。
we ask if it has that property.

169
00:10:44.903 --> 00:10:46.129
在这种情况下，确实是这样。
Which in this case, it does.

170
00:10:46.129 --> 00:10:47.960
它有一个Ask方法。
It has an ask method.

171
00:10:47.960 --> 00:10:52.621
当我们调用ask方法(本质上是第五行)时，
When we invoke the ask method, which was line five essentially,

172
00:10:52.621 --> 00:10:55.519
this关键字将指向什么？
what is the this keyword gonna point at?

173
00:10:57.730 --> 00:11:00.029
this关键字将指向哪个对象？
Which object is the this keyword gonna point at?

174
00:11:01.169 --> 00:11:03.179
它会指向这个物体。
It's gonna point at this object.

175
00:11:03.179 --> 00:11:03.679
为什么？
Why?

176
00:11:04.940 --> 00:11:06.990
因为呼叫地点是11号线。
Because the call site is line 11.

177
00:11:06.990 --> 00:11:11.629
调用站点表示在Deep JS的上下文中调用该函数。
The call site says invoke that function in the context of deepJS.

178
00:11:11.629 --> 00:11:13.940
我们从哪里找到函数并不重要。
It doesn't matter where we find the function from.

179
00:11:13.940 --> 00:11:16.960
在这种情况下，我们在原型链上找到了它，但这并不重要，
In this case, we found it up the prototype chain, but it doesn't matter,

180
00:11:16.960 --> 00:11:20.399
我们仍然使用调用站点来调用它。
we still use the call site to invoke it.

181
00:11:20.399 --> 00:11:25.100
您不习惯对JavaScript的管道进行如此深入的思考。
You're not used to generally thinking this deep about the plumbing of JavaScript.

182
00:11:25.100 --> 00:11:30.070
但我认为重要的是，不要有不正确的思维模式。
But I think it's important, critical that you not have incorrect models of thinking.

183
00:11:32.279 --> 00:11:35.120
好吧。所以如果我们可以这么说的话，
All right. So if we can say that with deepJS,

184
00:11:35.120 --> 00:11:38.519
我们也可以用React对象来说。
we can also say that with the react object.

185
00:11:38.519 --> 00:11:43.179
行14上的React对象当我们说.ask时，会发生完全相同的事情。
The react object on line 14 when we say .ask, the exact same thing happens.

186
00:11:43.179 --> 00:11:46.279
我们没有问的方法，但我们去做。
We don't have an ask method but we go do do do do do do.

187
00:11:46.279 --> 00:11:50.929
我们在调用ask方法时发现，正是这个关键字指出了我们的
We find the ask method when it is invoked, it's this keyword is pointing out our

188
00:11:50.929 --> 00:11:54.769
对象，所以当它说这个，老师，它正在访问哪个属性？
object so when it says this .teacher which property is it accessing?

189
00:11:56.230 --> 00:11:57.058
就在这里。
This one right here.

190
00:11:59.278 --> 00:12:01.320
&gt；&gt；Kyle Simpson：这真是太棒了，对吧？
&gt;&gt; Kyle Simpson: That's awesome right?

191
00:12:01.320 --> 00:12:05.638
我们能够与潜在的无限数量的方法共享一种方法
We're able to share one method with potentially an infinite number of

192
00:12:05.638 --> 00:12:10.760
实例，它们都能够共享它，因为这个绑定行为和
instances and they're all able to share it because of the this binding behavior and

193
00:12:10.760 --> 00:12:12.389
那个原型链接。
that prototype linkage.

194
00:12:13.879 --> 00:12:16.000
这实际上是一个非常棒的系统。
It's actually a really awesome system.

195
00:12:16.000 --> 00:12:17.924
我根本不是说原型或者
I'm not at all saying that the prototype or

196
00:12:17.924 --> 00:12:22.500
this关键字系统不好，我只是说可能有点太
the this keyword system is bad, I'm only saying that maybe it's a little too

197
00:12:22.500 --> 00:12:26.070
限制只能通过类的镜头来思考这个问题。
limiting to try to think about this only through the lens of classes.

198
00:12:27.169 --> 00:12:31.610
也许系统实际上比类设计模式更强大。
Maybe the system is actually much more powerful than the class design pattern.

199
00:12:31.610 --> 00:12:37.490
如果你切换到下一张幻灯片，你会看到建筑物的示意图。
If you switch to your next slide you'll see the diagram of the buildings.

200
00:12:38.539 --> 00:12:42.490
我现在要切换回幻灯片，所以
And I'm gonna switch back to the slides now, so

201
00:12:42.490 --> 00:12:47.960
如果你想复制下来或不复制下来，没关系，我的小坏画。
if you wanna copy this down or not copy it down that's okay, my little bad drawing.

202
00:12:47.960 --> 00:12:51.889
但现在至少你明白了一些基本行为的来龙去脉
But now at least you understand where some of those fundamental behaviors are coming

203
00:12:51.889 --> 00:12:53.450
这些关系来自于。
from, those relationships are coming from.
