WEBVTT

1
00:00:00.130 --> 00:00:00.950
&GT；&GT；凯尔·辛普森：那么让我们开始吧。
&gt;&gt; Kyle Simpson: So let's dive in.

2
00:00:03.229 --> 00:00:07.580
我们将讨论this关键字，this关键字是可能
We're gonna talk about the this keyword, and the this keyword is maybe

3
00:00:07.580 --> 00:00:11.179
所有JavaScript特性中最令人困惑的特性。
the most perpetually confused of all the JavaScript features.

4
00:00:11.179 --> 00:00:15.179
我可以想象如果我们调查了这里的每个人，或者
I would imagine if we polled everyone here, or

5
00:00:15.179 --> 00:00:19.489
在网上看，或者以后再看这个，你几乎可以肯定
watching online, or watching this at a later time, you've almost certainly been

6
00:00:19.489 --> 00:00:23.559
在您的JavaScript职业生涯中的某个时候对这个关键字感到沮丧。
frustrated by this keyword at some point in your JavaScript career.

7
00:00:23.559 --> 00:00:26.920
这是可悲的，因为它是一个非常强大的机制，而且
Which is sad because it's a very powerful mechanism, and

8
00:00:26.920 --> 00:00:30.800
这也是可悲的，因为它不一定是那样的。
it's also sad because it didn't have to be that way.

9
00:00:30.800 --> 00:00:33.890
这并不一定会让我们感到困惑，但是
It didn't have to be that this would be confusing to us, but

10
00:00:33.890 --> 00:00:36.750
我认为很多人被this关键字搞糊涂了。
I think a lot of people got confused by the this keyword.

11
00:00:36.750 --> 00:00:41.060
很简单，因为没有人告诉他们停止尝试使它像这样的关键字在
Simply because no one ever told them stop trying to make it like this keyword in

12
00:00:41.060 --> 00:00:42.429
其他语言。
other languages.

13
00:00:42.429 --> 00:00:44.244
所以我认为重要的是
So I think it's important for

14
00:00:44.244 --> 00:00:47.738
让我们把这些东西在其他语言中的工作方式放在一边。
us to set aside how these things work in other languages.

15
00:00:47.738 --> 00:00:54.600
并不是说这些都是不重要的背景，而是在某种程度上它对你有很大的帮助。
Not that those are unimportant context, but to the extent that it helps you great.

16
00:00:54.600 --> 00:00:58.560
但是在某种程度上，其他一些语言的行为阻碍了您，并且
But to the extent that some other languages behavior holds you back, and

17
00:00:58.560 --> 00:01:03.420
使您更难理解或利用JavaScript。
makes it so it's harder for you to understand or leverage JavaScript.

18
00:01:03.420 --> 00:01:06.420
那是你应该留在门口的行李，而且
That is baggage that you should leave at the door, and

19
00:01:06.420 --> 00:01:09.640
更具体地关注JavaScript是做什么的？
focus more specifically on what is JavaScript do?

20
00:01:09.640 --> 00:01:12.310
原来这个关键字是
Well it turns out that this key word is

21
00:01:12.310 --> 00:01:15.870
实际上比你想象的更直截了当。
actually a bit more straightforward than you would imagine.

22
00:01:15.870 --> 00:01:20.500
它比你想象的更强大，而且刚刚被解释
It's more powerful than you would imagine, and it's just been explained and

23
00:01:20.500 --> 00:01:21.969
教学不正确。
taught incorrectly.

24
00:01:21.969 --> 00:01:23.950
所以我们会给这个话题带来一些清晰度。
So we're gonna bring some clarity to this topic.

25
00:01:25.700 --> 00:01:31.549
函数的this表示或引用该调用的执行上下文。
A function's this represents or references an execution context for that call.

26
00:01:31.549 --> 00:01:34.819
在其中进行调用的上下文。
A context in which that call was being made.

27
00:01:34.819 --> 00:01:39.840
这完全取决于函数的调用方式。
And that is determined entirely by how the function is called.

28
00:01:41.729 --> 00:01:46.930
换句话说，这个关键字赋值，如果你看一个函数
In other words, that this key word assignment, if you look at a function that

29
00:01:46.930 --> 00:01:52.134
包含此关键字，则根据调用函数的方式分配该关键字。
has this keyword in it, it is assigned based upon how the function is called.

30
00:01:52.134 --> 00:01:56.487
这是违反直觉的部分，因为大多数人认为你可以看看
Which is the counterintuitive part because most people think that you could look at

31
00:01:56.487 --> 00:02:00.650
一个函数，并计算出这个关键字将指出什么。
a function, and figure out what this keyword is gonna point out.

32
00:02:00.650 --> 00:02:04.560
但函数的定义根本无关紧要，
But the definition of the function doesn't matter at all,

33
00:02:05.780 --> 00:02:07.870
确定this关键字。
to determining the this keyword.

34
00:02:07.870 --> 00:02:11.676
唯一重要的是如何调用该函数？
The only thing that matters is how does that function get invoked?

35
00:02:13.814 --> 00:02:16.002
&gt；&gt；Kyle Simpson：如果你听起来很熟悉，
&gt;&gt; Kyle Simpson: If that sounds familiar to you,

36
00:02:16.002 --> 00:02:21.900
这是因为我们已经讨论过灵活的可重用上下文。
it's because we've sort of already talked about a flexible reusable context.

37
00:02:21.900 --> 00:02:25.431
这就是我们在谈论动态作用域时所说的，
It was what we talk about when we talk about dynamic scoping,

38
00:02:25.431 --> 00:02:28.430
以及你需要我们讨论的范围。
and the scope you need of our discussion.

39
00:02:28.430 --> 00:02:33.668
换句话说，这些关键字是JavaScript动态版本
So in other words, that these keyword is JavaScript's version of dynamic

40
00:02:33.668 --> 00:02:38.430
范围，如果它是具有灵活的，可重用的行为的这种方式的话。
scope if it's this way of having as flexible, reusable behavior.

41
00:02:38.430 --> 00:02:42.210
所以在这里我有一个函数，这个函数就是这样的，或者我很抱歉，
So here I have a function that is this aware, or I'm sorry,

42
00:02:42.210 --> 00:02:43.889
我没有这样的功能。
I don't have a function that is this aware.

43
00:02:43.889 --> 00:02:47.400
但你记得我有一个函数在动态作用域中
But you remember that I have a function that in a dynamic scope

44
00:02:49.599 --> 00:02:51.610
动态环境感知。
dynamically context aware.

45
00:02:51.610 --> 00:02:57.272
所以不是让老师去找老师，在第4行，当它引用
So instead of asking teacher to get the teacher, on line 4, when it references

46
00:02:57.272 --> 00:03:02.526
老师，不是试图通过线1得到老师，而是转到线8。
teacher, instead of trying to line 1 to get teacher, it goes to line 8.

47
00:03:02.526 --> 00:03:07.454
因为Ask是从第10行调用的，所以它是从另一个类作用域调用的，
Because ask was called from line 10 it was called from the other class scope,

48
00:03:07.454 --> 00:03:09.634
这就是动态作用域的作用。
that's what dynamic scope does.

49
00:03:09.634 --> 00:03:12.945
在JavaScript中我们有非常相似的东西，但是
And in JavaScript we have something very similar, but

50
00:03:12.945 --> 00:03:17.627
它不是基于作用域边界，也不是从哪里调用的，
it's not based upon scope boundaries, or where something's called from,

51
00:03:17.627 --> 00:03:20.304
它基于函数的调用方式。
it's based on how the function was called.

52
00:03:20.304 --> 00:03:22.431
这就是我们最终要解决这个问题的方法。
And that's how we're gonna end up resolving it.

53
00:03:22.431 --> 00:03:26.537
所以这里我有一个Ask函数的版本，它是这种感知的，
So here I have a version of the ask function which is this aware,

54
00:03:26.537 --> 00:03:29.491
它使用this关键字，所以它是这个感知的。
it uses a this keyword, so it's this aware.

55
00:03:29.491 --> 00:03:33.111
你会注意到我在别的地方打电话，但是
And you'll notice that I'm calling it from some other location but

56
00:03:33.111 --> 00:03:34.719
那不重要。
that doesn't matter.

57
00:03:34.719 --> 00:03:37.539
不是我从哪里打的，而是我怎么打的。
It's not where I call from, it's how I call it.

58
00:03:39.460 --> 00:03:44.150
如果我在这里使用ask.call，我是说使用这个
If I use ask.call here, I am saying use this

59
00:03:44.150 --> 00:03:49.449
特定对象作为this关键字，并在该上下文中调用函数。
particular object as your this keyword, and invoke the function in that context.

60
00:03:49.449 --> 00:03:53.750
所以这个关键字在这个特殊的情况下，最终会指向我的上下文。
So this keyword in this particular case, will end up pointing at my context.

61
00:03:54.840 --> 00:03:58.379
所以你可以看到这种动态的灵活性在这里发生。
So you see that sort of dynamic flexibility happening here.

62
00:03:58.379 --> 00:04:03.659
你看，我可以调用同样的Ask函数，有很多不同的方式。
You see that I could call that same ask function, lots of different ways.

63
00:04:03.659 --> 00:04:08.669
并为该关键字点提供许多不同的上下文对象，
And provide lots of different context objects for the this keyword point on,

64
00:04:08.669 --> 00:04:12.870
这就是this关键字的动态灵活可重用性。
that's the dynamic flexible reusability of the this keyword.

65
00:04:12.870 --> 00:04:15.661
这就是为什么它存在的方式，它存在如此
That's why it exists by the way, it exists so

66
00:04:15.661 --> 00:04:19.343
我们可以在这些不同的上下文中调用函数。
that we can invoke functions in these different contexts.

67
00:04:22.934 --> 00:04:27.696
&gt；&gt；Kyle Simpson：原来有四种不同的方式
&gt;&gt; Kyle Simpson: So it turns out that there are four different ways to

68
00:04:27.696 --> 00:04:30.220
调用函数。
invoke a function.

69
00:04:30.220 --> 00:04:33.509
这对你来说可能是新闻，因为你可能是
That might come as news to you, because you might be

70
00:04:33.509 --> 00:04:37.980
习惯于认为函数只以一种方式调用。
used to thinking about functions as only being invoked in one way.

71
00:04:37.980 --> 00:04:41.170
在JavaScript中，有四种不同的方法可以做到这一点，每种方法都是
In JavaScript there are four different ways to do so, and each one of them is

72
00:04:41.170 --> 00:04:45.060
要回答的问题是，this关键字有什么不同？
gonna answer the question, what is the this keyword differently?

73
00:04:45.060 --> 00:04:47.829
所以我们只需要学习这四种方法。
So we just need to learn those four ways.

74
00:04:47.829 --> 00:04:51.430
这个关键字在概念上如果你能回忆起我们的讨论，
This keyword conceptually if you can recall from our discussion,

75
00:04:51.430 --> 00:04:53.370
建筑的隐喻。
the metaphor of the building.

76
00:04:53.370 --> 00:04:57.159
在词汇范围中，我们从当前范围开始，
In lexical scope land, we start at the current scope,

77
00:04:57.159 --> 00:04:59.899
并以我们的方式向全球范围发展。
and work our way up to the global scope.

78
00:04:59.899 --> 00:05:02.560
好的，在这里，我们将涉及到一个不同的建筑。
Well here we are gonna have a different building involved.

79
00:05:02.560 --> 00:05:07.199
我们要开始我们的方式，我们要从建筑物的底部开始。
We're gonna start our way, we're gonna to start at the bottom of a building.

80
00:05:07.199 --> 00:05:09.769
但真正的问题是，哪栋楼？
But the real question is, which building?

81
00:05:09.769 --> 00:05:14.922
如果有人邀请你明天和他们一起吃午饭，他们说来
If somebody asked you to meet them for lunch tomorrow, and they said come

82
00:05:14.922 --> 00:05:21.185
317号办公室见我，你自然的第一个问题是，但是什么楼？
meet me in office 317, your natural first question is gonna be, but what building?

83
00:05:21.185 --> 00:05:24.028
因为在我的城市有很多办公室317。
Cause there's lots of office 317's in my city.

84
00:05:25.129 --> 00:05:29.310
所以我们需要了解我们谈论的是哪个特定的背景
So we need to understand which particular context we're talking about

85
00:05:29.310 --> 00:05:31.970
在我们了解如何在这种情况下寻找事物之前。
before we understand how we look for things in that context.

86
00:05:32.970 --> 00:05:37.850
哪个建筑的问题是我们的this关键字规则将告诉我们什么。
And the which building question is what our this keyword rules are gonna tell us.
