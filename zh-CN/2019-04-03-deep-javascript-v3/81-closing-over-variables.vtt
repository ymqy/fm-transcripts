WEBVTT

1
00:00:00.340 --> 00:00:02.790
&gt；&gt；Kyle Simpson：下面是一个尝试
&gt;&gt; Kyle Simpson: Here's an example that tries to

2
00:00:02.790 --> 00:00:04.679
指出这不是快照。
point out that it's not a snapshot.

3
00:00:04.679 --> 00:00:08.500
而这似乎是开发人员经常遇到的挫折感之一。
And this is one of the perpetual frustrations that developers seem to have.

4
00:00:08.500 --> 00:00:12.660
他们得到了这个想法，好的结束，但是他们立即跳了起来
They get this idea, okay closure, but then they immediately jump

5
00:00:12.660 --> 00:00:17.140
这意味着我正在拍摄一个值的快照。
to the assumption that that means that I'm snapshoting a value.

6
00:00:17.140 --> 00:00:20.250
我在某个时刻捕捉到了一些价值。
That I'm capturing some value at some moment.

7
00:00:20.250 --> 00:00:23.469
这不是结束的意思。
That is not what closure is.

8
00:00:23.469 --> 00:00:28.050
事实上，闭包与值根本没有任何关系。
Closure has not got anything to do with the values at all, as a matter of fact.

9
00:00:28.050 --> 00:00:30.269
你不会因为一个值而关闭。
You don't close over a value.

10
00:00:30.269 --> 00:00:33.219
我在博客和书籍中见过无数次。
I've seen that countless times in blogs and books.

11
00:00:33.219 --> 00:00:34.810
没有这样的事情，那是胡说八道，
There is no such thing, that is nonsense,

12
00:00:34.810 --> 00:00:37.159
没有关闭价值这回事。
there's no such thing as closing over a value.

13
00:00:37.159 --> 00:00:41.500
您关闭了一个变量，这意味着您有一个到该变量的链接。
You close over a variable, which means you have a linkage to that variable.

14
00:00:41.500 --> 00:00:43.689
这意味着在你访问它的时候，
Which means at the time you access it,

15
00:00:43.689 --> 00:00:49.299
你看到的是那个变量在那个时刻的值，而不是它以前的值。
you're seeing whatever value that variable has at that moment, not it had before.

16
00:00:49.299 --> 00:00:53.170
在本例中，当我在第3行上创建myTeacher函数时，
Here in this example when I create the myTeacher function on line 3,

17
00:00:53.170 --> 00:00:56.509
那一刻老师就有了凯尔的价值。
at that moment teacher has the value Kyle.

18
00:00:56.509 --> 00:00:59.969
然后后来我把老师换成了价值苏西。
And then later I change teacher to the value Suzy.

19
00:00:59.969 --> 00:01:05.125
然后是第9行，当我执行函数时，它将打印什么？
And then line 9 when I execute the function what's it gonna print?

20
00:01:05.125 --> 00:01:10.530
不是Kyle，我们没有关闭Kyle的值，我们关闭了变量教师。
Not Kyle, we didn't close over the value Kyle, we closed over the variable teacher.

21
00:01:10.530 --> 00:01:15.019
当我们执行该函数时，我们将访问它的值。
And when we execute that function, we're gonna access the value of it.

22
00:01:15.019 --> 00:01:19.260
它是一个指向您关闭的所有变量的实时链接。
It is a live link to all the variables that you are closed over.

23
00:01:19.260 --> 00:01:21.849
所以不要把闭包看作是获取价值，
So don't think of closure as capturing values,

24
00:01:21.849 --> 00:01:24.382
可以把它看作是保留对变量的访问。
think of it as preserving access to variables.

25
00:01:28.599 --> 00:01:31.617
&gt；&gt；Kyle Simpson：这个咬人最多，最经典的地方
&gt;&gt; Kyle Simpson: The place where this bites people the most, the most classic

26
00:01:31.617 --> 00:01:35.759
规范示例是，每当您尝试在for循环内创建闭包时，或者
canonical example, is whenever you try to create closures inside of a for loop, or

27
00:01:35.759 --> 00:01:38.299
任何一种循环机制的内部。
inside of any kind of looping mechanism.

28
00:01:38.299 --> 00:01:41.689
通常不使用计时器，但这只是一个方便的例子。
Not usually with timers, but that's just a convenient illustration here.

29
00:01:41.689 --> 00:01:45.566
通常情况下，这就像将单击处理程序分配给按钮数组
Normally it's like assigning click handlers to an array of buttons for

30
00:01:45.566 --> 00:01:46.152
例如。
example.

31
00:01:46.152 --> 00:01:51.865
这个函数，在每次迭代中创建，它的外观如下
And this function, that is being created in each iteration, it has the appearance

32
00:01:51.865 --> 00:01:56.531
它所做的是在每次迭代中关闭I值。
that what it's doing is closing over the i value in each iteration.

33
00:01:56.531 --> 00:02:01.022
所以我们期待它打印出I 1，I 2，I 3，但是
So we're expecting it to print out i 1, i 2, i 3, but

34
00:02:01.022 --> 00:02:04.290
当我们运行时，它会打印出4，4，4。
when we run it it prints out 4, 4, 4.

35
00:02:04.290 --> 00:02:05.290
为什么？
Why?

36
00:02:05.290 --> 00:02:07.409
因为只有一个i变量。
Cuz there's only one i variable.

37
00:02:08.879 --> 00:02:13.099
第一行有一个i变量，并且只有一个变量，并且
There's an i variable on line 1 and there's only one of them, and

38
00:02:13.099 --> 00:02:15.060
我们有三个功能。
we have three functions.

39
00:02:15.060 --> 00:02:19.129
如果我们想要有三个单独的值，我们需要多少个变量？
If we wanted to have three separate values, how many variables would we need?

40
00:02:21.509 --> 00:02:22.770
这不是难数学。
This is not hard math.

41
00:02:22.770 --> 00:02:25.479
如果我们想要三个单独的值，我们需要多少个变量？
If we wanted three separate values, how many variables do we need?

42
00:02:25.479 --> 00:02:27.039
我们需要三个变量，对吧？
We need three variables, right?

43
00:02:27.039 --> 00:02:31.289
而且只有一个，所以它当然只能有一个值。
And there's only one, so of course it can only have the one value.

44
00:02:31.289 --> 00:02:36.192
在这种情况下，它将具有发生的值
And in this case, it's gonna have the value that occurs

45
00:02:36.192 --> 00:02:40.163
在循环的末尾，即值4。
at the end of the loop, which is the value 4.

46
00:02:40.163 --> 00:02:44.699
我们不能有效地使用封闭性，除非我们将自己与之分开
We can't effectively use closure until we separate ourselves from that

47
00:02:44.699 --> 00:02:46.867
捕获价值的感知。
perception of capturing values.

48
00:02:46.867 --> 00:02:51.360
它不是捕获一个值，保留对变量的访问，好吗？
It's not capturing a value, preserving access to a variable, okay?

49
00:02:51.360 --> 00:02:55.509
所以，如果我们想解决这个问题，而且
So, if we wanted to solve this problem, and

50
00:02:55.509 --> 00:03:00.430
我们分析了，我需要单独的变量，我们已经看到
we analyzed that, I need separate variables, we've seen

51
00:03:00.430 --> 00:03:06.126
如何创建变量的几个不同示例。
several multiple different examples of how to create variables.

52
00:03:06.126 --> 00:03:10.069
如果我们想创建多个同名变量，
If we wanna create more than one variable with the same name,

53
00:03:10.069 --> 00:03:12.400
我们需要做新的范围，对吧？
we need to make new scopes, right?

54
00:03:12.400 --> 00:03:16.250
所以我们可以在这里做一个不确定的，但是现在我们有了ES 6更常见的方法，
So we could do an iffy here, but the much more common way now that we have ES six,

55
00:03:16.250 --> 00:03:17.810
现在我们有了块显微镜，
now that we have blockscoping,

56
00:03:17.810 --> 00:03:22.530
只是在迭代中粘贴一个块范围的声明。
is to just stick a block scoped declaration in the iteration.

57
00:03:22.530 --> 00:03:27.639
现在让j在每次4循环迭代时运行。
So now let j is going to run every time the 4 loop iterates.

58
00:03:27.639 --> 00:03:31.579
它将在循环的整个新迭代中创建一个全新的j。
And it's gonna create a whole new j in that whole new iteration of the loop.

59
00:03:32.740 --> 00:03:37.319
当我们在第4行关闭它时，我们将关闭一个全新的j。
When we close over it on line 4, we are closing over a whole new j.

60
00:03:38.579 --> 00:03:43.853
有三个独立的js，因此我们得到它们中的值1，2和3。
There are three separate js and therefore we get the values in them 1, 2, and 3.

61
00:03:43.853 --> 00:03:48.468
看到捕获值和关闭变量之间的区别了吗？
See the difference between capturing a value and closing over a variable?

62
00:03:48.468 --> 00:03:52.995
事实证明，有一个甚至，我认为更好的一些人可能会说更狡猾，但
It turns out there's an even, I think better some people might say trickier, but

63
00:03:52.995 --> 00:03:56.509
有一个更好的方法来解决这个问题。
there's an even better way of solving this problem.

64
00:03:56.509 --> 00:04:01.199
因为我一直在为var i和
Because that perpetual problem of I'm doing for var i and

65
00:04:01.199 --> 00:04:03.599
我的闭包没有捕捉到价值。
my closures aren't capturing the value.

66
00:04:03.599 --> 00:04:07.960
这对于JavaScript开发人员来说已经有20年的时间了。
That's been a problem for JavaScript developers for like 20 years.

67
00:04:09.069 --> 00:04:12.997
他们决定用iOS6，好吧，为什么我们不直接去
They decided with iOS six, well, why don't we just go ahead and

68
00:04:12.997 --> 00:04:15.394
这样，如果你在你的
make it so that if you use a let on your for

69
00:04:15.394 --> 00:04:19.201
循环我们将自动为每个迭代创建一个新的i。
loop we'll automatically create a new i for each iteration.

70
00:04:19.201 --> 00:04:22.704
而不是仅仅创建一个属于整个
Instead of creating just one that belongs to the whole for

71
00:04:22.704 --> 00:04:26.437
循环这里，每一次迭代都会有一个全新的i。
loop here there's gonna be a brand new i for each iteration.

72
00:04:26.437 --> 00:04:32.560
这意味着闭合就会神奇地起作用，好吗？
Which means the closure just magically works, okay?

73
00:04:32.560 --> 00:04:37.149
关键是如果您需要对您关闭多个不同的值
The point is if you need multiple different values being closed over you

74
00:04:37.149 --> 00:04:38.379
需要多个不同的变量。
need multiple different variables.

75
00:04:39.949 --> 00:04:43.106
您需要关闭不同的变量，而不是试图捕获值。
You need to close over different variables, not try to capture values.

76
00:04:46.259 --> 00:04:46.935
凯尔·辛普森：什么事？
&gt;&gt; Kyle Simpson: Yes?

77
00:04:46.935 --> 00:04:49.463
&gt；&gt；扬声器2：所以，I实际上是在里面定义的，
&gt;&gt; Speaker 2: So, the i is defined actually inside,

78
00:04:49.463 --> 00:04:55.490
尽管它是这样写的，但是它实际上是在块中定义的吗？
even though it's written this way, but is it actually then defined inside the block?

79
00:04:55.490 --> 00:04:56.529
基本上是这样吗？
Is that basically what it is?

80
00:04:56.529 --> 00:05:00.021
&gt；&gt；Kyle Simpson：是的，它被解释为好像每个迭代都有一个新的
&gt;&gt; Kyle Simpson: Yes, it is interpreted as if each iteration there's a new

81
00:05:00.021 --> 00:05:04.653
声明，JavaScript负责为其赋值
declaration of i, and JavaScript takes care of assigning it the value that it

82
00:05:04.653 --> 00:05:08.310
如果它的表亲在前一次迭代结束时有。
had that its cousin had at the end of the previous iteration.

83
00:05:08.310 --> 00:05:10.290
它会帮你把所有的东西都连接起来。
It wires up all that stuff for you.

84
00:05:10.290 --> 00:05:12.839
&gt；&gt；演讲者3：是否还有其他情况也适用或
&gt;&gt; Speaker 3: Is there any other case were that applies as well or

85
00:05:12.839 --> 00:05:13.839
只有这个吗？
is that the only one?

86
00:05:14.899 --> 00:05:19.332
&gt；&gt；Kyle Simpson：所有For循环形式都有For let方差。
&gt;&gt; Kyle Simpson: All of the for loop forms have a for let variance.

87
00:05:19.332 --> 00:05:23.567
所以在这里，我们必须让大家知道。
So for here, we have for let of.

88
00:05:23.567 --> 00:05:28.358
我们已经让，&gt；&gt；扬声器4：每个？
We have let, &gt;&gt; Speaker 4: Each?

89
00:05:28.358 --> 00:05:30.555
&gt；&gt；Kyle Simpson：嗯，每个都不是句法形式。
&gt;&gt; Kyle Simpson: Well, for each isn't a syntactic form.

90
00:05:30.555 --> 00:05:33.954
这是一个迭代器，所以你已经得到了一个函数。
That's a iterator, so you already get a function with that one.

91
00:05:35.581 --> 00:05:40.316
&gt；&gt；Kyle Simpson：[咳嗽]但是是的，for，for of，for in，这三个句法
&gt;&gt; Kyle Simpson: [COUGH] But yeah, for, for of, and for in, those three syntactic

92
00:05:40.316 --> 00:05:45.240
for循环自动在迭代中创建它们的东西。
for loops automatically make their thing inside of the iteration.

93
00:05:50.062 --> 00:05:52.117
&GT；&GT；Kyle Simpson：顺便说一下，就像一个小细节，
&gt;&gt; Kyle Simpson: By the way, just as a little tiny detail,

94
00:05:52.117 --> 00:05:54.480
不是很多人会遇到这个。
not that many people are gonna run across this.

95
00:05:54.480 --> 00:05:56.769
但如果你真的尝试使用常量，
But if you did try to use a const there,

96
00:05:56.769 --> 00:06:01.238
你会得到一个错误，因为I+正在试图修改变量。
you're gonna get an error because that i++ is trying to modify the variable.

97
00:06:03.420 --> 00:06:05.196
所以在这里你需要使用一个let。
So here you would need to use a let.

98
00:06:05.196 --> 00:06:10.759
所以闭合是一种联系的保存
So closure is a preservation of the linkage

99
00:06:10.759 --> 00:06:15.310
变量，而不是值的捕获。
to a variable, not the capturing of the value.
