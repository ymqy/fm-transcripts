WEBVTT

1
00:00:00.130 --> 00:00:03.980
&gt；&gt；Speaker 1：我们一直在讨论编译阶段的函数，
&gt;&gt; Speaker 1: We've been talking about functions in the compilation phase,

2
00:00:03.980 --> 00:00:10.250
将其标识符作为彩色大理石添加到封闭范围中。
adding their identifier as a colored marble in the enclosing scope.

3
00:00:10.250 --> 00:00:13.720
在这个例子中，我们有一个函数老师在一号线上，
In this example, we have a function teacher on line one,

4
00:00:13.720 --> 00:00:15.567
老师会是什么颜色的大理石？
what color marble is teacher gonna be?

5
00:00:15.567 --> 00:00:16.532
&gt；&gt；扬声器2：红色。
&gt;&gt; Speaker 2: Red.

6
00:00:16.532 --> 00:00:18.780
&gt；&gt；扬声器1：红色，好的。
&gt;&gt; Speaker 1: Red, okay.

7
00:00:18.780 --> 00:00:21.510
但是让我们看看第三行，因为行看起来有点不同。
But let's look at line three because line looks a little bit different.

8
00:00:21.510 --> 00:00:24.379
第三行可能看起来更像一些函数，
And line three might look a little bit more like some of the functions that

9
00:00:24.379 --> 00:00:27.230
你见过更常见的。
you've seen more commonly.

10
00:00:27.230 --> 00:00:30.699
也许看到老式的功能装饰会比较少见，
It's maybe a little less common to see the old school function decoration,

11
00:00:30.699 --> 00:00:34.409
虽然我强烈喜欢功能装饰只是为了记录。
although I strongly prefer function decorations just for the record.

12
00:00:34.409 --> 00:00:39.320
但现在大多数人似乎喜欢声明变量和
But most people seem to like these days to declare variables and

13
00:00:39.320 --> 00:00:43.770
为它们分配函数，通常它们甚至使用常量而不是var。
assign functions to them and usually they even use a constant instead of a var.

14
00:00:43.770 --> 00:00:46.810
所以这可能看起来有点像你最近看到的。
So that might look a little bit like what you've seen recently.

15
00:00:46.810 --> 00:00:48.231
所以那里发生了什么
So what's happening there and

16
00:00:48.231 --> 00:00:50.918
这和一号线的情况有什么不同吗？
is it any different than what's happening with line one?

17
00:00:50.918 --> 00:00:55.881
好的，请记住，在编译时可能发生的事情之间是有区别的
Well, remember, there is a difference between what can happen at compile time

18
00:00:55.881 --> 00:00:58.334
以及在执行时会发生什么。
and what can happen at execution time.

19
00:00:58.334 --> 00:01:02.731
因此，我们知道将创建一个名为myTeacher的标识符，并且
So, we do know that an identifier called myTeacher is going to be created and

20
00:01:02.731 --> 00:01:04.668
它会是什么颜色的大理石？
what color marble is it gonna be?

21
00:01:04.668 --> 00:01:05.439
&gt；&gt；扬声器2：红色。
&gt;&gt; Speaker 2: Red.

22
00:01:05.439 --> 00:01:07.262
&gt；&gt；扬声器1：它将是红色的。
&gt;&gt; Speaker 1: It's gonna be red.

23
00:01:07.262 --> 00:01:10.701
我们知道那里有一个叫做另一个Teacher的函数，所以
We do know that there's a function called anotherTeacher there, so

24
00:01:10.701 --> 00:01:12.789
我们至少需要为它创建一个桶。
we need to create a bucket for it at least.

25
00:01:12.789 --> 00:01:14.700
我们需要做一个蓝色的桶。
We need to make a blue bucket.

26
00:01:14.700 --> 00:01:18.069
但因为该函数不是声明，
But because that function is not a declaration,

27
00:01:18.069 --> 00:01:21.439
我们不会以同样的方式处理它的大理石颜色。
we're not gonna handle its marble color in the same way.

28
00:01:22.840 --> 00:01:26.460
这里的关键区别是另一个教师标识符，
The key difference here is that the anotherTeacher identifier,

29
00:01:26.460 --> 00:01:31.400
第三行的这个标识符将会变成一个大理石
the one right here on line three, that identifier is going to end up as a marble

30
00:01:31.400 --> 00:01:35.049
在编译时，但是它将是一个不同于你预期的颜色的大理石。
at compile time but it's gonna be a different colored marble than you expect.

31
00:01:35.049 --> 00:01:38.129
这不是红色的大理石，是蓝色的大理石。
It's not a red marble, it's a blue marble.

32
00:01:39.150 --> 00:01:40.870
所以这里有一个关键的区别。
So there is a key difference here.

33
00:01:40.870 --> 00:01:45.526
这称为与行相反的函数表达式，
This is called a function expression as opposed to what line one is,

34
00:01:45.526 --> 00:01:47.989
称为函数声明。
is called a function declaration.

35
00:01:47.989 --> 00:01:52.670
关键的区别之一，我们将在整个课程中看到更多，但是
And one of the key differences, and we'll see more throughout the course but

36
00:01:52.670 --> 00:01:56.418
函数声明和函数之间的关键区别之一
one of the key differences between function declarations and

37
00:01:56.418 --> 00:02:00.813
函数表达式，即函数声明及其名称，
function expressions, is that function declarations and their name,

38
00:02:00.813 --> 00:02:05.783
他们把他们的大理石贴在围栏上，所以我们在一号线上做了一个红色的大理石
they attach their marble to the enclosing scope, so we make a red marble on line one

39
00:02:05.783 --> 00:02:10.207
而函数表达式会将它们的大理石添加到它们自己的范围中。
whereas function expressions will add their marble to their own scope.

40
00:02:12.019 --> 00:02:15.800
&gt；&gt；扬声器1：那么蓝色范围就是蓝色大理石和另一个教师结束的地方。
&gt;&gt; Speaker 1: So the blue scope is where the blue marble anotherTeacher ends up.

41
00:02:18.389 --> 00:02:21.532
&gt；&gt；演讲者1：这就是为什么在第四行，我们可以引用另一个讲师，因为
&gt;&gt; Speaker 1: That's why on line four, we can reference in anotherTeacher because

42
00:02:21.532 --> 00:02:24.979
事实上，有一种蓝色的大理石叫做另一种老师。
there is in fact a blue marble called anotherTeacher.

43
00:02:24.979 --> 00:02:28.930
但是在九号线下，没有另一个老师，是吗？
But down on line nine, there is no anotherTeacher, is there?

44
00:02:30.349 --> 00:02:31.750
当我们在全球范围内
When we're out in the global scope and

45
00:02:31.750 --> 00:02:35.750
我们问全球范围你听说过这个红色大理石吗，它会说没有，
we asked global scope you ever heard of this red marble, it's gonna say nope,

46
00:02:35.750 --> 00:02:40.849
从来没有听说过那个红色的大理石，我们会得到什么，参考错误。
never heard of that red marble and what we're gonna get there, reference error.

47
00:02:41.939 --> 00:02:45.349
所以关键差异，函数表达式，
So key difference, function expressions,

48
00:02:45.349 --> 00:02:48.859
把你的身份放在自己的范围内。
put there identify your into their own scope.

49
00:02:48.859 --> 00:02:49.840
有一点细微的差别。
There's a little nuance.

50
00:02:49.840 --> 00:02:51.009
让我一会儿来回答这个问题。
Let me get to that question in a moment.

51
00:02:51.009 --> 00:02:54.879
此外，还有一些额外的细微差别，不仅是蓝色
There's a little, also, additional nuance which is not only does that blue

52
00:02:54.879 --> 00:02:58.969
大理石显示在蓝色范围内，但它也是只读的。
marble show up in the blue scope but it's also read only.

53
00:03:00.180 --> 00:03:03.349
您不能在第四行重新分配另一位教师。
You cannot reassign anotherTeacher on line four.

54
00:03:03.349 --> 00:03:05.218
您不能将其重新分配给其他值。
You could not reassign it to some other value.

55
00:03:06.229 --> 00:03:07.199
你有问题是吗？
You have a question, yes?

56
00:03:07.199 --> 00:03:07.960
&gt；&gt；扬声器2：你为什么要这么做？
&gt;&gt; Speaker 2: Why would you do this?

57
00:03:07.960 --> 00:03:11.449
为什么实际上在右侧有命名的函数
Why would you actually have the named function on the right side of

58
00:03:11.449 --> 00:03:12.471
那个表情？
that expression?

59
00:03:12.471 --> 00:03:16.112
&gt；&gt；Speaker 1：您可能更经常看到它是一个匿名函数，
&gt;&gt; Speaker 1: You've probably more often seen it as an anonymous function there,

60
00:03:16.112 --> 00:03:20.699
我们将讨论所谓的命名函数之间的区别
and we're about to discuss the difference between what are so-called named function

61
00:03:20.699 --> 00:03:24.368
表达式，以及更常见的匿名函数表达式。
expressions, and the more common anonymous function expression.

62
00:03:24.368 --> 00:03:26.849
好的，我们一会儿就会讲到这一点。
Okay, so we'll get into that in just a moment.

63
00:03:26.849 --> 00:03:30.659
很棒的片段，让我们来讨论命名函数表达式。
So great segue, let's talk about named function expressions.

64
00:03:32.599 --> 00:03:34.050
什么是命名函数表达式？
What is a named function expression?

65
00:03:34.050 --> 00:03:35.275
我们超级有创造力，
We're super creative,

66
00:03:35.275 --> 00:03:38.610
这意味着一个已经被命名的函数表达式，好吗？
that means a function expression that's been given a name, okay?

67
00:03:38.610 --> 00:03:40.719
那么让我们来看看这两个。
So let's look at these two.

68
00:03:40.719 --> 00:03:43.219
第一行，我声明一个函数表达式。
Line one, I'm declaring a function expression.

69
00:03:43.219 --> 00:03:44.549
为什么它是函数表达式？
Why is it a function expression?

70
00:03:47.062 --> 00:03:48.430
&gt；&gt；Speaker 2：它被赋值给一个变量？
&gt;&gt; Speaker 2: It's assigned to a variable?

71
00:03:48.430 --> 00:03:50.689
&gt；&gt；Speaker 1：因为它不是函数声明，
&gt;&gt; Speaker 1: Because it's not a function declaration,

72
00:03:50.689 --> 00:03:53.329
我们如何知道某件事是不是函数声明
how do we know if something's a function declaration

73
00:03:53.329 --> 00:03:57.039
如果单词function是语句中的第一件事？
if the word function is literally the first thing in the statement?

74
00:03:58.389 --> 00:04:03.491
所以如果它不是语句中的第一件事，如果有一个变量或
So if it's not the first thing in the statement, if there's a variable or

75
00:04:03.491 --> 00:04:09.021
一个运算符或圆括号或任何东西，那么它不是一个声明，是吗？
an operator or parentheses or anything, then it's not a declaration, it is?

76
00:04:09.021 --> 00:04:10.497
&gt；&gt；扬声器2：表达式。&gt；&gt；扬声器1：表达式，所以
&gt;&gt; Speaker 2: An expression. &gt;&gt; Speaker 1: An expression, so

77
00:04:10.497 --> 00:04:14.430
在第一行，我们看到一个函数表达式，但我们看不到名称。
on line one, we see a function expression, but we see no name.

78
00:04:14.430 --> 00:04:17.990
这就是所谓的匿名函数表达式，
So that's called a anonymous function expression,

79
00:04:17.990 --> 00:04:22.519
而第五行上的是一个命名的函数表达式。
whereas the one on line five is a named function expression.

80
00:04:22.519 --> 00:04:25.550
所以撇开函数表达式和
So setting aside the difference between function expressions and

81
00:04:25.550 --> 00:04:27.170
声明一下。
declarations for a moment.

82
00:04:27.170 --> 00:04:31.007
在这里，我只想把我们的注意力集中在
Here, I just wanna focus our attention to the difference between

83
00:04:31.007 --> 00:04:35.000
匿名函数表达式和命名函数表达式。
anonymous function expressions and named function expressions.

84
00:04:35.000 --> 00:04:39.182
我要说的是即使匿名函数
And what I'm gonna claim is that even though anonymous function

85
00:04:39.182 --> 00:04:43.598
表达方式要普遍得多，事实上也要流行得多，
expressions are vastly more common, vastly more popular In fact,

86
00:04:43.598 --> 00:04:48.019
你们中的大多数人可能从未见过命名的函数表达式。
most of you have maybe never even seen a named function expression.

87
00:04:48.019 --> 00:04:52.069
这就是它是多么的不常见和不受欢迎。
And that's how uncommon and unpopular it is.

88
00:04:52.069 --> 00:04:59.129
我要提出的主张是，你应该总是，100%，零例外。
I'm going to make the claim that you should always, 100%, zero exception.

89
00:04:59.129 --> 00:05:02.834
我不会做很多绝对的，100%的陈述，
I don't make very many statements that are that absolute, 100%,

90
00:05:02.834 --> 00:05:06.480
零例外，您应该首选命名函数表达式，
zero exceptions, you should prefer the named function expression,

91
00:05:06.480 --> 00:05:08.720
在匿名函数表达式上。
over the anonymous function expression.
