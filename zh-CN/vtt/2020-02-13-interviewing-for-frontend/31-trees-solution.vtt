WEBVTT

1
00:00:00.000 --> 00:00:01.879
那是个棘手的问题。
That was a tough problem.

2
00:00:01.879 --> 00:00:05.030
我知道我第一次碰到它很有挑战性
I know when I first ran across it,
that's challenging.

3
00:00:05.030 --> 00:00:06.490
让我们现在就去解决这个问题。
So let's walk through the solution now.

4
00:00:07.570 --> 00:00:11.343
还有这个方案，它会给你一个提示。
And the solution,
it'll give you a hint in the name.

5
00:00:11.343 --> 00:00:15.949
我们会称之为逆向路径，因为这就是我们最终要做的事情。
We'll call it reverse path, because that's
what we're ultimately trying to do.

6
00:00:15.949 --> 00:00:19.629
我们知道我们会得到某种元素我们会得到树的
And we know we're gonna get some sort of
element and we're gonna get the tree.

7
00:00:20.879 --> 00:00:23.934
如果你要通过一个树，它通常以根为代表。
If you're gonna pass someone a tree,
it's generally represented as the root.

8
00:00:23.934 --> 00:00:26.890
一旦您有了根，就可以对整个树进行迭代。
Cuz once you have the root,
you can iterate through the entire tree.

9
00:00:26.890 --> 00:00:30.434
对于许多 JavaScript 开发者来说，很难将其概念化，因为
For many JavaScript developers, it's
difficult to conceptualize this because

10
00:00:30.434 --> 00:00:33.512
你被用来数据结构我把数据结构传给你
you're used to data structures where,
I pass you the data structure,

11
00:00:33.512 --> 00:00:35.018
都是整个数据结构
it's the entire data structure.

12
00:00:35.018 --> 00:00:37.238
类似于数组，对象或集合。
Like an array, or an object, or a set.

13
00:00:37.238 --> 00:00:39.872
而树一般只给你根，
Whereas a tree is generally
only give you the root, and

14
00:00:39.872 --> 00:00:42.740
被称为树的人
that's known as passing you the tree.

15
00:00:42.740 --> 00:00:49.270
所以我们想做的是，知道这个，我们想回到根部。
So what we wanna do is, knowing this,
we wanna walk back up to the root.

16
00:00:49.270 --> 00:00:52.299
顺便说下我们想有办法记录这条路
And along the way,
we wanna have a way of recording the path.

17
00:00:52.299 --> 00:00:56.659
所以当我们跳到这棵树上时，我们就会回到那条完全相同的道路上。
So that when we jump over to this tree,
we walk back down that exact same path.

18
00:00:56.659 --> 00:00:59.469
我想你可以把它想象为倒转字串
I guess you could think of
it like reversing a string.

19
00:00:59.469 --> 00:01:03.429
与我们所做的第一个问题非常相似，实际上，它根本不一样。
Very similar to the first problem we did,
actually, it's not similar at all.

20
00:01:03.429 --> 00:01:06.480
但在概念上，你可以逆向迭代，这就是我们正在做的。
But conceptually, you can iterate over
backwards, and that's what we're doing.

21
00:01:06.480 --> 00:01:08.260
我们正从我们得到的道路上后退
We're iterating backwards
over the path that we get.

22
00:01:10.049 --> 00:01:11.980
那么开始吧，我知道什么 ?
So to start off with, what do I know?

23
00:01:11.980 --> 00:01:15.647
我知道我需要一种方法来存储这条路
I know that I'm gonna need
a way of storing that path.

24
00:01:15.647 --> 00:01:22.099
因为我们知道元素有两部分，他们有父母，
And because we know that elements
have two parts, they have parent,

25
00:01:22.099 --> 00:01:27.786
还有父母会有孩子
and the parent, Is gonna have children.

26
00:01:33.043 --> 00:01:35.740
但这并不真正帮助我们，这些知识。
But that doesn't really help us,
that knowledge.

27
00:01:35.740 --> 00:01:37.710
但我们如何找到指数
But how do we find the index,

28
00:01:37.710 --> 00:01:41.500
还是我们现在的孩子的位置
or the position of the child
that we're currently on?

29
00:01:42.829 --> 00:01:44.609
我想我已经说过了
I think I said it already.

30
00:01:44.609 --> 00:01:45.170
>> indexOf。
&gt;&gt; indexOf.

31
00:01:45.170 --> 00:01:54.640
>> indexOf，是的，如果我们想得到，我们可以说一些元素的 indexOf 。
&gt;&gt; indexOf, yeah, so if we wanted to get,
So we can say indexOf some elements.

32
00:01:55.719 --> 00:01:58.890
这将是路径的一部分。
And this would be one part of the path.

33
00:01:58.890 --> 00:02:01.006
所以如果我们知道孩子的位置就会是 0
So if we know the position of the child,
so it's gonna be 0 or

34
00:02:01.006 --> 00:02:04.700
1 在这种情况下， cuz 很简单，或者 2 或 3 ，它不成熟。
1 in this case, cuz they're pretty simple,
or 2 or 3, it doesn't matte.

35
00:02:04.700 --> 00:02:08.419
可以说 0 ，这也就只有一个了，所以
We can say 0, this will be,
well, there's only one, so

36
00:02:08.419 --> 00:02:10.879
这将为 0，这将为 0。
this will be 0, this will be 0.

37
00:02:10.879 --> 00:02:13.409
这里没有我们在这里的路
And there's no path here
cuz we're at the root.

38
00:02:13.409 --> 00:02:17.742
如果我们重播，我们会说parent.子代，
And if we replay that,
we say parent.children, and

39
00:02:17.742 --> 00:02:22.896
我们把它放了下来，所以我们就把它放了，所以我们说 0， 0， 1。
we replay that path, so
we pop that off, so we say 0, 0, 1.

40
00:02:22.896 --> 00:02:26.780
如果它在树上，它就能得到我们的元素。
And that would get us the element
no matter where it is in the tree.

41
00:02:26.780 --> 00:02:28.894
所以在概念上如果我们理解
So conceptually, if we understand that,

42
00:02:28.894 --> 00:02:31.252
我们可以理解如何创建反向路径。
we can understand how to
create a reverse path.

43
00:02:34.144 --> 00:02:38.645
我想做的第一件事就是我甚至说了我们要想点什么
So the firs thing I wanna do is, I even
said it, since we wanna pop off something,

44
00:02:38.645 --> 00:02:40.647
我要说这条路是个阵列
I'm gonna say the path is an array.

45
00:02:40.647 --> 00:02:42.115
我要把它作为一个数字的数组来存储。
I'm gonna store it as an array of numbers.

46
00:02:44.177 --> 00:02:47.406
我想在我根的时候停下来所以我想说
And I wanna stop when I get to the root,
so I'm gonna say while,

47
00:02:51.069 --> 00:02:55.360
我要说我的父母实际上我要说电流
And I'm gonna say element.parent,
actually, I'm gonna say current.

48
00:02:55.360 --> 00:03:00.354
如果我说指针，我会说指针，在技术上是指针，所以
Should I say pointer, I'll say pointer,
cuz it technically is a pointer, so

49
00:03:00.354 --> 00:03:02.069
那就好
that's good.

50
00:03:02.069 --> 00:03:04.756
我们知道这个循环会一直运作直到我们找到根
We know this while loop will
run until we get to the root,

51
00:03:04.756 --> 00:03:06.709
因为 root 用户将不具有父代。
because the root will not have a parent.

52
00:03:06.709 --> 00:03:10.542
我想做的第一件事就是初始化指针
So the first thing I wanna do is,
I wanna initialize the pointer,

53
00:03:10.542 --> 00:03:14.182
因为我们只是在指着树上的不同节点
because we're just pointing at
different nodes on the tree.

54
00:03:14.182 --> 00:03:21.756
所以我想说，让指针，我们会说它是元素。
So I wanna say, let pointer, and
we'll say it's the elements.

55
00:03:21.756 --> 00:03:23.697
我们要从某个地方开始这是我们的基本案例
We wanna start somewhere,
that's our base case.

56
00:03:26.640 --> 00:03:27.579
那么我们以前做了什么 ?
So what did we do before?

57
00:03:27.579 --> 00:03:30.212
我们想拿到指针的位置
We wanted to get
the position of the pointer.

58
00:03:30.212 --> 00:03:33.992
因此，该位置表示为 0，1或 2，或 3，或 4或 5，
So the position is represented as 0,
1, or 2, or 3, or 4, or 5,

59
00:03:33.992 --> 00:03:35.569
不管它在哪里
wherever it is in that array.

60
00:03:35.569 --> 00:03:38.079
所以我们可以把它打印出来
So we can print that back out.

61
00:03:38.079 --> 00:03:42.259
所以我要说指数是
So I'm gonna say index is,

62
00:03:42.259 --> 00:03:46.740
我们有指针了
we have the pointer.

63
00:03:46.740 --> 00:03:50.560
然后我们去抓父母然后我们去抓孩子们
And we're gonna grab the parent, and
then we're gonna grab the children.

64
00:03:51.780 --> 00:03:54.027
然后我们会说，技术上并不是一个数组。
And then we're gonna say,
it's not technically an array.

65
00:03:54.027 --> 00:03:56.831
它是一个类似阵列的结构，但我不会把它转换成一个阵列。
It's an array-like structure, but
I'm not gonna convert it to an array.

66
00:03:56.831 --> 00:04:01.153
通常情况下，您必须执行类似的操作，然后调用 indexOf。
Normally you'd have to do something
like this, and then you call indexOf.

67
00:04:01.153 --> 00:04:05.389
但我不会为了简单而这么做
But I'm not gonna do that for simplicity.

68
00:04:06.469 --> 00:04:10.050
再一次，一个白板解决方案，我在乎的是你在概念上是有问题的。
Again, a whiteboard solution, I care that
you kind of have it conceptually down.

69
00:04:10.050 --> 00:04:15.789
然后我们会说指针本身的索引
And then we're gonna say
the index of the pointer itself.

70
00:04:15.789 --> 00:04:19.230
这样我们就能在我们需要的阵列中找到位置。
So this will get us the position
in the array that we need.

71
00:04:19.230 --> 00:04:21.620
这会让我们迈出第一步。
So this will get us
the first step in our path.

72
00:04:21.620 --> 00:04:25.860
所以我要说 path.push ，索引本身。
And so I'm gonna say path.push,
the index itself.

73
00:04:27.939 --> 00:04:31.180
然后我就把这个指针移到这个点上。
And then I'm going to move the pointer
up to the parent at this point.

74
00:04:31.180 --> 00:04:35.000
我想知道，父母的孩子在哪里。
Cuz I wanna know where the parent
is in its parent's children array.

75
00:04:35.000 --> 00:04:39.678
所以我要说 pointer = potinter.parent.
So I'm gonna say pointer = pointer.parent.

76
00:04:43.158 --> 00:04:47.730
从概念上来说，这是最困难的部分。
Of the whole thing, I think conceptually
this is the most difficult part.

77
00:04:47.730 --> 00:04:51.944
你要去看看你在哪里是很棘手的
The fact that you have to go up to look
down to see where you are is tricky with

78
00:04:51.944 --> 00:04:54.019
一棵大树它是整个事物的关键
a tree, and
it's kind of the key to this whole thing.

79
00:04:55.360 --> 00:04:59.600
因此，在这个 while 循环中，我们可以每一次推送路径。
So given this while loop,
we can push the path every single time.

80
00:04:59.600 --> 00:05:04.199
所以看这个，这个在位置 0，这个在位置 0，
So looking at this one, this is in
position 0, this is in position 0,

81
00:05:04.199 --> 00:05:08.970
位置 0 ，位置 0，这发生在它们都是 0。
position 0, position 0,
this happens that they're all 0s.

82
00:05:08.970 --> 00:05:13.749
所以在这个 while 循环中，我们将以 1 或 0 的路径结束
So in this while loop, we're gonna
end up with a path that's 1 or 0 or

83
00:05:13.749 --> 00:05:16.139
2 或 3，一些阵列。
2 or 3, some array.

84
00:05:16.139 --> 00:05:17.464
那我们现在怎么办
So what do we do now?

85
00:05:17.464 --> 00:05:23.639
既然我们有反向路径，我们就想把它转至下一棵树。
Since we have the reverse path,
we wanna replay that into the next tree.

86
00:05:23.639 --> 00:05:26.870
所以我要说这个指针现在是根
So I'm gonna say the pointer
is now the root.

87
00:05:29.100 --> 00:05:30.610
所以我现在就切换到这棵树上。
So I've now switched to this tree now.

88
00:05:30.610 --> 00:05:36.074
而我要说的是路径上有任何争论
And I'm gonna say,
while the path has any arguments in it,

89
00:05:36.074 --> 00:05:39.913
我要不停地迭代树
I'm gonna keep iterating down the tree.

90
00:05:39.913 --> 00:05:43.930
哎呀我今天不能拼
Whoops, I cannot spell today.

91
00:05:43.930 --> 00:05:47.564
那我们该怎么下树呢
So how do we move down the tree?

92
00:05:47.564 --> 00:05:54.069
是啊老爸我们要把指针移到下一个孩子
Yeah, pop, we wanna move that
pointer to the next child.

93
00:05:54.069 --> 00:05:55.957
所以我可以说
So I can say pointer is,

94
00:05:55.957 --> 00:06:01.350
我们要去找孩子我们要把他们弄下来
we wanna get to the children cuz
we're maneuvering down the array.

95
00:06:01.350 --> 00:06:06.692
我要说的是帕普波普
And I'm gonna say, path.pop.

96
00:06:14.201 --> 00:06:16.350
这就是一种逆向算法
That's it, that's a reverse algorithm.

97
00:06:19.930 --> 00:06:22.346
当你从概念上思考的时候如果我说
When you think about it conceptually,
if I just said,

98
00:06:22.346 --> 00:06:25.668
给我一个反向路径算法，这不是一个采访者。
give me a reverse path algorithm,
that's not helpful as an interviewer.

99
00:06:25.668 --> 00:06:28.588
但如果我能解释我们想做什么我就能画出来
But if I can explain what we're trying
to do and I draw it out, hopefully,

100
00:06:28.588 --> 00:06:32.456
了解 HTML 和 DOM 结构，您说，有父母和孩子，
understanding HTML and DOM structure, you
say, there's parents and there`s children,

101
00:06:32.456 --> 00:06:35.180
这里有孩子的代表
and here's how children
would be represented.

102
00:06:35.180 --> 00:06:37.840
你可以在概念上处理这个问题。
You can conceptually work this out.

103
00:06:37.840 --> 00:06:41.204
如果你没有得到这个权利，这很有挑战性。
And if you didn't get this right,
it's okay, this is challenging.

104
00:06:41.204 --> 00:06:44.470
但希望它能让你了解树木
But hopefully, it helps grow
your understanding of trees, and

105
00:06:44.470 --> 00:06:45.930
如何向上和向下移动
how to move up and down them.

106
00:06:47.629 --> 00:06:51.834
好吧也许我没警告过你也许我应该警告你
All right, maybe I didn't warn you,
maybe I should have warned you that,

107
00:06:51.834 --> 00:06:56.738
当我们走向终点时，它会变得越来越困难，这就是它的目的。
as we move to the end, it's gonna get more
and more difficult, that's just how it is.

108
00:06:56.738 --> 00:07:00.420
我想给你一个热身的问题，倒串的，就是为了让你去。
I wanna give you a warm up question,
reverse string one, just to get you going.

109
00:07:00.420 --> 00:07:05.310
我本来可以从这个开始的你会觉得这是个愚蠢的课程
I could've started with this, you'd be
like, [LAUGH] this is a stupid course.

110
00:07:05.310 --> 00:07:07.410
我不敢相信我拿了这个课程他在教什么
I can't believe I took this course,
what is he teaching?

111
00:07:07.410 --> 00:07:11.365
但是当我们在这里工作的过程中，希望它在概念上是比较清晰的。
But as we work our way to here, hopefully
it's a little conceptually clearer.
