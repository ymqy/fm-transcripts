WEBVTT

1
00:00:00.420 --> 00:00:02.020
退下
Debounce.

2
00:00:02.020 --> 00:00:06.525
如果你从没想过它是如何运作的或是自动完成的
If you've never thought about how
it works or an autocomplete, or

3
00:00:06.525 --> 00:00:11.202
我不知道任何类型的解决方案，我们会了解现在的情况。
I don't know any type of head solution,
we're gonna learn how now.

4
00:00:11.202 --> 00:00:15.913
如果你有这个可能有点棘手因为很难
If you have this probably, it's
a little trickier because it's hard to

5
00:00:15.913 --> 00:00:19.945
如果你从来没有考虑过的话
mentally picture if you've
never given any consideration.

6
00:00:19.945 --> 00:00:21.091
我们去解决这个问题
Let's go and solve this one.

7
00:00:21.091 --> 00:00:23.574
这个我知道我一直说他们都有点棘手
This one, I know I keep saying
they're all little tricky,

8
00:00:23.574 --> 00:00:25.321
我觉得这些都有点棘手
cuz I consider these all a little tricky.

9
00:00:25.321 --> 00:00:27.778
我永远不会说这个很容易
I'll never say this one's an easy one.

10
00:00:27.778 --> 00:00:31.339
也许倒转一个绳子也不是，那是个好的热身问题。
Maybe reversing a string was not too,
that's a good warm up question.

11
00:00:31.339 --> 00:00:35.067
但如果你从来没考虑过这个就有点棘手了
But this one is a little tricky
if you've never considered it.

12
00:00:35.067 --> 00:00:36.896
我们去把它输入出去
Let's go and type it out.

13
00:00:36.896 --> 00:00:42.203
所以我们要做的就是签名
So debounce, what we're gonna do is
the signature would look something

14
00:00:42.203 --> 00:00:48.039
就像 debunce，感谢你的自动完成，它能及时地发挥作用。
like debounce, thank you autocomplete,
and it would take a function in time.

15
00:00:48.039 --> 00:00:53.289
这意味着，每次我要调用此函数时，请说其他函数。
That means every time I wanna invoke this
function later, say some other function.

16
00:00:53.289 --> 00:00:59.307
函数 1，如果我想稍后调用它，它会在此处触发。
Function 1, if I wanna invoke it later,
it'll fire here.

17
00:00:59.307 --> 00:01:04.081
但是我要做的才不会真正执行我想做的事情
But it won't actually execute what I
wanted to do until the time has passed

18
00:01:04.081 --> 00:01:05.168
足够了
sufficiently.

19
00:01:05.168 --> 00:01:10.573
在头部的类型中，让我们说 mdn，
So again in the type of head,
let's say mdn,

20
00:01:10.573 --> 00:01:14.996
我们之前在看平面地图
we're looking at flat map earlier.

21
00:01:14.996 --> 00:01:19.439
如果我们在做一些像取结果一样的东西，我们就不希望像我那样
If we're doing something like say fetching
results, we wouldn't want as I type along,

22
00:01:19.439 --> 00:01:20.992
一百万次的要求
a million requests going out.

23
00:01:20.992 --> 00:01:24.754
我们只想在我停止打字的时候才这样做
We'd only wanna do it
when I've stopped typing.

24
00:01:24.754 --> 00:01:28.028
然后，该功能实际执行。
And then the function actually executes.

25
00:01:28.028 --> 00:01:31.533
一旦我们完成了我就会给你展示如何实施油门
And once we're done with this I'll
show you how to implement throttle,

26
00:01:31.533 --> 00:01:32.978
这有点不一样
which is a little different.

27
00:01:32.978 --> 00:01:33.802
这意味着
Which means,

28
00:01:33.802 --> 00:01:38.281
当我们输入时它将会触发第一个但它不会触发后续的
as we type, it'll fire the first one but
it won't fire the subsequent ones.

29
00:01:38.281 --> 00:01:40.608
然后它就会等到第一次发射
And then it'll wait and
then it'll fire the first one and

30
00:01:40.608 --> 00:01:41.734
烧了以后的吧
fire the subsequent ones.

31
00:01:41.734 --> 00:01:45.811
Versus debunce 希望我能解释清楚
Versus debounce, which hopefully
if I've explained it correctly,

32
00:01:45.811 --> 00:01:48.585
一旦你做了就会被开除
it will fire once you're
done doing the thing.

33
00:01:48.585 --> 00:01:53.491
所以每当有新动作出现时，如果事件列表再次触发，
So every time a new action comes in, say
that event list fires again, it's gonna

34
00:01:53.491 --> 00:01:58.390
在能够执行之前停止先前的执行，然后等待。
stop the previous executions before
they were able to execute and then wait.

35
00:01:58.390 --> 00:01:58.954
它会一直等到它完成
It's gonna wait until it's done.

36
00:01:58.954 --> 00:02:03.594
好吧我知道我说了很多让我们开始行动吧
All right, I know I talked a lot,
so let's implement debounce.

37
00:02:03.594 --> 00:02:06.551
再一次，它是一个功能。
So again, it's a function.

38
00:02:06.551 --> 00:02:08.965
我认为今天的一切都是一个功能。
I think everything today
has been a function.

39
00:02:08.965 --> 00:02:13.835
还有其他的功能和时间
And it's gonna take some
other function and time.

40
00:02:13.835 --> 00:02:17.990
前面的例子是我们想要放弃的功能。
And that earlier example,
we want debounced function.

41
00:02:22.806 --> 00:02:24.045
我们要执行这一命令
And we're gonna wanna execute that.

42
00:02:24.045 --> 00:02:26.365
因此，请指出这是事件侦听器或类似的事件。
So, say this is in an event listener or
something like that.

43
00:02:26.365 --> 00:02:28.835
那是什么把戏
So, what's the trick?

44
00:02:28.835 --> 00:02:31.631
如果它是你以后要执行的功能
If it's a function that
you're gonna execute later,

45
00:02:31.631 --> 00:02:34.679
你一定会想回去的
you're going to at some point
wanna return that function.

46
00:02:37.401 --> 00:02:42.513
好吧我们还想做什么
Okay, What else do we wanna do?

47
00:02:42.513 --> 00:02:44.177
我们知道这是涉及时间的问题。
We know this is involving timing.

48
00:02:44.177 --> 00:02:47.905
所以如果我想说我每 10 秒就能完成这个
So if I wanna say I only want this
executed every ten seconds or

49
00:02:47.905 --> 00:02:49.304
就像这样
something like that.

50
00:02:49.304 --> 00:02:53.200
所以设定时间间隔是我要用的两条时间
So set interval is something I'm gonna use
because there's two ways to do timing,

51
00:02:53.200 --> 00:02:54.600
设置时间间隔或设置超时。
set interval or set time out.

52
00:02:54.600 --> 00:02:58.052
其实我不需要设定时间，我要设定时间。
Actually I don't want set interval,
I want set time outs.

53
00:02:58.052 --> 00:03:03.747
而设定的时间将会起到一些作用，而不是这个功能。
And set time outs gonna take some
function, not this function.

54
00:03:07.022 --> 00:03:10.555
关了它就得花时间
Close it off, it's going to take the time.

55
00:03:10.555 --> 00:03:15.062
所以我要在这个时间里说我从这里得到的
So I'm gonna pass in this time
argument that I got from up here.

56
00:03:15.062 --> 00:03:18.167
而当该时间在 10 秒或 10 秒内失效
And then once the time has
expired as in the 10 seconds or

57
00:03:18.167 --> 00:03:21.216
500 毫秒或您想要的任何内容都已关闭。
500 milliseconds or
whatever you want has run down.

58
00:03:21.216 --> 00:03:25.584
我想引用我原本想要的功能
I wanna invoke the function that
I was originally trying to call.

59
00:03:25.584 --> 00:03:26.859
那么我们如何唤起一个功能呢 ?
So how do we evoke a function?

60
00:03:26.859 --> 00:03:28.525
我们在过去的练习中学到了这一点。
We learned that in the previous exercise.

61
00:03:28.525 --> 00:03:32.170
呼叫还是申请对吧
Call or apply, right?

62
00:03:32.170 --> 00:03:33.195
所以当这事结束后
So when this is done,

63
00:03:33.195 --> 00:03:36.516
当计时器运行的时候我想把它自己叫做功能
when the timer has run out I wanna
actually call the function itself.

64
00:03:36.516 --> 00:03:42.456
我们会说 fn.apply，我们会给它这个背景，
So we'll say fn.apply, and
we'll give it the context of this,

65
00:03:42.456 --> 00:03:47.646
我们会在辩论中通过这很不错的
and we'll pass in the arguments,
which is pretty good.

66
00:03:47.646 --> 00:03:51.673
我可以把它放了
I could actually just leave that off.

67
00:03:51.673 --> 00:03:54.254
但如果我想具体说明我可以说的话
But if I'm trying to be
specific I could say arguments.

68
00:03:58.604 --> 00:04:03.862
嗯，好吧，那是什么，
Hm, okay, that's that's something,

69
00:04:03.862 --> 00:04:11.389
但如果我们执行这一 debunounce 函数怎么办
but what will happen if we
execute this debounce function?

70
00:04:11.389 --> 00:04:16.420
现在有什么事没有人吗
What will happen now, anybody, nobody?

71
00:04:16.420 --> 00:04:20.189
没事的我知道我们现在已经解决了问题
It's okay, I know we've been
solving problems for a while now,

72
00:04:20.189 --> 00:04:22.048
就像真正的触觉面试
like a real tactile interview.

73
00:04:22.048 --> 00:04:22.744
是的， Ratel.
Yes, Ratel.

74
00:04:22.744 --> 00:04:23.725
> > 我没有解决问题。
&gt;&gt; I didn't solve the problem.

75
00:04:23.725 --> 00:04:24.745
> > 没关系的
&gt;&gt; That's okay.

76
00:04:24.745 --> 00:04:27.127
这会触发五个事件，对吧 ?
&gt;&gt; [LAUGH] That's gonna fire five events,
right?

77
00:04:27.127 --> 00:04:34.627
> > 嗯，它会，它会设置 5个，或者，一个，两个，三个，四个，五个。
&gt;&gt; Yeah, it will, it'll set up five,
or, one, two, three, four, five.

78
00:04:34.627 --> 00:04:37.870
对五个会设定五个设定的时间
Yes, that's five,
it will set up five set timeouts,

79
00:04:37.870 --> 00:04:41.480
我们会在最后的时候把火都烧了
which will at the end of the time
that we pass in will all fire.

80
00:04:41.480 --> 00:04:43.199
这不是我们想要的
That's not what we want at all.

81
00:04:43.199 --> 00:04:45.189
在这一点上，我们只是推迟执行这一职能。
At this point, we're just
delaying execution that function.

82
00:04:45.189 --> 00:04:49.495
我们想要的是如果已经有一个功能正在被执行
What we want is if there's already
a function being executed, so

83
00:04:49.495 --> 00:04:51.939
请考虑自动完成的示例。
think of the autocomplete example.

84
00:04:51.939 --> 00:04:56.038
如果他们还在打字我们就不开火了
If they're still typing, we don't
wanna fire this function apply until

85
00:04:56.038 --> 00:04:58.827
他们已经完成了我们想要的行动
they're finished doing
the action that we want.

86
00:04:58.827 --> 00:05:03.466
然后我们就有了我们想要执行的完整的数据，然后我们就把它烧了。
And then we have the complete data that
we wanna execute on, then we fire that.

87
00:05:03.466 --> 00:05:09.829
因此，正在记住设置超时设置时间间隔返回和标识。
So a way of doing that is remembering that
set timeout set interval return and ID.

88
00:05:09.829 --> 00:05:11.307
所以我们会说 setTimeoutId。
So we'll say setTimeoutId.

89
00:05:15.355 --> 00:05:19.105
在这个范围内我要说的是 setTimeoutId。
And in this scope,
I'm gonna say setTimeoutId.

90
00:05:19.105 --> 00:05:23.120
我们要把它设置为空
We're gonna set it to null for now.

91
00:05:23.120 --> 00:05:26.012
好了现在我们至少有个参考
All right, so
now we have at least a reference,

92
00:05:26.012 --> 00:05:28.557
如果有什么东西在跑的话
if there's something already running.

93
00:05:28.557 --> 00:05:32.610
如果有什么事我们想取消它因为那个人还在打字
And if there's something running, we wanna
cancel it because the person still typing

94
00:05:32.610 --> 00:05:34.509
在此示例中，我们要取消该操作。
in this example, we wanna cancel that.

95
00:05:34.509 --> 00:05:38.442
那么，如何检查 JavaScript 中是否存在某些内容 ?
So how do I check if something
exists in JavaScript?

96
00:05:38.442 --> 00:05:42.547
如果 setTimeoutId ( 如果存在 ) ，那么
I say If, so if the setTimeoutId,
if it exists,

97
00:05:42.547 --> 00:05:46.764
我们想取消之前的一切
we wanna cancel whatever
else was coming before.

98
00:05:46.764 --> 00:05:50.699
因此，我们只需要设置一个设置，而不是设置五个设置超时。
So instead of setting five set timeouts,
we only wanna set one.

99
00:05:50.699 --> 00:05:53.110
这意味着我们要取消之前的一切
That means we cancel anything
else that was before it.

100
00:05:53.110 --> 00:05:54.196
所以我们要清空时间
So we're gonna clear interval.

101
00:05:57.120 --> 00:05:58.117
还是间隔?
Or was it interval?

102
00:05:58.117 --> 00:06:00.204
不抱歉清除超时
No, sorry, clear timeout.

103
00:06:00.204 --> 00:06:02.088
如果你错了我不会惩罚你的
I wouldn't penalize you
if you got it wrong.

104
00:06:02.088 --> 00:06:03.223
设置 TimeoutId。
Set TimeoutId.

105
00:06:08.927 --> 00:06:14.975
好的，那么现在我们把它叫做一行的时候会发生什么呢 ?
Okay, so now what happens
when we call this in a row?

106
00:06:14.975 --> 00:06:18.951
这其中一个会被处决吗
Which one of these is
going to get executed?

107
00:06:18.951 --> 00:06:19.773
>> 最后一个。
&gt;&gt; The last one.

108
00:06:19.773 --> 00:06:23.274
> 是的最后一个因为我们要过去了
&gt;&gt; Yes, the last one,
because we're coming through.

109
00:06:23.274 --> 00:06:26.994
这是在发送超时，因此我们具有 TimeoutId。
This is we're sending a timeout,
so we have a TimeoutId.

110
00:06:26.994 --> 00:06:30.738
下次我们调用这个功能时它会说有一个 TimeoutId
The next time we invoke this function
it's gonna say, there's a TimeoutId,

111
00:06:30.738 --> 00:06:32.997
我要取消最后一个这样它就不会火了
I'm gonna cancel that last one so
it never fires.

112
00:06:32.997 --> 00:06:34.168
就像它从未存在过一样
It's like it never existed.

113
00:06:34.168 --> 00:06:37.327
这将一直持续到这个功能被调用为止。
And that's going to keep doing that
until this function is called.

114
00:06:37.327 --> 00:06:40.238
但我们错过了一个重要的步骤
But there's one missing
step we need to do,

115
00:06:40.238 --> 00:06:43.711
当调用此函数时会发生什么情况 ?
which is what happens when
this function is called?

116
00:06:46.858 --> 00:06:48.487
>> 除去 TimeoutId。
&gt;&gt; Get rid of the TimeoutId.

117
00:06:48.487 --> 00:06:50.386
>> 正好，我们需要清除 TimeoutId。
&gt;&gt; Exactly,
we need to get rid of the TimeoutId.

118
00:06:50.386 --> 00:06:54.088
否则我们就会被人困在这里
Because otherwise, we're gonna get here,
and it will just be stuck,

119
00:06:54.088 --> 00:06:55.824
它永远不会执行任何事情
it'll never execute anything.

120
00:06:55.824 --> 00:07:01.374
所以我们会说， setTimeoutId，我们会说它等于空。
So we're just gonna say, setTimeoutId,
we'll say it's equal to null.

121
00:07:05.033 --> 00:07:08.487
这就是如何实施去债务的方法。
And that's how to implement debounce.

122
00:07:08.487 --> 00:07:11.524
如果你从没见过它或者想过它是如何实施的
If you've never seen it before or
thought about how it's implemented,

123
00:07:11.524 --> 00:07:12.785
这有点挑战
it's a little challenging.

124
00:07:12.785 --> 00:07:15.165
但一旦你看到了你就会开始思考
But once you see it,
you start to think okay,

125
00:07:15.165 --> 00:07:18.687
我需要返回一个能在其他地方工作的功能。
I need to return a function that's
gonna work at some other point.

126
00:07:18.687 --> 00:07:19.456
现在那是我的债务
Now that's debounce.

127
00:07:19.456 --> 00:07:23.004
如果我们要实施节流，很相似的概念。
If we wanna implement throttle,
very similar concept.

128
00:07:23.004 --> 00:07:27.567
除了油门我想先执行这个
Except throttle just says,
I wanna execute this first one, and

129
00:07:27.567 --> 00:07:33.582
我不想在它到期之前执行任何其他的操作。
I don't wanna execute anything else that
comes after it until the time has expired.

130
00:07:33.582 --> 00:07:39.057
所以，我们不排除超时，而是说如果有超时，我就会回来。
So instead of clearing the timeout, we say
if there's a timeout, I would just return.

131
00:07:41.928 --> 00:07:45.903
它说，已经有东西在运行，时间还没有到期。
Cuz it's saying, there's already something
running and the time hasn't expired yet.

132
00:07:45.903 --> 00:07:47.042
好吧我还是回去吧
All right cool, I'll just return.

133
00:07:47.042 --> 00:07:48.273
所以这些都不会火
So none of these would fire.

134
00:07:48.273 --> 00:07:49.261
这只会火
This one would fire.

135
00:07:49.261 --> 00:07:51.382
所有这些都不会发生火灾，直到时间过去。
None of these would fire
until the time has elapsed.

136
00:07:51.382 --> 00:07:53.415
这就是如何实施油门的方法。
And that's how to implement throttle.

137
00:07:53.415 --> 00:07:57.903
你可以看到，你可以逐渐建立起一种非常强大的方法来计时事物，或者
And you see you can gradually build up
a really powerful way of timing things, or

138
00:07:57.903 --> 00:08:02.593
在一定时间间隔设置事物，如果您可以实现解块或调速，或者
setting things at certain intervals, if
you can implement debounce or throttle or

139
00:08:02.593 --> 00:08:03.870
就像这样
something like that.

140
00:08:05.625 --> 00:08:11.031
好吧我知道如果你以前没见过这个很有挑战性
All right, I know that one was challenging
if you've never seen it before.

141
00:08:11.031 --> 00:08:13.689
但现在我们希望能理解设定的时间和时间间隔
But hopefully now we understand
set timeouts and intervals and

142
00:08:13.689 --> 00:08:14.600
都是些好东西
all that good stuff.
