WEBVTT

1
00:00:00.320 --> 00:00:05.070
所以接下来的比赛就是，因为我喜欢比赛。
So this next one is,
it's more race because I love the race.

2
00:00:06.169 --> 00:00:09.500
接下来的问题是我多次在
This next problem is one that
I've gotten multiple times at

3
00:00:09.500 --> 00:00:10.529
很多不同的采访
many different interviews.

4
00:00:12.000 --> 00:00:14.609
不用那么平平平平的
It is without using that flat,

5
00:00:14.609 --> 00:00:19.160
这是一个新的方法，直到今年才会存在。
which is a new method,
which didn't exist until this year.

6
00:00:19.160 --> 00:00:20.170
这会为你做的
Which will do this for you.

7
00:00:20.170 --> 00:00:23.838
但是，在不使用 .flat 的情况下，创建将平铺数组的函数。
But without using .flat, create
a function that will flatten an array.

8
00:00:23.838 --> 00:00:27.160
通过平坦化一个数组，它是数组阵列，数组，
And by flattening an array it means,
it's an array of arrays, of arrays,

9
00:00:27.160 --> 00:00:29.760
不管嵌套深度有多深
it doesn't matter how deeply nested it is.

10
00:00:29.760 --> 00:00:31.269
然后我要你把所有的阵列
Then I want you to take
out all the arrays and

11
00:00:31.269 --> 00:00:34.710
只要给我一个数组，将所有值都放入一个数组中。
just give me one arrays,
with all the values into one array.

12
00:00:36.270 --> 00:00:39.710
你现在问的这个问题有什么问题吗
Any questions on this one you would
ask in an interview right now?

13
00:00:41.439 --> 00:00:42.109
嗯。 > 因此
Yes.
&gt;&gt; So

14
00:00:42.109 --> 00:00:45.380
我们不知道示例阵列的结构是什么吗 ?
we don't know what the structure
of example array is necessarily?

15
00:00:45.380 --> 00:00:49.200
我的意思是，它是一个例子，但它能增加更多的水平还是更少的水平 ?
I mean, it is an example, but
can it add more levels or less levels?

16
00:00:49.200 --> 00:00:49.799
>> 是。
&gt;&gt; Yes.

17
00:00:49.799 --> 00:00:51.329
>> 好。 >> 它可能没有级别。
&gt;&gt; Okay.
&gt;&gt; It could have no levels.

18
00:00:51.329 --> 00:00:51.927
>> 好。
&gt;&gt; Okay.

19
00:00:51.927 --> 00:00:53.880
>> 它可能只是一个数字的数组。
&gt;&gt; It could just be an array of numbers.

20
00:00:53.880 --> 00:00:56.399
它可能有 30 个不同的阵列嵌套在彼此之间。
It might have 30 different
arrays nested within each other.

21
00:00:56.399 --> 00:00:56.990
你不知道的
You don't know that.

22
00:00:58.750 --> 00:01:02.600
这是一个问题，就像我说的，我以前多次接受采访，
And this is a question that like I said,
I've gotten in multiple interviews before,

23
00:01:02.600 --> 00:01:05.629
所以你一定会有机会参加这次的
so chances are at some point
you'll probably run into this one.

24
00:01:12.918 --> 00:01:17.628
再给点提示，我就不要给你太多提示了，用递归
And give another hint, I shouldn't give
you so many hints, using recursion for

25
00:01:17.628 --> 00:01:19.930
这个会帮你的
this one will help you out.

26
00:01:19.930 --> 00:01:20.870
这让我们更容易理性
It makes it easier to reason about.

27
00:01:20.870 --> 00:01:21.890
您不必使用递归。
You don't have to use recursion.

28
00:01:21.890 --> 00:01:24.070
你能做到的我什么都不说
You could do it,
I won't say anything else.
