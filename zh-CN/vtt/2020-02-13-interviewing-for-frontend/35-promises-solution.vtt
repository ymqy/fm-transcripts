WEBVTT

1
00:00:00.000 --> 00:00:03.008
所以如果我想做点什么
So if I wanted to make something sleep,

2
00:00:03.008 --> 00:00:08.119
这意味着我想做些类似弹跳的事情
that would mean I wanted to do
something similar to the bounce.

3
00:00:08.119 --> 00:00:13.859
我想要一个在一些经过一段时间后才会执行的功能。
I want a function that's not gonna
execute until some elapsed time.

4
00:00:13.859 --> 00:00:18.320
所以，在某个时候，我要用一个设定的超时，在里面的某个地方。
So at some point, I'm gonna use
a set timeout, somewhere in there.

5
00:00:18.320 --> 00:00:21.570
但我想用一个承诺因为我们在用异步的等待
But I wanna use a promise
because we're using async await.

6
00:00:21.570 --> 00:00:23.855
所以，让我们把它编码起来。
So let's code that up.

7
00:00:23.855 --> 00:00:24.957
把你关了
Close you.

8
00:00:29.887 --> 00:00:34.381
好了，再一次，我需要解决任何问题的方法
All right, so again, the method
of tackling any problem is I need

9
00:00:34.381 --> 00:00:38.570
一个需要时间的功能我们会叫它睡觉
a function that takes time,
and we're gonna call it sleep.

10
00:00:38.570 --> 00:00:42.682
所以功能睡眠
So function sleep, and

11
00:00:42.682 --> 00:00:46.798
那就需要时间了
it's gonna take time.

12
00:00:46.798 --> 00:00:52.707
我要把它长出来因为我要把这个弄坏
And I'm gonna make this long because it's,
I'm gonna break this out like this.

13
00:00:52.707 --> 00:00:56.024
但本质上我们是用异步方法
But essentially because
we're using an async method,

14
00:00:56.024 --> 00:00:59.750
我们知道我们想在这一特定领域做出承诺
we know we wanna use a promise
in this particular one.

15
00:00:59.750 --> 00:01:02.944
所以我可以说回一个新的承诺
So I can say return a new Promise.

16
00:01:06.989 --> 00:01:10.965
而普罗米塞一直都是我一直想叫它回叫
And Promises always have,
I always wanna call it a callback, but

17
00:01:10.965 --> 00:01:12.350
这不是回叫
it's not a callback.

18
00:01:12.350 --> 00:01:17.469
它叫做执行器，因为它最终会执行这个功能。
It's called an executor, because it will
eventually always execute this function.

19
00:01:17.469 --> 00:01:22.731
它会有两个，所有的承诺都有决心和拒绝。
And it's gonna have two,
all Promises have resolve and reject.

20
00:01:24.152 --> 00:01:28.808
在您设置时， hey，当返回此值时，此值是否有效或无效 ?
As in you set, hey, when this returned,
is this valid or is not valid?

21
00:01:28.808 --> 00:01:31.174
但在这件案子里我们不会拒绝的
But in this case,
we're not gonna use reject.

22
00:01:31.174 --> 00:01:33.287
我把它放进去了
I just put that in there for giggles.

23
00:01:37.549 --> 00:01:40.189
所以我们有一个承诺，我们有一个功能。
So we have a Promise, we have a function.

24
00:01:40.189 --> 00:01:43.579
这将会是个保证在某个时候会解决的
It's gonna return a Promise, and
it's gonna resolve at some point.

25
00:01:43.579 --> 00:01:45.215
所以真正回归的决心
So the resolve to actually return,

26
00:01:45.215 --> 00:01:48.579
就说我已经处理好了我们得调个决心
let's say I'm done processing,
we have to invoke resolve.

27
00:01:49.670 --> 00:01:53.598
但我们要等 X 秒再等一下
But we wanna wait x seconds,
and how do we wait again?

28
00:01:53.598 --> 00:01:54.820
>> 设置超时。
&gt;&gt; Set a time out.

29
00:01:54.820 --> 00:01:58.287
>> 是，所以我要说， setTimeout。
&gt;&gt; Yes, so I'm gonna say, setTimeout.

30
00:02:01.798 --> 00:02:06.581
超时，这当然需要一些功能。
Timeout, which of course
takes some function.

31
00:02:10.695 --> 00:02:14.477
我们想让 setTimeout 在第二次睡眠中运行
And we want setTimeout to run for
the sleep second, so

32
00:02:14.477 --> 00:02:16.247
我们希望能及时地运行
we want to run it at time.

33
00:02:18.098 --> 00:02:22.501
只要花了时间我们就会解决的
And whenever the time has elapsed,
we're gonna resolve.

34
00:02:24.753 --> 00:02:26.870
这就是你建立睡眠功能的方式。
And that is how you
build a sleep function.

35
00:02:28.009 --> 00:02:31.939
现在，回到我们的例子，它要睡觉了，它会等着我们。
So now, going back to our example,
it's going to sleep, it's gonna wait.

36
00:02:31.939 --> 00:02:33.039
我们不是在等待任何价值
We're not waiting for any value.

37
00:02:33.039 --> 00:02:34.954
我们不在乎价值是什么
We don't care what the value is.

38
00:02:34.954 --> 00:02:36.344
我们要等 500 毫秒
We're gonna wait 500 milliseconds.

39
00:02:36.344 --> 00:02:38.170
无论我们通过什么它都要执行这个
Whatever we pass in,
it`s gonna execute this.

40
00:02:38.170 --> 00:02:38.819
它会被击中的
It's gonna hit this.

41
00:02:38.819 --> 00:02:41.310
还要再等 500 毫秒
It's gonna wait another 500 milliseconds.

42
00:02:41.310 --> 00:02:42.150
这会打印的
It's gonna print this.

43
00:02:43.680 --> 00:02:46.949
我觉得这是个不错的面试问题
I consider this a pretty
decent interview question.

44
00:02:46.949 --> 00:02:49.500
它就像，你明白吗 ? 你明白吗 ?
Cuz it's like, do you understand Promises,
do you understand setTimeout?

45
00:02:49.500 --> 00:02:51.800
您是否了解 Promses 是如何解决的 ?
Do you understand how
Promises get resolved?

46
00:02:51.800 --> 00:02:54.259
我不太详细
Without going into too much detail.

47
00:02:55.280 --> 00:02:58.310
我要问你的另一个问题
Now, the other question
I was gonna ask you, and

48
00:02:58.310 --> 00:03:01.129
我不会问你这个问题很有挑战性
I'm not gonna ask you this
one cuz it's challenging,

49
00:03:01.129 --> 00:03:05.129
在具有完成回调的签名的某些函数的情况下。
is, given some function that has
a signature that finishes the callback.

50
00:03:05.129 --> 00:03:08.370
就像传统的 JavaScript 或者很多现代的节点功能
So kind of like old-school JavaScript,
or a lot of modern node functions,

51
00:03:08.370 --> 00:03:09.780
你也能做到这一点
you can do this, too.

52
00:03:09.780 --> 00:03:13.477
我如何才能让这个功能让我能说
How would I promisefy this function so
that I can say,

53
00:03:13.477 --> 00:03:16.116
然后， .then. ， . . . . . . . . . . . . . . .
.then, .then, .then, .then?

54
00:03:16.116 --> 00:03:20.933
我不会去那个的因为它需要一段时间才能过去
I'm not gonna go into that one because
it would take a while to go over,

55
00:03:20.933 --> 00:03:23.804
但我可以让你快速的解决这个问题
but I can show you the solution real fast.

56
00:03:23.804 --> 00:03:28.658
[SOUND] 回答。
[SOUND] Answers.

57
00:03:28.658 --> 00:03:30.969
当你看到它的时候你就会腹股沟
And when you see it, you're gonna groan.

58
00:03:30.969 --> 00:03:32.150
你会喜欢的为什么杰姆
You'll be like, why, Jem?

59
00:03:32.150 --> 00:03:33.543
你为什么要这么对我们
Why would you do that to us?

60
00:03:35.308 --> 00:03:38.412
有点乱但也有类似的想法
A little messy, but similar idea.

61
00:03:38.412 --> 00:03:41.067
你有一个功能最终会返回一个功能
You have a function that's gonna
eventually return a function, and

62
00:03:41.067 --> 00:03:44.479
当你调用它时，它会是一个 Promise ，所以你可以把它链上。
then when you invoke that, it's gonna
be a Promise, so you can chain it.

63
00:03:44.479 --> 00:03:48.599
因此，它是一个函数，它具有返回另一个函数的函数和
So it's a function that takes a function
that returns another function and

64
00:03:48.599 --> 00:03:50.120
返回承诺。
returns a Promise.

65
00:03:50.120 --> 00:03:53.569
那个诺言是要解决的然后你就会这么说
That Promise is just gonna resolve,
and then you call that.

66
00:03:53.569 --> 00:03:55.962
你把所有争论都放在一起
And you concat all the arguments together,

67
00:03:55.962 --> 00:03:58.569
最后一个是回调函数。
with the last one being
the callback function.

68
00:03:58.569 --> 00:03:59.379
就像你一样
Just like you would.

69
00:03:59.379 --> 00:04:02.349
因此，一旦承诺解决，它就会调用回调。
So it calls the callback
once the promise resolves.

70
00:04:03.620 --> 00:04:06.729
更有一种心理模型来说明你是怎么做到的
It's more of a mental model
of how you would do this

71
00:04:06.729 --> 00:04:10.099
我觉得更重要的是了解它的 nitty-gritty
that I find more important than actually
understanding the nitty-gritty of it.

72
00:04:10.099 --> 00:04:12.770
但忽略你看到的那个
But ignore that you saw that.

73
00:04:12.770 --> 00:04:14.439
去试着让你去做点什么
Go ahead and try to promisefy something,

74
00:04:14.439 --> 00:04:16.610
因为这是一个面试问题人们会问你的
because it is an interview
question people will ask you.

75
00:04:16.610 --> 00:04:19.300
这可能是人们最不喜欢的事情之一。
And it's probably one of
people's least favorite things.

76
00:04:19.300 --> 00:04:23.910
因为你只是，我从没想过，我怎么能让你去做点什么呢 ?
Because you just, I never thought,
how would I promisefy something?

77
00:04:23.910 --> 00:04:25.300
我从来没有想过
I never gave it any thought.

78
00:04:25.300 --> 00:04:27.716
所以，当你有机会的时候，请你在家里试试。
So go ahead and try that one at
home when you have a chance.
