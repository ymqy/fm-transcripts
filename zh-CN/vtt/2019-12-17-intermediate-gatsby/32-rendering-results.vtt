WEBVTT

1
00:00:00.000 --> 00:00:03.524
Jason Lengstorf: 我们在这里要做的最后一件事是添加对
&gt;&gt; Jason Lengstorf: The last thing we
wanna do here is actually add support for

2
00:00:03.524 --> 00:00:08.160
对实体 API 运行查询并返回结果。
running queries against that brick and
mortar API and returning results.

3
00:00:08.160 --> 00:00:11.664
为了做到这一点，我们首先要得到我们需要的依赖关系。
So to do that, we're gonna start out by
getting the dependencies that we need.

4
00:00:11.664 --> 00:00:13.382
我们要利用阿波罗计划。
We're gonna be using Apollo for this.

5
00:00:13.382 --> 00:00:19.405
Apollo 是一个 GraphQL 库，具有特定的 React 设置。
Apollo is a GraphQL library
that has specific React setup.

6
00:00:19.405 --> 00:00:23.364
它的设计是相对简单的设置，他们只是
It's designed to be relatively
straightforward to set up and they just

7
00:00:23.364 --> 00:00:27.855
释放钩子支持，这是真的，真的很好，所以我们要使用这个。
released hook support which is really,
really nice, so we're gonna use that.

8
00:00:27.855 --> 00:00:34.109
所以我们要加纱盖茨比插件阿波罗和
So we're gonna yarn add
gatsby-plugin-apollo and

9
00:00:34.109 --> 00:00:39.255
那我们就有依赖性了。
then we're gonna have some dependencies.

10
00:00:39.255 --> 00:00:45.615
所以它需要 graphql 标签，然后它需要 apollo / react-common
So it needs the graphql tag and
then it needs apollo/react-common for

11
00:00:45.615 --> 00:00:52.189
一些普通的部件，然后它需要 apollo / reaction-hooks
some common pieces will use, and
then it needs apollo/react-hooks for

12
00:00:52.189 --> 00:00:55.375
我们要用的反应钩。
the react hooks that we want to use.

13
00:00:57.740 --> 00:00:59.743
杰森 · 兰斯托夫: 所以我们将安装它。
&gt;&gt; Jason Lengstorf: So
we'll get that installed.

14
00:00:59.743 --> 00:01:02.784
在我们等待安装的同时,
And while we're waiting for
that to install,

15
00:01:02.784 --> 00:01:06.454
我将创建一个名为 results.js 的新组件。
I'm gonna create a new
component called results.js.

16
00:01:06.454 --> 00:01:11.974
在它里面，我们要进口反应，从反应和
And inside of it we're gonna
import react from react and

17
00:01:11.974 --> 00:01:18.676
我们还要从 apollo / react-hooks 进口电子设备。
we're also going to import
useQuery from apollo/react-hooks.

18
00:01:23.164 --> 00:01:28.640
Jason Lengstorf: 我们将导入 gql 标记，它非常
&gt;&gt; Jason Lengstorf: And
we'll import the gql tag which is very

19
00:01:28.640 --> 00:01:34.753
不同于盖茨比使用的石头。
different from the graphql
that Gatsby uses.

20
00:01:34.753 --> 00:01:39.394
因为 GQL 标记，所以在这里进行区分是很重要的
And it's important to draw
a distinction here because the GQL tag

21
00:01:39.394 --> 00:01:43.118
保留在代码中，所以这个会发送到浏览器。
stays in the code, so
this will ship to the browser.

22
00:01:43.118 --> 00:01:49.764
当你写一个 GraphQL 查询时，它会告诉你,
And what it's doing is it's telling
when you write a GraphQL query,

23
00:01:49.764 --> 00:01:55.151
使用模板标记时，GQL 标记将其分解
and you use that template tag,
the GQL tag breaks it down

24
00:01:55.151 --> 00:02:00.436
一些 GraphQL 服务器可以理解的东西。
into something that a GraphQL
server can understand.

25
00:02:00.436 --> 00:02:06.418
盖茨比 GraphQL 在构建时被删除，它标记的内容类似于,
The Gatsby GraphQL gets removed at build
time, it's marking something as like,

26
00:02:06.418 --> 00:02:09.983
嘿，你应该在构建过程中处理这个。
hey, you should process
this during the build.

27
00:02:09.983 --> 00:02:15.894
阿波罗公司的 GQL 正在告诉阿波罗如何解释已经写好的和
GQL from Apollo is telling Apollo how to
interpret a query that's been written and

28
00:02:15.894 --> 00:02:17.701
在建造时间执行。
executed at build time.

29
00:02:17.701 --> 00:02:21.288
这就是为什么它们是不同的东西，它们执行不同的功能。
So that's why they're different things,
they perform different functions.

30
00:02:21.288 --> 00:02:24.713
但是如果您需要一个 GraphQL，那么它可能会有点混乱
But it can be a little confusing
especially if you need a GraphQL

31
00:02:24.713 --> 00:02:29.185
了解每件作品的作用，以及它们的必要性。
to understand exactly what each of those
pieces does and why they're necessary.

32
00:02:29.185 --> 00:02:33.485
但是这就是为什么它存在的快速版本。
But that's the very fast
version of why that's there.

33
00:02:33.485 --> 00:02:36.358
所以我要做的第一件事就是设置我的搜索查询。
So the first thing I wanna do
is to set up my search query.

34
00:02:36.358 --> 00:02:39.288
因为我们是为客户服务的,
And because we're doing
this on the client side,

35
00:02:39.288 --> 00:02:44.114
我们可以使用任何我们想要的变量，我们可以做任何我们想做的事情。
we can use any variables that we want, we
can do really anything that we want here.

36
00:02:44.114 --> 00:02:49.915
这是 Rick 和 Morty 的 API，我们将从我们想去的地方开始。
So this is the Rick and Morty API, and
we'll just start with where we want to be.

37
00:02:49.915 --> 00:02:52.461
所以我们想对字符进行查询。
So we want to do a query for characters.

38
00:02:52.461 --> 00:02:58.177
和 Morty API 使用了一个不同的 GraphQL Explorer。
The Rick and Morty API uses
a different GraphQL Explorer.

39
00:02:58.177 --> 00:03:03.769
所以它有点不同，它没有喜欢点击按钮
So it's a little bit different, it doesn't
have the the like click button this

40
00:03:03.769 --> 00:03:09.371
建立一个查询的东西，这是一种无赖，但它仍然很不错。
to build a query thing, which is kind of
a bummer, but it's still pretty nice.

41
00:03:09.371 --> 00:03:11.907
我们要深入调查这里的医生看看。
So we're gonna dig into the docs
over here and take a look.

42
00:03:11.907 --> 00:03:16.314
所以我们有了字符查询，这就是我想要的
So we've got the characters query,
which is what I want and

43
00:03:16.314 --> 00:03:18.793
在里面，我可以设置一个过滤器。
inside of it, I can set a filter.

44
00:03:18.793 --> 00:03:20.747
我想要的过滤器会出现在名字上。
And the filter that I want
is gonna be on the name.

45
00:03:20.747 --> 00:03:26.318
让我们查询一下这个名字，它是一个字符串
So let's query on the name,
that's gonna be a string and

46
00:03:26.318 --> 00:03:32.829
然后我想过滤的名称，我们会使用这个名称变量。
then I want to filter on the name and
we'll use that name variable.

47
00:03:32.829 --> 00:03:36.695
所以我们可以在这里打开查询变量
So we may open up the query
variables down here and

48
00:03:36.695 --> 00:03:41.235
我们会说这个名字是让我们先做瑞克。
we'll say that the name is
gonna be let's do Rick first.

49
00:03:41.235 --> 00:03:50.574
然后，杰森 · 兰斯托夫: 一旦我们进入这里,
Then,
&gt;&gt; Jason Lengstorf: Once we're in here,

50
00:03:50.574 --> 00:03:56.264
我们可以点击 Option + Space 查看可用的字段是什么。
we can hit Option + Space to see
what the available fields are.

51
00:03:56.264 --> 00:03:59.707
所以我要得到结果在我的结果里面,
So I'm gonna get results and
inside my results,

52
00:03:59.707 --> 00:04:03.993
选项 + 空间再次，让我们只是得到的名称现在。
Option + Space again, and
let's just get the name for now.

53
00:04:03.993 --> 00:04:08.412
所以我们应该让每个人都叫瑞克，杰森 · 兰斯托夫: 还有
So we should get everybody named Rick,
&gt;&gt; Jason Lengstorf: And

54
00:04:08.412 --> 00:04:11.342
我们可以看到它们的数量不少。
we can see that there
are quite a few of them.

55
00:04:11.342 --> 00:04:17.654
如果我们加入这些信息，我们可以看到我认为计数。
And if we were to include the info,
we can see I think the count.

56
00:04:17.654 --> 00:04:22.021
所以这部剧里有73个叫 Rick 的角色
So there are 73 characters in the show
named Rick, and we are getting

57
00:04:22.021 --> 00:04:27.362
一个子选项，不是所有的，但是对我们来说这个是可以的，对吗？
a sub-selection, it's not all of them,
but for our purposes this is okay, right?

58
00:04:27.362 --> 00:04:32.259
所以让我们继续前进，得到所有我们需要的东西。
So let's go ahead and
get all the stuff that we need.

59
00:04:32.259 --> 00:04:36.117
所以我认为，为了我们的目的，我们需要一个身份证明。
So I think for our purposes,
we're going to get an ID.

60
00:04:36.117 --> 00:04:41.807
我们需要名字，让我们得到物种，将得到原产地名称,
We want the name, let's get the species,
will get the origin name,

61
00:04:41.807 --> 00:04:48.105
我们会得到位置，然后我们会得到名字和尺寸。
and we'll get the location, and
we'll do the name and dimension for that.

62
00:04:48.105 --> 00:04:49.694
最后，让我们抓取图像。
And then finally, let's grab the image.

63
00:04:51.675 --> 00:04:55.112
杰森 · 兰斯托夫: 好的，这将给我们我们要做的一切
&gt;&gt; Jason Lengstorf: Okay, and so this
will give us everything that we're gonna

64
00:04:55.112 --> 00:04:59.786
需要显示一些结果，他们在哪里，他们从哪里来，名字和
need to show some results back where they
are, where they came from, name and and

65
00:04:59.786 --> 00:05:02.220
这样我们就可以展示出来。
image of them so
that we can show that off.

66
00:05:02.220 --> 00:05:08.168
既然知道了这一点，我们就可以把这个问题直接放到这里。
So knowing that, we can take this query
and we can drop it straight in here.

67
00:05:12.764 --> 00:05:16.944
让我们把这个做小一点，好吗？
&gt;&gt; Jason Lengstorf: And let's make
this a little bit smaller, okay?

68
00:05:16.944 --> 00:05:20.692
所以我在这里有我的全部问题。
So I've got my full query up here.

69
00:05:20.692 --> 00:05:24.893
然后，杰森 · 兰斯托夫: 我要设置我的
And then,
&gt;&gt; Jason Lengstorf: I'm going to set up my

70
00:05:24.893 --> 00:05:25.427
组件。
component.

71
00:05:25.427 --> 00:05:30.862
所以我的组件将被称为结果，它将接受一个名字道具。
So my component is gonna be called Results
and it's going to accept a name prop.

72
00:05:30.862 --> 00:05:33.476
这个名字就是结果
And that name prop is gonna be the result

73
00:05:33.476 --> 00:05:36.735
我们要从 URL 中得到的查询。
of the query that we're
gonna get out of the URL.

74
00:05:36.735 --> 00:05:41.764
那么，让我们首先开始查询。
So let's first, fire off the query.

75
00:05:41.764 --> 00:05:47.206
所以 useQuery 的工作方式是我们发送查询本身,
So the way that useQuery works
is we send in the query itself,

76
00:05:47.206 --> 00:05:53.514
我们已经在这里定义了，然后我们可以解析任何变量。
which we've defined up here, and
then we can parse in any variables.

77
00:05:53.514 --> 00:06:00.403
所以我要传入的变量只是名字，所以这个放在这里。
So the variables that I'm gonna pass in
are just the name, so this goes into here.

78
00:06:00.403 --> 00:06:03.761
我们要拿出来的是一个装载道具。
And what we're gonna get out
of it is a loading prop.

79
00:06:03.761 --> 00:06:07.982
因此，在执行查询时，加载将为 true。
So when the query is executing,
loading will be true.

80
00:06:07.982 --> 00:06:11.677
如果出了什么差错，我们就会得到一个错误。
If anything goes wrong,
we're gonna get an error.

81
00:06:11.677 --> 00:06:16.507
如果一切顺利，我们就能得到数据。
And if everything goes well,
we'll get data.

82
00:06:16.507 --> 00:06:21.625
一旦我们得到了结果，我们会检查是否有结果
Once we have that, we're gonna check
to see if we've got results and

83
00:06:21.625 --> 00:06:25.081
我们可以这样说，如果有数据。
we can do that by just
saying if there's data.

84
00:06:25.081 --> 00:06:30.824
然后我们要做一些很复杂的动作。
And then we're gonna do a little
bit of kind of like tricky stuff.

85
00:06:30.824 --> 00:06:34.497
所以我们说数据字符长度，如果失败了,
So we'll say data characters length and
if that fails,

86
00:06:34.497 --> 00:06:39.733
我们跳到一个空数组，然后设置长度
we're gonna just skip over to an empty
array, and then we'll set the length and

87
00:06:39.733 --> 00:06:44.050
如果长度大于0就意味着我们得到了结果。
say if the length is greater than 0,
that means we have results.

88
00:06:44.050 --> 00:06:49.279
所以基本上，如果数据返回为空，我们将显示没有结果。
So basically, if the data comes back
empty, we will show a no results.

89
00:06:49.279 --> 00:06:54.262
或者如果出于某种原因我们根本没有一个角色道具
Or if if for some reason we don't
get a characters prop at all

90
00:06:54.262 --> 00:06:58.959
将默认为空数组，然后显示没有结果。
will default to an empty array and
then show no results.

91
00:06:58.959 --> 00:07:03.507
一旦我们知道了这些，我们就可以返回我们的对象。
Once we know about that,
we can return our object.

92
00:07:03.507 --> 00:07:08.557
所以对于这本书，为了让它不至于无法阅读,
And so for this one, for the sake of
making it not impossible to read,

93
00:07:08.557 --> 00:07:11.620
我们来做一些嵌入式样式。
we'll do a little bit of inline styling.

94
00:07:11.620 --> 00:07:15.536
所以我们要设置一个最大宽度为500
So we're gonna set up
a max width of 500 and

95
00:07:15.536 --> 00:07:20.173
然后我们在顶部设置一个50像素的边距
then we'll set up a margin
of 50 pixels at the top and

96
00:07:20.173 --> 00:07:23.384
底部和中心左边和右边。
bottom and center it left and right.

97
00:07:25.605 --> 00:07:30.494
然后我们会说这些是我们的搜索结果
&gt;&gt; Jason Lengstorf: And then we'll say
that these are our search results, and

98
00:07:30.494 --> 00:07:33.302
让我们看看，如果我们装载。
let's see, if we're loading.

99
00:07:33.302 --> 00:07:39.396
我们只展示一个段落，说加载结果。
We're going to show just a paragraph
that says loading results.

100
00:07:39.396 --> 00:07:45.406
如果有错误，我们将显示一个 pre-tag 和
If there is an error,
we will show a pre-tag and

101
00:07:45.406 --> 00:07:51.134
我们只是要有 overflowX 滚动。
we are just gonna have
the overflowX scroll.

102
00:07:51.134 --> 00:07:56.088
因此，如果我们得到一个长的错误，它不会打破我们的布局。
So if we get a long error,
it doesn't blow our layout.

103
00:07:56.088 --> 00:08:00.197
然后我们就可以解决这个错误。
And then we will just stringify the error.

104
00:08:00.197 --> 00:08:05.461
传递错误也是如此。
So will do JSON.stringify
passing the error.

105
00:08:05.461 --> 00:08:07.127
这是一个函数的弦,
That's stringfies a function,

106
00:08:07.127 --> 00:08:11.291
所以我们将错误作为第一个参数传入，第二个参数为 null
so we'll pass in the error as the first
argument, null is the second argument, and

107
00:08:11.291 --> 00:08:15.237
2作为空格的数量来打破对象和美化它一点点。
2 as the number of spaces to break the
object up and prettify it up a little bit.

108
00:08:18.244 --> 00:08:20.332
杰森 · 兰斯托夫: 假设我们没有错误,
&gt;&gt; Jason Lengstorf: And
assuming we don't have an error,

109
00:08:20.332 --> 00:08:22.497
我们要检查一下有没有结果。
we're gonna check if we have results.

110
00:08:22.497 --> 00:08:28.781
如果我们有结果，我们将，杰森冷斯托夫: 地图
And if we have results we wil,
&gt;&gt; Jason Lengstorf: Map

111
00:08:28.781 --> 00:08:33.750
所以 data.characters. results.map,
over our characters, so
data.characters.results.map,

112
00:08:33.750 --> 00:08:36.192
这样我们就有了一个角色。
that'll give us a character.

113
00:08:36.192 --> 00:08:40.534
我们可以设置一个 div，它有一个钥匙
And we can set up a div,
and that'll have a key

114
00:08:40.534 --> 00:08:44.894
我们查询的字符 ID。
of the character ID that we queried for
that.

115
00:08:44.894 --> 00:08:50.590
所以我们可以使用任何回到这里的 ID，名称空格，等等。
So we can just use anything that comes
back here the ID, names spaces, etc.

116
00:08:50.590 --> 00:08:54.356
在这里设置一点样式，所以显示 flex
Set up a little bit of styling on this,
so display flex so

117
00:08:54.356 --> 00:08:59.342
我们可以在线上展示一些东西，而不是一大堆粗糙的东西。
that we can kind of show things in
the line as opposed to a big gnarly stack.

118
00:08:59.342 --> 00:09:01.553
然后我们会设置一点点的底部边距
And then we'll set a little
bit of margin bottom so

119
00:09:01.553 --> 00:09:03.354
东西不是一起砸碎的。
that things aren't smashed together.

120
00:09:07.388 --> 00:09:11.533
杰森 · 兰斯托夫: 好的，那么，杰森 · 兰斯托夫: 我们已经得到了那个 div。
&gt;&gt; Jason Lengstorf: Okay, then,
&gt;&gt; Jason Lengstorf: We've got that div.

121
00:09:15.495 --> 00:09:20.543
杰森 · 兰斯托夫: 是的，然后在这里我们需要弄清楚
&gt;&gt; Jason Lengstorf: Right, and
then down here we need to figure out if

122
00:09:20.543 --> 00:09:25.355
没有装载，也没有结果。
its not loading and
it doesn't have results.

123
00:09:25.355 --> 00:09:29.687
所以如果没有结果也没有加载,
So if it doesn't have results and
it's not loading,

124
00:09:29.687 --> 00:09:33.921
我们要展示的只是一个基本的没有字符发现
we're going to show just
a basic no characters found

125
00:09:33.921 --> 00:09:39.442
杰森 · 兰斯托夫: 名字。
matching,
&gt;&gt; Jason Lengstorf: Name.

126
00:09:42.663 --> 00:09:45.549
杰森 · 兰斯托夫: 假设我们到了这里，我们有了 div 和
&gt;&gt; Jason Lengstorf: So assuming we
get in here we've got our div and

127
00:09:45.549 --> 00:09:47.770
我们想展示一下我们所拥有的。
we want to show off what we've got.

128
00:09:47.770 --> 00:09:52.389
因此，让我们设置一个 div 来保存图像。
So let's set up a div to hold the image.

129
00:09:52.389 --> 00:09:56.946
这个有点小问题，我觉得这个可以清理一下
And this is getting a little divy,
I think this could be cleaned up but

130
00:09:56.946 --> 00:10:01.349
我们不是为了设计奖，我们是为了,
again we're not going for
design awards here, we're going for,

131
00:10:01.349 --> 00:10:04.269
展示客户端应用程序是如何工作的。
showing how the client
side app would work.

132
00:10:04.269 --> 00:10:11.456
所以如果你要这么做，请不要把你的标记弄得这么难看。
So if you go to do this,
please don't make your markup this ugly.

133
00:10:11.456 --> 00:10:15.839
让我们来做一个图像，Jason Lengstorf: 在我们的
Let's go and do an image,
&gt;&gt; Jason Lengstorf: And inside of our

134
00:10:15.839 --> 00:10:21.842
图片我们需要的来源，我们要使用的字符图片，这是一个网址。
image we need source and we're gonna
use the character.image which is a URL.

135
00:10:21.842 --> 00:10:27.260
然后，我们要使用 alt，这是字符的名字,
Then, we're gonna use the alt,
which is the character's name,

136
00:10:27.260 --> 00:10:32.192
和一点点的风格，我们会设置为100% 宽,
and a little bit of style,
we will set it to be 100% wide,

137
00:10:32.192 --> 00:10:34.937
所以基本上填满这个 div。
so just fill this div basically.

138
00:10:37.668 --> 00:10:42.105
杰森 · 兰斯托夫: 接下来，因为我们使用 flexbox，我们将,
&gt;&gt; Jason Lengstorf: And next to that,
because we're using flexbox, we will,

139
00:10:45.485 --> 00:10:48.009
设置一个 h 3来显示,
&gt;&gt; Jason Lengstorf: Set up an h3 to show,

140
00:10:52.408 --> 00:10:54.216
杰森 · 兰斯托夫: 名字。
&gt;&gt; Jason Lengstorf: The name.

141
00:10:54.216 --> 00:10:58.845
所以我们会说 character.name 和
So we'll say character.name, and

142
00:10:58.845 --> 00:11:06.158
让我们使字体大小20和设置边距顶部为0，所以
let's make the font size 20 and
set the margin top to 0 so

143
00:11:06.158 --> 00:11:11.097
没有破坏整个布局。
that it's not blowing out the layout.

144
00:11:11.097 --> 00:11:15.903
然后我们会建立一个物种
And then we'll set up a Species and

145
00:11:15.903 --> 00:11:21.381
利用角色特征，物种特征。
use the character.species for that.

146
00:11:21.381 --> 00:11:26.138
然后我们复制这个，然后说 Origin 和
And then let's duplicate this and
say Origin and

147
00:11:26.138 --> 00:11:30.432
我们用 character.origin.name。
we'll use the character.origin.name.

148
00:11:30.432 --> 00:11:35.389
我认为这可能是好的，让我们看看物种和起源的名称，所以
And I think that's probably good, so
let's see species and origin name, so

149
00:11:35.389 --> 00:11:39.750
实际上我们不用这个位置，所以我们可以不用这个。
we're actually not using the location so
we can just drop that out.

150
00:11:39.750 --> 00:11:48.020
那么让我们导出这个结果，Jason Lengstorf: 默认结果，好吗？
So let's export this result,
&gt;&gt; Jason Lengstorf: Default results, okay?
