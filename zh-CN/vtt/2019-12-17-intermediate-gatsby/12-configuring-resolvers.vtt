WEBVTT

1
00:00:00.090 --> 00:00:03.319
杰森 · 兰斯托夫: 我们告诉盖茨比要一具尸体,
&gt;&gt; Jason Lengstorf: We told
Gatsby to expect a body,

2
00:00:03.319 --> 00:00:05.870
但我们还没这么做。
but we haven't done that yet.

3
00:00:05.870 --> 00:00:10.397
原因是并不是所有的节点类型
And the reason for
that is that not all of the node types

4
00:00:10.397 --> 00:00:14.734
当我们开始创建节点的时候，问题就完全解决了。
fully resolved by the time
we get to on create node.

5
00:00:14.734 --> 00:00:16.478
所以这就产生了一个挑战。
And so that creates a challenge.

6
00:00:16.478 --> 00:00:18.548
如果我想得到 MDX 的身体,
If I wanna get the MDX body,

7
00:00:18.548 --> 00:00:24.236
就是那种我们可以在站点上显示 MDX 的经过处理的代码。
which is that kind of processed code that
we can use on a site to display MDX.

8
00:00:24.236 --> 00:00:26.530
我不能就这么说，还没定呢。
I can't just call it here, it's not set.

9
00:00:26.530 --> 00:00:30.690
这意味着我必须创建一个自定义解析器。
So that means that I have to
create a custom resolver.

10
00:00:30.690 --> 00:00:33.393
这就是我们进入有趣部分的地方,
And so this is where we're kind
of getting into the fun part,

11
00:00:33.393 --> 00:00:35.414
盖茨比工作方式的真正细节。
the really nitty gritty
of how Gatsby works.

12
00:00:35.414 --> 00:00:38.777
所以我们要继续创建自定义解析器。
So we're gonna go ahead and
create the custom resolver.

13
00:00:38.777 --> 00:00:42.835
我们使用 createresolver API 钩子,
And we do that using
the createresolver API hook,

14
00:00:42.835 --> 00:00:48.179
这就给了我们，不好意思，这是复数创造者。
which gives us, sorry,
it's plural createresolvers.

15
00:00:48.179 --> 00:00:52.469
这就给了我们一个叫做 createresolvers 的函数。
And that gives us a function
called createresolvers.

16
00:00:53.719 --> 00:00:57.142
我们称之为。
And we call that.

17
00:00:57.142 --> 00:00:59.094
如果你以前用过 GraphQL,
And if you've ever used GraphQL before,

18
00:00:59.094 --> 00:01:02.119
解析器的工作方式是反映数据结构。
the way that resolvers work is
they reflect the data structure.

19
00:01:02.119 --> 00:01:08.099
因此，如果你有一个类型的文档页面，你可以
So if you have a type of docs page,
you can

20
00:01:08.099 --> 00:01:13.856
通过创建一个以 docs 页面作为对象键的对象来定义解析器，以及
define resolvers by creating an object
that has docs page as the object key, and

21
00:01:13.856 --> 00:01:18.549
然后字段名作为子对象。
then a field name as a sub-object.

22
00:01:18.549 --> 00:01:22.039
默认情况下，它会查找节点，所以
By default, what it'll do is
it'll look for the node, so

23
00:01:22.039 --> 00:01:24.349
我们正在创建的文档页面节点。
this docs page node that we're creating.

24
00:01:24.349 --> 00:01:29.750
它会在该节点上说，给我与字段名匹配的属性。
And it will say on that node, give me
the property that matches the field name.

25
00:01:29.750 --> 00:01:32.750
所以对于 title，它会寻找 node.title。
So for title, it'll look for node.title.

26
00:01:32.750 --> 00:01:37.420
在这些情况下，对于在路径中更新的 ID 标题，这就是我们想要的。
And in these cases, for the ID title
updated in path, that's what we want.

27
00:01:37.420 --> 00:01:38.539
我们需要默认行为。
We want the default behavior.

28
00:01:38.539 --> 00:01:39.700
所以我们不需要修改它。
So we don't need to modify that.

29
00:01:39.700 --> 00:01:41.509
解析器将按预期工作。
Resolvers will work as expected.

30
00:01:41.509 --> 00:01:44.960
但是尸体，我们这里没有尸体。
But for body,
we don't have a body on here.

31
00:01:44.960 --> 00:01:47.539
所以我们需要改变这种状况。
So we need to change that.

32
00:01:47.539 --> 00:01:52.039
这意味着我们需要做一些事情。
And that means that we need
to do a couple things.

33
00:01:52.039 --> 00:01:55.520
所以首先，我们需要准备一些东西，我刚刚意识到我忘记了
So first, we need to set up a couple
things that I just realized I forgot when

34
00:01:55.520 --> 00:01:58.000
我很兴奋要安排这件事。
I got excited about setting this thing up.

35
00:01:58.000 --> 00:02:02.780
所以在 createNode 调用中，每个 Gatsby 节点都需要有这个内部字段。
So in a createNode call, every Gatsby
node needs to have this internal field.

36
00:02:02.780 --> 00:02:04.269
记住，我们一分钟前谈过这个问题。
Remember, we talked
about that a minute ago.

37
00:02:04.269 --> 00:02:07.840
它包括类型名称和诸如此类的东西。
It includes the type name and
those sorts of things.

38
00:02:07.840 --> 00:02:13.162
所以我们要设置类型，我们只需要使用 DocsPage。
So we're gonna set up the type and
we'll just use DocsPage.

39
00:02:13.162 --> 00:02:18.280
再说一次，这可以是我们想要的任何东西，我们只是想确保它是独一无二的。
Again, this can be whatever we want,
we just wanna make sure that it's unique.

40
00:02:19.360 --> 00:02:24.544
您可以在这里做一些聪明的事情，以保证有一个唯一的类型名称。
You could do something clever in here
to have a guaranteed unique type name.

41
00:02:24.544 --> 00:02:27.765
但除非你要建一个真正复杂的盖茨比工地,
But unless you're doing a really
really complex Gatsby site,

42
00:02:27.765 --> 00:02:29.352
这很容易管理。
this is pretty easy to manage.

43
00:02:29.352 --> 00:02:33.259
接下来我们需要的是，我们总是想给它一个内容摘要。
And the next thing that we need is we
always wanna give it a content digest.

44
00:02:33.259 --> 00:02:37.747
因为 Gatsby 使用内容摘要，它类似于节点内容的散列
Because Gatsby uses the content digest,
which is like a hash of the node content

45
00:02:37.747 --> 00:02:41.909
来决定它是否应该扔掉那个节点，建立一个新的节点。
to decide whether or not it should throw
away that node and build a new one.

46
00:02:41.909 --> 00:02:44.300
这是一种在构建过程中减少工作量的方法。
That's a way to do less
work during the build.

47
00:02:44.300 --> 00:02:46.020
所以在这种情况下,
So, in this case,

48
00:02:46.020 --> 00:02:49.139
我们实际上不需要创建一个，因为我们只是使用 MDX 节点。
we don't really need to create one
because we're just using an MDX node.

49
00:02:49.139 --> 00:02:53.120
所以我们只需要使用这个节点的内容摘要
So we'll just use that
node's content digest, so

50
00:02:53.120 --> 00:02:56.110
我们不需要做额外的工作。
we don't have to do any extra work.

51
00:02:56.110 --> 00:02:58.694
因为如果 MDX 节点发生更改，文档页面将发生更改。
Because if our MDX node changes,
our docs page will change.

52
00:02:58.694 --> 00:03:01.689
这是一个相当安全的假设。
That's a fairly safe assumption.

53
00:03:01.689 --> 00:03:07.729
现在我们有了这些，这些内部的和类型，我们可以实际使用它们。
Now that we've got these, these internal
and type, we can actually use them.

54
00:03:07.729 --> 00:03:14.099
所以在我们的 createResolvers 中，我们将进入我们的 DocsPage 类型,
So in our createResolvers we're
going to get into our DocsPage type,

55
00:03:14.099 --> 00:03:16.939
然后我们要建立一个身体解析器。
and then we're gonna
set up a body resolver.

56
00:03:16.939 --> 00:03:22.289
因此，像这样的解析器中的主体类型声明有两个属性。
So, a body type declaration in
a resolver like this has two properties.

57
00:03:22.289 --> 00:03:27.330
第一个是一个类型，这和我们在这里的声明相匹配。
The first one is a type, and so that's
gonna match our declaration up here.

58
00:03:27.330 --> 00:03:30.294
让我把这些折叠起来，这样更容易移动。
Let me collapse these down so
it's easier to move between.

59
00:03:30.294 --> 00:03:33.610
我们得到了我们的身体，这是一条线，它是必需的。
We've got our body,
which is a string and it's required.

60
00:03:33.610 --> 00:03:37.060
在这里，我们要说它是一个字符串，它是必需的。
So in here, we're gonna say it's
a string and it's required.

61
00:03:37.060 --> 00:03:39.590
然后我们有一个叫做解决的属性。
And then we have
a property called resolve.

62
00:03:40.729 --> 00:03:42.349
这是一个函数。
And that is a function.

63
00:03:42.349 --> 00:03:44.060
这样就有了四个参数。
So that gets four arguments.

64
00:03:44.060 --> 00:03:46.650
这是一个非常标准的 GraphQL 模式。
This is a pretty standard GraphQL pattern.

65
00:03:46.650 --> 00:03:51.009
第一个参数是实际的数据，也就是节点本身。
The first argument is the actual data,
so the node itself.

66
00:03:51.009 --> 00:03:53.620
然后将所有参数传递给该节点。
Then you get any arguments
passed to that node.

67
00:03:53.620 --> 00:03:58.314
所以如果你有一个过滤器或当我们使用日期格式，如果我们
So if you had a filter or
when we're using the date format if we

68
00:03:58.314 --> 00:04:02.150
想要设置如何格式化的东西，这会出现在这个 args 的论点。
wanna set how to format things,
that would come in this args argument.

69
00:04:03.180 --> 00:04:08.240
然后我们获得上下文，即关于请求或节点的信息。
Then we get context, which is information
about the request or the node.

70
00:04:08.240 --> 00:04:11.099
最后，我们得到了一些信息，这是很普遍的
And finally, we get info,
which is kind of general

71
00:04:11.099 --> 00:04:16.250
关于 GraphQL Schema 的信息以及我们可能正在做的所有事情。
information about the GraphQL Schema and
all the things that we might be doing.

72
00:04:16.250 --> 00:04:18.629
因为我们正在深入了解盖茨比的内心世界,
And because we are diving
into the internals of Gatsby,

73
00:04:18.629 --> 00:04:20.189
我们要把这四个都用上。
we are gonna use all four of those.

74
00:04:20.189 --> 00:04:24.240
通常情况下，你会发现很多时候你只是使用源代码。
Typically, you'll find a lot of
times you'll just use the source.

75
00:04:24.240 --> 00:04:29.050
但是当你开始做这些有趣的事情的时候，它就会变得有点不靠谱了。
But when you get into these kind of fun
things, it will get a little wonky.

76
00:04:29.050 --> 00:04:34.959
所以我们要做的第一件事是，我们要加载 MDX 的解析器
So the first thing we wanna do is we
wanna load the resolver for the MDX

77
00:04:37.100 --> 00:04:42.649
特别是我们要找到尸体。
type, and
specifically we want the body field.

78
00:04:44.620 --> 00:04:48.610
所以我们通过创建一个新的常量
So we do that by creating
a new constant and

79
00:04:48.610 --> 00:04:55.540
我们只需要执行 info.schema.getType (‘ mdx’)。
we'll just do info.schema.getType ('mdx').

80
00:04:55.540 --> 00:04:59.173
然后在下面我们会得到所有的 mdxFields。
And then below that we're going
to get all the mdxFields.

81
00:04:59.173 --> 00:05:02.362
这将是 getFields 类型。
And that's going to be type getFields.

82
00:05:04.437 --> 00:05:08.656
杰森 · 兰斯托夫: 我们现在所做的就是在《了不起的盖茨比》中所说的
&gt;&gt; Jason Lengstorf: So what we've done
right now is we've said in the Gatsby

83
00:05:08.656 --> 00:05:15.889
在整个模式中，我们希望加载 MDX 节点的整个模式定义。
schema, the whole schema, we want to load
the whole schema definition for MDX nodes.

84
00:05:15.889 --> 00:05:17.519
这就给了我们自己的类型。
That gives us our type.

85
00:05:17.519 --> 00:05:23.019
然后我们要装载 MDX 的所有字段，这就给出了字段。
So then we're gonna load all of the fields
for MDX and that gives us the field.

86
00:05:23.019 --> 00:05:26.779
所以除了其他的事情，它会给我们提供身体场。
So among other things,
it will give us that body field.

87
00:05:26.779 --> 00:05:30.689
然后我要找到解决方案。
And then I wanna get the resolver for it.

88
00:05:30.689 --> 00:05:38.300
我通过获取 mdxFields.body.resolve 来做到这一点。
And I do that by getting
mdxFields.body.resolve.

89
00:05:38.300 --> 00:05:42.139
这个解析的定义方式与这个解析的定义方式相同。
And this resolve is defined
the same way as this one is.

90
00:05:42.139 --> 00:05:44.069
所以我们的意思是,
So what we're basically saying is,

91
00:05:44.069 --> 00:05:49.540
我希望能够解决对文档页面主体类型的请求,
I want to be able to resolve
the request to the docs page body type,

92
00:05:49.540 --> 00:05:55.430
与我们将 MDX 节点请求解析为主体类型的方法完全相同。
exactly the same way as we resolve
MDX node request to the body type.

93
00:05:55.430 --> 00:05:56.295
这说得通吗？
Does that make sense?

94
00:05:56.295 --> 00:06:02.091
所以我们所做的就是通过解析器。
So what we've done in doing this is
we've made a pass through resolver.

95
00:06:02.091 --> 00:06:06.862
这意味着我们的文档页面将处理
And that means that our docs page
is going to handle requests for

96
00:06:06.862 --> 00:06:10.028
Mdx 数据与 MDX 的方式完全相同。
MDX data exactly the same way as MDX does.

97
00:06:10.028 --> 00:06:13.218
我们不是重造轮子，我们也不是在重新实现 MDX。
And we're not reinventing the wheel,
we're not re-implementing MDX.

98
00:06:13.218 --> 00:06:16.100
我们只是在使用 MDX 已经在做的工作。
We're just using the work
that MDX is already doing.

99
00:06:17.360 --> 00:06:23.370
一旦我们有了这个解析器我们就可以得到 mdxNode,
So once we've got this resolver,
we can I get the mdxNode,

100
00:06:23.370 --> 00:06:25.519
通过进入上下文来实现。
which will do by going into the context.

101
00:06:27.009 --> 00:06:31.810
我们将进入 nodeModel 并通过它的 ID 获取节点。
And we'll go into the nodeModel and
get the node by its ID.

102
00:06:33.189 --> 00:06:37.139
Id 是父节点，因为记住我们的文档页面,
And the ID is the parent node
because remember our docs page,

103
00:06:37.139 --> 00:06:39.689
设置一个，还是我说的父母？
set a, or did I said a parent?

104
00:06:39.689 --> 00:06:40.209
希望如此。
I hope I did.

105
00:06:41.579 --> 00:06:42.379
我有父母。
I have the parent.

106
00:06:43.610 --> 00:06:44.370
但不是我设置的。
But I didn't set it.

107
00:06:44.370 --> 00:06:46.060
那么，让我们也设置一下。
So let's set that as well.

108
00:06:46.060 --> 00:06:50.997
因此，我们将设置，Jason Lengstorf: Node id 为
So we will set the,
&gt;&gt; Jason Lengstorf: Node id of

109
00:06:50.997 --> 00:06:54.586
我们的 MDX 节点作为我们的 DocsPage 节点的父节点，所以
our MDX node as the parent
of our DocsPage node so

110
00:06:54.586 --> 00:06:59.409
我们可以在这个解析器中引用它。
that we're able to reference
that in this resolver.

111
00:06:59.409 --> 00:07:05.689
因此，拥有这个源 node.parent 意味着我们可以提取 MDX 节点本身。
So having this source node.parent means
that we can pull out the MDX node itself.

112
00:07:06.920 --> 00:07:13.038
加载此 MDX 节点后，现在就可以解析它了。
Once we've loaded this MDX node,
we can now just resolve it.

113
00:07:13.038 --> 00:07:19.100
所以我们要运行这个解析器函数，这个函数是我们从 MDX 体字段中提取出来的。
So we're gonna run this resolver function
that we pulled out of the MDX body field.

114
00:07:19.100 --> 00:07:23.031
我们的参数是想从中获取数据的 mdxNode,
And our arguments are the mdxNode
that we wanna get data from,

115
00:07:23.031 --> 00:07:27.112
如果我们想要通过的话，那些方舟就会通过,
the args that were passed in in
case we wanted to do pass through,

116
00:07:27.112 --> 00:07:30.384
请求的上下文以备不时之需。
the context of the request
in case that's needed.

117
00:07:30.384 --> 00:07:35.706
然后我们要告诉超能力者，我们正在使用身体场。
And then we just wanna tell the meta
that we're using the body field.

118
00:07:37.689 --> 00:07:40.678
杰森 · 兰斯托夫: 既然我们已经做到了,
&gt;&gt; Jason Lengstorf: So
now that we've done that,

119
00:07:40.678 --> 00:07:44.504
我们应该做的是查询
what we should be able to do is query for

120
00:07:44.504 --> 00:07:50.137
我们的文档页面类型和加载 MDX 数据到 body 字段。
our docs page type and
load MDX data into the body field.

121
00:07:50.137 --> 00:07:54.920
然后从文件系统中获取所有其他的数据,
And then get all the other data, from
the front matter, from the file system,

122
00:07:54.920 --> 00:07:59.800
在一种简单的节点 API 的一个地方，所以我们不做任何事情。
all in one place in one kind of simple
node API so that we're not doing anything.

123
00:07:59.800 --> 00:08:02.904
我们不想在我们的业务逻辑中做所有这些变通方法。
We don't wanna have to do all these
workarounds in our business logic.

124
00:08:02.904 --> 00:08:05.584
我们想设置一次，然后有简单的查询
We wanna set this up once and
then have simple queries for

125
00:08:05.584 --> 00:08:07.189
前端开发人员使用。
the frontend developers to use.

126
00:08:08.310 --> 00:08:13.899
所以如果我停下来重新开始，现在为了这样做，因为我们刚刚改变了
So if I stop and restart, and now in
order to do this, because we just changed

127
00:08:13.899 --> 00:08:19.060
按照节点的工作方式，我们想让盖茨比重新开始。
the way that nodes work, we're going to
want to get Gatsby to pull a fresh start.

128
00:08:19.060 --> 00:08:22.269
所以为了做到这一点，我们要让盖茨比干干净净。
So to do that,
we're gonna run gatsby clean.

129
00:08:22.269 --> 00:08:24.634
但是你把盖茨比打扫得干干净净
But the way that you run gatsby clean and

130
00:08:24.634 --> 00:08:29.084
纱线工作区是我们实际上要做纱线工作区主题-dev。
yarn workspaces is we're actually
gonna do yarn workspace theme-dev.

131
00:08:29.084 --> 00:08:32.299
然后我可以在这个上下文中执行一个任意的命令。
And then I can just execute an arbitrary
command within the context of that.

132
00:08:32.299 --> 00:08:34.451
所以我想把盖茨比打扫干净。
So I wanna run gatsby clean.

133
00:08:34.451 --> 00:08:39.863
它将删除公共目录和缓存目录，以便
And it's going to remove the public and
cache directory so

134
00:08:39.863 --> 00:08:44.293
我们基本上是从零开始。
that we're basically
starting from scratch.

135
00:08:44.293 --> 00:08:51.062
因此，我可以运行纱线工作空间主题开发。
So then I can run yarn
workspace theme-dev develop.

136
00:08:51.062 --> 00:08:53.302
假设一切顺利,
And assuming all went well,

137
00:08:53.302 --> 00:08:59.003
接下来会发生的是，这将启动与我们的 GraphQL 层在适当的地方。
what will happen is this is gonna boot
up with our GraphQL layer in place.

138
00:08:59.003 --> 00:09:03.974
这样我们就可以真正查询我们的主页了。
And we will be able to actually query for
our homepage.

139
00:09:03.974 --> 00:09:06.210
现在我们有了文档页面。
So now we've got our docs pages.

140
00:09:06.210 --> 00:09:10.389
这些都是我们告诉它的数据，对吧？
And those are pulling out the data
that we told it to, right?

141
00:09:10.389 --> 00:09:14.700
所以现在我们的 GraphQL 层有了自定义数据
So now we've got custom data
coming in to our GraphQL layer

142
00:09:14.700 --> 00:09:17.200
使用各种不同的节点作为数据。
using a variety of
different nodes as data.

143
00:09:17.200 --> 00:09:18.809
所以我们使用文件系统。
So we're using the file system.

144
00:09:18.809 --> 00:09:21.703
我们正在使用为路径创建的自定义数据。
We're using custom data that
we're creating for the path.

145
00:09:21.703 --> 00:09:24.799
我们使用 MDX 数据作为身体场。
And we're using the MDX data for
the body field.

146
00:09:24.799 --> 00:09:28.179
这些都是透明的，或者
This is all kind of transparent, or

147
00:09:28.179 --> 00:09:30.950
这些都是对任何人隐藏起来的。
this is all kind of hidden from
anybody who has to implement this.

148
00:09:30.950 --> 00:09:33.193
他们只知道我需要文档数据，他们也得到了。
They just know I want docs data,
and they get it.

149
00:09:33.193 --> 00:09:35.390
所以他们甚至不需要关心这是否来自 MDX。
So they don't even have to
care that this comes from MDX.

150
00:09:35.390 --> 00:09:39.628
他们只是需要有数据来使用。
They just need to have data to use.

151
00:09:39.628 --> 00:09:43.998
让我们稍微看一下，很多事情是如何完成的
And to look a little bit at kind of
how this a lot of things get done for

152
00:09:43.998 --> 00:09:47.250
我们，让我们从现在开始设置为真。
us, let's just set from now to true.

153
00:09:47.250 --> 00:09:50.139
这是一个内置的帮助器来做相对时间。
And this is a built in
helper to do relative time.

154
00:09:50.139 --> 00:09:53.169
所以现在我们可以看到它给了我们这个时间戳。
So right now we can see it
gave us this time stamp.

155
00:09:53.169 --> 00:09:54.889
有点小。
It's a little small.

156
00:09:54.889 --> 00:09:56.309
让我们把它放大一点。
So let's make that a little bigger.

157
00:09:56.309 --> 00:09:59.519
如果我把它改成从现在开始等于真，然后点击播放。
And if I change it to from
now equals true and hit play.

158
00:09:59.519 --> 00:10:00.830
现在它给了我们一个相对的变化。
Now it gives us a relative change.

159
00:10:00.830 --> 00:10:04.059
41分钟前是最后一次修改这个文档。
So 41 minutes ago was the last time
that this document was changed.

160
00:10:04.059 --> 00:10:08.129
所以当我们在网站上展示这个的时候，我们可以用简单的英语。
So we can just use that in plain English
when we display this on the site.

161
00:10:08.129 --> 00:10:09.440
我们只改变盖茨比节点。
We only change the Gatsby node.

162
00:10:09.440 --> 00:10:12.299
所以，让我们加上这一点。
So let's add that.

163
00:10:12.299 --> 00:10:20.450
然后我们提交(theme-dev) : 添加模式定制。
And then we'll commit (theme-dev):
add schema customization.

164
00:10:22.909 --> 00:10:23.700
让我来推一下。
And let me push that.

165
00:10:24.769 --> 00:10:29.549
所以这一切都被推到了回购协议上的进步分支
And so this is all being pushed to
the fen-progress branch on the repo if

166
00:10:29.549 --> 00:10:33.546
你想重新回到我们在任何时刻所处的位置。
you want to kind of reset to
where we are at any given moment.
