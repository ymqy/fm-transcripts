WEBVTT

1
00:00:00.008 --> 00:00:03.802
[音乐]
[MUSIC]

2
00:00:03.802 --> 00:00:07.618
&gt；&gt；Kyle Simpson：好的，让我们讨论一下回调之上的模式。
&gt;&gt; Kyle Simpson: All right, let's talk about a pattern on top of callbacks.

3
00:00:07.618 --> 00:00:10.512
这实际上已经存在了很长一段时间了。
This has actually been around for a really, really long time.

4
00:00:10.512 --> 00:00:14.553
它的方式早于JavaScript，这个术语甚至在
It way predates JavaScript, this terminology didn't even really exist in

5
00:00:14.553 --> 00:00:18.847
JavaScript，直到人们开始尝试在JavaScript中采用这个概念，并且
JavaScript until people started trying to adopt this notion in JavaScript, and

6
00:00:18.847 --> 00:00:20.019
单词是Thunk
the word is Thunk.

7
00:00:20.019 --> 00:00:22.940
我不知道他们是从哪里想出这个词的，
I have no idea where they came up with this word,

8
00:00:22.940 --> 00:00:27.269
我不知道他们在抽什么，我希望我有一些。
I don't know what they were smoking, I wish I had some of it.

9
00:00:27.269 --> 00:00:31.269
这是一个奇怪的词，我甚至不知道它的起源是什么，但我可以向你描述
It's a weird word, I don't even know what its origin is, but I can describe to you

10
00:00:31.269 --> 00:00:35.030
我认为这是什么，它实际上是一种欺骗性的简单。
what I think it is and it's actually kind of deceptively simple.

11
00:00:35.030 --> 00:00:40.640
从同步的角度看，Thunk是什么，Thunk是一个函数
What a Thunk is from a synchronous perspective, a Thunk is a function

12
00:00:41.700 --> 00:00:46.170
这已经有了它需要做的一切，才能给你一些价值。
that has everything already that it needs to do to give you some value back.

13
00:00:46.170 --> 00:00:49.560
不需要传递任何参数，只需调用它并
You do not need to pass any arguments in, you simply call it and

14
00:00:49.560 --> 00:00:50.679
它会给你一个价值。
it will give you a value back.

15
00:00:50.679 --> 00:00:51.460
听起来耳熟吗？
Does that sound familiar?

16
00:00:51.460 --> 00:00:55.439
你还记得我们之前在不同的车间里是怎么谈论这个的吗？
You remember how we were talking about that before in a different workshop?

17
00:00:58.149 --> 00:01:02.225
Thunk只是一个具有跟踪某个值的某种闭包状态的函数，
A Thunk is just a function with some closure state keeping track of some value,

18
00:01:02.225 --> 00:01:06.325
或值，每当你调用函数时，它都会返回这些东西。
or values, and it gives you those things back whenever you call the function.

19
00:01:08.290 --> 00:01:10.099
&gt；&gt；Kyle Simpson：这是一个同步的重击。
&gt;&gt; Kyle Simpson: Here's a synchronous thunk.

20
00:01:10.099 --> 00:01:13.299
我有一个add函数，它需要一个x和一个y，以及
I've got an add function, which expects an x and a y, and

21
00:01:13.299 --> 00:01:18.539
我做了一个thunk，调用add函数，其中已经有了10和15。
I make a thunk that calls the add function and already has the 10 and the 15 in it.

22
00:01:18.539 --> 00:01:19.890
在这种情况下是硬编码的。
It's hard coded in this case.

23
00:01:21.299 --> 00:01:25.299
每次我像在线一样调用，所以这是调用add函数的第9行，
Every time I call like I do online, so that's line 9 to call the add function,

24
00:01:25.299 --> 00:01:29.310
但每次我拨打9号线，如果我一遍又一遍地调用func
but every time I call line 9, if I call func over and over and

25
00:01:29.310 --> 00:01:33.680
再一次，我每次都会得到相同的值。
over again, I'm gonna get the same value out every single time.

26
00:01:33.680 --> 00:01:35.469
所以，现在这是最重要的部分。
So, now here's the important part.

27
00:01:35.469 --> 00:01:39.890
func本身的值，它是一个函数，
Func itself value, which is a function,

28
00:01:39.890 --> 00:01:43.469
它已经成为围绕特定状态集合的容器。
it has become a container around that particular collection of state.

29
00:01:44.680 --> 00:01:48.250
现在这是一个容器，我可以在我的程序中的任何地方传递它，
And that is now a container that I can pass around anywhere in my program,

30
00:01:49.539 --> 00:01:51.930
作为包装在那个状态周围的容器。
as a container wrapped around that state.

31
00:01:51.930 --> 00:01:55.319
任何时候我想提取它，我只需调用该函数并
And any time I want to extract it, I simply have to call that function and

32
00:01:55.319 --> 00:01:55.890
我把价值拿出来。
I get the value out.

33
00:01:55.890 --> 00:01:59.829
我不必传递值或状态本身。
I don't have to pass the value or the state itself.

34
00:01:59.829 --> 00:02:03.319
我在我的程序中传递了围绕该状态的包装器。
I passed the wrapper around that state all around my program.

35
00:02:03.319 --> 00:02:07.140
所以它就像一个代表这个值的令牌，很容易把它取出来。
So it becomes like a token that represents this value and it's easy to get it out.

36
00:02:07.140 --> 00:02:08.606
我所要做的就是执行它来获取值。
All I have to do is execute it to get the value out.

37
00:02:11.850 --> 00:02:15.193
&GT；&GT；Kyle Simpson：你可能还没有意识到这一点，但这是根本
&gt;&gt; Kyle Simpson: You may not realize it yet, but that is the fundamental

38
00:02:15.193 --> 00:02:19.913
承诺是什么的概念基础，在这里是一个价值的包装
conceptual underpinning for what a promise is, a wrapper around a value Here

39
00:02:19.913 --> 00:02:24.870
是作为承诺中的函数的包装器，它是一个更复杂的东西。
are the wrapper as a function in promises it's a much more sophisticated thing.

40
00:02:26.360 --> 00:02:28.449
实际上是相当强大的思考
Was actually quite powerful to think about

41
00:02:29.849 --> 00:02:34.909
当我们将电话从同步性质扩展到异步性质时。
when we extend phones from the synchronous nature into an asynchronous nature.

42
00:02:34.909 --> 00:02:37.759
这是一个同步的Thunk，这是最常见的定义
This is a synchronous thunk and that's the most common definition for

43
00:02:37.759 --> 00:02:40.129
他们要找到的是它是一个同步的东西。
them to find is that it's a synchronous thing.

44
00:02:40.129 --> 00:02:41.530
什么是异步thunk？
What is an asynchronous thunk?

45
00:02:42.930 --> 00:02:46.370
这里没有对错的定义。
Well, there's no right or wrong definition here.

46
00:02:46.370 --> 00:02:51.270
但是我们可以定义异步thunk的最自然的方式是它是
But the most natural way that we could define an asynchronous thunk is that it is

47
00:02:51.270 --> 00:02:55.651
一个不需要传递给它的任何参数的函数来完成它的工作，
a function that doesn't need any arguments passed to it to do its job,

48
00:02:55.651 --> 00:02:59.980
除了你需要传递一个回调函数，这样你就可以得到这个值了。
except you need to pass it a callback so that you can get the value out.

49
00:03:02.506 --> 00:03:05.199
&gt；&gt；Kyle Simpson：这就是我们所说的异步thunk。
&gt;&gt; Kyle Simpson: So that's what we're gonna call an asynchronous thunk.

50
00:03:05.199 --> 00:03:08.379
所以让我们将同步thunk扩展到异步thunk。
So let's extend our synchronous thunk to an asynchronous thunk.

51
00:03:08.379 --> 00:03:10.629
我有一个添加异步功能。
I have an add async function.

52
00:03:12.699 --> 00:03:14.990
它在设定的超时时间内伪造一些异步性。
It fakes some asynchronicity with a set time out.

53
00:03:16.670 --> 00:03:18.920
接受您在第1行传递的回调。
Takes the callback that you've passed in on line 1.

54
00:03:18.920 --> 00:03:21.210
在第3行，它用加法调用它。
On line 3, it calls it with the addition.

55
00:03:21.210 --> 00:03:28.379
所以我们在第7行用addAsync做thunk，然后我们硬编码(10，15，cb)。
So we make our thunk on line 7 with addAsync, and we hard code (10, 15, cb).

56
00:03:28.379 --> 00:03:29.740
在第11行，
And on line 11,

57
00:03:29.740 --> 00:03:34.870
我们有这个值，我们可以在函数中传递这个值。
we have that value that thunk value that we can pass around our function.

58
00:03:34.870 --> 00:03:37.210
每次我们调用thunk并传递回调时，
And every time we call thunk and pass in a callback,

59
00:03:37.210 --> 00:03:38.468
我们知道我们会得到我们的价值。
we know we're going to get our value out.

60
00:03:40.479 --> 00:03:43.789
但这就是这个模式令人难以置信的强大之处。
But here's what's incredibly powerful about this pattern.

61
00:03:43.789 --> 00:03:50.120
从外面的世界我们不知道也不必关心这个价值
From the outside world we do not know nor do we have to care whether that value

62
00:03:50.120 --> 00:03:53.460
是立即可用还是需要一段时间才能得到那个价值。
is available immediately or whether it's gonna take a while to get us that value.

63
00:03:53.460 --> 00:03:58.430
对于我们来说，我们传递一个回调有什么不同
What difference is a make to us we pass on a callback

64
00:03:58.430 --> 00:04:01.389
我们知道当您为我们准备好一个值时，您将调用回调。
we know you'll call the callback when you have a value ready for us.

65
00:04:02.509 --> 00:04:05.560
所以当我们第一次调用func并传入回调时，
So the first time we call func and we pass in a callback,

66
00:04:05.560 --> 00:04:09.139
它可能需要做一些重要的工作来计算您的问题的答案。
it might have to do some significant work to calculate the answer to your question.

67
00:04:09.139 --> 00:04:13.530
它可能会进行一些Ajax调用，并进行一些其他类型的疯狂计算，然后
It might make some ajax call, and do some other kind of crazy calculations, and

68
00:04:13.530 --> 00:04:14.780
可能需要一段时间。
it might take a while.

69
00:04:14.780 --> 00:04:20.180
然后它可能会决定记住这个问题的答案，所以
And then it may decide to memorize the answer to that question, so

70
00:04:20.180 --> 00:04:22.839
下一次调用它时，它只会立即返回值。
the next time you call it, it just gives you the value back right away.

71
00:04:24.319 --> 00:04:29.100
但是从外面的世界来看，它对我们来说是如何运作的呢？
But from the outside world does it matter to us whatsoever how that works.

72
00:04:29.100 --> 00:04:34.430
这里发生的是通过将这个函数包装在状态和
What's happening here is that by wrapping this function around the state and

73
00:04:34.430 --> 00:04:39.432
允许它在本质上是异步的，我们基本上已经规范化了
allowing it to be asynchronous in nature we have essentially normalized

74
00:04:39.432 --> 00:04:44.769
方程中的时间，我们已经将方程中的时间考虑在内。
time out of the equation we have factored time out of the equation.

75
00:04:44.769 --> 00:04:49.350
我们已经为已经成为时间无关的值制作了一个包装器。
We have produced a wrapper around the value that has become time independent.

76
00:04:50.769 --> 00:04:52.800
值现在是否存在或是否存在都无关紧要
It doesn't matter if the value is there now or

77
00:04:52.800 --> 00:04:56.250
如果它稍后会出现，我们仍然以完全相同的方式使用它。
if it's gonna come later we still use it in the exactly the same way.

78
00:04:59.439 --> 00:05:02.029
如果你没有听到我今天说的任何其他话，请听这个。
Hear this if you don't hear anything else that I've said today.

79
00:05:02.029 --> 00:05:06.439
时间是程序中最复杂的状态因素。
Time is the most complex Factor of state in your program.

80
00:05:07.779 --> 00:05:11.199
管理时间是程序中最复杂的状态。
Managing time is the most complex state in your program.

81
00:05:11.199 --> 00:05:14.639
这就是为什么这是巨大的，能够提出一个非常简单的，
That's why this is huge to be able to come up with a very simple,

82
00:05:14.639 --> 00:05:18.230
没有涉及到库，这是直接的核心JavaScript。
there's no libraries involved, this is straight up core JavaScript.

83
00:05:18.230 --> 00:05:20.029
只是从不同的角度看待和
Just a different way of looking at and

84
00:05:20.029 --> 00:05:23.600
使用我们20年来一直可用的机制。
using the mechanisms that have been available to us for all 20 years.

85
00:05:25.180 --> 00:05:28.480
我们采取了这个概念，这从根本上说是困难的
We've taken this notion, this fundamentally difficult

86
00:05:28.480 --> 00:05:33.930
关于所谓的时间的原因，我们已经消除了它作为一个混淆的因素。
thing to reason about called time and we've eliminated it as a confusing factor.

87
00:05:33.930 --> 00:05:34.939
作为一个复杂的因素。
As a complicating factor.

88
00:05:34.939 --> 00:05:36.000
我有这种感觉，
I have this thunk,

89
00:05:36.000 --> 00:05:39.711
它代表一个值，每当我想要这个值的时候我都会传递它，
it represents a value, I pass it around whenever I want the value,

90
00:05:39.711 --> 00:05:43.639
我给它回一个电话，我把值拿出来，然后这就是我要做的所有事情。
I give it a call back and I get the value out then that's all I have to do.

91
00:05:47.060 --> 00:05:49.494
&gt；&gt；Kyle Simpson：我可以从你们的表情看出你们没有意识到
&gt;&gt; Kyle Simpson: I can tell from your faces that you're not realizing how

92
00:05:49.494 --> 00:05:51.550
开创性的想法是。
groundbreaking that notion is.

93
00:05:51.550 --> 00:05:55.569
好的，但这是我最重要的一个
Okay but that is one of the most important I

94
00:05:55.569 --> 00:06:00.079
不敢相信，当我意识到这意味着什么时，我不能相信有多远。
couldn't believe when I recognized what that meant I could not believe how far.

95
00:06:00.079 --> 00:06:02.399
我在没有意识到这一点的情况下进入了JavaScript。
I had gotten in JavaScript without that realisation.

96
00:06:03.819 --> 00:06:04.759
它改变了我的一切。
It changed everything for me.

97
00:06:06.269 --> 00:06:10.129
事实上，它帮助我理解了承诺。
And in fact it's what helped me understand promises.

98
00:06:10.129 --> 00:06:12.620
我没有完全理解
I didn't fully understand the conceptual basis for

99
00:06:12.620 --> 00:06:14.839
承诺直到我明白桑克在做什么。
promises until I understood what thunks were doing.

100
00:06:16.639 --> 00:06:21.430
因为我们会发现承诺是对一个值的时间独立包装。
Because we'll find out that a promise is a time independent wrapper around a value.

101
00:06:21.430 --> 00:06:22.639
只是有一个更花哨的API。
Just has a fancier API.

102
00:06:24.430 --> 00:06:28.521
所以，正如我前面所说的，我喜欢说Thunks是没有花哨API的承诺。
So as I said earlier, I like to say that thunks are promises without the fancy API.

103
00:06:30.504 --> 00:06:31.766
凯尔·辛普森：好吗？
&gt;&gt; Kyle Simpson: Okay?

104
00:06:31.766 --> 00:06:35.319
现在有一些转折，
Now There are some twists,

105
00:06:35.319 --> 00:06:38.029
在这种情况下，我们可以抛出一些皱纹。
there are some wrinkles that we can throw into the situation.

106
00:06:39.800 --> 00:06:44.329
如果我想做一个Thunk，比如给自己一个通用的实用程序
If I wanted to make a Thunk like give myself a generalized utility for

107
00:06:44.329 --> 00:06:44.920
做汤克。
making Thunks.

108
00:06:46.040 --> 00:06:50.139
我可以做所有那些陈旧的糟糕的阵列的东西。
I can do all that old crappy array stuff and.

109
00:06:50.139 --> 00:06:52.459
将参数推入并调用Apply。
Pushing the arguments on and calling apply.

110
00:06:52.459 --> 00:06:53.180
我可以那样做。
I could do it that way.

111
00:06:53.180 --> 00:06:58.670
我可以这样使用它，就像我们在第七行看到的那样。
And I could use it this way as we see on line seven.

112
00:06:58.670 --> 00:07:01.389
所以现在我不是手动做一个，但是我可以做任何我想做的事情
So now I'm not manually making one but I can make any thunk that I

113
00:07:01.389 --> 00:07:04.860
通过将回调设置为第一个参数来实现，并且
want by presetting the callback as the first argument, and

114
00:07:04.860 --> 00:07:08.379
我传递的任何其他东西，都会传递给它
anything else that I pass, it's going to get passed along to it always And

115
00:07:08.379 --> 00:07:09.639
这就是我能产生我的想法的方法。
that's how I could produce my thunk.

116
00:07:09.639 --> 00:07:12.410
所以我可以让自己成为制造这些的公用事业，
So I could make myself a utility for making these,

117
00:07:12.410 --> 00:07:16.819
从根本上讲，它与承诺构造函数没有太大的不同。
which would be not fundamentally terribly different from a promise constructor.

118
00:07:18.060 --> 00:07:20.129
makeThunk有点像Promise构造函数。
makeThunk would be kinda like a promise constructor.

119
00:07:20.129 --> 00:07:21.689
这是一个用于thunks的构造函数。
It's a constructor for thunks.

120
00:07:23.740 --> 00:07:26.050
是啊。&gt；&gt；演讲者2：你能不能过一下，所以
Yes. &gt;&gt; Speaker 2: Could you go through the, so

121
00:07:26.050 --> 00:07:30.680
当我们讨论回调问题时
when we talked about the Problems of callback

122
00:07:32.409 --> 00:07:36.379
这种倒置控制不能太早，不能太晚，也不能太多次。
this inversion of control not to early, not too late, not too many times.

123
00:07:36.379 --> 00:07:37.620
&gt；&gt；Kyle Simpson：是的。
&gt;&gt; Kyle Simpson: Yup.

124
00:07:37.620 --> 00:07:44.970
&gt；&gt；演讲者2：在这一点上只是绊倒了，承诺是怎样的。
&gt;&gt; Speaker 2: In just to stumble bit on that with how the promise is.

125
00:07:44.970 --> 00:07:48.009
&gt；&gt；Kyle Simpson：我们不会我们实际上不会有任何解决方案
&gt;&gt; Kyle Simpson: We're not gonna we're actually not gonna have any solution to

126
00:07:48.009 --> 00:07:49.870
控制的反转。
inversion of control of that.

127
00:07:49.870 --> 00:07:50.810
&gt；&gt；扬声器2：好的。
&gt;&gt; Speaker 2: Yeah OK.

128
00:07:50.810 --> 00:07:53.110
&gt；&gt；Kyle Simpson：承诺将解决控制反转问题。
&gt;&gt; Kyle Simpson: Promises are going to solve the inversion of control.

129
00:07:53.110 --> 00:07:54.360
我们还没到那一步。
We're not quite there.

130
00:07:54.360 --> 00:07:56.290
&gt；&gt；扬声器2：是的，好的。这让我更喜欢是的。
&gt;&gt; Speaker 2: Yeah, okay. That makes me more Yeah.

131
00:07:56.290 --> 00:07:58.110
&gt；&gt；Kyle Simpson：我们还没有解决转换控制问题。
&gt;&gt; Kyle Simpson: We haven't solved conversion control yet.

132
00:07:58.110 --> 00:08:00.560
我们把概念放在
We're laying the conceptual under pinning for

133
00:08:00.560 --> 00:08:02.430
承诺，这就是为什么我们要考虑这一点。
promises and that's why we're looking at that.

134
00:08:02.430 --> 00:08:03.980
&gt；&gt；演讲者2：是的，我只是想引起
&gt;&gt; Speaker 2: Yeah, I just wanted to cause

135
00:08:04.990 --> 00:08:09.399
这种认识发生在我们将要去的更早的地方。
that realization happened earlier we're going to.

136
00:08:09.399 --> 00:08:14.259
现在正在更好地理解什么承诺，只是不确定
Now getting at better understanding what promises and just wasn't sure

137
00:08:15.329 --> 00:08:21.425
你知道解决我们的问题的幻想有多大，或者说它有多少。
how much the fancy the is you know solving our problems or how much is it.

138
00:08:21.425 --> 00:08:22.411
&gt；&gt；Kyle Simpson：是的，明白了。
&gt;&gt; Kyle Simpson: Yeah, got it.

139
00:08:22.411 --> 00:08:26.040
这些霹雳真的不是解决控制反转的问题
The thunks really aren't addressing inversion of control

140
00:08:26.040 --> 00:08:29.069
承诺的本质是如何设计来解决这个问题的。
The nature of how promises are designed are designed to solve that.

141
00:08:29.069 --> 00:08:30.189
所以我们会顺利到达的。
So we'll get there okay.

142
00:08:33.120 --> 00:08:35.279
你关于再次浏览幻灯片39的问题。
Your question about going over Slide 39 again.

143
00:08:39.460 --> 00:08:40.720
这是一个同步的Thunk
This is a synchronous thunk

144
00:08:41.929 --> 00:08:45.950
如您所见，我有一个add函数，它接收一个X和一个Y。
as you can see I have an add function that receives an X and a Y.

145
00:08:45.950 --> 00:08:51.450
我做了另一个函数thunk，它根本不需要任何参数。
And I make another function called thunk Which doesn't need any arguments at all.

146
00:08:51.450 --> 00:08:54.340
thunk可以简单地调用，因为它是硬编码的
Thunk can simply be called because it is hard coded to

147
00:08:54.340 --> 00:08:56.440
知道在第六行调用add函数。
know to call the add function on line six.

148
00:08:56.440 --> 00:09:02.009
而且很难编码知道传入的值是10和15，也是在第6行上。
And it's hard coded to know to pass in the values 10 and 15, also on line 6.

149
00:09:02.009 --> 00:09:04.590
所以无论在哪里，我们都会做一些类似于我们所做的事情
So everywhere we do something like we do on

150
00:09:04.590 --> 00:09:06.779
第九行我们会得到完全相同的值。
line nine we're gonna get the exact same value.

151
00:09:06.779 --> 00:09:11.279
这是一个同步的Thunk幻灯片40。
That's a synchronous thunk Slide 40.

152
00:09:11.279 --> 00:09:13.740
异步版本。
The asynchronous version.

153
00:09:13.740 --> 00:09:20.360
完全相同的概念，除了当我们需要传入一个回调给thunk时。
Exactly the same concept except when we need to pass in a call back to our thunk.

154
00:09:20.360 --> 00:09:24.190
所以第11行，我不能只调用thunk并获得返回值。
So line 11, I can't just call thunk and get the value as a return value.

155
00:09:24.190 --> 00:09:25.860
我得打电话给桑克
I have to call thunk and

156
00:09:25.860 --> 00:09:28.969
给它一个回叫，它会像我在网上做的那样接收那个值。
give it a call back which will receive that value as I do on line.

157
00:09:36.450 --> 00:09:38.629
你会有机会练习的，我保证。
You're going to get a chance to practice with thunks, I promise.

158
00:09:41.590 --> 00:09:44.149
好吧。所以这里有一个重写
All right. So here's a rewriting of that

159
00:09:44.149 --> 00:09:48.580
傻乎乎的跑步例子，用霹雳计算生命的意义。
silly running example, calculating the meaning of life By using thunks.

160
00:09:48.580 --> 00:09:51.110
现在你知道一些和我以前做的略有不同的事情。
Now you know something slightly different from what I did before.

161
00:09:51.110 --> 00:09:54.090
在第一行和第二行，我预先创建了一些thunks。
On lines one and two, I precreates some thunks.

162
00:09:55.480 --> 00:10:01.259
我说get ten需要在调用时调用get data，值为10。
I say that get ten needs to when it's invoked call get data with the value ten.

163
00:10:02.320 --> 00:10:05.259
所以第一行实际上还没有发出Ajax请求。
So line one is not actually made that Ajax request yet.

164
00:10:05.259 --> 00:10:07.100
这一点很重要，你要明白。
That's important understand.

165
00:10:07.100 --> 00:10:10.519
我们所做的就是创建一个包装器，当调用该包装器时，它将执行Ajax请求。
All we've done is create a wrapper that when called will do that Ajax request.

166
00:10:12.529 --> 00:10:13.340
好吧。
Okay.

167
00:10:13.340 --> 00:10:17.269
所以我预先设置了Get 10在Get 30 thunks中
So I pre set up the get 10 in the get 30 thunks and

168
00:10:17.269 --> 00:10:20.610
我可以开始使用它们，所以在第4行我使用它。
I can start using them so on line 4 I use it.

169
00:10:20.610 --> 00:10:22.850
呼叫GET 10给它回电话。
Call get 10 give it a call back.

170
00:10:22.850 --> 00:10:27.070
我知道从现在开始的一千毫秒后，第一个将具有值10，然后我
I know a thousand milliseconds from now number one will have the value 10 then I

171
00:10:27.070 --> 00:10:32.899
在第6行上使用get 30 thunk，这就是第9行，我创建了另一个thunk。
use the get 30 thunk on line 6 and there is the line 9 I create another thunk.

172
00:10:32.899 --> 00:10:36.179
为什么我不能创造那个Thunk，第九行的那个，
Why couldn't I create that thunk, the one from line nine,

173
00:10:36.179 --> 00:10:38.250
为什么我不能在第三行预先创建它？
why couldn't I pre create that up on line three?

174
00:10:43.090 --> 00:10:47.059
因为它暂时依赖于前两个雷声的反应。
Because it's temporarily dependent upon the responses from the first two thunks.

175
00:10:47.059 --> 00:10:49.159
大家都看到了吗。
Does everybody see that.

176
00:10:51.000 --> 00:10:53.629
所以这就是为什么我不得不推迟那个特别的想法的创建。
So that's why I had to defer the creation of that particular thunk.

177
00:10:57.929 --> 00:11:03.330
底线13我可以简单地呼叫得到答案，这是我的想法，我会的
Bottom line 13 I can simply call get answer which is my thunk and I will

178
00:11:03.330 --> 00:11:07.419
现在得到答案的检索恰好是围绕该值的容器，并且
retrieve that now get an answer happens to be a container around that value and

179
00:11:07.419 --> 00:11:11.809
我可以通过我的程序和任何需要意义的人得到答案
I can pass get an answer all over my program and anybody that needs the meaning

180
00:11:11.809 --> 00:11:14.909
生活中的人可以简单的给它打个电话，然后得到答案。
of life can simply call that give it a callback and get the answer back.

181
00:11:16.320 --> 00:11:20.519
这里有一些非常重要的事情需要注意，正如我所说的，重要的是要注意
There's something really important to note here as I said it's important to note that

182
00:11:20.519 --> 00:11:25.860
这种特殊的表达方式，就是我想我会称之为懒惰的表达方式。
this particular expression of a thunk, is what I guess I would call a lazy thunk.

183
00:11:25.860 --> 00:11:28.799
如果我真的想出一些术语
If I was really trying to come up with some terminology for

184
00:11:28.799 --> 00:11:33.070
这是一个懒惰的想法，因为它不做工作。
it's a lazy thunk in that it doesn't do the work.

185
00:11:33.070 --> 00:11:34.450
直到你第一次调用它。
Until you call it the first time.

186
00:11:37.149 --> 00:11:42.350
你可以做一个主动的thunk，它完成了工作并保持着它的反应。
You could make an active thunk which did the work and just held on to its response.

187
00:11:43.679 --> 00:11:46.320
所以它立刻做了工作，并保持了回应。
So it did the work right away and held on to the response.

188
00:11:46.320 --> 00:11:49.080
这是另一种做一次重击的方式。
That is another way of doing a thunk.

189
00:11:49.080 --> 00:11:52.090
我给你一个关于你即将进行的练习的巨大提示。
And I'm giving you a gigantic hint for your upcoming exercise.

190
00:11:52.090 --> 00:11:54.889
&GT；&GT；演讲者3：这就像推迟一个承诺或什么。
&gt;&gt; Speaker 3: It's like deferring a promise or something.

191
00:11:54.889 --> 00:11:56.220
&gt；&gt；Kyle Simpson：这很像是一个承诺。
&gt;&gt; Kyle Simpson: It's a lot like a promise.

192
00:11:56.220 --> 00:11:58.840
这就是我想说的这些是概念上的基础。
That's what I'm saying these are the conceptual underpinnings.

193
00:11:58.840 --> 00:12:01.659
所以我们现在对thunks的表达是非常懒惰的。
So our current expression of thunks is very lazy.

194
00:12:01.659 --> 00:12:04.700
有可能用不同的方式来做这些事情。
It is possible to do thunks in a different way.

195
00:12:04.700 --> 00:12:05.610
他们是活跃的。
Which they are active.

196
00:12:05.610 --> 00:12:09.590
这意味着当他们第一次被调用时，他们第一次被设置时，他们会这样做
That means the first time they're called they do the first time they're set up they

197
00:12:09.590 --> 00:12:13.279
做这项工作，他们不会给你答案，直到你通过回调。
do the work and they don't give you the answer until you pass in the callback.
