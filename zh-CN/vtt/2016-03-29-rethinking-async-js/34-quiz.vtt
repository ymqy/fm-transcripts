WEBVTT

1
00:00:00.000 --> 00:00:04.072
[音乐]
[MUSIC]

2
00:00:04.072 --> 00:00:06.161
&gt；&gt；Kyle：我认为这是一个很好的机会
&gt;&gt; Kyle: I thought it was a good opportunity for

3
00:00:06.161 --> 00:00:10.289
让我们快速回顾一下我们在这个研讨会上所经历的一切。
us to take a quick look back at what we've gone through over this workshop.

4
00:00:12.230 --> 00:00:16.239
正如我所说的，这代表了一种基线，我真的想要所有的JavaScript
As I said, this represents kind of the baseline that I really want all JavaScript

5
00:00:16.239 --> 00:00:18.089
开发人员感觉他们可以到达。
developers to feel like they can get to.

6
00:00:19.120 --> 00:00:22.250
所以这是一种全场压力，让我们发布消息，
So it's kind of a full court press saying, let's get the word out,

7
00:00:22.250 --> 00:00:24.899
让我们让人们练习并试图达到这一点。
let's get people practicing and trying to get to that point.

8
00:00:24.899 --> 00:00:27.219
所以，让我们确保我们明白我们的来龙去脉，
So, let's make sure we understand where we've come,

9
00:00:27.219 --> 00:00:29.960
因为从研讨会开始到目前为止，我们已经走过了很长一段路。
cuz we've come quite a way since the beginning of the workshop, so far.

10
00:00:31.207 --> 00:00:37.262
所以，首先，用你自己的话，你会如何向我描述什么是回调地狱？
So first, in your own words, how would you describe to me what callback hell is?

11
00:00:37.262 --> 00:00:38.564
到底是什么？
What is it really?

12
00:00:44.331 --> 00:00:46.475
&gt；&gt；扬声器2：控制反转。
&gt;&gt; Speaker 2: Inversion of control.

13
00:00:46.475 --> 00:00:48.880
&gt；&gt；Kyle：控制反转是关键方面之一。
&gt;&gt; Kyle: Inversion of control is one of the key aspects.

14
00:00:48.880 --> 00:00:49.450
还有什么？
What else?

15
00:00:51.909 --> 00:00:53.468
&gt；&gt；扬声器2：顺序错误。
&gt;&gt; Speaker 2: Out of sequence.

16
00:00:53.468 --> 00:00:56.270
&gt；&gt；Kyle：非局部、非顺序推理。
&gt;&gt; Kyle: The non-local, non-sequential reasoning.

17
00:00:56.270 --> 00:00:57.469
那么什么是回拨地狱呢？
So what is callback hell?

18
00:00:57.469 --> 00:01:02.409
回调地狱不仅仅是回调模式的不足，
Callback hell isn't deficiency of the callbacks pattern alone,

19
00:01:02.409 --> 00:01:05.129
当你除了回电什么都没有的时候。
when you don't have anything else but the callback.

20
00:01:05.129 --> 00:01:08.700
它无法解决这些主要缺陷。
It's not capable of addressing these major deficiencies.

21
00:01:08.700 --> 00:01:10.140
其中一个是控制的版本。
One of them being a version of control.

22
00:01:10.140 --> 00:01:14.530
其中之一是非局部非顺序推理。
One of them being non-local non-sequential reasoning.

23
00:01:14.530 --> 00:01:15.430
所以回拨
So callbacks,

24
00:01:15.430 --> 00:01:19.340
虽然它们是原子的基本构件，但我们所依据的一切
while they're the atomic fundamental building block upon which everything we

25
00:01:19.340 --> 00:01:23.329
正在做，即使是那些花哨的生成器的东西仍然有回叫发生。
doing, even that fancy generator stuff is still got callbacks happening.

26
00:01:24.500 --> 00:01:26.769
但如果顶部没有这些额外的图案，
But without those additional patterns on top,

27
00:01:26.769 --> 00:01:29.650
回调不能解决这些问题。
the callbacks are not capable of addressing these issues.

28
00:01:29.650 --> 00:01:33.759
因此，我们需要将更高阶的模式放在它们之上，以解决这些问题。
So we need to put higher order patterns on top of them to address those problems.

29
00:01:33.759 --> 00:01:36.280
这就是回拨地狱的真面目吗？
That's what callback hell really is?

30
00:01:36.280 --> 00:01:40.319
你知道，这与嵌套和压痕真的没有什么关系。
You know is that really has very little to do with the nesting an indentation.

31
00:01:40.319 --> 00:01:43.689
这是巨大的副作用，好吧。
That's a side symptom of vast, okay.

32
00:01:45.799 --> 00:01:47.390
什么是承诺？
What is a Promise?

33
00:01:47.390 --> 00:01:48.590
我给了两个或
I gave two or

34
00:01:48.590 --> 00:01:52.590
三种不同的隐喻方式或思考许诺的方式。
three different metaphoric ways or ways of thinking about what a Promise is.

35
00:01:52.590 --> 00:01:54.450
从概念上讲，什么是承诺？
A conceptually speaking, what is a Promise?

36
00:01:57.509 --> 00:01:59.680
&gt；&gt；Speaker 2：它是一个值的占位符。
&gt;&gt; Speaker 2: It's a placeholder for a value.

37
00:01:59.680 --> 00:02:00.670
&gt；&gt；Kyle：值的占位符。
&gt;&gt; Kyle: Placeholder for a value.

38
00:02:00.670 --> 00:02:03.549
这是未来的芝士汉堡对吧？
It's a future cheeseburger, right?

39
00:02:03.549 --> 00:02:06.489
这是一个未来的价值，它是我将在某个时候得到的芝士汉堡。
It's a future value, it's the cheeseburger I'm going to get at some point.

40
00:02:08.250 --> 00:02:08.870
还有什么？
What else is it?

41
00:02:11.800 --> 00:02:12.300
&gt；&gt；扬声器2：信任。
&gt;&gt; Speaker 2: Trust.

42
00:02:13.409 --> 00:02:14.719
&gt；&gt；Kyle：这就是它的作用和
&gt;&gt; Kyle: That's what it does and

43
00:02:14.719 --> 00:02:17.610
稍后我们将更多地讨论它的作用。
we'll get to talking more about what it does in just a minute.

44
00:02:17.610 --> 00:02:19.370
但打个比方
But metaphorically,

45
00:02:19.370 --> 00:02:22.129
我至少给了你另外两种方式来思考它的作用。
I gave you at least two other ways of thinking about what it does.

46
00:02:26.469 --> 00:02:28.400
记住，我说过这是一个完成事件。
Remember, I talked about it being a completion event.

47
00:02:28.400 --> 00:02:31.180
就像我们回来的事件监听器
It's like an event listener that we get back and

48
00:02:31.180 --> 00:02:34.780
我们可以注册完成事件，在本例中称为Then事件。
we can register for a completion event, in this case is called the then event.

49
00:02:35.979 --> 00:02:39.780
这是另一种方式，第三种思考方式是，
It's another way and another third way of thinking about it is that,

50
00:02:39.780 --> 00:02:40.860
这是一个回拨管理器。
it's a callback manager.

51
00:02:41.920 --> 00:02:44.729
我们将我们的回调传递给承诺系统
We pass our callback to the promise system and

52
00:02:44.729 --> 00:02:48.620
正如你刚才所说，它以一种给予我们信任的方式来管理它们。
it manages them in a way that gives us that trust as you just said.

53
00:02:48.620 --> 00:02:50.500
我们想要回你的信任。
We want that trust back.

54
00:02:50.500 --> 00:02:53.610
通过将它们传递到承诺系统中，
And by passing them into the promise system,

55
00:02:53.610 --> 00:02:56.469
我们知道承诺系统就是在这种信任的基础上设计的。
we know that promise system are designed with that trust.

56
00:02:56.469 --> 00:03:00.449
因此它解决了一个版本的控件，因为不是将我们的回调传递给
So it solves a version of control because instead of passing our callbacks into

57
00:03:00.449 --> 00:03:04.740
我们不信任的第三方，相反，他们给了我们一个承诺
a third party that we don't trust, instead they give us a promise back

58
00:03:04.740 --> 00:03:09.800
一个值得信赖的系统，我们让那个系统经理打电话给我们。
a trustable system and we let that system manager called us.

59
00:03:09.800 --> 00:03:12.159
所以反转控制反转或
So an invert that inversion of control or

60
00:03:12.159 --> 00:03:15.199
而只是简单地限制我们一直拥有的控制。
rather just simply restraints the control that we always have.

61
00:03:17.900 --> 00:03:19.009
如何暂停发电机？
How do you pause a generator?

62
00:03:20.469 --> 00:03:21.240
&gt；&gt；扬声器3：让步。
&gt;&gt; Speaker 3: Yield.

63
00:03:21.240 --> 00:03:22.756
&gt；&gt；Kyle：产量，以及如何恢复发电机？
&gt;&gt; Kyle: Yield, and how do you resume a generator?

64
00:03:22.756 --> 00:03:25.102
&gt；&gt；扬声器3：Iterate.Next。
&gt;&gt; Speaker 3: Iterate.next.

65
00:03:25.102 --> 00:03:30.026
&gt；&gt；Kyle：.下一步，组合生成器和
&gt;&gt; Kyle: .next, and what was that one magical trick for combining generators and

66
00:03:30.026 --> 00:03:31.461
一起承诺？
promises together?

67
00:03:35.468 --> 00:03:36.550
&gt；&gt；演讲者3：做出承诺。
&gt;&gt; Speaker 3: Yield a promise.

68
00:03:36.550 --> 00:03:38.680
&GT；&GT；Kyle：准确地说，产生了一个承诺。
&gt;&gt; Kyle: Yielding a promise, exactly.

69
00:03:38.680 --> 00:03:41.724
给出一个承诺，然后这个承诺恢复发电机。
Yield a promise and then the promise resumes the generator.

70
00:03:41.724 --> 00:03:44.402
这是准确的，好吗？
It's accurate, okay?

71
00:03:44.402 --> 00:03:45.236
好极了。
Great.

72
00:03:45.236 --> 00:03:47.329
你想了解更多关于发电机的信息。
You want to read more about generators.

73
00:03:47.329 --> 00:03:50.389
除了书之外，我还有一个四部分的博客文章系列来阅读它。
I have a four part blog post series to read about it in addition to the books.

74
00:03:50.389 --> 00:03:51.789
所以有很多东西可以去
So there's plenty to go and

75
00:03:51.789 --> 00:03:54.680
在那里阅读，我挑战你鼓励你去挖掘这一点。
read in there and I challenge you encourage you to go dig in on this.
