WEBVTT

1
00:00:00.000 --> 00:00:04.035
[音乐]
[MUSIC]

2
00:00:04.035 --> 00:00:08.720
&GT；&GT；Kyle：让我们谈谈我们可能如何选择解决这个问题。
&gt;&gt; Kyle: Let's talk through how we might choose to solve this problem.

3
00:00:10.269 --> 00:00:14.449
当这个回调被调用时，我们将得到一个响应，并且
When this callback is called we're going to get a response back and

4
00:00:14.449 --> 00:00:17.839
由于关闭，我们将知道它来自三个文件中的哪一个。
because of closure we gonna know which one of the three files it came from.

5
00:00:17.839 --> 00:00:18.539
大家都看到了吗？
Does everybody see that?

6
00:00:19.870 --> 00:00:25.750
所以我可以做的是我可以有一个句柄响应函数
So what I could do is I could have a handle response function that I

7
00:00:25.750 --> 00:00:32.200
调用它得到的文件名和文本，好吗？
call out to with the file name and the text that it got, okay?

8
00:00:32.200 --> 00:00:36.734
现在我可以直接在这里做代码，但我要把它推到
Now I could do that code directly inside of here but I'm pushing it out to

9
00:00:36.734 --> 00:00:40.982
另一个函数，这样我的嵌套就少了一点。
another function so that I have a little bit less nesting going on.

10
00:00:40.982 --> 00:00:46.249
现在，处理响应接收
All right now, handle response receives

11
00:00:46.249 --> 00:00:50.310
的文件名和一些内容
a file name and some contents for

12
00:00:50.310 --> 00:00:55.131
文件，每个人都在跟踪吗？
the file, everyone following that?

13
00:00:55.131 --> 00:00:58.965
我需要的是封闭范围内的东西，
And what I'm going to need is something in closing scope,

14
00:00:58.965 --> 00:01:02.722
在这种情况下，可能是全局范围，一些变量，
in this case probably the global scope, some variable,

15
00:01:02.722 --> 00:01:07.728
一些要跟踪返回的响应的对象，
some object that is going to keep track of the responses that have come back,

16
00:01:07.728 --> 00:01:11.983
以防我在我能够呈现它之前得到回复。
in case I get a response back earlier than I'm able to render it.

17
00:01:11.983 --> 00:01:13.670
每个人都同意我的观点吗？
Everybody with me on that?

18
00:01:15.370 --> 00:01:18.239
我可能会得到一个回复，并且能够立即呈现它，但我要
I might get a response back and be able to immediately render it but I'm going to

19
00:01:18.239 --> 00:01:22.730
我需要一些东西来保持我得到的回复，但我还不能呈现。
need something to hold on to the responses that I get back that I can't yet render.

20
00:01:22.730 --> 00:01:27.890
我需要能够，基本上，遍历这个集合
And I'm going to need to be able to, basically, iterate over that collection of

21
00:01:27.890 --> 00:01:32.930
该打印出来的时候做出回应，打印出我得到的任何东西。
responses when it is time to print things out and print out whatever I've gotten.

22
00:01:32.930 --> 00:01:38.379
所以我要做的就是有一个叫做响应的变量，
So the way I'm going to do that is simply have a variable called responses,

23
00:01:38.379 --> 00:01:39.460
我们会把它变成一个物体。
and we'll make it an object.

24
00:01:40.599 --> 00:01:43.670
无论如何，这都不是解决这些练习的唯一方法。
This is not, by any means, the only way to solve these exercises.

25
00:01:43.670 --> 00:01:45.560
就像我们在这些工作坊中做的几乎所有事情一样，
As with almost everything we do in these workshops,

26
00:01:45.560 --> 00:01:47.560
有很多不同的方法来切割它。
there's many different ways to slice it.

27
00:01:47.560 --> 00:01:50.909
我只是在给你做心理建模的一种方法，好吗？
I'm only walking you through one way of modeling this mentally, okay?

28
00:01:52.509 --> 00:01:57.605
因此处理响应可以
So handle response could

29
00:01:57.605 --> 00:02:03.930
如果响应文件名。
say if responses of filename.

30
00:02:03.930 --> 00:02:07.319
这是一个属性为文件名的对象，
That is an object whose property is the filename,

31
00:02:07.319 --> 00:02:10.509
使用的URL(如果尚未设置)。
the URL that was used if that's not already set.

32
00:02:13.500 --> 00:02:16.229
所以也许我会这样做，而不是将响应作为文件名，
So maybe I would do that instead of response as a filename,

33
00:02:16.229 --> 00:02:21.389
也许我会说，如果不是文件名的回应。
maybe I'll say if not filename in responses.

34
00:02:21.389 --> 00:02:26.300
所以我确定了一个事实，这个函数是用响应调用的
So I make sure for a fact that this function is getting called with a response

35
00:02:26.300 --> 00:02:28.069
我还没见过。
that I haven't yet seen.

36
00:02:28.069 --> 00:02:31.539
这可能会处理函数在某种程度上被双重调用或
This takes care of maybe the function somehow getting double called or

37
00:02:31.539 --> 00:02:33.020
随便吧？
whatever, right?

38
00:02:33.020 --> 00:02:35.810
所以我要说这是一个我还没有看到的回应。
So I'm gonna say this is a response that I have not yet seen yet.

39
00:02:35.810 --> 00:02:43.009
因此，第一步肯定是将其添加到我的对象中。
So the first step is definitely to add it to my object.

40
00:02:43.009 --> 00:02:44.405
我正在把它存储到一个对象中，
I'm storing it into an object,

41
00:02:44.405 --> 00:02:50.692
好吗？&gt；&gt；Kyle：文件名是属性
okay? &gt;&gt; Kyle: File name being the property

42
00:02:50.692 --> 00:02:55.520
对象上的位置，内容是我放入对象中的值。
location on the object, contents being the value that I'm putting into the object.

43
00:02:57.479 --> 00:03:01.352
因此，如果这是file1，如果这是第一次调用，并且
So if that was file1, if this was the first time this is being called, and

44
00:03:01.352 --> 00:03:04.669
这是file1，我可以在响应中迭代这些内容。
that was file1, I could iterate over the stuff in responses.

45
00:03:04.669 --> 00:03:09.050
如果有东西要渲染，我可以立即渲染。
And if there was stuff to render, I could immediately render it.

46
00:03:09.050 --> 00:03:11.479
把它从响应的对象中取回来。
Take it right back out of the response's object.

47
00:03:12.949 --> 00:03:18.319
或者，在这种情况下，我可能只是将文件二放入，而文件一还不在那里
Or I might have just put file two in and file one isn't yet there in which case

48
00:03:18.319 --> 00:03:23.120
我还不能继续，我只需要把它留在那里，然后再试一次，好吗？
I can't go on yet I just need to leave it there and try it again later, okay?

49
00:03:23.120 --> 00:03:26.689
请记住，此句柄责任被调用了三次。
Keep in mind this handle responsibility called all three times.

50
00:03:26.689 --> 00:03:29.889
所以我们每次收到AJAX响应时都会调用
So we called every single time we get an AJAX response back is going to get called

51
00:03:29.889 --> 00:03:32.810
所以这三个都有机会被调用。
so it's going to have an opportunity to be called for all three.

52
00:03:32.810 --> 00:03:36.689
但是我们不确定哪种顺序有六种不同的方式可以发生或者
But we're not sure which order there's six different ways that this can happen or

53
00:03:36.689 --> 00:03:38.319
三种不同的方式什么的。
three different ways or whatever.

54
00:03:38.319 --> 00:03:40.150
有很多不同的方式可以发生这种情况
There's a lot of different ways this can happen and

55
00:03:40.150 --> 00:03:41.870
我们不确定哪个订单会发生，所以
we're not sure which order is going to happen and so

56
00:03:41.870 --> 00:03:45.810
我们正在尝试协调或正常化该并发性。
we are trying to coordinate that or normalizing that concurrency.

57
00:03:45.810 --> 00:03:50.270
所以在我确定我的回应是
So after I've made sure that my response has been

58
00:03:50.270 --> 00:03:54.490
存储到我的回复中的内容已经存储在回复中。
stored into my responses in the contents have been stored in the responses.

59
00:03:54.490 --> 00:03:59.543
现在我可以简单地从一个数组开始。
Now I could simply start out with an array.

60
00:03:59.543 --> 00:04:03.900
现在，这是一种简单的作弊方式。
Now, this is a simple cheat way of doing it.

61
00:04:03.900 --> 00:04:08.090
当然，还有其他方法我可以把它们保存在
There are, of course other ways where I could've kept those in

62
00:04:09.979 --> 00:04:13.099
在某种程度上是外部位置，但是
a external location in some way but

63
00:04:13.099 --> 00:04:16.899
我只是想找出解决这个问题的最简单的方法。
I'm just trying to come up with the simplest way of solving this problem.

64
00:04:16.899 --> 00:04:20.939
如果我知道这些URL是什么，并且我知道它们应该按照什么顺序发生。
If I know what those URLs are, and I know what order they're supposed to happen in.

65
00:04:20.939 --> 00:04:24.850
我可以按照请求的顺序生成这个数组，
I could have produced this array by the order that they were requested in,

66
00:04:24.850 --> 00:04:29.000
如果那是我想要的，再一次，只是采取简单的方式。
if that's what I wanted, again, just taking the simple way.

67
00:04:29.000 --> 00:04:33.379
假设我知道file1、file2、file3需要按此顺序发生。
Let's assume that I know that file1, file2, file3 need to happen in this order.

68
00:04:33.379 --> 00:04:36.730
所以现在我可以说，for(var i=0)。
So now I can just say, for( var i=0).

69
00:04:36.730 --> 00:04:41.788
我小于arr.length，也许不是arr，也许我会将其称为
I less than arr.length and maybe instead of arr maybe I'll call this

70
00:04:41.788 --> 00:04:49.288
文件名。&gt；&gt；Kyle：I+SO
filenames. &gt;&gt; Kyle: I++ so

71
00:04:49.288 --> 00:04:52.220
我将查看文件1。
I'm going to look at file1.

72
00:04:52.220 --> 00:04:57.430
它将是i的文件名，第一次迭代将是文件一。
It's going to be filenames of i which the first iteration is going to be file one.

73
00:04:57.430 --> 00:05:02.593
我要说如果这是平分的话
I'm gonna say if that is even

74
00:05:02.593 --> 00:05:06.910
Responses对象。
the responses object.

75
00:05:06.910 --> 00:05:14.709
所以文件名i在响应中或者不在响应中。
So filenames of i is in responses or it's not in responses.

76
00:05:15.939 --> 00:05:18.610
如果没有回复，有人能猜出我要做什么吗？
Can anybody guess what I'm going to do if it's not in responses?

77
00:05:20.449 --> 00:05:21.310
打破for循环。
Break the for loop.

78
00:05:22.990 --> 00:05:24.410
实际上在这种情况下
Actually in this case for

79
00:05:24.410 --> 00:05:29.149
为了方便起见，我要回去了，完全空了。
convenience sake I'm just gonna return just completely empty out.

80
00:05:29.149 --> 00:05:33.340
所以无论我在哪种情况下，我是否正在查看file1，并且它不在那里。
So whichever case I'm in whether I'm looking at file1 and it's not in there.

81
00:05:33.340 --> 00:05:36.129
或者我正在查看文件2但它不在其中，或者我正在查看文件3和
Or I'm looking at file2 and it's not in there, or I'm looking at file 3 and

82
00:05:36.129 --> 00:05:36.949
不在里面。
it's not in there.

83
00:05:36.949 --> 00:05:41.129
在这个特殊的过程中，我没有任何东西可以通过我的回答来呈现。
I've got nothing left to render on this particular pass through my responses.

84
00:05:41.129 --> 00:05:45.509
因为我知道如果它不在那里我就不会呈现其他任何东西。
Cuz I know if it's not there I'm not gonna render anything else.

85
00:05:45.509 --> 00:05:47.870
所以我可以利用提前回来的机会。
So I can take advantage of an early return here.

86
00:05:47.870 --> 00:05:49.028
如果它在里面的话。
If it is in there.

87
00:05:50.590 --> 00:05:58.720
我可以说，如果它还是。&gt；&gt；Kyle：例如，
I can say, if it's still. &gt;&gt; Kyle: For example,

88
00:05:58.720 --> 00:06:04.338
我可以说它是否仍然是一个真值，或者我可以说它是否仍然是一个字符串。
I can say if it's still a truthy value, or I could say if it's still a string.

89
00:06:04.338 --> 00:06:08.928
一会儿你就会明白我为什么这么说了。
And you'll see why I'm saying that in a moment.

90
00:06:10.319 --> 00:06:14.709
如果它仍然是一个字符串，那么我知道是时候继续渲染了。
If it's still a string then I know it's time to go ahead and render this.

91
00:06:15.889 --> 00:06:23.952
所以我会说文件名，我会说i的文件名的响应。
So I'll say filenames I'll say responses of filenames of i.

92
00:06:23.952 --> 00:06:29.252
这一个将需要与i的文件名的响应相同的事情。
This one is going to need to be the same things as responses of filenames of i.

93
00:06:30.990 --> 00:06:32.819
现在，现在我已经渲染了。
Now, now that I've rendered it.

94
00:06:32.819 --> 00:06:37.759
我想将条目留在那里，但我想将其标记为已渲染。
I want to leave the entry in there but I want to mark it as having been rendered.

95
00:06:37.759 --> 00:06:41.665
因此，将其标记为已渲染的简单方法是将其从
So a simple way of marking it as having been rendered is to change it from being

96
00:06:41.665 --> 00:06:42.223
文字。
the text.

97
00:06:51.014 --> 00:06:53.350
&gt；&gt；Kyle：到类似于false的东西。
&gt;&gt; Kyle: To something like false.

98
00:06:53.350 --> 00:06:54.990
所以条目仍然在对象中，
So the entry is still in the object,

99
00:06:54.990 --> 00:06:57.649
这意味着我不会试着把它读进去。
which means I'm not going to try to readd it in there.

100
00:06:57.649 --> 00:07:01.040
但我不会尝试重新渲染它
But I'm not going to try to re-render it over and

101
00:07:01.040 --> 00:07:04.529
一遍又一遍，因为它将不能通过这个打印错误检查。
over again, because it's going to fail this typo check.

102
00:07:04.529 --> 00:07:07.420
有上百万种不同的方式可以选择来实现这个逻辑。
There's a million different ways that you could choose to implement this logic.

103
00:07:07.420 --> 00:07:09.990
我只是向你展示一种可能的表达方式。
I'm just showing you one possible way of saying.

104
00:07:09.990 --> 00:07:12.548
我正在重复这个列表，我正在检查是否需要渲染
I'm living over this list and I'm checking to see whether I need to render

105
00:07:12.548 --> 00:07:16.747
一些东西。&gt；&gt；Kyle：最后，
something. &gt;&gt; Kyle: At the end of this,

106
00:07:16.747 --> 00:07:21.815
如果我已经渲染了所有三个，&gt；&gt；Kyle：那么我可以
if I have rendered all three of them, &gt;&gt; Kyle: Then I can

107
00:07:21.815 --> 00:07:28.023
最后输出我的完整信息。&gt；&gt；Kyle：这
finally output my complete message. &gt;&gt; Kyle: This

108
00:07:28.023 --> 00:07:31.699
这三次函数都会被调用。
function is gonna get called for each of those three times.

109
00:07:31.699 --> 00:07:35.629
令人高兴的是，它被file1调用一次，并且
The happy path is that it gets called once with file1 and

110
00:07:35.629 --> 00:07:38.149
然后使用file2一次，然后使用file3和
then once with file2 and then once with file3 and

111
00:07:38.149 --> 00:07:43.629
它永远不需要提前归还，而且每个人都需要存储东西。
it never needs to get to this early return thing and every needs to even store thing.

112
00:07:43.629 --> 00:07:47.677
但它可能先用file3调用一次，然后先用file2调用一次，然后
But it might get called once with file3 first, and then once with file2 first, and

113
00:07:47.677 --> 00:07:51.667
最后是第三次使用file1，它还没有呈现任何东西。
then finally the third time with file1, where it hasn't rendered anything yet.

114
00:07:51.667 --> 00:07:55.697
第三次，当它循环通过时，它会说我确实有
And that third time, when it goes to loop through, it's going to say I do have

115
00:07:55.697 --> 00:07:59.639
一个file1渲染，我有一个file2渲染，我有一个file3。
a file1 render, I do have a file2 render, I do have a file3.

116
00:07:59.639 --> 00:08:03.737
所以无论从哪种方式来看，我都会尽快渲染，但是
So which every way these come in, I'm always going to render asap but

117
00:08:03.737 --> 00:08:06.153
仅以正确的发音顺序。
only in the correct articulated order.

118
00:08:06.153 --> 00:08:08.406
是啊。&gt；&gt；扬声器2：SO
Yes. &gt;&gt; Speaker 2: So

119
00:08:08.406 --> 00:08:13.127
我也许理解那些出了问题的护理人员，但是
I maybe I understood the params that went wrong but

120
00:08:13.127 --> 00:08:19.201
我记得你说过你想通过改变回调或者
I thought you said you wanted to do it by altering the callbacks or

121
00:08:19.201 --> 00:08:22.920
你不是这么说的吗？&gt；&gt；kyle：你什么意思？
did you not say that? &gt;&gt; Kyle: What do you mean?

122
00:08:24.850 --> 00:08:27.045
&gt；&gt；演讲者2：所以我在想也许我们
&gt;&gt; Speaker 2: So I was thinking maybe we

123
00:08:27.045 --> 00:08:32.374
我们是否会对所有GET文件有不同的回调和
would we have different callbacks for all of the get files and

124
00:08:32.374 --> 00:08:36.673
然后不知何故我们会审计它们。&gt；&gt；Kyle：我们有
then somehow we would audit them. &gt;&gt; Kyle: We do have

125
00:08:36.673 --> 00:08:41.327
所有Get Giles的不同回调。&gt；&gt；扬声器2：好的，
different callbacks for all the get giles. &gt;&gt; Speaker 2: Okay,

126
00:08:41.327 --> 00:08:43.330
那很好&gt；&gt；Kyle：我不确定我明白什么
that's fine &gt;&gt; Kyle: I'm not sure I understand what

127
00:08:43.330 --> 00:08:45.129
你是说。&gt；&gt；扬声器2：i
you mean. &gt;&gt; Speaker 2: I

128
00:08:45.129 --> 00:08:49.840
没想到会有这种恐吓。&gt；&gt；Kyle：你用不同的方法解决了吗？
wasn't expecting this intimidation. &gt;&gt; Kyle: Did you solve it a different way?

129
00:08:49.840 --> 00:08:50.554
&gt；&gt；扬声器2：不，我不能。
&gt;&gt; Speaker 2: No I couldn't.

130
00:08:50.554 --> 00:08:51.145
凯尔：好的。
&gt;&gt; Kyle: Okay.

131
00:08:51.145 --> 00:08:51.905
&gt；&gt；发言人2：我在想
&gt;&gt; Speaker 2: I was thinking

132
00:08:51.905 --> 00:08:56.275
更多的是关于回调的开始和一些他们的承诺
more along the lines of Promises about the start of the callback and something they

133
00:08:56.275 --> 00:09:00.110
什么都想不出来。&gt；&gt；Kyle：好吧，你唯一能做到的
couldn't come up with anything. &gt;&gt; Kyle: Well the only way you're going to

134
00:09:00.110 --> 00:09:03.250
最终排序的回调是有顺序请求的。
end up ordering the callbacks is to have sequential requesting.

135
00:09:04.259 --> 00:09:07.739
其中，在file1完成之前，您甚至不会请求file2。
Where you don't even request file2 until after file1 is finished.

136
00:09:07.739 --> 00:09:12.481
这违反了问题设置的基本前提之一
Which violates one of the fundamental premises of the setup of the problem which

137
00:09:12.481 --> 00:09:13.980
就是按顺序给他们打电话。
is to call them in order.

138
00:09:15.259 --> 00:09:21.730
这就是为什么它在那里，因为它很容易，如果你只是想做连续请求。
That's why that's there because it's easy if you just wanna do serial requesting.

139
00:09:21.730 --> 00:09:25.919
但正是并行请求导致了这种并发协调
But it's the parallel requesting that causes this concurrency coordination

140
00:09:25.919 --> 00:09:29.220
变得更复杂好吗？
to be more complex, okay?

141
00:09:29.220 --> 00:09:33.234
这里真正提出的观点是，三个独立的回调必须
The point that's really being made here is that three independent callbacks have to

142
00:09:33.234 --> 00:09:36.011
共享一些闭包状态，即使它是一个全局变量。
share some closure state even if it's a global variable.

143
00:09:36.011 --> 00:09:40.259
他们将不得不共享一些关闭状态来协调自己。
They're gonna have to share some closure state to coordinate themselves.

144
00:09:40.259 --> 00:09:42.350
只是，没有别的办法了。
That's just, there's no other way around it.

145
00:09:43.509 --> 00:09:46.664
无论是全局状态还是有其他的包装器变量
Whether it's the global state or whether there's some other wrapper that variables

146
00:09:46.664 --> 00:09:48.128
不管你怎么切都会传给我。
passed to me no matter how you slice it.

147
00:09:48.128 --> 00:09:51.251
必须有一些共享的可变成本三个回调。
There gonna have to be some shared variable cost all three callbacks.

148
00:09:51.251 --> 00:09:54.534
他们必须潜在地在这个变量中存储一些东西
And they're gonna have to potentially store something in that variable

149
00:09:54.534 --> 00:09:56.779
直到了回来拿到它的时候。
until it's time to come back and get it.

150
00:09:56.779 --> 00:10:00.009
这就是我们说我们正在协调并发的意思，
That's what we mean by saying that we're coordinating concurrency,

151
00:10:00.009 --> 00:10:02.359
我们正在管理时间状态复杂性。
is that we're managing that time state complexity.

152
00:10:04.240 --> 00:10:08.639
我们可以看到有一个解决方案，但我不认为任何人会争辩
And we can see that there's a solution to it but I don't think anybody would argue

153
00:10:08.639 --> 00:10:12.360
这是一个很好的优雅的解决方案，对吗？
that this is a good graceful solution to it, right?

154
00:10:12.360 --> 00:10:13.830
很难看，对吧？
It's ugly, right?

155
00:10:13.830 --> 00:10:15.490
但它能完成任务。
But it gets the job done.

156
00:10:15.490 --> 00:10:19.086
我无法告诉你几百次我解决了类似的问题
And I can't tell you many hundreds of times I've solved similar problems in

157
00:10:19.086 --> 00:10:22.173
过去，我唯一可用的工具就是函数和
the past where the only tool I had available to me was functions and

158
00:10:22.173 --> 00:10:23.201
闭包变量。
closure variables.

159
00:10:23.201 --> 00:10:28.039
所以我们可以完成这项工作，甚至复杂的某些领域。
So we can get the job done, even complex certain areas.

160
00:10:28.039 --> 00:10:31.840
但这不是理想的模式，这就是为什么我要带你通过它。
But this isn't the ideal pattern and that's why I'm walking you through it.

161
00:10:31.840 --> 00:10:33.360
我给你看，首先，
I'm showing you, first,

162
00:10:33.360 --> 00:10:37.523
我们一直在处理的痛点激发了我们想要更好的原因
the pain points that we've been dealing with to motivate why we want better

163
00:10:37.523 --> 00:10:42.989
Patterns.q每个人都同意我的观点吗？&gt；&gt；Kyle：有吗？
patterns.q Is everybody with me on that? &gt;&gt; Kyle: Any

164
00:10:42.989 --> 00:10:44.759
关于练习一的其他问题？
other questions about exercise one?

165
00:10:47.769 --> 00:10:50.809
我们会一遍又一遍地回到完全相同的问题域
We're gonna get to come back to the exact same problem domain over and over and

166
00:10:50.809 --> 00:10:52.049
再来一次，好吗？
over again, okay?

167
00:10:52.049 --> 00:10:55.080
用更好的方法解决这个问题，你会变得越来越好
You'll get better and better at solving this problem with better

168
00:10:55.080 --> 00:10:59.716
模式。&gt；&gt；演讲者3：顺便说一下，
patterns. &gt;&gt; Speaker 3: By the way,

169
00:10:59.716 --> 00:11:05.346
我不确定你会不会返回，比如如果它返回file2，
I'm not convinced that you're going to return at, like if it comes back file2,

170
00:11:05.346 --> 00:11:10.078
file1，file3我想你可能会在file2之后完成，
file1, file3 I think you might get to complete even after file2,

171
00:11:10.078 --> 00:11:15.514
因为它不会掉下去吗？&gt；&gt；Kyle：对不起，
cuz won't it fall through? &gt;&gt; Kyle: I'm sorry,

172
00:11:15.514 --> 00:11:19.619
什么？&gt；&gt；扬声器3：你不会得到完整的
what? &gt;&gt; Speaker 3: Won't you get the complete

173
00:11:19.619 --> 00:11:24.909
如果它返回，我们假设是file2，file1，然后是file3。
if it comes back, let's say file2, file1, and then file3.

174
00:11:24.909 --> 00:11:30.279
但是在您获得File2之后，它应该打印出来并通过输出下降
But after you get file2, it should print out and fall down through the output

175
00:11:30.279 --> 00:11:35.080
完成，然后您就完成了，然后file3应该返回，然后再获取另一个
complete and then so you get complete then file3 should come back then get another

176
00:11:35.080 --> 00:11:40.673
完成。&GT；&GT；Kyle：你还在失去我，
complete. &gt;&gt; Kyle: You're still loosing me,

177
00:11:40.673 --> 00:11:42.668
也许在休息的时候我们可以谈谈-&GT；&GT；演讲者3：是的。
maybe over a break we can talk- &gt;&gt; Speaker 3: Yeah.

178
00:11:42.668 --> 00:11:43.866
&gt；&gt；Kyle：我的意思是你可以比较我
&gt;&gt; Kyle: I mean you can compare what I've

179
00:11:43.866 --> 00:11:45.653
在这里键入我在解决方案文件中键入的内容。
typed here to what I typed in the solution file.

180
00:11:45.653 --> 00:11:48.514
解决方案文件客观上是正确的，并且
The solution file is objectively correct, and

181
00:11:48.514 --> 00:11:53.376
也许我错过了什么，但我很确定这三次传球中的一次会
maybe I missed something, but I'm pretty sure one of those three passes is gonna

182
00:11:53.376 --> 00:11:56.470
在它击中输出完成之前击中那个东西。
hit that thing before it hits the output complete.

183
00:11:56.470 --> 00:11:58.539
您要么可以遍历整个for循环，要么
You're either gonna be able to go through the entire for loop or

184
00:11:58.539 --> 00:12:01.840
你会打到这个案子，这会阻止它完成。
you're gonna hit this case, which stops it from getting to complete.
