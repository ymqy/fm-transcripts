WEBVTT

1
00:00:00.000 --> 00:00:04.190
[音乐]
[MUSIC]

2
00:00:04.190 --> 00:00:06.589
&GT；&GT；Kyle：让我们评估一下我们在这个研讨会中都做了哪些工作。
&gt;&gt; Kyle: Let's take stock of where we've been through this workshop.

3
00:00:06.589 --> 00:00:08.769
我们已经讨论了太多了。
There's an awful lot that we've gone over.

4
00:00:08.769 --> 00:00:10.230
从开头的回调开始。
Started at the beginning with callbacks.

5
00:00:10.230 --> 00:00:14.337
查看了回调的缺点和缺点
Looked at the disadvantages, the shortcomings of callbacks and

6
00:00:14.337 --> 00:00:18.006
想想召回地狱，就是这个概念。
thinking about the call back hell, it's this notion of.

7
00:00:21.121 --> 00:00:24.910
&gt；&gt；Kyle：控制反转和非局部和非顺序推理。
&gt;&gt; Kyle: Inversion of control and non-local and non-sequential reasoning.

8
00:00:24.910 --> 00:00:27.469
我们看了thunks，他们真的没有任何解决方案。
We looked at thunks, and they didn't really have any solutions to that.

9
00:00:27.469 --> 00:00:31.059
但雷声至少给了我们一个概念上的支撑
But thunks at least gave us a conceptual underpinning for

10
00:00:31.059 --> 00:00:33.740
与时间无关的值。
values that are time independent.

11
00:00:33.740 --> 00:00:35.859
去除时间作为一种状态复杂性。
Removing time as a state complexity.

12
00:00:36.990 --> 00:00:39.179
砰的一声，我们开始讨论许诺。
Thunks led us into our discussion of promises.

13
00:00:39.179 --> 00:00:43.119
而且承诺不仅是这样，而且它们也是反转的解决方案
And promises are not only that, but they are also a solution to inversion of

14
00:00:43.119 --> 00:00:47.920
控件，因为它们的构建方式旨在创建可信任的系统和
control because the way they're built is designed to create a trustable system and

15
00:00:47.920 --> 00:00:51.542
围绕回调行为方式的可预测系统。
predictable system around the way callbacks are behaving.

16
00:00:51.542 --> 00:00:56.859
发电机，发电机是正在解决的回调地狱的另一部分，
Generators, generators are the other part of callback hell being solved,

17
00:00:56.859 --> 00:00:59.810
为我们提供了一个本地化的可暂停堆栈。
giving us a localized pauseable stack.

18
00:00:59.810 --> 00:01:05.129
使用本地堆栈执行和本地错误处理之类的东西。
With local stack execution and local error handling and that sort of thing.

19
00:01:05.129 --> 00:01:10.170
所以我们现在有分块顺序同步查找代码，
So we now have blocking sequential synchronous looking code,

20
00:01:10.170 --> 00:01:14.159
在幕后被分解掉，异步性正在发生。
that under the covers is factored away, that the asynchronicity is happening.

21
00:01:15.609 --> 00:01:16.280
太棒了。
Those are great.

22
00:01:16.280 --> 00:01:17.239
这是我们的基线。
That's our baseline.

23
00:01:17.239 --> 00:01:21.289
但是我们会说我们如何去适应基于事件的编程，
But then we say well how are we gonna to adapt an event based programming,

24
00:01:21.289 --> 00:01:24.879
因为我们在现代复杂API中处理了很多事件。
cuz there are lots of events that we deal with in modern complex APIs.

25
00:01:24.879 --> 00:01:27.620
嗯，事实证明，观察是一种很好的方法。
Well, turns out observables are a great way of doing it.

26
00:01:27.620 --> 00:01:30.170
我们看了一个轻量级版本的观察表，我称之为
We looked at a lightweight version of observables that I call

27
00:01:30.170 --> 00:01:31.090
反应序列。
reactive sequences.

28
00:01:32.120 --> 00:01:36.340
最后，CSP GO例程有点像，如果观察值刚刚结束
Finally the CSP go-routines is kind of like, if observables are just over

29
00:01:36.340 --> 00:01:40.599
地平线，CSP是紧随其后的东西。
the horizon, CSP is the thing that's coming on right behind it.

30
00:01:40.599 --> 00:01:42.900
所以几年后每个人都会想哇，
So a couple years from now everybody's going to be thinking wow,

31
00:01:42.900 --> 00:01:45.870
为什么我不早点上CSP的火车。
why didn't I get on the CSP train earlier.

32
00:01:45.870 --> 00:01:50.840
所以，我们已经走了很长一段路，我想用幻灯片表达的观点是，
So, we've come a long way, and the point that I wanna make with the slide is,

33
00:01:52.289 --> 00:01:57.400
此列表中没有一个项目可以替代列表中的所有其他项目。
there's no one item on this list that replaces all the other items on the list.

34
00:01:57.400 --> 00:01:58.450
没有银弹。
There's no silver bullet.

35
00:01:58.450 --> 00:01:59.319
没有一样东西。
There's no one thing.

36
00:01:59.319 --> 00:02:00.590
我不时听到这样的话。
I hear this from time to time.

37
00:02:00.590 --> 00:02:05.239
我听到反应式编程世界的人说，为什么我需要承诺，
I hear people in the reactive programming world say, why do I ever need a promise,

38
00:02:05.239 --> 00:02:07.079
因为我可以用一个可观测的模型来模拟一切。
cuz I can model everything with an observable.

39
00:02:08.409 --> 00:02:10.319
我听到CSP世界的人说，
And I hear people in the CSP world saying,

40
00:02:10.319 --> 00:02:13.189
为什么我需要一个可观察的，因为我可以用流建模一切。
why do I ever need an observable cuz I can model everything with the stream.

41
00:02:14.650 --> 00:02:19.300
我认为这是一种非常不成熟、天真的看待我们正在做的事情的方式。
I can see that to be a very immature, naive way of looking at what we're doing.

42
00:02:19.300 --> 00:02:20.040
所以这个研讨会的原因。
So the reason for this workshop.

43
00:02:20.040 --> 00:02:25.129
本研讨会存在的原因是向您展示所有这些不同的工具，以及
The reason this workshop exists is to show you all of these different tools, and

44
00:02:25.129 --> 00:02:28.800
让你带着更好的欣赏离开
to have you come away with a better appreciation for

45
00:02:28.800 --> 00:02:32.530
它们都符合我们正在建设的更大的计划。
where they all fit in in the bigger scheme of what we're building.

46
00:02:32.530 --> 00:02:35.759
从现在开始，这里没有一个工具会成为你的解决方案。
No one tool here is gonna be your solution from now on.

47
00:02:35.759 --> 00:02:39.829
但是所有这些工具的收集，是一个重大的飞跃，
But the collection of all these tools, is a significant jump forward,

48
00:02:39.829 --> 00:02:41.468
不只是一点点。
not just a little bit.

49
00:02:41.468 --> 00:02:43.520
但是订单的大小向前跳跃
But orders a magnitude jump forward for

50
00:02:43.520 --> 00:02:47.448
在程序中表达显示异步编码的能力。
your ability to expressively show asynchronous coding in your programs.

51
00:02:50.795 --> 00:02:54.223
&gt；&gt；Kyle：为了真正把这一点牢牢敲定，我建造了，所以
&gt;&gt; Kyle: So to really hammer that point home, I built, so

52
00:02:54.223 --> 00:02:57.150
我不知道为什么我点击了逃逸。
I don't know why I hit escape.

53
00:02:57.150 --> 00:02:59.590
几周前我做了一个东西并发布了它，
I built a thing a couple of weeks ago and released it,

54
00:02:59.590 --> 00:03:01.969
这叫三张名单的故事。
it's called A Tale of Three Lists.

55
00:03:01.969 --> 00:03:05.409
我会给你看这个演示，但让我告诉你这个东西存在的原因。
I'm gonna show you this demo, but let me tell you why this thing exists.

56
00:03:07.530 --> 00:03:10.900
有人听说过To Do MVC项目吗？
Anybody ever heard of the to do MVC Project?

57
00:03:10.900 --> 00:03:12.939
你们中的一些人可能正在点头，你们听说过。
Some of you are probably nodding your heads, you've heard of it.

58
00:03:12.939 --> 00:03:17.099
做MVC的意义是什么，每个人都有自己的特别之处
What was the point of to do MVC was, everybody that has their own special

59
00:03:17.099 --> 00:03:20.689
他们这样的框架是神奇的银弹。
framework that they're like this is the magical silver bullet.

60
00:03:20.689 --> 00:03:25.349
他们有机会使用自己的代码解决完全相同的问题。
They got an opportunity to solve the exact same problem using their code.

61
00:03:25.349 --> 00:03:28.960
现在你有，我甚至不知道有多少像30，40，100，000，
Well now you have, I don't even know how many like 30, 40, 100,000,

62
00:03:28.960 --> 00:03:31.610
谁知道那里提交了多少项目。
who knows how many projects that have been submitted there.

63
00:03:31.610 --> 00:03:34.420
每个人都有自己特殊的独角兽框架，
Where everybody who has their own special unicorn framework,

64
00:03:34.420 --> 00:03:38.394
要炫耀他们做[INAUDIBLE]的方式，好吗？
gets to show off the way they do it to do [INAUDIBLE] okay?

65
00:03:38.394 --> 00:03:40.949
但是异步编程呢？
But what about asynchronous programming?

66
00:03:40.949 --> 00:03:44.949
我决定开始并创建用于异步编程的to do MVC。
I decided to set out and create the to do MVC for asynchronous programming.

67
00:03:44.949 --> 00:03:48.120
这就是三张单子的故事。
And that's what a tale of three lists is.

68
00:03:48.120 --> 00:03:51.569
这是一个稍微复杂一点的东西，而不仅仅是一个fubar的东西。
It's a slightly more complex than just a fubar kinda thing.

69
00:03:51.569 --> 00:03:53.870
它更复杂，因为当我给你看演示时，
It's more complex cuz when I show you the demo,

70
00:03:53.870 --> 00:03:57.909
到处都是活动，停顿之类的。
there's events firing all over the place, and pauses and stuff like that.

71
00:03:57.909 --> 00:04:02.560
但后来我又七次实施了同样的演示，
But then I went and implemented the same demo seven different times,

72
00:04:02.560 --> 00:04:05.659
使用七种不同的异步模式。
using seven different asynchronous patterns.

73
00:04:06.879 --> 00:04:08.698
我们在这个工作坊里学过的东西，
The stuff that we've gone over in this workshop,

74
00:04:08.698 --> 00:04:12.830
我实现了相同的代码库，并排，七种不同的方式。
I implemented the same code base, side by side, seven different ways.

75
00:04:12.830 --> 00:04:15.960
我愿意接受其他可能有其他模式的人的贡献
And I'm open to contributions from others who may have other patterns that

76
00:04:17.029 --> 00:04:19.360
有相对的长处和短处。
have relative strengths and weaknesses.

77
00:04:19.360 --> 00:04:23.750
但关键是我们现在有七个并排的代码库做完全相同的事情
But the point is we now have seven side by side code bases doing exactly the same

78
00:04:23.750 --> 00:04:26.040
任务，但是不同的方法有不同的优势和
task, but different ways with different strengths and

79
00:04:26.040 --> 00:04:27.939
弱点，作为一种学习工具。
weaknesses, as a learning tool.

80
00:04:29.329 --> 00:04:30.790
这就是我想要的。
And that's what I wanna get across.

81
00:04:30.790 --> 00:04:34.120
如果你还没有听到我说的其他话，你可以通过
If you haven't heard anything else I've said, be able to go through and

82
00:04:34.120 --> 00:04:36.870
说我看到诺言是如何运作的，然后我来了
say I see how the promises one works, and then I come and

83
00:04:36.870 --> 00:04:40.644
看看可观测的那一个，我看到了更强大的地方。
look at the observables one, and I see places where that's much more powerful.

84
00:04:40.644 --> 00:04:44.029
但是会有一些地方的观察者有一些尴尬的地方。
But there'll be places where the observables have some awkwardness.

85
00:04:44.029 --> 00:04:46.480
所以我们可以去看CSP，然后说，
And so we can go and look at the CSP one and say,

86
00:04:46.480 --> 00:04:49.920
哇，CSP在这方面比可观测的更好。
wow the CSP one is better at that than the observables one.

87
00:04:51.370 --> 00:04:54.860
值得注意的是，找到最好的工具
And the take away is, find the best tools for

88
00:04:54.860 --> 00:04:57.730
您的应用程序的任何给定部分，并成熟地应用它们。
any given part of your application and apply them maturely.

89
00:04:59.259 --> 00:05:00.999
所以，让我向你展示演示非常快。
So, let me show you the demo real quick.

90
00:05:04.848 --> 00:05:06.410
&gt；&gt；Kyle：顺便说一下，这是回购。
&gt;&gt; Kyle: This is the repo by the way.

91
00:05:06.410 --> 00:05:11.689
所以我积极欢迎其他人提交和改进东西。
So I'm actively open to other people submitting and improving things.

92
00:05:11.689 --> 00:05:15.209
但这里是演示，这是使用回调的那个。
But here is the demo, and this is the one using callbacks.

93
00:05:15.209 --> 00:05:17.175
但他们的行为都完全一样，所以。
But they all behave exactly the same, so.

94
00:05:20.754 --> 00:05:21.685
&GT；&GT；Kyle：那么这是什么，
&gt;&gt; Kyle: So what this is,

95
00:05:21.685 --> 00:05:26.216
有一个制作人每隔50毫秒就产生一次消息，而且
is there is a producer that's producing messages every 50 milliseconds, and

96
00:05:26.216 --> 00:05:31.339
我有两个不同的侦听器，它们以不同的速度对流进行采样。
I have two different listeners that are sampling that stream at different speeds.

97
00:05:31.339 --> 00:05:35.480
所以在这里，我每隔900毫秒就采样一次，s或什么的
So over here I'm sampling at once every I think 900 millisecond,s or something and

98
00:05:35.480 --> 00:05:37.379
每600毫秒过来一次。
over here every 600 milliseconds.

99
00:05:37.379 --> 00:05:38.889
我不记得数字是什么了。
I don't remember what the numbers are.

100
00:05:38.889 --> 00:05:42.680
但我正在以不同的速度对它们进行采样，并将它们打印到这个列表中。
But I'm sampling them at different speeds and printing them into this list.

101
00:05:42.680 --> 00:05:47.269
除了以不同的速度对它们进行采样之外，我还在收听
In addition to them being sampled at different speeds, I'm also listening to

102
00:05:47.269 --> 00:05:51.990
单击这些，当您单击该项目时，它会将其添加到您的中心列表中。
clicks on these, and when you click on the item it adds it to your center list.

103
00:05:51.990 --> 00:05:57.220
所以所有这些流或在所有这些不同的时间发射，
So all of these streams or firing at all these different times,

104
00:05:57.220 --> 00:06:00.800
另外，如果有一个重复的，它会从我们的列表中被标记掉。
and in addition if there's a duplicate it gets marked off of our list.

105
00:06:00.800 --> 00:06:03.699
所以这只是随机产生所有这些不同的
So this is just randomly generating all these different

106
00:06:03.699 --> 00:06:05.750
正在添加到列表中的消息。
messages that are being added to the list.

107
00:06:05.750 --> 00:06:08.110
现在你好像天啊，我收到太多信息了。
Well now you're like well jeez, I'm getting too many messages.

108
00:06:08.110 --> 00:06:08.720
我需要暂停一下。
I need to pause.

109
00:06:08.720 --> 00:06:12.470
因此您可以暂停一个或两个列表。
So you can pause one or both of the lists.

110
00:06:13.720 --> 00:06:16.180
当您暂停两个列表时，
And when you pause both of the lists,

111
00:06:16.180 --> 00:06:20.500
现在，正在制作该消息的制作人停止了制作。
now the producer who is producing that message, he stops producing.

112
00:06:20.500 --> 00:06:22.949
因为如果他继续制作
Because if he kept producing and

113
00:06:22.949 --> 00:06:27.300
没有人在消费，好吧，现在你会浪费大量的电池电量。
nobody was consuming, well now you'd be wasting crazy amounts of battery power.

114
00:06:28.740 --> 00:06:32.829
因此，它等待消费者暂停和
So, it waits for both consumers to be paused and

115
00:06:32.829 --> 00:06:36.230
它停止生产，然后一旦其中一个开始再次消费，
it stops producing, and then once one of them starts consuming again,

116
00:06:36.230 --> 00:06:38.069
他开始每50毫秒发送一次。
he starts sending them out every 50 milliseconds.

117
00:06:39.259 --> 00:06:43.824
所以，我想说的是，如果我拿出一个CSP的例子。
So, the point that I'm making is if I were to pull up the CSP one for example.

118
00:06:46.439 --> 00:06:49.870
这里的行为完全相同，但使用CSP语义实现。
It's the exact same behavior here but implemented with CSP semantics.

119
00:06:49.870 --> 00:06:51.355
所以如果我们运行CSP One
So if we run the CSP one.

120
00:06:51.355 --> 00:06:56.949
如果我暂停这两个列表，应用程序中没有发生任何事情。
If I pause both of these lists, and there's nothing happening in the app.

121
00:06:58.090 --> 00:07:05.180
我们应该能够打开并做一个配置文件，一个JavaScript CPU配置文件。
We should be able to open up and do a profile, a JavaScript CPU profile.

122
00:07:05.180 --> 00:07:08.300
我们应该能够看到什么都没有发生，因为一切都发生了
And we should be able to see that nothing is happening because everything has

123
00:07:08.300 --> 00:07:09.370
暂停了。
been paused.

124
00:07:09.370 --> 00:07:12.259
在CSP中这非常简单，因为如果没有人消费
And in CSP that's super easy, cuz if nobody is consuming

125
00:07:12.259 --> 00:07:15.509
那么你尝试推出什么东西多少次都无关紧要，对吧？
then it doesn't matter how many times you try to push something out, right?

126
00:07:15.509 --> 00:07:19.329
所以我在CSP实现中免费获得了这个部分。
So that part I got for free with the CSP implementation.

127
00:07:19.329 --> 00:07:22.290
而对于回调，您必须做更多的工作。
Whereas with the callbacks you had to do a lot more work.

128
00:07:22.290 --> 00:07:25.790
但让我们快速收集CPU配置文件。
But let's collect the CPU profile real quick.

129
00:07:25.790 --> 00:07:29.329
在我说话的时候，我会让它运行几秒钟。
And I'll just let it run for a couple of seconds as I'm talking.

130
00:07:29.329 --> 00:07:31.230
在页面的背景中没有发生任何事情，所以
Nothing's happening in the background of the page, so

131
00:07:31.230 --> 00:07:33.350
我们应该期待基本上是一个空的侧写。
we should expect basically an empty profile.

132
00:07:34.459 --> 00:07:36.827
你会注意到空闲是唯一发生的事情。
And you'll notice that idle was the only thing that was happening.

133
00:07:40.055 --> 00:07:43.617
&gt；&gt；Kyle：[咳嗽]如果你看一下Delta，回调之间的差异
&gt;&gt; Kyle: [COUGH] If you look at the delta, the difference between the callback

134
00:07:43.617 --> 00:07:46.699
实施，以及CSP实施。
implementation, and the CSP implementation.

135
00:07:46.699 --> 00:07:49.860
要实现同样的能力，需要做更多的工作。
It takes a whole lot more work to make that same capability happen.

136
00:07:50.970 --> 00:07:55.569
因此，这是一个比大多数人展示异步性更复杂的演示。
So this is a more sophisticated demo than most people show off asynchronicity.

137
00:07:55.569 --> 00:07:59.220
我想这么做的原因是，很容易错过重要的
And the reason I wanted to do that is, it's really easy to miss the important

138
00:07:59.220 --> 00:08:01.620
当您有琐碎的，hello world示例时的详细信息。
details when you have trivial, hello world examples.

139
00:08:01.620 --> 00:08:03.959
所以我想要更复杂的东西，
So I wanted to have something that's more sophisticated,

140
00:08:03.959 --> 00:08:06.490
看起来更像现实世界。
more real world looking-ish.

141
00:08:06.490 --> 00:08:09.480
也许没有to-do应用程序那么复杂，但它
Maybe not quite as sophisticated as a To-Do app, but it's

142
00:08:09.480 --> 00:08:13.209
从事件和异步编程的角度更接近真实世界。
more real world-ish from the perspective of events and asynchronous programming.
