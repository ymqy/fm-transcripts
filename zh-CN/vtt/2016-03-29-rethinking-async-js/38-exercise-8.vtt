WEBVTT

1
00:00:00.000 --> 00:00:04.187
[音乐]
[MUSIC]

2
00:00:04.187 --> 00:00:07.038
&gt；&gt；Kyle Simpson：练习八旨在让你获得一点
&gt;&gt; Kyle Simpson: Exercise eight is designed to get you a little bit of

3
00:00:07.038 --> 00:00:10.221
练习玩弄流的概念，以及
practice playing around with the notion of streams, and

4
00:00:10.221 --> 00:00:12.230
做出自己的流响应。
making your own stream responses.

5
00:00:12.230 --> 00:00:14.058
让我快速引导你练习八。
Let me quickly orient you exercise eight.

6
00:00:24.153 --> 00:00:27.221
&gt；&gt；Kyle Simpson：你会注意到练习八从一个按钮开始
&gt;&gt; Kyle Simpson: You'll notice that exercise eight starts out with a button

7
00:00:27.221 --> 00:00:31.513
和一个列表，然后您将订阅我们在这里使用的jQuery单击事件
and a list, and you're gonna subscribe to the click event we're using jQuery here

8
00:00:31.513 --> 00:00:33.000
只是为了让事情变得简单。
just to make things simple.

9
00:00:33.000 --> 00:00:34.399
所以你不用担心DOM东西。
So you don't have to worry about DOMstuff.

10
00:00:34.399 --> 00:00:36.859
我们将订阅该按钮上的单击事件，并且
We're gonna subscribe to the click event on that button, and

11
00:00:36.859 --> 00:00:38.149
那我们就做点什么。
then we're gonna do something.

12
00:00:39.909 --> 00:00:42.770
这就是你必须弄清楚怎么做的事情。
And it's that something that you're gonna have to figure out how to do.

13
00:00:42.770 --> 00:00:46.399
但在我们的应用程序的其他地方，这是在第九行，
But elsewhere in our app, that is down on line nine,

14
00:00:46.399 --> 00:00:51.359
我们要听一个序列，它将是一个采样序列。
we're gonna listen to a sequence that's gonna be a sampled sequence.

15
00:00:51.359 --> 00:00:52.070
这就是我的意思。
So this is what I mean.

16
00:00:52.070 --> 00:00:54.270
采样是基于时间的东西。
Sampling is a time based thing.

17
00:00:54.270 --> 00:00:56.210
所以，假设你非常快地点击了按钮。
So let's say you click the button really, really fast.

18
00:00:57.250 --> 00:01:01.229
我只想每500毫秒听一个事件。
I only wanna hear a single event every 500 milliseconds.

19
00:01:01.229 --> 00:01:02.771
我想节流，
I wanna throttle that stream,

20
00:01:02.771 --> 00:01:06.656
所以我会有一个快速到来的数据流，向下发送一大堆数据。
so I'm gonna have a stream that's coming fast to send in a bunch of data down.

21
00:01:06.656 --> 00:01:10.109
但我想创建一个合成的流
But I wanna create a composed stream that

22
00:01:10.109 --> 00:01:13.060
每500毫秒只发送一个事件给我。
only sends me out an event ever 500 milliseconds.

23
00:01:13.060 --> 00:01:16.650
并忽略并丢弃所有那些来得太快的重复。
And ignores and drops all those repetitive ones that are coming too fast.

24
00:01:17.760 --> 00:01:20.879
我想订阅这个样本流，并且
And I wanna subscribe to that sampled stream, and

25
00:01:20.879 --> 00:01:24.629
将这些消息拖放到列表框中。
drop those messages into the list box.

26
00:01:24.629 --> 00:01:27.769
所以只是想直观地告诉你会期待什么。
So just to show you visually what you're gonna be expecting.

27
00:01:27.769 --> 00:01:31.319
让我弹出练习八的固定版本，就这样
Let me pop up the fixed version of exercise eight, just so

28
00:01:31.319 --> 00:01:33.710
你在视觉上明白你想要的是什么。
you visually understand what you're trying to go for here.

29
00:01:35.670 --> 00:01:39.950
因此，如果我点击“点击我”，它会向其中添加一条消息。
So if I click the click me, it adds a single message to it.

30
00:01:39.950 --> 00:01:41.430
再次单击它，它将添加另一条消息。
Click it again, it adds another message.

31
00:01:41.430 --> 00:01:43.039
但如果我开始快速点击它，
But if I start clicking it really fast,

32
00:01:43.039 --> 00:01:45.793
您会注意到，我每500毫秒只收到一个事件。
you'll notice that I'm only getting one event every 500 milliseconds.

33
00:01:47.140 --> 00:01:49.789
好了，就这样，这就是我们要做的。
Okay, that's it, that's all we're doing.

34
00:01:49.789 --> 00:01:53.060
你在玩弄如何让自己设定一个固定的时间间隔，
You play around with how you can set yourself up with a set interval,

35
00:01:53.060 --> 00:01:56.349
然后对一条小溪进行采样，看看你能想出什么。
and sample a stream and see what you come up with.

36
00:01:56.349 --> 00:02:00.750
所以我们会花大约，让我们把这15分钟给你玩一下。
So we'll take about, let's call this 15 minutes for you to play around with this.

37
00:02:00.750 --> 00:02:01.310
代码不多。
It's not a lot of code.

38
00:02:01.310 --> 00:02:04.409
如果您需要一些提示，请查看修复版本。
If you need some hints, look at the fixed version.

39
00:02:04.409 --> 00:02:08.493
但这应该让你的大脑开始思考事件作为我们的模式
But this should get your brain starting to think about events as our pattern

40
00:02:08.493 --> 00:02:09.230
用于异步。
for async.
