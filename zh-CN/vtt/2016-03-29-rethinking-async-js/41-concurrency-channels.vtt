WEBVTT

1
00:00:00.000 --> 00:00:03.692
[音乐]
[MUSIC]

2
00:00:03.692 --> 00:00:06.746
&gt；&gt；Kyle：我想教你的最后一个模式是。
&gt;&gt; Kyle: The last pattern that I want to teach you is.

3
00:00:06.746 --> 00:00:12.630
顺便说一下，在我教完最后一个模式之后，还有最后一个练习。
And by the way, after I teach of this last pattern there's a last exercise.

4
00:00:12.630 --> 00:00:15.710
所以我将在练习9中教你CSP。
So I'm gonna teach you CSP in exercise nine.

5
00:00:15.710 --> 00:00:20.929
练习10是我构建的一个更复杂的应用程序，
Exercise ten is a much more sophisticated application that I've built,

6
00:00:20.929 --> 00:00:22.589
它被称为三个名单的故事。
it's called a tale of three list.

7
00:00:22.589 --> 00:00:27.719
而你在那里的练习将会回到过去，重新审视反应性或
And your exercise there is going to be to go back and revisit either reactive or

8
00:00:27.719 --> 00:00:31.250
CSP在一个更复杂的应用程序的上下文中。
CSP in the context of a much more sophisticated application.

9
00:00:31.250 --> 00:00:35.149
所以，如果你想在这方面多加练习，那就是练习十。
So if you're looking for more practice on that stuff, it's coming with exercise ten.

10
00:00:35.149 --> 00:00:37.740
所以不要觉得这是我们最后一次谈论它。
So don't feel like that's the last that we're gonna talk about it.

11
00:00:37.740 --> 00:00:38.909
但我想换个角度
But I want to shift gears and

12
00:00:38.909 --> 00:00:43.899
重点介绍我们要介绍的最后一个主要模式，称为CSP。
focus on our last major pattern to introduce is called CSP.

13
00:00:43.899 --> 00:00:47.984
CSP是关于与通道的并发性建模的。
CSP is about modeling concurrency with channels.

14
00:00:47.984 --> 00:00:53.210
我们现在已经以三种、四种或五种不同的方式对并发进行了建模。
We've modeled concurrency now three, or four, or five different ways.

15
00:00:53.210 --> 00:00:55.340
这是建模并发性的另一种方法。
This is another way of modeling concurrency.

16
00:00:56.380 --> 00:00:58.859
还有渠道，如果你想知道什么是渠道，
And channels, if you wanna think about what is a channel,

17
00:00:58.859 --> 00:01:01.500
渠道有点像小溪，有点像管道。
a channel is kinda like a stream, it's kinda like a pipe.

18
00:01:01.500 --> 00:01:04.299
除了有一个重要的特征
Except there's one important characteristic and

19
00:01:04.299 --> 00:01:08.299
也就是说，管道没有缓冲区大小，并且
that is that the pipe has no buffer size and

20
00:01:08.299 --> 00:01:12.829
因此，它自动地内置了背压的概念。
therefore has automatically built into it this notion of back pressure.

21
00:01:12.829 --> 00:01:17.219
因此，如果您在听说或之前已经进行过流空间编程
So if you've done stream space programming before you've probably heard or

22
00:01:17.219 --> 00:01:19.409
阅读关于背压的概念。
read about this notion of back pressure.

23
00:01:19.409 --> 00:01:23.109
但为了说明这一点，我想让你们想象一下，我有两个
But to illustrate that I want you to imagine that I have two

24
00:01:23.109 --> 00:01:24.584
软管的不同末端。
different ends of a hose.

25
00:01:24.584 --> 00:01:27.292
这边走一条路，然后这边走一条路，然后
One way over here and then one way over here, and

26
00:01:27.292 --> 00:01:29.930
两端都有两个人。
there's two people on either end.

27
00:01:29.930 --> 00:01:33.849
他们彼此看不见，彼此之间没有任何交流。
And they don't see each other, they don't have any communication between each other.

28
00:01:33.849 --> 00:01:37.150
然后这边的人说我要开始
And then this guy on this side says I'm gonna start

29
00:01:38.599 --> 00:01:40.270
通过软管往下倒一些水。
pouring some water down through the hose.

30
00:01:40.270 --> 00:01:44.049
另一端的人让水出来，他正在喷水。
And the guy on the other end has the water coming out and he's spraying it.

31
00:01:44.049 --> 00:01:48.229
在某个时候，喷水的人说我不想要更多的水了。
At some point the guy who's spraying the water says I don't want any more water.

32
00:01:48.229 --> 00:01:50.490
但他和这个人没有联系，
But he doesn't have a communication with this guy,

33
00:01:50.490 --> 00:01:53.975
那他怎么跟这家伙说我不想再喝水了？
so how is he going to tell this guy I don't want any more water?

34
00:01:53.975 --> 00:01:59.400
他会把软管盖上以便在另一端
Well he's gonna cap off the hose so that on the other end

35
00:01:59.400 --> 00:02:03.650
没有更多的水可以进去，因为软管已经完全充满了。
no more water can go in because the hose is completely filled up.

36
00:02:03.650 --> 00:02:05.400
那是背压。
That's back pressure.

37
00:02:05.400 --> 00:02:08.270
这是一种相反的沟通方式
That's a reverse way of communicating up

38
00:02:08.270 --> 00:02:12.590
从消费者到生产者说停止生产，因为我不想再要了。
from consumer to producer to say stop producing cuz I don't want any more.

39
00:02:12.590 --> 00:02:14.969
大家都在跟踪我吗？
Is everybody following me?

40
00:02:14.969 --> 00:02:17.829
这就像是5万英尺高的东西。
This is like 50,000 foot view of stuff.

41
00:02:17.829 --> 00:02:20.729
嗯，在我们的应用程序中有一些地方我们
Well there are places in our applications where we

42
00:02:20.729 --> 00:02:23.579
生产者和消费者之间没有直接联系。
don't have a direct connection between producer and consumer.

43
00:02:23.579 --> 00:02:26.479
因为我们故意把它们分开。
Because we've intentionally kept them separate.

44
00:02:26.479 --> 00:02:31.439
但我们确实希望有一个信号，某种方式向制作人发出信号。
But we do want to have a signal, some way of signaling to the producer.

45
00:02:31.439 --> 00:02:35.800
我不想在这一端接受更多的数据，停止给我发东西。
I don't wanna take any more data on this end, stop sending me stuff.

46
00:02:35.800 --> 00:02:39.283
在RxJS的世界里，这就是他们对热和冷可观测的区别，
In the RxJS world that's their distinction between hot and cold observables,

47
00:02:39.283 --> 00:02:40.500
顺便说一下。
by the way.

48
00:02:40.500 --> 00:02:44.710
但是在冷热观测值之间的转换并不是那么干净和
But converting between hot and cold observables is not quite as clean and

49
00:02:44.710 --> 00:02:48.310
很容易，至少在我的实践中，就像理论上看起来的那样。
easy, at least in my practice, as it might seem in theory.

50
00:02:48.310 --> 00:02:54.370
因此，建模该信号的另一种方法是使用CSP系统中的信道。
So another way of modeling that signal is to use a channel in a CSP system.

51
00:02:54.370 --> 00:02:55.920
因为频道，就像我说的，
Because the channel, as I said,

52
00:02:55.920 --> 00:02:58.689
就像一个管道，一次只能接收一条消息。
is like a pipe that can only take one message at a time.

53
00:02:58.689 --> 00:03:00.889
它会自动产生背压，
And it automatically has back pressure,

54
00:03:00.889 --> 00:03:06.969
这意味着在我准备好之前你不能给我寄东西。
and what that means is you can't send me something until I'm ready to take it.

55
00:03:06.969 --> 00:03:09.870
在你准备好发送之前我不能拿东西。
And I can't take something until you're ready to send it.

56
00:03:09.870 --> 00:03:12.650
大家都在跟踪我吗？
Is everybody following me?

57
00:03:12.650 --> 00:03:13.990
那里没有排队。
There's no queue there.

58
00:03:13.990 --> 00:03:16.689
这是通过通道传输的一条消息。
It's one message that transfers through the channel.

59
00:03:17.900 --> 00:03:20.629
所以，这就是阻塞通道的概念。
So, it's this notion of blocking channels.

60
00:03:20.629 --> 00:03:24.650
现在是CSP，它代表通信顺序进程。
Now CSP, it stands for communicating sequential processes.

61
00:03:24.650 --> 00:03:28.722
这实际上是60年代发明的一种模式。
This actually was a pattern invented way back in the 60s.

62
00:03:28.722 --> 00:03:34.090
一个叫Hoare的家伙，他写了一本书叫做“交流顺序过程”。
Guy named Hoare, he wrote this book called Communicating Sequential Processes.

63
00:03:34.090 --> 00:03:36.829
这是一个管理并发的模型。
It was a model for managing concurrency.

64
00:03:36.829 --> 00:03:42.259
你们中的一些人可能听说过并发的参与者模型，
Some of you may have heard of the actor model of concurrency,

65
00:03:42.259 --> 00:03:45.969
两者之间存在着密切但不直接的关系。
and there's a close but not direct relationship between the two.

66
00:03:45.969 --> 00:03:50.750
与演员的主要区别，至少从我的研究来看，主要区别是
The major difference with actors, at least from my research, the major difference

67
00:03:50.750 --> 00:03:53.829
和演员对这件事，我马上要跟你谈的。
with actors versus this thing that I'm about to talk to you about.

68
00:03:53.829 --> 00:03:58.110
对于参与者，当您发送消息时，它是异步的。
With actors when you send a message it's asynchronous.

69
00:03:59.270 --> 00:04:00.560
你发送一条信息
You send a message and

70
00:04:00.560 --> 00:04:02.889
在另一个点上，另一端的某个人拿起了它。
at some other point, somebody on the other end picks it up.

71
00:04:03.889 --> 00:04:07.210
使用CSP，当您发送消息时，它是非常同步的。
With CSP when you send a message it's very synchronous.

72
00:04:08.210 --> 00:04:10.560
至少语义是，它是非常同步的。
At least the semantics are, it's very synchronous.

73
00:04:10.560 --> 00:04:13.319
当我想要传递信息的时候，必须有人在另一端
When I wanna send a message there has to be somebody on the other end that's

74
00:04:13.319 --> 00:04:14.018
准备好了。
ready to take it.

75
00:04:14.018 --> 00:04:18.180
因为我的软管一次只能接受一条信息，好吧。
Cuz my hose can only accept one message at a time, okay.

76
00:04:18.180 --> 00:04:20.870
如果你听说过演员的话，这就是主要的区别。
So that's the major difference if you've heard about actors.

77
00:04:20.870 --> 00:04:24.990
这是使用CSP进行同步消息传递的主要区别
It's the major difference between synchronous message passing with CSP

78
00:04:24.990 --> 00:04:27.925
与使用参与者的异步消息传递相反。
versus asynchronous message passing with actors.

79
00:04:27.925 --> 00:04:30.781
那么，通信顺序进程，这是关于什么的呢？
So communicating sequential processes, what is what does this all about?

80
00:04:30.781 --> 00:04:34.880
它是关于用大量的Tiny对您的应用程序进行建模的
It's about modeling your application with lots of tiny

81
00:04:34.880 --> 00:04:38.199
我们称之为流程的独立部分。
independent pieces that we call processes.

82
00:04:39.560 --> 00:04:45.930
如果JavaScript有完整的&gt；&gt；Kyle：就像线程一样，
And if JavaScript had full &gt;&gt; Kyle: like threading to it,

83
00:04:45.930 --> 00:04:50.079
如果我们可以像您在Node中做的那样，您可以在其中设置子流程和其他东西。
if we could do like you can in Node where you can set up child processes and stuff.

84
00:04:50.079 --> 00:04:54.459
如果我们有完整的线程，那么每个独立的部分都将在它的
If we had full threading then every independent piece would be on its

85
00:04:54.459 --> 00:04:58.649
自己的线程，它将完全独立于其他人运行。
own thread and it would be running entirely independently of everybody else.

86
00:04:59.720 --> 00:05:03.509
这很好，因为很多时候他们都在做自己的事情。
Well that's great because a lot of the times they are doing their own thing.

87
00:05:03.509 --> 00:05:07.050
但在某些情况下，这两个独立的部分
But there are cases where these two independent pieces

88
00:05:07.050 --> 00:05:09.360
需要相互协调。
need to coordinate with each other.

89
00:05:09.360 --> 00:05:12.420
因此，您的应用程序有两个不同的部分，它们通常只是
So you have two different parts of your application that are normally just kind of

90
00:05:12.420 --> 00:05:13.860
奔跑做自己的事情。
running doing their own thing.

91
00:05:13.860 --> 00:05:17.000
但有一种状态，他们会说我需要沟通
But there is a state in which they get to where they say I need to communicate

92
00:05:17.000 --> 00:05:17.589
和这个人在一起。
with this guy.

93
00:05:17.589 --> 00:05:20.860
这个家伙到达了一个他说我需要那个家伙的一些信息的州。
And this guy gets to a state where he says I need some information from that guy.

94
00:05:20.860 --> 00:05:22.439
所以不管他们独立做了什么，
So whatever they've been doing independently,

95
00:05:22.439 --> 00:05:27.430
他们到了说我们需要协调的地步。
they get to a point where they say we need to coordinate.

96
00:05:27.430 --> 00:05:31.101
并且以这种方式在任一方向上发送消息，或者可能在两个方向上都发送消息，一个消息，
And send a message in either direction, or perhaps both, one message this way,

97
00:05:31.101 --> 00:05:31.970
回一条信息。
one message back.

98
00:05:32.980 --> 00:05:36.329
然后一旦消息通过，它们就会变得畅通无阻
And then as soon as the messages have passed, they become unblocked and

99
00:05:36.329 --> 00:05:37.449
他们回到了独立的状态。
they go back to being independent.

100
00:05:38.985 --> 00:05:40.319
这就是我们所说的过程，
That's what we mean by processes,

101
00:05:40.319 --> 00:05:42.939
理论上这些东西可以独立运行。
is that these things could in theory run independently.

102
00:05:42.939 --> 00:05:45.009
现在我们知道在JavaScript中，
Now we know within JavaScript,

103
00:05:45.009 --> 00:05:48.180
事情并不是像那样独立运行的。
things aren't actually running independently like that.

104
00:05:48.180 --> 00:05:51.639
但我们今天看到了一些类似的行为。
But we have seen something today that does sort of act like that.

105
00:05:51.639 --> 00:05:58.245
有人知道我在说什么吗？&gt；&gt；Kyle：没有
Does anybody know what I'm talking about? &gt;&gt; Kyle: Didn't

106
00:05:58.245 --> 00:06:02.944
我们今天看到的一些东西，像它这样的行为可以阻止自己，而不是
we see something today that sort of acts like it can just block itself and not

107
00:06:02.944 --> 00:06:06.372
影响任何其他应用程序？&gt；&gt；扬声器2：[听不到]
affect any of the rest of the application? &gt;&gt; Speaker 2: [INAUDIBLE]

108
00:06:06.372 --> 00:06:07.569
&gt；&gt；Kyle：发电机，对吗？
&gt;&gt; Kyle: Generators, right?

109
00:06:07.569 --> 00:06:10.269
所以如果我有一堆不同的发电机都在运行
So what if I had a bunch of different generators that were all running in

110
00:06:10.269 --> 00:06:13.379
不同的地方，他们彼此独立运行。
different places, and they were running independently with each other.

111
00:06:13.379 --> 00:06:16.110
然后在某个时候两个发电机说嘿，
And then at some point two generators said hey,

112
00:06:16.110 --> 00:06:17.629
我们需要相互协调。
we need to coordinate with each other.

113
00:06:17.629 --> 00:06:22.060
所以让我们有一个沟通渠道，我们都可以互相阻挡，
So let's have a communication channel where we can both block each other,

114
00:06:22.060 --> 00:06:24.129
两个都阻塞等待另一个出现。
both block waiting for the other one to show up.

115
00:06:24.129 --> 00:06:27.220
一旦我们两个人都出现了，我们就可以发回一条信息
And as soon as both of us of showed up we can send a message back and

116
00:06:27.220 --> 00:06:28.579
然后我们就可以回到独立的状态了。
then we can go back to being independent.

117
00:06:30.199 --> 00:06:33.769
这确实是CSP的概念基础。
That's really the conceptual basis for CSP.

118
00:06:33.769 --> 00:06:37.769
虽然这听起来非常复杂，但事实的确如此。
And while that sounds fantastically more complicated, it is.

119
00:06:37.769 --> 00:06:39.810
它的威力也大得惊人。
It's also fantastically more powerful.

120
00:06:40.889 --> 00:06:45.509
因为我们可以从字面上对应用程序的每个独立部分进行建模
Because we can literally model every independent piece of our application

121
00:06:45.509 --> 00:06:47.009
完全独立于其他一切。
totally separate of everything else.

122
00:06:47.009 --> 00:06:51.389
我们需要考虑的就是当我需要一条信息的时候，我会等待这条信息。
And all we have to think about is when I need a message I wait for the message.

123
00:06:51.389 --> 00:06:54.879
或者当我需要发送消息时，我等待消息的发送。
Or when I need to send a message I wait for the sending of the message.

124
00:06:54.879 --> 00:06:57.300
除此之外，我们没有理解或者
And other than that we have no understanding or

125
00:06:57.300 --> 00:07:00.000
系统的任何其他部分的知识。
knowledge whatsoever of any of the other pieces of the system.

126
00:07:01.730 --> 00:07:06.220
所以从理论上讲，实现可以采用这些小过程中的每一个
So theoretically the implementation could take each one of those little processes

127
00:07:06.220 --> 00:07:08.029
然后把它们放在一个完全独立的线程上。
and put them on an entirely separate thread.

128
00:07:08.029 --> 00:07:10.389
并且应用程序仍然以完全相同的方式工作。
And the application would still work exactly the same way.

129
00:07:12.269 --> 00:07:16.649
这种并发模型，即并发的CSP模型，非常强大。
This model for concurrency, the CSP model for concurrency, is so powerful.

130
00:07:16.649 --> 00:07:20.220
它是GO编程语言中的并发模型。
It is the model for concurrency in the Go programming language.

131
00:07:20.220 --> 00:07:22.250
这也是Clojure和ClojureScript使用的。
It's also what Clojure and ClojureScript uses.

132
00:07:22.250 --> 00:07:25.420
所以我不是，不仅仅是我编造了一些东西并且说它很酷。
So I'm not, it's not just me making something up and saying it's cool.

133
00:07:25.420 --> 00:07:26.139
所以说真的
So really,

134
00:07:26.139 --> 00:07:30.449
真的，超级聪明的人说这是做并发的方式。
really, really, super smart people have said this is the way to do concurrency.

135
00:07:30.449 --> 00:07:33.860
在围棋中他们确实有线程，所以每一次围棋都被称为围棋例程，
And in Go they do have threads so every Go, it's called a Go routine,

136
00:07:33.860 --> 00:07:37.689
每一个围棋例程最终都会在它自己的完全独立的线程上旋转起来。
every Go routine does end up spinning up on its own entirely independent thread.

137
00:07:39.300 --> 00:07:42.340
这是围棋有如此高效率的神奇原因之一，所以
It's one of the magic reasons why Go has so much efficiency, so

138
00:07:42.340 --> 00:07:43.300
很好的表现。
much performance to it.

139
00:07:43.300 --> 00:07:47.100
因为我能够在我的应用程序中旋转所有这些不同的部分
Because I'm able to spin up all these different pieces of my application in

140
00:07:47.100 --> 00:07:47.860
分开的线程。
separate threads.

141
00:07:47.860 --> 00:07:51.090
但我有一种非常简单的方式在他们两人之间交流
But I have a really simple way of communicating between the two of them

142
00:07:51.090 --> 00:07:54.340
通过封锁渠道，好吧。
through blocking channels, okay.

143
00:07:54.340 --> 00:07:58.350
所以让我试着用代码来说明它看起来像什么。
So let me try to illustrate in code what that looks like.

144
00:07:58.350 --> 00:08:02.680
我制作了一个频道，就像我在1号线上做的那样。
I make a channel like I do up here on line 1.

145
00:08:02.680 --> 00:08:04.910
然后我有这个过程1，
And then I have this process1,

146
00:08:04.910 --> 00:08:09.610
这是一个生成器，因为我们用JavaScript来表达它。
which is a generator cuz we're expressing this in terms of JavaScript.

147
00:08:09.610 --> 00:08:11.829
他想通过频道发送一些东西，所以
He wants to send something down the channel, so

148
00:08:11.829 --> 00:08:16.290
他使用一种叫做PUT的方法，他说这就是我想要发送它的频道。
he uses a method called put, and he says this is the channel I want to send it on.

149
00:08:16.290 --> 00:08:18.060
所以我们通过通道是第一，而且
So we pass channel is the first, and

150
00:08:18.060 --> 00:08:21.339
然后我们传递下一个参数是我们想要发送的消息。
then we pass the next argument is a message that we want to send.

151
00:08:22.639 --> 00:08:25.339
您注意到我在PUT前面使用YOUTER，因为我想要
You notice I'm using yield in front of put, because I want for

152
00:08:25.339 --> 00:08:27.649
要暂停的process1生成器。
the process1 generator to pause.

153
00:08:28.720 --> 00:08:31.230
直到那个频道另一端的人说我准备好了
Until somebody on the other end of that channel says I'm ready to

154
00:08:31.230 --> 00:08:32.000
记下这个信息。
take that message.

155
00:08:33.120 --> 00:08:34.629
所以我说让步，
So I say yield put,

156
00:08:34.629 --> 00:08:39.919
本地阻塞进程1，直到其他人出现并解除阻塞。
which locally blocks the process1 until somebody else comes along and unblocks it.

157
00:08:41.389 --> 00:08:43.440
然后我在我的申请中有另一个过程，
Then I have this other process in my application,

158
00:08:43.440 --> 00:08:45.730
也许在应用程序的一个完全不同的部分。
maybe in an entirely different part of the app.

159
00:08:45.730 --> 00:08:50.299
他跑了，他说我需要一个来自频道的信息。
He's running along and he says I need a message from the ch channel.

160
00:08:50.299 --> 00:08:53.769
所以他说我会屈服，就像我在10号线上做的那样。
So he says I'm gonna yield on a take, like I'm doing on line 10.

161
00:08:55.490 --> 00:09:00.940
谁先到那里并不重要。&GT；&GT；Kyle：这就是它的酷之处。
It does not matter who gets there first. &gt;&gt; Kyle: That's what's cool about it.

162
00:09:00.940 --> 00:09:03.950
我不必担心是否有消息在等着我。
I don't have to worry about whether or not there's a message waiting for me or not.

163
00:09:03.950 --> 00:09:06.950
我只是说我想留个口信，我会等到一个准备好。
I just say I wanna take a message, and I'll wait until one's ready.

164
00:09:06.950 --> 00:09:08.720
也许现在就准备好了，太好了。
Maybe it's ready right now, great.

165
00:09:08.720 --> 00:09:11.129
如果不是，我就耐心等待。
If it's not, I'll just patiently wait.

166
00:09:11.129 --> 00:09:12.820
我想推送一条信息。
I wanna push a message down.

167
00:09:12.820 --> 00:09:15.129
我不需要知道某人是否准备好得到它。
I don't have to know whether or not somebody's ready to get it or not.

168
00:09:15.129 --> 00:09:17.638
我只想等到有人准备好给我留言。
I'm just gonna wait until somebody's ready to take my message.

169
00:09:17.638 --> 00:09:20.250
这就是让他们如此独立的原因。
That's what lets them be so independent.

170
00:09:21.710 --> 00:09:24.669
因为这个通信通道的语义处理了这个问题
Because the semantics of this communication channel take care of that

171
00:09:24.669 --> 00:09:27.139
沟通，背压，对我们来说。
communication, that back pressure, for us.

172
00:09:27.139 --> 00:09:32.740
所以每当process2到了第10行，它说我准备好了，
So whenever process2 gets to line 10 and it says I'm ready to take it,

173
00:09:32.740 --> 00:09:35.409
该消息立即通过通道传输。
immediately that message transfers through the channel.

174
00:09:35.409 --> 00:09:36.929
并且进程2被解锁，
And process2 is unblocked,

175
00:09:36.929 --> 00:09:40.590
并且进程1被解锁，然后他们就继续他们的一天。
and process1 is unblocked, and then they just go on about their day.

176
00:09:40.590 --> 00:09:42.879
然后我们到了5号线，我们说等一下，
And then we get to line 5 and we say wait a minute,

177
00:09:42.879 --> 00:09:44.509
我需要一个来自频道的信息。
I need a message from the channel.

178
00:09:44.509 --> 00:09:45.830
所以我要再等一次。
So I'm gonna wait again.

179
00:09:45.830 --> 00:09:48.996
然后过程2，他跑开了，嘿嘿说嘿，
And then process2, he's running along and hey says hey,

180
00:09:48.996 --> 00:09:51.289
我要在频道上传递一个信息。
I've got a message to send on the channel.

181
00:09:51.289 --> 00:09:53.450
所以我要等到有人准备好拿到它。
So I'm gonna wait until somebody's ready to get it.

182
00:09:54.720 --> 00:09:57.309
然后他在频道上发回一条信息。
And he sends a message back up the channel.

183
00:09:57.309 --> 00:10:00.673
然后进程1被解锁，然后进程2被解锁，
And then process1 is unblocked, and then process2 is unblocked,

184
00:10:00.673 --> 00:10:02.190
他们继续他们的一天。
and they go on about their day.

185
00:10:03.929 --> 00:10:07.019
所以你可以有几百行完全独立的代码
So you can have hundreds of lines of totally independent code that

186
00:10:07.019 --> 00:10:09.039
不需要担心系统的任何其他部分。
doesn't have to worry about any other piece of the system.

187
00:10:09.039 --> 00:10:12.549
唯一需要担心的是当你知道
And the only part that has to worry about it is when you know

188
00:10:12.549 --> 00:10:15.470
我有一个频道，我需要一些数据，或者
I've got a channel that I need some data on, or

189
00:10:15.470 --> 00:10:17.950
我有一个通道，我需要推送一些数据。
I've got a channel that I need to push some data along.

190
00:10:17.950 --> 00:10:20.029
我只想等着有人告诉我这没什么。
I'm just gonna wait for somebody to tell me that's okay.

191
00:10:21.759 --> 00:10:25.908
在这个抽象的掩盖之下，CSP范例是什么
And underneath the covers this abstraction, the CSP paradigm is what

192
00:10:25.908 --> 00:10:31.503
为您管理所有的复杂性。&GT；&GT；Kyle：好的，
manages all that complexity for you. &gt;&gt; Kyle: Okay,

193
00:10:31.503 --> 00:10:35.630
现在围棋和Clojure中非常聪明的人，
now the really, really smart folks in Go, and Clojure,

194
00:10:35.630 --> 00:10:40.274
和ClojureScript，他们非常确信这是
and ClojureScript, they're pretty convinced this is the most

195
00:10:40.274 --> 00:10:45.769
到目前为止发明的用于并发管理的强大模型。
powerful model invented to date for concurrency management.

196
00:10:45.769 --> 00:10:49.600
我也不是一个反对他们的人，我认为他们是对的。
And I'm not one to bet against them, I think they're right.

197
00:10:49.600 --> 00:10:53.210
我确实认为这是我见过的最强大的模式
I do think this is the most powerful pattern that I've ever seen or

198
00:10:53.210 --> 00:10:55.419
听到任何人谈论并发管理。
heard anybody talk about for concurrency management.

199
00:10:57.129 --> 00:10:59.039
顺便说一下，我对它很着迷。
I'm fascinated by it, by the way.

200
00:10:59.039 --> 00:11:02.705
我花了一年的时间研究如何更深入地理解这一点
I've spent the last year researching how to understand this deeper and

201
00:11:02.705 --> 00:11:05.860
查看将其应用于我的用户界面的实际方法。
seeing practical ways of applying it to my user interfaces.

202
00:11:05.860 --> 00:11:08.759
我已经花了一年的时间，我仍然觉得我几乎没有抓伤
And I've spent a year at it and I still feel like I'm barely scratching

203
00:11:08.759 --> 00:11:10.823
与这些聪明人相比。
the surface compared to these smart people.

204
00:11:10.823 --> 00:11:14.590
整个站在巨人的肩膀上，我就像是执着于
That whole standing on the shoulders of giants, I'm like clinging on for

205
00:11:14.590 --> 00:11:15.169
亲爱的生命。
dear life.

206
00:11:15.169 --> 00:11:18.440
他们知道的东西我几乎都不知道。
I don't even hardly know the stuff that they know.

207
00:11:18.440 --> 00:11:23.279
但我相信这里有很多我们甚至没有的东西
But I'm convinced that there is a whole lot here that we haven't even

208
00:11:23.279 --> 00:11:25.230
真正揭开了真相，划破了表面。
really uncovered and scratched the surface with.

209
00:11:26.730 --> 00:11:31.039
所以ClojureScript，维护ClojureScript的人，特别是一个叫
So ClojureScript, guys that maintain ClojureScript, specifically a guy named

210
00:11:31.039 --> 00:11:35.759
David Swanadet，我很抱歉David Nolan，他在Twitter上叫Swanadet。
David Swanadet, I'm sorry David Nolan who goes by Swanadet on Twitter.

211
00:11:35.759 --> 00:11:40.740
超级聪明的家伙，每次我听到他说话我都会想我是怎么做到的，
Super brilliant guy, every time I hear him talk I'm just like how did I even,

212
00:11:40.740 --> 00:11:44.379
他只是放弃了这个知识，就像它很容易，而我学到了很多东西。
he just drops down this knowledge like it's so easy and I'm learning so much.

213
00:11:45.590 --> 00:11:48.870
但是他有一个叫做Om，O-M的UI框架。
But he's got a UI framework called Om, O-M.

214
00:11:48.870 --> 00:11:52.572
及其ClojureScript，ClojureScript被移植到Java，
And its ClojureScript, which ClojureScript is ported to Java,

215
00:11:52.572 --> 00:11:57.820
它的ClojureScript是Clojure，可以在浏览器中以JavaScript运行。
it's ClojureScript is Clojure that can run in JavaScript in the browser.

216
00:11:57.820 --> 00:11:59.370
他们到处使用这种CSP，
And they use this CSP all over the place,

217
00:11:59.370 --> 00:12:01.559
它在CSP中对整个用户界面进行建模。
it models the entire user interface in CSP.

218
00:12:01.559 --> 00:12:03.900
他制作了这个，最令人惊叹的
And he produces this, the most amazing and

219
00:12:03.900 --> 00:12:06.639
我见过的性能最好的用户界面。
most performant user interface I've ever seen.

220
00:12:06.639 --> 00:12:07.940
太不可思议了。
It's incredible.

221
00:12:07.940 --> 00:12:09.919
所以我相信有很多
So I'm convinced that there's a whole lot of,

222
00:12:11.254 --> 00:12:13.485
我们还没有触及到它的能力的皮毛。
we haven't scratched the surface of the capabilities of it.

223
00:12:13.485 --> 00:12:17.065
这就是为什么我试图说服人们也考虑这一点。
And that's why I'm trying to convince people to think about this as well.

224
00:12:17.065 --> 00:12:22.955
这是另一个开始围绕我们的应用程序建模的工具。
This is another one of those tools to start to model our applications around.
