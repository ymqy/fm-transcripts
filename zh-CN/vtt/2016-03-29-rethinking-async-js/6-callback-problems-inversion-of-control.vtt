WEBVTT

1
00:00:00.000 --> 00:00:03.952
[音乐]
[MUSIC]

2
00:00:03.952 --> 00:00:05.919
&GT；&GT；Kyle：所以我已经暗示过这一点。
&gt;&gt; Kyle: So I've alluded to this already.

3
00:00:05.919 --> 00:00:12.519
让我们试着更清楚地表达回调地狱的两个主要问题。
Let's try to be more articulate about the two major problems of callback hell.

4
00:00:12.519 --> 00:00:13.740
我们看到了他们的症状。
We saw the symptoms of them.

5
00:00:13.740 --> 00:00:17.829
回调地狱的症状是管理复杂性的倍数
The symptoms of callback hell where that managing that times the complexity was

6
00:00:17.829 --> 00:00:19.359
相当可怕。
rather awful.

7
00:00:19.359 --> 00:00:23.089
这是非常手工的，很难编码，很难做到。
It's very manual, it's very hard coded, hard to do.

8
00:00:23.089 --> 00:00:26.239
但还有更深层次的东西。
But there's something deeper even than that.

9
00:00:26.239 --> 00:00:28.579
所以要想把这两个问题说清楚，
So to try to articulate those two problems,

10
00:00:28.579 --> 00:00:32.374
我将不得不采取一些概念性的步骤回到更远的地方
I'm gonna have to take some conceptual steps back a little further away

11
00:00:32.374 --> 00:00:36.521
从代码中。&gt；&gt；Kyle：首先，
from the code. &gt;&gt; Kyle: First,

12
00:00:36.521 --> 00:00:41.240
我想和你谈谈一个叫做控制反转的原理。
I wanna talk to you about a principle called inversion of control.

13
00:00:44.000 --> 00:00:46.049
顺便说一下，如果你搜索
By the way if you do a search for

14
00:00:46.049 --> 00:00:49.380
控制反转你会得到很多不同的
inversion of control you gonna get lots of different

15
00:00:49.380 --> 00:00:53.920
在不同的软件领域中回答了控制反转的含义。
answers in different software domains as to what inversion of control means.

16
00:00:53.920 --> 00:00:58.020
因此，请不要将所有这些不同的重载定义与
So try not to confuse all those different overloaded definitions with the one

17
00:00:58.020 --> 00:00:59.740
我要在这里给你。
that I'm going to give you here.

18
00:00:59.740 --> 00:01:03.954
我在这里给你们的是控制反转手段。
What I'm gonna give you here is the inversion of control means.

19
00:01:03.954 --> 00:01:08.072
我的程序中有一部分是由我来控制执行的。
There's part of my program that I'm in control of executing.

20
00:01:08.072 --> 00:01:12.676
然后，还有我的代码的另一部分，我不能控制执行。
And then, there's another portion of my code that I'm not in control of executing.

21
00:01:12.676 --> 00:01:16.162
我们表达这一点的方式是取我的程序的前半部分，
And the way that we express that is to take the first half of my program that

22
00:01:16.162 --> 00:01:19.878
现在执行，以及在回调中执行的代码的后半部分，以及
executes now and the second half of my code that executes in the callback, and

23
00:01:19.878 --> 00:01:22.015
当我把那个电话还给其他人的时候。
when I give that call back to somebody else.

24
00:01:22.015 --> 00:01:25.968
这就是颠倒控制的原因，它使他们能够控制什么时候和什么时候
That's what inverts the control and it puts them in control of when and

25
00:01:25.968 --> 00:01:30.030
以什么方式执行我的程序的后半部分。
in what manner to execute the second half of my program.

26
00:01:30.030 --> 00:01:33.020
这就是我所说的控制反转的全部和唯一的意思。
That's all and only what I mean by inversion of control.

27
00:01:34.240 --> 00:01:38.439
我要向你断言这是回调地狱的两大邪恶之一，
I'm going to assert to you that this is one of the two evils of callback hell,

28
00:01:38.439 --> 00:01:39.879
这种控制反转的概念。
this notion of inversion of control.

29
00:01:40.979 --> 00:01:43.659
所以让我们回到这个基本的setTimeout。
So let's go back to this fundamental setTimeout.

30
00:01:43.659 --> 00:01:47.539
有一行1和一行2，它们代表我们程序的前半部分，
There's a line 1 and a line 2, those represent the first half of our program,

31
00:01:47.539 --> 00:01:50.920
第三行和第四行代表我们程序的后半部分。
lines three and four represent the second half of our program.

32
00:01:50.920 --> 00:01:56.250
我们已经控制了1号线和2号线，它们现在正在发生。
We are in control of lines 1 and 2, they're happening now.

33
00:01:56.250 --> 00:01:59.469
我们现在正在观察它们的发生，我们控制着它们。
We are observing them happening now, we are in control of them.

34
00:01:59.469 --> 00:02:04.390
第3行和第4行将在稍后某个未指定的时间发生，并且
Lines 3 and 4 are going to happen at some unspecified later time and

35
00:02:04.390 --> 00:02:08.250
我们完全无法控制这些线路，如何和
we are completely not in control of how those lines, how and

36
00:02:08.250 --> 00:02:09.370
当这些行被执行时。
when those lines get executed.

37
00:02:11.180 --> 00:02:13.349
我们已经把控制权交给了别人，
We have given that control over to someone else,

38
00:02:13.349 --> 00:02:15.900
在本例中，它是timeout实用程序。
in this case it's the timeout utility.

39
00:02:15.900 --> 00:02:20.050
它完全控制着何时执行以及是否执行。
It is entirely in control of when and if this ever even gets executed.

40
00:02:22.840 --> 00:02:27.020
现在，在设置了超时的情况下，这是一个内置的JavaScript引擎工具，并且
Now, with a set timeout that's a built in JavaScript engine facility and

41
00:02:27.020 --> 00:02:31.430
尽管计时器有些怪异，但我们可能都会说
even though there's some weirdness around timers we can all probably say

42
00:02:31.430 --> 00:02:34.879
我们不担心太多，我们不担心我们没有信任问题。
we don't worry too much we don't worry we don't have a trust issue.

43
00:02:35.909 --> 00:02:39.930
或者不回电话或者做些奇怪的事情。
Around the time or not calling the call back or doing something weird.

44
00:02:39.930 --> 00:02:41.490
所以让我给你一个稍微不同的场景。
So let me give you a slightly different scenario.

45
00:02:42.719 --> 00:02:45.219
如果不是内置引擎呢？
What if it's not the built in engine?

46
00:02:45.219 --> 00:02:46.539
如果是其他公用事业，
What if it's some other utility,

47
00:02:46.539 --> 00:02:50.270
甚至可能是通过第三方库向您提供的实用程序。
maybe even a utility that comes to you by way of a third party library.

48
00:02:50.270 --> 00:02:53.469
让我给你一个场景设置这个，因为我喜欢教
Let me give you a scenario set this up because I like to teach to

49
00:02:53.469 --> 00:02:56.099
愚蠢的比喻场景和事情。
silly metaphors and scenarios and things.

50
00:02:56.099 --> 00:02:58.870
所以让我们假设你的任务是
So let's imagine that you are tasked with

51
00:02:58.870 --> 00:03:03.539
为您的公司构建电子商务引擎。
building an e-commerce engine for your company.

52
00:03:03.539 --> 00:03:07.745
贵公司向名人出售高端昂贵的电视。
Your company sells high end expensive TVs to celebrities.

53
00:03:07.745 --> 00:03:10.425
给名人一万美元的电视。
$10,000 TVs to celebrities.

54
00:03:10.425 --> 00:03:14.800
你的任务是建立一个电子商务网站，把这些东西卖给人们。
Your task of building the e-commerce site that sells those to people.

55
00:03:14.800 --> 00:03:19.439
所以你完成了所有的工作，使这个电子商务网站，所有的购物车和
So you go through all the work of making this e-commerce site all the cart and

56
00:03:19.439 --> 00:03:20.159
所有其他的东西。
all that other stuff.

57
00:03:20.159 --> 00:03:24.770
电子商务结账的最后一步，正确的是用户点击
And the very last step of the e-commerce checkout, right is the person is clicking

58
00:03:24.770 --> 00:03:28.539
Check Out(结帐)按钮，您有一个第三方实用程序，如OMIFELEY或
the checkout button you have a third party utility like an omniture or

59
00:03:28.539 --> 00:03:29.139
差不多吧。
something like that.

60
00:03:29.139 --> 00:03:34.099
他们为您提供了一些名为Track Checkout的实用程序，您需要拨打该实用程序
They provided you some utility called Track Checkout which you need to call with

61
00:03:34.099 --> 00:03:38.370
详细信息，订单详细信息，他们将在分析中跟踪这些信息
the details, the order details And they will track that in the analytics so

62
00:03:38.370 --> 00:03:40.329
你的营销人员知道发生了什么
that your marketing folks know what's happening and

63
00:03:40.329 --> 00:03:43.743
你的产品人员知道发生了什么。
your product folks know what's happening.

64
00:03:43.743 --> 00:03:47.340
他们会异步跟踪购买信息，
They're gonna track that purchase info asynchronously,

65
00:03:47.340 --> 00:03:50.340
然后他们会给你回电话让你知道是时候
and then they're gonna call your call back to let you know that it's time for

66
00:03:50.340 --> 00:03:53.729
你继续，并支付客户的信用卡和打印感谢页面。
you to go ahead and charge the customer's credit card and print the thank you page.

67
00:03:54.900 --> 00:03:56.490
所以这是拼图的最后一步。
So it's the last step of the puzzle.

68
00:03:58.050 --> 00:04:00.979
一切看起来都很棒你是对的这个代码非常简单，
Everything seems great you're right this code is pretty straightforward,

69
00:04:00.979 --> 00:04:02.099
API是有意义的。
the API makes sense.

70
00:04:02.099 --> 00:04:05.090
我通过了这个回调，你在他们的试验台上测试它
I passed in this callback, you test it against their test bed and

71
00:04:05.090 --> 00:04:06.889
一切都很好。
everything works great.

72
00:04:06.889 --> 00:04:13.050
所以你去现场直播第一天，名人开始买你的10000美元的超棒的电视
So you go live and day one, celebrity start buying your awesome $10,000 TVs and

73
00:04:13.050 --> 00:04:15.810
从首席执行官到你，每个人在公司都很开心。
everybody from the CEO all the way down to you is happy at the company.

74
00:04:17.470 --> 00:04:21.129
所以我们在这个场景中快进了六个月。
So we fast forward in the scenario six months.

75
00:04:21.129 --> 00:04:25.089
上班前的一天早上，你坐在咖啡馆里随便喝着拿铁，
One morning before work, you're sitting in a coffee shop casually sipping on a latte,

76
00:04:25.089 --> 00:04:27.540
然后你接到老板的电话。
and you get a call from your boss.

77
00:04:27.540 --> 00:04:33.480
当你接电话的时候，你的老板不是平常随意的自己。
And when you pick up, your boss is not usual casual self.

78
00:04:33.480 --> 00:04:37.870
完全的恐慌几乎无法构成完整的句子。
Complete panic can barely forms full sentences.

79
00:04:37.870 --> 00:04:41.670
说有一个重大的危机，巨大的公关问题。
Says there's a major crisis, huge PR problem.

80
00:04:41.670 --> 00:04:44.204
乔治·克鲁尼想在我们的网站上买一台电视
George Clooney tried to buy a TV on our site and

81
00:04:44.204 --> 00:04:47.341
他的信用卡在同一台电视上被扣了五次钱
his credit card was charged five times for the same TV and

82
00:04:47.341 --> 00:04:51.480
然后他在推特上说了这件事，现在很多人都在抱怨我们的
then he tweeted about it and now a bunch of people are complaining about our

83
00:04:51.480 --> 00:04:55.521
所有这些巨大的公关噩梦的一面，你现在就得赶紧去工作。
side of all this huge PR nightmare, you got to rush into work right now.

84
00:04:55.521 --> 00:04:57.957
你的头晕目眩，你甚至不记得写过这个代码，但是
Your head spinning you don't even remember writing this code but

85
00:04:57.957 --> 00:04:59.750
你急于在你的损失中工作。
you're rushing to work in your loses.

86
00:04:59.750 --> 00:05:03.230
嗯，他们已经退还了他的信用卡，但我们仍然有这个巨大的公关
Well, they've refunded his credit card but we still have this huge PR

87
00:05:03.230 --> 00:05:07.250
我们正在经历的噩梦，但作为工程师，我们被告知我们必须
nightmare that we are working through but as engineers we've been told we have to

88
00:05:07.250 --> 00:05:10.790
弄清楚这是怎么发生的，他们肯定不会再发生了。
figure out how this happened and they sure it never happens again.

89
00:05:10.790 --> 00:05:11.579
你听起来很熟悉。
Sound familiar to you.

90
00:05:11.579 --> 00:05:14.610
你可能有过自己版本的火灾
You've probably had your own version of a fire

91
00:05:14.610 --> 00:05:17.040
你被告知你必须确保这种事再也不会发生。
that you get told you have to make sure this never happens again.

92
00:05:18.939 --> 00:05:22.839
很抱歉你的创伤后应激障碍，如果我触发了你的记忆。
Sorry for your PTSD, if I'm triggering memories for you.

93
00:05:24.060 --> 00:05:27.254
但我们可以认同这个，因为这是我们的软件作品，
But we can identify with this because this is our software works,

94
00:05:27.254 --> 00:05:31.202
工作得很好，直到发生了一些巨大的火灾，然后突然我们的眼睛睁开了
works great until there's some huge fire and then all of a sudden our eyes are open

95
00:05:31.202 --> 00:05:33.874
一系列我们甚至不知道存在的问题
to a set of problems that we didn't even know existed or

96
00:05:33.874 --> 00:05:37.862
也许我们认为存在，但我们真的希望我们永远不会遇到，然后我们就遇到了。
maybe we thought existed but we really hoped we'd never run into and then we did.

97
00:05:37.862 --> 00:05:40.350
在这种情况下，您甚至没有意识到有一个问题。
In this case, you didn't even realize there was a problem.

98
00:05:40.350 --> 00:05:43.120
没有明显明确的案例说明问题是什么。
There's no obvious clear case of what the problem is.

99
00:05:43.120 --> 00:05:45.159
你甚至不记得写过代码，但是
You don't even remember writing the code but

100
00:05:45.159 --> 00:05:48.470
在你看完东西之后，你就会去翻遍你的代码，
you go pouring over your code that after you're looking through stuff,

101
00:05:48.470 --> 00:05:51.800
你到达你的代码的这一部分，你看，这是我们唯一收费的地方
you arrive at this part of your code, you see that's the only place where we charge

102
00:05:51.800 --> 00:05:54.730
客户的信用卡和你转一张支票。
the customer's credit card and you turn a check.

103
00:05:54.730 --> 00:05:57.930
你能不能在你已经有代码的按钮上点击五次
Could you maybe of like click the button five times that you already have code in

104
00:05:57.930 --> 00:06:01.449
去解决这个问题，比如可能出了什么问题？
there to fix that and like what could possibly be the problem?

105
00:06:02.660 --> 00:06:06.971
你最终得出的结论是没有其他可能的方法
You arrive eventually at the conclusion that there's no other possible way for

106
00:06:06.971 --> 00:06:10.250
信用卡已经被收取了五倍的费用，而不是
the credit card to have been charged five times other than for

107
00:06:10.250 --> 00:06:13.997
卡车结账工具已经给你回了五次电话。
the truck checkout utility to have called your call back five times.

108
00:06:13.997 --> 00:06:16.259
这是唯一合乎逻辑的结论。
It's the only logical conclusion.

109
00:06:16.259 --> 00:06:17.720
你浏览他们的文件，
You scour their documentation,

110
00:06:17.720 --> 00:06:20.709
没有一次提到他们多次给你回电话。
there's not a single mention of them calling your call back multiple times.

111
00:06:22.149 --> 00:06:23.379
所以你称之为客户支持。
So you call it Customer Support.

112
00:06:23.379 --> 00:06:26.600
你说，我有一个巨大的公关问题，我需要你帮助我。
You say, I got this huge PR issue, I need you to help me out.

113
00:06:26.600 --> 00:06:30.480
似乎此回调已被多次调用，并且
Seems like this callback has been called multiple times and

114
00:06:30.480 --> 00:06:32.069
我没看到任何派对或文件。
I don't see any party or documentation.

115
00:06:32.069 --> 00:06:35.590
嗯，支持代表同样感到惊讶，
Well, the support representative is similarly surprised,

116
00:06:35.590 --> 00:06:38.459
浏览他们的文档，从未听说过，不知道。
scours their documentation, never heard of it, got no idea.

117
00:06:38.459 --> 00:06:41.740
所以我们会升级，与你的支持和
So we'll escalate it, talk to your support and

118
00:06:41.740 --> 00:06:43.279
我们会和你一起解决的。
we'll get back with you with the resolution.

119
00:06:44.840 --> 00:06:48.350
你没有别的事要做，所以你过了一天，第二天早上再来
You've got nothing else to do, so you go over the day, come back the next morning

120
00:06:48.350 --> 00:06:52.750
在你的电子邮件中，第一件事，你有这封很长的邮件，这封很长很详细的邮件，
and in your email first thing, you have this long email, this long detailed email,

121
00:06:52.750 --> 00:06:55.490
有点像一家公司的安全漏洞
is kinda like when a company has a security breach and

122
00:06:55.490 --> 00:06:58.555
他们发布了他们的博客帖子，展示了一切是如何发生的。
they put out their blog post that shows how everything happened.

123
00:06:58.555 --> 00:07:02.620
他们说，在9：02，我们发现了这个，在9：18我们关闭了这个有这么大
They're like, at 9:02, we discovered this and at 9:18 we shut this off Is this big

124
00:07:02.620 --> 00:07:05.750
长长的电子邮件描述一切，但归结为他们这样说。
long email describing everything, but what it boils down to as they say this.

125
00:07:06.829 --> 00:07:10.769
我们的一些工程师正在研究代码的实验分支，
Some of our engineers working on an experimental branch of the code,

126
00:07:10.769 --> 00:07:14.360
他们打算在哪里给你回电，如果他们没有
where they were going to try to call your callback, and if they didn't

127
00:07:14.360 --> 00:07:18.310
从您的回调中听到成功的返回值，他们将每秒尝试一次
hear a successful return value from your callback, they would try once per second

128
00:07:18.310 --> 00:07:23.459
持续五秒钟，然后最终失败，五秒钟后超时。
for five seconds and then eventually fail out, timeout after five seconds.

129
00:07:23.459 --> 00:07:24.810
现在，这是实验性的代码。
Now, this was experimental code.

130
00:07:24.810 --> 00:07:27.110
它本来就不应该上线，但是
It was never supposed to go live, but

131
00:07:27.110 --> 00:07:30.600
在我们的过程中有一个故障，它意外地上线了。
there was a breakdown in our process and it accidentally went live.

132
00:07:30.600 --> 00:07:33.540
它只直播了五分钟就回滚了，
It was only live for five minutes before we rolled it back,

133
00:07:33.540 --> 00:07:37.159
但它只是碰巧是五分钟，你的网站陷入了它。
but it just happened to be the five minutes that your site got caught in it.

134
00:07:37.159 --> 00:07:41.103
我们检查了所有的流程，我们实现了所有这些东西，并且
We've checked all of our processes, we've implemented all this stuff, and

135
00:07:41.103 --> 00:07:43.387
我们向你保证这种事再也不会发生了。
we promise you this will never happen again.

136
00:07:43.387 --> 00:07:47.567
这才是真正的解决方案，你把电子邮件打印出来，把它拿给你的老板，你就是
That's the real solution, you print out that email you take it your boss, you're

137
00:07:47.567 --> 00:07:51.610
就像，这就是我们得到的，他们说这是他们的错，他们打电话或回电。
like, this is what we got, they say it was their fault they called or callback.

138
00:07:51.610 --> 00:07:55.840
你的老板看着你，在故事的这一点上，我想问你，
Your boss looks at you and it's at this point of the story that I want to ask you,

139
00:07:55.840 --> 00:07:58.470
你老板回应的可能性有多大，
what are the chances that your bosses response is gonna be,

140
00:07:58.470 --> 00:08:01.437
什么听起来对我好？&gt；&gt；扬声器2：[笑]
what sounds good to me? &gt;&gt; Speaker 2: [LAUGH]

141
00:08:01.437 --> 00:08:03.370
&gt；&gt；Kyle：我会说大约为零。
&gt;&gt; Kyle: I would say approximately zero.

142
00:08:05.139 --> 00:08:07.939
因为在这一点上，已经暴露的关于您的系统的内容是
Because at this point what has been exposed about your system is

143
00:08:07.939 --> 00:08:09.980
一些你以前都没有意识到的事情。
something you didn't even realize before.

144
00:08:09.980 --> 00:08:13.238
当您传入回调时，您没有意识到存在信任点。
You did not realize that there was a trust point when you passed in a callback.

145
00:08:13.238 --> 00:08:17.637
当您传入回调时，您相信回调将是
When you passed in a callback you are trusting that that callback will be

146
00:08:17.637 --> 00:08:20.276
没有调用太多或太少的次数或
not called too many times or too few times or

147
00:08:20.276 --> 00:08:25.110
不管怎样，他们认为我要做的修复是因为你的老板对我来说喜欢
whatever so they think well what I got to do the fix is because your boss to me like

148
00:08:25.110 --> 00:08:29.420
你得确保这种事再也不会发生了。
you've got to make sure that can never happen again.

149
00:08:29.420 --> 00:08:33.049
嗯，灯泡在你的脑海中熄灭，你说，我很聪明，我有一个主意。
Well, the light bulb goes off in your head and you say, I'm brilliant, I got an idea.

150
00:08:33.049 --> 00:08:34.379
我将设置一个布尔标志。
I'll setup a Boolean flag.

151
00:08:34.379 --> 00:08:36.240
一开始就是假的。
It'll start out as false.

152
00:08:36.240 --> 00:08:38.379
当它第一次通过时，我会把它翻转成真，并且
First time it goes through I'll flip it to true, and

153
00:08:38.379 --> 00:08:41.519
我会确保那个该死的东西不管他们叫它多少次，
I'll make sure that that darned thing no matter how many times they call it,

154
00:08:41.519 --> 00:08:43.029
我只会刷一次信用卡。
I'll only ever charge the credit card once.

155
00:08:44.090 --> 00:08:45.830
自我感觉很好。
Feel pretty good about yourself.

156
00:08:45.830 --> 00:08:47.700
你说，这太棒了。
You're like, this is awesome.

157
00:08:47.700 --> 00:08:51.600
所以你签入代码，你就产生了一个测试用例。
So you check in that code, you produce a test case for this.

158
00:08:51.600 --> 00:08:53.019
你去质检部门。
You go to the QA department.

159
00:08:53.019 --> 00:08:55.809
现在，我正要抨击QA部门，但它很可爱，所以
Now, I'm about to bash on a QA department, but it's lovingly, so

160
00:08:55.809 --> 00:08:58.730
如果你在QA我道歉。
I apologize if you're in QA.

161
00:08:58.730 --> 00:09:00.009
每个人都喜欢QA。
Everybody loves QA.

162
00:09:00.009 --> 00:09:04.510
我们喜欢恨他们，但我们需要QA，我们需要你。
We love to hate them, but we need QA, we need you.

163
00:09:04.510 --> 00:09:08.224
但你得去QA部门我把这个修好了
But you got to QA department I got this fixed for the bug,

164
00:09:08.224 --> 00:09:11.542
这是复制的案例，废话。
here's the reproduced case, blah, blah blah.

165
00:09:11.542 --> 00:09:14.139
然后，QA人员做了他们总是恼人的事情。
And then, that QA person does what they always annoyingly do.

166
00:09:14.139 --> 00:09:16.669
他们问你这个你根本没想到的问题，
They ask you that question that didn't even occur to you,

167
00:09:16.669 --> 00:09:18.730
你不想让他们问。
you didn't want them to ask.

168
00:09:18.730 --> 00:09:22.289
如果他们从来不给我们回电呢？
Well, what about if they never call our callback?

169
00:09:22.289 --> 00:09:23.580
我们有这方面的代码吗？
Do we have any code in there for that?

170
00:09:27.019 --> 00:09:30.081
没有[笑]，所以现在你开始恐慌了，就像，不，
No [LAUGH], so now you're starting to panic like, no,

171
00:09:30.081 --> 00:09:32.544
我没有解决这个问题的办法，但是
I don't have a solution for that problem but

172
00:09:32.544 --> 00:09:36.086
我想我可以为这件事安排一些时间什么的。
I guess I could set up some kind of time out for that or whatever.

173
00:09:36.086 --> 00:09:39.395
然后，他继续说，我们代码中的其他地方呢
And then, he goes on he says what about all the other places in our code that we

174
00:09:39.395 --> 00:09:40.139
使用回调。
use callbacks.

175
00:09:40.139 --> 00:09:42.610
我们对所有这些地方都有解决方案吗？
Do we have fixes for all of this and all of those places?

176
00:09:43.879 --> 00:09:45.480
你的脸上有那种茫然的凝视
And you get that blank stare on your face and

177
00:09:45.480 --> 00:09:49.750
你就像，也许我可以慢慢后退，假装我没听到他说的话。
you're like, maybe I can slowly back away and pretend I did not hear him say it.

178
00:09:49.750 --> 00:09:52.539
也许我可以假装什么都没听到
Maybe I just can pretend I didn't hear any of this

179
00:09:53.570 --> 00:09:57.769
因为突然间暴露出来的是这个兔子洞有多深。
because all of a sudden what's been exposed is how deep this rabbit hole goes.

180
00:09:57.769 --> 00:10:02.370
我们在传递控制反转回调时涉及的信任问题
The trust issues that we're involved in passing callback the inversion of control

181
00:10:02.370 --> 00:10:06.929
信任问题我们相信当我们将回调传递给其他实用程序时
trust issues we were trusting that when we pass a callback to some other utility and

182
00:10:06.929 --> 00:10:08.820
顺便说一句，它不一定是第三方公用事业公司，
by the way it doesn't have to be a third party utility,

183
00:10:08.820 --> 00:10:12.330
它可能在你的同一个程序中的其他地方，甚至是你写的东西。
it could be somewhere else in your same program even stuff that you wrote.

184
00:10:13.509 --> 00:10:16.820
但我们传递它，我们相信它不会太早，也不会太晚，
But we pass it in and we trust that it won't call too early, not too late,

185
00:10:16.820 --> 00:10:20.429
不会太多次，不会太少，不会错过任何上下文吧
not too many times not too few times won't lose out on any of the context it

186
00:10:20.429 --> 00:10:23.370
需要通过并且不会接受可能已经发生的任何错误
needs to pass and won't swallow any errors that may have occurred and

187
00:10:23.370 --> 00:10:24.730
实际上，这份名单还在继续。
actually the list is goes on and on and on.

188
00:10:26.000 --> 00:10:28.809
这些都是你一直暗中信任的东西
These are all things that you have been implicitly trusting

189
00:10:28.809 --> 00:10:31.639
每次你在任何地方传递回调
every single time you've ever passed a callback anywhere in

190
00:10:31.639 --> 00:10:33.259
您曾经编写过的任何JavaScript程序。
any JavaScript program you've ever written.

191
00:10:35.009 --> 00:10:37.970
在此之前，你们中的大多数人可能从未问过这个问题，
Until this moment, most of you have probably never asked the question,

192
00:10:37.970 --> 00:10:40.639
如果这种信任崩溃了会发生什么？
what happens if this trust falls apart?

193
00:10:42.049 --> 00:10:46.090
对我来说有趣的是，开发人员实际上非常善于理解为什么
It's interesting to me that developers are actually pretty good at understanding why

194
00:10:46.090 --> 00:10:49.509
拥有这种信任是很重要的，但要用传入的东西来验证。
it's important to have that trust but verify thing with what's passed in.

195
00:10:49.509 --> 00:10:53.250
就像，当你有一个函数应该把两个数字相加，然后
Like, when you have a function that's supposed to add two numbers, and

196
00:10:53.250 --> 00:10:56.450
在尝试将它们相加之前，您可以断言它们实际上是数字。
you assert that they are actually numbers before trying to add them together.

197
00:10:56.450 --> 00:10:59.120
我们对这种心态很在行。
We're pretty good at mindsets like that.

198
00:10:59.120 --> 00:11:02.649
而且我们从来没有实现过任何检查的概念
And we've never once implemented any notion of checking that

199
00:11:02.649 --> 00:11:05.889
我们的回调的行为与我们预期的一样。
our callbacks are behaving the way that we expect.

200
00:11:05.889 --> 00:11:06.909
因此，我们遇到了这个问题。
And so, we run into this problem.

201
00:11:08.190 --> 00:11:10.049
所以我是这么说的。
So this is how I would say it.

202
00:11:10.049 --> 00:11:12.669
如果您曾经在任何JavaScript程序中使用过回调
If you've ever had a callback in any JavaScript program that you've ever

203
00:11:12.669 --> 00:11:15.149
并且您没有适当的解决方案
written and you do not have a solution in place for

204
00:11:15.149 --> 00:11:17.620
这些信任问题中的每一个。
every single one of these trust issues.

205
00:11:17.620 --> 00:11:20.539
那个程序目前有一个bug，即使你还没有被它咬过。
That program currently has a bug even if you've not been bitten by it yet.

206
00:11:22.250 --> 00:11:26.840
这是回调设计中的一个基本缺陷，即回调
This is a fundamental deficiency in callback design is that the callback

207
00:11:26.840 --> 00:11:32.139
本身没有解决方案，没有解决方案
itself does not have a solution, there is no solution for

208
00:11:33.429 --> 00:11:37.960
这部分回调地狱，这种控制倒置的信任问题。
this part of callback hell, this inversion of control trust issue.

209
00:11:40.379 --> 00:11:44.059
我们特别的一次并不是太多，但是还有相当多的其他几次。
Our particular one was not too many times but there are quite a few others.

210
00:11:44.059 --> 00:11:48.066
所以如果你想争分夺秒地解决每一个问题，你可能会想到
So if you wanna scramble and solve every one of those you might be able to come up

211
00:11:48.066 --> 00:11:52.259
对于这些影响中的每一个，都有一个特别的解决方案，一个解决方案和
with an ad hoc solution for every single one of those impacts that one solution and

212
00:11:52.259 --> 00:11:56.293
然后你就会开始认为我的程序中有上百个回调。
then you gonna start thinking I've got hundreds of callbacks in my program.

213
00:11:56.293 --> 00:11:59.409
我们得在每个地方临时解决这个问题。
We're gonna have to solve this ad hoc in every single place.

214
00:11:59.409 --> 00:12:01.740
突然之间，你的代码库只是布尔值的三四个x。
All of a sudden your codebase just Boolean by three or four x.

215
00:12:03.210 --> 00:12:05.669
在这一点上，它是完全不可维护的，也是不切实际的。
It's completely unmaintainable and impractical at this point.

216
00:12:07.974 --> 00:12:10.230
我们需要更好的东西
We're gonna need something better,

217
00:12:10.230 --> 00:12:13.000
这是专为解决所有这些信任问题而设计的。
that's designed specifically to solve all these trust issues.
