WEBVTT

1
00:00:00.025 --> 00:00:03.984
[音乐]
[MUSIC]

2
00:00:03.984 --> 00:00:06.480
&gt；&gt；Kyle：这就给我们带来了这个并发的概念。
&gt;&gt; Kyle: That brings us to this idea of concurrency.

3
00:00:06.480 --> 00:00:07.318
并发意味着什么？
What does concurrency mean?

4
00:00:07.318 --> 00:00:11.519
很多人认为并发意味着两件事情同时发生。
A lot of people think concurrent means two things happening at the same time.

5
00:00:11.519 --> 00:00:15.157
再说一遍，这是其中一件事，如果你眯着眼睛看它，你可能会说，是的，也许
Again, it's one of those things if you squint at it you might say, yeah, maybe

6
00:00:15.157 --> 00:00:18.875
它们有点像，但这里有一个重要的细微差别。
they're kinda like the same but there's an important nuance difference here.

7
00:00:18.875 --> 00:00:22.137
顺便说一下，如果有人想反对我的特殊用法
And by the way, if somebody wants to object to my particular usage of

8
00:00:22.137 --> 00:00:25.820
这些词，实际上有很多不同的意思。
the words, there's actually lots of different meanings for these words.

9
00:00:25.820 --> 00:00:28.250
而且很难确定一件事，所以
And it's hard to nail down one particular thing, so

10
00:00:28.250 --> 00:00:31.850
我试着在我自己对这些东西的使用中保持一致。
I'm trying to be is consistent within my own usage of these things.

11
00:00:31.850 --> 00:00:36.070
但实际上，如果你去阅读维基百科的页面或其他文本，
But there's actually, if you go and read Wikipedia pages or other text on it,

12
00:00:36.070 --> 00:00:38.609
你会发现在这些事情上有一系列不同的观点。
you'll find a whole range of different opinions on these things.

13
00:00:38.609 --> 00:00:43.350
但我向你解释并发是什么而不是说
But my way of explaining to you what concurrency is rather than saying with

14
00:00:43.350 --> 00:00:46.929
并行性两件事情发生在完全相同的时刻，我会描述
parallelism two things are happening at the exact same instant, I would describe

15
00:00:46.929 --> 00:00:53.170
并发：在同一时间范围内发生的两个更高级别的任务。
concurrency as two higher level tasks happening within the same timeframe.

16
00:00:54.460 --> 00:00:56.954
所以我们不是一瞬间，而是看一个时间框架。
So rather than an instant, we're going to look at a timeframe.

17
00:00:56.954 --> 00:00:58.750
我们会说在这个时间框架内，
We're gonna say within this timeframe,

18
00:00:58.750 --> 00:01:01.700
将会发生两个更高级别的操作。
two higher level operations are going to occur.

19
00:01:01.700 --> 00:01:05.750
理解更高级别的项目或更高级别的操作的概念
To understand the notion of higher level items or higher level operations

20
00:01:05.750 --> 00:01:09.549
发生时，我们还必须了解更高的层次，或者我可以称之为宏观的东西
occurring, we also have to understand that higher level, or what I might call macro

21
00:01:09.549 --> 00:01:14.920
级别任务可以被拆分，或者被认为是被拆分成微观级别的任务。
level tasks can be broken up or thought of as being broken up into micro level tasks.

22
00:01:16.210 --> 00:01:20.370
所以这里有一种可视化宏观和微观层面的方法，并且
So here's a way to visualize the macro level and the micro level, and

23
00:01:20.370 --> 00:01:21.575
这些东西是怎么结合在一起的。
how these things might go together.

24
00:01:21.575 --> 00:01:27.390
所以在左边我们有这个黄色的橙色任务，有一个宏观层面的任务。
So the left-hand side we have this yellow orange task, with a macro level task.

25
00:01:27.390 --> 00:01:30.551
它被分成一个个数字，1，2，3，4。
Which is broken up into those individual numbers, 1, 2, 3, 4.

26
00:01:30.551 --> 00:01:32.229
这将是微观层面的任务。
Which would be micro level tasks.

27
00:01:32.229 --> 00:01:34.599
这些是我编造的条款，这些不是官方条款。
These are my made up terms, these aren't official terms.

28
00:01:34.599 --> 00:01:38.364
而是宏观层面和微观层面的任务。
But macro level and micro level tasks.

29
00:01:38.364 --> 00:01:42.073
然后，在右侧，我们有另一个宏观层面的任务，表示为
And then, on the right-hand side, we have another macro level task represented by

30
00:01:42.073 --> 00:01:45.500
那个蓝绿色，它被分成三个部分，1，2，3。
that blue green color, and it's broken up into three pieces, 1, 2, 3.

31
00:01:45.500 --> 00:01:48.609
现在，为了数学的易用性，我将假装和
Now, for the easiness of math I'm going to pretend and

32
00:01:48.609 --> 00:01:53.200
假设这些微级任务中的每一个都需要整整一秒钟才能完成。
assume that each one of these micro level tasks takes one full second to complete.

33
00:01:54.789 --> 00:01:59.319
所以这个整体系统完成所有的任务需要七秒钟，
So this overall system to do all of the tasks it's going to take seven seconds,

34
00:01:59.319 --> 00:02:00.924
每个人都同意这一点吗？
does everybody agree with that?.

35
00:02:00.924 --> 00:02:02.471
因为它是一个单线程系统。
Cuz it's a single threaded system.

36
00:02:02.471 --> 00:02:05.120
现在，这可能发生在完全相同的时刻。
Now, that could happen at exactly the same moment.

37
00:02:05.120 --> 00:02:09.240
因此，这些一秒的微级别任务必须以某种方式进行调度
So those one second micro level tasks are going to have to be scheduled in some way

38
00:02:09.240 --> 00:02:12.360
所有七个人都完成了，这需要七秒钟。
that all seven of them finish and that's gonna take seven seconds.

39
00:02:12.360 --> 00:02:16.120
让我们假设黄色的橙色代表Ajax请求，并且
Let's pretend that the yellow orange represents an Ajax request and

40
00:02:16.120 --> 00:02:18.060
响应周期。
response cycle.

41
00:02:18.060 --> 00:02:20.420
发出一个请求，我们得到一个响应，然后
Fire off a request we get a response back and

42
00:02:20.420 --> 00:02:24.490
让我们假设蓝色代表我们在页面上滚动的卷轴
let's pretend that the blue represents a scroll that we scroll on the page and

43
00:02:24.490 --> 00:02:28.090
它重新绘制了所有内容，因为我们滚动到了页面的新位置。
it repainted everything because we scrolled to a new location of the page.

44
00:02:28.090 --> 00:02:32.629
这两个操作必须从根本上发生在同一线程上。
These two operations have to fundamentally happen on the same thread.

45
00:02:32.629 --> 00:02:36.788
我们浏览器的整个用户界面都发生在同一个线程上，所以
The entire user interface of our browser is happening on the same thread so

46
00:02:36.788 --> 00:02:41.752
我们的JavaScript，垃圾收集器，样式引擎，重画，一切，
our JavaScript, the garbage collector the style engine, the repaint, everything,

47
00:02:41.752 --> 00:02:45.841
这一切都发生在一个线程上，这意味着我们不得不担心
it's all happening on one thread which means we kinda have to worry about

48
00:02:45.841 --> 00:02:50.296
争用，如果你曾经在你的页面上有过动画，那就让它抖动吧。
contention and if you've ever had an animation on your page have jitter in it.

49
00:02:50.296 --> 00:02:51.270
你知道为什么会这样吗？
You know why that happened?

50
00:02:51.270 --> 00:02:56.468
因为此时您的CSS引擎在UI线程上发生了争用
Because something contended on the UI thread at that moment your CSS engine

51
00:02:56.468 --> 00:03:01.675
试图达到你的风格你的布局引擎试图重新绘制页面。
was trying to your style your layout engine was trying to repaint the page.

52
00:03:01.675 --> 00:03:05.349
这是一个60帧的第二种方式，它正在重绘你的页面。
It's a 60 frames a second way that it's repainting your page.

53
00:03:05.349 --> 00:03:08.580
它试图做到这一点，但就在那个时候，还有别的东西在运行。
It tried to do that but at that exact moment something else was running.

54
00:03:08.580 --> 00:03:10.069
所以我不得不多等一会儿
So I had to wait an extra moment and

55
00:03:10.069 --> 00:03:13.669
这就是造成抖动的原因，单线程。
that's what created that jitter, single threaded.

56
00:03:13.669 --> 00:03:15.879
所以如果我们有更高的水平，
So if we have these higher level,

57
00:03:15.879 --> 00:03:18.990
我们希望同时发生的宏级任务。
macro level tasks that we want to happen concurrently.

58
00:03:18.990 --> 00:03:22.699
我希望黄色和蓝色同时发生。
I want the yellow and the blue to happen at the same time.

59
00:03:22.699 --> 00:03:24.110
为什么？
Why?

60
00:03:24.110 --> 00:03:25.997
好吧，让我们假设他们没有。
Well, let's imagine they don't.

61
00:03:25.997 --> 00:03:30.704
调度这个系统的一种方法，调度这个程序的一种方法是做所有的
One way of scheduling this system, one way of scheduling this program is to do all of

62
00:03:30.704 --> 00:03:33.069
先是黄色，然后是所有的蓝色。
the yellow first and then all of the blue.

63
00:03:33.069 --> 00:03:35.159
在我们的页面上会是什么样子？
What would that look like on our page?

64
00:03:35.159 --> 00:03:37.889
暂时忽略这一秒的东西，它在我们的屏幕上会是什么样子
Ignoring the one second thing for a moment, what it would look like on our

65
00:03:37.889 --> 00:03:42.550
页面看起来就像我单击按钮来发出Ajax请求，然后
page Is that it would look like I click the button to make an Ajax request and

66
00:03:42.550 --> 00:03:45.069
当这种情况发生时，我试图滚动我的页面，但
while that was happening I tried to scroll my page but

67
00:03:45.069 --> 00:03:48.469
在那发生的时候，所有的东西都被完全冻结了。
everything was completely frozen while that happened.

68
00:03:48.469 --> 00:03:53.229
然后，在它完成之后，它有点跳回来，赶上了。
And then, after it finished then it sort of jumped back and caught up.

69
00:03:53.229 --> 00:03:57.349
我把它称为同步XHR，同步Ajax。
Ways I precedent for that It's called synchronous XHR, synchronous Ajax.

70
00:03:57.349 --> 00:04:00.069
在网络平台上犯下的最坏的恶行之一。
One of the worst evils perpetrated upon the web platforms.

71
00:04:00.069 --> 00:04:01.289
糟糕的主意。
Terrible idea.

72
00:04:01.289 --> 00:04:04.639
外面有很多人在哭泣，而且真的在抱怨
There are people out there that are crying and literally complaining

73
00:04:04.639 --> 00:04:08.830
在标准列表上说，你怎么敢拿走我的同步XHR？
on standards list saying, how dare you take away my synchronous XHR?

74
00:04:08.830 --> 00:04:10.120
它已经被弃用了
It's been deprecated and

75
00:04:10.120 --> 00:04:12.599
从网络平台上删除，因为这是一个非常糟糕的主意。
removed from the web platform because it's a really bad idea.

76
00:04:13.669 --> 00:04:16.379
这样安排是个糟糕的主意，不是因为
It's a terrible idea to schedule it that way isn't it because

77
00:04:16.379 --> 00:04:19.689
即使整个系统仍然需要7秒
even though the overall system would still take seven seconds

78
00:04:19.689 --> 00:04:23.350
调度这些微级任务的特定选择。
that particular choice of scheduling those micro level tasks.

79
00:04:23.350 --> 00:04:26.040
会觉得效率很低有人同意吗
Would feel terribly inefficient does somebody agree with that

80
00:04:26.040 --> 00:04:27.720
只是从用户体验的角度来看。
just from a user experience perspective.

81
00:04:29.149 --> 00:04:32.149
另一方面，如果我们选择将这些东西交织在一起。
If on the other hand we chose to interleave these things together.

82
00:04:33.389 --> 00:04:34.990
有一件事可能阻碍了
Where one thing might be blocking so

83
00:04:34.990 --> 00:04:37.870
我们可以在一件事情被阻塞时做其他事情，然后它才能移动到
we can do something else while one thing is blocking before it can move on to

84
00:04:37.870 --> 00:04:42.129
下一件事，如果我们选择以内在的离开方式安排这些事情，
the next thing, if we chose to schedule those things in an inner leaved fashion,

85
00:04:42.129 --> 00:04:44.810
整个系统实际上可能仍然需要7秒。
the overall system might still in fact take seven seconds.

86
00:04:46.189 --> 00:04:49.899
但是对表演的感觉是事情将会发生
But the perception of the performance is that things are gonna be happening

87
00:04:49.899 --> 00:04:53.209
同时，真的更重要的是，我们应该说这些话
in parallel really more importantly we should be saying those things

88
00:04:53.209 --> 00:04:54.769
同时发生。
are happening concurrently.

89
00:04:54.769 --> 00:04:56.170
AJAX和请求和
The Ajax and request and

90
00:04:56.170 --> 00:04:59.659
响应与重绘同时发生。
response is happening concurrently with the repainting.

91
00:04:59.659 --> 00:05:02.920
即使在任何给定的时刻，这些微级任务中只有一个正在发生。
Even though at any given instant only one of those micro level tasks is occurring.

92
00:05:03.980 --> 00:05:08.343
所以想象一下我那奇特的动画花了我大约两个小时
So just to visualize that my fancy animation took me about two hours to

93
00:05:08.343 --> 00:05:13.307
直接进入Keynote，这里有一种方法可以将这些微观级别的任务调度到
get right in Keynote, here's a way of scheduling those micro level tasks onto

94
00:05:13.307 --> 00:05:16.863
中间的单个线程称为事件循环。
that single thread in the middle called the event loop.

95
00:05:16.863 --> 00:05:20.158
我不知道它为什么前进，中间的单线程称为事件循环
I don't know why it advance, the single thread in the middle called the event loop

96
00:05:20.158 --> 00:05:22.449
这就是我们在JavaScript中所说的。
that's what we call it in JavaScript.

97
00:05:22.449 --> 00:05:24.779
在任何给定的情况下，只做这些事情中的一件。
At any given instance only doing one of those things.

98
00:05:24.779 --> 00:05:28.800
所以当你有一个AJAX请求返回并且
So when you have an Ajax request that comes back and

99
00:05:28.800 --> 00:05:31.600
您需要触发Call以获得响应。
you need to fire the cal back for a response.

100
00:05:33.810 --> 00:05:36.269
如果在那一刻有人已经在执行了。
If at that moment somebody is already executing.

101
00:05:37.480 --> 00:05:38.889
没人可以插队。
Nobody gets to cut in line.

102
00:05:40.550 --> 00:05:43.069
你的响应回调不会中断并说，
It's not like your response callback gets to interrupt and say,

103
00:05:43.069 --> 00:05:44.709
我该跑了。
it's time for me to run.

104
00:05:44.709 --> 00:05:45.509
你知道它是干什么的吗？
You know what it does?

105
00:05:45.509 --> 00:05:47.389
它就像其他人一样，排在队伍的尽头。
It gets at the end of the line just like everybody else.

106
00:05:48.500 --> 00:05:51.199
所以当垃圾收集器说，我需要收集一些垃圾。
So when the garbage collector says, I need to collect some garbage.

107
00:05:51.199 --> 00:05:54.370
样式CSS重绘程序说，我需要重画页面。
And the style CSS repainter says, I need to repaint the page.

108
00:05:54.370 --> 00:05:56.550
布局引擎说，我需要做一些工作。
And the layout engines says, I need to do some work.

109
00:05:56.550 --> 00:05:57.769
以及JavaScript引擎，
And the JavaScript engine,

110
00:05:57.769 --> 00:06:01.410
说我需要在他们中的每一个人中触发这个响应回调。
says I need to fire this response call back in every single one of them.

111
00:06:01.410 --> 00:06:04.000
这是一个先到先发的发球，每个人都排在队伍的最后。
It's a first come first serve, everybody gets at the end of the line.

112
00:06:04.000 --> 00:06:07.269
这就是事件循环的本质。
That is fundamentally what the event loop is.

113
00:06:08.480 --> 00:06:12.137
这就是帮助您理清正在发生的事情的高级视图。
Such is the high level view to help you sort out what's going on.

114
00:06:12.137 --> 00:06:16.519
这里的要点是，这项工作的日程安排并不总是
And the main point here is that the scheduling of this is not always

115
00:06:16.519 --> 00:06:18.600
完全在我们的控制之下。
entirely within our control.

116
00:06:18.600 --> 00:06:22.790
有时，是比赛条件决定了其中一种情况与另一种发生的情况。
Sometimes it's race conditions that choose one versus the other happening.

117
00:06:22.790 --> 00:06:27.029
并不是所有这些都在发生，但是有很多必要的协调。
Not all that's happening, but there's an awful lot of coordination necessary.

118
00:06:27.029 --> 00:06:29.410
有时是事情发生时的协调，
Sometimes it's the coordination of when things happen,

119
00:06:29.410 --> 00:06:33.360
但通常情况下，它是对发生的事情的反应的协调。
but oftentimes it's the coordination of responses to things happening.

120
00:06:34.730 --> 00:06:37.769
因为它并不总是很连续的，像这样做，并且
Cuz it's not always a very serial, like do this and, and

121
00:06:37.769 --> 00:06:41.090
当完成后做这个，然后当那是一个问题的时候，通常它是很多的
when that's finished do this and then when that's an issue that oftentimes it's much

122
00:06:41.090 --> 00:06:45.399
更复杂的是，嘿，并行地做这三件事。
more complex like hey go do these three things in parallel.

123
00:06:45.399 --> 00:06:48.103
然后，当其中至少有两个完成后，你可以继续前进
And then, when at least two of them have finished you can move on and

124
00:06:48.103 --> 00:06:50.761
做另一件事，然后当第三件事出现时，你可以
do this other thing and then when that third one comes along you can

125
00:06:50.761 --> 00:06:52.427
在这里分支，然后做另一件事。
branch out here and do this other thing.

126
00:06:52.427 --> 00:06:53.259
不久之后。
And before long.

127
00:06:53.259 --> 00:06:58.250
这只是可能发生的事情的不同状态的疯狂的复杂树，而且
It's just crazy complex tree of different states of things that could happen, and

128
00:06:58.250 --> 00:07:01.899
这就是我们必须在我们的程序中管理的复杂性。
it's that complexity that we have to manage in our programs.

129
00:07:01.899 --> 00:07:06.170
正是这种复杂性要求我们有更好的模式
It's that complexity that begs for us to have better patterns for

130
00:07:06.170 --> 00:07:07.480
并发管理。
concurrency management.

131
00:07:07.480 --> 00:07:11.069
这就是异步编程，管理我们的并发性。
That's what asynchronous programming is, managing our concurrency.

132
00:07:12.879 --> 00:07:14.379
所以这是一个动机
So that's a motivation for

133
00:07:14.379 --> 00:07:19.290
你从哲学和概念的基础上为
you from a philosophical and conceptual basis of the motivation for

134
00:07:19.290 --> 00:07:24.769
为什么我们会竭尽全力去写我们所做的程序。
why we go to the lengths that we do to try to write the programs that we do.

135
00:07:24.769 --> 00:07:28.329
在这个工作坊里我要向你展示的一切都是可以
Everything that I'm gonna show you in this workshop is something that could

136
00:07:28.329 --> 00:07:33.879
从根本上说，除了回调之外什么都不做，没有新的功能。
fundamentally be done with nothing but the callback with no new functionality.

137
00:07:35.389 --> 00:07:39.899
但我们将看到，回调基本上不足以
But we're gonna see that the callbacks fundamentally are Insufficient for

138
00:07:39.899 --> 00:07:41.909
表达更高和
expressing the higher and

139
00:07:41.909 --> 00:07:46.259
我们现代JavaScript程序所做的更高级别的复杂性。
higher orders of complexity that our modern JavaScript programs are doing.

140
00:07:46.259 --> 00:07:49.000
我们的现代JavaScript程序到处都是，
Our modern JavaScript programs are falling all over themselves,

141
00:07:49.000 --> 00:07:50.819
因为我们需要这些高阶模式，而且
because we need these higher order patterns, and

142
00:07:50.819 --> 00:07:54.000
我们没有足够的纪律来学习和实施它们。
we're not disciplined enough to learn them and implement them.

143
00:07:54.000 --> 00:07:56.569
我们只是继续做我们一直在做的事情，因为它总是有效的，而且
We just keep doing the same thing we've always done, because it always worked, and

144
00:07:56.569 --> 00:07:58.779
它总是有效的，而且总是有效的。
it always worked, and it always worked.

145
00:07:58.779 --> 00:08:03.259
这是对JavaScript能力的新基线的战斗号召
This is a call to arms to say the new baseline of competency as a JavaScript

146
00:08:03.259 --> 00:08:08.560
开发人员需要有一个更加复杂的战略和战术
developers is to have a much more sophisticated strategic and tactical

147
00:08:08.560 --> 00:08:12.439
接近你的并发管理，你的异步编程。
approach to your concurrency management, to your asynchronous programming.
