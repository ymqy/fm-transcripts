WEBVTT

1
00:00:04.089 --> 00:00:08.050
&gt；&gt；Kyle：练习二要求你做与我们在练习中做的完全相同的事情
&gt;&gt; Kyle: Exercise two calls for you to do the exact same thing as we did in exercise

2
00:00:08.050 --> 00:00:12.009
一，除了现在我们要用雷管，好吗？
one, except now we're gonna use thunks, okay?

3
00:00:12.009 --> 00:00:17.730
所以如果你在EX2中打开Read Me，我们有完全相同的设置。
So if you open up the Read Me in the EX2, we have the exact same set up.

4
00:00:18.859 --> 00:00:20.879
对你来说应该是一样的。
Should look the same to you.

5
00:00:20.879 --> 00:00:23.579
没有不同的复杂性。
No complexities different.

6
00:00:24.929 --> 00:00:28.699
但就是这一行，我代码中的第23行。
But it is this line right here, line 23 in my code.

7
00:00:28.699 --> 00:00:30.679
这就是我想引起你注意的。
That's the one I want to call your attention to.

8
00:00:30.679 --> 00:00:35.149
getFile函数是thunk构造函数。
The getFile function is your thunk constructor.

9
00:00:36.679 --> 00:00:38.549
GetFile需要生成thunk。
GetFile needs to produce a thunk.

10
00:00:40.100 --> 00:00:47.024
问题是，你的thunk应该是懒惰的，还是应该是活跃的？
The question is, should your thunk be lazy, or should your thunk be active?

11
00:00:47.024 --> 00:00:49.859
如果你的思维是懒惰的，我们会要求
If your thunk is lazy, are we going to be asking for

12
00:00:49.859 --> 00:00:52.298
文件并行是不是我们想要的方式？
files in parallel the way we want to or not?

13
00:00:52.298 --> 00:00:58.880
如果你的thunk是活跃的，会要求他们并行吗？
If your thunk is active, will be asking for them in parallel?

14
00:00:58.880 --> 00:01:02.780
好的，所以第一个任务，弄清楚怎么做。
Okay, so first task, figure out how to make the thunk.

15
00:01:04.750 --> 00:01:08.760
第二个任务，你可能真的想以相反的顺序完成这些任务，
And second task, which you may actually want to do these in reverse order,

16
00:01:08.760 --> 00:01:12.890
就是弄清楚我要如何使用这些东西来排序他们的输出？
is figure out how am I going to use those things to sequence their outputs?

17
00:01:14.689 --> 00:01:16.400
所以我给你五个。
So I'll give you five.

18
00:01:16.400 --> 00:01:19.055
让我们就八分钟来玩弄这个特技吧。
Let's call it eight minutes to play around with the stunt.

19
00:01:19.055 --> 00:01:21.500
记住我们这里没有使用任何图书馆，
Remember we're not using any libraries here,

20
00:01:21.500 --> 00:01:26.260
我们只是简单地以不同的方式在闭包中使用函数的概念。
we're just simply using the notions of function in closure in a different way.

21
00:01:26.260 --> 00:01:28.230
这里不需要任何全局变量。
You're not gonna need any global variables here.

22
00:01:28.230 --> 00:01:31.310
所以如果你沿着练习一所做的路线走下去，你就太难了。
So if you go down the route you did in exercise one, you're doing it too hard.

23
00:01:31.310 --> 00:01:34.890
我们看看你能想到什么。
We'll see what you come up with.

24
00:01:34.890 --> 00:01:36.870
&gt；&gt；扬声器2：快速问题。
&gt;&gt; Speaker 2: Quick question.

25
00:01:36.870 --> 00:01:39.502
他们问你是否跳过幻灯片40。
They're asking if you go over slide 40.

26
00:01:39.502 --> 00:01:41.054
&gt；&gt；Kyle：我确实看了40张幻灯片。
&gt;&gt; Kyle: I did go over slide 40.

27
00:01:41.054 --> 00:01:43.010
&gt；&gt；演讲者2：再说一遍，但你复习了吗？
&gt;&gt; Speaker 2: Again, but did you review it?

28
00:01:43.010 --> 00:01:44.158
&gt；&gt；Kyle：是的，我看过了。
&gt;&gt; Kyle: Yes I did review.

29
00:01:44.158 --> 00:01:45.719
&gt；&gt；扬声器2：好的，对不起。
&gt;&gt; Speaker 2: Okay sorry.

30
00:01:45.719 --> 00:01:46.840
&gt；&gt；Kyle：我可以再看一遍。
&gt;&gt; Kyle: I can review it one more time.

31
00:01:49.569 --> 00:01:53.460
在第七行中创建的函数是硬编码的
The function created in line seven is hard coded to know

32
00:01:53.460 --> 00:01:56.590
addAsync函数就是它将要调用的函数。
that the addAsync function is what it's going to call.

33
00:01:56.590 --> 00:01:59.879
它还知道它将要传递的三个东西中的两个。
And it also knows two of the three things that it's gonna pass in.

34
00:01:59.879 --> 00:02:02.459
它知道它会通过10分和15分，
It knows that it's going to pass in a ten and a 15,

35
00:02:02.459 --> 00:02:05.299
但它不知道它将传入什么回调。
but it doesn't know what callback it's going to pass in.

36
00:02:06.439 --> 00:02:10.930
所以它很难编码知道addAsync和10和15，它正在等待
So it's hard coded to know addAsync and ten and 15, and it's waiting for

37
00:02:10.930 --> 00:02:13.289
要参数化的回调。
callback to be parameterized.

38
00:02:13.289 --> 00:02:16.050
我们将第11行上的回调参数化。
We parameterize that call back on line 11.

39
00:02:16.050 --> 00:02:18.729
我们回传了一个电话给那个家伙。
We passed in a call back to that thunk.

40
00:02:18.729 --> 00:02:22.229
这就是用ten、15和调用addAsync函数的原因
That is what invokes the addAsync function with ten, 15, and

41
00:02:22.229 --> 00:02:23.449
我们传入的回调。
the callback we passed in.

42
00:02:25.670 --> 00:02:27.139
第二行设置超时，
Line two sets up a timeout,

43
00:02:27.139 --> 00:02:30.530
在一千毫秒之后，它调用传入的回调。
and after a thousand milliseconds it calls the callback passed in.

44
00:02:31.550 --> 00:02:34.610
传入10和15相加的值，
Passing in the values that are at the addition of ten and 15,

45
00:02:34.610 --> 00:02:36.740
值为25。
which is the value 25.

46
00:02:36.740 --> 00:02:40.240
然后返回到第11行，参数sum的值为25。
Which then comes back to line 11, the parameter sum has the value of 25.
