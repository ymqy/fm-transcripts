WEBVTT

1
00:00:00.000 --> 00:00:03.755
[音乐]
[MUSIC]

2
00:00:03.755 --> 00:00:07.024
&gt；&gt；Kyle：如果我们有可以是任意长度的东西，
&gt;&gt; Kyle: If we have something that could be an arbitrary length,

3
00:00:07.024 --> 00:00:11.839
作为JavaScript程序员，我们的GOO工具通常是一个列表，一个数组。
our go to tool as a JavaScript programmer is often a list, an array.

4
00:00:11.839 --> 00:00:16.800
如果我要填充我关心处理的URL列表
If I were to populate a list of the URLs that I cared about handling

5
00:00:16.800 --> 00:00:22.620
到一个数组中，然后我就可以立即访问
into a an array, I then immediately have access to

6
00:00:22.620 --> 00:00:28.140
那些函数式编程技术如映射和归约到变换，
those functional programming techniques like map and reduce to transform,

7
00:00:28.140 --> 00:00:31.120
在这张单子上写，排除这样的事情。
compose, exclude things like this on this list.

8
00:00:32.979 --> 00:00:39.179
让我们尝试将这个URL列表更改为其他内容。
Let's try to change this list of URLs to something else.

9
00:00:39.179 --> 00:00:42.229
也许我们应该让他们成为承诺的清单。
Maybe we should get them into being a list of promises.

10
00:00:43.729 --> 00:00:46.390
我们如何转变？
How do we transform?

11
00:00:46.390 --> 00:00:47.500
我们调用.map。
We call .map.

12
00:00:47.500 --> 00:00:51.380
map是将列表一对一转换的实用程序。
Map is the utility that will transform a list one to one.

13
00:00:51.380 --> 00:00:54.677
我们需要一个谓词函数，
And we're going to need a predicate function,

14
00:00:54.677 --> 00:00:58.725
它吸收了一些值，并给出了一个新的值。
which takes in some value and gives us a new value back out.

15
00:00:58.725 --> 00:01:01.677
有人想过这样的函数吗？
Anybody think of a function like that?

16
00:01:01.677 --> 00:01:06.340
获取文件功能怎么样？
How about the get file function?

17
00:01:06.340 --> 00:01:08.310
查看如何在和中获取单个值
See how it takes a single value in and

18
00:01:08.310 --> 00:01:11.159
返回为已转换的单个值OUT？
returns as a single value out that's been transformed?

19
00:01:11.159 --> 00:01:13.760
在这种情况下，围绕价值的承诺。
In this case a promise wrapped around the value.

20
00:01:13.760 --> 00:01:18.150
太好了，我们还知道它将立即进行Ajax调用。
Great, and we also know that it's going to go ahead make that AJAX call right away.

21
00:01:18.150 --> 00:01:20.079
不仅转化，而且
Not only does the transformation, but

22
00:01:20.079 --> 00:01:25.549
它还负责为我们并行提出所有这三个请求。
it also takes care of making all three of those requests in parallel for us.

23
00:01:25.549 --> 00:01:28.319
我们只需将getFile作为要映射的谓词传递即可。
We simply pass the getFile as our predicate to map.

24
00:01:29.480 --> 00:01:30.890
好极了。我们已经完成了第一步
Excellent. We've done the first step,

25
00:01:30.890 --> 00:01:32.319
这就是所谓的所有这些东西。
which is to call all these things.

26
00:01:32.319 --> 00:01:34.379
现在我们有了一份承诺清单。
And now we have a list of promises.

27
00:01:36.150 --> 00:01:39.590
它们都没有任何输出，与它们一起排序，
None of them have any outputs, sequenced in with them,

28
00:01:39.590 --> 00:01:41.780
而且它们没有被排序在一起。
and they're not sequenced together.

29
00:01:43.009 --> 00:01:46.990
我们说过承诺链只是一种实现一个承诺的方式
Well we talked about a promise chain is just a way to take one promise and

30
00:01:46.990 --> 00:01:52.719
从先前承诺的已解析处理程序返回它。
return it from the resolved handler of a previous promise.

31
00:01:52.719 --> 00:01:57.950
这是一种写承诺的方法，就是把它们连在一起。
That's a method of composing promises, is to chain them together.

32
00:01:58.990 --> 00:02:02.709
很好的构图是由我们的好朋友处理的还原功能。
Well composition is handled by our good friend the reduce function.

33
00:02:03.950 --> 00:02:09.250
如果我调用Reduce，Reduce需要两个参数，两个参数。
If I call reduce, reduce takes two parameters, two arguments.

34
00:02:09.250 --> 00:02:13.319
第一个是谓词函数，所以
The first one is the predicate function, so

35
00:02:13.319 --> 00:02:15.949
我们这里会有一个函数叫做，
we're gonna have a function here called,

36
00:02:15.949 --> 00:02:20.500
我们就叫它合并吧，或者我们可以叫它听起来更好的链。
let's just call it combine or maybe we'll call it chain that sounds better.

37
00:02:20.500 --> 00:02:23.670
我们称它为链实际上不，我要叫它联合。
We'll call it chain actually no, I'm gonna call it combine.

38
00:02:23.670 --> 00:02:25.170
在这里我变得超级优柔寡断
Here I am being super indecisive and

39
00:02:25.170 --> 00:02:26.939
我会告诉你为什么我决定不叫它链条。
I'll tell you why I decided not to call it chain.

40
00:02:28.430 --> 00:02:31.927
然后我们需要一个初始值，这是第二个参数
And then we are going to need an initial value that's the second argument that gets

41
00:02:31.927 --> 00:02:32.872
通过或减少。
passed or reduce.

42
00:02:34.520 --> 00:02:37.466
承诺链的初始值是多少？
What's a good initial value for a promise chain?

43
00:02:37.466 --> 00:02:42.240
一个已经解决的承诺怎么样。
How about an already resolved promise.

44
00:02:44.199 --> 00:02:48.180
你可以手动做到这一点，通过在这里做出承诺，
You could manually do that, by making a Promise here,

45
00:02:50.189 --> 00:02:55.719
它接收解析，并且实际上立即调用解析。
that receives a resolve, and actually calls the resolve right away.

46
00:02:57.360 --> 00:02:59.030
这是一个立竿见影的承诺。
That's an immediately resolved Promise.

47
00:03:00.250 --> 00:03:01.060
不会等待任何事情。
Doesn't wait on anything.

48
00:03:02.319 --> 00:03:03.710
原来有一种速记方法
Turns out there's a shorthand way for

49
00:03:03.710 --> 00:03:07.810
你们中的一些人可能在文档中查找过或看到过。
that, some of you might have looked that up or seen that in documentation.

50
00:03:07.810 --> 00:03:12.320
本机Promise API中内置了名为Promise.Resolve的速记。
There's a shorthand built into the native Promise API called Promise.resolve.

51
00:03:12.320 --> 00:03:15.710
Promise.Resolve创建已解决的承诺，并
Promise.resolve creates a resolved Promise and

52
00:03:15.710 --> 00:03:19.460
如果您将任何内容传递给它，它将使用该值解析承诺。
if you pass anything into it it resolves the Promise with that value.

53
00:03:19.460 --> 00:03:22.150
我们不关心这里的任何价值，我们只关心这样一个事实，
We don't care about any value here, we just care about the fact that,

54
00:03:22.150 --> 00:03:25.469
这是一个很好的初始值开始链接，所以
that's a good initial value to start chaining off of, so

55
00:03:25.469 --> 00:03:27.800
这是我们作为决心承诺的初始价值。
that's our initial value as a resolved Promise.

56
00:03:29.500 --> 00:03:33.370
现在，Combine需要两个参数和
Now, combine needs to take two arguments and

57
00:03:33.370 --> 00:03:37.949
我们所谓的那些当然，我认为更好的是改变这些的名称
what we call those of course, I think it's better to change the names of these

58
00:03:37.949 --> 00:03:41.500
参数，以适合您正在执行的操作的上下文，以便您的代码使
parameters to fit the context of what you're doing so that your code makes

59
00:03:41.500 --> 00:03:45.770
更有意义，而不是总是使用累加器和电流之类的东西。
more sense rather than always using accumulator and current or something.

60
00:03:47.960 --> 00:03:51.699
累加器在这里最合适的名称是什么？
What would the accumulator be called most appropriately here?

61
00:03:52.800 --> 00:03:53.620
我会称之为链条。
I would call it chain.

62
00:03:55.000 --> 00:03:57.250
这就是为什么我没有调用函数链，因为我意识到，
That's why I didn't call the function chain cuz I realized,

63
00:03:57.250 --> 00:03:59.759
我要打电话给我的蓄电器链。
I'm gonna call my accumulator chain.

64
00:03:59.759 --> 00:04:02.240
第一次调用这个谓词时，
The very first time this predicate is called,

65
00:04:02.240 --> 00:04:05.849
链只会是已经解决的初始值承诺。
the chain is just gonna be that already resolved initial value Promise.

66
00:04:06.930 --> 00:04:09.250
但它将继续被更多地和
But it's going to continue to be composed more and

67
00:04:09.250 --> 00:04:10.889
更多的链条，随着我们的前进。
more of that chain as we go along.

68
00:04:10.889 --> 00:04:15.020
我要调用我的累加器链，我要调用我的当前值。
I'm going to call my accumulator chain and I'm going to call my current value.

69
00:04:15.020 --> 00:04:17.540
公关，因为这是我正在处理的承诺。
PR for it's the Promise that I'm dealing with.

70
00:04:18.829 --> 00:04:23.310
有我的两个在一起，我的链子和我的公关，现在我该怎么写它们呢？
There's my two together, my chain and my PR, now how am I going to compose them?

71
00:04:23.310 --> 00:04:26.980
如果我们回想一下我们在练习三中所做的，你写第一个的方式
If we think back to what we did in exercise three, the way you compose one

72
00:04:26.980 --> 00:04:30.759
对另一个人的承诺是归还第一个人的第二个。
Promise to another was to return the second one from the first.

73
00:04:30.759 --> 00:04:35.319
我的链子需要一个。然后
My chain needs to have a .then

74
00:04:40.000 --> 00:04:46.040
&gt；&gt；Kyle：返回Pr。
&gt;&gt; Kyle: That returns the pr.

75
00:04:46.040 --> 00:04:50.980
新的行动产生了一个新的连锁承诺。
And that new operation has produced a new chained Promise.

76
00:04:50.980 --> 00:04:52.838
我需要从我的谓词中返回它。
I need to return that from my predicate.

77
00:04:56.850 --> 00:04:58.915
&gt；&gt；Kyle：现在代码将链接所有
&gt;&gt; Kyle: Now that code will chain all for

78
00:04:58.915 --> 00:05:03.535
无论许诺有多少，都在一起。
of the Promises together regardless of how many Promises there are.

79
00:05:03.535 --> 00:05:06.180
它将创造出一大串古老的承诺。
It will create a big old chain of Promises.

80
00:05:06.180 --> 00:05:07.629
这是链条的样子。
Here's what that chain would look like.

81
00:05:08.790 --> 00:05:14.877
它看起来像p1.then函数
It would look like p1.then function

82
00:05:14.877 --> 00:05:19.630
返回p2。然后函数，
return p2 .then function,

83
00:05:19.630 --> 00:05:23.062
返回p3，依此类推。
return p3 and so on.

84
00:05:23.062 --> 00:05:25.663
我们是去那里的路的一部分。
We're part of the way there.

85
00:05:25.663 --> 00:05:27.072
但我们错过了什么？
But what are we missing?

86
00:05:27.072 --> 00:05:30.519
我们没有将输出排序到链中。
We're not sequencing in the outputs into the chain.

87
00:05:31.610 --> 00:05:34.189
这些输出将去哪里？
Where are those outputs going to go?

88
00:05:34.189 --> 00:05:36.603
他们就在这里。
They're going to go right here.

89
00:05:43.290 --> 00:05:47.735
&gt；&gt；Kyle：现在我们将有一个，如果我把这个写出来。
&gt;&gt; Kyle: Now we're going to have a, if I were to write this out.

90
00:05:47.735 --> 00:05:54.764
我们有一个Promise.Resolve，是我们的初始值，
We have a Promise.resolve, is our initial value,

91
00:05:54.764 --> 00:05:58.769
.然后函数返回p1。
.then function return p1.

92
00:05:58.769 --> 00:06:03.617
你注意到我有立即的，然后输出。
And you notice I have the immediate .then output on it.

93
00:06:17.213 --> 00:06:21.709
&GT；&GT；Kyle：每个人都看到我是如何展开的，我们在Reduce中做了什么？
&gt;&gt; Kyle: Everybody see how I'm unrolling that, what we're doing in the reduce?

94
00:06:21.709 --> 00:06:24.781
这就是我们的Reduce中正在发生的事情的可视展开，所以
That's the visual unroll of what's happening in our reduce, so

95
00:06:24.781 --> 00:06:25.899
看起来很不错。
it looks pretty good.

96
00:06:28.699 --> 00:06:32.360
遗漏的一件事是我们没有最终的完整声明。
One thing that's missing is we don't have our complete statement on the end.

97
00:06:32.360 --> 00:06:34.428
我们降价的最终结果是什么？
What is the end result of our reduction?

98
00:06:34.428 --> 00:06:36.139
&gt；&gt；Speaker 2：单个值。
&gt;&gt; Speaker 2: A single value.

99
00:06:36.139 --> 00:06:37.718
&gt；&gt；Kyle：一个值，但它是什么？
&gt;&gt; Kyle: A single value but what is it?

100
00:06:40.279 --> 00:06:41.744
&GT；&GT；Kyle：这是我们的承诺链。
&gt;&gt; Kyle: It's our promise chain.

101
00:06:41.744 --> 00:06:43.829
我们能做些什么？
What can we do?

102
00:06:43.829 --> 00:06:48.495
只是简单地提出另一个。然后在我们的承诺的结尾，并且
Just simply put another .then on the end of our Promise, and

103
00:06:48.495 --> 00:06:50.795
输出完成消息。
output to complete message.

104
00:06:55.343 --> 00:06:57.084
凯尔：什么事？
&gt;&gt; Kyle: Yes?

105
00:06:57.084 --> 00:07:00.408
&gt；&gt；演讲者2：我们两个事件的顺序，返回承诺和
&gt;&gt; Speaker 2: The order for our two events, the returning the Promise and

106
00:07:00.408 --> 00:07:01.482
做输出。
doing the output.

107
00:07:01.482 --> 00:07:02.141
&gt；&gt；Kyle：嗯哼。
&gt;&gt; Kyle: Uh-huh.

108
00:07:02.141 --> 00:07:05.062
&gt；&gt；扬声器2：可能是相反的顺序，就像它不是我们以前的一样
&gt;&gt; Speaker 2: Could be in the opposite order like it wasn't our previous

109
00:07:05.062 --> 00:07:05.663
锻炼？
exercise?

110
00:07:05.663 --> 00:07:06.620
&gt；&gt；Kyle：不。
&gt;&gt; Kyle: No.

111
00:07:06.620 --> 00:07:10.043
因为如果我们按照之前的顺序做，这就是它会做的事情。
Because if we did it in the previous order, here's what that would do.

112
00:07:26.766 --> 00:07:29.180
&gt；&gt；Kyle：你发现问题了吗？
&gt;&gt; Kyle: Do you spot the problem?

113
00:07:32.110 --> 00:07:33.050
我们在这里放什么？
What are we out putting here?

114
00:07:35.470 --> 00:07:37.903
我们最初承诺的空值。
An empty value from our initial Promise.

115
00:07:37.903 --> 00:07:39.661
我们在这里输出的是什么？
What are we outputting here?

116
00:07:39.661 --> 00:07:40.762
P1.
p1.

117
00:07:40.762 --> 00:07:41.942
我们在这里放什么？
What are we out putting here?

118
00:07:41.942 --> 00:07:43.170
P2。
p2.

119
00:07:43.170 --> 00:07:44.567
谁在输出p3？
Who's outputting p3?

120
00:07:44.567 --> 00:07:49.310
订购是绝对必要的。
The ordering is absolutely necessary.

121
00:08:01.004 --> 00:08:02.810
凯尔：好的。
&gt;&gt; Kyle: All right.

122
00:08:02.810 --> 00:08:05.930
这是一个我们可以编写的实用程序。
That's a utility that we could write.

123
00:08:05.930 --> 00:08:08.819
您不会想一遍又一遍地编写代码，您的地图和
You wouldn't want to write that code over and over again, your maps and

124
00:08:08.819 --> 00:08:09.740
你的缺点。
your reduces.

125
00:08:09.740 --> 00:08:13.687
但这是一个实用程序，我们可以将其封装到一个实用程序中，然后传递给它一个数组
But it's a utility we could wrap that up into a utility where we pass it an array

126
00:08:13.687 --> 00:08:17.151
我们告诉它将所有这些响应排序在一起
of values and we tell it to sequence all these responses together and

127
00:08:17.151 --> 00:08:20.338
然后我们可以在整个程序中重用该实用程序。
then we could reuse that utility all throughout our program.

128
00:08:25.439 --> 00:08:29.502
&gt；&gt；Kyle：能够理解我们的小帮手朋友的价值
&gt;&gt; Kyle: The value of being able to understand our little helper friends like

129
00:08:29.502 --> 00:08:33.850
映射和减少并发展一种问题的本能，例如，
map and reduce and developing an instinct for asking questions like,

130
00:08:33.850 --> 00:08:37.345
等等，我基本上是在重复做某件事，
wait I'm fundamentally doing something repetitively,

131
00:08:37.345 --> 00:08:41.788
为什么不直接将其放入列表上下文中，让工具为我重复它呢？
why not just put that into a list context and let the tools repeat it for me?

132
00:08:41.788 --> 00:08:43.982
有时这是一个for循环，但是
Sometimes that's a for loop, but

133
00:08:43.982 --> 00:08:48.690
有时，更高阶的模式(如map reduce)将帮助我们解决问题。
sometimes an even higher order pattern like a map reduce will help us out.

134
00:08:51.961 --> 00:08:54.049
&GT；&GT；Kyle：关于练习四有什么问题吗？
&gt;&gt; Kyle: Any questions about exercise four?

135
00:08:56.784 --> 00:09:01.549
&gt；&gt；演讲者3：他们问的一件事是你是否履行了所有的承诺。
&gt;&gt; Speaker 3: One thing they're asking if you go down to all the Promise.

136
00:09:01.549 --> 00:09:05.038
你会给所有这些匿名函数起什么名字？
What would you name all of those anonymous functions?

137
00:09:05.038 --> 00:09:08.664
&gt；&gt；Kyle：[笑]是的，在我们这个愚蠢的例子中，
&gt;&gt; Kyle: [LAUGH] Yeah well in our silly example here,

138
00:09:08.664 --> 00:09:14.716
我们真的没有太多的上下文来给我们好的命名。
we don't really have a lot of context to give us good naming for things.

139
00:09:14.716 --> 00:09:21.190
如果我要命名这个匿名函数，我会说，chainP1，chainP2，
If I were gonna name this anonymous function I would say, chainP1, chainP2,

140
00:09:21.190 --> 00:09:27.666
链接P3，因为我将确切地描述该函数不再做什么或
chainP3 because I would be describing exactly what that function does no more or

141
00:09:27.666 --> 00:09:33.519
更少，它所做的是将P2，P1，P2和P3链成链。
less, and what it does is to chainP2, P1, P2 and P3 into the chain.

142
00:09:33.519 --> 00:09:36.519
在这里，如果我想
Up here, if I wanted

143
00:09:36.519 --> 00:09:41.240
要命名该匿名函数，我只需将其命名为chain p，chainPr。
to name that anonymous function I just call it chain p, chainPr.

144
00:09:44.490 --> 00:09:48.654
我的本能是总是试图找到一些关于这东西正在做的事情的描述，
My instinct is to always try to find some description for what the thing is doing,

145
00:09:48.654 --> 00:09:53.144
即使这是一个非常通用的描述，这仍然比匿名这个词好。
even if it's a very generic description, that still better than the word anonymous.

146
00:10:04.535 --> 00:10:06.663
&GT；&GT；Kyle：关于这个练习还有其他问题吗？
&gt;&gt; Kyle: Any other questions about the exercise?

147
00:10:06.663 --> 00:10:08.985
是啊。
Yes.

148
00:10:08.985 --> 00:10:12.096
&gt；&gt；扬声器4：我们是获得更高的性能[INAUDIBLE]还是
&gt;&gt; Speaker 4: Do we get more performance [INAUDIBLE] or

149
00:10:12.096 --> 00:10:16.149
执行此映射然后降低或的任何性能
any performance doing this map and then reduce of or

150
00:10:16.149 --> 00:10:21.427
取而代之的是我们在前面的练习中做的那个，我们和
instead having the one we did in the previous exercises where we and

151
00:10:21.427 --> 00:10:25.591
为了给你，你的诺言分开[INAUDIBLE]。
to give the, you the Promises separate [INAUDIBLE].

152
00:10:25.591 --> 00:10:29.259
&GT；&GT；Kyle：所以问题是，是否真的有性能差异。
&gt;&gt; Kyle: And so the question is, is there a performance difference not really.

153
00:10:29.259 --> 00:10:33.557
没有真正的性能差异，这是这里的主要内容
There's no real performance difference this is the primary thing here is

154
00:10:33.557 --> 00:10:34.889
功能。
functionality.

155
00:10:34.889 --> 00:10:37.740
这是一种机制
This is a mechanism by which

156
00:10:37.740 --> 00:10:41.789
我们可以有一个任意长的URL列表来编织在一起。
we can have an arbitrarily long list of URLs to weave together.

157
00:10:41.789 --> 00:10:46.070
而在前面的示例中，它固定为3。
Whereas in the previous example, it's fixed at three.

158
00:10:46.070 --> 00:10:47.330
因为我们的写作方式。
Because of the way that we wrote it.

159
00:10:47.330 --> 00:10:48.860
它更多的是功能而不是性能。
It's more functionality than performance.

160
00:10:51.779 --> 00:10:56.038
&gt；&gt；Kyle：是的，就像一般的提醒一样，如果你有什么问题
&gt;&gt; Kyle: Yeah, just as a general reminder, if you're having problems with something

161
00:10:56.038 --> 00:10:59.841
我已经打了，这是完全可能的，有时我搞砸了
that I've typed, it is entirely possible that sometimes I flub up and

162
00:10:59.841 --> 00:11:01.789
我想念打字什么的。
I miss type something or whatever.

163
00:11:01.789 --> 00:11:03.460
但是练习档案
But the exercise files,

164
00:11:03.460 --> 00:11:07.720
练习解决方案文件已经过定期测试，它们应该可以工作。
the exercise solution files have been regularly tested they should work.

165
00:11:07.720 --> 00:11:10.600
对照练习文件中的内容检查自己。
Check yourself against what you've got in the exercise file.

166
00:11:10.600 --> 00:11:13.039
那通常是一个很好的地方去找出哪里有，
That's usually a good place to try to ferret out where there's,

167
00:11:13.039 --> 00:11:13.679
可能会有问题。
there might be an issue.
