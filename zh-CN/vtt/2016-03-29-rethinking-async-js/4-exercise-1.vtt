WEBVTT

1
00:00:00.000 --> 00:00:04.097
[音乐]
[MUSIC]

2
00:00:04.097 --> 00:00:06.389
&gt；&gt；Kyle：所以我们要做练习1，好的。
&gt;&gt; Kyle: So we're gonna do Exercise 1 okay.

3
00:00:06.389 --> 00:00:08.619
现在让我引导你们练习1和
Now let me orient you to Exercise 1 and

4
00:00:08.619 --> 00:00:12.550
你现在得到这个方向是非常重要的。
it's really important you get this orientation solid right now.

5
00:00:12.550 --> 00:00:17.219
因为我们要从头到尾重温这个练习，一直到七，一，
Because we are going to revisit this same exercise all the way through seven, one,

6
00:00:17.219 --> 00:00:20.170
二，三，四，五，六，七是完全相同的问题域。
two, three, four, five, six, seven is the exact same problem domain.

7
00:00:21.260 --> 00:00:25.350
以不同的异步模式重新访问，因此从练习1开始。
Revisited in different asynchronous patterns so starting out with Exercise 1.

8
00:00:25.350 --> 00:00:29.089
让我们打开ex1.js中的read me。
Let's open up the Read Me in the ex1.js.

9
00:00:29.089 --> 00:00:35.630
让我们试着更加熟悉这个练习要求我们做什么。
Let's try to get more familiar with what this exercise is asking us to do.

10
00:00:35.630 --> 00:00:40.630
老实说，它要求我们做的是我试图表达一个漂亮的
And honestly what it's asking us to do is I've attempted to articulate a pretty

11
00:00:40.630 --> 00:00:44.820
我们遇到的常见模式，特别是在系统的用户界面中。
common pattern that we run into especially in the user interface of our systems.

12
00:00:46.030 --> 00:00:49.450
你要做的是协调
What you're going to be asked to do is coordinate

13
00:00:49.450 --> 00:00:52.984
对一组虚假Ajax调用的响应。
the responses to a set of fake AJAX calls.

14
00:00:52.984 --> 00:00:56.045
伪造Ajax调用，因为我不想让您担心设置自己的服务器或
Fake AJAX calls cuz I don't want you to worry about setting up your own servers or

15
00:00:56.045 --> 00:00:59.335
任何东西，所以它会假装做Ajax。
any of the stuff so it's gonna pretend to do AJAX.

16
00:00:59.335 --> 00:01:02.725
我在那里有随机的延迟，所以每次你运行你的程序
And I've got random delays in there such that every time you run your program

17
00:01:02.725 --> 00:01:04.674
你会从中得到不同的行为。
you're gonna get different behavior out of it.

18
00:01:04.674 --> 00:01:06.894
就像你在现实世界里一样，好吗？
Just like you would in the real world, okay?

19
00:01:06.894 --> 00:01:09.924
但这些都是假的AJAX，它们实际上并不是在进行网络呼叫，但是
But these are fake AJAX they're not actually making network calls but

20
00:01:09.924 --> 00:01:11.784
实际上这对我们来说是不是假的并不重要。
it actually doesn't matter to us whether it's fake.

21
00:01:11.784 --> 00:01:17.724
对我们来说重要的是我们想假装我们在打电话
What matters to us is that we want to pretend as if we're making calls and

22
00:01:17.724 --> 00:01:21.983
以相同的方式响应序列。
respond to the sequence of responses in a same way.

23
00:01:21.983 --> 00:01:26.156
我们想要回应的方式是我们会要求所有三个人
And the way we want to respond to that is we're going to request all three of them

24
00:01:26.156 --> 00:01:28.409
同时又是平行的。
at the same time aka in parallel.

25
00:01:28.409 --> 00:01:31.609
我们知道我们真的应该使用并发这个词，但是
We know we really should use the term concurrent but

26
00:01:31.609 --> 00:01:35.299
同时我们想在同一时间做出同样的三个反应，好的，
in parallel we want to make the same three responses at the same time, all right,

27
00:01:35.299 --> 00:01:37.240
同样通过请求，同时。
same through request, at the same time.

28
00:01:37.240 --> 00:01:44.879
现在，当我们从file1获得响应时，我们希望立即打印它。
Now, when we get a response back from file1 we want to print it right away.

29
00:01:44.879 --> 00:01:49.810
事实上，如果我们得到了file1和file2，但file3仍在等待，
In fact, if we get file1 and file2 back, but file3 is still waiting,

30
00:01:49.810 --> 00:01:51.829
我们希望立即打印file1和file2。
we want to print file1 and file2 right away.

31
00:01:51.829 --> 00:01:55.229
我们想尽快提交，为什么？
We want to render them as soon as possible, why?

32
00:01:55.229 --> 00:01:58.710
用户对性能的感知。
User perception of performance.

33
00:01:58.710 --> 00:02:01.959
如果我们一直等到，我们在印刷之前就回来了，
If we waited until all through, we were back before we printed them,

34
00:02:01.959 --> 00:02:03.819
用户会感觉到系统变慢了。
the user is going to feel like the system is slower.

35
00:02:03.819 --> 00:02:07.510
但是如果我们循序渐进地跑或者不管我们有什么，他们会觉得
But if we progressively run or whatever we have they're going to feel like it's

36
00:02:07.510 --> 00:02:12.310
更快，这是体验用户感知的一个非常重要的组成部分。
faster that's a really important component of experiences user perception.

37
00:02:12.310 --> 00:02:16.159
即使花费相同的时间，感知也是重要的，但是
Even if it takes the same amount of time the perception is important but

38
00:02:16.159 --> 00:02:17.469
一条额外的皱纹，
one additional wrinkle,

39
00:02:17.469 --> 00:02:20.039
也就是说，我想确保这些文件按正确的顺序打印。
which is I want to make sure that those files print in the correct order.

40
00:02:21.370 --> 00:02:23.509
因此，如果我File2立即返回并且
So if I file2 comes back right away and

41
00:02:23.509 --> 00:02:27.319
File1仍处于挂起状态，请不要打印File2。
file1 is still pending, don't print file2 yet.

42
00:02:27.319 --> 00:02:29.759
等到file1到达那里，然后打印这两个文件。
Wait until file1 gets there, and then print both of them.

43
00:02:31.060 --> 00:02:35.000
所以我们想要做的就是尽快按正确的顺序渲染。
So what we're wanting to do is render ASAP but in the proper order.

44
00:02:36.430 --> 00:02:39.229
你看，这里有一点扭曲，这是故意的
You see, there's a little bit of a twist here and that's intentional and

45
00:02:39.229 --> 00:02:44.329
这是对用户界面设计中一种非常常见的模式的概括陈述。
that's a generalized statement of a pretty common pattern in user interface design.

46
00:02:44.329 --> 00:02:45.870
并行地做多件事，
Doing multiple things in parallel,

47
00:02:45.870 --> 00:02:48.770
等待他们回来，协调他们的反应，
waiting for them to come back, coordinating their responses,

48
00:02:48.770 --> 00:02:53.060
尽快做出反应，但要确保事情按照相同的顺序发生。
responding as soon as possible but making sure things happen in a same order.

49
00:02:53.060 --> 00:02:55.770
这就是这个练习要求你做的。
That's what this exercise calls for you to do.

50
00:02:55.770 --> 00:02:58.800
因此，让我将您定向到ex1.js。
So let me orient you to ex1.js.

51
00:02:58.800 --> 00:03:01.810
你注意到我有我的假AJAX，它是从
You notice I have my fake AJAX, it's mapping from

52
00:03:01.810 --> 00:03:06.289
URL喜欢文件一到一些内容，我在那里有一些随机延迟。
URL like file one to some contents and I've got some random delay in there.

53
00:03:06.289 --> 00:03:10.340
我有一个输出实用程序，它是控制台上的一个方便的包装器
I've got an output utility which is a convenient wrapper on the console along

54
00:03:10.340 --> 00:03:11.786
供你使用。
for you to use.

55
00:03:11.786 --> 00:03:16.240
这是我的getFile函数，它进行虚假的Ajax调用和
Here's my getFile function it makes that fake AJAX call and

56
00:03:16.240 --> 00:03:20.150
这是你需要开始弄清楚一些代码的地方，因为
this is the part where you need to start figuring out some code because

57
00:03:20.150 --> 00:03:23.319
并行调用getFile三次非常容易。
it's pretty easy to call getFile three times in parallel.

58
00:03:23.319 --> 00:03:28.579
我免费提供给你，但问题不是如何协调请求。
I gave you that for free but the question is not how to coordinate the requests.

59
00:03:29.659 --> 00:03:30.319
问题是
The question is,

60
00:03:30.319 --> 00:03:34.960
我如何正确地协调回应，这里有一些提示给你。
how do I properly coordinate the responses and here is some hints for you.

61
00:03:34.960 --> 00:03:38.500
你会得到响应，因为随机线程可以
You're gonna have responses coming back, because the randomized threads you can

62
00:03:38.500 --> 00:03:40.340
让他们按任何特定的顺序回来。
have them come back in any particular order.

63
00:03:41.379 --> 00:03:43.099
他们中的一些人可能回来得太早了。
Some of them might come back too early.

64
00:03:43.099 --> 00:03:46.180
这意味着我们需要一些东西来保持
Which means we're going to need to have something hold onto

65
00:03:46.180 --> 00:03:47.360
一些国家的一段时间。
some state for a while.

66
00:03:48.689 --> 00:03:51.620
您需要某种全局变量或对象或数组或
You need some sort of global variable or object or array or

67
00:03:51.620 --> 00:03:54.710
如果你还没有准备好打印这些回复，你可以拿着它们。
something to hold on the responses in case you're not ready to print them.

68
00:03:56.659 --> 00:04:01.949
你需要弄清楚所有这些共享的回调或者
And you need to figure out of all all these callbacks sharing over that or

69
00:04:01.949 --> 00:04:03.550
协调该共享状态和
coordinating over that shared state and

70
00:04:03.550 --> 00:04:06.729
弄清楚什么时候可以打印一些东西，并且只打印一次。
figuring out when it's okay to print something and only printing it once.

71
00:04:06.729 --> 00:04:10.849
好的，所以我们将采取大约我说的五个，我们将
All right, so we're going to take about I said five, we'll

72
00:04:10.849 --> 00:04:13.729
花十分钟，因为我想确保每个人都在玩这个。
take ten minutes because I wanna make sure everybody plays around with this.

73
00:04:13.729 --> 00:04:16.829
我们会花十分钟，然后下午休息一下
We'll take the ten minutes and then we are gonna take an afternoon break

74
00:04:16.829 --> 00:04:18.920
过了十分钟，我们会回来的。
after the ten minutes, so we will come back.

75
00:04:18.920 --> 00:04:20.029
讨论解决方案并
Talk through the solution and

76
00:04:20.029 --> 00:04:22.779
那就是我们下午休息的时间了。
then that will be the time that we take our afternoon break.

77
00:04:22.779 --> 00:04:26.850
但如果你愿意，我想让你玩弄一下回拨的痛苦
But I want you to play around with the pain of callbacks if you will

78
00:04:28.029 --> 00:04:32.649
通过理解做应该是一种简单用例的事情有多难。
by understanding just how hard it is to do what should be sort of a simple use case.

79
00:04:32.649 --> 00:04:36.300
当你必须自己管理所有状态时，这实际上是相当困难的
It's actually pretty difficult when you have to manage all that state yourself

80
00:04:36.300 --> 00:04:36.810
通过回拨。
through callbacks.
