WEBVTT

1
00:00:00.000 --> 00:00:03.500
[音乐]
[MUSIC]

2
00:00:03.500 --> 00:00:07.440
&gt；&gt；Kyle Simpson：成员来自反应侧的发泄朋友。
&gt;&gt; Kyle Simpson: Member are from a vent friend from the reactive side.

3
00:00:07.440 --> 00:00:10.390
下面是我们如何设置一个监听佛法通风口的事件。
Here's how we could set up an event that listens for Dhamma vents.

4
00:00:10.390 --> 00:00:12.689
我的意思是一个倾听支配地位的频道。
I mean a channel that listens for dominance.

5
00:00:12.689 --> 00:00:17.379
我在第二行建立了一个通道，我给它附加了一个点击处理程序，然后
I set up a channel on line two I attach a click handler to it and

6
00:00:17.379 --> 00:00:21.089
您注意到第4行，我调用PUT Async。
you notice on line 4, I call put Async.

7
00:00:21.089 --> 00:00:22.920
为什么我不调用PUT？
Why am I not calling put?

8
00:00:22.920 --> 00:00:25.809
嗯，因为我现在不在发电机里。
Well, cuz I'm not inside of a generator right now.

9
00:00:25.809 --> 00:00:29.030
我在单击处理程序中，这是一个普通的普通函数。
I'm inside of a click handler, which is a plain old normal function.

10
00:00:30.329 --> 00:00:34.740
如果我想听，putAsync会给我一个承诺
That putAsync would return me a Promise if I wanted to listen to be

11
00:00:34.740 --> 00:00:36.590
告诉我卖出已经完成了。
told that the put had completed.

12
00:00:36.590 --> 00:00:38.689
但也许我不在乎它是否完成。
But maybe I don't care whether it completes.

13
00:00:38.689 --> 00:00:42.670
我只是将事件对象放入通道。
I'm just gonna put the event object into the channel.

14
00:00:42.670 --> 00:00:47.570
然后有一个真正的合法的围棋程序等待听到
And then there is a real legitimate go routine that's waiting to hear for

15
00:00:47.570 --> 00:00:50.780
12号线上的信息，他试图从那个频道获取。
that message on line 12 he's trying to take from that channel.

16
00:00:50.780 --> 00:00:54.554
所以他只是在一个真正的循环中旋转，每次你点击它或
So he just spinning in a while true loop and each time you click that or

17
00:00:54.554 --> 00:00:56.158
每次你做那件事。
each time you do that event.

18
00:00:56.158 --> 00:00:59.530
我要去，我要得到通知，因为我能够
I'm going to take I'm going to get notified by that by being able to take

19
00:00:59.530 --> 00:01:01.685
我要把它打印出来。
from the channel and I'm gonna print it out.

20
00:01:01.685 --> 00:01:03.792
所以我在做什么事，小老鼠。
So what event am I doing, mousemove.

21
00:01:03.792 --> 00:01:08.512
但这意味着每次当我移动光标时，mousemove事件都会触发
But what this means is every time the mousemove event fires as I move my cursor

22
00:01:08.512 --> 00:01:13.159
在这个元素的周围，我将通过通道发送一条消息
around on this element, I'm gonna send a message down the channel that's

23
00:01:13.159 --> 00:01:17.180
事件对象并打印出控制台中的x，y位置。
the event object and print out the x, y location in the console.

24
00:01:18.849 --> 00:01:23.027
所以我们要通过激发我们的事件来适应用户界面元素
So we gonna adapt to user interface elements by having our events fire and

25
00:01:23.027 --> 00:01:24.884
把事情往下推。
pushing things down a channel.

26
00:01:24.884 --> 00:01:29.582
第4行看起来与我们对Observables所做的非常相似吗？
Does line 4 look an awful lot like what we did with observables?

27
00:01:29.582 --> 00:01:32.930
我们有一条小溪，我们将事件推入一条小溪
We had a stream and we were pushing events into a stream and

28
00:01:32.930 --> 00:01:37.939
另一个人正在把这些事件从流水中拿走，并观察它们。
somebody else was taking the events off the stream and observing them.

29
00:01:37.939 --> 00:01:39.810
是非常相似的概念。
Is very similar concepts here.

30
00:01:39.810 --> 00:01:42.990
我们在这里建模的主要区别是
The major difference between what we're modeling here and

31
00:01:42.990 --> 00:01:49.990
我们用可观察到的主要差异建模的是背压，因为我们
what we model with observables major difference is back pressure, cuz we

32
00:01:49.990 --> 00:01:54.219
我可以模型，我不希望你给我任何其他东西，直到我准备好接受它。
can model that I don't want you to send me anything else until I'm ready to take it.

33
00:01:54.219 --> 00:01:55.700
那是免费的。
That comes for free.

34
00:01:55.700 --> 00:01:56.930
我们不需要做任何额外的工作。
We don't have to do any extra work.

35
00:01:56.930 --> 00:02:01.060
我们不需要将我们的可观察到的从热转换为冷来表示这一点，或者
We don't have to convert our observable from hot to cold to signal that, or

36
00:02:01.060 --> 00:02:02.359
任何像那样疯狂的事情。
anything crazy like that.

37
00:02:02.359 --> 00:02:07.990
我们只是不从频道里拿，那就是
We just don't take from the channel and that's

38
00:02:07.990 --> 00:02:12.705
自动内置背压。&gt；&gt；扬声器2：SO
an automatic built in back pressure. &gt;&gt; Speaker 2: So

39
00:02:12.705 --> 00:02:17.603
当你做的时候，你会得到最近的鼠标事件吗？
when you do take would you get the most recent mouse event?

40
00:02:17.603 --> 00:02:21.969
或者你会得到它？&gt；&gt；Kyle Simpson：是的，在这种情况下？
Or would you get it? &gt;&gt; Kyle Simpson: Yeah, in this case?

41
00:02:21.969 --> 00:02:22.610
&gt；&gt；扬声器2：是的。
&gt;&gt; Speaker 2: Yeah.

42
00:02:22.610 --> 00:02:23.348
&gt；&gt；Kyle Simpson：每次活动
&gt;&gt; Kyle Simpson: Every time the event

43
00:02:23.348 --> 00:02:25.655
大火，我们要往溪流里放点东西。
fires, we're going to be putting something into the stream.

44
00:02:25.655 --> 00:02:28.974
所以你会以同样快的速度，他们可能会更快地堆积起来。
So you'd be taking them as fast, and they could be piling up faster.

45
00:02:28.974 --> 00:02:32.359
但是您注意到我们这里没有任何超时，所以我们将把它们当作
But you notice we don't have any timeouts here, so we're going to take them as

46
00:02:32.359 --> 00:02:33.593
尽可能快。&gt；&gt；扬声器2：SO
fast as we possibly can. &gt;&gt; Speaker 2: So

47
00:02:33.593 --> 00:02:36.894
放置putAsync然后覆盖前一个，
putting putAsync then overriding the previous one,

48
00:02:36.894 --> 00:02:38.960
是这个想法吗？&gt；&gt；Kyle Simpson：不是。
is that the idea? &gt;&gt; Kyle Simpson: No.

49
00:02:38.960 --> 00:02:40.115
&gt；&gt；扬声器2：如果您不匹配每个
&gt;&gt; Speaker 2: If you're not matching every

50
00:02:40.115 --> 00:02:42.429
单人，对吗？&gt；&gt；Kyle Simpson：所以每次
single one, right? &gt;&gt; Kyle Simpson: So every time it's going

51
00:02:42.429 --> 00:02:47.210
试着放到频道上，它会说我还不能放到频道上
to try to put onto the channel, it's going to say I can't put onto the channel yet

52
00:02:47.210 --> 00:02:50.060
因为有人还没准备好接受。
because somebody is not ready to take it yet.

53
00:02:50.060 --> 00:02:53.840
所以我会，假设发生了一堆鼠标移动，
So I'm going to have, let's say a bunch of mouse moves happened,

54
00:02:53.840 --> 00:02:58.599
100次鼠标移动会发生，但围棋例程从未触发过一次抓取。
a 100 mouse moves happen, but the go routine had never fired a take yet.

55
00:02:58.599 --> 00:03:01.520
我有100个单独的等待承诺
I have 100 separate waiting Promises that were all

56
00:03:01.520 --> 00:03:04.340
为了试图推动他们的活动顺流而下，但是
in order going to try to push their event down the stream but

57
00:03:04.340 --> 00:03:08.430
直到第一次拍摄发生之前，这些事件都没有被放入流中。
none of those events had been put on the stream yet until the first take happens.

58
00:03:11.030 --> 00:03:14.310
所以如果我移动鼠标真的很快，然后这个围棋例程就会发生。
So if I move my mouse real fast and then this go routine happen.

59
00:03:14.310 --> 00:03:16.670
他会把所有这些事件都打印出来，全部100个都打印出来。
He would get all of those events and print out all 100 of them.

60
00:03:18.710 --> 00:03:19.979
这不是丢弃任何事件。
That's not throwing any events away.

61
00:03:22.900 --> 00:03:26.400
重要的是要注意，这里的一些内容没有映射
It's important to note that some of the things here don't map

62
00:03:26.400 --> 00:03:30.750
完全可以观察到，例如丢弃我们不关心的消息
perfectly to observable so for example throwing away messages that we don't care

63
00:03:30.750 --> 00:03:33.259
关于你必须使用像alts这样的东西。
about you're going have to use something like alts.

64
00:03:33.259 --> 00:03:37.639
如果你想要有你不能拥有的频道的概念
If you want this notion of being able to have channels that you're not

65
00:03:37.639 --> 00:03:40.949
你正在发送的东西，没有人在另一端听。
that you're sending stuff down that nobody is on the other end listening to.

66
00:03:40.949 --> 00:03:43.650
您可以使通道具有缓冲模式，因此
You can make channels into having a buffering mode so

67
00:03:43.650 --> 00:03:46.000
通道可以具有多于缓冲区大小1的缓冲区。
channels can have more than buffer size one.

68
00:03:46.000 --> 00:03:47.509
所以你可以让它们缓冲
So you could make them buffered and

69
00:03:47.509 --> 00:03:50.432
说我想在开始听之前花十个这样的时间。
say I want to take ten of that sort of time before I start listening.

70
00:03:50.432 --> 00:03:52.848
很多变化。
Lots of variations.

71
00:03:59.882 --> 00:04:00.812
&gt；&gt；Kyle Simpson：只是非常快，
&gt;&gt; Kyle Simpson: Just real quickly,

72
00:04:00.812 --> 00:04:01.806
给你看看，CSP。
just show you, CSP.

73
00:04:01.806 --> 00:04:05.200
我再次将相同的机制移植到异步中，所以
I ported the same mechanism into asynquence, again, so

74
00:04:05.200 --> 00:04:08.520
你不必去学习其他图书馆。
you don't have to go learn some other library.

75
00:04:08.520 --> 00:04:10.150
您可以使用相同的库完成所有这些操作。
You can do it all with the same library.

76
00:04:12.199 --> 00:04:13.729
你把围棋程序放到Runner里。
You put go routines into runner.

77
00:04:14.960 --> 00:04:15.469
你就是这么做的。
That's how you do it.

78
00:04:16.769 --> 00:04:20.620
所以我有ASQ。，基本上是ASQ。
So I have ASQ., basically ASQ.

79
00:04:20.620 --> 00:04:25.490
在你已经看到的每一个东西面前。
In front of every one of those things that you've already seen.

80
00:04:25.490 --> 00:04:29.519
它与库中的API完全相同，但名称空间具有ASQ。
It's the exact same APIs that are in the library but the namespace has ASQ.

81
00:04:29.519 --> 00:04:30.389
当着他们所有人的面。
in front of all of them.

82
00:04:32.009 --> 00:04:33.511
否则，这是完全相同的概念。
Otherwise, it's exactly the same concept.

83
00:04:44.995 --> 00:04:48.120
&gt；&gt；Kyle Simpson：我几乎跳过了一个重要的细节。
&gt;&gt; Kyle Simpson: I almost skipped over an important detail.

84
00:04:48.120 --> 00:04:50.790
还记得你之前问过关于全局变量的问题吗？
Remember you were asking earlier about global variables.

85
00:04:50.790 --> 00:04:53.090
我不喜欢有全局变量的概念。
I don't like the notion of having global variables.

86
00:04:53.090 --> 00:04:56.079
所以我自动为每个围棋程序创建了一个频道。
So I automatically created a channel for each go routine.

87
00:04:56.079 --> 00:05:00.139
他们都可以参考创建的一个通道。
There is one channel created that they all get reference to.

88
00:05:00.139 --> 00:05:04.175
因此它们自动至少有一个可以在其上进行通信的通道。
So they automatically have at least one channel that they can all communicate on.

89
00:05:04.175 --> 00:05:07.060
如果你想制作更多的频道，你可以制作频道
And if you wanna make more channels you can make channels and

90
00:05:07.060 --> 00:05:08.449
让他们通过频道。
send them over the channel.

91
00:05:09.560 --> 00:05:11.238
所以你根本不需要使用任何全局变量。
So you don't have to use any global variables at all.

92
00:05:17.339 --> 00:05:20.468
这是我的实现与其他实现的一个不同之处。
That's one difference with my implementation versus the others.

93
00:05:20.468 --> 00:05:21.605
&gt；&gt；扬声器3：以防万一，
&gt;&gt; Speaker 3: In case,

94
00:05:21.605 --> 00:05:25.980
此ch是免费创建的或-&gt；&gt；Kyle Simpson：它是创建的
this ch is created for free or- &gt;&gt; Kyle Simpson: It's created

95
00:05:25.980 --> 00:05:28.800
由异步用户自动完成。&gt；&gt；扬声器3：不是在其他地方创建的？
automatically by async ones. &gt;&gt; Speaker 3: Not created somewhere else?

96
00:05:28.800 --> 00:05:30.418
&gt；&gt；Kyle Simpson：不，它是创建的，传入的
&gt;&gt; Kyle Simpson: No it's created passed in

97
00:05:30.418 --> 00:05:31.009
为了你。
for you.

98
00:05:34.909 --> 00:05:38.009
因为假设每个人都需要至少一个通道
Because the assumption is every body is gonna need at least one channel so

99
00:05:38.009 --> 00:05:41.050
让我们去创造想给你它，而不是让你自己。
let's go and create want to give it to you, instead of making you make your own.
