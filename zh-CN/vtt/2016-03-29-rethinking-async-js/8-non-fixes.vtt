WEBVTT

1
00:00:00.000 --> 00:00:04.203
[音乐]
[MUSIC]

2
00:00:04.203 --> 00:00:07.629
&gt；&gt；Kyle：有一堆使用回调尝试过的非修复。
&gt;&gt; Kyle: There's a bunch of Non Fixes that have been attempted with callbacks.

3
00:00:07.629 --> 00:00:11.539
我称它们为非修复，因为它们试图修复，实际上什么也做不了，只是
I call them Non Fixes cuz they're attempts at fixing which actually did nothing but

4
00:00:11.539 --> 00:00:12.400
让事情变得更糟。
make it worse.

5
00:00:13.689 --> 00:00:20.519
例如，在回调世界中，我们发明了这种拆分回调的模式。
So for example, in the callback world we invented this pattern of split callbacks.

6
00:00:20.519 --> 00:00:23.550
如果我们试图解决的问题是我们有一个错误，而我们没有
If our problem that we're trying to solve is that we've got an error that we don't

7
00:00:23.550 --> 00:00:27.329
如果主功能有问题，我想被吞噬，
wanna get swallowed in case there's some problem with the main function,

8
00:00:27.329 --> 00:00:31.359
我们就像我知道我会为我的错误传递一个单独的回调。
we're like I know I'll just pass a separate callback for my errors.

9
00:00:31.359 --> 00:00:34.200
那样的话，如果有一些错误，至少我
And that way if there is some error at least I

10
00:00:34.200 --> 00:00:37.219
我知道公用事业公司会以某种方式通知我出现了问题，
know that utility will have some way of notifying me that there was a problem,

11
00:00:37.219 --> 00:00:41.189
好吧，表面上听起来不错。
all right, sounds good on the surface.

12
00:00:41.189 --> 00:00:44.530
直到你意识到这实际上使信任问题变得更糟。
Until you realize this actually makes the trust issue a lot worse.

13
00:00:44.530 --> 00:00:47.350
因为现在你必须扪心自问，如果他们两个都不叫的话会发生什么
Because now you have to ask yourself what happens if they call neither of

14
00:00:47.350 --> 00:00:48.103
这些功能？
these functions?

15
00:00:48.103 --> 00:00:51.509
如果他们同时调用这两个函数会发生什么？
What happens if they call both of these functions?

16
00:00:51.509 --> 00:00:54.479
也许他们先叫错误，然后叫成功。
Maybe they call the error first and then the success.

17
00:00:54.479 --> 00:00:56.009
或者，也许他们先称成功，然后称错误。
Or maybe they call the success first and then the error.

18
00:00:56.009 --> 00:00:58.659
你的程序将如何处理这个问题？
How is your program gonna handle that?

19
00:01:00.770 --> 00:01:03.500
我打赌你们中的一些人有这样的代码，而你们还没有任何解决方案。
I bet some of you have code like this and you don't have any solution for that yet.

20
00:01:04.814 --> 00:01:06.819
它实际上使问题变得更糟。
It actually made the problem worse.

21
00:01:06.819 --> 00:01:08.450
还有更多的信任问题。
There's more trust issues.

22
00:01:08.450 --> 00:01:12.430
因此，虽然在服务器上听起来不错，但拆分回调实际上是一种回归。
So split callbacks while it sounded good on the servers actually was a regression.

23
00:01:12.430 --> 00:01:16.000
它把我们带离了一个好的解决方案。
It took us away from a good solution.

24
00:01:16.000 --> 00:01:19.716
在节点世界中，我们发明了经常被称为节点样式的东西，
In the node world, we invented what often times referred to as node style,

25
00:01:19.716 --> 00:01:21.606
我喜欢调用错误优先回调。
I like to call error first callbacks.

26
00:01:21.606 --> 00:01:25.349
好吧，让我们回到一个回调，两个回调是疯狂的。
Well let's go back to one callback, two callbacks is crazy.

27
00:01:25.349 --> 00:01:27.099
让我们回到一个回调。
Let's go back to one callback.

28
00:01:27.099 --> 00:01:31.460
但我们将为错误信号保留该回调的第一个参数。
But we'll reserve the first parameter of that callback for the error signal.

29
00:01:32.780 --> 00:01:35.670
所以如果我们在发信号通知它是一个错误，我们总是设置那个
So if it's an error that we're signaling, we'll always set that one and

30
00:01:35.670 --> 00:01:39.060
没有其他的，如果它不是一个错误，那么我们将留下那个。
nothing else and if it's not an error then we'll leave that.

31
00:01:39.060 --> 00:01:44.530
所以你写的每一个节点回调都有这个if else
And so every single node callback that you've ever written has this if else

32
00:01:44.530 --> 00:01:47.090
爵士乐在里面进行着，你在那里检查是不是或者
jazz going on in it, where you're checking to see whether or

33
00:01:47.090 --> 00:01:48.180
不是，这是不是一个错误条件。
not it's an error condition or not.

34
00:01:49.359 --> 00:01:52.250
所以它似乎解决了拆分回调的问题，直到
So it seems like it solved the problem about the split callbacks thing until

35
00:01:52.250 --> 00:01:55.390
你意识到实际上同样的问题也发生在这里。
you realize actually the same questions occur here.

36
00:01:55.390 --> 00:01:59.231
如果所讨论的实用程序的行为与您预期的不同，会发生什么情况，
What happens if the utility in question does not behave the way you expect,

37
00:01:59.231 --> 00:02:02.530
如果它两次回拨你的电话，一次是空中的，会发生什么？
what happens if it calls your call back twice, once with the air and

38
00:02:02.530 --> 00:02:03.453
一次没有错误。
once with not the error.

39
00:02:03.453 --> 00:02:07.362
或者如果它同时使用错误和成功参数调用会发生什么，
Or what happens if it calls with both the error and the success parameters,

40
00:02:07.362 --> 00:02:09.919
你如何解释这种情况？
how do you interpret Interpret that situation?

41
00:02:11.550 --> 00:02:13.870
所有同样的信任问题都在起作用。
All the same trust issues are at play.

42
00:02:13.870 --> 00:02:17.490
我们没有从根本上控制回调，这意味着我们有
We are not fundamentally in control of the callback which means we have

43
00:02:17.490 --> 00:02:20.139
把所有的控制权都颠倒了，然后把它交给了其他人。
inverted all that control and given it away to somebody else.

44
00:02:22.569 --> 00:02:23.810
所以这些实际上是不能修复的。
So these are really non fixes.

45
00:02:26.000 --> 00:02:27.680
现在我有一个愚蠢的运行示例，
Now I've got a silly running example,

46
00:02:27.680 --> 00:02:30.840
你们中有多少人认识到生命的意义？
how many of you recognize the reference to the meaning of life?

47
00:02:30.840 --> 00:02:33.715
希望我还没有老到只有我一个人知道“搭便车指南”(Hitchhiker‘s Guide)。
Hopefully I'm not so old that I'm the only one that knows about Hitchhiker's Guide.

48
00:02:33.715 --> 00:02:38.211
如果你不知道，去读维基百科什么的，
If you don't know about that, go read Wikipedia, something,

49
00:02:38.211 --> 00:02:40.199
加快速度。
get up to speed on it.

50
00:02:40.199 --> 00:02:44.789
愚蠢的例子使用嵌套回调计算生活的意义。
Silly example calculating the meaning of life using nested callbacks.

51
00:02:45.939 --> 00:02:48.043
这是我的Think Ajax调用，我的getData函数。
Here's my think Ajax call, my getData function.

52
00:02:48.043 --> 00:02:50.694
因为它接受了一段数据，比如一个数字，并且
As it takes in a piece of data, like a number, and

53
00:02:50.694 --> 00:02:55.031
然后在1000毫秒后，它调用我提供的任何回调
then after a 1000 milliseconds, it calls whatever callback I provided and

54
00:02:55.031 --> 00:02:57.659
直接把数据发回去。
just sends the data right back.

55
00:02:57.659 --> 00:03:01.995
所以我假装要问答案，值10的计算。
So I pretend to ask for the answer, the calculation of value 10.

56
00:03:01.995 --> 00:03:05.175
1000毫秒后，调用该函数，并且num1是值10。
1000 milliseconds later, the function is called and num1 is the value 10.

57
00:03:05.175 --> 00:03:07.655
现在x=1+10。
Now x = 1 + 10.

58
00:03:07.655 --> 00:03:08.412
所以x是11。
So x is 11.

59
00:03:08.412 --> 00:03:10.599
然后我打到30
And then I make the call to 30.

60
00:03:10.599 --> 00:03:13.150
您注意到这是连续调用。
You notice that this is sequential calling.

61
00:03:13.150 --> 00:03:17.229
我将这些调用嵌套在一起，因为它们具有时间依赖性，
I've nested these calls together because they have a temporal dependency,

62
00:03:17.229 --> 00:03:20.218
直到我算完11，我才能算出31。
I can't calculate 31 until after I've calculated 11.

63
00:03:22.530 --> 00:03:25.681
然后在计算完这两个之后，我把这两个放在一起，
And then after both of those have been calculated, then I put the two together,

64
00:03:25.681 --> 00:03:26.587
生命的意义42。
meaning of life 42.

65
00:03:26.587 --> 00:03:33.740
我要求在1000毫秒内计算，我得到了我的答案。
I ask for that from to be computed in 1000 milliseconds later I get my answer back.

66
00:03:33.740 --> 00:03:34.747
生命的意义42。
Meaning of life 42.

67
00:03:34.747 --> 00:03:39.192
&gt；&gt；扬声器2：[听不到]&gt；&gt；Kyle：是的，对不起，
&gt;&gt; Speaker 2: [INAUDIBLE] &gt;&gt; Kyle: Yep sorry,

68
00:03:39.192 --> 00:03:43.400
我们讨论的是getData调用的第5行和第7行。
we're talking about lines 5 and lines 7 for the getData calls.

69
00:03:43.400 --> 00:03:45.449
生命意义的getData调用的第9行。
Line 9 for the getData call of meaning of life.

70
00:03:45.449 --> 00:03:48.552
最后，答案回到第11行。
And then finally the answer is coming back on line 11.

71
00:03:48.552 --> 00:03:52.373
谢天谢地，我的只花了1000毫秒
Thankfully mine only took 1000 milliseconds or

72
00:03:52.373 --> 00:03:56.520
3，而不是数万亿年或其他什么。
3 instead of trillions of years or whatever.

73
00:03:56.520 --> 00:03:59.039
对于setTimeout来说，这将是一个相当大的数字。
That would be a pretty big number for the setTimeout.

74
00:04:01.479 --> 00:04:03.340
但您可以看到这里我有嵌套的回调。
But you see here I have the nested callbacks.

75
00:04:03.340 --> 00:04:08.960
我有所有的问题，这甚至是非局部的非顺序推理。
And I have all the problems of, this is non-local non-sequential reasoning even.

76
00:04:08.960 --> 00:04:11.680
是的，垂直方向，我可以穿过金字塔。
Yes, vertically, I can move through the pyramid.

77
00:04:11.680 --> 00:04:14.909
但是当我将其中一个回调移动到另一个模块时会发生什么
But what happens when I move one of those callbacks into another module

78
00:04:14.909 --> 00:04:16.170
我的效用？
of my utility?

79
00:04:16.170 --> 00:04:20.689
现在我把这个非本地的跳转到其他地方来理解
Now I've got this non-local jump over to some other location to understand

80
00:04:20.689 --> 00:04:21.968
发生了什么。
what's happening.

81
00:04:21.968 --> 00:04:25.810
[咳嗽]在控制反转中我有所有的信任问题。
[COUGH] And I have all the trust issues in inversion of control.
