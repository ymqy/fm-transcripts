WEBVTT

1
00:00:00.000 --> 00:00:03.914
[音乐]
[MUSIC]

2
00:00:03.914 --> 00:00:07.971
&gt；&gt；Kyle Simpson：我观察到的一个特别有用的抽象是
&gt;&gt; Kyle Simpson: One abstraction that I've observed as particularly useful is to

3
00:00:07.971 --> 00:00:12.820
从一个序列，一个事件序列的角度来思考事情。
think about things in terms of a sequence, a sequence of events.

4
00:00:12.820 --> 00:00:16.620
我对序列的定义是，它是一个自动链接承诺的列表。
My definition for a sequence is that it's a list of automatically chained promises.

5
00:00:17.710 --> 00:00:20.359
我们知道我们可以把承诺连在一起，我已经向你展示了如何做到这一点。
We know that we can chain promises together, I've shown you how to do that.

6
00:00:20.359 --> 00:00:21.960
一旦你学会了它就很简单了。
It's pretty straightforward once you learn it.

7
00:00:21.960 --> 00:00:25.260
五分钟，你和我们一样是这方面的专家。
Five minutes, you're an expert at it like the rest of us.

8
00:00:25.260 --> 00:00:28.309
但是当你开始这样做的时候，几十个，几百个，
But as you start doing that, dozens and hundreds and

9
00:00:28.309 --> 00:00:30.079
即使在一个项目中有数千次，
even thousands of times in a project,

10
00:00:30.079 --> 00:00:34.429
你开始怀疑，天啊，我真的必须创造并返回另一个承诺吗？
you start to wonder gee, do I really have to create and return another promise?

11
00:00:34.429 --> 00:00:38.469
它变得有点乏味，它变得非常乏味。
It gets a little bit tedious, it gets a lot tedious.

12
00:00:39.890 --> 00:00:43.369
几年前，我是其中一些概念的早期采用者。
Years ago, I was an early adopter of some of these concepts.

13
00:00:43.369 --> 00:00:46.176
在我们给它们起名字之前我就在做承诺了。
I was working on promises before we had a name for them.

14
00:00:46.176 --> 00:00:50.981
就像五、六年前的prenode一样，我们正在研究如何将
Like five, six years ago, prenode, we were working on this concept of how to bring

15
00:00:50.981 --> 00:00:53.948
这些东西和我是这方面的早期实验者。
this stuff and I was an early experimenter in this.

16
00:00:53.948 --> 00:00:56.326
我认为最大的问题之一是，
And I decided that one of the big problems was,

17
00:00:56.326 --> 00:00:58.645
我不想要记得去创造和
I don't want to have to remember to create and

18
00:00:58.645 --> 00:01:02.853
承诺的链条当我的假设应该是，我总是会做另一步。
chain a promise when my assumption should be, I'm always gonna do another step.

19
00:01:02.853 --> 00:01:06.905
为什么不让它自动为我创建和链接承诺。
Why not make it automatically create and chain promises for me.

20
00:01:06.905 --> 00:01:11.100
所以我在五六年前做的早期实验，在我们有名字之前
So my early experiments into this five, six years ago, before we had a name for

21
00:01:11.100 --> 00:01:15.361
承诺，早在您听说过的任何现有库之前
promises, long before any of the existing libraries that you've heard of were

22
00:01:15.361 --> 00:01:18.558
我正在为这个抽象创建一个库。
around, is I was creating a library for that abstraction.

23
00:01:18.558 --> 00:01:24.150
这个库经历了许多修订和几次名称更改。
And that library has gone through a lot of revisions and several name changes.

24
00:01:24.150 --> 00:01:28.450
它最终得到了它现在使用的名称，即异步(Asynquence)
It eventually arrived at the name that it currently goes by, which is asynquence

25
00:01:28.450 --> 00:01:32.540
这是单词asynch加上一起粉碎的单词序列，
which is the word asynch plus the word sequence smushed together,

26
00:01:32.540 --> 00:01:36.390
主要是因为基本上没有其他好名字了[笑]。
mostly cuz there are no other good names left [LAUGH] basically.

27
00:01:36.390 --> 00:01:38.460
必须想出一个独一无二的名字而没有其他好名字，
Gotta come up with a unique name and there were no other good names,

28
00:01:38.460 --> 00:01:40.545
但它确实说明了它的目的。
but it does speak to what its purpose is.

29
00:01:40.545 --> 00:01:42.740
其目的是向您呈现抽象，
Its purpose is to present you that abstraction,

30
00:01:42.740 --> 00:01:46.459
一系列自动链接承诺的概念。
that notion of a sequence of a series of automatically chained promises.

31
00:01:47.960 --> 00:01:52.112
你会注意到，我可以做一个链，就像你用承诺链做的那样，但是
You'll notice that I can do a chain just like when you do with a promise chain, but

32
00:01:52.112 --> 00:01:54.835
这里有一些重要的区别。
there are some important differences here.

33
00:01:54.835 --> 00:01:58.829
在第2行，您会注意到传递了我的Then函数
On line 2, you'll notice that my then function is passed

34
00:01:58.829 --> 00:02:03.620
在我调用完成函数回调中，按照惯例，我称之为完成。
in function callback that I call done, just by convention, I call it done.

35
00:02:03.620 --> 00:02:05.500
这就是我们的决议触发器。
That's our resolution trigger.

36
00:02:05.500 --> 00:02:09.189
因此，无论何时第3行步骤完成，它都会调用Done，并
So whenever that step on line 3 is complete, it calls done and

37
00:02:09.189 --> 00:02:12.240
这就是使序列进入下一步的原因。
that's what moves the sequence onto its next step.

38
00:02:12.240 --> 00:02:15.680
承诺处理所有幕后创建的内容和
The promise to handle all that was created behind the scenes and

39
00:02:15.680 --> 00:02:18.639
自动锁链这样我就不用担心那部分了。
automatically chained in so I didn't have to worry about that part.

40
00:02:18.639 --> 00:02:21.979
我只需要担心什么时候发出信号，是时候继续前进了
I only needed to worry about when to signal that it was time to move on

41
00:02:21.979 --> 00:02:22.530
到下一步。
to the next step.

42
00:02:24.520 --> 00:02:27.250
所以他们的承诺绝对是在幕后发生的，但是
So their promises are absolutely happening under the covers but

43
00:02:27.250 --> 00:02:31.210
它抽象了API的一些单调乏味的部分。
it's abstracting some of the tedious parts of that API.

44
00:02:31.210 --> 00:02:33.449
它掩盖了一些粗糙的部分，
It's covering up some of the rough parts,

45
00:02:33.449 --> 00:02:38.560
它正在以一种更明智的方式进行错误处理。
it's doing error handling in a more sensible way.

46
00:02:38.560 --> 00:02:43.198
基本上，异步的设计是为了让承诺更容易推理，
Basically, the design of asynquence was to make promises easier to reason about,

47
00:02:43.198 --> 00:02:44.199
更容易教。
easier to teach.

48
00:02:44.199 --> 00:02:45.966
这是最初的设计目标。
That was the original design goal.

49
00:02:45.966 --> 00:02:49.449
在这一点上，异步实际上远不止于此。
At this point, asynquence is actually quite a bit more than that.

50
00:02:49.449 --> 00:02:52.736
它仍然具有相同的序列之类的概念，但是
It still has the same notion of a sequence and whatever, but

51
00:02:52.736 --> 00:02:56.896
实际上，我并不是很经常使用异步的序列性质。
I actually don't really use the sequence nature of asynquence that much.

52
00:02:56.896 --> 00:03:00.492
因为这些高阶模式也，我认为，更有趣，
Cuz these higher order patterns are also, I think, much more interesting,

53
00:03:00.492 --> 00:03:04.283
我们将在研讨会结束前完成的事情。
the stuff that we're gonna get to through the end of the workshop.

54
00:03:04.283 --> 00:03:08.159
但在其核心，制作序列所需的一切就是开始链接
But at its heart, all it takes to make a sequence is to start chaining

55
00:03:08.159 --> 00:03:10.870
一步步走到一起就像你带着承诺和
steps together just like you would with a promise and

56
00:03:10.870 --> 00:03:12.780
让它为你做一些工作。
letting it do some of that work for you.

57
00:03:12.780 --> 00:03:16.165
所以第2行是a，那么，这只是一个常规步骤。
So line 2 is a .then, that's just a regular step.

58
00:03:16.165 --> 00:03:19.500
但是第5行显示我可以创建一个gate step
But line 5 shows you that I can create a gate step

59
00:03:19.500 --> 00:03:21.539
就像我可以做承诺一样。
just like I can do a promise.all.

60
00:03:21.539 --> 00:03:25.229
但是不是有一个我返回承诺的函数。all from，
But rather than having a function that I return a promise.all from,

61
00:03:25.229 --> 00:03:29.610
这是超级单调乏味的，我只是根据他们做什么来命名我的步骤。
which is super tedious, I just name my steps based upon what they do.

62
00:03:29.610 --> 00:03:31.150
所以在这个API中，
So in this API,

63
00:03:31.150 --> 00:03:36.069
它叫做.gate，如果你喜欢all to gate这个词，那么这里有一个.all的别名。
it's called .gate and there's an alias to .all if you prefer the word all to gate.

64
00:03:36.069 --> 00:03:39.250
你可以使用任何你想要的，但它做的是完全相同的事情。
You can use whichever one you want, but it does exactly the same thing.

65
00:03:39.250 --> 00:03:45.189
它接受这两个或多个函数，并行运行它们。
It takes those two or however many functions and runs them in parallel.

66
00:03:45.189 --> 00:03:47.460
只要所有这些都成功完成，它就会继续前进。
Whenever all of them successfully complete, it moves on.

67
00:03:51.394 --> 00:03:54.349
我不会试图说服或者
I am not going to try to convince or

68
00:03:54.349 --> 00:03:57.610
向你推销你应该改用异步序列。
sell you that you should switch to using asynsequence.

69
00:03:57.610 --> 00:04:02.430
然而，我设计了异步，使这些东西更容易教。
However, I designed asynquence to make this stuff easier to teach.

70
00:04:02.430 --> 00:04:04.639
所以为了这个研讨会的平衡，
So for the balance of this workshop,

71
00:04:04.639 --> 00:04:09.578
我们将要做的所有练习都将依赖于使用异步。
all the exercises that we're going to do are going to rely upon using asynquence.

72
00:04:09.578 --> 00:04:12.948
所以你只需要学到足够的知识来完成这些练习
So you only have to learn it just enough to get through these exercises and

73
00:04:12.948 --> 00:04:15.612
如果你再也不想用了，那完全没关系。
if you never want to use it again, that's totally fine.

74
00:04:15.612 --> 00:04:19.096
但重要的是我们有一件事要学，而不是必须学
But it was important that we have one thing to learn rather than having to

75
00:04:19.096 --> 00:04:21.920
学习15个不同的图书馆来做这件事。
learn 15 different libraries to do this stuff.

76
00:04:21.920 --> 00:04:24.920
因此异步将处理我们将要讨论的所有内容
So asynquence will handle all the stuff that we will talk about

77
00:04:24.920 --> 00:04:26.550
通过车间的其余部分。
through the rest of the workshop.

78
00:04:26.550 --> 00:04:30.336
这就是为什么我给你一个简单的介绍它的工作方式。
It's why I'm giving you a brief introduction to the way that it works.

79
00:04:30.336 --> 00:04:34.759
[咳嗽]&gt；&gt；Kyle Simpson：只是一个例子
[COUGH] &gt;&gt; Kyle Simpson: Just as an example

80
00:04:34.759 --> 00:04:38.399
回到我们愚蠢的计算生命的意义。
back to our silly calculating the meaning of life.

81
00:04:38.399 --> 00:04:42.379
这是Asynquence对生命意义的解释
Here's asynquence's version of meaning of life and

82
00:04:42.379 --> 00:04:45.850
你会注意到在第8行，我使用了一个叫做瀑布的步骤。
you'll notice on line 8, I'm using a step called a waterfall.

83
00:04:45.850 --> 00:04:49.159
这是我们可以定义的另一个高阶抽象。
That's another higher order abstraction that we could define.

84
00:04:49.159 --> 00:04:51.706
瀑布仍然是一个连续的系列。
What a waterfall is is still a sequential series.

85
00:04:51.706 --> 00:04:55.480
它不会做平行的事情，仍然是一个连续的系列，但是
It's not gonna do stuff in parallel, still a sequential series, but

86
00:04:55.480 --> 00:04:58.060
它自动收集每个步骤的输出，并
it automatically collects the output from each step and

87
00:04:58.060 --> 00:05:01.019
把它传给下一个和下一个。
passes it on to the next and the next and the next.

88
00:05:01.019 --> 00:05:03.529
所以到最后，你就有了所有步骤的所有输出。
So by the end, you have all the outputs from all the steps.

89
00:05:04.649 --> 00:05:07.180
你不必手动收集所有这些并将它们传递出去，
You don't have to manually collect all those and pass them along,

90
00:05:07.180 --> 00:05:09.259
它会自动为你做到这一点。
it automatically does that for you.

91
00:05:09.259 --> 00:05:10.540
所以在第12行的结尾，
So at the end on line 12,

92
00:05:10.540 --> 00:05:14.660
我们从前面的两个系列步骤中获得了num1和num2。
we get both num1 and num2 from the two previous series steps.

93
00:05:16.240 --> 00:05:17.290
这就是我所说的瀑布。
That's what I call a waterfall.

94
00:05:18.949 --> 00:05:21.021
一些我经常做的事情
Something I was doing fairly often and

95
00:05:21.021 --> 00:05:23.740
我非常手动地处理其他变量和
I was doing very manually with other variables and

96
00:05:23.740 --> 00:05:27.898
我说让我们把它变成一个抽象，我们可以把它添加到库中。
I said let's make that into an abstraction that we can add into the library.

97
00:05:27.898 --> 00:05:30.971
所以异步发货大约有10个或
So asynquence ships with about 10 or

98
00:05:30.971 --> 00:05:35.401
15个核心方法是您需要的基本方法。
15 core methods that are the base ones that you need.

99
00:05:35.401 --> 00:05:40.533
还有一个可选的contrib库，大约有15到20个其他库
And there's also an optional contrib library with about 15 to 20 other

100
00:05:40.533 --> 00:05:46.002
可选的步骤方法，您可以为所有其他更高级别的东西添加这些方法。
optional step methods that you can add in for all this other higher level stuff.

101
00:05:46.002 --> 00:05:49.117
我们将进入反应式编程和CSP
We'll get into reactive programming and CSP and

102
00:05:49.117 --> 00:05:51.473
研讨会后面的其他事情。
other things later in the workshop.

103
00:05:51.473 --> 00:05:57.356
另外需要指出的是，正如您在第12行所看到的，我有一个.seq step类型。
One other thing to point out, as you see on line 12, I have a .seq step type.

104
00:05:57.356 --> 00:05:58.226
那是怎么回事？
What's that all about?

105
00:05:58.226 --> 00:06:03.773
在常规的Promise库中，then函数是多态的。
Well in the regular Promise library, the then functions is polymorphic.

106
00:06:03.773 --> 00:06:08.214
这是一种奇特的说法，它根据你返回的内容改变了它的行为，
That's a fancy way of saying it changes its behavior based upon what you return,

107
00:06:08.214 --> 00:06:09.334
你用它做什么。
what you do with it.

108
00:06:09.334 --> 00:06:14.600
我倾向于认为多态函数更容易混淆。
I tend to think that polymorphic functions are a bit more confusing.

109
00:06:14.600 --> 00:06:18.360
所以当我查看then函数时，我实际上不知道它返回的是立即数
So when I look at a then function, I don't actually know is it returning an immediate

110
00:06:18.360 --> 00:06:21.639
价值，是拒绝，是对某件事的承诺，
value, is it rejecting, is it returning a promise for something,

111
00:06:21.639 --> 00:06:24.939
我不知道它在做什么，我必须更仔细地检查它。
I don't know what it's doing and I have to inspect it more closely.

112
00:06:24.939 --> 00:06:29.985
异步的设计说，而不是只有一个多态函数
The design of asynquence said, rather than having one polymorphic function for

113
00:06:29.985 --> 00:06:33.810
每件事，你命名步骤的基础上，步骤做什么。
everything, you name the step based upon what the step does.

114
00:06:35.050 --> 00:06:37.079
所以序列步骤，
So the sequence step,

115
00:06:37.079 --> 00:06:42.670
seq步骤期待返回序列，而序列类似于承诺。
the .seq step, is expecting a sequence back and a sequence is like a promise.

116
00:06:42.670 --> 00:06:44.990
所以基本上是期待一个承诺，
So it's expecting a promise back basically,

117
00:06:44.990 --> 00:06:49.500
这就是为什么我们回到第15行，就像你在正常的承诺中做的一样。
which is why we return on line 15 just like you do in a normal promise thing.

118
00:06:49.500 --> 00:06:54.509
如果您确实需要在外部生成一个并返回它，请使用.seq步骤。
If you do need to produce one externally and return it, you use a .seq step.

119
00:06:54.509 --> 00:06:57.949
如果您不需要自己生产，您可以使用.Then Step。
If you don't need to produce your own, you use a .then step.

120
00:06:57.949 --> 00:07:02.740
如果你需要做一个同步的步骤，就像你只需要打印出一些东西，然后
If you need to do a synchronous step, like you just need to print something out and

121
00:07:02.740 --> 00:07:07.480
您不需要执行任何异步操作，您可以使用.val作为值。
you don't need to do anything asynchronous, you use .val for the values.

122
00:07:07.480 --> 00:07:09.759
检查或变换值。
You inspect or transform a value.

123
00:07:09.759 --> 00:07:13.970
所以基本上，这个API的设计是这样的，每个方法名都是这样做的
So basically, the design of this API is such that each method name does

124
00:07:13.970 --> 00:07:18.910
一件特定的事情，它的命名是基于这种期望，而不是
one specific thing, and its named based upon that expectation, rather than

125
00:07:20.189 --> 00:07:24.060
必须学习一种方法的所有不同的多态行为。
having to learn all the different polymorphic behaviors of one method.
