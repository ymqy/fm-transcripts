WEBVTT

1
00:00:00.000 --> 00:00:03.677
[音乐]
[MUSIC]

2
00:00:03.677 --> 00:00:06.108
&gt；&gt；Kyle：承诺，非常好的核心。
&gt;&gt; Kyle: Promises, pretty good at their core.

3
00:00:06.108 --> 00:00:10.740
但是有很多抽象的东西是缺失的。
But there's an awful lot of Abstractions that were missing.

4
00:00:10.740 --> 00:00:14.730
抽象是我们用来制造更高层次的强大工具之一
And Abstractions are what are one of the powerful tools that we use to make higher

5
00:00:14.730 --> 00:00:18.960
和更高阶的模式，让我们的代码越来越有表现力。
and higher order patterns that let us be more and more expressive with our code.

6
00:00:18.960 --> 00:00:21.710
我想和你谈谈几个抽象的是第一对夫妇
I want to talk to you about a few Abstractions is the first couple

7
00:00:21.710 --> 00:00:26.379
是直接内置在浏览器中的Promise API中的东西。
are things that are built in directly into the promise API in the browser.

8
00:00:26.379 --> 00:00:29.655
然后，我们将讨论通过第三方提供给我们的其他抽象
Then we'll talk about other Abstractions that are available to us through third

9
00:00:29.655 --> 00:00:34.189
使用其他抽象在承诺的基础上包装和构建的party和库。
party and libraries that wrap and build on top of promises with other Abstractions..

10
00:00:35.859 --> 00:00:37.325
我们可以讨论的第一个是Promise.all。
The first one we can talk about is Promise.all.

11
00:00:37.325 --> 00:00:41.649
承诺，一切都需要一系列的承诺。
Promise,all takes an array of promises.

12
00:00:41.649 --> 00:00:46.500
如您所见，您有一系列即将到来的承诺
As you can see, you have an array of promises that are coming

13
00:00:46.500 --> 00:00:51.619
从这些doTask方法中，doTask1a、1b和1c。
from these doTask methods, doTask1a, 1b and 1c.

14
00:00:51.619 --> 00:00:54.479
现在它要做的显然是所有这些函数
Now what it's going to do is obviously all of those functions

15
00:00:54.479 --> 00:00:57.409
这意味着他们都在做出承诺。
are being call which means they're all producing promises.

16
00:00:57.409 --> 00:01:00.049
我们可以想象，这就像三个独立的Ajax调用
We can imagine that that's like three independent AJAX calls

17
00:01:00.049 --> 00:01:00.829
一下子就发生了。
happening all at once.

18
00:01:02.259 --> 00:01:04.469
然后我们将等待所有这些完成
And then we're going to wait for all of those to finish and

19
00:01:04.469 --> 00:01:11.209
您会注意到，我们得到了这些结果的数组，通过第6行传递给我们。
you'll notice that we get an array of those results, passed into us on line 6.

20
00:01:12.430 --> 00:01:16.460
结果数组，将具有每个结果的数组
There array of results, will have the array of results from each of those

21
00:01:16.460 --> 00:01:19.780
承诺在原始数组中列出的顺序。
promises in the order they were listed in the original array.

22
00:01:19.780 --> 00:01:21.739
不管他们完成的顺序是什么，
Regardless of what order they finish in,

23
00:01:21.739 --> 00:01:23.890
它们处于可预测的顺序，即请求顺序。
they're in a predictable order which is request order.

24
00:01:25.989 --> 00:01:29.469
这让我们可以说，我不想只等一个承诺。
This is allowing us to say, I don't want to just wait for one promise.

25
00:01:29.469 --> 00:01:32.120
我有三个需要同时发生。
I've got three that need to happen in parallel.

26
00:01:32.120 --> 00:01:35.109
然后我需要等待他们全部完成，然后再继续。
And then I need to wait for all of them to finish before moving on.

27
00:01:35.109 --> 00:01:39.948
你注意到了Promises.所有人都给了我们一个当时[INAUDIBLE]的承诺
You notice the Promise.all is giving us a promise which were then [INAUDIBLE]

28
00:01:39.948 --> 00:01:41.091
离开6号线。
off of on line 6.

29
00:01:41.091 --> 00:01:46.700
以及我们从先前的承诺中得到的完成结果，
And what we're getting as the completion result from that previous promise,

30
00:01:46.700 --> 00:01:51.545
是所有结果的数组，而在这里我只是一个愚蠢的插图
is an array of all the results and here I'm just a silly illustration

31
00:01:51.545 --> 00:01:55.759
我正在对这三个结果执行Math.max。
I'm doing Math.max across those three results.

32
00:01:55.759 --> 00:01:57.310
我们可能是任务1a，1b和
We might have been task 1a, 1b and

33
00:01:57.310 --> 00:01:59.650
1C可能已经生成了一些随机数。
1c might have been to generate some random number.

34
00:01:59.650 --> 00:02:03.724
我们将要求生成的三个数字中的最大值
We're gonna ask for the maximum of the three numbers that was generated and

35
00:02:03.724 --> 00:02:04.564
然后返回
then return and

36
00:02:04.564 --> 00:02:08.977
将其传递给doTask2，然后返回一个我们当然可以更改的承诺。
pass that in to doTask2 and that returns a promise which we can of course change.

37
00:02:08.977 --> 00:02:13.531
我们在这里提出的观点是，承诺链中的每一步都可以作为
The point that we're making here, is that each step in a promise chain can be as

38
00:02:13.531 --> 00:02:18.085
简单的，链接在另一个承诺中，可以简单的像直接的
simple as, chaining in another promise, can be as simple as just an immediate

39
00:02:18.085 --> 00:02:21.534
我们返回的值，或者可能是更复杂的值，
value that we return or it could be something more complex,

40
00:02:21.534 --> 00:02:25.409
我们在这里看到的像Promise.call这样的高阶抽象。
a higher order abstraction like a Promise.call that we see here.

41
00:02:26.930 --> 00:02:31.050
我们用老式的计算机科学术语来描述这个，我们称之为门。
Old school computer science terminology we use for this we call this a gate.

42
00:02:32.379 --> 00:02:34.659
每当你有多件事发生时，
Whenever you have multiple things happening,

43
00:02:34.659 --> 00:02:37.229
你不知道他们会按什么顺序完成，但是
you do not know what order they're gonna finish in, but

44
00:02:37.229 --> 00:02:40.289
所有这些都需要在继续前完成，我们称之为“门”。
all of them need to finish before moving on, we call that a gate.

45
00:02:41.460 --> 00:02:44.530
这里的API是Promise.all，但您可以将其视为一个gate。
The API here is Promise.all but you can think of that as a gate.

46
00:02:46.560 --> 00:02:50.490
如果这三个承诺中的任何一个造成拒绝，
Now if any one of those three promises creates a rejection,

47
00:02:50.490 --> 00:02:53.379
最主要的问题就是我们在六号线上用链子锁住的那个，
the main problem the one that we're chaining off of on line six,

48
00:02:53.379 --> 00:02:55.889
主要承诺立即被拒绝。
that main promises immediately rejected.

49
00:02:55.889 --> 00:02:59.610
所以.all要求成功完成。
So .all requires successful completion.

50
00:02:59.610 --> 00:03:03.430
你可以想到一个抽象，我不关心成功完成，
You could think of an abstraction where I don't care about successful completion,

51
00:03:03.430 --> 00:03:06.780
我只需要他们所有人都以积极或消极的方式结束。
I just need all of them to finish either positively or negatively.

52
00:03:06.780 --> 00:03:08.969
这将是一个不同的抽象。
And that would be a different abstraction.

53
00:03:08.969 --> 00:03:11.750
你可以开始认为我们实际上有很多不同的抽象概念
You can start to think there is actually quite a few different abstractions that we

54
00:03:11.750 --> 00:03:12.650
可以发明。
can invent.

55
00:03:12.650 --> 00:03:16.740
你可能会发明一个抽象概念，就像我希望在第一个抽象概念出现时得到通知一样
You might invent an abstraction like I want to be notified when the first one

56
00:03:16.740 --> 00:03:21.990
完成或当第一个完成或失败时。
finishes or when the first one finishes or fails.

57
00:03:21.990 --> 00:03:25.069
我刚才提到的那个抽象，就是
And that abstraction, the one I just mention, which is

58
00:03:25.069 --> 00:03:29.900
当有人完成或失败时，我希望得到通知，这称为比赛。
I want to be notified whenever somebody finishes or fails, that's called a race.

59
00:03:31.180 --> 00:03:35.920
我们还有一个名为Promise.race的实用程序，它接受一系列承诺。
We also have a utility called Promise.race, takes an array of promises.

60
00:03:35.920 --> 00:03:40.704
它的定义是说，我将等待任何解决方案，无论是
And its definition is to say, I'm going to wait for any resolution, whether that's

61
00:03:40.704 --> 00:03:44.757
实现或拒绝，任何这些承诺的解决方案，
a fulfillment or a rejection, any resolution of any of these promises,

62
00:03:44.757 --> 00:03:47.812
谁先越过终点线谁就赢，并且
whichever one crosses the finish line first wins, and

63
00:03:47.812 --> 00:03:49.561
其他人都被忽略了。
everybody else gets ignored.

64
00:03:49.561 --> 00:03:53.259
这就是Promise.race的意义所在。
That's what Promise.race is about.

65
00:03:53.259 --> 00:03:57.289
这里我展示了一个超时习语，因为我们之前没有回答。
Here I'm showing a timeout idiom, because we didn't answer earlier.

66
00:03:57.289 --> 00:03:58.629
我有点掩饰了，
I kind of glossed over it,

67
00:03:58.629 --> 00:04:02.289
希望你会问或者至少记住这一点。
hoping that you would either ask or at least remember at this point.

68
00:04:02.289 --> 00:04:04.849
我们没有问，好吧，如果我的承诺永远不会得到解决会发生什么？
We didn't ask, well, what happens if my promise never gets resolved?

69
00:04:06.199 --> 00:04:09.474
你处理这件事的方式就是我们处理任何可能
The way you handle that is the way we handle any asynchronous task that may

70
00:04:09.474 --> 00:04:12.387
永远不会完成，这就是为它设置一些最大超时。
never complete, which is to set up some maximum timeout for it.

71
00:04:12.387 --> 00:04:17.132
在这里，我所做的是我在第4行有p代表承诺，我
Here, what I'm doing is I've got p on line 4 representing the promise that I

72
00:04:17.132 --> 00:04:17.940
关心。
care about.

73
00:04:17.940 --> 00:04:23.052
然后我在第5行创造了另一个承诺，我其实并不关心，
And then I'm creating another promise on line 5, which I don't really care about,

74
00:04:23.052 --> 00:04:27.399
它只是被设置成一个定时炸弹，三秒钟后，它就会被拒绝。
it's just set up as a time bomb, that after three seconds, it rejects.

75
00:04:29.480 --> 00:04:31.560
在这种情况下，将会发生两件事中的一件。
One of two things is going to occur in this scenario.

76
00:04:31.560 --> 00:04:34.879
要么我的承诺在三秒钟内完成，然后
Either my promise is going to finish in less than three seconds, and

77
00:04:34.879 --> 00:04:40.550
我将得到它的结果，然后转到第11行，在第12行成功，或者
I'm going to get its result, and move on to line 11, with a success on line 12, or

78
00:04:40.550 --> 00:04:44.790
拒绝承诺将首先完成，在这种情况下，另一个承诺，
the rejection promise is going to finish first, in which case the other promise,

79
00:04:44.790 --> 00:04:47.540
不管它有没有完成，我们都会忽略它，并且
whether it ever finishes or not, we're going to ignore it, and

80
00:04:47.540 --> 00:04:51.819
我们将移到第13行，因为这是一个承诺拒绝。
we're going to move to line 13, because this was a promise rejection.

81
00:04:51.819 --> 00:04:57.430
我们将处理超时错误。&gt；&gt；扬声器2：如果发生超时，
We're going to handle a time out error. &gt;&gt; Speaker 2: If the time out happens,

82
00:04:57.430 --> 00:05:01.839
最初的承诺发生了什么，它是被垃圾收集了，还是
what happens to the original promise, does it get garbage collected, or

83
00:05:01.839 --> 00:05:02.470
凯尔：是的。
does it- &gt;&gt; Kyle: Yes.

84
00:05:02.470 --> 00:05:03.829
&gt；&gt；演讲者2：留下来？
&gt;&gt; Speaker 2: Stay around?

85
00:05:03.829 --> 00:05:06.350
它可能会被冲走。凯尔：是的。
It would potentially get flushed. &gt;&gt; Kyle: Yep.

86
00:05:06.350 --> 00:05:07.259
&gt；&gt；扬声器2：好的，因为没有
&gt;&gt; Speaker 2: Okay, cuz there's no

87
00:05:07.259 --> 00:05:08.483
不再引用它了。凯尔：是的，是的。
reference to it anymore. &gt;&gt; Kyle: Yep, yep.

88
00:05:08.483 --> 00:05:11.731
Promise.race丢弃任何东西，一旦完成，
Promise.race throws away anything, once it finishes,

89
00:05:11.731 --> 00:05:16.812
它丢弃了所有的引用。&gt；&gt；Kyle：[咳嗽]现在这不是
it throws away all its references. &gt;&gt; Kyle: [COUGH] Now this is not

90
00:05:16.812 --> 00:05:23.500
这是一段非常优雅的代码，每次你想让承诺超时都要编写。
a terribly graceful piece of code to write every time you wanna time out a promise.

91
00:05:23.500 --> 00:05:26.149
如果有一些高阶障碍物，那就太好了
That would be nice if there was some higher order obstruction for

92
00:05:26.149 --> 00:05:29.050
计时承诺，事实证明是有的。
timing out promises, and it turns out there is.

93
00:05:29.050 --> 00:05:32.603
几乎每个Promise库都有超时承诺的东西，并且
Virtually every promise library out there has something for timing out promises, and

94
00:05:32.603 --> 00:05:35.961
从被子里出来，他们做的事情大体上就像我说的或者
out of the covers they're doing something roughly like what I'm talking about or

95
00:05:35.961 --> 00:05:40.492
基本设置比赛&gt；&gt；Kyle：Promise.all和
setting up a race basically &gt;&gt; Kyle: Promise.all and

96
00:05:40.492 --> 00:05:47.629
PROMISE.RACE使用浏览器中的API进行本机转换。
Promise.race shift natively with the API that comes in the browser.

97
00:05:47.629 --> 00:05:51.949
但我们已经可以开始了，你的一些大脑可能已经开始思考了，
But we can already start, and some of your brains may already start to be thinking,

98
00:05:51.949 --> 00:05:54.529
那么这个抽象呢，这个抽象呢？
what about this abstraction, what about this abstraction?

99
00:05:54.529 --> 00:05:57.550
就像我只关心第一个
What about the one where it's like I only care about the first

100
00:05:57.550 --> 00:06:00.180
一人成功越过终点线。
one to successfully cross the finish line.

101
00:06:00.180 --> 00:06:02.819
我们可能会打电话，而不是称那是我们可能首先称之为的比赛。
We might call instead of calling that a race we might call that first.

102
00:06:04.009 --> 00:06:07.009
这有一个抽象，库提供了这些抽象。
There's an abstraction for that and libraries provide those abstractions.

103
00:06:08.019 --> 00:06:13.339
如果我只关心最后一个，最后一个赢了或者我们可以叫.last。
What if I only care about the last one, last one wins or we could call .last.

104
00:06:13.339 --> 00:06:17.000
如果我想知道他们都被拒绝了怎么办。
What if I want to know that all of them rejected.

105
00:06:17.000 --> 00:06:19.939
这是Promises的反面。所有人，而不是所有人都成功了，
It's the inverse of Promise.all, instead of all of them succeeding,

106
00:06:19.939 --> 00:06:21.470
我想知道他们所有的拒绝。
I want to know of all of them reject.

107
00:06:23.000 --> 00:06:25.970
我们可以称之为.没有这样我们就可以开始发明
We could call that .none so we could start to invent

108
00:06:25.970 --> 00:06:30.300
几十种不同的抽象可以帮助我们，这些抽象成为乐高
dozens of different abstractions that can help us and these abstractions become Lego

109
00:06:30.300 --> 00:06:33.759
我们构建更复杂的流量控制中心的构建块。
building blocks that we build our more complex flow control center.

110
00:06:33.759 --> 00:06:38.519
我们链中的每个步骤都可以是这些抽象步骤之一，而不是
Every single step in our chain can be one of these abstracted steps instead of

111
00:06:38.519 --> 00:06:40.889
只是一个单一的，如果那样的话，某种抽象。
just a single, if then sort of abstraction.

112
00:06:43.480 --> 00:06:45.769
你想要寻找那些共同的抽象和
You want to look for those common abstractions and

113
00:06:45.769 --> 00:06:48.600
就像在函数式编程中一样使用它们
use them just like in functional programming you wanna look for

114
00:06:48.600 --> 00:06:52.600
像地图和减少和发展一种不重新发明轮子的本能，
things like map and reduce and develop an instinct for not reinventing the wheel,

115
00:06:52.600 --> 00:06:56.290
但是使用已经发明的轮子并且知道它是如何工作的。
but using the wheel that's already been invented and knowing how it works.

116
00:06:56.290 --> 00:06:59.029
你想围绕承诺抽象发展同样的本能。
You want to develop that same instinct around promise abstractions.

117
00:07:00.319 --> 00:07:03.146
与其试图发明自己的模式，不如寻找那些已经
Rather than trying to invent your own patterns, look for ones that have already

118
00:07:03.146 --> 00:07:07.779
坚固耐用。&GT；&GT；Kyle：好的，
been established and well worn. &gt;&gt; Kyle: All right,

119
00:07:07.779 --> 00:07:14.004
更多关于承诺的阅读，我承诺你，双关语。
more reading about promises, I promised, I promised you, pun unintended.

120
00:07:14.004 --> 00:07:17.095
我之前答应过你我写了一大堆关于这个的东西，
I promised you earlier that I had written a bunch about this,

121
00:07:17.095 --> 00:07:21.894
顶部的这个链接是我写的五篇博文系列中的第一篇。
this link at the top link is the first in a five part blog post series that I wrote.

122
00:07:21.894 --> 00:07:25.160
它很长，都是关于承诺的。
It's pretty long, all about promises.

123
00:07:25.160 --> 00:07:28.089
我还谈到了错误处理和其他各种各样的事情。
And I talk about error handling and all kinds of other things.

124
00:07:28.089 --> 00:07:29.720
我说的是可取消的承诺。
I talk about cancelable promises.

125
00:07:29.720 --> 00:07:30.480
都在里面。
It's all in there.

126
00:07:30.480 --> 00:07:33.889
如果你想深入阅读承诺，那是一个博客文章系列。
If you wanna read about promises in depth, that's a blog post series.

127
00:07:33.889 --> 00:07:38.860
我在这本书的系列中广泛地写过承诺，包括异步和
I've written about promises extensively in the book series, both in the Async and

128
00:07:38.860 --> 00:07:40.990
性能手册，以及ES6书籍，所以
performance book, as well as the ES6 books, so

129
00:07:40.990 --> 00:07:42.300
那里有很多关于他们的书。
there's plenty to read there about them.

130
00:07:43.750 --> 00:07:47.545
如果你想使用直接本地化的承诺
And if you want to use promises in straight up native

131
00:07:47.545 --> 00:07:51.740
在旧浏览器中使用多填充方式的表单，但是
form in a polyfill fashion that is to use them in older browsers but

132
00:07:51.740 --> 00:07:54.329
在没有附加物或任何东西的地方使用它们。
use them where there's no additions or anything.

133
00:07:54.329 --> 00:07:56.659
我为承诺写了一个多填充，叫做NATIVE-PROMANE-ONLY。
I wrote a polyfill for promises called native-promise-only.

134
00:07:57.930 --> 00:08:01.360
那里大约有十几个这样的复合填充物。
There are about a dozen or so of this polyfills out there.

135
00:08:01.360 --> 00:08:04.610
关于寻找有希望的多填充材料，有一句话要小心。
One word of caution on looking for promise polyfills.

136
00:08:04.610 --> 00:08:09.430
让我感到困扰的是那里有相当多的图书馆
Something that kind of bothers me is that there's quite a few libraries out there

137
00:08:09.430 --> 00:08:14.660
它们声称是Promise PolyFill，实际上它们是Promise库，
which claim to be promise polyfills, really what they are promise libraries,

138
00:08:14.660 --> 00:08:19.319
这在规范之上添加了一堆额外的东西，添加了一堆额外的助手。
that add a bunch of extra stuff on top of the spec, add a bunch of extra helpers in.

139
00:08:19.319 --> 00:08:21.480
我反对添加帮助者吗？
Am I against adding helpers?

140
00:08:21.480 --> 00:08:22.589
绝对不行。
Absolutely not.

141
00:08:22.589 --> 00:08:25.810
我即将向您展示我编写的一个库，它添加了一堆助手。
I'm about to show you a library that I wrote that adds a bunch of helpers.

142
00:08:25.810 --> 00:08:28.509
我是图书馆助手的超级粉丝，因为我们有很多事情要做
I'm a big fan of library helper's because there's a lot of stuff we want to do

143
00:08:28.509 --> 00:08:29.600
带着承诺。
with promises.

144
00:08:29.600 --> 00:08:31.490
我不喜欢他加了一堆帮手
Well I'm not a fan of his adding a bunch of helpers and

145
00:08:31.490 --> 00:08:36.379
然后自称是多面体，因为多面体应该是无关紧要的
then claiming to be a polyfill, because a polyfill is supposed to be nothing but

146
00:08:36.379 --> 00:08:37.950
规范符合性。
the specification compliance.

147
00:08:39.370 --> 00:08:42.120
没有偷工减料，没有增加额外的东西和
No cutting corners, no adding extra stuff and

148
00:08:42.120 --> 00:08:45.059
外面有一堆图书馆，它们有点走捷径，
there's a bunch of libraries out there that sort of cut some corners and

149
00:08:45.059 --> 00:08:48.250
添加一些额外的东西，并且仍然称自己为PolyFill。
add some extra things in, and still call themselves polyfills.

150
00:08:48.250 --> 00:08:50.049
在寻找它的时候要小心。
Be cautious about looking for that.

151
00:08:50.049 --> 00:08:53.299
你可以相信本能的承诺只会
You can trust that native promise only does nothing but

152
00:08:53.299 --> 00:08:55.919
实现符合规范的Promise版本。
implement the spec compliant version of promise.
