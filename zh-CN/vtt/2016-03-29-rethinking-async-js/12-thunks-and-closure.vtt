WEBVTT

1
00:00:00.000 --> 00:00:03.501
[音乐]
[MUSIC]

2
00:00:03.501 --> 00:00:06.583
&gt；&gt；Kyle：我认为它会非常有用
&gt;&gt; Kyle: Thought it'd be useful to just very quickly

3
00:00:06.583 --> 00:00:11.519
循环回去讨论一下这个关于thunk到底是什么的概念。
circle back to kind of talk about this notion of what a thunk really is.

4
00:00:11.519 --> 00:00:16.640
实际上并不是所有这些，也不是真的那么特别，只是
And actually it's not all of that, it's not really all that special, it's just

5
00:00:16.640 --> 00:00:20.550
也许是我们不太熟悉的回调模式的用法。
maybe a usage of the callback pattern that we aren't terribly familiar with.

6
00:00:21.989 --> 00:00:26.829
我们中的大多数人可能至少对闭合有一些短暂的熟悉。
Most of us probably at least have some passing familiarity with closure.

7
00:00:26.829 --> 00:00:32.789
这就是func的真正意义所在，它使用闭包来维护状态，
And that's really what the func is all about is using closure to maintain state,

8
00:00:32.789 --> 00:00:35.189
为什么这很重要？
now why is that so important?

9
00:00:35.189 --> 00:00:39.420
那么之前聊天上的一些问题是关于我们的想法吗？
So some questions on the chat before about what our thunks?

10
00:00:39.420 --> 00:00:42.340
他们是在解决回叫地狱之类的事情吗？
Are they solving callback hell or things like that?

11
00:00:42.340 --> 00:00:43.759
嗯，他们仍然是回调，所以
Well they're still callbacks so

12
00:00:43.759 --> 00:00:48.469
他们并没有从根本上改变这个游戏。
they're not fundamentally changing that particular game.

13
00:00:48.469 --> 00:00:51.820
回调并不是真的我的意思是thunks并没有真正添加任何东西
Callbacks aren't really I mean thunks are not really adding anything

14
00:00:51.820 --> 00:00:55.329
在更好的可信度方面。
to the equation in terms of better trustability.

15
00:00:55.329 --> 00:00:59.939
或者甚至我的意思是他们更合理一点，我想这个代码
Or even I mean they're a little bit more reasonable I suppose this code

16
00:00:59.939 --> 00:01:05.349
显然比我们之前的常规回调更合理一些。
is clearly a bit more reasonable than what we had before with just regular callbacks.

17
00:01:05.349 --> 00:01:10.150
但本质上它并不是更线性或顺序性，或同步性。
But it's not fundamentally more linear or sequential, or synchronous in nature.

18
00:01:10.150 --> 00:01:14.219
所以在这方面真的没有太多的移动球。
So really hasn't moved the ball much on that respect.

19
00:01:14.219 --> 00:01:17.000
所以，谢谢真的不是特别关于解决回拨地狱的。
So thanks really aren't specifically about solving callback hell.

20
00:01:17.000 --> 00:01:20.569
但他们确实解决了一个非常重要的问题
But they do solve a really important problem that sets us up for

21
00:01:20.569 --> 00:01:23.207
我们将在这个研讨会上讨论的其他内容。
the rest of the stuff that we're going to discuss in this workshop.

22
00:01:23.207 --> 00:01:28.109
这就是为什么，我选择花时间去推动他们，
And that's why, I chose to spend time pushing on them,

23
00:01:28.109 --> 00:01:31.799
这不仅仅是一件琐碎的事情，他们真的很重要
it's not just a trivia sort of thing that they really are an important

24
00:01:31.799 --> 00:01:35.450
概念基础，我们在此基础上构建其余的东西。
conceptual foundation upon which we build the rest of stuff.

25
00:01:35.450 --> 00:01:38.560
那么主要的事情就是主要的外卖，为什么thunk是这样的呢？
So the major thing the major takeaway, why is the thunk so

26
00:01:38.560 --> 00:01:40.569
对我很重要为什么我要关心。
important to me why should I care.

27
00:01:40.569 --> 00:01:43.689
为什么它应该是我武器库的一部分
And why should it be something that's part of my arsenal of

28
00:01:43.689 --> 00:01:48.579
我用来解决异步编程问题的武器？
weapons that I used to take down asynchronous programming issues?

29
00:01:48.579 --> 00:01:53.650
这样做的原因是，通过使用in中的闭包
Well the reason for that is, that by using the closure in the in

30
00:01:53.650 --> 00:01:57.810
thunk模式通过使用闭包来维护某物的状态。
the thunk pattern by using the closure to maintain the state of something.

31
00:01:58.829 --> 00:02:04.260
我们消除了时间作为国家的一个复杂因素。
We eliminate time as a complecting factor of state.

32
00:02:04.260 --> 00:02:09.169
时间是程序中最复杂的状态因素。
Time is the most complex factor of state in your program.

33
00:02:09.169 --> 00:02:12.330
理解事情发生的顺序和
Understanding the order in which things happen and

34
00:02:12.330 --> 00:02:16.379
随着时间的推移，事情发生变化的方式是应用程序中最复杂的部分。
the way things change over time is the most complex part of your application.

35
00:02:16.379 --> 00:02:19.650
这是我们最难思考的部分，这是不可能的吗？
It's the hardest part for us to reason about, is it impossible?

36
00:02:19.650 --> 00:02:23.219
显然不是，但它确实让事情变得更难了。
Clearly not but it does make it harder.

37
00:02:23.219 --> 00:02:27.840
所以如果我们可以使用这个工具，这个保持状态的概念
So if we can use this tool, this notion of preserving state

38
00:02:27.840 --> 00:02:31.430
在这个值包装容器中，我们称之为thunk。
inside of this value wrapper container that we call a thunk.

39
00:02:32.610 --> 00:02:37.319
然后我们可以将这些值组合在一起，并且
We then are able to compose these values together, and

40
00:02:37.319 --> 00:02:42.460
不用担心顺序，时间就不成问题了。
not worry about the ordering, time becomes a non-issue.

41
00:02:42.460 --> 00:02:47.060
正如您在这里看到的代码，我对thunk one thunk two和thunk one thunk two进行排序
As you can see here with this code, I am sequencing the thunk one thunk two and

42
00:02:47.060 --> 00:02:48.699
把三个放在一起。
thunk three together.

43
00:02:48.699 --> 00:02:53.349
我们已经了解了之前的解决方案，
And we know already having looked at the previous solution,

44
00:02:53.349 --> 00:02:55.370
希望这在你们的脑海中足够新鲜。
hopefully that's fresh enough in your minds.

45
00:02:55.370 --> 00:02:57.609
查看了此解决方案后，我们看到
Having looked at this solution we see that there is

46
00:02:58.909 --> 00:03:00.740
基本上是一个比赛条件，如果你愿意的话。
basically a race condition if you will.

47
00:03:00.740 --> 00:03:06.139
在它有之前我们是否要求它的反应，
Between whether we ask for the thunks response before it has it,

48
00:03:06.139 --> 00:03:09.439
或者回答是否在询问之前返回。
or whether the response comes back before it's been asked.

49
00:03:09.439 --> 00:03:13.979
那里有一个基本的种族条件，这是一个时间问题。
There's a fundamental race condition there, that's a time issue.

50
00:03:13.979 --> 00:03:19.590
这是一个复杂的问题，我们必须在前一个练习中自行处理
That's a complexity issue that we had to manage ourselves in the previous exercise

51
00:03:19.590 --> 00:03:21.439
通过编写所有的循环垃圾和
by writing all that for loop crap and

52
00:03:21.439 --> 00:03:23.920
在全局变量中填充内容。
stuffing things inside of a global variable.

53
00:03:23.920 --> 00:03:26.520
这种复杂性是我们必须自己解决的问题
That complexity is something that we had to solve ourselves

54
00:03:26.520 --> 00:03:28.219
这个模式为我们解决了这个问题。
this pattern solves that for us.

55
00:03:29.280 --> 00:03:34.379
它采用了一个值并消除了时间作为关注点，这并不意味着
It takes a value and eliminates the time as the concern, it doesn't mean

56
00:03:34.379 --> 00:03:38.960
它消除了所有的顾虑，但我们最复杂的顾虑被消除了。
it eliminates all concerns but the most complex of our concerns is eliminated.

57
00:03:38.960 --> 00:03:42.210
它甚至没有真正被消除，它只是简单地被抽象掉了。
It's not even really eliminated, it's just simply abstracted away.

58
00:03:42.210 --> 00:03:45.719
所以这不是我们在代码中需要关心的事情
So it's not something we have to be concerned about in the parts of our code

59
00:03:45.719 --> 00:03:49.610
我们消费这些问题，消费这些价值。
where we're consuming these issues, consuming these values.

60
00:03:49.610 --> 00:03:51.639
所以如果你愿意，我们写一次管道，
So we write the plumbing once if you will,

61
00:03:51.639 --> 00:03:55.000
就像我刚才给你们展示的那样，创造Thunk的机制。
the mechanism by which a thunk is created as I showed you just there.

62
00:03:56.180 --> 00:04:00.099
然后在我们使用它的地方，是线41到50代表
And then where we use it, it's the lines 41 through 50 that represent

63
00:04:00.099 --> 00:04:02.900
我们反复编写的大部分代码。
the bulk of our code that we write over and over and over again.

64
00:04:02.900 --> 00:04:07.800
我们编写代码来推断正在发生的异步操作和
We write code to reason about asynchronous actions that are occurring and

65
00:04:07.800 --> 00:04:11.810
这是一种明显更合理的代码。
this is the kind of code that is significantly more reasonable.

66
00:04:11.810 --> 00:04:16.680
因为在这个问题上我们不必担心时间。
Than it was before because we don't have to worry about time in this issue.

67
00:04:16.680 --> 00:04:21.069
这才是最重要的，我反复强调这一点，因为我认为
That's what is so important and I'm harping on this so much because I think

68
00:04:21.069 --> 00:04:24.259
我们将要谈论的下一个话题，我们将跳跃到承诺中。
the next topic that we're about to talk about we're about to jump into promises.

69
00:04:24.259 --> 00:04:28.230
我认为人们在很大程度上忽略了为什么承诺是如此的重要
And I think the point has largely been missed about why promises are so

70
00:04:28.230 --> 00:04:28.860
革命性的。
revolutionary.

71
00:04:30.459 --> 00:04:36.250
我认为大多数人都把重点放在承诺作为API和
I think most people have focused on promises as an API and

72
00:04:36.250 --> 00:04:37.779
跟你说实话？
to be honest with you?

73
00:04:37.779 --> 00:04:41.519
承诺的API是我最不感兴趣的部分。
The API for promises is the least interesting part to me.

74
00:04:43.110 --> 00:04:46.319
对我来说更有趣的是承诺
It's far more interesting to me that promises

75
00:04:46.319 --> 00:04:49.470
是我们内置的这种模式的资格。
are a qualification of this pattern built in for us.

76
00:04:49.470 --> 00:04:53.139
所以我们甚至不需要像它所在的那样多地去思考它
So that we don't even really have to think about it as much it's even there for

77
00:04:53.139 --> 00:04:54.829
我们自动。
us automatically.

78
00:04:54.829 --> 00:04:57.959
这种管理国家模式的资格
A qualification of this pattern of managing state

79
00:04:57.959 --> 00:05:01.139
以与时间无关的方式在包装器内部。
internal inside of a wrapper in a time independent way.

80
00:05:02.300 --> 00:05:05.310
还有更多的承诺，但在和
There is more to promises than that, but the that in and

81
00:05:05.310 --> 00:05:07.569
本身就是革命性的。
of itself is revolutionary.

82
00:05:07.569 --> 00:05:11.319
它本身就给大众带来了我们本可以成为的东西
That in and of itself is bringing to the masses something which we could have been

83
00:05:11.319 --> 00:05:11.850
一直在做。
doing all along.

84
00:05:11.850 --> 00:05:12.480
但对于
But for

85
00:05:12.480 --> 00:05:16.250
不管是什么原因，这不是我们花时间思考的事情。
whatever reason this wasn't something that we spent time thinking about.

86
00:05:16.250 --> 00:05:19.490
我写了很多非常糟糕的异步代码，我希望我可以去
I've written an awful lot of really bad asynchronous code and I wish I could go

87
00:05:19.490 --> 00:05:23.600
回来，并修复所有的东西，一直使用的模式，如歌曲。
back and fix all of that stuff to have been using a pattern like songs.

88
00:05:23.600 --> 00:05:26.779
因为这会比我以前拥有的好很多，但是
Because this would have been a lot better than what I had before but

89
00:05:26.779 --> 00:05:27.860
故事还没结束。
it's not the end of the story.

90
00:05:27.860 --> 00:05:30.759
在这个工作坊里有更多的事情要做，还有更多的事情要做。
There's more to go, much more to go in this workshop.

91
00:05:30.759 --> 00:05:33.759
因此，以此作为我们的基础是提醒我们所处的位置和
So with that as our foundation is a reminder of where we're at and

92
00:05:33.759 --> 00:05:35.970
为什么雷鸣如此重要。
why thunks are so important.

93
00:05:35.970 --> 00:05:38.090
让我们一头扎进去，谈谈承诺。
Let's dive in and talk about promises.
