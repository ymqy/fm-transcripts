WEBVTT

1
00:00:00.280 --> 00:00:03.498
>> Brian Holt: 接下来要做的是 useEffect，我相信是下一个，
&gt;&gt; Brian Holt: Next thing let's go do is
useEffect, I believe is the next one,

2
00:00:03.498 --> 00:00:04.522
嗯， useEffect.
yeah, useEffect.

3
00:00:04.522 --> 00:00:06.724
所以它是在这里有效的
So it's effect.js over here.

4
00:00:09.648 --> 00:00:12.535
>> Brian Holt: 在此，我正在导入 React， useState和 useEffect。
&gt;&gt; Brian Holt: So here, I'm importing
React, useState, and useEffect.

5
00:00:12.535 --> 00:00:16.489
首先我要设定时间每一个
First thing is I'm setting up the time,
which every single

6
00:00:16.489 --> 00:00:20.140
时间是新日期，对，来自 JavaScript的新日期对象。
time this is a new Date, right,
a new Date object from JavaScript.

7
00:00:22.269 --> 00:00:27.679
然后我设置这个 useEffect，这个功能不会马上运行，对吧 ?
Then I set up this useEffect, which this
function is not immediately run, right?

8
00:00:27.679 --> 00:00:28.559
延迟了
It's delayed.

9
00:00:28.559 --> 00:00:30.469
所以它会先完成渲染
So it's gonna finish rendering first, and

10
00:00:30.469 --> 00:00:35.429
安排这事晚点再去好吗
it's scheduling this to be run later,
okay?

11
00:00:35.429 --> 00:00:37.159
所以这是第一次呈现
So then this renders for the first time,

12
00:00:37.159 --> 00:00:40.759
在这里，时间正好是缺省值。
where time is just going to be
the default value right here.

13
00:00:40.759 --> 00:00:44.570
这个 useEffect 还没有在非常，非常第一的情况下运行，好吗 ?
And this useEffect is not yet
run on the very, very first render, okay?

14
00:00:46.729 --> 00:00:50.938
然后，在此完成首次呈示之后，它将调用此 useEffect。
Then after this finish renders for
the first time, it calls this useEffect.

15
00:00:50.938 --> 00:00:56.509
或者说，你提供给这个 " 使用效果 " 的功能好吗 ?
Or rather, the function that you
provided to this useEffect, okay?

16
00:00:56.509 --> 00:01:00.817
在此，它会设置一个新的计时器来再次运行此效果。
And here it sets a new timer
to run this effect again.

17
00:01:00.817 --> 00:01:05.759
对不起，此 setTime 再次出现在
Sorry, this setTime again to a new date in

18
00:01:05.759 --> 00:01:10.004
1000 毫秒好吗
1,000 milliseconds, okay?

19
00:01:10.004 --> 00:01:11.769
这就是它每次都在做的事情。
And so
that's what it's doing every single time.

20
00:01:11.769 --> 00:01:13.939
请注意，这是使用设置超时。
Notice this is using set timeout.

21
00:01:13.939 --> 00:01:16.079
这实际上不是在使用 setInterval，对吗 ?
This not actually using setInterval,
right?

22
00:01:17.180 --> 00:01:20.796
因为每秒钟都在重新渲染
Because it's rerendering
every single one second,

23
00:01:20.796 --> 00:01:25.010
总是安排一个新的超时时间对吧
which is always scheduling a new timeout,
right?

24
00:01:25.010 --> 00:01:26.780
现在，你也可以用 setInterval 做这个，对吧 ?
Now, you could do this with
setInterval as well, right?

25
00:01:26.780 --> 00:01:29.932
但我想向你证明它总是在安排这个，对吧 ?
But I wanted to prove to you that it's
constantly scheduling this, right?

26
00:01:29.932 --> 00:01:32.283
这看起来就像每秒钟都在运行，对吧 ?
And this looks like it's
running every second, right?

27
00:01:32.283 --> 00:01:36.168
因此，它每秒都是这样做的。
So it's predictably
doing this every second.

28
00:01:36.168 --> 00:01:37.784
有道理吗
Does that make sense?

29
00:01:39.883 --> 00:01:43.718
>> Brian Holt: 现在注意到没有第二个参数。
&gt;&gt; Brian Holt: Now notice that
this has no second parameter.

30
00:01:43.718 --> 00:01:45.879
这意味着每次出现这种情况
That means that every single
time this render happens,

31
00:01:45.879 --> 00:01:47.759
这会让这事再次发生对吧
it's scheduling this to run again, right?

32
00:01:47.759 --> 00:01:50.890
因此，每次此超时更改都将运行此效果。
So this effect runs every single
time that this timeout changes.

33
00:01:52.490 --> 00:01:56.478
我可以在这里说空话
I can say empty array here.

34
00:01:56.478 --> 00:02:02.219
突然之间，通知停止了更新，对吧 ?
And all of a sudden,
notice that this stopped updating, right?

35
00:02:02.219 --> 00:02:05.379
因为我给了它一个依赖性清单，我说这没有依赖性，所以
Because I gave it a list of dependencies
and I said this has no dependencies, so

36
00:02:05.379 --> 00:02:08.680
只有在我第一次这样做的时候才会这么做
only run this on the very,
very first time that I run this.

37
00:02:08.680 --> 00:02:10.067
这就是它所做的对吧
Which is what it did, right?

38
00:02:11.954 --> 00:02:17.299
> > Brian Holt: 所以现在它只会运行一次
&gt;&gt; Brian Holt: So
now it's only gonna run once and

39
00:02:17.299 --> 00:02:20.129
永远不会再跑了
never run again.

40
00:02:20.129 --> 00:02:21.587
一旦我再把它取出来
As soon as I take this out again,

41
00:02:21.587 --> 00:02:23.967
通知它会回到每一个时间运行
notice it'll go back to
running every single time.

42
00:02:27.191 --> 00:02:31.228
>> Brian Holt: 现在，我真正应该在此做的是我调用 setTime
&gt;&gt; Brian Holt: Now, what I really should
do here is you see that I call setTime

43
00:02:31.228 --> 00:02:32.090
就在这里
right here.

44
00:02:33.579 --> 00:02:38.216
根据 React 团队，您应该使此依赖关系，如果
According to the React team, you should
make this a dependency that says if

45
00:02:38.216 --> 00:02:42.146
setTime 更改， >> Brian Holt:
setTime changes,
&gt;&gt; Brian Holt: Which it won't,

46
00:02:42.146 --> 00:02:44.430
它是这个钩子给你提供的功能
cuz it's a function that's
provided to you by this hook here.

47
00:02:44.430 --> 00:02:45.280
所以这永远不会改变
So this'll never change.

48
00:02:45.280 --> 00:02:49.490
所以，但是根据雷act队，他们还觉得这是一个附属关系，所以
So but according to the React team,
they still think this is a dependency, so

49
00:02:49.490 --> 00:02:50.280
你应该把它放在那儿
you should put it there.

50
00:02:50.280 --> 00:02:52.590
所以我说他们知道他们在干什么，他们写的。
So I say they know what they're doing,
they wrote it.

51
00:02:52.590 --> 00:02:56.216
因此，将 setTime 置于此处作为依赖关系。
So put setTime here as a dependency.

52
00:02:56.216 --> 00:03:00.331
库兹发现这还是有用的也许它不起作用
Cuz notice this still works the way
that should, maybe it doesn't.

53
00:03:02.645 --> 00:03:04.016
>> Brian Holt: 你知道吗 ? 这也不是真的
&gt;&gt; Brian Holt: You know what?
That's not true either.

54
00:03:04.016 --> 00:03:07.487
所以应该是时候了，因为时间是这里的应急预案。
So it really should be time,
because time is the contingency here.

55
00:03:09.967 --> 00:03:10.586
>> Brian Holt: 这是正确的。
&gt;&gt; Brian Holt: That's true.

56
00:03:14.984 --> 00:03:17.584
>> Brian Holt: 在任何情况下，我们都希望它运行每个呈现，因为
&gt;&gt; Brian Holt: In any case, we always want
it to run every single render because

57
00:03:17.584 --> 00:03:19.289
这件事就是这么做的
that's what this component does.

58
00:03:19.289 --> 00:03:21.009
所以我就把这个空了
So I would just leave this empty,
actually.

59
00:03:24.579 --> 00:03:28.348
现在，您在这里看到它正在返回一个调用 clearTimeout的函数。
Now, you notice here that it's returning
a function that calls clearTimeout.

60
00:03:28.348 --> 00:03:33.328
因为超时，如果你不清楚，你可能有
Because timeouts, if you don't clear them,
you can potentially have

61
00:03:33.328 --> 00:03:38.143
我有个奇怪的虫子然后我就把它解开了
weird bugs where I have this useEffect
thing, and then I unmount it.

62
00:03:38.143 --> 00:03:42.246
然后就会尝试调用 setTimeout ，或者
And it's then going to try and
call setTimeout, or rather,

63
00:03:42.246 --> 00:03:46.927
在未安装的组件上再次设置时间，这很糟糕，对吗 ?
setTime again on an unmounted component,
and that's bad, right?

64
00:03:46.927 --> 00:03:52.802
所以我现在所做的就是这个运行的时候，它抓住了这个计时器。
So here what I do is anytime that
this runs, it grabs this timer.

65
00:03:52.802 --> 00:03:55.479
如果这事没安装就能清理计时器了对吧
And if this gets unmounted,
it'll clear the timer, right?

66
00:03:55.479 --> 00:03:57.939
因此，此功能将运行，这是清除功能。
So this function will get run,
this is the clean up function.

67
00:03:59.219 --> 00:04:02.550
因此，如果您在此处执行 AJAX 请求，那么可以取消该请求。
So if you're doing AJAX requests here,
you could cancel the request.

68
00:04:02.550 --> 00:04:07.000
如果您正在执行与 jQuery 集成的操作，那么可以清除 RD3 或
If you're doing something like integrating
with jQuery, you could clear up RD3 or

69
00:04:07.000 --> 00:04:09.099
就像这样你可以把所有东西都清理一下
something like that,
you could clear up all that stuff.

70
00:04:11.139 --> 00:04:13.330
这就是你清理的地方
So this is where you
clean up with effects.
