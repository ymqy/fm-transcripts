WEBVTT

1
00:00:00.540 --> 00:00:02.299
>> Brian Holt: 我们继续进行迁移。
&gt;&gt; Brian Holt: Let's go ahead and
start migrating things.

2
00:00:05.070 --> 00:00:09.352
因此，缺省情况下， TypeScript 不会检查名为 .js的文件。
So by default, TypeScript will not
check files that are called .js.

3
00:00:09.352 --> 00:00:12.821
这对我们是有帮助的因为我们可以在一个半迁徙的
This is kinda helpful for us, because we
can leave our project in a semi-migrated

4
00:00:12.821 --> 00:00:16.309
状态，我们可以用一块来把它移动，不要弄坏它的应用。
state, and we could just migrate it piece
by piece and not break the application.

5
00:00:16.309 --> 00:00:18.359
我们什么都不用做
We don't have to do
everything all at once.

6
00:00:18.359 --> 00:00:22.170
我们就从一个小件开始就开始了
So we're just gonna start with
just like one small piece.

7
00:00:22.170 --> 00:00:26.370
所以我们先从莫达 .js 开始吧，对吧 ?
So let's go ahead and
start with the Modal.js right here, right?

8
00:00:27.510 --> 00:00:32.805
所以我要你右键单击这个
So I want you to right-click on this,

9
00:00:32.805 --> 00:00:36.786
并表示重命名 Modal.tsx。
and say rename Modal.tsx.

10
00:00:36.786 --> 00:00:42.000
我知道我们没有为这件事做 jsx 的事对吧
Now I know we didn't do jsx for
the JS parts of this, right?

11
00:00:42.000 --> 00:00:45.289
但对于 TypeScript ，它需要更多或更少的时间。
But with TypeScript,
it's more or less required.

12
00:00:45.289 --> 00:00:47.270
你可以得到它但别担心
You can get around it, but
let's just not worry about it.

13
00:00:47.270 --> 00:00:49.789
我们还是用点吧
Let's just stick with .tsx, okay?

14
00:00:52.320 --> 00:00:55.801
然后突然之间一切都开始变成红色
And then all of a sudden, everything's
going to start turning red and

15
00:00:55.801 --> 00:00:57.340
对你大喊大叫对吧
yelling at you, right?

16
00:00:57.340 --> 00:00:58.939
Cuz TypeScript 是愤怒的。
Cuz TypeScript is angry.

17
00:01:01.686 --> 00:01:02.255
>> Brian Holt: 对不起。
&gt;&gt; Brian Holt: Sorry.

18
00:01:07.819 --> 00:01:10.219
>> Brian Holt: 因此，编译器对我们感到愤怒。
&gt;&gt; Brian Holt: So
the compiler is angry at us.

19
00:01:10.219 --> 00:01:11.379
所以现在我们要经历
So now we have to go through and

20
00:01:11.379 --> 00:01:14.239
识别出不知道怎么想的东西
identify things that it doesn't
know how to figure out.

21
00:01:14.239 --> 00:01:16.299
我们得给它更多的提示，对吗 ?
We have to give it more hints, right?

22
00:01:16.299 --> 00:01:18.769
所以在一些事情上，它能把它弄明白，对吧 ?
So on some things,
it can just figure it out, right?

23
00:01:18.769 --> 00:01:22.900
可以看到莫达根在这里说我知道这是 HTMLElement
It can see modalRoot right here and say,
like, I know this is an HTMLElement or

24
00:01:22.900 --> 00:01:26.046
因为我知道 document.getElementById 是什么。
null because I know what
document.getElementById does.

25
00:01:26.046 --> 00:01:29.359
但我不知道孩子是什么，对我来说是新的。
But I don't know what the hell
children is, that's new to me.

26
00:01:31.730 --> 00:01:36.239
所以，让我们继续做一些这些事情。
So let's go ahead and
start doing some of these things.

27
00:01:39.009 --> 00:01:46.867
>> Brian Holt: So Modal 此处， >> Brian Holt: 这是一个 React。
&gt;&gt; Brian Holt: So Modal here,
&gt;&gt; Brian Holt: This is a React.

28
00:01:50.209 --> 00:01:53.570
>> Brian Holt: 函数组件，函数组件，
&gt;&gt; Brian Holt: Function component,
function component,

29
00:01:53.570 --> 00:01:56.229
功能组件，在其中。
function component, there it is.

30
00:02:02.120 --> 00:02:04.911
>> Brian Holt: 因此，我告诉它这是一个功能组件，
&gt;&gt; Brian Holt: So, I told it that
this is a function component,

31
00:02:04.911 --> 00:02:08.193
它是从这里自动为我进口的
which it imported from React
here automatically for me.

32
00:02:08.193 --> 00:02:11.555
现在它知道莫达尔是个 FunctionComponent
And so now it knows Modal's
a FunctionComponent, which means it knows

33
00:02:11.555 --> 00:02:15.610
因为它知道 FunctionComponent 是什么，是吗 ?
what children is now because it knows
what FunctionComponent is, right?

34
00:02:15.610 --> 00:02:18.689
只要在适当的地方告诉它正确的提示它就可以
So just by telling it the right hints
in the right places, it's able to like,

35
00:02:18.689 --> 00:02:21.105
好吧我知道这些点是怎么连接的对吧
okay, I see how these dots connect, right?

36
00:02:21.105 --> 00:02:24.509
它会试图让你尽可能地为它做最起码的工作。
And it's going to try to get you to
do the bare minimum possible for it.

37
00:02:24.509 --> 00:02:29.349
但如果我现在悬浮在这里，我注意到 React 子代是 React.ReactNode。
But if I hover over this now, I notice
that React children is React.ReactNode.

38
00:02:29.349 --> 00:02:30.937
所以我不需要告诉它，因为它知道。
So I don't have to tell it that,
because it knows.

39
00:02:36.159 --> 00:02:39.996
> > Brian Holt: 那么现在它会很愤怒，因为它会说，嘿，
&gt;&gt; Brian Holt: So now it's gonna be angry
at this, because it's gonna say, hey,

40
00:02:39.996 --> 00:02:41.960
elRef 是这样不好的
elRef is, like this isn't good.

41
00:02:43.920 --> 00:02:45.969
所以我们可以在这里做一些事情。
So we can do a couple of things here.

42
00:02:45.969 --> 00:02:50.879
首先，我们已经知道 React.Modal 不会经常重新呈现。
The first thing, we already know that
React.Modal doesn't re-render very often.

43
00:02:50.879 --> 00:02:53.647
所以我们可以直接把它放在这里。
So we can actually just
put this directly in here.

44
00:02:57.770 --> 00:02:59.060
> > 布莱恩 - 霍尔特: 现在这样会好起来的。
&gt;&gt; Brian Holt: And
now that's gonna be okay.

45
00:02:59.060 --> 00:03:03.759
库兹这一切都是个基本的问题对吧
Cuz this is always gonna
be a div basically, right?

46
00:03:08.099 --> 00:03:10.300
>> Brian Holt: 好的，在这里使用。
&gt;&gt; Brian Holt: Okay, useEffect here.

47
00:03:10.300 --> 00:03:14.318
所以我们要说的第一件事是没有莫达根
So the first thing we're gonna say
here is if there's no modalRoot.

48
00:03:16.610 --> 00:03:20.556
>> Brian Holt: 将始终存在，但返回。
&gt;&gt; Brian Holt: Which there always will be,
but return.

49
00:03:24.889 --> 00:03:27.819
> > 布莱恩 - 霍尔特:
&gt;&gt; Brian Holt: So
that's gonna do away with this part.

50
00:03:27.819 --> 00:03:29.409
对，因为现在它知道
Right, because now, it knows for

51
00:03:29.409 --> 00:03:33.175
如果不存在莫达根我就不能来了对吧
a fact that I can't get here
unless modalRoot exists, right?

52
00:03:34.590 --> 00:03:35.500
这就是我告诉你的
And this is what I'm telling you,

53
00:03:35.500 --> 00:03:38.689
它不会让你做 X2 大写的，对吧 ?
that it won't let you do things
like X2 uppercase, right?

54
00:03:38.689 --> 00:03:39.579
像模态根一样
Like modal root.

55
00:03:39.579 --> 00:03:43.670
如果不存在，那么模态根将为空，对吗 ?
If this doesn't exist,
then modal root is gonna be null, right?

56
00:03:43.670 --> 00:03:46.139
然后这会导致错误，而 TypeScript不太酷。
And then this would cause an error and
TypeScript's not cool with that.

57
00:03:47.240 --> 00:03:50.210
所以一旦你做到了，你就需要在这里做一件事
So once you've done that, then the next
thing that you need to do here is you need

58
00:03:50.210 --> 00:03:51.509
把它变成一个功能
to make this into a function.

59
00:03:51.509 --> 00:03:54.479
因为它不指望能从这个功能中得到任何东西
Because it doesn't expect anything
to get back from this function,

60
00:03:54.479 --> 00:03:56.620
它预期这是一个虚空回归，并且
it expects that this is a void return, and

61
00:03:56.620 --> 00:04:01.280
这在技术上是有回报的
this is technically something
that returns something.

62
00:04:02.500 --> 00:04:03.439
只要我们能这么做
So as long as we make this so

63
00:04:03.439 --> 00:04:07.020
再也回不来了，就又开心了，对吧 ?
it doesn't return anything anymore,
then it's happy again, right?

64
00:04:07.020 --> 00:04:09.719
但是该函数的调用签名需要返回任何内容。
But the call signature of this
function needs to be return nothing.

65
00:04:11.250 --> 00:04:13.270
就在 14 号线上
Right there on line 14.
