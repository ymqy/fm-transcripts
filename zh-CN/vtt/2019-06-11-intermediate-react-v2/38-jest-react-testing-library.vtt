WEBVTT

1
00:00:00.390 --> 00:00:02.819
> > 布莱恩: 现在我们只做一个测试
&gt;&gt; Brian: So now we're gonna
do just a modicum of testing.

2
00:00:02.819 --> 00:00:07.328
在测试开始之前我可能不是你想学的人
Before we get started in testing, I'm
probably not the person you wanna learn

3
00:00:07.328 --> 00:00:11.308
因为我不喜欢测试我的代码
testing from because I don't really
like testing my code that much.

4
00:00:11.308 --> 00:00:14.167
特别是，我不喜欢测试 UI 代码。
Specifically, I don't like
testing UI code a lot.

5
00:00:14.167 --> 00:00:17.824
当我在 Netflix 工作的时候我在主页上工作
When I worked at Netflix,
I worked on the homepage, and there's so

6
00:00:17.824 --> 00:00:21.806
在这个网页上每天不断变化的流通量
much flux in that homepage where it's
constantly changing day over day,

7
00:00:21.806 --> 00:00:24.458
那个写测试是毫无意义的吧
that writing test for
it was pointless, right?

8
00:00:24.458 --> 00:00:28.594
因为我们花了很多时间或更多的时间写测试
Because we'd spend as much time or
more time writing test and

9
00:00:28.594 --> 00:00:33.636
那就在第二天我们又改头版的时候删了。
then just deleting them the next day
when we changed the front page again.

10
00:00:33.636 --> 00:00:38.470
所以，这就是为什么我不写大量的测试来专门针对 React 代码，因为
So, that's why I don't write a lot of
tests for specifically React code, because

11
00:00:38.470 --> 00:00:42.973
它改变了所有的时间，对我来说，没有太多的意义去做。
it changes all the time, and to me that
doesn't make a lot of sense to do that.

12
00:00:42.973 --> 00:00:47.162
但我要说的是我们的 API 客户
But what I will say for
things like we have our API client,

13
00:00:47.162 --> 00:00:50.142
我来测试下地狱吧
I'll test the hell out of that, right.

14
00:00:50.142 --> 00:00:54.148
我将业务逻辑抽象为模块，并测试模块和
I'll abstract business logic into modules,
and I'll test the modules and

15
00:00:54.148 --> 00:00:55.969
他们就不会测试 UI 代码了
then they won't test the UI code.

16
00:00:55.969 --> 00:00:59.776
所以你还需要写前端测试，但是
So you still need to write
front end tests, but

17
00:00:59.776 --> 00:01:02.710
对 UI 组件的要求不高。
just not as much for UI components.

18
00:01:02.710 --> 00:01:06.296
说了，就像你有矛盾的问题，对吧 ?
That being said, like if you
have consistent problems, right?

19
00:01:06.296 --> 00:01:10.426
例如， Facebook 不断地网站出现问题
So for example, Facebook constantly sites
have they have problems with showing

20
00:01:10.426 --> 00:01:12.621
在错误的时间通知，对。
notifications at the wrong time, right.

21
00:01:12.621 --> 00:01:16.864
所以他们做了很多测试
So they've wrote a lot of tests,
testing that specific things

22
00:01:16.864 --> 00:01:21.277
例如确保它们在正确的时间显示通知。
like making sure that they show
notifications at the right time.

23
00:01:21.277 --> 00:01:22.605
所以这也许是合适的。
So that might be appropriate.

24
00:01:22.605 --> 00:01:24.093
我要教你怎么做
And I'm gonna show you how to do it and

25
00:01:24.093 --> 00:01:25.966
那你就可以自己决定了
then you can make your
own decisions about it.

26
00:01:25.966 --> 00:01:30.765
还有一个 kentc.cented on fronted masters ， is advanced React testing
Again there is a kentc.course on fronted
masters that is advanced React testing

27
00:01:30.765 --> 00:01:33.456
在那里他深入研究了如何去做
where he goes into great
depth on how to do it.

28
00:01:33.456 --> 00:01:36.614
我要用他的图书馆给你看一点点
And I'm actually gonna show you
a little bit using his library.

29
00:01:36.614 --> 00:01:40.520
我觉得他是用 Jest 以外的东西我今天就用 Jest 了
I think he uses something other than Jest,
and I'm gonna use Jest today so

30
00:01:40.520 --> 00:01:42.034
也许对你有用
that might be useful to you.

31
00:01:42.034 --> 00:01:45.981
以前的这个课程我相信也用了莫查
Previous versions of this course
I believe used Mocha as well so

32
00:01:45.981 --> 00:01:48.293
对你也很有意思
that's interesting to you as well.

33
00:01:48.293 --> 00:01:51.225
我认为是使用莫查的 v3 或 v2 。
I think that's v3 or v2 that uses Mocha.

34
00:01:56.222 --> 00:02:01.103
> > 布莱恩: 好的，我们要做的
&gt;&gt; Brian: Okay, so what we're gonna do

35
00:02:01.103 --> 00:02:05.792
现在我们要说的是
right now is we're gonna say

36
00:02:05.792 --> 00:02:10.870
npm install- 大写 D jest as as
npm install- capital D jest as

37
00:02:10.870 --> 00:02:15.967
反应测试图书馆
well as react-test-library

38
00:02:20.997 --> 00:02:23.739
>> Brian: 好，在您的源中
&gt;&gt; Brian: Okay, inside of your source

39
00:02:23.739 --> 00:02:30.258
我们将创建名为 __tests__的新文件夹。
director we are going to create
a new folder called __tests__.

40
00:02:30.258 --> 00:02:33.096
为什么双方都要双重下划线，要么是 duners?
Why double underscores on both sides,
or dunders?

41
00:02:33.096 --> 00:02:34.812
我没说这就是他们叫的
I did not make that up,
that's what they're called.

42
00:02:34.812 --> 00:02:38.676
这是一个 Python 的东西。
[LAUGH] It's a Python thing.

43
00:02:38.676 --> 00:02:41.497
我认为它是从 Python 产生的，它可能是从 Python中存在的。
I think it arose from Python,
it might have been existing from Python.

44
00:02:41.497 --> 00:02:44.402
这不是一个 JavaScript 的问题，它肯定是从 Python中得到的。
It's not a JavaScript thing,
it's definitely more from Python.

45
00:02:44.402 --> 00:02:47.014
但这意味着魔法是吧
But it means magical, right?

46
00:02:47.014 --> 00:02:51.228
所以如果你在两边都有下划线的话，基本就意味着什么东西
So if you have underscores on both sides,
it basically means something is looking

47
00:02:51.228 --> 00:02:53.557
啊，这个这个要叫这个，对吧 ?
for this, so
it must be called this, right?

48
00:02:53.557 --> 00:02:58.204
因此在此特定情况下， jest 将自动查找测试目录
So in this particular case, jest will
automatically find test directories

49
00:02:58.204 --> 00:03:01.485
以这种方式命名并在它们内部运行测试，对吧 ?
named like this and
run tests inside of them, right?

50
00:03:01.485 --> 00:03:03.376
所以如果我在这里创建一个新的文件
So if I create a new file here,

51
00:03:03.376 --> 00:03:09.375
我仍然要叫我的 SearchParams >> Brian: .test.js，
I'm still gonna call mine SearchParams
&gt;&gt; Brian: .test.js,

52
00:03:09.375 --> 00:03:12.506
但我可以叫它 SearchParameters.js
but I actually could just call
it SearchParameters.js, and

53
00:03:12.506 --> 00:03:16.433
因为它在神奇的测试目录里是吧
it would still be found because it's
in the magical test directory, right?

54
00:03:19.146 --> 00:03:25.292
>> Brian: 否则，它将查找名为 .test.js 或 .spec.js的文件。
&gt;&gt; Brian: Otherwise it will look for
files called .test.js, or .spec.js.

55
00:03:25.292 --> 00:03:25.792
所以
So,
