WEBVTT

1
00:00:00.000 --> 00:00:03.263
>> Brian Holt: 前面提到的所有这些部分都将转至
&gt;&gt; Brian Holt: All these sections like I
was alluding to previously are going to

2
00:00:03.263 --> 00:00:05.687
除了第一个忏悔的人之外
have to do with one repo,
except the first one.

3
00:00:05.687 --> 00:00:09.333
我们要做的第一个是深度的胡克丝
The first one that we're gonna
do here is Hooks in Depth.

4
00:00:09.333 --> 00:00:13.089
这实际上是在一个代码沙箱上
And this is actually going
to be on a code sandbox,

5
00:00:13.089 --> 00:00:17.303
就像 CodePen 或 JSBin 或类似的东西
which is like a CodePen or
JSBin or something like that.

6
00:00:17.303 --> 00:00:22.609
那么，请在此处单击 " 深度 " 中的 " 挂钩 " 。
So, go ahead and
click in to Hooks in Depth here.

7
00:00:22.609 --> 00:00:27.949
打开此链接，在该链接中，打开此链接是代码沙箱，
And open this link in where it
says open this is code sandbox,

8
00:00:27.949 --> 00:00:30.368
只要打开它就可以了
just open that link there.

9
00:00:30.368 --> 00:00:35.531
所以在第 V5 React V5 的完整简介中，我们将进入 " 使用状态" ，
So in the Complete Intro to React V5,
we go over useState,

10
00:00:35.531 --> 00:00:39.058
useEffect， useContext 和 useRef。
useEffect, useContext, and useRef.

11
00:00:39.058 --> 00:00:41.899
我们把部分的 useRef ，不是全部都去了。
We go over parts of useRef, not all of it.

12
00:00:41.899 --> 00:00:43.460
但这三个都被覆盖了
But these three are pretty well covered.

13
00:00:43.460 --> 00:00:45.826
useState， useEffect和 useContext。
useState, useEffect, and useContext.

14
00:00:45.826 --> 00:00:48.716
我们会再过去的但是你知道
We'll go over them again,
but just so you know,

15
00:00:48.716 --> 00:00:53.664
如果你经历了这一过程你至少应该明白这一点
if you've gone through that course, you
should understand at least most of that.

16
00:00:53.664 --> 00:00:55.264
用这四个钩子
Using these four hooks,

17
00:00:55.264 --> 00:00:59.689
我只是想说你能解决 99% 的问题
I'm just going to assert that you
can cover 99% of your problems.

18
00:00:59.689 --> 00:01:02.515
大概 100% 的问题， [LAUGH] 是吧 ?
Maybe 100% of your problems,
[LAUGH] right?

19
00:01:02.515 --> 00:01:07.493
另一个是你可能使用的其他钩子的长尾巴
The other ones are kind of a long tail of
other hooks that you could possibly use,

20
00:01:07.493 --> 00:01:10.335
但我要教你怎么做
but I'm going to show
you how to do it anyway.

21
00:01:10.335 --> 00:01:13.072
你可以看到我有每个钩子
So in here you can see
that I have each hook,

22
00:01:13.072 --> 00:01:17.881
我直接链接到组件，然后对其进行说明。
I link directly into the component and
then there's an explanation of it.

23
00:01:17.881 --> 00:01:19.939
所以，如果你想跟上它，那就是我们要做的。
So if you want to keep up with it,
that's what we're going to do.

24
00:01:19.939 --> 00:01:23.352
我们不打算写任何代码，这都是我的
We're not going to actually write any
code, this is all just going to be me

25
00:01:23.352 --> 00:01:26.176
通过在上面写的密码说话
talking through the code that's
already written up there.

26
00:01:26.176 --> 00:01:30.365
你在这里看到的是有一个项目有一堆
What you see in front of you here is
there's a project that has a bunch of

27
00:01:30.365 --> 00:01:32.147
这里的不同组件
different components here.

28
00:01:32.147 --> 00:01:38.037
然后它有一个应用页面来呈现各种不同的事物。
And then it has one app page that renders
out all of these various different things.

29
00:01:38.037 --> 00:01:40.617
所以我们要用一块过去的
So we're just going to go
through piece by piece and

30
00:01:40.617 --> 00:01:43.141
谈论每个人的钩子和他们的行为
talk about each individual hook and
what they do.

31
00:01:43.141 --> 00:01:47.597
所以您可以在这里看到 index.js ，它会呈现一个组件，并且
So you can see here the index.js,
all it does is it renders a component, and

32
00:01:47.597 --> 00:01:51.718
那么它就会有一个小时，这是一个横向的规则，就是这里的线。
then it does a hr, which is a horizontal
rule, which is the line here.

33
00:01:51.718 --> 00:01:57.918
它是一个 HTML 组件，或者是一个标签，一个旧的。
It's a HTML component, or
a tag rather, an old one at that.

34
00:01:57.918 --> 00:01:59.219
好吗 ?
Okay?

35
00:01:59.219 --> 00:02:03.331
那么让我们来看第一个，就是国家，
So let's go take a look at the first one,
which is state,

36
00:02:03.331 --> 00:02:05.570
这里有全州的
which is state.js over here.

37
00:02:08.211 --> 00:02:11.039
>> Brian Holt: 这是第一次点击，如果点击
&gt;&gt; Brian Holt: And it's this first
one here where if you click on

38
00:02:11.039 --> 00:02:12.354
它改变了颜色
it it changes colors.

39
00:02:12.354 --> 00:02:16.002
Magical，对吧 ?
Magical, right?

40
00:02:16.002 --> 00:02:18.081
让我们来谈谈规范这个问题的代码。
So let's talk about
the code that governs that.

41
00:02:21.054 --> 00:02:23.854
>> Brian Holt: 使其更小。
&gt;&gt; Brian Holt: Make this a lot smaller.

42
00:02:23.854 --> 00:02:27.292
好了我们从雷法进口了 React 和 useState
Okay, so here we're importing React and
useState from React.

43
00:02:27.292 --> 00:02:31.512
这个有状态的组件，就是一个箭头函数，对。
And this stateful component,
which is just a arrow function, right.

44
00:02:31.512 --> 00:02:37.373
我们正在使用使用状态，我们正在将初始状态设置为 true，对。
We're using useState and we're setting
the initial state to be true, right.

45
00:02:37.373 --> 00:02:41.247
所以你第一次得到绿绿的时候就意味着
So that means on the first
time that you get isGreen,

46
00:02:41.247 --> 00:02:43.986
艾格林会是真的对吧
isGreen is going to be true, right.

47
00:02:43.986 --> 00:02:46.965
但这只适用于非常非常的第一次，这是默认状态。
But that's only applicable on the very,
very first time, it's the default state.

48
00:02:46.965 --> 00:02:49.937
之后的一切都是一个国家的容器
Everything after that,
it's a state container, so

49
00:02:49.937 --> 00:02:52.187
它会随着时间的推移而保持状态
it's keeping track of state over time.

50
00:02:52.187 --> 00:02:58.784
所以钩子会回到一对，一个元组，一个元组，不管你想说什么。
So hook comes back in a pair, a tuple,
a tuple, whatever you wanna call it.

51
00:02:58.784 --> 00:03:00.580
在 JavaScript 中，它是两个数组。
In JavaScript, it's an array of two.

52
00:03:00.580 --> 00:03:04.900
在 JavaScript 中没有特殊的数据结构但是在 Python中
There's no special data structure for
this in JavaScript, but in Python,

53
00:03:04.900 --> 00:03:05.985
有，对吧 ?
there is, right?

54
00:03:05.985 --> 00:03:09.014
或者哈斯凯尔之类的
Or Haskell or something like that.

55
00:03:09.014 --> 00:03:10.459
这就是破坏
So this is destructuring out.

56
00:03:10.459 --> 00:03:13.870
所以第一件事是我们要跟踪的实际情况。
So the first thing is the actual piece of
state that we're going to keep track of.

57
00:03:13.870 --> 00:03:19.770
第二个是更新那个状态的功能。
And the second thing is a function
to update that piece of state.

58
00:03:19.770 --> 00:03:22.003
这是第一次呈现绿色。
So here it's green on the first render.

59
00:03:22.003 --> 00:03:26.449
如果我们在这里刷新页面，您可以在首次呈现时看到它是绿色的。
If we were to refresh the page here,
You can see it's green on first render.

60
00:03:26.449 --> 00:03:29.210
所以艾格林是真的，对吧 ?
So isGreen is true, right?

61
00:03:29.210 --> 00:03:32.550
我们现在正在做的是说颜色是绿色的，然后放绿色。
And here all we're doing is saying if
the color is green, then put lime green.

62
00:03:32.550 --> 00:03:35.558
如果不是的话就放了克里姆森
If it's not, then put crimson.

63
00:03:35.558 --> 00:03:39.699
所以如果我点击它，我就把这个功能叫做 " 绿色 "
So if I click on it, then I call this
function here that says set green to

64
00:03:39.699 --> 00:03:42.661
正好相反的是什么是绿色的对吧
be the opposite of whatever isGreen was,
right?

65
00:03:42.661 --> 00:03:44.008
所以现在是 " 绿色 " 是真的
So right now isGreen is true.

66
00:03:44.008 --> 00:03:49.776
所以我称这个 onClick 处理程序，它会将它设置为 false，对吗 ?
So I call this onClick handler,
it's gonna to set this to be false, right?

67
00:03:49.776 --> 00:03:52.735
而且，如果我点击它，它会变成红色。
And lo and behold,
if I click on it, it turns to red.

68
00:03:55.968 --> 00:03:58.723
>> Brian Holt: 请记住，您可以在一个功能中像您一样多挂钩
&gt;&gt; Brian Holt: Keep in mind you can have
as many hooks in one function as you

69
00:03:58.723 --> 00:03:59.914
可能是想，对吧 ?
possibly want, right?

70
00:03:59.914 --> 00:04:02.134
因此，我可以有多个不同的状态。
So I can have multiple
different pieces of state.

71
00:04:02.134 --> 00:04:07.229
每个人都有自己的更新功能
And each one of them can have
their own updater function.

72
00:04:07.229 --> 00:04:07.729
再一次
So again,

73
00:04:07.729 --> 00:04:11.253
挂钩的主要规则之一是它们不能在条件中。
one of the cardinal rule of hooks is
they cannot be inside of conditionals.

74
00:04:11.253 --> 00:04:15.611
它们不能用于循环或任何类似的情况。
They cannot be inside of for
loops or anything like that.

75
00:04:15.611 --> 00:04:19.276
他们总是要打电话，因为很，很有条件，
They always have to be called,
because it's very, very contingent on or

76
00:04:19.276 --> 00:04:22.187
取决于它是否每个时间都在同一顺序中。
dependent on it being in
the same order every single time.

77
00:04:22.187 --> 00:04:27.084
所以如果我打十个电话的话我要用同样的顺序来称呼它
So if I call useState ten times, I need to
call it in the exact same order, every,

78
00:04:27.084 --> 00:04:28.310
就像 10 次一样
like all ten times.
