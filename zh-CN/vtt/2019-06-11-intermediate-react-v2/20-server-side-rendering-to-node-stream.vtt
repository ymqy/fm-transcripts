WEBVTT

1
00:00:00.130 --> 00:00:02.009
> > 布莱恩 - 霍尔特: 还有一件事我想给你看
&gt;&gt; Brian Holt: There's one more
thing that I wanna show you about

2
00:00:02.009 --> 00:00:03.390
服务器端呈现。
server side rendering.

3
00:00:03.390 --> 00:00:06.549
这是 SSR 分支中的第一个落实。
This is the first commit
in the SSR branch.

4
00:00:06.549 --> 00:00:12.282
所以如果你进来了， >> Brian Holt: 我们的 repo 在这里，
So if you come into,
&gt;&gt; Brian Holt: Our repo here,

5
00:00:12.282 --> 00:00:15.406
SSR 有 SSR 分支
and there's an SSR branch, SSR.

6
00:00:18.114 --> 00:00:21.449
>> Brian Holt: 您可以看到此处有两个用于 SSR的落实。
&gt;&gt; Brian Holt: You can see that there
are two commits in here for SSR.

7
00:00:22.579 --> 00:00:23.940
其中一个将呈现为字符串
One of them uses render to string and

8
00:00:23.940 --> 00:00:26.309
然后我要给你看第二个被称为节点串的
then I'm gonna show you a second
one called render to node string.

9
00:00:26.309 --> 00:00:29.140
这是一个我非常兴奋的新 API 。
So this is a really new API
that I'm pretty excited about.

10
00:00:31.390 --> 00:00:36.098
因此，请返回到 index.js， index.js 。
So go back to your index.js, index.js.

11
00:00:36.098 --> 00:00:39.908
请转至 renderToString ，而我们将改为使用 renderToNodeStream 。
Go up to your renderToString and
we'll say renderToNodeStream instead.

12
00:00:47.081 --> 00:00:52.319
> > 布莱恩・霍尔特:
&gt;&gt; Brian Holt: So
there's kind of a new idea in

13
00:00:52.319 --> 00:00:57.676
for， >> Brian Holt: 客户端框架
for,
&gt;&gt; Brian Holt: Client-side frameworks

14
00:00:57.676 --> 00:01:01.258
进行服务器端渲染，而不是只执行一个大的有效内容，
of doing server-side rendering, where
instead of doing just one big payload,

15
00:01:01.258 --> 00:01:03.322
对，这就是我们现在正在做的事情。
right, that's what we're doing right now.

16
00:01:03.322 --> 00:01:06.159
我们只是一次性把所有有效载荷都发送来对吧
We're just sending all
the payload all at once, right?

17
00:01:06.159 --> 00:01:09.269
你只会在一次的时候开始渲染它对吧
That you just start rendering
pieces of it at a time, right?

18
00:01:09.269 --> 00:01:11.609
所以你马上给他们发个片段
So that you immediately
send them a piece and

19
00:01:11.609 --> 00:01:14.629
然后你再多给点些，所以你再多做一点。
then you wait to render a little bit more,
and so you render a little bit more.

20
00:01:14.629 --> 00:01:16.960
然后你再多做一点，然后你就结束了，对吗 ?
And then you render a little bit more,
and then you finish, right?

21
00:01:16.960 --> 00:01:18.640
所以这是一种进步的加载。
And so
it's kind of this progressive loading.

22
00:01:19.969 --> 00:01:24.359
这太好了，因为现在我们可以马上给他们第一部分，
This is great because now we can
immediately send them the first part that

23
00:01:24.359 --> 00:01:25.530
我们已经有了，对吧 ?
we already have, right?

24
00:01:25.530 --> 00:01:28.621
当我们完成服务器端时，他们可以开始加载所有 CSS
And they can start loading all the CSS
while we're finishing server side

25
00:01:28.621 --> 00:01:29.620
渲染，是吧 ?
rendering, right?

26
00:01:29.620 --> 00:01:32.530
我们的应用不是很大的，所以这不会带来巨大的差异。
Our app is not very big, so this is not
gonna make that big of a difference.

27
00:01:32.530 --> 00:01:36.340
但如果你有一个 LinkedIn 大小的应用程序
But if you have a LinkedIn sized
application that's gonna be a massive

28
00:01:36.340 --> 00:01:37.450
为你赢得胜利
win for you.

29
00:01:37.450 --> 00:01:41.789
你可以像这样刮 100 到 400 毫秒。
You can literally shave 100 to 400
milliseconds off just like that.

30
00:01:43.920 --> 00:01:46.069
所以我们要修改一下这个
So we're gonna modify
this a little bit here.

31
00:01:47.520 --> 00:01:51.384
所以我们要做的第一件事就是我们要说
So the very, very first thing that
we're gonna do here is we're gonna say

32
00:01:51.384 --> 00:01:55.000
res.write (部件[0])。
res.write(parts[0]).

33
00:01:55.000 --> 00:01:57.045
所以我们马上就能清空用户了
So we're immediately
gonna flush the users.

34
00:01:57.045 --> 00:02:00.058
这里有这些 CSS 和下载
Here is all these CSS and
go download this,

35
00:02:00.058 --> 00:02:05.730
我要赶着背景来呈现我的 JavaScript 对吧
and I'm gonna hurry in the background
render my JavaScript, right?

36
00:02:05.730 --> 00:02:08.401
所以我们先做这个
So we do this first.

37
00:02:08.401 --> 00:02:11.348
然后我们要做个小溪
Then we're gonna make a stream,

38
00:02:11.348 --> 00:02:17.039
它表示 const stream =renderToNodeStream(reattMarkup)。
it says const stream
=renderToNodeStream(reactMarkup).

39
00:02:18.560 --> 00:02:21.689
这会逐渐地呈现你的应用程序，对吧 ?
And this is gonna progressively
render your app, right?

40
00:02:21.689 --> 00:02:24.319
一次一片片就会冲掉那些
One piece at a time,
it's just gonna flush pieces of those out

41
00:02:24.319 --> 00:02:29.360
称为节点流，它是一种特定类型的节点数据结构，
to what's called a node stream, which is a
specific kind of node data structure that

42
00:02:29.360 --> 00:02:31.460
随着时间的推移逐渐地向您提供数据，对吧 ?
progressively gives you data over time,
right?

43
00:02:32.889 --> 00:02:36.925
然后我就会说
And then here I'm gonna say

44
00:02:36.925 --> 00:02:42.722
stream.pipe(res end: false))。
stream.pipe(res end: false)).

45
00:02:46.014 --> 00:02:51.557
>> Brian Holt: 接下来，你会说 " 结束"。
&gt;&gt; Brian Holt: And then here
you're gonna say stream.on('end'.

46
00:02:54.575 --> 00:03:01.705
>> Brian Holt: 会说 res.write(parts[1]) 和
&gt;&gt; Brian Holt: It's gonna
say res.write(parts[1]) and

47
00:03:01.705 --> 00:03:04.491
重新点好吗
res.end, okay?

48
00:03:04.491 --> 00:03:09.637
然后我们就可以把这些东西都掉在这儿了
And then we can just drop all
this stuff here at the end, oops.

49
00:03:09.637 --> 00:03:11.336
35 和 34 你可以删除
35 and 34 you can just delete.

50
00:03:13.899 --> 00:03:17.981
>> Brian Holt: 因此，此 res.pipe 或 stream.pipe 表示
&gt;&gt; Brian Holt: So this res.pipe here or
the stream.pipe saying like

51
00:03:17.981 --> 00:03:22.629
把这些东西都管起来把管子连接到这管子上
pipe all this stuff into,
connect this pipe to this pipe.

52
00:03:22.629 --> 00:03:27.629
将所有标记发送到 res，响应用户，但是
Send all the markup into the res,
the response to the user, but

53
00:03:27.629 --> 00:03:29.219
一旦完成了就别结束了
don't end it once it's done.

54
00:03:29.219 --> 00:03:31.004
这就是那部分的意思
That's what that part means.

55
00:03:31.004 --> 00:03:35.225
然后这里说一旦你写完其他的 HTML
Then here it says, once you're finished
write the other bit of the HTML and

56
00:03:35.225 --> 00:03:37.069
然后断开连接。
then cut the connection.

57
00:03:37.069 --> 00:03:38.139
我们完蛋了对吧
We're finished, right?

58
00:03:39.319 --> 00:03:39.961
再一次
Now again,

59
00:03:39.961 --> 00:03:44.180
我们不会注意到我们在 localhost 上的任何区别吧
we're not gonna notice any difference
cuz we're on the localhost, right?

60
00:03:44.180 --> 00:03:50.227
因此，如果我执行 npm 运行，请 >> Brian Holt: 此
So if I do npm run start,
&gt;&gt; Brian Holt: This

61
00:03:50.227 --> 00:03:52.203
还会以同样的方式工作
is still gonna work
relatively the same way.

62
00:03:57.824 --> 00:03:58.700
>> Brian Holt: 可能。
&gt;&gt; Brian Holt: Possibly.

63
00:04:03.445 --> 00:04:05.002
>> Brian Holt: 那么我要回什么 ?
&gt;&gt; Brian Holt: So what am I getting back?

64
00:04:20.302 --> 00:04:22.106
> > Brian Holt: 好吧，这行吗 ?
&gt;&gt; Brian Holt: Well,
this works okay, right?

65
00:04:26.254 --> 00:04:28.564
> > Brian Holt: 嗯，好的，看起来很好。
&gt;&gt; Brian Holt: Yeah, okay,
seems like it's working okay.

66
00:04:31.692 --> 00:04:35.040
>> Brian Holt: 在这里有第二个承诺，在这个特殊的存储库中。
&gt;&gt; Brian Holt: So there's a second
commit here, in this particular repo.

67
00:04:36.100 --> 00:04:38.437
他们也会有 renderToNodeStream 工作。
They'll have the renderToNodeStream
working as well.

68
00:04:43.345 --> 00:04:44.507
>> Brian Holt: 有任何问题吗 ?
&gt;&gt; Brian Holt: Any questions about that?

69
00:04:47.218 --> 00:04:51.300
>> Brian Holt: 因此，如果您有能力执行流，那么这是首选项。
&gt;&gt; Brian Holt: So this is preferable if
you have the ability to do streams and

70
00:04:51.300 --> 00:04:56.829
处理诸如  或长时间运行的 HTML 请求或 HTTP 请求。
handle things like HTTP2 or long
running HTML requests or HTTP requests.

71
00:04:56.829 --> 00:04:57.509
这是最好的做法。
This is preferable.

72
00:04:57.509 --> 00:04:59.629
这对你来说快一点了
This will be faster for
you, almost always.

73
00:04:59.629 --> 00:05:04.550
我无法想象当世界不会是什么时候，但最着名的最后一个词。
I can't imagine when the in world
wouldn't be, but famous last words.

74
00:05:04.550 --> 00:05:06.759
但是，这是服务器端呈现。
But yeah, that's server-side rendering.

75
00:05:06.759 --> 00:05:08.959
所以我要重置我的回购协议了
So I'm gonna reset my repo now.

76
00:05:08.959 --> 00:05:14.439
我要说它重置了 HEAD ( 硬 )
I'm going to say git reset HEAD --hard,

77
00:05:14.439 --> 00:05:17.492
然后把它洗干净
and then git clean -f.

78
00:05:20.793 --> 00:05:24.468
> > Brian Holt: 那是很多东西，好，很酷。
&gt;&gt; Brian Holt: That was a lot of stuff,
all right, cool.
