WEBVTT

1
00:00:00.050 --> 00:00:01.760
>> Brian Holt: 我们将进行代码分割。
&gt;&gt; Brian Holt: So
we're going to do code splitting.

2
00:00:01.760 --> 00:00:04.160
接下来我需要重置我的存储库。
Next I need to reset my repo.

3
00:00:04.160 --> 00:00:08.939
所以这就回到了一个我可以开始的状态
So that's back in a state where I can
start without emotion cuz that we wanna

4
00:00:08.939 --> 00:00:11.990
从零开始就像我们忏悔的地方一样
start from ground zero like
a good place in our repo.

5
00:00:11.990 --> 00:00:17.251
我要做的是我要来这里启动我的服务器
So what I'm gonna do is I'm gonna
come in here, start my server.

6
00:00:17.251 --> 00:00:21.612
我会说 git
I'm gonna say git

7
00:00:21.612 --> 00:00:27.164
重置 HEAD --硬的。
reset HEAD --hard.

8
00:00:27.164 --> 00:00:32.299
现在，说这都是非常具有破坏性的操作。
Now, just saying this is all
very destructive operations.

9
00:00:32.299 --> 00:00:36.200
所以，如果你想保留你的代码，不要这样做，对吗 ?
So, if you wanted to keep any of
your code, don't do this, right?

10
00:00:36.200 --> 00:00:39.340
但我不想说让我重新考虑一下
But I don't so I'm just gonna say,
give me reset hard and so

11
00:00:39.340 --> 00:00:44.520
现在你可以看到我创造的这两件事情会在这里
now you can see maybe the two
things that I created will be here.

12
00:00:45.859 --> 00:00:51.429
再这样，除非你想破坏一切，否则不要这样做。
And so again, don't do this unless you
intend on like destroying everything.

13
00:00:51.429 --> 00:00:54.859
你可以说 git clean -f。
You can say git clean -f.

14
00:00:54.859 --> 00:00:57.100
这会清除在厨房里没有追踪的东西
That's going to clean everything
that's not tracked in git.

15
00:00:58.310 --> 00:01:03.136
正如你想象的那样，这也许是你想留下的东西，但我不知道。
As you might imagine, that might be things
that you wanted to keep, but I don't.

16
00:01:06.992 --> 00:01:08.462
>> Brian Holt: 我只是告诉你这是因为
&gt;&gt; Brian Holt: I'm just telling
you this because one of

17
00:01:08.462 --> 00:01:11.180
你会把你想要的东西删除你要怪我
you is gonna delete something that you
want it and you're gonna blame me and

18
00:01:11.180 --> 00:01:12.257
我会说我告诉你的
I'm gonna say I told you so.

19
00:01:12.257 --> 00:01:15.402
好吧那是以前从没发生过的
Okay, that's never happened before.

20
00:01:15.402 --> 00:01:18.314
所以在这之后我会说我要在晚上再安装
So here after that, I'll do that I'm
gonna say npm install again just to get

21
00:01:18.314 --> 00:01:19.688
一切都恢复了好状态
things back in a good state as well.

22
00:01:23.441 --> 00:01:24.644
>> Brian Holt: 在每个分支之后，
&gt;&gt; Brian Holt: So
after every single branch,

23
00:01:24.644 --> 00:01:27.109
每个模块都要这么做
you're gonna wanna have to do that or
after every module here.

24
00:01:27.109 --> 00:01:29.543
这样你就能回到零状态了
So that you're back in kind
of a ground zero state.

25
00:01:31.984 --> 00:01:34.500
>> Brian Holt: 好的，一切都好。
&gt;&gt; Brian Holt: Okay, so
everything should be good.

26
00:01:34.500 --> 00:01:35.909
我们要继续进行代码分割
We're gonna move on to code splitting.

27
00:01:38.200 --> 00:01:42.030
对于小型应用程序，代码分割是必不可少的，对吗 ?
Code splitting is essential for
small applications, right?

28
00:01:42.030 --> 00:01:46.140
代码分割背后的理念是你不想
The idea behind code splitting
is that you don't wanna have to

29
00:01:46.140 --> 00:01:50.500
把所有不重要的东西都装载在第一次装载的东西上对吧
load everything up front that's not
essential for the first page load, right?

30
00:01:50.500 --> 00:01:55.490
所以如果我载入我网页的主页
So if I load a home page of my web page,

31
00:01:55.490 --> 00:01:58.229
让我们来看这个， " 采用我 " 页面。
let's go look at this one,
the Adopt Me page.

32
00:01:58.229 --> 00:02:01.189
那么让我们继续吧，在我们运行 npm 安装之后，让我们继续
So let's go ahead and after we run
the npm install, let's go ahead and

33
00:02:01.189 --> 00:02:02.299
使我们的设备服务器运行。
get our dev server running.

34
00:02:02.299 --> 00:02:06.853
因此，我将再次使用 npm 运行 dev 来启动服务器。
So I'm gonna say npm run dev
again to get our server started.

35
00:02:15.955 --> 00:02:22.705
>> Brian Holt: 一旦装入，我们可以在 localhost 1234 处重新启动，好的。
&gt;&gt; Brian Holt: Once that's loaded, we can
restart here at localhost 1234, okay.

36
00:02:27.007 --> 00:02:29.490
>> Brian Holt: 现在这是正常状态。
&gt;&gt; Brian Holt: So
now this is back in a normal state.

37
00:02:30.670 --> 00:02:32.699
所以我想说的是代码分割。
So what I wanna talk
about is code splitting.

38
00:02:32.699 --> 00:02:35.360
代码分割允许您分割应用程序的部分
Code splitting allows you to split
out pieces of your application so

39
00:02:35.360 --> 00:02:37.599
将装入延迟到更高版本。
that you defer the loading to later.

40
00:02:37.599 --> 00:02:41.800
现在这很重要如果你想有个小的页面大小
Now this is essential if you
wanna have a small page size so

41
00:02:41.800 --> 00:02:44.020
第一次装载的速度非常快
that the first load is really quick and

42
00:02:44.020 --> 00:02:48.620
那么您可以将其他代码段的装入延迟到稍后，对。
then you can defer the loading of other
pieces of code until later, right.

43
00:02:48.620 --> 00:02:53.620
所以举个例子，我在这个主页上，然后还有第二个
So for example, I'm on this homepage and
then I also have a second

44
00:02:53.620 --> 00:02:57.539
页面称为 " 详细信息 " 页面，即此页面，对吗 ?
page here called the details page,
which is this page, right?

45
00:02:57.539 --> 00:03:00.789
我不需要细节页面的所有代码直到后来，对吗 ?
I don't need all the code for
the details page until later, right?

46
00:03:00.789 --> 00:03:03.640
因此，我可以将此代码的装入延迟到稍后，好吗 ?
So I can defer the loading of
this code until later, okay?

47
00:03:06.931 --> 00:03:10.777
>> Brian Holt: 我可以做的是，我可以用几种不同的技术
&gt;&gt; Brian Holt: So what I can do here is I
can use a couple of different techniques

48
00:03:10.777 --> 00:03:14.710
在 React 中延迟装入这些代码段。
within React to defer the loading
of these pieces of code later.

49
00:03:14.710 --> 00:03:17.419
因此我可以拥有最小最快的初始页面负载，并且
So I can have the smallest,
fastest initial page load, and

50
00:03:17.419 --> 00:03:19.651
那么我可以延迟加载新代码，直到稍后。
then I can defer loading
of new code until later.

51
00:03:21.932 --> 00:03:25.836
>> Brian Holt: 因此，我希望您转至 app.js，
&gt;&gt; Brian Holt: So
I want you to go into app.js,

52
00:03:29.451 --> 00:03:32.941
> > Brian Holt: 好的，然后在这里
&gt;&gt; Brian Holt: Okay and then up here we're

53
00:03:32.941 --> 00:03:38.551
在这里进口两个新东西懒的
going to import two new things here, lazy,

54
00:03:38.551 --> 00:03:44.024
L-A-Z-Y ，并带有大写字母 S 。
L-A-Z-Y and Suspense with a capital S.

55
00:03:47.204 --> 00:03:52.344
>> Brian Holt: 好，现在我想推迟装货
&gt;&gt; Brian Holt: Okay,
now I wanna defer the loading

56
00:03:52.344 --> 00:03:57.199
细节，对吧 ?
of Details until later, right?

57
00:03:57.199 --> 00:04:02.409
只要包裹看到从这里进口的细节就像是
As soon as parcel sees import Details
from something here, it's like,

58
00:04:02.409 --> 00:04:03.490
我要加载这个对吧
I need to load this, right?

59
00:04:03.490 --> 00:04:06.050
这就包括在你的捆绑软件中
So it goes an includes
that in your bundle, but

60
00:04:06.050 --> 00:04:07.189
我不想让它再这样了
I don't want it to do that anymore.

61
00:04:07.189 --> 00:04:08.806
我要做的就是删除这个
So what I'm gonna do is
I'm gonna delete that.

62
00:04:12.110 --> 00:04:17.173
>> Brian Holt: 在此应用上，我要说的是
&gt;&gt; Brian Holt: So above App here,
what I'm gonna say

63
00:04:17.173 --> 00:04:22.552
我想说公寓细节懒惰
is I'm gonna say const Details = lazy,

64
00:04:22.552 --> 00:04:28.899
具有 " 导入/ 详细信息 " 的功能。
with a function that says import./Details.

65
00:04:33.834 --> 00:04:36.139
>> Brian Holt: 现在，什么是 " 详细信息 " ?
&gt;&gt; Brian Holt: So now, what is Details?

66
00:04:36.139 --> 00:04:40.728
那么详细信息现在是不会装入此代码的占位符组件
Well, Details is now a placeholder
component that will not load this code

67
00:04:40.728 --> 00:04:45.540
直到后来细节才第一次被渲染
until later when Details is actually
tried to be rendered for the first time.

68
00:04:49.939 --> 00:04:52.449
> > Brian Holt: 那么，我们还有一点事要做。
&gt;&gt; Brian Holt: So,
we still have a little thing to do here.

69
00:04:52.449 --> 00:04:56.053
所以在我们的上面
So, under our above router here,

70
00:04:56.053 --> 00:05:00.281
我们会放一个悬念组件
we're gonna put a suspense component,

71
00:05:00.281 --> 00:05:05.519
我们从雷法进口到路由器周围
which we import from React here,
around router.

72
00:05:08.028 --> 00:05:10.149
> > Brian Holt: 然后我们会给它一个回退。
&gt;&gt; Brian Holt: And
then we're gonna give it a fallback.

73
00:05:14.682 --> 00:05:19.134
> > Brian Holt: 在这里，你只会给它一点标记，
&gt;&gt; Brian Holt: And here you're just
gonna give it a bit of mark up,

74
00:05:19.134 --> 00:05:23.579
如果密码还没准备好就可以了
it's like show this if
the code is not ready yet.

75
00:05:23.579 --> 00:05:30.944
所以我就会说 " 一号装载 " 路线
So I'm just gonna say h1 Loading route.

76
00:05:36.699 --> 00:05:39.500
>> Brian Holt: 好的，现在我有了这个 " 详细信息 " 组件。
&gt;&gt; Brian Holt: Okay, so
now I have this Details component.

77
00:05:39.500 --> 00:05:43.740
这是一个懒惰加载的组件每当它运行时这个功能就在这里
This is a lazily loaded component,
this function here whenever it runs,

78
00:05:43.740 --> 00:05:48.730
它将导入详细信息，称为动态导入。
it's going to import Details,
this is called dynamic import.

79
00:05:48.730 --> 00:05:50.490
这不一定是 " 重要 " 的事。
This is not necessarily a React thing.

80
00:05:50.490 --> 00:05:53.329
这是你说的一个 JavaScript 的东西
This is a JavaScript thing
that you're basically saying,

81
00:05:53.329 --> 00:05:56.199
从某个地方动态导入这个东西对吧
dynamically import this from somewhere,
right?

82
00:05:57.470 --> 00:06:00.915
然后派丝很聪明地说我知道该怎么做
And then Parcel is smart enough to say,
I know what to do with this, and

83
00:06:00.915 --> 00:06:04.278
它会在此处分割代码并将其分割为单独的捆绑软件，对吗 ?
it does a code split here and
splits this into a separate bundle, right?

84
00:06:06.505 --> 00:06:11.151
> > 布莱恩 - 霍尔特: 现在我们把这个悬念包裹在我们的路由器上
&gt;&gt; Brian Holt: Now we've wrapped this
suspense thing around our router

85
00:06:11.151 --> 00:06:15.793
说，嘿，如果这里有东西要装载，
that says, hey,
if anything inside of here is loading,

86
00:06:15.793 --> 00:06:20.728
不显示，首先显示此 h1 装入路径，直至此
don't show it, show this h1
loading route first until this

87
00:06:20.728 --> 00:06:24.908
进口承诺会解决然后展示，对吧 ?
import promise resolves and
then show it, right?

88
00:06:27.814 --> 00:06:32.768
> > Brian Holt: 那么现在，如果我在这里，我会硬刷新页面，
&gt;&gt; Brian Holt: So now, if I go over
here and I'll hard refresh the page,

89
00:06:32.768 --> 00:06:35.875
然后我们再看看 " 网络 " 标签
and we'll look at the Network tab.

90
00:06:37.810 --> 00:06:43.949
>> Brian Holt: 在此处查看 JS ，请注意我已装入样式和应用，对吗 ?
&gt;&gt; Brian Holt: Look at the JS here, so
notice I've loaded style and App, right?

91
00:06:43.949 --> 00:06:47.052
但如果我来这里寻找宠物
But if I come in here and
search for a pet and

92
00:06:47.052 --> 00:06:52.670
我去找胖子 Slim 会把它装在下面
I go to Fat Boy Slim notice that it's
going to load a details.js down here.

93
00:06:55.259 --> 00:06:58.319
>> Brian Holt: 好的，有 app.js 进来，
&gt;&gt; Brian Holt: Okay, so
there's app.js coming in, and

94
00:06:58.319 --> 00:07:02.420
如果我点击这个 details.js 就可以了
if I click on this details.js
now is doing that.

95
00:07:02.420 --> 00:07:03.910
我给你看是因为它挺快的
I show you that because it's pretty fast,

96
00:07:03.910 --> 00:07:06.439
装的真难知道吗
it's really hard to
notice the loading right?

97
00:07:07.720 --> 00:07:13.297
但是如果你在左上方很快发现，它会说加载，对吗 ?
But if you notice very quickly up here in
the top left it will say loading, right?

98
00:07:16.697 --> 00:07:19.108
> > Brian Holt: 因此，我们分成 18 千字节，
&gt;&gt; Brian Holt: So
we split out 18 kilobytes,

99
00:07:19.108 --> 00:07:23.230
18 千字节未压缩的 JavaScript。
which is 18 kilobytes of
uncompressed JavaScript.

100
00:07:23.230 --> 00:07:26.949
这可能就像一个千字节的
This would end up being like one kilobyte,
probably.

101
00:07:26.949 --> 00:07:28.699
所以这不值得，对吧 ?
So this is not worth it, right?

102
00:07:28.699 --> 00:07:30.439
这会比现在慢一点
This is actually gonna be slower than,

103
00:07:30.439 --> 00:07:33.389
你就应该把它包括在主丛里
you would've just rather have included
it in the main bundle to begin with.

104
00:07:33.389 --> 00:07:35.250
所以如果你要做密码分割
So, if you are gonna do code splitting,

105
00:07:35.250 --> 00:07:37.990
你应该至少把 30 千字节加出来
you should be splitting out
at least 30 kilobytes plus.
