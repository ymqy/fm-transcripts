WEBVTT

1
00:00:00.560 --> 00:00:06.107
>> Brian: 好的，现在在 SearchParams.test 中，
&gt;&gt; Brian: Okay, so
now inside of SearchParams.test,

2
00:00:06.107 --> 00:00:10.657
我们在这里我们要去
which we have up here, we're going to

3
00:00:10.657 --> 00:00:15.922
从反应，导入呈示和
import React from react, import render and

4
00:00:15.922 --> 00:00:21.059
从反应测试库中清除。
cleanup from react-testing-library.

5
00:00:22.800 --> 00:00:27.690
我们要进口宠物
We're going to import pet,

6
00:00:27.690 --> 00:00:33.191
动物，然后繁殖，
animals, and then breeds, and

7
00:00:33.191 --> 00:00:40.340
来自 @frontendmasters/宠物的狗。
dogs from @frontendmasters/pet.

8
00:00:40.340 --> 00:00:44.549
再一次，记住它会知道从哪一个来抓这个。
And again, remember that it's going
to know which one to grab this from.

9
00:00:44.549 --> 00:00:49.276
然后我们要进口
And then we're going to import

10
00:00:49.276 --> 00:00:55.840
searchParams 来自 ../searchParams。
searchParams from ../searchParams.

11
00:00:55.840 --> 00:01:00.078
所以我们需要做的一件事是做反应测试库
So one thing that we need to do here for
react-testing-library is we're gonna

12
00:01:00.078 --> 00:01:03.759
说以后，是 Jest 给我们的函数，清除。
say afterEach, which is the function
that Jest gives us, cleanup.

13
00:01:06.969 --> 00:01:09.326
这只是一个反应测试库的要求
And this is just a requirement
of react-testing-library,

14
00:01:09.326 --> 00:01:10.287
你必须这么做
you just have to do that.

15
00:01:13.466 --> 00:01:17.025
> > 布莱恩: 好的，然后我们在这里做个小测验。
&gt;&gt; Brian: Okay, and
then we're gonna write a little test here.

16
00:01:17.025 --> 00:01:18.998
我们要测试搜索参数
We're gonna test search params.

17
00:01:22.358 --> 00:01:26.998
>> 布莱恩: 这将是一个异步功能，让我们可以等待。
&gt;&gt; Brian: And this is going to be an async
function so that we can do await.

18
00:01:26.998 --> 00:01:32.305
我们会说 const， curly 花括号， getByTestId，
And we're gonna say const,
curly braces, getByTestId,

19
00:01:32.305 --> 00:01:38.480
通过在 SearchParams 上调用呈现给我们的功能。
which is a function given to us,
by calling render on SearchParams.

20
00:01:41.206 --> 00:01:45.354
>> Brian: 因此，这将在 Node， right，它的速度比刚刚好
&gt;&gt; Brian: So this is going to go render it
in Node, right, which is faster than just

21
00:01:45.354 --> 00:01:49.579
尝试将其呈现给 JSDOM 或类似的内容或具有此 Chrome。
trying to render it to JSDOM or something
like that or to have this Chrome.

22
00:01:51.280 --> 00:01:55.885
然后我们就会说
And then we're gonna say

23
00:01:55.885 --> 00:02:00.492
const animalDropdown =
const animalDropdown =

24
00:02:00.492 --> 00:02:09.925
getByTestId("use-下拉-动物") 和
getByTestId('use-dropdown-animal') and

25
00:02:09.925 --> 00:02:13.216
然后我们就会
then we're gonna

26
00:02:13.216 --> 00:02:20.381
say expect(animalDropdown.childen.length). -
say
expect(animalDropdown.children.length).to-

27
00:02:20.381 --> 00:02:29.680
等于(动画长度)。
Equal(animals.length).

28
00:02:29.680 --> 00:02:34.199
我们的意思是我们要去抓他
So what we're saying here
is we're gonna go grab

29
00:02:34.199 --> 00:02:39.060
我们 SearchParams里面的动物下拉列表
the animal dropdown inside
of our SearchParams.

30
00:02:39.060 --> 00:02:42.557
如果我给它猫，鸟和狗，我希望它能有多少种选择呢 ?
And if I give it cat, bird, and dog,
how many options do I expect it to have?

31
00:02:44.129 --> 00:02:48.211
老实说我希望它能有一个 ANIMALS.lengthrength+1 的权利
Well, honestly, I expect it to
have ANIMALS.length+1 right,

32
00:02:48.211 --> 00:02:50.939
因为其中一个也是所有选项
because one of them is
the all option as well.

33
00:02:53.430 --> 00:02:55.567
所以如果我在里面加一个额外的动物
So if I add an extra animal in there,

34
00:02:55.567 --> 00:02:59.072
我预计会有额外的动物在下降
I would expect there to be
an extra animal in the drop down.

35
00:02:59.072 --> 00:03:01.697
所以如果那是不同步的东西或者类似的东西
So if that's something that keeps falling
out of sync or something like that,

36
00:03:01.697 --> 00:03:03.822
这就是我们要测试的东西，这就是你如何做到的。
that's something we want to test,
this is how you'd do that.

37
00:03:05.854 --> 00:03:08.114
> > 布莱恩: 所以我们要做的事情非常快。
&gt;&gt; Brian: So there's something
we have to go do really quick.

38
00:03:08.114 --> 00:03:09.856
我要你去用下拉菜单
I want you to go to use dropdown.

39
00:03:11.730 --> 00:03:14.634
> > 布莱恩: 在这个选择上
&gt;&gt; Brian: And here on this select,

40
00:03:14.634 --> 00:03:19.618
我们只会给它一个数据证明
we're just gonna give it a data-testid.

41
00:03:19.618 --> 00:03:22.500
然后我们就给它和 id 一样的 id
And then we're just gonna give it
the same id as id right there.

42
00:03:22.500 --> 00:03:25.240
我们为什么要这么做
Now, why are we doing that?

43
00:03:25.240 --> 00:03:29.770
嗯，把你的测试逻辑与正常的逻辑解耦是很不错的，对吧 ?
Well, it's good to decouple your testing
logic from your normal logic, right?

44
00:03:29.770 --> 00:03:32.079
所以，是的，这会被呈现给 DOM ，不，不重要。
So, yes, this will get rendered out to
the DOM and, no, it doesn't matter.

45
00:03:33.360 --> 00:03:37.901
但现在我们可以通过一个测试标识来单独地处理这个问题，
But now we can actually individually
address this by a test ID,

46
00:03:37.901 --> 00:03:40.485
这在最后会有帮助的好吗
which is in the end helpful, okay?

47
00:03:43.858 --> 00:03:47.050
>> Brian: 因此，我们现在需要转至 package.json。
&gt;&gt; Brian: So
now we need to go to our package.json.

48
00:03:47.050 --> 00:03:48.260
我们在这儿有个测试
We have a test thing here.

49
00:03:48.260 --> 00:03:53.180
最后，这将会做一些事情，而不是大喊大叫。
And finally this is going to do something
instead of just yelling and exiting.

50
00:03:53.180 --> 00:03:55.960
所以我们要把这个说的好
So we're just gonna make this say jest.

51
00:03:57.099 --> 00:04:00.069
Jest 挺聪明的所以它会想出其他办法
And Jest is quite smart, so it'll
figure out how to run everything else.

52
00:04:02.259 --> 00:04:06.676
现在，我可以说 npm 运行测试。
So now I can say npm run test.

53
00:04:13.432 --> 00:04:14.448
> > 布莱恩: 看起来我们有个错误。
&gt;&gt; Brian: And looks like we had an error.

54
00:04:14.448 --> 00:04:15.963
我们去看看发生了什么
So let's go see what happened.

55
00:04:22.105 --> 00:04:28.244
>> Brian: 找不到数据证明使用 - 下拉 - 动物。
&gt;&gt; Brian: Unable to find
data-testid use-dropdown-animal.

56
00:04:28.244 --> 00:04:30.288
所以让我们去看看为什么会这样
So let's go see why that's the case.

57
00:04:30.288 --> 00:04:35.302
我想我们把数据证明的标识等于使用下拉列表
I thought we put data-testid
id is equal to use-dropdown.

58
00:04:35.302 --> 00:04:37.033
我把它放这儿了吗
And what did I put here?

59
00:04:37.033 --> 00:04:39.845
使用 - 下拉 - 动物。
use-dropdown-animal.

60
00:04:39.845 --> 00:04:41.603
你知道我在这可能没做什么吗
You know what I probably didn't do here?

61
00:04:41.603 --> 00:04:44.143
这就是我的问题第九行
Yep, this is my problem, line 9.

62
00:04:44.143 --> 00:04:53.093
这必须是一个组件 >> Brian: 因此
This has to be a component
&gt;&gt; Brian: So

63
00:04:53.093 --> 00:04:54.930
而不是第 9 行你把它作为一个组成部分
instead on line 9,
you have that as a component.

64
00:04:54.930 --> 00:04:55.863
现在我们再试一次
Now let's try that again.

65
00:05:02.108 --> 00:05:03.100
>> 布莱恩: 酷，现在已经过去了。
&gt;&gt; Brian: Cool, now it passes.

66
00:05:05.694 --> 00:05:09.720
>> 布莱恩: 所以每当我写测试通过的时候，我总是做的第一件事就是，
&gt;&gt; Brian: So whenever I write a test that
pass, the first thing I always do is like,

67
00:05:09.720 --> 00:05:12.769
我得确保这事也失败了对吧
I need to make sure this fails as well,
right?

68
00:05:12.769 --> 00:05:14.790
所以让我们马上开始使用 Droppdown 。
So let's just go into
useDropdown really quick.

69
00:05:16.089 --> 00:05:19.490
对了你知道我们的选择是空的
And right, you know,
we have an empty option right there.

70
00:05:19.490 --> 00:05:21.750
加起来就像三个空的选择对吧
Let's just add like three empty options,
right?

71
00:05:21.750 --> 00:05:23.286
这应该会让它失败。
That should make it fail.

72
00:05:23.286 --> 00:05:28.793
库兹就能再多 3 个了
Cuz then it's gonna have three
more instead of just one more.

73
00:05:28.793 --> 00:05:33.018
听着，我有 11个，我想 9 个。
Lo and behold, it says, hey,
I got 11, and I expected 9.

74
00:05:33.018 --> 00:05:35.494
所以我不太高兴
So I'm not happy about that.

75
00:05:39.425 --> 00:05:44.302
> > 布莱恩: 好的，这是我们好的第一次测试。
&gt;&gt; Brian: So good,
that's our good first test.

76
00:05:44.302 --> 00:05:46.774
我们去写另一个吧
Let's go write another one.

77
00:05:46.774 --> 00:05:53.201
所以在这里的 SearchParams.test 我们会说
So inside of SearchParams.test here,
we're going to say

78
00:05:53.201 --> 00:05:59.380
期望(pet.vereds). toHaveBeenCallled，对吗 ?
expect(pet.breeds).toHaveBeenCalled,
right?

79
00:05:59.380 --> 00:06:04.190
因为一旦这个东西启动就应该叫 API 然后说，哎，
Because as soon as this thing starts up,
it should call the API and say, hey,

80
00:06:04.190 --> 00:06:05.603
这些品种在哪里
where are the breeds?

81
00:06:05.603 --> 00:06:09.754
我想说的是 breedDropdown .
And I'm going to say const breedDropdown.

82
00:06:13.040 --> 00:06:20.951
>> Brian: = getByTestId("use-下拉列表" )。
&gt;&gt; Brian: =
getByTestId('use-dropdown-breed').

83
00:06:20.951 --> 00:06:24.646
我得说
And I'm gonna say,

84
00:06:24.646 --> 00:06:34.646
期望(breedDropdown.childen.length)toEq- ual(_breeds.length )
expect(breedDropdown.children.length)toEq-
ual(_breeds.length

85
00:06:38.994 --> 00:06:42.257
+ 1)，对吧 ?
+ 1), right?

86
00:06:42.257 --> 00:06:48.007
因此，如果它从 API 中返回 5 ，那么它应该有 6 个选项。
So, if it gets back 5 from the API,
it should have six options.

87
00:06:51.683 --> 00:06:52.595
> > 布莱恩: 好的，让我们给它一个镜头。
&gt;&gt; Brian: So let's give that a shot.

88
00:06:59.144 --> 00:07:01.512
> > 布莱恩: 看起来我们在这里失败了。
&gt;&gt; Brian: And
it looks like we failed here.

89
00:07:01.512 --> 00:07:03.108
所以 pett 品种没被调用
So pet.breeds wasn't called.

90
00:07:13.586 --> 00:07:14.798
> > 布莱恩: 那么，我想知道这是什么。
&gt;&gt; Brian: So, I wonder what this is.

91
00:07:14.798 --> 00:07:17.956
我觉得这好像没有得到正确的模拟
I think this looks like it's
not getting the correct mock.

92
00:07:26.694 --> 00:07:29.997
> > Brian: Cuz 不加入 Frontend Masters。
&gt;&gt; Brian: Cuz it's not
getting Frontend Masters.

93
00:07:29.997 --> 00:07:32.465
我做错什么了吗
Did I spell anything wrong?

94
00:07:32.465 --> 00:07:39.610
__mocks__ > frontendmasters > pet.js。
__mocks__ &gt; frontendmasters &gt; pet.js.

95
00:07:39.610 --> 00:07:41.805
>> 演讲者 2: 应该是 @frontendmasters吗 ?
&gt;&gt; Speaker 2: Should
that be @frontendmasters?

96
00:07:41.805 --> 00:07:44.367
> > 布莱恩: 就是这样。
&gt;&gt; Brian: That's what it is.

97
00:07:44.367 --> 00:07:45.879
好吧那我们试试吧
Okay, so let's try that.

98
00:07:53.981 --> 00:07:55.259
> > 布莱恩: 太好了，现在又开始了。
&gt;&gt; Brian: Great, so
now it's passing again.

99
00:08:01.391 --> 00:08:05.317
>> Brian: Cool，这意味着 API 肯定会被调用，对吗 ?
&gt;&gt; Brian: Cool, so that means the API
is definitely getting called, right?

100
00:08:05.317 --> 00:08:07.422
如果我们回到代码里的话
The, if we go back to the code.

101
00:08:10.598 --> 00:08:12.439
>> Brian: 肯定会调用 API 。
&gt;&gt; Brian: The API is
definitely getting called.

102
00:08:12.439 --> 00:08:15.670
然后 API 会把你和你的五种
And the API is then giving back
the five breeds that you and

103
00:08:15.670 --> 00:08:17.170
我是一起列出的对吧
I listed together, right?

104
00:08:17.170 --> 00:08:19.610
那是正确的工作，对吧 ?
And then that is working correctly, right?

105
00:08:19.610 --> 00:08:21.093
那是保证对吧
That's assuring, right?

106
00:08:21.093 --> 00:08:23.600
这就是你想要退出测试的原因
Which is what you want out of your tests.

107
00:08:23.600 --> 00:08:25.401
所以让我们在这里更进一步。
So let's go one step further here.

108
00:08:27.826 --> 00:08:32.659
> > 布莱恩: 在这个电话里我们得多弄几件事
&gt;&gt; Brian: And we have to get a couple
more things out of this call right here.

109
00:08:32.659 --> 00:08:35.750
所以我们要去拿个容器
So we're gonna grab a container and

110
00:08:35.750 --> 00:08:39.982
一个 getTestById ，我们将抓取 getByText。
a getTestById and
we're gonna grab getByText.

111
00:08:39.982 --> 00:08:45.846
getByText ，好吗 ?
getByText, okay?

112
00:08:45.846 --> 00:08:49.081
因此，我们希望首先看到这一点。
So we want to see that
at first it renders.

113
00:08:49.081 --> 00:08:53.432
然后我们要模拟一个点击按钮，对。
Then we're going to simulate
a click on the button, right.

114
00:08:53.432 --> 00:08:58.282
他们将会看到它是否从 API中得到了宠物的帮助。
And they're going to see if it gets
pets back from the from the API.

115
00:08:58.282 --> 00:09:03.417
所以我们会说 const searchResults =
So we're gonna say const searchResults =

116
00:09:03.417 --> 00:09:08.981
getByTestId('search-results') ，和
getByTestId('search-results'), and

117
00:09:08.981 --> 00:09:14.979
我们得马上把它放进来
we'll have to go put this
in here in just a second.

118
00:09:16.222 --> 00:09:18.806
布莱恩: 我们会说
&gt;&gt; Brian: We're gonna say

119
00:09:18.806 --> 00:09:28.221
expect('searchResults.textContent').toEq- ual。
expect('searchResults.textContent').toEq-
ual.

120
00:09:32.807 --> 00:09:34.813
>> Brian: 未找到 Pets 。
&gt;&gt; Brian: No Pets Found.

121
00:09:39.559 --> 00:09:43.051
> > 布莱恩: 然后我们会在那之后说，火焰火。
&gt;&gt; Brian: And then we're gonna
say after that, fireEvent.

122
00:09:47.681 --> 00:09:49.543
> > 布莱恩: 我们也得去拿那个，对吧 ?
&gt;&gt; Brian: And we'll have to go get that,
as well, right?

123
00:09:53.566 --> 00:09:57.400
>> 布莱恩: 所以我们要从反应测试库中自动导入。
&gt;&gt; Brian: So we're gonna auto-import
that from react-testing-library.

124
00:09:59.917 --> 00:10:04.419
>> Brian: 因此，我们会说 getByText('Submit')，所以
&gt;&gt; Brian: So
we're gonna say getByText('Submit'), so

125
00:10:04.419 --> 00:10:09.980
我们要去找 " 提交 " 按钮 Submut 我能拼
we're gonna go find the Submit button,
Submut, I can spell.

126
00:10:09.980 --> 00:10:16.426
提交，我们会给它一个新的点击鼠标事件。
Submit, and we're gonna give
it a new MouseEvent of click.

127
00:10:19.650 --> 00:10:23.327
>> 布莱恩: 好的，所以你知道，我从
&gt;&gt; Brian: Okay, so just so you know,
I imported that fireEvent from

128
00:10:23.327 --> 00:10:26.562
2 号线路的反应测试库
react-testing-library right
there in line 2.

129
00:10:32.014 --> 00:10:36.683
> > 布莱恩: 我们会说 ( 动物)
&gt;&gt; Brian: And
we're gonna say expect(pet.animal),

130
00:10:36.683 --> 00:10:40.774
动物就像你的哈韦比恩卡莱
animals, as it is, toHaveBeenCalled.

131
00:10:42.059 --> 00:10:44.485
所以我们预期它会进入 API。
So we're expecting it to go to the API.

132
00:10:44.485 --> 00:10:48.392
然后我们要去
And then we're going

133
00:10:48.392 --> 00:10:55.658
期望 (searchResults.childen.length).toE-
to
expect(searchResults.children.length).toE-

134
00:10:55.658 --> 00:11:04.024
qual(_dogs.length)。
qual(_dogs.length).

135
00:11:06.870 --> 00:11:09.845
现在我们有个小问题
Now, we have a minor problem here.

136
00:11:09.845 --> 00:11:14.708
次要的问题是方法
The minor problem is that the method to

137
00:11:14.708 --> 00:11:20.332
请求宠物不会像个异步的人一样工作
request pets won't work as an async await,

138
00:11:20.332 --> 00:11:26.725
这是我们第一次执行它的方式
which is how we implemented
it in the first place.

139
00:11:26.725 --> 00:11:31.293
没有什么好办法让我们跟猴子以外的人合作
And there's not really a good way for us
to work around that with other than monkey

140
00:11:31.293 --> 00:11:34.450
修修补补如果这听起来很吓人的话
patching promises,
which if that sounds scary to you,

141
00:11:34.450 --> 00:11:38.009
因为它是这样我们不会这么做的
that's because it is, and
we're not gonna do that.

142
00:11:38.009 --> 00:11:40.129
所以为了这个特定的文本，
So for the sake of this
particular text right now,

143
00:11:40.129 --> 00:11:42.740
我要去改变这个在 SearchParams中实施的方式。
I'm just going to go change how this
is implemented in SearchParams.

144
00:11:43.750 --> 00:11:47.085
这是一个异步函数，它并不是真正地给我们买那么多。
So here this is an async function, and
it's not really buying us that much.

145
00:11:47.085 --> 00:11:51.172
我们只会说功能宠物我们只会说动物
We're just gonna say function pet,
and we're just gonna say pet.animals.

146
00:11:51.172 --> 00:11:56.278
然后我们就把这个放进去吧
And then we're just gonna put
this inside of .then animals.

147
00:12:06.427 --> 00:12:10.551
> > 布莱恩: 把 setPets 移到这里，去掉这个。
&gt;&gt; Brian: And move setPets into here,
and get rid of this.

148
00:12:18.041 --> 00:12:21.909
>> 布莱恩: 所以我所做的只是把它作为原始的承诺
&gt;&gt; Brian: So all I did was just
re-implement this as raw promises instead

149
00:12:21.909 --> 00:12:23.442
正在使用异步 / 等待。
of using async/await.

150
00:12:23.442 --> 00:12:27.181
我和一个在 Facebook 工作的人进行了一段时间的对话
And I had an at length conversation with
someone that worked at Facebook about this

151
00:12:27.181 --> 00:12:28.379
我们能不能这样做
like, can we not do this?

152
00:12:28.379 --> 00:12:30.604
他们基本上说他们不想
And they basically said,
they're trying not to,

153
00:12:30.604 --> 00:12:32.788
因为 Facebook 到处都在等待
because Facebook has
async/await everywhere.

154
00:12:32.788 --> 00:12:34.556
他们也想这样做
And they wanna do this as well.

155
00:12:34.556 --> 00:12:39.496
但现在，这就是你如何使用异步等待和测试的方式。
But for now, this is how you kinda use
async await and test at the same time.

156
00:12:42.207 --> 00:12:45.346
>> Brian: 我们确实需要快速的进入到  。
&gt;&gt; Brian: And we do have to go
into results.js really quick.

157
00:12:48.838 --> 00:12:54.918
> > 布莱恩: 在这类搜索的分类上，我们要给它一个测试标识，
&gt;&gt; Brian: And say here on the className
of search, we have to give it a test ID,

158
00:12:54.918 --> 00:12:59.201
其中数据 - testid='search-results'。
which data-testid='search-results'.

159
00:13:04.876 --> 00:13:09.279
> > 布莱恩: 好吧，现在希望，手指交叉了，那是很多代码。
&gt;&gt; Brian: Okay, now hopefully,
fingers crossed, that was a lot of code.

160
00:13:09.279 --> 00:13:12.008
npm 运行测试，我们应该会有更多的测试通过。
npm run test,
we should get a bunch more tests passing.

161
00:13:12.008 --> 00:13:17.830
我们做到了
And we did.

162
00:13:17.830 --> 00:13:21.485
所以这意味着如果我们回去搜索 test.js，
So that means if we go
back into search test.js,

163
00:13:21.485 --> 00:13:26.211
它最初没有发现任何宠物如果我点击
it's initially rendering no pets found,
and then if I click,

164
00:13:26.211 --> 00:13:30.669
它会调用 API 然后给出正确数量的宠物
it'll call the API and
then given a correct amount of pets,

165
00:13:30.669 --> 00:13:35.875
然后就会调用 API 并返回正确数量的狗。
it's then going to call the API and
get back a correct amount of dogs.

166
00:13:35.875 --> 00:13:38.067
它会让一只宠物
And it'll render one pet for

167
00:13:38.067 --> 00:13:42.360
它们从 API中得到的每一种动物
each one of those animals that
it gets back from the API.
