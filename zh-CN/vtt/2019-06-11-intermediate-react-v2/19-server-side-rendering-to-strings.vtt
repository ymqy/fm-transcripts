WEBVTT

1
00:00:00.000 --> 00:00:02.516
>> Brian Holt: 好，最后，让我们去写我们的节点服务器。
&gt;&gt; Brian Holt: Okay, finally,
let's go write our node server.

2
00:00:04.886 --> 00:00:08.070
>> Brian Holt: 因此，由于这是在 babble 中，我们可以使用导入语法。
&gt;&gt; Brian Holt: So because this is in
babble, we can use import syntax.

3
00:00:08.070 --> 00:00:11.371
所以我们要用快说的方式说进口
So we're gonna say import
express from express.

4
00:00:13.506 --> 00:00:16.187
布莱恩 - 霍尔特: 你会说的另一件事是
&gt;&gt; Brian Holt: And
the other thing you're gonna call this is,

5
00:00:19.417 --> 00:00:22.620
>> Brian Holt: 我在哪里放这个?
&gt;&gt; Brian Holt: Where do I put this?

6
00:00:22.620 --> 00:00:28.190
并在此文件夹中创建一个新目录。
And make a new directory
here inside of this folder.

7
00:00:28.190 --> 00:00:31.228
不在源和被叫服务器内部
Not inside the source and called server,

8
00:00:31.228 --> 00:00:36.865
因为你一般都想把你的前端和后端密码分开
because you generally want to keep your
front end and back end code separate,

9
00:00:36.865 --> 00:00:40.695
然后我就把这个指数联系上了
and then I'm just going to
call this index touch as.

10
00:00:43.963 --> 00:00:48.950
>> Brian Holt: 因此从 Express 中输入表示，
&gt;&gt; Brian Holt: So
import express from express,

11
00:00:48.950 --> 00:00:52.868
反应的反应
import react from react,

12
00:00:52.868 --> 00:01:00.709
从反应 - don/server 导入 renderToString ，
import renderToString
from react-don/server,

13
00:01:00.709 --> 00:01:07.489
从每个路由器导入服务器位置。
import Server location
from at each router.

14
00:01:09.640 --> 00:01:16.204
导入作为文件系统的 fs ，
Import fs which is a file system,

15
00:01:16.204 --> 00:01:21.129
从 fs 到节点模块，以及
from fs to node module and

16
00:01:21.129 --> 00:01:26.995
从 /src/App 导入应用程序。
import app from /src/App.

17
00:01:29.045 --> 00:01:33.849
> > Brian Holt: 好的，首先你想确定这是什么港口
&gt;&gt; Brian Holt: Okay, first thing is you
wanna identify what port this is gonna

18
00:01:33.849 --> 00:01:38.759
运行，所以我们会说 const PORT = process.env.PORT。
run on, so we're gonna say
const PORT = process.env.PORT.

19
00:01:38.759 --> 00:01:43.600
因此，您可以将端口设置为环境变量，并且
So you can either have the port set
an an environmental variable, and

20
00:01:43.600 --> 00:01:47.448
如果他们没有设置任何东西，就将它设置为 3000。
if they don't set anything,
just set it to 3000.

21
00:01:47.448 --> 00:01:53.569
只有 1000 以上的任意数字才会起作用。
Just any random number
above 1000 will work.

22
00:01:53.569 --> 00:01:59.729
好吧我们要说 const html = fs.readFileSync。
Okay, we're going to say
const html = fs.readFileSync.

23
00:01:59.729 --> 00:02:04.987
Disting/index.html.tostring， so
Dist/index.html.tostring, so

24
00:02:04.987 --> 00:02:11.598
这就去读输出 html 的权利
this is going to go read
the output html right,

25
00:02:11.598 --> 00:02:16.853
这样我们就能把它用在我们的服务器上
so that we could use that in our server

26
00:02:16.853 --> 00:02:21.687
侧面渲染 >> Brian Holt: 然后
side rendering
&gt;&gt; Brian Holt: Then

27
00:02:21.687 --> 00:02:24.340
你会把它分成两部分对吧
you're gonna split it into two parts,
right?

28
00:02:24.340 --> 00:02:26.770
因此， const parts = split。
So const parts = split.

29
00:02:27.780 --> 00:02:29.229
好，我们先看看这个。
Well, let's go take a look at this first.

30
00:02:30.240 --> 00:02:36.810
如果我进入我的 index.html，我希望我的标记在哪里呢 ?
If I go into my index.html,
where do I want my markup to actually go?

31
00:02:36.810 --> 00:02:41.110
我们希望它能到这里来对吧
We want it to go here in route, right?

32
00:02:43.520 --> 00:02:47.909
所以我要做的有点棘手因为我刚装了
So what I'm gonna do is kind of be
a little tricky, because I just loaded

33
00:02:47.909 --> 00:02:52.610
把这件事都做了我就会分得不怎么样
this whole thing as a string and
I'm going to split on not rendered, right.

34
00:02:52.610 --> 00:02:58.237
所以它的第一部分就是所有这些，对。
So the first part of it is
going to be all of this, right.

35
00:02:58.237 --> 00:03:02.691
第二部分就是这些，然后我把我的标记放在这里，
And the second part of it will be all of
this, then I'll put my mark up here, and

36
00:03:02.691 --> 00:03:06.269
然后我先把第一部分放在首位
then I'll put the first part first,
the rendered mark up, and

37
00:03:06.269 --> 00:03:07.574
然后是第二部分。
then the second part.

38
00:03:07.574 --> 00:03:11.901
有道理吗
Does that make sense?

39
00:03:11.901 --> 00:03:17.168
所以我要把它分开
So I'm gonna say html.split not rendered.

40
00:03:20.384 --> 00:03:22.712
> > Brian Holt: 那么现在我要有两部分，第一部分和
&gt;&gt; Brian Holt: So, now I'm gonna have
an array of two parts, the first part and

41
00:03:22.712 --> 00:03:23.371
第二部分。
the second part.

42
00:03:26.352 --> 00:03:30.122
>> Brian Holt: 您可以使用诸如 EJS或 Handlebar 之类的内容来执行此操作，或者
&gt;&gt; Brian Holt: You could do this with
something like EJS, or Handlebars, or

43
00:03:30.122 --> 00:03:33.979
你甚至可以用 " 雷法 " 自己来做
you could even do it with React
itself to render this together.

44
00:03:35.270 --> 00:03:39.673
这其实很简单，我觉得这也不是不好的做法。
This is really simple, and I think this
is not a bad way of doing it either.

45
00:03:39.673 --> 00:03:44.774
我要说 const app = express，
I'm going to say const app = express,

46
00:03:44.774 --> 00:03:48.793
来启动新的快速服务器
to start a new express server,

47
00:03:48.793 --> 00:03:56.377
我要把 app.use/ dist 作为 express.static dist。
I'm gonna say app.use/ dist
as express.static dist.

48
00:03:56.377 --> 00:03:59.906
所以这将会对 dist 目录中的所有内容进行静态处理，对吗 ?
So, this is gonna statically serve
everything in the dist directory, right?

49
00:03:59.906 --> 00:04:02.830
那么， HTML， CSS， JavaScript 图像，
So, the HTML, CSS, JavaScript images,

50
00:04:02.830 --> 00:04:04.330
所有这些都来自 dist 目录
all that is gonna come
from the dist directory.

51
00:04:05.830 --> 00:04:10.240
我得说 app.use 然后我就给你
Here I'm gonna say app.use and
then I'm gonna give it

52
00:04:10.240 --> 00:04:14.750
一个中间件，可以在每次请求时运行，好吗 ?
a middleware to run every single
time that it gets requested, okay?

53
00:04:17.420 --> 00:04:26.959
我要说 const reattMarkup = ServerLocation。
Here I'm gonna say const
reactMarkup = ServerLocation.

54
00:04:28.139 --> 00:04:30.752
因此，这来自 Reach 路由器以执行服务器站点呈现。
So this is from Reach Router to
do the server site rendering.

55
00:04:30.752 --> 00:04:34.465
url =rec.url。
url =rec.url.

56
00:04:34.465 --> 00:04:40.298
所以如果有人请求提供详细信息 /
So, if someone requests details/200,

57
00:04:40.298 --> 00:04:46.129
那就是从快递过来的 URL
that'll be the URL coming
in from express and

58
00:04:46.129 --> 00:04:51.038
然后你就把应用放进去
then you'll put app inside of that and

59
00:04:51.038 --> 00:04:56.886
然后你就会在这里说重发
then down here you're gonna say res.send.

60
00:04:56.886 --> 00:04:58.418
我要在这里做三部分
I'm going to do three parts here.

61
00:05:01.997 --> 00:05:07.213
>> Brian Holt: 您可以说 0 部分加上
&gt;&gt; Brian Holt: You could say parts 0 plus

62
00:05:07.213 --> 00:05:13.622
对字符串进行反应标记。
render to string react markup.

63
00:05:13.622 --> 00:05:19.148
+ parts[1]， right?
+ parts[1], right?

64
00:05:19.148 --> 00:05:23.903
HTML 的第一部分，呈示标记， HTML 的第二部分。
First part of the HTML, rendered markup,
second part of the HTML.

65
00:05:23.903 --> 00:05:30.000
然后你会说 res.end()， > > Brian Holt: 好的，
And then here, you're gonna say res.end();
&gt;&gt; Brian Holt: Okay,

66
00:05:30.000 --> 00:05:32.475
你就会说 console.log
then you'll say console.log.

67
00:05:32.475 --> 00:05:36.165
在 PORT 和
Listening on PORT and

68
00:05:36.165 --> 00:05:41.088
表示 app.listen(PORT)。
say app.listen(PORT).

69
00:05:44.788 --> 00:05:48.240
>> Brian Holt: 因此，如果您不太了解节点的部分，
&gt;&gt; Brian Holt: So if you don't know
too much about the nodes part of that,

70
00:05:48.240 --> 00:05:49.653
那就好
that's totally fine.

71
00:05:49.653 --> 00:05:52.062
这里有很多关于这个的课程
There's plenty of courses
on here about that but

72
00:05:52.062 --> 00:05:54.961
是否有任何关于 " 反应 " 部分的问题 ?
are there any questions about
the React portions of this?

73
00:05:54.961 --> 00:05:59.375
这就是如何让它起作用的核心部分。
This is kind of the core part of
how to get this to work with react.

74
00:05:59.375 --> 00:06:01.759
你把它放在服务器上
You render it on the server, and

75
00:06:01.759 --> 00:06:06.274
你会把它作为完整的标记发送给客户
you're gonna send it down to
the client as complete markup.

76
00:06:06.274 --> 00:06:10.322
所以，让我们给你一个机会，但你需要两个包装才能做到这一点。
So let's give a shot, but
you're gonna need two packages to do this.

77
00:06:10.322 --> 00:06:15.807
你需要快递你会说 npm 的安装
You're gonna need express,
you're gonna say npm install.

78
00:06:15.807 --> 00:06:20.709
然后，您还需要 @babel/node。
Express and
then you're also gonna need @babel/node.

79
00:06:20.709 --> 00:06:24.839
所以这个是一个通用的 js 框架，
So this one is a common js framework and

80
00:06:24.839 --> 00:06:33.110
这一系统将允许您通过 Babel 运行所有节点代码。
this one is going to allow you to run all
your node code through Babel as well.

81
00:06:33.110 --> 00:06:38.408
因此 >> Brian Holt: 可以
So
&gt;&gt; Brian Holt: Can

82
00:06:38.408 --> 00:06:42.132
从那个不太重要的 .js 中删除
delete that as well from that .js,
that's not super important.

83
00:06:42.132 --> 00:06:45.002
还有一件事要解决 package.json
One more thing to fix as
well in package.json,

84
00:06:45.002 --> 00:06:49.031
请记住，我们从客户机应用程序切换到现在是浏览器条目。
remember we switch from client app
to now being the browser entry.

85
00:06:49.031 --> 00:06:54.461
所以我们也要做建筑，
So we have to also do build,

86
00:06:54.461 --> 00:07:00.127
不构建，但在 index.html 中
not build but in index.html

87
00:07:00.127 --> 00:07:04.151
就是这么说的
that's what it is.

88
00:07:04.151 --> 00:07:09.197
在这里，我们要指出的是 ClientApp。
Here instead of being client app,
we're going to point this out ClientApp.

89
00:07:09.197 --> 00:07:11.725
与其作为应用，我们将把它指向 ClientApp。
Instead of it being app,
we're going to point it at ClientApp.

90
00:07:16.589 --> 00:07:19.930
>> Brian Holt: 现在，如果我们开始
&gt;&gt; Brian Holt: Now if we start and

91
00:07:19.930 --> 00:07:24.384
再次停止服务器，
stop the server again,

92
00:07:24.384 --> 00:07:31.298
运行开始，现在应该开始工作了。
pm run start, now this should work.

93
00:07:39.574 --> 00:07:42.314
>> Brian Holt: 好，现在所有的 JavaScript 都在工作。
&gt;&gt; Brian Holt: Okay so
now all the JavaScript is working as well.

94
00:07:47.326 --> 00:07:51.079
> > Brian Holt: 但我想在这里提出的观点，
&gt;&gt; Brian Holt: But
the point that I wanted to bring up here,

95
00:07:51.079 --> 00:07:55.350
如果我在此处再次查看此页面，请在我的视图源中查看。
if I look at this page again
here in My view source.

96
00:07:55.350 --> 00:07:58.620
还像所有正确的代码一样加载吗 ?
It's still loading like all
the correct code here as well right?

97
00:07:58.620 --> 00:08:00.266
所以它还在做服务端的渲染。
And so
it's still doing service side rendering.

98
00:08:00.266 --> 00:08:04.608
每个路由都在执行相应的操作，因为每个路由器都在
It's doing the appropriate one per route
because each router is taking in that

99
00:08:04.608 --> 00:08:06.995
URL 并呈现正确的页面吗?
url and rendering the correct page Right?

100
00:08:09.088 --> 00:08:11.771
>> Brian Holt: 因此，我们可以定义浏览器中的所有路由
&gt;&gt; Brian Holt: So we get to define all
of our routes inside of the browser

101
00:08:11.771 --> 00:08:15.367
客户机端渲染器，但是仍然能够使用所有相同的路由，
client-side renderer, but notice still
able to use all the same routes,

102
00:08:15.367 --> 00:08:16.120
这很酷
which is cool.
