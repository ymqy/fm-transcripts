WEBVTT

1
00:00:00.270 --> 00:00:01.060
>> Brian Holt: useReducer。
&gt;&gt; Brian Holt: useReducer.

2
00:00:03.359 --> 00:00:07.450
如果你是雷德克斯的人你就会觉得自己在家
If you're coming from Redux,
you'll feel right at home with this.

3
00:00:07.450 --> 00:00:09.647
如果你不来 Redux 你会在后面学习雷杜克斯
And if you're not coming from Redux,
you'll learn about Redux later.

4
00:00:09.647 --> 00:00:13.410
所以你也会没事的
So either way, you're gonna be okay.

5
00:00:13.410 --> 00:00:18.371
这里我有一个用 " 减速器 " 的例子。
So here I have this useReducer example.

6
00:00:18.371 --> 00:00:22.824
它允许你做的就是改变这里的颜色。
And what it allows you to do is
change the color of this up here.

7
00:00:22.824 --> 00:00:25.556
所以，如果我点击红色，就会变成红色。
So if I click plus red a bunch,
this will turn red.

8
00:00:25.556 --> 00:00:28.675
如果我转向绿色就会变黄
If I turn plus green, it'll turn yellow.

9
00:00:28.675 --> 00:00:30.960
如果我把它变成白色的，对吗 ?
If I turn that it'll
eventually turn white, right?

10
00:00:33.399 --> 00:00:35.776
现在，这个国家有很多要跟踪的情况，对吧 ?
Now, this is a lot of state
to keep track of, right?

11
00:00:35.776 --> 00:00:40.490
我必须为三个不同的事情跟踪更新者和设置者，对吗 ?
I have to keep track of updaters and
setters for three different things, right?

12
00:00:40.490 --> 00:00:41.960
那是一种痛苦，对吧 ?
And that's kind of a pain to do, right?

13
00:00:41.960 --> 00:00:44.984
如果我有一个能处理这些问题的功能的话
It'd be really nice if I had one
function that handled all these

14
00:00:44.984 --> 00:00:46.651
比较相似的操作。
relatively similar operations.

15
00:00:46.651 --> 00:00:48.829
这就是用 " 减少 " 对你的帮助
Well, that's what useReduce does for you.

16
00:00:48.829 --> 00:00:51.706
所以 useReduce 是另一个钩子。
So useReducer is another hook.

17
00:00:51.706 --> 00:00:56.101
如果您不熟悉术语缩减器，那么它意味着您可以使用的功能
If you're not familiar with the term
reducer, it means a function that you can

18
00:00:56.101 --> 00:01:00.670
运行时采用旧状态，某种类型的操作，并返回到新的状态。
run that takes in an old state, some sort
of action, and returns to a new state.

19
00:01:00.670 --> 00:01:02.020
这真的是一个减速器。
That's really all a reducer is.

20
00:01:02.020 --> 00:01:05.489
它基本上只是一种具有特定呼叫特征的功能，好吗 ?
It's basically just a function with
a certain call signature, okay?

21
00:01:06.659 --> 00:01:09.864
所以在这里用 Reducer I 赋予它实际的功能
So here with useReducer I
give it the actual function,

22
00:01:09.864 --> 00:01:12.801
就是这里的一个减速器的功能
which is this one up here,
the reducer function.

23
00:01:12.801 --> 00:01:14.521
然后我给它一个初始状态
And then I give it an initial state.

24
00:01:14.521 --> 00:01:19.137
这个初始状态就是一切都是黑色的对吧
And this initial state is
everything is black, right?

25
00:01:22.277 --> 00:01:24.896
>> Brian Holt: 请注意，这与 Redux 不同。
&gt;&gt; Brian Holt: Do note that
this is different from Redux.

26
00:01:24.896 --> 00:01:27.834
在雷德克斯的情况下你预料它会在第一次运行
With Redux, you expect it to run
the reducer on the first time,

27
00:01:27.834 --> 00:01:28.896
这不是你的
this does not do that.

28
00:01:31.748 --> 00:01:33.581
>> Brian Holt: 在此情况下，为其提供初始对象和
&gt;&gt; Brian Holt: In this case,
you give it an initial object and

29
00:01:33.581 --> 00:01:34.569
这就是你的工作方式
that's how that works.

30
00:01:35.750 --> 00:01:37.829
好的，然后再给你两件事情。
Okay, and
then here it gives you back two things.

31
00:01:37.829 --> 00:01:42.629
它让你回到了目标
It gives you back the object,

32
00:01:42.629 --> 00:01:48.030
在这种情况下，商店的当前状态是一样的。
in this case,
the current state of the store as it were.

33
00:01:48.030 --> 00:01:50.883
而我正在毁灭 r， g和 b.
And here I'm destructuring out the r,
the g, and the b.

34
00:01:50.883 --> 00:01:55.082
然后它为您提供一个分派功能，使您能够将操作分派给
And then it gives you a dispatch function
which allows you to dispatch an action to

35
00:01:55.082 --> 00:01:55.840
减速器。
the reducer.

36
00:01:57.150 --> 00:02:00.891
你可以看到这些按钮，它调度 INCREMENT_R，
So you can see here all these buttons,
it's dispatching INCREMENT_R,

37
00:02:00.891 --> 00:02:04.120
DECREMENT_R， INCREMENT_G， DECREMENT_G， right?
DECREMENT_R, INCREMENT_G,
DECREMENT_G, right?

38
00:02:04.120 --> 00:02:06.030
我认为这是很容易阅读的守则。
This is, in my opinion,
quite readable code.

39
00:02:06.030 --> 00:02:09.740
所以这是一个非常好的例子来使用 Reducer。
So this is a really good
case to use useReducer.

40
00:02:09.740 --> 00:02:11.319
如果你在减速器里看看
And then if you look
down here in the reducer,

41
00:02:11.319 --> 00:02:15.889
它以对象的当前状态为动作。
it takes in the current state
of the object, the action.

42
00:02:15.889 --> 00:02:18.413
然后在下面的下面，它会返回状态，或者
And then down here at the bottom,
it returns the state, or

43
00:02:18.413 --> 00:02:19.917
所有这些都是回归状态
all these actually return state.

44
00:02:19.917 --> 00:02:25.641
所有这些都是物权转让他们创造了一个新目标
And all these are just object.assign,
they're creating a new object,

45
00:02:25.641 --> 00:02:30.903
旧的状态然后就会覆盖整个河对吧
the old set of state, and
then it's overriding the r, right?

46
00:02:30.903 --> 00:02:35.789
这辆 limitRGB 确保它不低于 0 或 255。
This limitRGB just makes sure that
it doesn't go below 0 or above 255.

47
00:02:35.789 --> 00:02:37.860
好吧这就是这个
Right, that's what this does.

48
00:02:37.860 --> 00:02:42.042
接下来的步骤就是向上和向下 50，对。
And then the step here is just
going up and down 50, right.

49
00:02:42.042 --> 00:02:47.586
所以如果我点击这个，就会达到 50 %的红色，
So if I click this,
it's going up to 50 red,

50
00:02:47.586 --> 00:02:53.715
100 红， 150， 200， 250， 255。
100 red, 150, 200, 250, 255.

51
00:02:53.715 --> 00:02:54.359
有道理吗
Make sense?

52
00:02:55.930 --> 00:02:57.050
这很像 Redux
It's very Redux like.

53
00:02:58.949 --> 00:03:04.861
现在，这个，这个减压器，这个减压器，非常容易的测试。
Now, what's great about this,
this reducer, it's extremely easy to test.

54
00:03:04.861 --> 00:03:08.639
你只要给它一个老的状态，一个动作，然后测试输出，对吧 ?
You just give it an old state, an action,
and then test the output, right?

55
00:03:08.639 --> 00:03:11.503
这允许您测试数据变异。
Which allows you to test data mutation.

56
00:03:11.503 --> 00:03:15.110
所有错误都是从某种意义上的数据变异引起的，对吗 ?
And all bugs arise from problems with
data mutation in some sense, right?

57
00:03:15.110 --> 00:03:19.465
因此，如果你能测试这一点，并确保状态的突变顺利进行。
So if you can actually test that and make
sure that the mutation of state goes well.

58
00:03:19.465 --> 00:03:20.524
这对你很重要
That's a big boon to you.

59
00:03:20.524 --> 00:03:23.599
这就是 Redux 在我看来的优点
That's the whole advantage
of Redux in my opinion.

60
00:03:23.599 --> 00:03:27.370
正如你想象的，这真的取代了很多时候
So as you might imagine,
this really replaces a lot of times when

61
00:03:27.370 --> 00:03:30.205
你需要 Redux你可以用 Reducer ，对吧 ?
you need Redux, you can just use,
useReducer, right?

62
00:03:31.699 --> 00:03:34.680
那么，如果要为整个应用程序执行该操作，会发生什么情况 ?
Well, what happens if you want to
do it for your entire application?

63
00:03:34.680 --> 00:03:38.509
那么，您可以同时使用上下文和 useReducer 。
Well, you can use context and
useReducer together.

64
00:03:40.020 --> 00:03:41.560
基本上是雷德克斯对吧
Basically Redux, right?

65
00:03:41.560 --> 00:03:43.110
是关于同一件事的
It's about the same thing.

66
00:03:43.110 --> 00:03:46.449
所以我不再多使用 Redux 了
So I don't use Redux as much anymore.

67
00:03:46.449 --> 00:03:47.711
我还是会教给你的
I will still teach it to you so

68
00:03:47.711 --> 00:03:50.563
你可以做出你想做的决定
that you can make whatever decision
you want to make about that.

69
00:03:50.563 --> 00:03:55.009
但我认为背景和 useReducer 在很大程度上取代了它的需求。
But I think context and useReducer
largely supplant the need for it.
