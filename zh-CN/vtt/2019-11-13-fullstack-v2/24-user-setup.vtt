WEBVTT

1
00:00:00.535 --> 00:00:04.272
>> Jem Young: 现在不幸的是，如果我切换到那个用户，
&gt;&gt; Jem Young: So unfortunately now,
if I switch to that user,

2
00:00:04.272 --> 00:00:08.932
我没有 root 用户访问权，我没有超级用户访问权。
I don't have root access,
I don't have super user access.

3
00:00:08.932 --> 00:00:11.497
这就是 sudo 命令。
And that's referred to
as the sudo command.

4
00:00:11.497 --> 00:00:15.287
sudo 代表超级用户，这很棒，很有道理。
sudo stands for super user do, which
is nice, cuz that actually makes sense.

5
00:00:15.287 --> 00:00:17.580
所以每当你说 sudo ，超级用户就会这样做。
So whenever you say sudo,
you're like, super user do this.

6
00:00:17.580 --> 00:00:20.923
因此，本质上，我正在以升级的特权运行该命令。
So essentially, I'm running that
command with escalated privileges.

7
00:00:20.923 --> 00:00:24.687
但是首先，我需要给那个用户我刚刚创造了这些特权。
But first, I need to give that user
I just created those privileges.

8
00:00:24.687 --> 00:00:27.454
例如，如果现在切换的话，我就不能这么做了。
For instance, if we switch over now,
I won't be able to do that much.

9
00:00:27.454 --> 00:00:30.135
我将限制我的主目录 cutz ，但没有 root 用户访问权。
I'll be limited my home directory
cuz I have no root access.

10
00:00:30.135 --> 00:00:32.454
所以我们要用这个用户的修改指令
So we're gonna use the user
mod command for it.

11
00:00:32.454 --> 00:00:33.953
它会修改用户的
It's gonna modify the user.

12
00:00:33.953 --> 00:00:40.976
我们会说用户 mod -aG sudo ，然后我们刚刚创建的用户名。
We're gonna say user mod -aG sudo,
and then the username we just created.

13
00:00:44.131 --> 00:00:49.347
> > Jem Young: 所以我要说， usermod -aG sudo，
&gt;&gt; Jem Young: So I'm gonna say,
usermod -aG sudo,

14
00:00:49.347 --> 00:00:56.578
然后哎呀，铃人，然后 jem， >> Jem Young: Cool，
and then oops, sudo, and then jem,
&gt;&gt; Jem Young: Cool,

15
00:00:56.578 --> 00:00:59.819
所以我把杰姆加到这个超级用户群里
so I just added jem to
this super user's group.

16
00:01:02.895 --> 00:01:07.257
> > Jem Young: 酷，我一直很清楚。
&gt;&gt; Jem Young: Cool, so
I keep hitting clear.

17
00:01:07.257 --> 00:01:11.299
现在我想测试那个用户是否只是为了确保我所做的工作。
Now I wanna test that user out just to
make sure that what I did actually worked.

18
00:01:11.299 --> 00:01:12.694
所以我们要换个用户
So we are gonna switch user.

19
00:01:12.694 --> 00:01:16.118
因为那是苏和杰姆
For that, it's su, and, jem.

20
00:01:19.299 --> 00:01:21.412
>> Jem Young: So 您的用户名。
&gt;&gt; Jem Young: So su your username.

21
00:01:21.412 --> 00:01:24.501
然后我想确认我有超级用户的权限
And then I wanna verify that
I have superuser access.

22
00:01:24.501 --> 00:01:27.152
有很多方法可以做但我想看看 auth 日志
There's lots of ways to do this, but
I like to take a look at the auth log,

23
00:01:27.152 --> 00:01:28.506
现在是时候看看日志了
cuz it's a good time to look at logs.

24
00:01:28.506 --> 00:01:35.305
所以如果我说猫 /var/
So if I say, cat /var/, let's see,

25
00:01:35.305 --> 00:01:40.302
log， >> Jem Young: /auth.log
log,
&gt;&gt; Jem Young: /auth.log,

26
00:01:40.302 --> 00:01:42.385
它不会让我这么做的
it's not gonna let me do it.

27
00:01:42.385 --> 00:01:47.793
因为查看这些日志需要超级用户访问权。
Because looking at these logs
requires super user access.

28
00:01:47.793 --> 00:01:53.591
现在我要说的是除了我要说苏多
For now, I'm gonna say same
thing except I'm gonna say sudo.

29
00:01:53.591 --> 00:01:57.980
它会问我密码，然后我就把那个日志记录了。
It's gonna ask me the password, and
there, I just catted that log file.

30
00:02:00.337 --> 00:02:02.856
> > Jem Young: 每个人都能抓住我所做的一切吗 ?
&gt;&gt; Jem Young: Everybody catch what I did,
anybody behind?

31
00:02:02.856 --> 00:02:04.634
很酷吧萨姆
Cool, Sam, yes?

32
00:02:04.634 --> 00:02:06.525
>> Sam: 我没有这样的文件目录。
&gt;&gt; Sam: I'm getting no
such file directory.

33
00:02:06.525 --> 00:02:07.802
你想说什么
What are you pointing to?

34
00:02:07.802 --> 00:02:12.043
>> Jem Young: 我指的是 /var ，其实
&gt;&gt; Jem Young: I'm pointing to /var,
actually,

35
00:02:12.043 --> 00:02:16.568
仅备份 /var/log/auth.log。
just go up, /var/log/auth.log.

36
00:02:16.568 --> 00:02:19.425
每个 Ubuntu 分发都应该有一个 authlog。
Every Ubuntu distribution
should have an authlog.

37
00:02:19.425 --> 00:02:22.048
如果没有的话那我们就在路上了
[LAUGH] If it doesn't,
we're way of course then.

38
00:02:22.048 --> 00:02:26.158
>> Student : 正在获取我的用户不在 sudor的文件中。
&gt;&gt; Student: I'm getting that my
user is not in the sudor's file.

39
00:02:26.158 --> 00:02:28.318
>> Jem Young: 好的，让我们后退。
&gt;&gt; Jem Young: Okay, so let's step back.

40
00:02:28.318 --> 00:02:31.069
您是否运行了用户修改命令?
Did you run the user mod command?

41
00:02:31.069 --> 00:02:31.872
>> 学生: 我做到了。
&gt;&gt; Student: I did.

42
00:02:31.872 --> 00:02:34.646
>> Jem Young: 是同一个用户吗 ?
&gt;&gt; Jem Young: And it's the same user?

43
00:02:38.513 --> 00:02:40.545
> > 学生: 我再做一次。
&gt;&gt; Student: I'll just run it again.

44
00:02:40.545 --> 00:02:43.215
>> Jem Young: 如果所有其他用户都失败，请创建另一个用户。
&gt;&gt; Jem Young: If all else fails,
make another user.

45
00:02:43.215 --> 00:02:47.174
[ LAUGH] 如果该操作不起作用，请创建另一个服务器。
[LAUGH] And if that doesn't work,
create another server.

46
00:02:47.174 --> 00:02:48.408
我就是这么做的 >> 类: [LAUGH]
That's what I do.
&gt;&gt; class: [LAUGH]

47
00:02:48.408 --> 00:02:49.199
>> Jem Young: 假装第一个没有
&gt;&gt; Jem Young: Pretend the first one didn't

48
00:02:49.199 --> 00:02:50.533
发生了。 没事的没事的
happen.
It's fine.

49
00:02:50.533 --> 00:02:54.156
我们都在同一层可以快速回电的地方
We all are at the same level where we
can catch back up pretty quickly at

50
00:02:54.156 --> 00:02:54.853
这一点。
this point.

51
00:02:57.812 --> 00:03:00.877
>> Jem Young: 作为速记，如果我试着逃跑，
&gt;&gt; Jem Young: As a shorthand,
so if I try to run, actually,

52
00:03:00.877 --> 00:03:04.650
我会做点不一样的事
I'll do something a little different,
I'll run less,

53
00:03:04.650 --> 00:03:09.939
cuz 猫把整个文件的输出都转了，少给我一个页面。
cuz cat just dumps the entire file output,
less will give me a page.

54
00:03:09.939 --> 00:03:12.310
再一次我也没和苏多指挥过
And once again,
I didn't run that command with sudo.

55
00:03:12.310 --> 00:03:17.487
所以我喜欢这样做的捷径，因为它本质上是在说，
So a shortcut to do that is sudo Which I
love because it's essentially saying,

56
00:03:17.487 --> 00:03:21.185
sudo，我运行的最后一个命令是 sudo 访问权。
sudo, the last command that I ran but
with sudo access.

57
00:03:21.185 --> 00:03:24.213
这是一个速记，以防你试图运行需要 sudo 的东西
And it's a shorthand in case you ever
try to run something that requires sudo

58
00:03:24.213 --> 00:03:24.793
许可权。
permission.

59
00:03:24.793 --> 00:03:31.257
只需要 sudo !!，我将重新运行上一命令，并与 sudo重新运行。
Just sudo !!,
I'll rerun the last command with sudo.

60
00:03:31.257 --> 00:03:33.324
现在我们越来越少了
And now we're running with less, so

61
00:03:33.324 --> 00:03:36.062
我可以只使用箭头键来遍历文件。
I can traverse the file
with just the arrow keys.

62
00:03:36.062 --> 00:03:38.961
而且比跑来的猫更友好些
And it's a little bit more
friendly than running cat,

63
00:03:38.961 --> 00:03:41.299
把所有东西都转储到一个终端上
which just dumps everything to a terminal.

64
00:03:41.299 --> 00:03:44.956
>> student2: 如何逃脱猫?
&gt;&gt; student2: How do you escape cat?

65
00:03:44.956 --> 00:03:46.837
>> Jem Young: 好问题， q。
&gt;&gt; Jem Young: Good question, q.

66
00:03:46.837 --> 00:03:50.889
为了逃避，就打 q ，你就会出来了。
To escape less, just hit q,
and you'll be back out.

67
00:03:50.889 --> 00:03:53.223
问得好谢谢
Good question, thank you.

68
00:03:53.223 --> 00:03:55.825
请你问我这些问题
And please,
ask me those types of questions,

69
00:03:55.825 --> 00:04:00.443
我忘了我是用来做这些事的不是每个人都是这样
cuz I forget that I'm used to doing these
things and not everybody is the same way.

70
00:04:00.443 --> 00:04:01.477
但现在我们在 authlog。
But now we're in authlog.

71
00:04:01.477 --> 00:04:03.218
现在是安全话题的时候了
Now's a great time talk about security.

72
00:04:03.218 --> 00:04:05.800
我说我们要谈安全明天可能更多
I said we're gonna talk about security,
probably more of it tomorrow.

73
00:04:05.800 --> 00:04:09.971
但是您的认证日志只是一个尝试执行操作的人员的日志
But your authlog is just a log of
people that are attempting to do

74
00:04:09.971 --> 00:04:13.447
或登录到服务器。
something on your server,
or log into your server.

75
00:04:13.447 --> 00:04:16.411
既然我们的服务器已经升了一小时了
And since our server's been up for
maybe an hour or so,

76
00:04:16.411 --> 00:04:20.920
根据你进来的地方你现在可以看到有人在试图
depending on where you came in at, you can
see right now that there are people trying

77
00:04:20.920 --> 00:04:23.064
能主动进入我的服务器
to actively get in my server right now.

78
00:04:23.064 --> 00:04:25.622
你在想我只是一个人
And you're thinking, I'm just some person.

79
00:04:25.622 --> 00:04:29.406
[ LAUGH] 为什么这些黑客会试图进入我的服务器?
[LAUGH] Why would these hackers
try to get into my server?

80
00:04:29.406 --> 00:04:34.084
因为有电脑在不停的运行他们在扫描整个
It's because there are computers running
constantly and they're scanning the entire

81
00:04:34.084 --> 00:04:37.446
因特网，每个可能的 IP 地址组合。
Internet, every single possible
combination of IP address.

82
00:04:37.446 --> 00:04:41.189
他们正在测试漏洞，他们正在测试较弱的密码，
And they're testing for vulnerabilities,
they're testing for weak passwords,

83
00:04:41.189 --> 00:04:42.887
所以我们不使用密码
which is why we don't use passwords.

84
00:04:42.887 --> 00:04:44.308
不管你有多聪明
It doesn't matter how clever you are,

85
00:04:44.308 --> 00:04:46.082
也许最终会有人来测试
someone's probably gonna
test it eventually.

86
00:04:46.082 --> 00:04:50.757
他们在测试您是否打开了易受攻击的端口 ?
They're testing, do you have ports
open that are vulnerable applications?

87
00:04:50.757 --> 00:04:53.367
就像五号博尔顿在另一天利用，
So like that V Bolton
exploit the other day,

88
00:04:53.367 --> 00:04:55.987
他们在测试你是否有这个运行
they're testing if you have that running.

89
00:04:55.987 --> 00:04:57.148
他们在说我知道去那里
They're saying, I know to get into there.

90
00:04:57.148 --> 00:05:02.430
如果你想知道这看起来像一帮小人
And if you're wondering,
this looks like a bunch of gibberish,

91
00:05:02.430 --> 00:05:07.057
看看我的好东西哪来的
check out, let's see,
where's a good one for mine?

92
00:05:07.057 --> 00:05:10.428
我们走吧 有一个无效的用户 appserver。
Here we go.
There's one, invalid user appserver.

93
00:05:10.428 --> 00:05:15.358
因此有人尝试使用用户名 appserver 登录到我的服务器
So someone was trying to log into my
server using the username appserver

94
00:05:15.358 --> 00:05:17.096
在端口 33710上。
on the port 33710.

95
00:05:17.096 --> 00:05:18.586
我不知道那是什么港口
I don't know what port that is, but

96
00:05:18.586 --> 00:05:21.524
我确定这是一个在港口上运行的着名应用。
I'm sure it's some well-known
application that runs on that port.

97
00:05:21.524 --> 00:05:26.417
你可能在想，哇，我为冒犯这些人做了什么 ?
And you're probably thinking, wow,
what did I do to offend these people?

98
00:05:26.417 --> 00:05:30.553
没事的大家都是你的人
Nothing, [LAUGH] everybody all the time
are you gonna try to break into your

99
00:05:30.553 --> 00:05:31.764
服务器不断地运行。
server constantly.

100
00:05:31.764 --> 00:05:32.920
你只是接受了这个
You just accept that's a given.

101
00:05:32.920 --> 00:05:34.564
你不会离开你的前门的
You wouldn't leave your front door open.

102
00:05:34.564 --> 00:05:35.644
这就是我们使用 SSH 密钥的原因。
That's why we use SSH keys.

103
00:05:35.644 --> 00:05:39.358
据我们所知， SSH 密钥是不可破坏的。
SSH keys are,
as far as we know, unbreakable.

104
00:05:39.358 --> 00:05:41.641
除非你把它拿走不然还有其他的弱点
Unless you give it away or
there's some other vulnerability.

105
00:05:41.641 --> 00:05:47.034
如果我们想看看我们的服务器的真实情况
If we want to see a real time of
what's happening with our server,

106
00:05:47.034 --> 00:05:49.792
我要用尾巴的命令
I'm gonna use the tail command.

107
00:05:49.792 --> 00:05:53.257
其实我要开始了， > > Jem Young: 头，
Actually I'll start,
&gt;&gt; Jem Young: head,

108
00:05:53.257 --> 00:05:56.538
头会给我一个文件的最上面的 x 行
head will give me the top
x lines of a file.

109
00:05:56.538 --> 00:06:02.122
所以我说， sudo， >> Jem Young: head，
So I will say, sudo,
&gt;&gt; Jem Young: head,

110
00:06:04.201 --> 00:06:05.533
>> Jem Young:
&gt;&gt; Jem Young: And it's just gonna give

111
00:06:05.533 --> 00:06:08.394
首先我想说 10 行任何给定的文件
me the first,
I wanna say ten lines of any given file.

112
00:06:08.394 --> 00:06:13.658
所以，不是相反的，但它的必然是尾巴。
So the, not inverse, but
the corollary to that would be tail.

113
00:06:13.658 --> 00:06:14.988
你在想
And you're wondering,

114
00:06:14.988 --> 00:06:18.292
为什么会有那么多不同的方法来查看 Linux中的文件 ?
why are there so many different
ways to look at a file in Linux?

115
00:06:18.292 --> 00:06:21.908
因为它们都很有用尤其是当你说的是
Because they're all useful, especially
when you're talking about megabytes of log

116
00:06:21.908 --> 00:06:24.696
文件，你想从部分快速跳转到部分。
files, you wanna be able to quickly
jump from portion to portion.

117
00:06:24.696 --> 00:06:26.492
头会给我这个文件的开始
head will give me what
the file started with,

118
00:06:26.492 --> 00:06:28.112
它会给我带来的结果
tail will give me what it finished with.

119
00:06:28.112 --> 00:06:32.581
所以如果我用尾巴， > > Jem Young: -f，
So if I use tail,
&gt;&gt; Jem Young: -f, for follow,

120
00:06:32.581 --> 00:06:34.566
这会使尾巴保持开放
this will keep tail open.

121
00:06:34.566 --> 00:06:39.305
在每次对该日志文件执行新操作时，都会遵循此操作。
And it will follow along with every time
something new happens to to that log file.

122
00:06:39.305 --> 00:06:40.848
它只会输出
It will just keep outputting.

123
00:06:40.848 --> 00:06:43.766
例如，这件事就发生了。
And for instance, this just happened.

124
00:06:43.766 --> 00:06:48.149
有人尝试在端口 3621 上连接到我的计算机
Someone just tried to connect
to my computer on port 3621 with

125
00:06:48.149 --> 00:06:49.509
SSH 密钥无效。
an invalid SSH key.

126
00:06:49.509 --> 00:06:54.201
如果你想对这个世界感到偏执并且人们会去找你
And if you wanna feel paranoid about the
world and that people are out to get you,

127
00:06:54.201 --> 00:06:57.718
你就可以看到你的日志文件里有人试图闯进来
you can just tail your log file
watch people try to break in.

128
00:06:57.718 --> 00:06:58.985
再说一次这不是私人的
Again, it's not personal.

129
00:06:58.985 --> 00:07:01.925
尾巴 -f 可能是你学到的最有力的东西之一
tail -f is probably one of the most
powerful things you're gonna learn

130
00:07:01.925 --> 00:07:03.103
在调试的时候
when it comes to debugging.

131
00:07:03.103 --> 00:07:07.084
因为服务器上的一切你都想把它记录下来
Because everything on a server,
you wanna log it somewhere.

132
00:07:07.084 --> 00:07:10.291
因为当事情出错的时候，你就不知道为什么了。
Because when things go wrong,
you'll have no idea why.

133
00:07:10.291 --> 00:07:13.279
所以你想把你的档案记录在某个地方最后他们会被清理干净
So you wanna log all your file somewhere,
and eventually they get cleaned up.

134
00:07:13.279 --> 00:07:14.387
但是跟踪日志文件和
But tailing a log file and

135
00:07:14.387 --> 00:07:17.184
然后连接到位于不同终端或外壳的服务器。
then connecting to a server at
a different terminal or shell and

136
00:07:17.184 --> 00:07:21.067
了解正在发生的事情是我们拥有的最强大的调试工具之一。
understanding what's happening is one of
the most powerful debugging tools we have.

137
00:07:21.067 --> 00:07:24.334
它等价于在 JavaScript 控制台中记录所有内容。
It's equivalent to in JavaScript
console logging everything.

138
00:07:24.334 --> 00:07:30.172
所以尾巴 -f 是一个要记住的指令，要离开这里，只需要 Ctrl+C 。
So tail -f is a command to remember,
and to get out of here, just Ctrl+C.

139
00:07:30.172 --> 00:07:32.144
这将停止跟踪该日志文件。
And that will stop
following that log file.

140
00:07:35.485 --> 00:07:38.033
>> Jem Young: 好的，我们知道我们的服务器很安全，
&gt;&gt; Jem Young: All right, so
we know that our server's secure,

141
00:07:38.033 --> 00:07:39.862
我们的人还没进入呢
cuz people haven't gotten in yet.

142
00:07:39.862 --> 00:07:40.930
库兹我还在这里
Cuz I'm still here.

143
00:07:40.930 --> 00:07:44.733
如果我想去我的家
If I wanna go to my home directory,

144
00:07:44.733 --> 00:07:49.468
就像在我们的麦克机器 cd 和 pwd上一样
same as on our Mac machines, cd, and pwd.

145
00:07:49.468 --> 00:07:51.053
我在我的家里
And I'm in my home directory.

146
00:07:51.053 --> 00:07:54.617
这是我的游戏目录，不管这里发生什么事都不重要。
This is kind of my play directory, it
doesn't matter to much what happens here.

147
00:07:54.617 --> 00:07:59.529
第二个，我们会创建我们的 ssh 目录和其他的东西
In a second, we'll create our ssh
directory and all sorts of other things so

148
00:07:59.529 --> 00:08:00.461
我们可以用 ssh 的方式
we can ssh in.

149
00:08:00.461 --> 00:08:03.427
但是现在，感觉自由，你可以玩这个目录
But for now, feel free, you can
play around with this directory and

150
00:08:03.427 --> 00:08:04.740
做你想做的事
do kind of whatever you want.

151
00:08:04.740 --> 00:08:07.509
它不会影响更大的系统， cutz 是您的主目录。
It's not gonna affect the greater system,
cuz it's your home directory.
