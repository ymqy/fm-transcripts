WEBVTT

1
00:00:01.786 --> 00:00:03.251
>> Jem Young: 好的，这是它。
&gt;&gt; Jem Young: All right, this is it.

2
00:00:03.251 --> 00:00:05.078
我们现在就在家里
We're in the home stretch now.

3
00:00:05.078 --> 00:00:07.650
我们建立了我们的服务器，我们刚刚安装了节点。
We've built our server,
we just installed Node.

4
00:00:07.650 --> 00:00:09.874
所以现在我们想把它弄上去
So now we wanna get Node up and running.

5
00:00:09.874 --> 00:00:13.875
我们希望允许它接受请求并适当地处理它们。
We wanna allow it to accept requests and
handle them appropriately.

6
00:00:13.875 --> 00:00:17.411
然后我们想把它放在背景里然后我们想用某种
And then we wanna keep it running in the
background, then we wanna use some sort of

7
00:00:17.411 --> 00:00:20.960
版本控制以确保我们在出错时可以随时回滚。
version control to make sure that we can
rollback at anytime if we make mistakes.

8
00:00:23.239 --> 00:00:26.780
简单来说，应用体系结构。
Let's talk about, briefly,
application architecture.

9
00:00:26.780 --> 00:00:31.079
如果你问我一个高级工程师和
If you ask me what the difference
is between a senior engineer and

10
00:00:31.079 --> 00:00:35.219
一个初级工程师我说它是关于建筑的
a junior engineer,
I'd say it's about architecture.

11
00:00:35.219 --> 00:00:36.820
这不是关于代码，它是关于建筑的。
It's not about code,
it's about the architecture.

12
00:00:36.820 --> 00:00:39.490
从长远来说，它是将会得到你的架构和应用。
Cuz in the long run, it's the architecture
and application that will get you.

13
00:00:39.490 --> 00:00:42.170
它是如何排列文件，如何排列代码的方式。
It's how you arrange your files,
how you arrange your code.

14
00:00:42.170 --> 00:00:46.420
我们考虑的是长期的可维护性
That sort of thing is we're thinking about
long-term maintainability versus just,

15
00:00:46.420 --> 00:00:48.460
我是个黑客每天都能解决虫子
I'm a hacker who solves bugs every day.

16
00:00:48.460 --> 00:00:51.792
这更像是一个初级工程师，高级工程师认为是长期的。
That's more like a junior engineer,
senior engineers think long-term.

17
00:00:51.792 --> 00:00:55.792
所以当我们建立一个应用程序架构时，记住它会为
So when we set up an application
architecture, remember, it will live for

18
00:00:55.792 --> 00:00:57.255
可能是很久很久了
a long time, maybe years.

19
00:00:57.255 --> 00:00:59.567
所以你想让它以一种对你有意义的方式
So you want to make sure it's set up
in a way that makes sense to you and

20
00:00:59.567 --> 00:01:00.429
每个人都能同意
everybody can agree on.

21
00:01:00.429 --> 00:01:05.495
因为迁移文件不好玩， [ LAUGH] 是痛苦的。
Because migrating files is not fun,
[LAUGH] it is painful.

22
00:01:05.495 --> 00:01:09.695
其实我刚才只是说了很久以前关于密码的事
Actually, I just gave a talk not
too long ago about using code mods,

23
00:01:09.695 --> 00:01:12.864
我必须重写一堆 JavaScript 代码
cuz I had to rewrite a bunch
of JavaScript code, and

24
00:01:12.864 --> 00:01:15.975
使用代码模型是有效的方法
using code mods is an efficient
way of doing that.

25
00:01:15.975 --> 00:01:17.164
这可能有个课
There's probably a class on that.

26
00:01:17.164 --> 00:01:19.171
如果代码上没有课值就值了
If there's not a class on code mods,
it's worth taking.

27
00:01:19.171 --> 00:01:23.329
它更先进，但上面有一类，我也会链接到这个。
It's more advanced, but there's a class
on that and I'll link to that as well.

28
00:01:23.329 --> 00:01:28.054
但在基本应用架构方面，如果你说的是
But in terms of basic application
architecture, if you're talking about

29
00:01:28.054 --> 00:01:33.450
你最简单的最基本的建筑，这可能是一个好的设置。
your most simplest, basic architecture,
this is probably a good setup.

30
00:01:33.450 --> 00:01:35.030
你也许不同意这很好
You may disagree, and that's fine.

31
00:01:35.030 --> 00:01:36.069
这是我通常使用的
This is the one I usually use.

32
00:01:36.069 --> 00:01:39.650
所以我用了 ui ，然后我用 css， js， html。
So I use ui, and then I use css, js, html.

33
00:01:39.650 --> 00:01:42.871
然后在 ui 外，我用帮手， utils。
Then outside of ui, I use helpers, utils.

34
00:01:42.871 --> 00:01:44.344
也许是为了认证
Maybe something for authentication.

35
00:01:44.344 --> 00:01:47.295
如果我想和数据库谈谈的话，我把所有这些都放在 UI之外。
If I ever want to talk to database,
I put all that outside UI.

36
00:01:47.295 --> 00:01:50.837
但我试图在他们所代表的文件夹中约束它。
But I try to constrain it within
the folders that they represent.

37
00:01:50.837 --> 00:01:54.864
这不像是大事但是长远来说如果你要做一个全新的品牌
This doesn't seem like a big deal, but in
the long run, if you're making a brand new

38
00:01:54.864 --> 00:01:58.860
应用程序和您的业务，您的架构就会迎头赶上。
application and you turn into a business,
your architecture will catch up to you.

39
00:01:58.860 --> 00:02:03.078
就像 Facebook 的早期依赖 PHP ，结果是
Much like Facebook depended early
days on PHP, and it turns out,

40
00:02:03.078 --> 00:02:04.694
人们不喜欢 PHP
people don't like PHP.

41
00:02:04.694 --> 00:02:06.944
但现在他们创造了一个完整的编译器
But now they have they
created an entire compiler so

42
00:02:06.944 --> 00:02:09.455
人们还可以写 PHP 来编译其他的东西，
people can still write PHP to
compile to something else,

43
00:02:09.455 --> 00:02:12.038
因为他们很早就做出了决定
because of these early decisions
that they made early on.

44
00:02:12.038 --> 00:02:16.240
我在纽约的一个创业公司工作，决定使用 Google 关闭。
I worked at a startup in New York,
which decided to use Google Closure.

45
00:02:16.240 --> 00:02:17.396
不是 J， S，
So not the J, the S,

46
00:02:17.396 --> 00:02:21.563
谷歌内部开发的那种晦涩的语言
the really kind of obscure language
that Google developed internally.

47
00:02:21.563 --> 00:02:24.628
因为我和这个人在谷歌工作，我们看到了谷歌的关闭。
And because this person and I worked at
Google, we saw to use Google Closure.

48
00:02:24.628 --> 00:02:27.275
后来我们付了钱因为没人使用闭包
And we paid for that later
because no one uses Closure, and

49
00:02:27.275 --> 00:02:29.441
我得去看那些不存在的东西
[LAUGH] I had to look stuff
up that didn't exist.

50
00:02:29.441 --> 00:02:31.967
所以我想说的是全部堆的一部分你得做出决定
So all I'm saying is part of full
stack is you have to make the decision

51
00:02:31.967 --> 00:02:32.960
关于你的申请
about your application.

52
00:02:32.960 --> 00:02:34.289
你要用的那堆
The stack that you're gonna use.

53
00:02:34.289 --> 00:02:35.500
你要用的密码
The code you're gonna use.

54
00:02:35.500 --> 00:02:38.139
想想，别人能用吗 ?
And think about, can other people use it?

55
00:02:38.139 --> 00:02:40.030
或者你只是在用它，因为它很酷吗 ?
Or are you just using
it because it's cool?

56
00:02:40.030 --> 00:02:43.939
你是在用鲁斯特什么的，不是很多人知道的吗 ?
Are you just using Rust or something,
that not many people know?

57
00:02:43.939 --> 00:02:44.500
还是哈斯凯尔
Or Haskell?

58
00:02:45.620 --> 00:02:47.751
还是利斯普 [ LAUGH] 或某种类型的列表语言。
Or Lisp?
[LAUGH] Or some sort of list language.

59
00:02:47.751 --> 00:02:52.471
这对你很酷，但如果你要登上 20 个人，他们知道 Lisp吗 ?
Which is cool to you, but if you're gonna
on-board 20 people, do they know Lisp?

60
00:02:52.471 --> 00:02:54.752
他们是否了解您的应用程序体系结构?
Do they understand your
application architecture?

61
00:02:54.752 --> 00:02:57.913
如果你说测试在这里代码就在这里
If you say, the tests are over here and
the code is over here, and

62
00:02:57.913 --> 00:03:01.263
你想想别人怎么用你的代码
it all makes sense to you, think
about how other people use your code.

63
00:03:01.263 --> 00:03:03.656
抱歉我知道我要去建筑学
Sorry, I know I'm going on
about architecture, but

64
00:03:03.656 --> 00:03:07.181
这些东西是很重要的我们不太想太多
this stuff is really important,
it's something we don't think about a lot.

65
00:03:07.181 --> 00:03:09.111
但以你想要的方式来设置代码。
But set your code up in
the way that you want.

66
00:03:09.111 --> 00:03:12.460
当你想到这种结构的时候，你会发现它会变得更容易。
And you'll see it's a lot easier when you
think in terms of this sort of structure.
