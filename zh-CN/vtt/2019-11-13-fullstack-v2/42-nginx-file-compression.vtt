WEBVTT

1
00:00:01.330 --> 00:00:04.139
>> Jem Young: 而之前， Sam 提到了 Brotli ，所以
&gt;&gt; Jem Young: And earlier,
Sam mentioned Brotli, so

2
00:00:04.139 --> 00:00:09.016
我们要在服务器上做两种基本的压缩
there's two basic types of compression
we're gonna do on servers and

3
00:00:09.016 --> 00:00:14.236
在缺省情况下， NGINX 是最棒的，它被称为 gzip。
the great thing is NGINX by default
has this turned on, it's called gzip.

4
00:00:14.236 --> 00:00:17.663
有谁知道一般的压缩是什么 ?
Does anybody know what
compression is in general?

5
00:00:17.663 --> 00:00:21.696
你的普通心理模型是什么
Like just what's your
general mental model on it?

6
00:00:21.696 --> 00:00:22.605
萨姆?
Sam?

7
00:00:22.605 --> 00:00:24.010
> > Sam: 这是重复，对吧 ?
&gt;&gt; Sam: That is do duplication, right?

8
00:00:24.010 --> 00:00:28.059
> > Jem Young: 是的，是的，这是一个很好的方法。
&gt;&gt; Jem Young: Yeah, yeah,
that's a good way of putting it.

9
00:00:28.059 --> 00:00:32.329
> > 扬声器 3: 它正在获取信息并将其放入更小的容器中。
&gt;&gt; Speaker 3: So it's taking information
and putting it into a smaller container.

10
00:00:32.329 --> 00:00:35.435
因此，它可以是有损或无损的。
So it could be lossy or lossless.

11
00:00:35.435 --> 00:00:41.201
Lossy 您抛出了希望没人注意或关心的详细信息。
Lossy you throw out details that you
hope nobody will notice or care about.

12
00:00:41.201 --> 00:00:46.037
无路可就像折叠降落伞一样仔细地折叠
Lossless is like folding a parachute
you fold it carefully and

13
00:00:46.037 --> 00:00:49.850
你把它放到一个小容器里
you put it into a small
of container as possible.

14
00:00:49.850 --> 00:00:54.968
洛西你用一把锯或剪刀把零件切开
Lossy you take a chainsaw or
scissors and you cut out parts and

15
00:00:54.968 --> 00:00:58.490
但愿它还能当降落伞
hopefully it still works as a parachute.

16
00:00:58.490 --> 00:01:00.838
>> Jem Young: 是的，我不喜欢
&gt;&gt; Jem Young: Yeah, no I like that.

17
00:01:00.838 --> 00:01:03.744
你丢了我的降落伞卡兹我就像是
You lost me a bit about
parachute cuz I was sort of like

18
00:01:03.744 --> 00:01:05.876
我应该用这个来比喻吗
that's a good analogy should I use that?

19
00:01:05.876 --> 00:01:07.355
但我喜欢
But I like that.

20
00:01:07.355 --> 00:01:12.305
你可能都熟悉的是 MP3s
The one you're probably all
familiar with is MP3s that

21
00:01:12.305 --> 00:01:15.469
是一种有损压缩的算法
is a lossy compression algorithm.

22
00:01:15.469 --> 00:01:19.573
所以如果你见过 WAV 文件现在我在和自己约会
So if you've ever seen a WAV file,
now I'm dating myself,

23
00:01:19.573 --> 00:01:24.501
但是 [LAUGH] WAV 文件是未修改的无损记录音频的方式
but [LAUGH] WAV files are unmodified
lossless ways of recording audio and

24
00:01:24.501 --> 00:01:28.052
在拨号上网的时候，它们是巨大的。
in the days of dial-up Internet,
they were huge.

25
00:01:28.052 --> 00:01:32.401
不能共享 WAV 文件，它们可以是 200，300，400，500 兆字节
You couldn't share a WAV file they could
be 200, 300, 400, 500 megabytes for

26
00:01:32.401 --> 00:01:32.911
一首歌
one song.

27
00:01:32.911 --> 00:01:37.277
这简直太疯狂了需要几年的时间
That's insane on dial-up
that will take years.

28
00:01:37.277 --> 00:01:41.234
所以他们发明了，改变了分享的游戏是压缩的。
So they invented, what changed
the game on sharing was compression.

29
00:01:41.234 --> 00:01:46.091
他们创造了一个叫做 MP3 的东西
They created something called MP3
which is MPEG layer 3 which is

30
00:01:46.091 --> 00:01:48.397
电影专家组。
Motion Picture Expert Group.

31
00:01:48.397 --> 00:01:50.722
我又怎么知道这些随机的事情呢 ?
Again, why do I know these random things?

32
00:01:50.722 --> 00:01:54.609
没事的，但是现在你知道这些乱真的东西，所以你应该觉得
It's okay, but now you know those random
things so you should feel as bad for

33
00:01:54.609 --> 00:01:55.537
我也是个书呆子
being a nerd too.

34
00:01:55.537 --> 00:01:58.819
但它所做的是把所有东西都给了一个 WAV 文件
But what it did was it took
all of given a WAV file,

35
00:01:58.819 --> 00:02:02.756
你的波形看起来像这样向上和向下
you have waveforms that look
like this they go up and down.

36
00:02:02.756 --> 00:02:06.225
它说，你知道，人类甚至都听不到这些东西
And it said, you know,
humans can't even hear these things so

37
00:02:06.225 --> 00:02:08.850
我们先把这些切掉你有个 MP3
let's just chop those out and
you have an MP3.

38
00:02:08.850 --> 00:02:09.802
而这一点
And that gets,

39
00:02:09.802 --> 00:02:15.096
就像 200 兆字节的文件被记录到 2 兆字节里
like what was a 200 megabyte file down to
2 megabytes which is really impressive.

40
00:02:15.096 --> 00:02:20.086
压缩的艺术的一部分是知道你能做什么
And part of the art of compression
is knowing what you can take out,

41
00:02:20.086 --> 00:02:25.182
就像山姆说的压缩或压缩
so like Sam was saying lossless
compression or lossy compression.

42
00:02:25.182 --> 00:02:30.038
就服务器压缩来说我们在说什么
In terms of server compression
the what where doing is we're saying,

43
00:02:30.038 --> 00:02:35.158
哎，这个文件说宝石，宝石，宝石，宝石，宝石，宝石，宝石，宝石。
hey, this file says gem, gem, gem,
gem, gem, gem, gem, gem, gem.

44
00:02:35.158 --> 00:02:40.206
我可以通过创建一种伪编程语言来压缩它
I can compress that by just creating
a sort of pseudo programming language that

45
00:02:40.206 --> 00:02:45.495
说，不要重复宝石 20 次我只会创造 20 倍的宝石
says, instead of repeating gem 20 times
I'm just gonna create gem times 20.

46
00:02:45.495 --> 00:02:49.531
这样压缩的东西就像这样，这就是压缩的本质。
And that compresses things down like this
and that's the essence of compression.

47
00:02:49.531 --> 00:02:53.807
所以如果你认为 1 和 0 ，如果你说下一个区块有 10 个 1 秒，
So if you think of 1s and 0s,
if you say the next block has ten 1s and

48
00:02:53.807 --> 00:02:57.483
十个 0s 只向服务器发送这些指令
ten 0s just send those instructions
down to the server and

49
00:02:57.483 --> 00:03:00.872
那么客户机可以解压缩或解压缩这些文件。
then the client can unpack those or
uncompress them.

50
00:03:00.872 --> 00:03:02.776
这就是你的真实情况
And that's how you have really,

51
00:03:02.776 --> 00:03:06.516
能卸载到这么大的东西的小载荷
really small payloads that can
unload to something that is huge.

52
00:03:06.516 --> 00:03:11.555
现在有个东西叫了，这个很有趣，一个 gzip 炸弹。
Now there's something called, and
this is just interesting, a gzip bomb.

53
00:03:13.455 --> 00:03:15.795
>> Jem Young: 你觉得 gzip 炸弹是什么，
&gt;&gt; Jem Young: What do you think
gzip bomb does or any sort of,

54
00:03:15.795 --> 00:03:17.420
你觉得 zip 炸弹会怎么做
what do you think zip bomb does?

55
00:03:17.420 --> 00:03:20.010
这是在硅谷的一个季节。
This was in Silicon Valley
one of the seasons.

56
00:03:20.010 --> 00:03:23.103
>> 扬声器 4: 像这里的彼得只有那么多的记忆或类似的东西
&gt;&gt; Speaker 4: Like here Peter only has so
much memory or something like that and

57
00:03:23.103 --> 00:03:26.138
当你不压缩它的时候它就会越来越多
then when you're uncompressing
something it takes up more and

58
00:03:26.138 --> 00:03:28.844
更多的记忆你的电脑已经没有了
more memory that your computer
doesn't have anymore.

59
00:03:28.844 --> 00:03:29.663
是这样吗
Is that it?

60
00:03:29.663 --> 00:03:30.561
之类的吗
Something like that?

61
00:03:30.561 --> 00:03:34.641
>> Jem Young: 是的，你可以创造，因为在压缩中
&gt;&gt; Jem Young: Yeah, you can create,
because that languagry in compressing

62
00:03:34.641 --> 00:03:39.418
你的意思是我要去拿宝石那是 30 次
where you saying like, hey,
I'm gonna take gem and that's 30 times.

63
00:03:39.418 --> 00:03:43.098
但如果我们创建一个自我引用循环
But what if we just created a self
referential loop that says,

64
00:03:43.098 --> 00:03:48.000
这宝石是 30 倍的宝石它会被包装在 30 次的宝石上
this is gem 30 times and it unpacks to
something that says this is gem 30 times.

65
00:03:48.000 --> 00:03:49.920
然后你的文件系统会爆炸
And then your file system explodes and

66
00:03:49.920 --> 00:03:53.230
你可以用被称为 zip 炸弹的整个系统
you can take down entire systems
with what are known as zip bombs.

67
00:03:53.230 --> 00:03:58.481
他们的工作还挺有趣的 [ LAUGH ] ，没有什么好方法去禁用它。
They still work funny enough [LAUGH]
there's not a good way to disable that.

68
00:03:58.481 --> 00:04:02.974
所以，如果你在互联网上不下载随机的文件，那就是其中之一。
So it's one of the things if you're on
the Internet don't download random files.

69
00:04:02.974 --> 00:04:06.701
我不知道我为什么告诉你但是 [LAUGH] 不下载随机的 zip 文件
I don't know why I'm telling you this, but
[LAUGH] don't download random zip files,

70
00:04:06.701 --> 00:04:10.722
不要随意下载类似的东西因为你不知道会发生什么
don't download random things like that
because you don't know what'll happen.

71
00:04:10.722 --> 00:04:15.513
在游戏转换方面，让互联网变得更快速的 NGINX
In terms of game-changers as far as making
the Internet a little bit faster NGINX

72
00:04:15.513 --> 00:04:20.106
将以 gzip 的标准格式自动压缩所有内容。
will automatically compress everything
in a standard format known as gzip.

73
00:04:20.106 --> 00:04:26.064
那是 GNU zip ， G-N-U ，这是我忘记的一般东西，
That's GNU zip, G-N-U that's
the general something I forget,

74
00:04:26.064 --> 00:04:28.581
但 GNU 到处都是用的
but GNU is used everywhere.

75
00:04:28.581 --> 00:04:32.822
但它所做的是把所有数据都压缩出来
But what it does is it compresses all this
data going out and it reads it in that

76
00:04:32.822 --> 00:04:37.199
就像我们之前描述的那样，如果有大量的 1s 和
same format about just like we described
earlier how if there's a lot of 1s and

77
00:04:37.199 --> 00:04:40.742
这只是用一种我们都能理解的语言重写的
0s it just rewrites that in
a language that we all understand.

78
00:04:40.742 --> 00:04:44.786
最棒的是所有浏览器都是 Safari， Internet Explorer，
And what's great is all the browsers so
Safari, Internet Explorer,

79
00:04:44.786 --> 00:04:48.555
三星因特网都了解如何解包一个 gzip 文件和
Samsung Internet they all understand
how to unpack a gzip file and

80
00:04:48.555 --> 00:04:51.586
这就是让你的联系更快的原因
that's what makes your connection so
much faster.

81
00:04:51.586 --> 00:04:52.668
事实上，让我们来看看这个
In fact, let's check this out.

82
00:04:52.668 --> 00:04:57.096
我们去 MDN我最喜欢的网站
Let's go to MDN, my favorite website and

83
00:04:57.096 --> 00:05:01.278
让我们看看他们在做什么
let's check out what they're doing.

84
00:05:01.278 --> 00:05:08.086
转至 " 网络 " 选项卡，并在此处看到大小 ?
Go to the Network tab,
and you see the size here?

85
00:05:08.086 --> 00:05:09.476
让我再大一点
Let me make that a little bigger.

86
00:05:11.834 --> 00:05:15.567
>> Jem Young: 那么一般来说，如果你在看你的审查员
&gt;&gt; Jem Young: So generally, if you're
looking at your inspector you're gonna

87
00:05:15.567 --> 00:05:19.908
有两个大小，一个是未压缩的大小，一个是压缩大小。
have two sizes, one is the uncompressed
size and one is the compressed size.

88
00:05:19.908 --> 00:05:23.331
我们看到压缩事物的力量而不是几乎
And we see the power of compressing things
in that instead of sending down a almost

89
00:05:23.331 --> 00:05:26.252
300 - 千字节文件，压缩到 37 - 千字节和
300-kilobyte file that gets
compressed to 37-kilobytes and

90
00:05:26.252 --> 00:05:27.785
这就是压缩的力量
that's the power of compression.

91
00:05:27.785 --> 00:05:29.401
NGINX 的伟大之处
And the great thing about NGINX and

92
00:05:29.401 --> 00:05:32.088
一个更强大的事物是它在飞行中做的
one of the more powerful things
is it does this on the fly.

93
00:05:32.088 --> 00:05:36.127
所以如果你把这些 NGINX 的图像发送出去
So if you're sending out images things
like that NGINX will automatically gzip

94
00:05:36.127 --> 00:05:38.430
如果您将其保留在缺省情况下，请将其保留。
them if you leave it on
which is on by default.

95
00:05:38.430 --> 00:05:40.115
它会为这些被压缩的图像提供服务
And it'll serve these
images compressed and

96
00:05:40.115 --> 00:05:42.204
当它击中客户时就会把他们解包给你
then when it hits the client
it'll unpack them for you.

97
00:05:42.204 --> 00:05:44.298
这真是太酷了
And that's just something
that's really cool.

98
00:05:44.298 --> 00:05:45.519
有问题吗
Yes, question?

99
00:05:45.519 --> 00:05:49.707
>> Sam: 我认为 gzip 中已省略图像，因为它们已经
&gt;&gt; Sam: I thought images were omitted
from gzip because that's they're already

100
00:05:49.707 --> 00:05:52.418
以压缩格式进行编码吗 ?
encoded in as compressed
to format as they can?

101
00:05:52.418 --> 00:05:53.879
>> Jem Young: 是- >> 演讲者 3: 一旦他们放大-
&gt;&gt; Jem Young: Yes-
&gt;&gt; Speaker 3: Once they enlarge-

102
00:05:53.879 --> 00:05:54.576
>> Jem Young: 谢谢。
&gt;&gt; Jem Young: Thank you.

103
00:05:54.576 --> 00:05:57.444
我发错话了 映像未压缩，因为映像
I misspoke.
Images are not compressed because images

104
00:05:57.444 --> 00:06:02.572
缺省情况下，使用 PNG 或 JPEG 是压缩的类型，而我认为位图
by default using PNG or JPEG are already
types of compression versus I think bitmap

105
00:06:02.572 --> 00:06:07.271
BMP可能是可以压缩的，因为它是未压缩的文件。
BMP, might be able to be compressed
because that is an uncompressed file.

106
00:06:07.271 --> 00:06:10.975
但这就是为什么你再也看不到在网上服务的位图了
But that's why you never see bitmaps
served over the Internet anymore,

107
00:06:10.975 --> 00:06:14.021
我们以前是黑暗的日子真黑暗 [ LAUGH]
we used to, those were dark days,
really dark days [LAUGH].

108
00:06:14.021 --> 00:06:18.406
谢谢你提出这个问题
But thank you for bringing up that point.

109
00:06:18.406 --> 00:06:22.093
是啊，我们说压缩的时候不同类型比较多
Yes, when we talk about compression
there's different types that are more

110
00:06:22.093 --> 00:06:23.829
对不同格式有效。
efficient for different formats.

111
00:06:23.829 --> 00:06:28.985
因此，图像更有利于压缩，因为什么是图像?
So images in particular serve well to
compression it because what is an image?

112
00:06:28.985 --> 00:06:34.428
它是一系列的点，它们是特定的颜色，如果这些点只是数学。
It's a series of dots that are certain
colors and if those dots it's just math.

113
00:06:34.428 --> 00:06:38.562
如果我知道我有 50 个蓝色的点或者我想说的话
And if I know I have 50 blue dots or
if I wanna represent say,

114
00:06:38.562 --> 00:06:43.606
这个板的颜色都是这样压缩好的
this board right here it's all one
color this will compress really well.

115
00:06:43.606 --> 00:06:45.992
所以我可以说，大小有多大 ?
So I can just say, how big is the size?

116
00:06:45.992 --> 00:06:46.978
600 比 800
600 by 800 and

117
00:06:46.978 --> 00:06:50.574
都是一样的颜色我可以把它压缩到一条直线上
it's all the same color I can compress
that down to one line essentially.

118
00:06:50.574 --> 00:06:53.812
这就是图像压缩在 PNG 中的威力
And that's what makes image
compression really powerful in PNG but

119
00:06:53.812 --> 00:06:55.466
所以你不能把它们拉上
that's why you can't gzip them.

120
00:06:55.466 --> 00:06:59.728
你真的，真的想，其实就是给它加高
You can if you really, really want to,
you'll just actually add overhead to it

121
00:06:59.728 --> 00:07:04.062
因为你现在在已经压缩的东西周围加了一个拉链
because you're now adding a zip around
something that's already compressed.

122
00:07:04.062 --> 00:07:08.697
你要做的就是把一些不必要的指令
So what you're doing is you're adding
unnecessary instructions to something that

123
00:07:08.697 --> 00:07:10.339
它什么都不会做
it's not gonna do anything.

124
00:07:10.339 --> 00:07:11.463
谢谢你提出这个问题
Thank you for
bringing up that point though.

125
00:07:13.653 --> 00:07:15.803
> > Jem Young: 这会是个好课，我能感受到。
&gt;&gt; Jem Young: It's gonna be a good class,
I can feel it.

126
00:07:15.803 --> 00:07:18.757
所以如果你想看看你的 gzip 设置
So if you wanna check out
your gzip settings and

127
00:07:18.757 --> 00:07:22.338
许多其他设置可以查看您的 NGINX.com。
lots of other settings you
can look at your NGINX.com.

128
00:07:22.338 --> 00:07:25.588
我们现在不打算碰它但是如果你看看
We're not gonna touch that right now,
but if you look at it,

129
00:07:25.588 --> 00:07:27.711
在缺省情况下，您会看到 gzip 处于打开状态。
you'll see that gzip is on by default.

130
00:07:27.711 --> 00:07:32.625
我们可以把压缩等级设定为 1 到 9
And we can set our compression levels
to 1 through 9 I believe it is,

131
00:07:32.625 --> 00:07:36.629
我不会把压缩水平弄得太乱
I wouldn't mess too much
with the compression levels.

132
00:07:36.629 --> 00:07:40.807
如果能达到 9 或 11 的速度很容易
It's tempting to go all the way up to 9 or
11, if it were,

133
00:07:40.807 --> 00:07:43.740
如果有人能理解这个笑话的话
[LAUGH] if anybody understands that joke.

134
00:07:43.740 --> 00:07:47.261
但是老实说，在此时，您正在关闭 CPU 电源，因为它需要时间
But honestly, at this point you're trading
off CPU power because it takes time to

135
00:07:47.261 --> 00:07:48.384
压缩这些东西
compress these things and

136
00:07:48.384 --> 00:07:52.026
通过压缩算法与您要保存的字节数进行运行。
run through the compression algorithms
versus the amount of bytes you're saving.

137
00:07:52.026 --> 00:07:57.417
6 4 是一个相当不错的水平，你可以用速度来提高性能。
And 6 4 is a pretty good level where
you're trading off speed for performance.

138
00:07:57.417 --> 00:08:02.370
任何更高的速度都很有诱惑力但你真的没那么多钱
Going any higher it's really tempting but
you're honestly not saving that much.

139
00:08:02.370 --> 00:08:03.879
您可以对线路进行更多优化。
There's more optimizations
you can do down the line.
