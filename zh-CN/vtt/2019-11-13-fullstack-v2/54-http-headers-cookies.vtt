WEBVTT

1
00:00:00.575 --> 00:00:02.843
>> Jem Young: 所以让我们把它放下，让我们先从标题开始。
&gt;&gt; Jem Young: So let's break it down,
let's start with the headers.

2
00:00:05.280 --> 00:00:07.386
>> Jem Young: 什么是标题?
&gt;&gt; Jem Young: What is a header?

3
00:00:07.386 --> 00:00:10.083
或者您对标题是什么以及它的内容是什么 ?
Or what is your take on what
a header is and what it does?

4
00:00:13.414 --> 00:00:15.554
>> 扬声器 2: 元数据 [INAUDIBLE] 请求。
&gt;&gt; Speaker 2: Metadata
[INAUDIBLE] the request.

5
00:00:15.554 --> 00:00:16.067
>> Jem Young: 对不起?
&gt;&gt; Jem Young: Sorry?

6
00:00:16.067 --> 00:00:17.993
>> 扬声器 2: 提供一些元数据。
&gt;&gt; Speaker 2: Give some metadata.

7
00:00:17.993 --> 00:00:18.760
>> Jem Young: 是的。
&gt;&gt; Jem Young: Yeah.

8
00:00:18.760 --> 00:00:20.439
>> 扬声器 2: [INAUDIBLE] 请求或响应。
&gt;&gt; Speaker 2: [INAUDIBLE] request or
the response.

9
00:00:20.439 --> 00:00:24.980
>> Jem Young: 是的，或者我们说的信息包是由数据组成的，然后是元数据?
&gt;&gt; Jem Young: Yeah, or we said packets
are made up of data and then metadata?

10
00:00:24.980 --> 00:00:28.792
元数据的一部分是标题，标题是真实的，
Part of that meta data is the header,
and the header is something really,

11
00:00:28.792 --> 00:00:31.926
很有趣的是我们在某个时候都在用
really interesting that we all
probably use at some point but

12
00:00:31.926 --> 00:00:34.030
我们不考虑它在做什么
we don't think about what it's doing.

13
00:00:34.030 --> 00:00:38.033
这个元数据的伟大之处在于它可以告诉很多人
And the great thing about this metadata
is it can tell a lot about like where

14
00:00:38.033 --> 00:00:40.564
这一要求不仅是 IP的问题。
the request has come
from besides just the IP.

15
00:00:40.564 --> 00:00:44.554
它说明它有什么样的编码，它有什么样的内容，
It tells what kind of encoding it has,
what kind of content it has,

16
00:00:44.554 --> 00:00:48.429
它其实有很多我们可以收拾和卸载的信息
it actually has so much information
that we can pack and unload.

17
00:00:48.429 --> 00:00:52.545
并且您可以了解该请求是如何形成的，以及它来自何处，以及
And you can understand how that request
is formed and where it came from, and

18
00:00:52.545 --> 00:00:54.874
我们可以沿着这条路连接信息
we can attach information along the path.

19
00:00:54.874 --> 00:00:58.652
实际上，我可以附加页眉或者 Nginx 将阅读的内容，仅适用于 Nginx 。
In fact, I can attach headers or something
that Nginx will read, just for Nginx, it

20
00:00:58.652 --> 00:01:02.326
把它带出去然后就到快车去看他自己的头，
strips it out and then it goes to Express,
then Express will read his own headers,

21
00:01:02.326 --> 00:01:05.763
也许会把这些数据传递出去但它会引出另一个标题
maybe pass that data along something
else but it strips out another header.

22
00:01:05.763 --> 00:01:08.445
因此，我们可以在添加信息或转移信息的过程中，
So along the way we can add information or
subtract information,

23
00:01:08.445 --> 00:01:10.218
这才是最棒的
that's what headers are really good for.

24
00:01:10.218 --> 00:01:11.180
你有问题吗
Do you have a question?

25
00:01:11.180 --> 00:01:15.015
> > 众议长 3: 是的，我觉得就像在信封外面写的一样，
&gt;&gt; Speaker 3: Yeah, I think that like the
writing on the outside of the envelope,

26
00:01:15.015 --> 00:01:19.590
因为包或内容，然后头是您可以
because the packets or the content, and
then the headers are the part that you can

27
00:01:19.590 --> 00:01:22.370
在不需要查看内容的情况下进行检查。
inspect without having
to look at the contents.

28
00:01:22.370 --> 00:01:26.162
>> Jem Young: 没错，我再次喜欢这个信封的比喻，
&gt;&gt; Jem Young: Exactly, and
I love the envelope metaphor, again,

29
00:01:26.162 --> 00:01:27.516
是谁创造的
who created that?

30
00:01:27.516 --> 00:01:29.966
我以为是我，不， [洛杉矶 ]
I thought it was me, no,
[LAUGH] it's exactly that,

31
00:01:29.966 --> 00:01:33.868
所有关于目的地的信息都是从哪里来的
it's all this information about where
a destination is going, where it's from,

32
00:01:33.868 --> 00:01:37.400
它使用什么样的编码，它接受什么样的编码。
what kind of encoding it's using,
what kind of encoding it's accepted.

33
00:01:37.400 --> 00:01:40.944
而且如果是请求的话那就给服务器或者
And based on if it's a request, so
that's something going to the server or

34
00:01:40.944 --> 00:01:43.310
从服务器出来的反应
the response something
coming out of the server,

35
00:01:43.310 --> 00:01:47.557
改变我们要找的头头我们要设定什么样的头
changes what kind of headers we're looking
for, what kind of headers we're gonna set.

36
00:01:47.557 --> 00:01:51.180
我在这里突出了一些常见的标题，
So here I highlighted some
of the common headers,

37
00:01:51.180 --> 00:01:54.718
您可能熟悉的主机标题，
the host header you
probably are familiar with,

38
00:01:54.718 --> 00:01:59.484
它会告诉请求它的去向以及目的地
it tells request where it's going and
what's the destination.

39
00:01:59.484 --> 00:02:04.155
主机很有意思，因为它的一部分是 Nginx 读将请求路由到
Host is really interesting because part of
it is what Nginx reads to route request to

40
00:02:04.155 --> 00:02:05.501
正确的服务器。
their correct server.

41
00:02:05.501 --> 00:02:08.126
还记得我们刚才谈到虚拟主机的方式
Remember earlier how we
spoke about virtual hosts,

42
00:02:08.126 --> 00:02:09.805
如何才能拥有多台服务器?
how I can have multiple servers?

43
00:02:09.805 --> 00:02:14.098
这是 Nginx 如何判断它尝试去的地方是如何解读它的标题。
Part of how Nginx determines where it's
trying to go is reading the header, here.

44
00:02:14.098 --> 00:02:18.368
我觉得头真的很厉害，评得不高吧
And I think headers are really, really
powerful and underrated, we probably don't

45
00:02:18.368 --> 00:02:22.061
想想这些数据是如何形成的以及它的用途。
think that much about how that data is
formed and what it's been used for.

46
00:02:22.061 --> 00:02:25.471
但在这件事中， Nginx 正在阅读， Express 不关心这件事。
But in this case, Nginx is reading it,
Express doesn't care anything about it.

47
00:02:25.471 --> 00:02:29.737
其实我可以把主机取出来，还可以，但是
In fact, I can take out the host header,
and it would still work, but

48
00:02:29.737 --> 00:02:31.591
你会遇到一些问题
you'd run into some issues.

49
00:02:31.591 --> 00:02:36.764
有趣的是，我可以代理请求，记住代理是什么 ?
And funny enough, I can proxy requests,
remember what a proxy is?

50
00:02:36.764 --> 00:02:37.652
我们早该定义的
We defined it earlier.

51
00:02:39.668 --> 00:02:40.605
>> Jem Young: 任何人，告诉我?
&gt;&gt; Jem Young: Anybody, tell me?

52
00:02:40.605 --> 00:02:41.674
没人记得吗
Nobody remembered?

53
00:02:41.674 --> 00:02:44.204
怎么了
Yes?

54
00:02:44.204 --> 00:02:49.144
>> 演讲者 4: 当您拥有代表多个不同服务器的服务器时
&gt;&gt; Speaker 4: It's when you have a server
that represents multiple different

55
00:02:49.144 --> 00:02:53.990
它后面的端点，它根据，重新路由和重定向，
endpoints behind it, and
it reroutes and redirects based on,

56
00:02:53.990 --> 00:02:56.655
在这种情况下，逆向代理。
in this case, the reverse proxy.

57
00:02:56.655 --> 00:02:59.201
>> Jem Young: 完全正确。
&gt;&gt; Jem Young: Exactly, exactly right.

58
00:02:59.201 --> 00:03:02.668
有趣的是，某些标题是由客户端不可修改的，并且
Funny enough, there are certain headers
that are unmodifiable by the client, and

59
00:03:02.668 --> 00:03:03.966
主机头是其中之一。
the host header is one of them.

60
00:03:03.966 --> 00:03:07.991
我不知道我的请求来自哪里，浏览器不允许这样做。
I cannot fake where my request came from,
browsers don't allow that generally.

61
00:03:07.991 --> 00:03:12.492
因此，如果您有服务工作者并且正在尝试使用服务工作者作为代理，
So if you have a service worker and you're
trying to use a service worker as a proxy,

62
00:03:12.492 --> 00:03:13.603
我该回去了
I should step back.

63
00:03:13.603 --> 00:03:15.832
有人知道服务工人是什么吗 ?
Does anybody know what
a service worker is?

64
00:03:15.832 --> 00:03:20.557
你听过这个短语，它是一个持续的 Web 工作者，在一个单独的线程中运行，
You've heard the phrase, it's a persistent
web worker that runs in a separate thread,

65
00:03:20.557 --> 00:03:23.908
当选项卡关闭时，它仍可以在后台运行。
and when the tab is closed,
it can still run in the background.

66
00:03:23.908 --> 00:03:26.770
本质上是拦截网络请求的方法
It's a way of intercepting
network requests, essentially,

67
00:03:26.770 --> 00:03:28.123
它也能做其他事情
it can do other things, too.

68
00:03:28.123 --> 00:03:32.069
还有一个关于 FrontEnd Masters on service 工作者的好课程
And there's a good course on FrontEnd
Masters on service workers taught by

69
00:03:32.069 --> 00:03:33.456
有人我忘了谁
somebody, I forget who.

70
00:03:33.456 --> 00:03:35.259
>> 演讲者 5: 凯尔 - 辛普森。 >> Jem Young: 凯尔 - 辛普森
&gt;&gt; Speaker 5: Kyle Simpson.
&gt;&gt; Jem Young: Kyle Simpson, yeah, and

71
00:03:35.259 --> 00:03:37.372
他太聪明了
he's brilliant, so take that course.

72
00:03:37.372 --> 00:03:41.372
但是一个服务工作者，我最早尝试做的事情之一就是我试图创造
But a service worker, one of the things I
tried to do early on was I tried to create

73
00:03:41.372 --> 00:03:42.805
在客户机中发出代理，因此
out a proxy in the client, so

74
00:03:42.805 --> 00:03:46.729
根据请求尝试执行的操作来代理不同的服务器。
that based on what the request is trying
to do it proxy the different servers.

75
00:03:46.729 --> 00:03:50.472
我发现你做不到因为我不能修改主机标题
And I found out you couldn't do it because
I can't modify the host header, I can't

76
00:03:50.472 --> 00:03:54.015
修改该包应在请求中运行的位置。
modify where that packet is supposed to
go once the request has gone in flight.

77
00:03:54.015 --> 00:03:57.835
如果您开始使用头进行消息传递，那么您可能在其中运行
Where in fact you might run into if
you start messing with headers and

78
00:03:57.835 --> 00:04:00.453
服务工作者，用户代理程序为下一个。
service workers,
user agent is the next one.

79
00:04:00.453 --> 00:04:01.298
用户代理程序是什么 ?
What does the user agent?

80
00:04:01.298 --> 00:04:04.391
我向你保证如果你的网站开发者以前听过的话
I promise you if your web developer
you've heard the phrase before,

81
00:04:04.391 --> 00:04:05.841
用户代理标题是什么 ?
what's the user agent header?

82
00:04:08.179 --> 00:04:10.512
>> 演讲者 6: 浏览器，信息一般?
&gt;&gt; Speaker 6: A browser,
information general?

83
00:04:10.512 --> 00:04:12.842
>> Jem Young: 是的。
&gt;&gt; Jem Young: Yeah.

84
00:04:12.842 --> 00:04:15.872
> > 演讲者 7: 是的，你拥有什么样的电脑，那种东西。
&gt;&gt; Speaker 7: Yeah, what kind of
computer you own, that kind of stuff.

85
00:04:15.872 --> 00:04:19.285
> > Jem Young: 是的，你有没有想过他们为什么会这样 ?
&gt;&gt; Jem Young: Yeah, do you ever
wonder why they look like this?

86
00:04:19.285 --> 00:04:23.009
这件奇怪的事吗
This weird mishmash of things?

87
00:04:23.009 --> 00:04:26.343
我一直都是，它是早在没有很多的时候，
I always have, it comes from the early
days when there weren't many,

88
00:04:26.343 --> 00:04:30.187
有一个浏览器很受支持，那就是 Internet Explorer，
there was one browser that's well
supported, and that was Internet Explorer,

89
00:04:30.187 --> 00:04:31.675
那就是切割的边缘
and that was the cutting edge.

90
00:04:31.675 --> 00:04:32.423
你有问题吗
Do you have a question?

91
00:04:32.423 --> 00:04:33.619
>> 演讲者 8: 是否进行版本控制?
&gt;&gt; Speaker 8: Is it versioning?

92
00:04:33.619 --> 00:04:35.418
这些数字是数字吗 ?
Is that what the numbers are?

93
00:04:35.418 --> 00:04:37.457
>> Jem Young: 部分是版本控制，但是
&gt;&gt; Jem Young: Part of it is versioning,
but

94
00:04:37.457 --> 00:04:43.332
它之所以是这种不同类型的字母汤 [INAUDIBLE] HTML，
the reason why it's this kind of alphabet
soup of different types, [INAUDIBLE] HTML,

95
00:04:43.332 --> 00:04:48.490
我们在很长很长的时间里都没有使用过旧的引擎盖奇
which we haven't used in a long,
long time, like Gecko, the old engine.

96
00:04:48.490 --> 00:04:51.612
因为浏览器是，嘿，我是现代引擎，但我不是
It was because browsers were, hey,
I'm a modern engine, but I'm not

97
00:04:51.612 --> 00:04:55.048
Internet Explorer ，并且仅为 Internet Explorer 构建了大量站点，
Internet Explorer, and a lot of sites
were only built for Internet Explorer,

98
00:04:55.048 --> 00:04:58.240
我们是 Mozilla或 Safari 之类的所以他们伪造了
we're Mozilla, or Safari, or
something like that, so they faked it.

99
00:04:58.240 --> 00:05:01.858
他们把 Mozilla 放到标题里，即使在这个情况下，这是一个 Chrome
They put Mozilla in the header, even
though, in this case, this was a Chrome

100
00:05:01.858 --> 00:05:05.658
但是它还是会说 Mozilla 5.0 因为它是在伪装自己
browser, but it still says Mozilla 5.0
because it's trying to fake itself.

101
00:05:05.658 --> 00:05:09.007
而且因为网络是向后兼容的，所以他们保留了它，
And because the web is backwards
compatible, they kept it, and

102
00:05:09.007 --> 00:05:13.223
它的时间越来越长，没有一家公司说过，哎，
it just keeps getting longer and longer,
and no one company has ever said, hey,

103
00:05:13.223 --> 00:05:17.129
我们今天要解决这个问题我们要解决这个问题
we're gonna fix this today, we're
gonna fix this because now there's so

104
00:05:17.129 --> 00:05:21.372
许多不同的浏览器，没有人同意用户代理的外观。
many different browsers and no one would
agree on what the user agent looks like.

105
00:05:21.372 --> 00:05:26.115
但是，真正的用户代理是我们使用它来检查我们所使用的浏览器版本，
But really the user agent is we use it to
inspect what version of browser we're on,

106
00:05:26.115 --> 00:05:30.326
那么支持的功能部件以及它基本上是什么类型的浏览器。
so what features are supported and
what type of browser it is basically.

107
00:05:30.326 --> 00:05:35.141
通常，您将使用用户代理的某些库部分，因为
Generally, you're gonna use some sort of
library parts of your user agent because

108
00:05:35.141 --> 00:05:39.906
这些都是不可读的，就像我从 Google Chrome 浏览器中提取的。
these are generally unreadable, like I
pulled this from Google Chrome browser.

109
00:05:39.906 --> 00:05:43.084
但就好像很难知道是哪个浏览器
But like it'd be very difficult
to tell which browser it was,

110
00:05:43.084 --> 00:05:45.355
它是 Chrome，是 Safari，是 Mozilla吗 ?
is it Chrome, is it Safari, is it Mozilla?

111
00:05:45.355 --> 00:05:49.667
没人知道，如果你想嗅到用户代理，那么使用库。
No one knows, so use a library if
you're trying to sniff user agents.

112
00:05:49.667 --> 00:05:53.276
但是再次，功能部件支持非常好，因此如果我想打开类似的内容
But again, it's good for a feature
support, so if I wanna turn on like top

113
00:05:53.276 --> 00:05:57.372
级别异步等待 V8 现在支持，但它不支持其他浏览器。
level async await which V8 now supports
but it's not supporting other browsers.

114
00:05:57.372 --> 00:06:01.997
我已使用某种用户代理程序嗅探或其他方法。
I already use some sort of user
agent sniffing or other methods.

115
00:06:01.997 --> 00:06:05.444
接受只是说作为一个浏览器
Accept is just saying, as a browser,

116
00:06:05.444 --> 00:06:10.410
我能从服务器接收到什么东西 ?
what sort of things can I
receive back from the server?

117
00:06:10.410 --> 00:06:13.516
因为并非所有 Web 浏览器都支持所有相同的协议，但是
Because not all web browsers
support all the same protocols, but

118
00:06:13.516 --> 00:06:16.528
接受头通常由浏览器本身生成。
the accept header is usually
generated by the browser itself.

119
00:06:16.528 --> 00:06:20.869
它就会说，嘿，你知道我要用这个文本格式的 HTML ，
And it just says, hey, you know what
I'll take HTML in that text format,

120
00:06:20.869 --> 00:06:23.879
我们用的是不同类型的
and we use that for
different types, we use that for

121
00:06:23.879 --> 00:06:28.596
不同类型的支持格式，我们向下移动到接受编码。
different types of supportive formats,
we move down to the accepting coding.

122
00:06:28.596 --> 00:06:33.172
这就意味着这个浏览器接受这些 gzip 编码，所以 Nginx 会说，嘿，
That just means this browser accepts these
gzip encoding so Nginx will say, hey,

123
00:06:33.172 --> 00:06:37.084
我这里有个请求它会在出去的路上
I've got a request here and
it'll actually take gzips on the way out,

124
00:06:37.084 --> 00:06:40.497
我要加把头因为我知道 Azure 能搞定
I'm gonna gzip that up because
I know Azure can handle that.

125
00:06:40.497 --> 00:06:43.798
虽然不是每个浏览器都支持 gzip，
Whereas back in the day not
every browser support the gzip,

126
00:06:43.798 --> 00:06:48.682
在这种情况下，因为我是使用 Chrome 作为这个用户代理，也可能接受，
in this case, because I'm using Chrome as
this user agent, it also accepts probably,

127
00:06:48.682 --> 00:06:53.038
我们之前说过的是一种替代压缩格式
which we talked about earlier as
a alternative compression format invented,

128
00:06:53.038 --> 00:06:56.478
我想在瑞士说，是，是在瑞士发明的。
I wanna say in Switzerland,
yes, invented in Switzerland.

129
00:06:56.478 --> 00:06:57.026
我怎么会知道
Why do I know that?

130
00:06:57.026 --> 00:07:01.767
库兹我在瑞士，我大概就是，而且实际上是指小面包。
Cuz I was in Switzerland, and I was like
probably, and actually means little bread.

131
00:07:01.767 --> 00:07:05.689
很好你学习各种各样的东西不仅是速速和富激情的
Good, you learn all sorts of things
not just Fast and Furious trivia, but

132
00:07:05.689 --> 00:07:10.559
它是不同的编码格式，但是它只是说，嘿，如果是 Nginx，或者 Apache ，
it's a different encoding format, but it's
just saying, hey, if Nginx, or Apache, or

133
00:07:10.559 --> 00:07:14.889
任何使用，支持的 Web 服务器，我的浏览器也会接受。
whatever web server using, supports
probably, my browser will accept it too.

134
00:07:14.889 --> 00:07:19.315
这真的很棒，对我们来说，它就像回到了不同的事物中。
And it's really nice, cuz it's a way of
like falling back to different things.

135
00:07:19.315 --> 00:07:21.992
再次，所有这些都包含在标题中，
And again,
all this is contained in the header,

136
00:07:21.992 --> 00:07:24.745
就像所有关于请求本身的元数据一样。
like all this metadata
about the request itself.

137
00:07:24.745 --> 00:07:28.839
当然，除了语言，我还想说什么语言呢 ?
And of course, except languages, what sort
of languages am I expecting to get back?

138
00:07:28.839 --> 00:07:33.391
这些内容通常由浏览器自动填充，以及您说过的任何语言
These are generally auto populated by the
browser, and whatever language you've said

139
00:07:33.391 --> 00:07:38.307
在浏览器或您的操作系统 >> Jem Young : And
in the browser or your operating system
&gt;&gt; Jem Young: And

140
00:07:38.307 --> 00:07:42.406
我只是去接管你的一些普通头头
I'm just going over some of
the common headers you'll run into,

141
00:07:42.406 --> 00:07:46.521
我没说的是 Set-cookies ，它设置了 cookie。
the one I didn't talk about was
Set-cookie which sets cookies.

142
00:07:46.521 --> 00:07:48.790
为什么 cookies 对 Web 很重要 ?
Why are cookies kind of
important to the web?

143
00:07:51.471 --> 00:07:54.995
>> Jem Young: 或者我应该说什么是曲奇 ?
&gt;&gt; Jem Young: Or
should I say what is a cookie?

144
00:07:54.995 --> 00:07:55.668
是吗 ?
Yeah?

145
00:07:55.668 --> 00:07:59.827
>> 扬声器 7: 这是一个元数据，但它会在每个后续请求中进行。
&gt;&gt; Speaker 7: It's a piece of metadata,
but it goes on every subsequent request.

146
00:07:59.827 --> 00:08:04.995
它也可以在服务器端进行检查和管理。
And it can be inspected and
kinda managed on the server side too.

147
00:08:04.995 --> 00:08:08.038
>> Jem Young: 确实，它是持久的文本数据，持久存储在
&gt;&gt; Jem Young: Exactly, it's a persistent
bit of text data that persists on

148
00:08:08.038 --> 00:08:10.730
浏览器，取决于它是否是会话 cookie，
the browser,
depending on if it's a session cookie,

149
00:08:10.730 --> 00:08:14.475
意味着在关闭选项卡或浏览器时，将擦除，或
meaning the minute you close a tab or
the browser, it's gonna be erased, or

150
00:08:14.475 --> 00:08:16.961
常规 cookie ，将持续一段时间。
a regular cookie,
which will persist over time.

151
00:08:16.961 --> 00:08:20.233
当您在 cookie 工具上设置到期时，它将到期。
And it will expire whenever you
set the expire on the cookie tool.

152
00:08:20.233 --> 00:08:22.312
但为什么 cookie 很重要?
But why is the cookie important?

153
00:08:22.312 --> 00:08:25.552
事实上这对网络很重要
In fact, it's crucial to the web,

154
00:08:25.552 --> 00:08:31.288
就像我们不能在没有饼干的情况下
like we couldn't we couldn't
operate a web without cookies.

155
00:08:31.288 --> 00:08:32.548
有谁有吗坦纳
Anybody, [INAUDIBLE], Tanner?

156
00:08:32.548 --> 00:08:36.855
>> 演讲者 8: [INAUDIBLE] 让您在会话之间带来数据
&gt;&gt; Speaker 8: [INAUDIBLE] let's you
bring data between sessions and

157
00:08:36.855 --> 00:08:42.701
例如，您可以在不同会话中扩展用户体验。
like let's you extend the user
experience across different sessions.

158
00:08:42.701 --> 00:08:47.057
>> Jem Young: 没错，我们不认为什么是开发者，
&gt;&gt; Jem Young: Exactly, there's something
we don't think about as what developers,

159
00:08:47.057 --> 00:08:51.552
网络是无状态的，每个请求和响应都是全新的
is that the internet is stateless,
every request and response is a brand new

160
00:08:51.552 --> 00:08:56.422
服务器不记得您在这里的请求和响应。
request and response the server doesn't
remember that you've been here or not.

161
00:08:56.422 --> 00:09:00.613
Versus 表示其他编程范例，其中有一个状态和
Versus say other programming paradigms,
where there's a state and

162
00:09:00.613 --> 00:09:03.802
当用户离开时，该状态就会消失。
then whenever the user goes
away that state is gone.

163
00:09:03.802 --> 00:09:08.918
网络是无国籍的我们不认为它存在
The web is stateless, it's something
we don't think about that it exists,

164
00:09:08.918 --> 00:09:13.875
所以我们需要在一段时间里对这些数据进行对比以便我们知道
so we need cookies versus this data over
time so that we know that a request,

165
00:09:13.875 --> 00:09:18.908
表示此人已登录或已注销，或者我接受 cookie 条幅
say the person is logged in or they're
logged out, or I accept cookie banner

166
00:09:18.908 --> 00:09:23.506
我们现在都得这么做了
that we all have to do now because
of regulations or things like that.

167
00:09:23.506 --> 00:09:27.595
我很高兴你把这个给我带来了
The danger with cookies and
I'm glad you brought that up, Kayla,

168
00:09:27.595 --> 00:09:32.203
除非您将 cookie 到期，否则 cookie 会在每个请求上持久存储。
is that cookies persist over every
single request unless you expire them.

169
00:09:32.203 --> 00:09:36.221
最糟糕的是你能提出一个很简单的要求
And the bad thing about that is you
can make a really simple request,

170
00:09:36.221 --> 00:09:39.533
如我想要 2 千字节 HTML 页面， 10 千字节( 如果
like I want a 2 kilobyte HTML page,
10 kilobytes, if

171
00:09:39.533 --> 00:09:44.422
你在那儿放了很多曲奇因为它们是在每一个请求中发送的
you put a lot of cookies in there, because
they're sent on every single request.

172
00:09:44.422 --> 00:09:47.028
所以如果我想说的是网络开发商和全堆的工程师
So if I to tip is web developers and
full stack engineers,

173
00:09:47.028 --> 00:09:50.720
注意您发送的 cookie 量，并且不要在其中添加太多数据，
be careful the amount of cookies you send,
and don't add too much data in there,

174
00:09:50.720 --> 00:09:53.274
因为它会在每一个请求中被发送出去
because it's gonna get sent
on every single request and

175
00:09:53.274 --> 00:09:56.841
你只是在增加开销而你的连接会变得更慢
you're just adding overhead, and
you're making your connection slower.

176
00:09:56.841 --> 00:10:00.292
我想说的共同标题的最终类型有很多很多
The final type of common header I
wanna talk about, there are lots and

177
00:10:00.292 --> 00:10:03.816
很多头，我只碰其中的几个，是 X 头。
lots of headers, I'm just touching
on a few of them, is the X header.

178
00:10:03.816 --> 00:10:08.422
X 是有关如何设置定制头的一般准则，因此
X is a general guideline on
how to set custom headers, so

179
00:10:08.422 --> 00:10:13.028
如果你想让杰姆成为最好的人
if you're like I wanna set
a Jem is the best header,

180
00:10:13.028 --> 00:10:19.302
我将使用 X 点 Jem 是最佳的标题，并放置您想要的任何类型的数据。
I would use X dot Jem Is the best header
and put whatever sort of data you want.

181
00:10:19.302 --> 00:10:24.177
使用定制头是发送一次性定制数据的良好方法
And using custom headers is a good way
of sending one-time custom data that we

182
00:10:24.177 --> 00:10:28.989
不一定要有有效载荷但我们想用浏览器解密
don't necessarily want a payload but
we wanna be decrypted by the browser.

183
00:10:28.989 --> 00:10:32.859
你可能已经看到了如果你看到 X 的标题
It's something you've probably seen,
if you probably seen X something header,

184
00:10:32.859 --> 00:10:34.571
这就意味着它是一个定制的标题
it just means it's a custom header,

185
00:10:34.571 --> 00:10:37.129
浏览器可能不知道该怎么办
the browser probably doesn't
know what to do with it.

186
00:10:37.129 --> 00:10:40.725
Nginx 可能不知道该怎么做你会最常看到的
The Nginx probably doesn't know what to do
with it, the one you'll see most commonly,

187
00:10:40.725 --> 00:10:43.803
让我们撤下我们的网页，看看我们是否能看到一个定制的标题。
and let's pull up our web page and see
if we can see a custom header in there.

188
00:10:43.803 --> 00:10:47.919
所以我在我的网页上可以自己拉上
So I'm on my web page,
we can pull up your own, and

189
00:10:47.919 --> 00:10:53.408
我要刷新这个页面我要看看 " 网络 " 标签页
I'm gonna refresh this page,
I'm gonna look at the Network tab,

190
00:10:53.408 --> 00:10:56.943
让我们查下请求的信息
and let's check out the request headers.

191
00:10:56.943 --> 00:11:01.759
给定主机，用户代理程序和响应头下的用户代理程序，
Given the host, the user agents, and
we have under the response headers,

192
00:11:01.759 --> 00:11:03.135
我们这个 X 的动力
we this X powered by,

193
00:11:03.135 --> 00:11:07.889
cutz powered by 不是浏览器知道要处理的官方 HP 标题。
cuz powered by is not an official HP
header that browser know to deal with.

194
00:11:07.889 --> 00:11:11.176
快把这个标记给你让你知道
Express just tag this on
to let you know that, hey,

195
00:11:11.176 --> 00:11:14.239
服务的应用程序正在使用 Express。
the application of
a serving is using Express.

196
00:11:14.239 --> 00:11:18.623
因此，如果需要使用 X 发送定制一次性数据
So if you need to send custom
one-time data using an X

197
00:11:18.623 --> 00:11:21.322
标题是执行它的好方法。
header is a good way of doing it.

198
00:11:27.808 --> 00:11:29.664
>> Jem Young: 反应看起来有点不同，
&gt;&gt; Jem Young: The response
looks a little different, and

199
00:11:29.664 --> 00:11:31.380
头就不一样了
the headers will be a little different.

200
00:11:31.380 --> 00:11:34.871
请求头都是关于我作为浏览器的内容吗 ?
The request header is all about,
who I am as a browser?

201
00:11:34.871 --> 00:11:35.801
我要去哪
Where am I going?

202
00:11:35.801 --> 00:11:37.033
我想去哪
Where am I trying to get to?

203
00:11:37.033 --> 00:11:39.741
我支持什么样的科技激励 ?
What sort of technology
incentives I support?

204
00:11:39.741 --> 00:11:45.186
响应头是服务器发送您的内容，让我们说内容
The response headers is what the server is
sending you so that let's say the content

205
00:11:45.186 --> 00:11:50.163
gzip 编码，浏览器不知道，除非我们设置一个头
is gzip encoded, the browser wouldn't
know that unless we set a header that

206
00:11:50.163 --> 00:11:55.399
内容类型被编码为 gzip，它不知道如何解包。
says the content type is encoded as gzip,
it wouldn't know how to unpack that.

207
00:11:55.399 --> 00:11:58.634
因此，响应头与请求头一样重要。
So the response headers are just as
important as the request headers.
