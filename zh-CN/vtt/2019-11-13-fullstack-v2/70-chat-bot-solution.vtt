WEBVTT

1
00:00:00.433 --> 00:00:04.211
>> Jem Young: 好的，谁让他们的机器人工作?
&gt;&gt; Jem Young: All right,
who got their chatbot working?

2
00:00:04.211 --> 00:00:08.028
我们必须采取一些步骤，这似乎是不寻常的。
There were some steps we had to go
through that would have seemed unusual.

3
00:00:08.028 --> 00:00:11.951
我们都是在 NGINX 之外的某个地方做的。
We did them all already at some
point other than the NGINX portion.

4
00:00:11.951 --> 00:00:15.718
我们都做了，但要记住这一点是很难的，因为你学到了很多，
We did them all, but it's hard to remember
this because you've learned many,

5
00:00:15.718 --> 00:00:16.966
很多小时的知识
many hours of knowledge.

6
00:00:16.966 --> 00:00:19.711
你已经学会了 Kubernetes 到 TCP。
And you've learned Kubernetes to TCP.

7
00:00:19.711 --> 00:00:20.867
我们在任何地方都学会了
We've learned everywhere in between.

8
00:00:20.867 --> 00:00:23.125
所以当它回到实际编程的时候
So when it comes back down
to actual programming,

9
00:00:23.125 --> 00:00:24.853
有点容易被绊倒了
it's a little easy to get tripped up.

10
00:00:24.853 --> 00:00:28.466
所以我们来看看我们是怎么把这个
So let's walk through exactly
how we hook this up and

11
00:00:28.466 --> 00:00:31.518
我们如何将网络套接字连接到我们的网站上
how we hooked up web
sockets to our website.

12
00:00:31.518 --> 00:00:34.786
希望你们中有一些人创造了一些有趣的回应。
Hopefully, some of you created
some funny chatbot responses.

13
00:00:34.786 --> 00:00:37.798
我没有把握机会，但我有一些好的想法。
I didn't quite get the chance,
but I had some good ideas.

14
00:00:37.798 --> 00:00:42.996
也许我稍后会在 Git 存储库中实现它们，或者可以自由地打开采购申请。
Maybe I'll implement them in the Git
repo later, or feel free to open a PR.

15
00:00:42.996 --> 00:00:48.448
所以我们想做的第一件事， > > Jem Young:
So the first thing we wanna do,
&gt;&gt; Jem Young: And

16
00:00:48.448 --> 00:00:52.838
我要回我的堡垒历史来告诉你我做了什么
I'm just gonna roll back through my
bash history to show you what I did.

17
00:00:54.691 --> 00:00:59.335
>> Jem Young: 我第一次做的是备份到 /var/www 目录。
&gt;&gt; Jem Young: The first thing I did was
I backed up to the /var/www directory.

18
00:00:59.335 --> 00:01:04.516
我运行了 git 克隆，所以我将整个存储库复制到这个 var 目录中。
And I ran git clone, so I cloned that
entire repo to this var directory.

19
00:01:04.516 --> 00:01:07.701
当你克隆某些东西时，它会自动为你创建一个文件夹。
And when you clone something, it's gonna
automatically create a folder for you.

20
00:01:07.701 --> 00:01:12.561
那个文件夹是满满的
And that folder was full stack,

21
00:01:12.561 --> 00:01:16.884
前端 v2 ，所以 fsfev2。
front end v2, so fsfev2.

22
00:01:16.884 --> 00:01:24.823
从那里，我要把它转至那个目录，所以请使用 cd fsfev2。
And from there, I'm gonna cd into
that directory, so cd fsfev2.

23
00:01:24.823 --> 00:01:26.772
快跑我们看起来很好
Run ls, we're looking good.

24
00:01:26.772 --> 00:01:30.941
然后我就跑了一个 npm 的安装，就是要保证里面有所有的包，
Then I ran a npm install, just to make
sure I have all the packages in there,

25
00:01:30.941 --> 00:01:32.807
应该是最新的好的
should be up-to-date, cool.

26
00:01:32.807 --> 00:01:37.598
但现在我有两个节点应用程序在同一个服务器上运行
But now I have two node applications
running on the same server,

27
00:01:37.598 --> 00:01:39.118
或者在同一个端口上。
or on the same port.

28
00:01:39.118 --> 00:01:42.151
所以我想杀了另一个申请的人我现在不需要了
So I wanna kill the other application,
cuz I don't need it for now.

29
00:01:42.151 --> 00:01:42.935
所以我要杀了他
So I'm gonna kill that.

30
00:01:42.935 --> 00:01:47.240
所以我要说 sudo pm2
So I'm gonna say, sudo pm2.

31
00:01:47.240 --> 00:01:50.615
第一个进程在进程 0。
And the first process was at process 0.

32
00:01:50.615 --> 00:01:51.600
我们只跑了一个
We only had one running.

33
00:01:51.600 --> 00:01:53.697
所以我们要停止 0
So we're gonna stop 0.

34
00:01:53.697 --> 00:01:57.019
但是，因为我已经在进程 0 中运行了，所以我要再次停止它。
But because I already have it running in
the process 0, I'm gonna stop it again.

35
00:01:57.019 --> 00:01:59.518
我们可以走了很酷
We're good to go, cool.

36
00:01:59.518 --> 00:02:01.498
所以现在 0 站
So now 0 stops.

37
00:02:01.498 --> 00:02:06.933
我要运行 sudo pm2， >> Jem Young: 启动，
I'm gonna run sudo pm2,
&gt;&gt; Jem Young: start,

38
00:02:06.933 --> 00:02:09.695
我们要去另一个申请了
we're gonna run this other application.

39
00:02:09.695 --> 00:02:12.811
但我已经做过了我不想再开始了
But I've already ran it,
I don't wanna start another process, but

40
00:02:12.811 --> 00:02:14.596
您将运行 sudo pm2 启动 app.js。
you would run sudo pm2 start app.js.

41
00:02:14.596 --> 00:02:17.557
所以现在我们停止了另一个应用程序另一个在运行
So now we've stopped the other
application, the other one's running,

42
00:02:17.557 --> 00:02:18.377
你可以走了
you're good to go.

43
00:02:18.377 --> 00:02:22.171
不幸的是，我们仍然需要通过 NGINX 隧道连接。
Unfortunately, we still need to tunnel
the web socket connection through NGINX.

44
00:02:24.228 --> 00:02:28.061
>> Jem Young: 我们用这个，哎呀，我们去吧。
&gt;&gt; Jem Young: So we use this,
oops, there we go.

45
00:02:28.061 --> 00:02:31.597
我们必须在 NGINX中设置这些代理升级头。
We have to set those proxy
upgrade headers in NGINX.

46
00:02:31.597 --> 00:02:36.820
所以在我们的 NGINX 配置中， >> Jem Young: In
So in our NGINX configuration,
&gt;&gt; Jem Young: In

47
00:02:36.820 --> 00:02:40.616
我们的定位块在 proxy_pass 的上方或下方
our location block,
right above the proxy_pass, or below it,

48
00:02:40.616 --> 00:02:43.593
不重要的是我们设置了代理标题
it doesn't really matter,
we set a proxy header.

49
00:02:43.593 --> 00:02:45.915
我们要设置升级头。
We wanna set up an upgrade header.

50
00:02:45.915 --> 00:02:48.644
然后，我们要为连接升级设置另一头。
And then we wanna set a another header for
connection upgrade.

51
00:02:51.177 --> 00:02:52.299
>> Jem Young: 那么远吗 ?
&gt;&gt; Jem Young: Pretty good so far?

52
00:02:55.420 --> 00:02:58.033
> > Jem Young: 我会给你第二个例子。
&gt;&gt; Jem Young: I'll give
you a second just in case.

53
00:02:58.033 --> 00:02:58.918
这很有打字的
It's a lot of typing.

54
00:03:01.414 --> 00:03:02.948
>> Jem Young: 你的手可能已经被伤害了。
&gt;&gt; Jem Young: Your hands
are probably hurting by now.

55
00:03:02.948 --> 00:03:06.907
你用过指挥线路也许比你在生活中所使用的时间还多
You've used the command line maybe more
than you've ever used in your life, and

56
00:03:06.907 --> 00:03:07.671
那就好
that's good.

57
00:03:07.671 --> 00:03:12.694
好，当我们修改 NGINX 配置时，我们要做什么 ?
Okay, so when we modify our NGINX
configuration, what do we have to do?

58
00:03:12.694 --> 00:03:16.997
一二三重启对
One, two, three, restart, yes.

59
00:03:16.997 --> 00:03:21.919
所以我们重新加载我们的 NGINX ，我只是经历了我的历史，我很懒，
So we reload our NGINX, and I'm just
going through my history, cuz I am lazy,

60
00:03:21.919 --> 00:03:23.719
sudo 服务 nginx 重新装入。
sudo service nginx reload.

61
00:03:26.239 --> 00:03:27.680
>> Jem Young: 其中一个可能是缺少的步骤。
&gt;&gt; Jem Young: One of these was
probably the missing step.

62
00:03:27.680 --> 00:03:30.362
如果你不按顺序来做，或者不一定要按顺序来做，
And if you don't do them in order,
or not necessarily in order,

63
00:03:30.362 --> 00:03:33.560
但你不会得到每一个的申请你的申请就不起作用了
but you don't get every single one of
them, your application won't work.

64
00:03:33.560 --> 00:03:37.135
因此，这一点，我们有一个新的应用程序在同一个端口上运行。
So this point, we have a new
application running on the same port.

65
00:03:37.135 --> 00:03:40.750
如果有 Web 站点连接，那么它将执行升级，并且它应该工作。
If there's a website connection, it's
gonna do an upgrade, and it should work.

66
00:03:40.750 --> 00:03:44.718
现在如果你去你的网站我要去我的
So now if you go to your website,
I'm gonna go to mine.

67
00:03:44.718 --> 00:03:48.408
看我的插座已经启动了它在运行我可以打个招呼
See that my socket is up and
it's running, I can say hello, and

68
00:03:48.408 --> 00:03:52.395
它的回报很棒因为我没有以任何方式修改剧本
it returns awesome because I didn't
modify that script in any way.

69
00:03:52.395 --> 00:03:57.484
现在如果你想修改剧本的话
Now, if you wanted to modify the script,
if you wanna look exactly where that

70
00:03:57.484 --> 00:04:03.145
生机立命，大一点， >> Jem Young: 是
chatbot lives, make that a little bigger,
&gt;&gt; Jem Young: It's

71
00:04:03.145 --> 00:04:04.500
就在这个 handleQuery中
just in this handleQuery.

72
00:04:04.500 --> 00:04:06.502
您将在此处为每个查询编写一个交换机语句。
You would write a switch
statement here for every query.

73
00:04:06.502 --> 00:04:09.606
所以如果我说这个查询是，你好，写一个开关。
So if I said the query was,
hello, write a switch.

74
00:04:09.606 --> 00:04:11.965
在这种情况下，你可以向大家问好。
In that case, for hello,
you can return hello.

75
00:04:11.965 --> 00:04:13.324
你可以返回任何你想要的东西
You can return whatever you want.

76
00:04:13.324 --> 00:04:14.621
你可以说现在是什么时候
You can say what time it is.

77
00:04:14.621 --> 00:04:15.932
您可以抓取系统时间。
You can grab the system time.

78
00:04:15.932 --> 00:04:19.125
如果你想变得复杂和抓取一个系统的载荷
If you wanna get complicated and
grab, say, a system load, like,

79
00:04:19.125 --> 00:04:21.701
我的服务器怎么样了你可以这样回答
how's my server doing,
you could respond like that.

80
00:04:21.701 --> 00:04:22.934
这是真实的机器人吗
Is this a real chatbot?

81
00:04:22.934 --> 00:04:23.579
我不知道我不知道
I don't know.

82
00:04:23.579 --> 00:04:24.927
我不相信任何的閒话
I don't in believe in chatbots anyways.

83
00:04:24.927 --> 00:04:28.478
但如果你想建立一个，这就是你如何做到的。
But if you wanted to build one,
this is how you do it.

84
00:04:28.478 --> 00:04:31.548
当我布局步骤时，希望它们对您有意义。
When I layout the steps,
hopefully they make sense to you.

85
00:04:31.548 --> 00:04:34.235
我们必须采取的所有步骤，才能到达我们今天的位置。
All the steps we had to do to
get to where we are today.

86
00:04:34.235 --> 00:04:39.019
它以 Git的某些技巧为基础，修改了我们的联系，
And it's kinda built on some of the skills
using Git, modifying our connection,

87
00:04:39.019 --> 00:04:41.180
添加页眉之类的内容。
adding headers, things like that.

88
00:04:41.180 --> 00:04:44.394
但只有简单的事情才能让你得到，除非你一再重复
But it's the simple things that can get
you, and unless you do them repeatedly,

89
00:04:44.394 --> 00:04:46.011
很难记住确切的步骤
it's hard to remember the exact steps.

90
00:04:46.011 --> 00:04:49.204
所以，如果你第一次没有得到它，就不要感到难过了。
So if you didn't get it the first time,
don't feel bad at all.
