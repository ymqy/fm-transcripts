WEBVTT

1
00:00:00.554 --> 00:00:02.036
>> Jem Young: 好的，所以我们的服务器已启动并正在运行。
&gt;&gt; Jem Young: All right, so
our server is up and running.

2
00:00:02.036 --> 00:00:06.753
我们把它映射到我们的过程我们把它映射到港口
We have it mapped to our process,
we have it mapped to the port,

3
00:00:06.753 --> 00:00:08.721
它会重写所有东西
it rewrites everything.

4
00:00:08.721 --> 00:00:12.861
所以现在让我们进行版本控制， cuz 版本控制意味着我可以
So now's let's do version control,
cuz version control means that I can

5
00:00:12.861 --> 00:00:17.422
进行更改，我可以将其推送到 GitHub 或 Stash 或您喜欢的任何存储库。
make changes, I can push it the GitHub or
Stash or whatever repository you like.

6
00:00:17.422 --> 00:00:20.582
你可以把它放下来在你的电脑上工作因为在这个时候
You can pull it down to work on your
computer because, at this point,

7
00:00:20.582 --> 00:00:23.974
我们只是在一个节点环境里，服务器不再重要了。
we're just in a Node environment,
the server doesn't matter anymore.

8
00:00:23.974 --> 00:00:28.320
版本控制，它仅记录对文件系统的更改以保留其历史记录。
Version control, it just records changes
to a file system to preserve its history.

9
00:00:28.320 --> 00:00:33.848
有 Git ， Subversion， Mercurial，还有什么我忘了吗 ?
There's Git, Subversion, Mercurial,
is there anything else I'm forgetting?

10
00:00:35.906 --> 00:00:36.423
>> Jem Young: 没有?
&gt;&gt; Jem Young: Nothing?

11
00:00:36.423 --> 00:00:37.822
大家都知道 Git吗
Everybody just knows Git?

12
00:00:37.822 --> 00:00:41.466
有趣的是 GitHub 不是 GitHub
Fun fact, what does GitHub or not GitHub,

13
00:00:41.466 --> 00:00:46.753
我认为 Facebook 是使用 SVN， Subversion 还是 Mercurial?
I think Facebook uses SVN,
Subversion, or is it Mercurial?

14
00:00:46.753 --> 00:00:49.432
Facebook 有一个 monorepo ，它们有一个存储库，用于
Facebook uses a monorepo,
they have one repository for

15
00:00:49.432 --> 00:00:50.917
他们的密码都在 Facebook上
all of their code at Facebook.

16
00:00:50.917 --> 00:00:53.808
因为 Git 不能像它们一样处理太多代码。
Because Git literally can't
handle as much code as they have.

17
00:00:53.808 --> 00:00:55.732
对它有最大限度的限制
There's like a maximum limit on it.

18
00:00:55.732 --> 00:00:59.613
我认为谷歌也有自己的定制存储库版本控制。
And I think Google has their own
custom repo version control as well.

19
00:00:59.613 --> 00:01:04.614
奇怪的事实不适用于任何形式或时尚，但它只是知道的好。
Weird fact, does not apply in any form or
fashion, but it's just good to know.

20
00:01:04.614 --> 00:01:10.368
这是我们最后的练习，我们将把我们的存储库推向一个 GitHub 存储库。
This is our final exercise, we're gonna
push our repository up to a GitHub repo.

21
00:01:10.368 --> 00:01:13.638
但要做到这一点，我们需要采取一系列步骤。
But to do that,
we need to go through a series of steps.

22
00:01:13.638 --> 00:01:20.311
因为希望 GitHub ，您已启用 SSH 密钥，而不是密码。
Because hopefully for GitHub, you have
your SSH keys enabled, not a password.

23
00:01:20.311 --> 00:01:22.393
对于大多数人，您有 SSH 密钥。
And for most people, you have SSH keys.

24
00:01:22.393 --> 00:01:24.781
如果在工作时使用 SSH ，那么可能强制您使用 SSH。
If you use it at work,
they probably force you to use SSH.

25
00:01:24.781 --> 00:01:27.183
但我们要创建一个 Git 存储库，我们已经做了。
But we're gonna create a Git repository,
which we already did.

26
00:01:27.183 --> 00:01:29.656
我们会创建一个 SSH 密钥，我们知道该怎么做。
We're gonna create an SSH key,
which we know how to do.

27
00:01:29.656 --> 00:01:32.719
我们会将 SSH 密钥添加到授权密钥目录中
We're gonna add that SSH key to
the authorized keys directory,

28
00:01:32.719 --> 00:01:33.692
我们已经做过了
which we've done.

29
00:01:33.692 --> 00:01:35.979
我们会将 SSH 密钥添加到 GitHub。
We're gonna add the SSH key to GitHub.

30
00:01:35.979 --> 00:01:40.740
我们要加上远程存储库然后我们就能把它全部推了
We're gonna add the the remote repo,
and then we're gonna push it all.

31
00:01:40.740 --> 00:01:43.939
这比我们想象的要复杂得多
That was trickier than we thought it'd be.

32
00:01:43.939 --> 00:01:45.465
我想那就更麻烦了
It was trickier I thought it'd be.

33
00:01:45.465 --> 00:01:48.692
我以前也这么做过，这还真是太麻烦了。
And I've done this before, and
it's still like, what a hassle.

34
00:01:48.692 --> 00:01:51.510
所以让我们现在就走吧，因为这是最后的一步。
So let's walk through it now,
because this is the final step.

35
00:01:51.510 --> 00:01:56.995
一旦我们做了这个，我们能做的就是在本地机器上编码。
And once we do this, what we can do
is we can code on our local machines.

36
00:01:56.995 --> 00:01:58.307
我们不需要登录服务器。
We don't need log in to a server.

37
00:01:58.307 --> 00:02:01.388
这意味着我们可以使用我们的 IDE ，所有我们想做的工具，
So that means we can use our IDEs,
all the tools we wanna do,

38
00:02:01.388 --> 00:02:03.436
我们可以在本地旋转节点服务器。
we can spin up the Node server locally.

39
00:02:03.436 --> 00:02:05.757
然后我们就把这些都推到 GitHub 上
And then we can just push
that all to GitHub, and

40
00:02:05.757 --> 00:02:08.378
当我们登录服务器时，可以将其下拉。
then when we log into the server,
we can pull it down.

41
00:02:08.378 --> 00:02:11.330
然后重新启动服务器，然后进行所有更改。
And then restart our server and
then all the changes will be there.

42
00:02:11.330 --> 00:02:14.487
一般来说，你不会在服务器上做任何开发。
And generally, you're not gonna do
any development on the server itself.

43
00:02:14.487 --> 00:02:17.141
所以这其实是一个重要的步骤，但是
So this is actually a kind
of important step, but

44
00:02:17.141 --> 00:02:19.097
让我们去看看怎么做
let's walk through on how to do it.

45
00:02:19.097 --> 00:02:22.444
所以我做的第一件事就是创造了一个存储库。
So the first thing I did was
I created a git repository.

46
00:02:22.444 --> 00:02:25.521
我做了这个
And I made this one.

47
00:02:25.521 --> 00:02:28.826
现在可能是私事了，我一直都是在默认情况下使用的。
It's probably private right now,
cuz that's what I always use by default.

48
00:02:28.826 --> 00:02:30.518
所以不要去那也不代表什么
So don't go there, it won't mean anything.

49
00:02:30.518 --> 00:02:36.295
但我做的是，我去了我的主页。
But what I did was,
I went to my home page.

50
00:02:36.295 --> 00:02:41.365
然后，我忘记了如何创建 Git 存储库。
And then, I forgot actually how
to create a Git repository.

51
00:02:41.365 --> 00:02:44.872
我们走了我说了新存储库
Here we go, and I said New repository.

52
00:02:44.872 --> 00:02:47.743
然后你把它叫做 " 公共或私人"
Then you call it something Public or
Private.

53
00:02:47.743 --> 00:02:51.396
如果您没有 " 专用 " 选项，那么可能不为 GitHub Pro 付款。
If you don't have the Private option,
you probably don't pay for GitHub Pro.

54
00:02:51.396 --> 00:02:54.644
没关系，你不需要，你可以让它公开。
That's okay, you don't need to,
you can make it public.

55
00:02:54.644 --> 00:02:57.485
通常最好使用自述文件来初始化此存储库
It's usually best to initialize
this repo with a readme,

56
00:02:57.485 --> 00:02:58.819
本结构简单，使用方便，易于实现。
it makes it easy to pull in.

57
00:02:58.819 --> 00:03:02.582
如果您还没有节点，请添加 .gitignore 。
And add a .gitignore,
if you haven't already, for node.

58
00:03:02.582 --> 00:03:04.342
所以它会忽略那些 node_modules ，所以
So it's gonna ignore those node_modules,
so

59
00:03:04.342 --> 00:03:05.973
你不必每次都这么做
you don't have to commit those every time.

60
00:03:05.973 --> 00:03:09.752
如果没有的话，我们会写一个，或者我给你演示如何快速写一个 .citignore 。
If not, we'll write one, or I'll show you
how to write a .gitignore really quick.

61
00:03:09.752 --> 00:03:14.520
但是一般情况下，您不想推送您的 node_modules， cuz 可以
But generally, you don't wanna push
your node_modules, cuz they can be

62
00:03:14.520 --> 00:03:19.753
数据的兆字节，兆字节和兆字节，当我们为我们建立 NPM 时。
megabytes and megabytes and megabytes of
data, when we have NPM to do that for us.

63
00:03:19.753 --> 00:03:22.415
然后，如果需要，请添加许可证。
And then add a license if you want.

64
00:03:22.415 --> 00:03:25.147
我已经做了一个 repo ，所以我不会再做另一个了。
And I already made a repo, so
I'm not gonna make another one.

65
00:03:25.147 --> 00:03:27.969
大家都来了对吧
Everybody, we got this far, right?

66
00:03:27.969 --> 00:03:32.748
好，下一步是创建 SSH 密钥。
Okay, next step was create an SSH key.

67
00:03:32.748 --> 00:03:39.394
要做到这一点，我要切换到 cd ~ /.ssh/。
And to do that,
I'm gonna switch to cd ~/.ssh/.

68
00:03:39.394 --> 00:03:44.658
然后用我们之前在其他电脑上用的那个命令
And then we're gonna use that command
we used earlier on our other computer,

69
00:03:44.658 --> 00:03:47.423
但它仍在这儿工作 ssh - keygen
but it still works here, ssh-keygen.

70
00:03:47.423 --> 00:03:49.905
我已经做了一个 SSH 密钥我不会再做一个了
And I've already made an ssh key,
I'm not gonna make another one.

71
00:03:49.905 --> 00:03:52.675
但遵循的步骤是标准的。
But the steps follow is standard.

72
00:03:52.675 --> 00:03:55.859
您只能使用 id_rsa，因为它是新的服务器
You can just use id_rsa,
because, it's a new server so

73
00:03:55.859 --> 00:03:57.993
你在那里没有 SSH 密钥
you don't have any SSH keys on there.

74
00:03:57.993 --> 00:04:02.026
除非你只是在为有趣的工作做 SSH 密钥而不去评判你
Unless you were just making SSH keys for
fun, not going to judge you.

75
00:04:02.026 --> 00:04:05.227
因此，一旦我们添加了 SSH 密钥，我道歉，我犯了一个错误。
So once we add that SSH key,
I apologize, I made a mistake.

76
00:04:05.227 --> 00:04:07.521
实际上，我们不需要将其添加到授权密钥中。
We actually don't need to add
it to the authorized keys.

77
00:04:07.521 --> 00:04:10.471
仅当我们想在使用该服务器时添加 SSH 。
That's only if we wanna add
SSH in using that server.

78
00:04:10.471 --> 00:04:14.127
所以我要把这条线取出来
So I'm gonna take this line out.

79
00:04:14.127 --> 00:04:14.962
我很抱歉
I apologize.

80
00:04:14.962 --> 00:04:16.937
这是一项正在进行中的工作。
It's a work in progress.

81
00:04:16.937 --> 00:04:20.994
但是因为我们创建了 id_rsa，它是缺省密钥。
But because we created that id_rsa,
it's the default key.

82
00:04:20.994 --> 00:04:24.978
当我们使用 GitHub 来 SSH 并推送文件或提取我们的文件时，
When we use GitHub to SSH and
push our files or pull our files,

83
00:04:24.978 --> 00:04:28.432
它会自动查看此缺省值。
it's automatically going
to look at this default.

84
00:04:28.432 --> 00:04:33.034
所以我们不需要做任何事情来把它添加到钥匙链上。
So we don't need to do anything to add it
to the key chain or anything like that.

85
00:04:33.034 --> 00:04:34.957
大家都好到目前为止
Everybody, we're good so far.

86
00:04:34.957 --> 00:04:35.697
没丢过人吗
Didn't lose anybody?

87
00:04:35.697 --> 00:04:36.947
我们生成一个密钥。
We generate a key.

88
00:04:36.947 --> 00:04:38.930
这里的情况有点棘手
It gets a little trickier here.

89
00:04:38.930 --> 00:04:43.401
我们需要做的是将 SSH 密钥添加到 GitHub。
What we need to do is we need
to add the SSH key to GitHub.

90
00:04:43.401 --> 00:04:44.725
如果我们点击这个链接
And if we click this link,

91
00:04:44.725 --> 00:04:47.992
它会带您到 " 帮助 " 页面来说明如何执行该操作。
it'll take you to the Help page
explaining exactly how to do it.

92
00:04:47.992 --> 00:04:51.543
但我们的方式是我可以走了
But the way we do it is, I can go,

93
00:04:51.543 --> 00:04:55.886
只要点击一下我的个人档案图标
just click my profile icon on any spot,

94
00:04:55.886 --> 00:05:01.824
转至 " 设置" ，转至 SSH ，我可以添加新的 SSH 密钥。
go to Settings, go to SSH,
and I can add a new SSH key.

95
00:05:01.824 --> 00:05:08.636
就像上次我们做的那样我要说猫咪
And just like we did last time,
I'm gonna say cat id_rsa.

96
00:05:08.636 --> 00:05:11.839
记住，它是公用密钥， .pub。
Remember, it's the public key, .pub.

97
00:05:13.199 --> 00:05:14.648
>> Jem Young: 到目前为止还不错。
&gt;&gt; Jem Young: Good so far.

98
00:05:14.648 --> 00:05:15.903
我们都得走了
We all got this far.

99
00:05:15.903 --> 00:05:18.713
我们可以复制并粘贴。
And we can copy and paste that.

100
00:05:18.713 --> 00:05:19.747
我们把它放在这里
And we put it in here.

101
00:05:19.747 --> 00:05:20.612
我已经做过了
I've already done it.

102
00:05:20.612 --> 00:05:23.077
我能再做一次但没问题
I can do it again, but
there's no point to it.

103
00:05:23.077 --> 00:05:26.038
无论你想要什么我都给它一个完整的标题
I give it a title for whatever you want,
full stack front end.

104
00:05:26.038 --> 00:05:28.944
删除我的密钥，假服务器密钥，不重要。
Delete me key, fake server key,
doesn't matter.

105
00:05:28.944 --> 00:05:31.305
因此，添加 SSH 密钥。
So you add that SSH key in.

106
00:05:31.305 --> 00:05:32.978
那你就有新的 SSH了
Then you'll have a new SSH.

107
00:05:32.978 --> 00:05:39.215
因此，这允许我们连接到 GitHub ，而不是使用密码。
So this allows us to connect to GitHub,
instead of using a password.

108
00:05:39.215 --> 00:05:42.550
你可能被挂在这部分了
Where you might have got
hung up on was this part.

109
00:05:42.550 --> 00:05:46.468
这很微妙，你可能做到了，甚至都没意识到。
And it's subtle, and you've probably
done it and not even realized it.

110
00:05:46.468 --> 00:05:51.362
我们需要在我们的服务器上添加远程到我们的新存储库。
We need to add the remote to
our new repo on our server.

111
00:05:51.362 --> 00:05:53.495
但我们想用 SSH 的
But we wanna use the SSH one.

112
00:05:53.495 --> 00:05:58.975
如果我们使用  它每次都要问我们一个用户名和密码。
If we use HTTPS, it's gonna ask us for
a username and password every single time.

113
00:05:58.975 --> 00:05:59.730
那是个麻烦
That's a hassle.

114
00:05:59.730 --> 00:06:02.713
再次，我们通常不希望使用密码，我们使用 SSH。
And again, we generally don't
wanna use passwords, we use SSH.

115
00:06:02.713 --> 00:06:05.286
所有这些都发生在背景中。
So all this happens in the background.

116
00:06:05.286 --> 00:06:08.788
现在，大多数人可能在一天中使用某种版本控制
Now, most of you probably work with
some sort of version control in your day

117
00:06:08.788 --> 00:06:09.353
一天的工作
to day job.

118
00:06:09.353 --> 00:06:12.639
你可能是在默认情况下成立的，你甚至都没意识到。
And you probably have this all set up by
default, and you didn't even realize it.

119
00:06:12.639 --> 00:06:14.831
但就像我说的这个课在兜风里
But like I said,
this class is going under the hood and

120
00:06:14.831 --> 00:06:16.262
看看到底发生了什么
seeing exactly what's going on.

121
00:06:16.262 --> 00:06:18.612
所以使用 SSH。
So use SSH.

122
00:06:18.612 --> 00:06:21.637
我们想把它复制过来
We wanna copy that over.

123
00:06:21.637 --> 00:06:23.839
现在我要换了我还在我的服务器上
So now I'm gonna switch,
I'm still on my server.

124
00:06:23.839 --> 00:06:29.420
我要切换回 var/www/app/
I'm gonna switch back to var/www/app/,
and I'm gonna say,

125
00:06:29.420 --> 00:06:33.795
嗯，我有一个存储库， cuz 我可以做 git 状态。
hmm, I have a repository,
cuz I can do git status.

126
00:06:33.795 --> 00:06:35.475
我知道我在存储库里
And I know I'm in a repository.

127
00:06:35.475 --> 00:06:43.060
所以我 wanna 做的是远程添加原点，我认为这是正确的。
So what I wannna do is git remote
add origin, I think that's correct.

128
00:06:43.060 --> 00:06:46.033
我要检查码头的情况
I'm gonna check the docs just in case.

129
00:06:46.033 --> 00:06:49.682
Git 远程添加源，是。
Git remote add origin, yeah.

130
00:06:49.682 --> 00:06:55.802
我在 GitHub 中抽取的 Git 配置文件中
And I paste in the git config file
that I pulled from GitHub for

131
00:06:55.802 --> 00:06:58.564
我刚创建的新回购协议
my new repo I just created.

132
00:07:00.411 --> 00:07:03.105
>> Jem Young: 有道理吗 ? 到目前为止都和我一起吗
&gt;&gt; Jem Young: Makes sense?
Everybody with me so far?

133
00:07:03.105 --> 00:07:07.947
有一件事，我已经做过了，所以我必须确保我的指示有效。
One thing, I already did this, so
I had to make sure my instructions worked.

134
00:07:07.947 --> 00:07:11.949
你要做的一件事就是把遥控器
One thing you're gonna run into
is you're gonna add the remote,

135
00:07:11.949 --> 00:07:13.639
你可以说 git remote -v.
you can say git remote -v.

136
00:07:13.639 --> 00:07:17.196
只是为了验证你是否正确，你可能做到了。
Just to verify that you had it correctly,
you probably did.

137
00:07:17.196 --> 00:07:21.112
好的一件事就是我们要做点什么
Cool, one thing is we're
gonna do git commit.

138
00:07:21.112 --> 00:07:24.738
如果你做了 git 承诺，就会像你需要配置的那样
And if you do git commit, it's gonna throw
something in, like you need to configure

139
00:07:24.738 --> 00:07:27.463
您的用户名，全局用户名和全局名。
your username, your global username,
and your global name.

140
00:07:27.463 --> 00:07:30.081
当你把它放在 GitHub上的时候
That's just so when you push,
when it lands on GitHub,

141
00:07:30.081 --> 00:07:31.995
一定会有人归咎的
there'll be someone attributed to it.

142
00:07:31.995 --> 00:07:33.757
不是随便的人
Not some random person.

143
00:07:33.757 --> 00:07:36.704
你不用把真实的电邮放进你的真名里
You don't have to put in your real email,
you don't have to put in your real name,

144
00:07:36.704 --> 00:07:37.624
无论你是谁
be whoever you wanna be.

145
00:07:37.624 --> 00:07:38.324
但这只是
But it's just so

146
00:07:38.324 --> 00:07:41.430
等你在推的时候你就知道那个推力是从哪里来的
later when you're pushing, you know
exactly where that push came from.

147
00:07:41.430 --> 00:07:46.043
所以说 git 配置更好
So sometimes it's better
to say git config.

148
00:07:46.043 --> 00:07:50.103
Jem 破折号我的服务器不管在哪里都不重要
Jem dash, my own server,
wherever, doesn't matter.

149
00:07:50.103 --> 00:07:54.899
它只告诉你它是从哪里来的，而不是你的家用计算机。
It just tells you where it came from,
rather than your home computer.

150
00:07:54.899 --> 00:07:58.103
所以现在我要加一个 gigtignore 文件以防你没有
So right now I'm gona add a .gitignore
file just in case you didn't.

151
00:07:58.103 --> 00:08:02.598
所以我可以说 vi .
So I can say vi .gitignore.

152
00:08:07.961 --> 00:08:09.156
> > Jem Young: 这里已经有一个了。
&gt;&gt; Jem Young: And
there's already one in here.

153
00:08:09.156 --> 00:08:11.932
这是在我创建此存储库时自动创建的。
That was created automatically
when I created this repo.

154
00:08:11.932 --> 00:08:18.790
但是如果你的 tignore 是空白的，不用担心，
But if your gitignore is blank,
no worries,

155
00:08:18.790 --> 00:08:24.209
您就可以说 node_modules/。
you can just say node_modules/.

156
00:08:24.209 --> 00:08:24.778
怎么了
Yes?

157
00:08:24.778 --> 00:08:29.481
>> 演讲者 2: [COUGH] 但是如果您已经进行了落实，如果已推送
&gt;&gt; Speaker 2: [COUGH] But if you've
already commited, if you've already pushed

158
00:08:29.481 --> 00:08:34.859
你还没到位呢难道你不想先把那些都炸掉吗
and you didn't have that in place,
don't you wanna blow those away first?

159
00:08:34.859 --> 00:08:38.277
在将其添加到您的 git 落实或 .gitignore 之前 ?
Before adding it to your git commit,
or .gitignore?

160
00:08:38.277 --> 00:08:41.693
这样，您就无法 - >> Jem Young : 你会被困住。
Cuz otherwise you won't be able to-
&gt;&gt; Jem Young: You'll be stuck.

161
00:08:41.693 --> 00:08:43.106
>> 扬声器 2: 将永远被忽略。
&gt;&gt; Speaker 2: It'll be ignored forever.

162
00:08:43.106 --> 00:08:46.038
>> Jem Young: 您可以手动打开 GitHub 并删除该文件，但是
&gt;&gt; Jem Young: You could manually go
on GitHub and delete that file, but

163
00:08:46.038 --> 00:08:47.451
这不太合适
that's not preferrable.

164
00:08:47.451 --> 00:08:54.201
因此，您想做的是在进行此忽略之前，您可以对其进行注释。
So what you wanna do is before you make
this ignore, you can comment it out.

165
00:08:54.201 --> 00:08:57.619
这就是给那些已经和
So this is for
people who have already committed and

166
00:08:57.619 --> 00:09:01.844
他们把他们的 node_modules 推到 GitHub ，很好。
they pushed their node_modules
up to GitHub, which is fine.

167
00:09:01.844 --> 00:09:06.666
但我们想立即删除这些 node_modules ，然后落实。
But what we wanna do is wanna delete
those node_modules for now, then commit.

168
00:09:06.666 --> 00:09:10.279
该落实将转至 GitHub，它将除去 node_modules ，并且
And that commit will go up to GitHub,
it'll remove the node_modules, and

169
00:09:10.279 --> 00:09:11.921
然后我们再评论
then we'll comment this back in.

170
00:09:11.921 --> 00:09:14.874
如果是在杰姆的错的话那一天就结束了
And if this falls under Jem's bad,
it's the end of the day.

171
00:09:14.874 --> 00:09:17.222
我应该将此添加到使用 .gitgnore的指示信息中。
I should have added this to
the instructions to use a .gitgnore.

172
00:09:17.222 --> 00:09:20.830
但如果你没有，你可以现在就去补充。
But just in case you haven't,
you can go and add it now.

173
00:09:20.830 --> 00:09:24.595
而且 .gitignore 非常好，因为它忽略了日志文件，
And .gitignore is great because,
well, it ignores log files,

174
00:09:24.595 --> 00:09:28.232
所有的点文件你不需要做的事情
all the dot files,
things you don't actually need to commit.

175
00:09:28.232 --> 00:09:30.837
但如果你没那么做那就是我要做的事
But just in case you haven't,
that's what .gitignore does.

176
00:09:30.837 --> 00:09:32.645
但我现在就要写辞职了
But I'm gonna write quit right now.

177
00:09:32.645 --> 00:09:34.921
我修改了吉蒂诺
And I'll modify the .gitignore.

178
00:09:34.921 --> 00:09:36.894
所以我要承诺
So I'm gonna commit.

179
00:09:36.894 --> 00:09:42.355
所以我可以说 " git commit -am " ，只是添加正在跟踪的所有内容，
So I can say git commit -am, is just
adding everything that's being tracked,

180
00:09:42.355 --> 00:09:45.709
这一切都被修改过了
and it's just anything
that's been modified.

181
00:09:45.709 --> 00:09:51.496
git commit Modify git 忽略。
git commit Modify git ignore.

182
00:09:54.498 --> 00:09:55.373
>> Jem Young: 然后我可以推。
&gt;&gt; Jem Young: And then I can push.

183
00:09:55.373 --> 00:09:59.745
所以我可以说 git 推来推去的主人
So I can say git push origin master.

184
00:09:59.745 --> 00:10:02.833
如果运行该落实命令，并且它表示您需要配置您的用户名
If you ran that commit command and it's
saying you need to configure your username

185
00:10:02.833 --> 00:10:04.546
和密码现在就去做
and password,
just go ahead and do that now.

186
00:10:04.546 --> 00:10:06.517
你只需要做一次
You only have to do it one time.

187
00:10:11.466 --> 00:10:13.653
> > Jem Young: 然后我们就被推高了。
&gt;&gt; Jem Young: And, we just pushed up.

188
00:10:16.962 --> 00:10:18.340
>> Jem Young: 有人卡在任何地方吗 ?
&gt;&gt; Jem Young: Did anybody
get stuck on any part?

189
00:10:18.340 --> 00:10:19.753
我要回去了
I will go back over it.

190
00:10:19.753 --> 00:10:22.500
Git 可以是棘手的。
Git can be tricky.

191
00:10:22.500 --> 00:10:24.919
>> 扬声器 2: 我刚刚创建了 .gitignore。
&gt;&gt; Speaker 2: I just
created the .gitignore.

192
00:10:24.919 --> 00:10:28.599
但我已经说过了，因为我还得炸掉我的东西。
But I commented out because I
still have to blow away, my stuff.

193
00:10:28.599 --> 00:10:29.327
>> Jem Young: 是。
&gt;&gt; Jem Young: Yes.

194
00:10:29.327 --> 00:10:31.283
你还记得怎么删除吗
Do you remember how to delete something?

195
00:10:31.283 --> 00:10:33.081
>> 扬声器 2: 那么，它是 rm。
&gt;&gt; Speaker 2: Well, it's rm.

196
00:10:33.081 --> 00:10:36.014
>> Jem Young: 是的，但因为我们要删除所有内容，我们使用递归。
&gt;&gt; Jem Young: Yes, but because we wannna
delete everything, we use the recursive.

197
00:10:36.014 --> 00:10:38.847
所以我们说， rm -rf.
So we say, rm -rf.

198
00:10:38.847 --> 00:10:41.163
这很危险 [LAUGH]。
Which is very dangerous [LAUGH].

199
00:10:41.163 --> 00:10:44.668
再一次，你去除了档案，没有垃圾桶，它就不见了。
Again, you're removing files,
there's no trash can, it's just gone.

200
00:10:44.668 --> 00:10:46.798
但是如果您意外地落实了 node_modules，
But if you accidentally
committed your node_modules,

201
00:10:46.798 --> 00:10:49.517
在 .gitignore 中忽略该行，然后删除您的 node_modules。
ignore that line in .gitignore,
and then delete your node_modules.

202
00:10:49.517 --> 00:10:53.429
请落实该操作，然后将其向上推送。
Commit that, and then push it up.

203
00:10:53.429 --> 00:10:57.746
在 Git [LAUGH] 的整个过程中教导了一个比我更聪明的人。
There is an entire course on Git [LAUGH]
taught someone much smarter than me.

204
00:10:57.746 --> 00:10:59.424
我们会把它联系起来
We will link that out.

205
00:10:59.424 --> 00:11:03.174
你的 Git 会变得一团糟
Cuz Git will get really messy.

206
00:11:03.174 --> 00:11:05.129
但我们现在没事了
But we're okay for now.

207
00:11:05.129 --> 00:11:11.615
好吧，你按原主的方式，这个推应该已经转到了 GitHub了。
Okay, so you push origin master, the push
should have went through to GitHub.

208
00:11:11.615 --> 00:11:15.974
所以当我们回到 GitHub 的时候
So when we go back to GitHub to that repo.

209
00:11:18.581 --> 00:11:22.792
>> Jem Young: 我们看到了这些东西，现在他们可以给我了。
&gt;&gt; Jem Young: We see I committed these
things and now they're available for me.

210
00:11:27.687 --> 00:11:29.702
>> Jem Young: 所有人都走了吗 ?
&gt;&gt; Jem Young: Did everybody get this far?

211
00:11:29.702 --> 00:11:37.106
我知道我们在征税我们已经从 Nginx 配置到 Git 调整
I know we're taxing, we have moved from
Nginx configuration to Git tweaking.

212
00:11:37.106 --> 00:11:41.030
但现在我已经放弃了我要再克隆这个
But now that I've pulled up,
I'm gonna clone this repo again.

213
00:11:41.030 --> 00:11:46.274
在我的本地机器上我要搬去
And on my local machine,
I'm gonna move into,

214
00:11:46.274 --> 00:11:49.955
我想我有个项目文件夹
I think I have a projects folder.

215
00:11:49.955 --> 00:11:51.783
我确实有一个项目文件夹。
I do have a projects folder.

216
00:11:51.783 --> 00:11:53.296
有一个叫 Full-Stack-For-Fron趋向吗 ?
Is there one called
Full-Stack-For-Frontend?

217
00:11:53.296 --> 00:11:54.418
我知道
I do.

218
00:11:54.418 --> 00:11:56.778
我已经复制过了但我要移除它
I've already cloned that,
but I'm gonna remove that.

219
00:12:05.578 --> 00:12:10.289
>> Jem Young: 因此，在任何类型的工作文件夹中，都有任何类型的 UI 文件夹，
&gt;&gt; Jem Young: So in any sort of working
folder you have, any sort of UI folder,

220
00:12:10.289 --> 00:12:11.352
执行 git 克隆。
do git clone.

221
00:12:11.352 --> 00:12:14.630
我们准备好了我不知道为什么没有拷贝
And we're just gonna, oops,
I don't know why that didn't copy.

222
00:12:15.990 --> 00:12:20.490
>> Jem Young: 我要克隆这个
&gt;&gt; Jem Young: And I'm going to clone this.

223
00:12:20.490 --> 00:12:23.253
然后再进行克隆，再贴在其中。
And git clone, paste that in.

224
00:12:23.253 --> 00:12:24.591
我没删除吗
Did I not delete that?

225
00:12:24.591 --> 00:12:25.698
我没有。
I did not.

226
00:12:30.520 --> 00:12:31.666
>> Jem Young: Cool。
&gt;&gt; Jem Young: Cool.

227
00:12:33.519 --> 00:12:36.066
> > Jem Young: 现在，我们要克隆它，实时地进行克隆。
&gt;&gt; Jem Young: Now, we're gonna
clone it in, for real this time.

228
00:12:36.066 --> 00:12:40.161
我们正在做的就是我们正在做我们刚刚做的事情。
And all we're doing is we're
pulling down what we just did.

229
00:12:40.161 --> 00:12:46.135
如果我想进 fsfev2
And if I wanna go into fsfev2.

230
00:12:46.135 --> 00:12:48.798
现在我可以在 VS .
And now I can open that up in VS Code.

231
00:12:52.881 --> 00:12:56.085
>> Jem Young: 现在我的应用程序在一个更容易的环境中使用，
&gt;&gt; Jem Young: And now I have my
app in a much easier environment,

232
00:12:56.085 --> 00:12:57.850
那就更容易修改了
that's easier to modify.

233
00:12:57.850 --> 00:13:02.267
现在，我可以随时修改此应用，例如添加分号。
And now I can modify this app at will,
like add semicolons.

234
00:13:02.267 --> 00:13:05.292
我不知道为什么因为我喜欢分号
I don't know why,
because I like semicolons.

235
00:13:05.292 --> 00:13:06.442
我可以为所欲为
I can do whatever I want.

236
00:13:06.442 --> 00:13:10.731
我可以把它推上去，然后在我的服务器上，我就能把它拉上，
I can commit this, push it up, and then
on my server, I can just git pull, and

237
00:13:10.731 --> 00:13:12.589
把它拉出来重新装我的服务器
pull that in, reload my server.

238
00:13:12.589 --> 00:13:17.288
现在我修改了我的应用程序，我可以和一群人分享。
And now I've modified my app fresh, and I
can share this out with a bunch of people.

239
00:13:17.288 --> 00:13:21.594
现在， 10 个人可以在我的应用程序上工作，然后针对服务器运行。
So ten people can work on my app now and
then run against the server.

240
00:13:21.594 --> 00:13:25.041
如果我们想，我也不知道，如果我们明天再这样做的话。
If we wanted to, I don't know,
if we'll do that even tomorrow.

241
00:13:25.041 --> 00:13:26.102
但如果你想
But if you wanted to,

242
00:13:26.102 --> 00:13:29.647
我们可以设置一个自动执行最新更改的 cron 作业。
we can set up a cron job that
automatically pulls in the latest changes.

243
00:13:29.647 --> 00:13:30.937
我不推荐这么做
I don't recommend doing that.

244
00:13:30.937 --> 00:13:34.072
如果有人做了些奇怪的事，那就可以把你自己变成一个角落
That's a surefire way to get yourself into
a corner if someone does something weird

245
00:13:34.072 --> 00:13:36.961
然后将服务器的 cuz 配置为不正确。
and then takes down the server cuz
they configured something incorrectly.

246
00:13:36.961 --> 00:13:40.240
但是对于您自己的开发服务器，这是一种很好的做法。
But for your own development server,
it's a good way of doing things.

247
00:13:40.240 --> 00:13:45.496
这就是我 jemyoung.com 的方式，它是这样配置的。
That's how I do my jemyoung.com,
it's configured like that.

248
00:13:45.496 --> 00:13:49.145
所以我在本地开发一个 Python 服务器，我把它推上去，
So I do development locally on
a Python server, I push it up, and

249
00:13:49.145 --> 00:13:52.133
它一旦准备好就自动拉入
it automatically pulls it
in once it's ready to go.
