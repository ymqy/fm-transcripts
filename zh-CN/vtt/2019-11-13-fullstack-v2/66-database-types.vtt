WEBVTT

1
00:00:00.930 --> 00:00:02.490
>> Jem Young: 第一类数据库，
&gt;&gt; Jem Young: The first type of database,

2
00:00:02.490 --> 00:00:06.009
你可能都听说过一个关系数据库
which you've probably all heard
of is a relational database.

3
00:00:06.009 --> 00:00:11.570
这称为 SQL 数据库或 SQL，安全或结构化查询语言。
That would be known as the SQL database,
or SQL, Safe or Structured Query Language.

4
00:00:11.570 --> 00:00:16.289
我想这取决于你上学的地方，或者你长大的地方。
I think it depends on where you went
to school, or like where you grew up.

5
00:00:16.289 --> 00:00:18.829
如果您说 SQL 或 SQL ，那么不重要。
If you say SQL or SQL, doesn't matter.

6
00:00:18.829 --> 00:00:21.339
就像有人说
Just like some people say integral, and

7
00:00:21.339 --> 00:00:24.940
其他人说积分并不重要
other people say integral,
doesn't really matter.

8
00:00:24.940 --> 00:00:29.989
关系数据库描述实体如何相互关联。
Relational databases describe how
entities relate to each other.

9
00:00:29.989 --> 00:00:33.590
他们总是用桌子和
And they invariably always use tables and

10
00:00:33.590 --> 00:00:37.859
它对于应该如何形成数据有一个非常严格的结构，
it has a very strict structure
on how data should be formed and

11
00:00:37.859 --> 00:00:41.679
应该怎么写，怎么读呢，它真的非常严格。
how should be written and how should be
read, and it's really, really strict.

12
00:00:41.679 --> 00:00:45.719
实际上，如果您使用 MySQL 或 postures 进行过任何类型的 SQL ，或者
In fact, if you've ever done any sort
of SQL using MySQL or postures or

13
00:00:45.719 --> 00:00:50.960
这样就很麻烦的选择了这个表格里的 ID ，
something like that, it can be
cumbersome selects ID from this table,

14
00:00:50.960 --> 00:00:54.939
在此同时使用自己的语言，成为数据库管理员或
left join on this and it's own language,
becoming a database administrator or

15
00:00:54.939 --> 00:00:57.689
数据库专家是它自己的特殊领域。
a database expert is
its own special field.

16
00:00:57.689 --> 00:01:02.659
你真的可以在美国的数据库里学两年。
You literally could go to school for
like two years for just the US databases.

17
00:01:02.659 --> 00:01:05.650
但你需要它因为当你有大量数据时
But you need it because when you
have massive amounts of data,

18
00:01:05.650 --> 00:01:08.370
您需要一种结构化的方法来查询该数据。
you need a structured way
of querying that data.

19
00:01:08.370 --> 00:01:11.189
这就是关系数据库的发明
That's the invention of
relational databases and

20
00:01:11.189 --> 00:01:14.480
结构化查询语言，这是有关如何访问所有这些语言的通用语言。
Structured Query Language, a common
language on how to access all these.

21
00:01:15.629 --> 00:01:20.060
根据您的数据库类型，语言可能会有所变化。
Depending on your type of database,
the language might change a little bit.

22
00:01:20.060 --> 00:01:24.700
因此，像 Costco 那样的语言将使用与 MySQL 不同的语言。
So something like Costco is gonna
use a different language than MySQL.

23
00:01:24.700 --> 00:01:26.269
但一般来说
But generally,

24
00:01:26.269 --> 00:01:30.359
如果你能想象它们的结构，它们的工作方式是一样的。
they kind of all work the same way if
you imagine how they're structured.

25
00:01:31.799 --> 00:01:34.710
我觉得人们用结构查询语言挂的问题
I think the problem that people get
hung up with structure query language

26
00:01:34.710 --> 00:01:37.507
你不能只为数据库写东西我会想办法的
is you can't just write things for
database and like, I'll figure it out.

27
00:01:37.507 --> 00:01:39.799
我们会一起去的
I'll figure it out as we go along.

28
00:01:39.799 --> 00:01:42.680
你要提前有个结构，要有很严格的，
You have to have a structure ahead of
time and you have to have a very strict,

29
00:01:42.680 --> 00:01:43.969
那是什么，是一个模式。
what is that, it's a schema.

30
00:01:45.049 --> 00:01:47.950
当你有一个模式时，它只是说这些是严格的规则。
And when you have a schema,
it's just saying these are strict rules.

31
00:01:47.950 --> 00:01:51.371
所以这一栏是主宰者的一员
So this column for
is a member of front of masters,

32
00:01:51.371 --> 00:01:56.512
这将会是一个布尔值类型，将由 1 或 0 表示。
that's gonna be a Boolean type,
which is gonna be represented by 1 or 0.

33
00:01:56.512 --> 00:01:57.719
这一切都不可能发生
And it can't be anything else.

34
00:01:57.719 --> 00:01:58.849
如果你想写点别的
And if you try to write
something else to it,

35
00:01:58.849 --> 00:02:03.090
它会失败的因为它会随着时间的推移而保持严格的结构
it's gonna fail, because it's all about
maintaining a strict structure over time.

36
00:02:03.090 --> 00:02:06.790
现在，关系数据库中的 SQL 是第一次，但是
Now, SQL in relational databases
were the first time, but

37
00:02:06.790 --> 00:02:13.710
随着时间的推移，您可能听到了非关系数据库或 NoSQL 数据库。
over time you've probably heard of non
relational databases, or NoSQL databases.

38
00:02:13.710 --> 00:02:18.670
当我们想到纯文档存储时，这些都是我们在想的。
These are more what we were thinking about
when we think of pure document storage.

39
00:02:18.670 --> 00:02:20.400
他们通常是数据不可知论者
They're generally data agnostic,

40
00:02:20.400 --> 00:02:23.420
他们不关心你放进去的那种数据，没有结构。
they don't care what kind of data you put
in there, there's no structure to it.

41
00:02:23.420 --> 00:02:26.280
或者如果有一个结构，它是一个非常松散的结构。
Or if there is a structure,
it's a very, very loose structure.

42
00:02:26.280 --> 00:02:31.819
因此， NoSQL 数据库或非关系的示例是着名的
So an example of a NoSQL database or
non relational be redis is the famous

43
00:02:31.819 --> 00:02:35.439
一个， MongoDB 用于记录商店或 elasticsearch。
one, MongoDB used to document store or
elasticsearch.

44
00:02:37.710 --> 00:02:40.610
关于非关系数据库的问题，我觉得很有趣的是
The thing about non relational database
which I find really interesting is they

45
00:02:40.610 --> 00:02:45.069
都有自己在世界上独一无二的地方
all have their own kinda
unique place in the world.

46
00:02:45.069 --> 00:02:49.490
所以红红真的很擅长做现金数据库
So redis is really good
at it as a cash database.

47
00:02:49.490 --> 00:02:51.490
Redis 只是一个关键的价值存储。
Redis is just a key value store.

48
00:02:51.490 --> 00:02:54.550
给定一个键，这是一个值。
Given a key, here's a value.

49
00:02:54.550 --> 00:02:58.329
我不会这么简单的说只要你的查询就会变得很乱
I won't say as simple as it can get cuz
like it the queries can get pretty messy.

50
00:02:58.329 --> 00:03:03.960
但如果如何保存数据，我的名字是吉姆，我的姓是年轻的。
But if terms of how to save data,
my name is Jim, my last name is young.

51
00:03:03.960 --> 00:03:05.069
这就像得到一样简单
That's as simple as it gets.

52
00:03:05.069 --> 00:03:08.020
因此，如果需要，我们可以创建具有编辑的高速缓存服务器，
So we can create a caching server
with redis if we needed to,

53
00:03:08.020 --> 00:03:09.770
我们之前谈过高速缓存的事
and we spoke earlier about caching.

54
00:03:09.770 --> 00:03:12.219
执行此操作的一种方法是使用 rediis 数据库。
One way of doing that is
with a redis database.

55
00:03:12.219 --> 00:03:14.443
另一方面，蒙戈是一家文件商店。
Mongo, on the other hand,
is a document store.

56
00:03:14.443 --> 00:03:16.060
所以它是专门储存文件的
So it's made to specifically
store documents.

57
00:03:16.060 --> 00:03:21.020
所以认为一个具有任意 JSON Blob 的密钥，以及有关 JSON 的信息
So think a key with an arbitrary JSON
blob, and the thing about JSON is it

58
00:03:21.020 --> 00:03:22.879
并不一定会有同样的结构
doesn't necessarily have
the same structure all the time.

59
00:03:22.879 --> 00:03:28.789
它不是一个结构的符号，它有一个结构，但是它很松散。
It's not a structured notation per se,
has a structure but it's pretty loose.

60
00:03:28.789 --> 00:03:34.393
我们是 MongoDB ，只是把数据转储在数据仓库里，然后把它拉出来。
We're MongoDB is about just dumping data
into a data store and pulling it back out.

61
00:03:34.393 --> 00:03:37.500
还有一些你可能听说过的是亚马逊的红移。
Some other ones you might have heard
of would be redshift on Amazon.

62
00:03:37.500 --> 00:03:42.310
这是一个非常庞大的规模数据库。
That's a very large and
like petabyte scale database.

63
00:03:42.310 --> 00:03:45.409
基于旧版本的 Postgres ，现在它已经转移了。
Built on the old version of Postgres,
and it's now since shifted.

64
00:03:45.409 --> 00:03:48.699
您都听过或使用过的其他数据库是什么 ?
What are some other databases you
all have heard of or have used?

65
00:03:50.710 --> 00:03:51.670
这里有很多
There's a lot.

66
00:03:51.670 --> 00:03:53.420
>> 扬声器 2: Firebase。
&gt;&gt; Speaker 2: Firebase.

67
00:03:53.420 --> 00:03:57.460
>> Jem Young: Firebase，我不知道这是否是一个数据库。
&gt;&gt; Jem Young: Firebase,
I don't know if that's a database per se.

68
00:03:57.460 --> 00:03:58.050
是吗
It is?

69
00:03:58.050 --> 00:03:59.629
好吧今天学到了新东西
Okay, learnt something new today.

70
00:03:59.629 --> 00:04:02.080
我觉得这更有联系
I thought it's more of
a type of connection.

71
00:04:02.080 --> 00:04:07.236
>> 演讲者 3: 那是一个数据库和实时数据。
&gt;&gt; Speaker 3: Well, that's it's
a database coupled with the live data.

72
00:04:07.236 --> 00:04:10.438
>> Jem Young: 是的，认为更像是某种形式的协议，
&gt;&gt; Jem Young: Yeah, thought is
more of like a protocol of sorts,

73
00:04:10.438 --> 00:04:13.215
但是- >> 扬声器 3: 它是非关系数据库
but-
&gt;&gt; Speaker 3: It's non relational database

74
00:04:13.215 --> 00:04:14.879
在谷歌的云中
in Google's cloud.

75
00:04:16.021 --> 00:04:18.185
> > Jem Young: 嘿，太棒了
&gt;&gt; Jem Young: Hey, that's awesome.

76
00:04:18.185 --> 00:04:20.420
我不知道那个火碱很好的例子。
I didn't know that firebase good example.

77
00:04:20.420 --> 00:04:21.970
还有其他的吗
Any other ones?

78
00:04:21.970 --> 00:04:22.970
>> 演讲者 3: CouchDB。
&gt;&gt; Speaker 3: CouchDB.

79
00:04:22.970 --> 00:04:26.339
>> Jem Young: CouchDB，任何其他 ?
&gt;&gt; Jem Young: CouchDB, any other ones?

80
00:04:26.339 --> 00:04:27.230
>> 演讲者 3:PouchDB。
&gt;&gt; Speaker 3: PouchDB.

81
00:04:27.230 --> 00:04:31.204
>> Jem Young: PouchDB，是的，其他任何与担保 DB 的押韵吗 ?
&gt;&gt; Jem Young: PouchDB, yeah,
anything else that rhymes with ouch DB?

82
00:04:31.204 --> 00:04:34.060
>> [LAUGH] >> Jem Young: 实际上有一个数据库
&gt;&gt; [LAUGH]
&gt;&gt; Jem Young: There's actually a database

83
00:04:34.060 --> 00:04:37.540
已构建到名为 IndexedDB的浏览器中。
built into your browser called IndexedDB.

84
00:04:37.540 --> 00:04:41.459
没有很多人使用它，但它是可以使用的。
Not a lot of people use it,
but it's available.

85
00:04:41.459 --> 00:04:44.079
因为我们想，哎，我们都有这些数据库，
Because we thought, hey,
we have all these databases,

86
00:04:44.079 --> 00:04:46.139
为什么不使用构建到浏览器中的数据库 ?
why not just use a database
built into the browser?

87
00:04:46.139 --> 00:04:47.189
嗯。
Yes.

88
00:04:47.189 --> 00:04:52.478
>> 演讲者 3: 不是区块链数据库， kinda?
&gt;&gt; Speaker 3: Aren't
blockchains databases, kinda?

89
00:04:52.478 --> 00:04:56.576
>> Jem Young: 我不知道我是否称区块链为数据库本身。
&gt;&gt; Jem Young: I don't know if I
call blockchain a database per se.

90
00:04:56.576 --> 00:04:57.959
这取决于我们如何定义数据库。
It depends how we're defining database.

91
00:04:57.959 --> 00:05:00.240
我们的意思是它是数据的原始存储。
We're saying like it's
a raw store of data.

92
00:05:01.279 --> 00:05:04.769
是的但我不会说这就像变量本身
Yes, but
I wouldn't say it's like variable per se.

93
00:05:04.769 --> 00:05:06.040
它不是被构建为变量的。
It's not built to be variable.

94
00:05:06.040 --> 00:05:09.704
你我觉得查询你要经过整个区块链才能找到什么
You I think the query, you have to run
through the entire blockchain to find what

95
00:05:09.704 --> 00:05:11.521
据我所知你要找的人
you're looking for, as far as I know.

96
00:05:11.521 --> 00:05:14.254
非关系数据库方面有哪些吸引力 ?
What's fascinating about the non
relational database side?

97
00:05:14.254 --> 00:05:18.459
NoSQL 端是不断创建新数据库的人员。
The NoSQL side is people
are constantly creating new databases.

98
00:05:18.459 --> 00:05:21.839
因为他们有非常独特的情况需要速度和速度
Because they have some very unique
case that requires like speed or

99
00:05:21.839 --> 00:05:25.540
一致性，或类似非关系型
consistency, or something like that,
versus the non relational

100
00:05:25.540 --> 00:05:30.040
更能有效地查询数据的数据库，以及
databases which are more about being
able to query data efficiently, and

101
00:05:30.040 --> 00:05:33.139
能够快速了解情况，快速修改事物。
be able to look things up quickly and
modify things quickly.

102
00:05:33.139 --> 00:05:35.490
而非关系则需要更多的时间。
Whereas non relational,
it's gonna take a little bit more time.

103
00:05:35.490 --> 00:05:37.810
如果你只是想尽快把文件取出来
If you're just trying to get
documents out as fast as possible,

104
00:05:37.810 --> 00:05:40.449
这个可能比较快一点，一般来讲，
this could be a little bit faster,
generally speaking.

105
00:05:41.829 --> 00:05:43.790
数据库有问题吗
Any questions on databases?

106
00:05:43.790 --> 00:05:45.480
我们刚刚飞过来了
We just flew through those.

107
00:05:45.480 --> 00:05:49.014
我不想做任何具体因为它真的取决于你的
I didn't wanna get into any specific
one because it really depends on your

108
00:05:49.014 --> 00:05:49.590
用例。
used case.
