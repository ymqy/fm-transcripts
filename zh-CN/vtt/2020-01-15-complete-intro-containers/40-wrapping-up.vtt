WEBVTT

1
00:00:00.220 --> 00:00:02.560
因此，这使我们得出了我们的结论。
So that brings us to
the conclusion of our course.

2
00:00:02.560 --> 00:00:06.190
你幸存了下来你幸存了下来你在库伯内特幸存下来
You survived Builder, you survived podman,
you survived Kubernetes,

3
00:00:06.190 --> 00:00:09.179
你的简历就像我幸存下来一样
that's something that you can like right
on your resume that like I survived

4
00:00:09.179 --> 00:00:11.230
库伯内特好吗
Kubernetes, all right?

5
00:00:11.230 --> 00:00:15.279
你学到了很多关于 Docker的东西，很棒，你学会了
You learned a lot of stuff about Docker,
which is awesome, you learned

6
00:00:15.279 --> 00:00:20.079
容器是什么你学会了如何手工制作容器
what a Container is, you learned how
to handcraft container which is, again,

7
00:00:20.079 --> 00:00:22.539
很多人每天都能用容器
what more than a lot of people can
do that use containers every day.

8
00:00:24.160 --> 00:00:27.359
您将了解 Docker 是什么，在何处有用，如何为 Docker 设置 Docker 文件
You'll learn what Docker is, where it can
be useful, how to set up Docker files for

9
00:00:27.359 --> 00:00:31.739
开发和生产，如何在 Docker中设置网络，绑定安装，
both development and production, how to
set up networks in Docker, bind mounts,

10
00:00:31.739 --> 00:00:36.850
卷， Docker 编写，然后进行大量介绍
volume, Docker compose and
then a great introduction to

11
00:00:36.850 --> 00:00:41.590
大型生态系统是 Podman 和 Builder 之类的
the Ecosystem at large which would be
Podman and Builder and stuff like that.

12
00:00:43.659 --> 00:00:46.530
我认为这将会立即帮助你成为一名工程师
The things that I think that will
immediately help you as an engineer,

13
00:00:46.530 --> 00:00:49.509
作为开发者是如何开发共享开发者容器，
as a developer is how to make
a share developer container,

14
00:00:49.509 --> 00:00:50.929
我觉得这很有用
I think that's very useful.

15
00:00:50.929 --> 00:00:53.810
如何使用一些我们可以使用或使用的 Visual Studio 代码
How to make that work with Visual Studio
Code which a few of us could use or

16
00:00:53.810 --> 00:00:57.109
这对你来说是很有用的
make that very useful for
you right away, how to get up and

17
00:00:57.109 --> 00:00:59.049
如果有人给你一个容器对吧
going if someone gives
you a container right?

18
00:00:59.049 --> 00:01:01.799
比如你办公室的人指控集装箱
Like if someone from your office
teams has accused the container

19
00:01:01.799 --> 00:01:03.960
你知道该怎么做对吧
now you know what to do with it, right?

20
00:01:03.960 --> 00:01:06.819
然后如何启动更小的规模
And then how to start smaller scale like

21
00:01:06.819 --> 00:01:10.200
多容器项目由 Docker 组成，然后最终由 Kubernetes组成。
multi container projects with Docker
compose and then eventually Kubernetes.

22
00:01:10.200 --> 00:01:13.730
我觉得这些都是关键的，马上有用的 takeawways，
I think those are like the key,
immediately useful takeaways,

23
00:01:13.730 --> 00:01:17.129
我认为其他一切都只是在了解容器周围的生态系统。
I think everything else is just kind of
knowing the ecosystem around containers.

24
00:01:18.420 --> 00:01:22.900
然后我觉得容器会变得越来越重要，对吧 ?
And then I think containers are just gonna
become more and more important, right?

25
00:01:22.900 --> 00:01:25.480
有些像技术我已经证明你越来越多
Some of these like techniques that
I've shown you are becoming more

26
00:01:25.480 --> 00:01:28.799
像微软和谷歌这样的公司
common at companies like Microsoft and
Google and

27
00:01:28.799 --> 00:01:33.379
我想这也会渗透到这些更小的公司，对吧 ?
I think that's going to permeate down into
these smaller companies as well, right?

28
00:01:34.479 --> 00:01:38.500
所以我觉得如果你在这条曲线的过程中
So I think you're ahead of the curve if
you've gotten this far in the course of

29
00:01:38.500 --> 00:01:43.400
那里的生态系统和产业环境的发展
where the ecosystem and where
the environment of the industry is going.

30
00:01:45.349 --> 00:01:48.000
还有其他很酷的事情我们没说过
And there's other things really
cool that we didn't talk about,

31
00:01:48.000 --> 00:01:51.270
Azure 容器的实例 AWS Fargate
things like Azure Container Instances,
AWS Fargate,

32
00:01:51.270 --> 00:01:54.460
Google 云运行， Visual Studio Online 是另一个非常酷的版本。
Google Cloud Run, Visual Studio Online
is another one that's really cool.

33
00:01:54.460 --> 00:01:57.759
这些都是围绕着容器
And these are all things that
are centered around containers

34
00:01:57.759 --> 00:02:02.730
例如 CI Azure 容器实例或 " 法门 " 或 " 云运行" 。
like something like a CI Azure Container
instances or Fargate, or Cloud Run.

35
00:02:02.730 --> 00:02:05.799
你要做的就是让云提供商像我的容器一样
What you do is you give the cloud
providers like here's my container, and

36
00:02:05.799 --> 00:02:08.449
那么云提供者只需要在容器中运行，然后开始运行
then the cloud provider just takes in
the container and starts running it and

37
00:02:08.449 --> 00:02:12.199
它会放大和缩小你的规模这是他们的无服务器的容器
then it'll scale it up and scale down for
you, it's their serverless containers.

38
00:02:13.259 --> 00:02:15.219
你不用管他们你不需要把它们放大
And you don't have to manage them,
you dont have to scale them or

39
00:02:15.219 --> 00:02:17.629
任何类似的事情都是很有效的
anything like that, everything just kind
of works so definitely check those out,

40
00:02:17.629 --> 00:02:18.389
这些都很有趣
those are a lot of fun.

41
00:02:20.840 --> 00:02:23.620
所以我要来这里的笔记我们要过去几个月
So I'm gonna come in here to the notes,
and we're just gonna go over some last

42
00:02:23.620 --> 00:02:27.689
如果你有兴趣的话你可以去做一些生态系统
ecosystem things that you can go and do
more investigation if you're interested.

43
00:02:27.689 --> 00:02:28.854
所以它就在结论部分。
So it's here in the conclusion section.

44
00:02:31.431 --> 00:02:36.939
所以如果你想要更多的集装箱运行时间来建造一个 Podman 和
So if you want more container runtimes
alternatives to build a Podman and

45
00:02:36.939 --> 00:02:39.900
Docker，有 lxc 和 lxd。
Docker, there's lxc and lxd.

46
00:02:39.900 --> 00:02:46.185
所以 lxc ，这也是开的容器， LINUX 基金会的
So lxc, this also comes out of the open
container, LINUX foundation kind

47
00:02:46.185 --> 00:02:52.185
基于 lxc 的 Docker ，因此它是一种基本的构建块。
of project, Docker used to based on lxc so
it's kind of a fundamental building block.

48
00:02:53.844 --> 00:02:57.865
所以它也基于容器， lxd 是守护程序
And so it's also based around containers,
lxd is the daemon that

49
00:02:57.865 --> 00:03:01.419
在后台运行，使用 lxd 与 Docker的概念。
runs in the background,
the idea with lxd versus Docker.

50
00:03:01.419 --> 00:03:05.430
Docker 的构建非常重要我想旋转并销毁容器
Docker is very much build for, I'm wanna
spin up and destroy containers and

51
00:03:05.430 --> 00:03:08.229
我不太在意我经常这样做对吧
I don't really care how
frequently I do that, right?

52
00:03:08.229 --> 00:03:09.330
什么都不是为了永远活下去
Nothing is meant to live forever,

53
00:03:09.330 --> 00:03:12.849
一切都是一次性的那种 Docker 的方式
everything is disposable,
that's kind of the Docker way.

54
00:03:12.849 --> 00:03:16.500
对于将要运行的容器，此值为 lxd
With lxd this is meant for
containers that are gonna be running for

55
00:03:16.500 --> 00:03:18.270
很长时间了对吧
a very long time, right?

56
00:03:18.270 --> 00:03:21.329
这样你就会把容器转掉然后你就进去
So these ones you gonna spin off
a container, then you gonna go in and

57
00:03:21.329 --> 00:03:22.645
你要定制它对吧
you gonna customize it, right?

58
00:03:22.645 --> 00:03:26.569
Lxd 是你想继续跑的雪花容器
Lxd is for snowflake containers that
you wanna keep running for a very,

59
00:03:26.569 --> 00:03:27.210
很长时间了
very long time.

60
00:03:29.840 --> 00:03:34.930
然后有火箭，就是 CoreOS 和 CoreOS 买的
Then there's rocket, rkt which is from
CoreOS and CoreOS just got bought by

61
00:03:34.930 --> 00:03:41.079
Red Hat 和 Red Hat 由 IBM 购买，因此 IBM 最终拥有火箭。
Red Hat and Red Hat got bought by IBM so
IBM eventually owns rocket.

62
00:03:41.079 --> 00:03:48.030
它对 CoreOS 有很大的意义，它的核心是播客。
It's very much meant to pair with CoreOS
and it has the core idea of pods.

63
00:03:48.030 --> 00:03:51.870
这就是和库伯内特一样的想法
And this is the exact same idea of pods
to Kubernetes where you have these

64
00:03:51.870 --> 00:03:56.650
全部捆绑在一起的五个容器的原子部署
atomic deployments of five containers that
are all bundled together, that's built

65
00:03:56.650 --> 00:04:02.030
而 Docker 并不一定会有 " 药 " 的概念，对吧 ?
into rocket whereas Docker doesn't
necessarily have a concept of pods, right?

66
00:04:02.030 --> 00:04:04.963
所以如果你有这个想法，那么火箭是适合你的，
So if you have that idea,
then rocket's a good fit for you,

67
00:04:04.963 --> 00:04:06.489
它也建在 CoreOS里
it's also built into CoreOS,

68
00:04:06.489 --> 00:04:10.437
所以如果你有兴趣的话，在 CoreOS 里，火箭是很适合的。
so if you're interested in that, in
CoreOS, then rockets a good fit for that.

69
00:04:12.578 --> 00:04:16.033
好吧我们讨论了库珀内特是一个编排系统
Okay, and so we talked about Kupernetes
which is an orchestration system,

70
00:04:16.033 --> 00:04:20.649
这就是 Kubernetes 的问题这是一个容器编排系统
that's what you would call Kupernetes,
it's a container orchestration system.

71
00:04:20.649 --> 00:04:25.009
还有几个您可能也想知道的， Docker Swarm so
There are a few others that you might
wanna be aware of as well, Docker Swarm so

72
00:04:25.009 --> 00:04:26.189
内置 Docker。
built into Docker.

73
00:04:26.189 --> 00:04:30.560
事实上如果你来这里关闭这个小镇
In fact, if you come in here
to close this close this town.

74
00:04:33.360 --> 00:04:40.259
如果你说码头这么热的话这里就有一堆东西
If you say docker swarm like that,
there's a whole bunch of stuff in here

75
00:04:40.259 --> 00:04:44.540
如何启动 swarms 和 swarms 与 Kubernetes 差不多，对吧 ?
about how to initiate swarms and swarms
are comparable to Kubernetes, right?

76
00:04:44.540 --> 00:04:47.269
您可以管理多个容器，
You can have multiple
containers being managed,

77
00:04:47.269 --> 00:04:51.420
我喜欢他们是如何使用 Docker Swarm 管理的。
I like how they're managed
with Docker Swarm.

78
00:04:51.420 --> 00:04:54.790
因此，如果您对 Kubernetes 感兴趣，那么我链接到他们的文档
So I link to their to their documentation
if you're interested in doing Kubernetes

79
00:04:54.790 --> 00:04:59.149
就像东西，但是群热，更简单，更简单，
like things, but with swarm,
it's simpler, it's simpler,

80
00:04:59.149 --> 00:05:00.720
它的威力比库伯内特还小
it's less powerful than Kubernetes.

81
00:05:00.720 --> 00:05:03.920
所以我也很想教这个，因为我觉得这样更好
So it's actually very tempted to teach
that too because I think it's a better

82
00:05:03.920 --> 00:05:07.410
但问题是人们想知道库伯内特对吧
way to get started with it but the thing
is people wanna know Kubernetes, right?

83
00:05:07.410 --> 00:05:09.279
每个人都这么说每个人都很感兴趣
That's what everyone's saying,
everyone's very interested and

84
00:05:09.279 --> 00:05:13.519
就像是决定走那条路但如果你有兴趣的话
it's like decided to go that path but
if you're interested in,

85
00:05:13.519 --> 00:05:17.100
我肯定会建议你选 " 码头工人 " 的表格
I would definitely suggest
you pick on Dockers form.

86
00:05:17.100 --> 00:05:20.490
在另一边是 Apache Mesos
On other side of that is Apache Mesos and

87
00:05:20.490 --> 00:05:24.709
Mesos 超级难我甚至都无法开始
Mesos is super hard,
like I can't even get it started and

88
00:05:24.709 --> 00:05:27.350
我甚至不开玩笑我也不知道
I'm not even joking and
try to get it started and I couldn't.

89
00:05:27.350 --> 00:05:31.069
所以它比库伯内特更有力量
So, it's even more powerful
perhaps than Kubernetes,

90
00:05:31.069 --> 00:05:34.709
我不知道我能不能备份它但它和库伯内特一样强大
I don't know if I can back it up but it's
as powerful as Kubernetes at least, but

91
00:05:34.709 --> 00:05:38.129
那是很难用的
it's just very difficult to use.

92
00:05:38.129 --> 00:05:41.000
他们在所谓的 " 中心圈 " 上面建了一层
They've actually built a layer on top of
the called Mesosphere which allows it

93
00:05:41.000 --> 00:05:43.409
就能变得更简单一些
to be a little bit more simple to use on.

94
00:05:43.409 --> 00:05:48.069
现在在美斯圈的上面还有一层
And now there's another layer on top of
Mesosphere and the name escapes me but

95
00:05:48.069 --> 00:05:52.290
它的层在非常难以使用的层上但它也一样
it's layers upon layers of being very
difficult to use, but it does the same

96
00:05:52.290 --> 00:05:55.879
将复杂应用程序与 Mesos 协调的地方。
thing where you can orchestrate
complex applications with Mesos.

97
00:05:57.259 --> 00:05:59.459
Mesos 是从推特上出来的对吧
Mesos came out of Twitter, right?

98
00:05:59.459 --> 00:06:03.399
现在，所有 Twitter 的基础设施都与 Mesos建立了
So now, all of Twitter's
infrastructure is built with Mesos,

99
00:06:03.399 --> 00:06:06.209
就像谷歌发明了 Kubernetes
whereas like Google invented Kubernetes.

100
00:06:06.209 --> 00:06:10.579
所以他们有一个叫做 Borg 的系统
So they have a system called Borg and
they kind of export that architecture and

101
00:06:10.579 --> 00:06:11.839
变成了库伯内特
that became Kubernetes.

102
00:06:13.060 --> 00:06:14.959
在谷歌内部，他们仍然使用 Borg，
Internally inside of Google,
they still use Borg,

103
00:06:14.959 --> 00:06:16.300
不过以防你在想
though, just in case you're wondering.

104
00:06:18.879 --> 00:06:22.970
我想梅索斯是在伯克利发明的
So I guess Mesos was
invented at Berkeley and

105
00:06:22.970 --> 00:06:26.420
然后推特通过了我认为这是更准确的方法
then Twitter adopted it I think that's
more accurate way of putting it.

106
00:06:26.420 --> 00:06:31.324
现场的新人是哈希科普流浪者，我提到你们很多人知道，
The newcomer on the scene is a Hashicorp
Nomad, I mentioned many of you know,

107
00:06:31.324 --> 00:06:36.903
Hasicorp，他们做了 Vagrant，他们做了 Terraform ，他们做了控制台。
Hashicorp, they did Vagrant,
they did Terraform, they did console.

108
00:06:36.903 --> 00:06:40.500
他们做了很多 DevOps 工程师非常喜欢的工具
They do a lot of tools that DevOps
engineers really quite like,

109
00:06:40.500 --> 00:06:45.409
我自己也包括，我认为哈希科普是一家伟大的公司，做的很棒。
myself included, I think Hashicorp is
a great company doing great stuff.

110
00:06:45.409 --> 00:06:49.449
所以他们最近和流浪者和流浪者
And so they have recently come
out with Nomad and Nomad is

111
00:06:49.449 --> 00:06:52.600
Kubernetes 对你做了很多事
much more limited than Kubernetes,
Kubernetes does a lot of stuff for you,

112
00:06:52.600 --> 00:06:55.879
比如负载平衡和其他的东西对吧
like load balancing and
a whole bunch of other stuff, right?

113
00:06:55.879 --> 00:06:58.879
它把盒子里的一切都做了
It does everything out of the box,
it's meant to be the kitchen sink of

114
00:06:58.879 --> 00:07:04.459
编排工具， Nomad 只是编排部分，不是其他内容。
orchestration tools, Nomad is just the
orchestration part and it is nothing else.

115
00:07:05.680 --> 00:07:08.930
那么，如果你进入这个，就像这个 Unix 的方法，
So, if you're into that, kind of,
that Unix methodology of, like,

116
00:07:08.930 --> 00:07:10.740
这个工具做一件事它做得非常好
this tool does one thing, and
it does it super well, and

117
00:07:10.740 --> 00:07:14.180
没别的事了诺马很可能是你要找的
it is literally nothing else, Normad
is probably what you're looking for.

118
00:07:15.610 --> 00:07:18.519
所以它的意思是要用 Terraform 之类的东西来配对
So, it's meant to pair with things,
like, Terraform, and

119
00:07:18.519 --> 00:07:22.360
控制台和保险库文件及其各种不同的工具。
Console, and Vault and all their
various different tools together.

120
00:07:22.360 --> 00:07:25.250
比如说，我们不把库伯内特作为一个秘密的管理，对吗 ?
Like, for example, we didn't talk about
Kubernetes as a secret management, right?

121
00:07:25.250 --> 00:07:28.019
这里有一个秘密管理工具
There's a secret management
tool built into Kubernetes,

122
00:07:28.019 --> 00:07:31.689
它不是被提名为 Nomad他们有一个单独的产品名叫 Hasicorp Vault
it's not built into Nomad, they have
a separate product called Hashicorp Vault,

123
00:07:31.689 --> 00:07:33.829
这就是把它和流浪者配对的意思
and that's meant to pair
it together with Nomad.

124
00:07:35.519 --> 00:07:38.759
所以，看看这个，人们都喜欢这样
So, check that as well,
people are liking it so

125
00:07:38.759 --> 00:07:43.555
我只能这么说但我喜欢和相信哈希科普
that's all I really can say about that but
I like and trust Hashicorp.

126
00:07:45.649 --> 00:07:49.363
我们没有真正谈论的事情是什么是主人
Something that we didn't really talk
a ton about is what is the host,

127
00:07:49.363 --> 00:07:53.170
您的服务器在生产中的运行情况，对吗 ?
what is running your servers
in production, right?

128
00:07:53.170 --> 00:07:56.980
有时你只是把你的容器给 Azure 然后说，嘿， Azure，
Now sometimes you're just giving your
containers to Azure and say, hey, Azure,

129
00:07:56.980 --> 00:07:58.750
给我执行这个吧
execute this for me, right?

130
00:07:58.750 --> 00:08:01.470
在这种情况下你不关心的是什么
In which case you don't care
about what's running it because

131
00:08:01.470 --> 00:08:03.810
云供应商正在选择它而不选择您。
the cloud provider is choosing it and
not you.

132
00:08:03.810 --> 00:08:08.230
但如果你正在运行自己的 VM 并且 VM正在执行您的容器，
But if you're running your own VM's and
your VM's are executing your containers,

133
00:08:08.230 --> 00:08:11.228
你得选择主机操作系统是什么
you'd have to choose what
the host operating system is.

134
00:08:12.848 --> 00:08:15.899
所以，有一个叫做 CoreOS 容器 Linux。
So, there's one called
CoreOS Container Linux.

135
00:08:15.899 --> 00:08:18.029
这是或者有人称它为 CoreOS
This is, or people just call it CoreOS,

136
00:08:18.029 --> 00:08:20.480
他们不区分 Linux 的不同但
they don't separate out
the Container Linux is different but

137
00:08:20.480 --> 00:08:25.350
它实际上被称为 " 容器 Linux " ，由 CoreOS制作。
it actually technically is called
Container Linux and is made by CoreOS.

138
00:08:25.350 --> 00:08:28.500
它是一个最小的 Linux 操作系统主机，是最受欢迎的
So it's a minimal Linux OS host,
it's one of the most popular ones for

139
00:08:28.500 --> 00:08:32.250
而且它刚装了一堆工具让它很简单
sure and it just shipped with a bunch
of tools that make it very simple

140
00:08:32.250 --> 00:08:35.847
来开始使用容器所以这是非常受欢迎的
to get started with containers so
that's a very popular one.

141
00:08:35.847 --> 00:08:39.250
我喜欢 RancherOS，那天开始玩，
I like RancherOS,
I started playing with the other day and

142
00:08:39.250 --> 00:08:44.789
只是一个很奇怪的操作系统很有趣
it's just a It's a very strange
operating system in a fun way, that

143
00:08:44.789 --> 00:08:49.190
通常你就像像 PID1 一样的巴什一样，就像第一个执行的事情，
normally you have like bashes like the
PID1, like the first thing that execute,

144
00:08:49.190 --> 00:08:54.519
Ranchero 都是由 Docker 来执行的，一切都是一个容器。
with Ranchero is everything is executed
by Docker, everything is a container.

145
00:08:54.519 --> 00:08:59.429
因此，如果在 Rancher 中执行任何操作，那么将执行以下操作 :
So if you execute anything within Rancher,
it's Docker that's doing the execution of

146
00:08:59.429 --> 00:09:04.299
所以每个过程都是一个容器，真的很有趣。
it so every single process is a container,
which is really, really fun.

147
00:09:04.299 --> 00:09:07.240
所以，一定要给它一次机会。
So, definitely give it a shot.

148
00:09:07.240 --> 00:09:10.615
有一个叫 Ubuntu，我想我们都听说过，对吧 ?
There's one called Ubuntu,
I think we've all heard of this, right?

149
00:09:10.615 --> 00:09:16.220
Ubuntu 是很好的执行容器，我觉得他们有一个项目
Ubuntu is really great executing
containers, I think they have a project

150
00:09:17.779 --> 00:09:21.039
它的意思是，它们就像它的一个特定的分布。
that actually is meant, they have
like a specific distribution of it.

151
00:09:21.039 --> 00:09:23.870
我记不起这叫 " 蛇"
I can't remember it's called a Snappy,

152
00:09:23.870 --> 00:09:27.370
可能被称为 " 蛇 " 之类的但你也可以用 Fedora
might be called Snappy something like
that but you can also use Fedora,

153
00:09:27.370 --> 00:09:31.279
您可以使用 DBN，其中任何一个 Linux 操作系统。
you can use DBN,
any one of those Linux Operating Systems.

154
00:09:31.279 --> 00:09:33.279
没有为容器构建，但构建为
There are not built for
containers, but they are built for

155
00:09:33.279 --> 00:09:36.210
一切都是如此但容器是一切的一部分
everything, but
containers are part of everything so

156
00:09:36.210 --> 00:09:38.350
也可以考虑用这些来思考
it's a valid choice to think
about using those as well.

157
00:09:39.490 --> 00:09:43.059
这里有一个我想叫 DC/OS
And this one out here that
I wanted to called DC/OS,

158
00:09:43.059 --> 00:09:48.139
这与库伯内特和梅索斯的关系非常密切
this is strongly associated not
with Kubernetes with Mesos.

159
00:09:48.139 --> 00:09:53.309
不过，我听说 DC/OS 也绝对可以运行 Kubernetes 。
However, I am told that DC/OS can
definitely run Kubernetes as well and

160
00:09:53.309 --> 00:09:56.320
它可以被控制，你可以让 Mesos 和 Kubernetes 彼此交谈，
it can be controlled, You can have Mesos
and Kubernetes talk to each other,

161
00:09:56.320 --> 00:10:00.191
听起来像是某种地狱我不想待在这里
which just sounds like some sort
of hell that I don't wanna be in.

162
00:10:00.191 --> 00:10:04.000
总之， DC/OS ，它代表
So anyway, DC/OS, which stands for

163
00:10:04.000 --> 00:10:09.279
分布式云操作系统，它非常独特。
Distributed Cloud Operating System,
it's very unique.

164
00:10:10.360 --> 00:10:14.820
是的，人们真的喜欢 DC/OS ，比 Mesos 更喜欢，我从没用过
Yeah, people really like DC/OS more than
they like Mesos, I've never used it so

165
00:10:14.820 --> 00:10:18.679
我不会再跟你说这事了但人们喜欢
I'm not gonna tell you anything more
about it than that, but people like it.

166
00:10:18.679 --> 00:10:21.190
然后 VMWare Photon 来自公司 VMWare
And then VMWare Photon comes
from the company VMWare

167
00:10:21.190 --> 00:10:23.779
这使得一些你可能已经在使用的工具
which makes a bunch of tools that
you probably are already using.

168
00:10:23.779 --> 00:10:26.730
他们最近提出了自己的集装箱 IOS 操作系统
They recently came up with their own
container IOS operating system called

169
00:10:26.730 --> 00:10:33.139
Photon 的意思是对他们的其他工具比如 vSphere 之类的
Photon so it's meant to mostly pair into
their other tools like vSphere and such.

170
00:10:33.139 --> 00:10:36.080
所以我觉得我们有观众的一些好的问题，
So I think we had some good
questions from the audience,

171
00:10:36.080 --> 00:10:40.769
其中一个我记得的是网上的人群，其中一个被问到的是，
one of them I remember that are from the
online crowd, one of the they asked was,

172
00:10:40.769 --> 00:10:43.269
CMD 和 Rin 之间有什么区别 ?
what's the difference between CMD and Rin?

173
00:10:43.269 --> 00:10:45.220
所以，让我们来看看这个问题。
So let's go take a look
at that really quick.

174
00:10:46.389 --> 00:10:49.470
这是我的 Docker 文件你可以看到我有 RUN
Here my Docker file,
you can see here I have RUN,

175
00:10:49.470 --> 00:10:52.490
最后我在这里有 CMD
and I have CMD down here at the end.

176
00:10:52.490 --> 00:10:57.330
其中一个是在运行时完成的，其中一个是在构建时完成的。
One of these is done at runtime and
one of them is done at build time so

177
00:10:57.330 --> 00:11:01.607
RUN，这将会在我说 Docker 构建后立即运行，对吗 ?
RUN, this is going to get run as
soon as I say Docker built, right?

178
00:11:01.607 --> 00:11:06.000
所以当你在建筑的时候要做所有的依赖性
So you're gonna do all the dependencies
installing when you're building

179
00:11:06.000 --> 00:11:11.070
容器和 CMD 就是你告诉 Docker 的地方
the container and CMD is where you're
telling Docker is like when someone

180
00:11:11.070 --> 00:11:15.649
运行此容器，当有人运行 Docker 时，运行此操作，对吗 ?
runs this container, when someone
does Docker run, Run this, right?

181
00:11:15.649 --> 00:11:18.440
这是在运行时，这是构建时间。
So this is at runtime,
this is a build time.

182
00:11:18.440 --> 00:11:23.418
您也很可能有多个 Docker Run 或
You are also very likely gonna
have multiple Docker Run or

183
00:11:23.418 --> 00:11:26.490
你可以在这里看到我在这里有三个 RUNs
you gonna have RUN and you can see
here I have three RUNs in here.

184
00:11:28.899 --> 00:11:32.350
而你最多只拥有一个 CMD
Whereas you only ever
have at most one CMD.

185
00:11:32.350 --> 00:11:34.830
>> 也可以和盖茨比建立起来
&gt;&gt; Can this be set up with Gatsby as well,

186
00:11:34.830 --> 00:11:39.789
那些有 VS 码延期的人帮我安排好了吗
and those having a VS Code extension
help set this up pretty easy?

187
00:11:39.789 --> 00:11:40.950
这是问题。
This is the question.

188
00:11:40.950 --> 00:11:45.080
>> 当然，就像我们以前雨果一样，你能和盖茨比一起做吗 ?
&gt;&gt; Sure, like we did Hugo before,
could you do this with Gatsby?

189
00:11:45.080 --> 00:11:47.289
答案是绝对的，对吧 ?
And the answer is absolutely, right?

190
00:11:47.289 --> 00:11:48.519
所以如果你像盖茨比项目那样
So if you had like a Gatsby project and

191
00:11:48.519 --> 00:11:51.190
你和一群不知道如何使用 Node 和 NPM 的人合作
you're working with a bunch of people that
didn't know how to use Node and NPM and

192
00:11:51.190 --> 00:11:53.779
所有这些东西你都可以把它装在一个容器里
all that kind of stuff, you could
totally wrap this up in a container.

193
00:11:53.779 --> 00:11:56.309
它也能起作用我的猜测可能是
It would work just as well,
my guess is that there's probably,

194
00:11:56.309 --> 00:12:00.065
已由 Gatsby 容器或 Docker 执行完全相同的操作。
already a Gatsby container or
Docker does the exact same thing.

195
00:12:00.065 --> 00:12:04.294
所以，当然，你绝对可以做到这一点。
So yeah, for sure,
you can definitely do that.

196
00:12:04.294 --> 00:12:07.235
我不太喜欢这里的东西，卡兹提到的 VS .
Something I didn't really get into as much
in here, cuz the person mentioned VS Code

197
00:12:07.235 --> 00:12:12.654
是 VS 代码的 Docker 扩展。
is the Docker extension for VS Code.

198
00:12:12.654 --> 00:12:14.674
你可以在这里看到我的所有容器
You can see here that it shows
me all of my containers or

199
00:12:14.674 --> 00:12:17.384
事实上我可以在这里看到我的建造商集装箱实际上还在运行，
in fact, I can see here that my builder
container is actually still running,

200
00:12:17.384 --> 00:12:20.857
我只能说你知道吗我不干了
and I can just say, you know what,
I'm done with this, stop and

201
00:12:20.857 --> 00:12:24.169
就像这样把我的容器停下来
it will just stop my container for
me, just like that.

202
00:12:25.220 --> 00:12:29.447
在这里我可以跑来跑，我可以拉集装箱，我的所有照片都是
And here I can come here and run, I can
pull containers, here's all my images that

203
00:12:29.447 --> 00:12:33.673
我拉了我能看到的各种高山，我有各种
I've pulled where I can see that I have
various versions of alpine, I have various

204
00:12:33.673 --> 00:12:37.899
节点应用程序的版本，构建器， codesmith ，这是我刚才构建的
versions of node app, builder, codesmith
that's one that I built awhile ago for

205
00:12:37.899 --> 00:12:40.312
我们的好朋友会被判刑的
our good friend, will sentence, actually.

206
00:12:41.875 --> 00:12:44.610
所以这也是值得查的
So, this is something worth
checking out as well so

207
00:12:44.610 --> 00:12:48.570
你可以看到我也和 Azure 登记处有联系，那是真的吗 ?
you can see I'm also connected to
an Azure registry, is that true?

208
00:12:48.570 --> 00:12:52.110
否，我要登录，但您可以将其连接到 Azure ，您可以将其连接到
No, I would have to sign in but you can
connect it to Azure, you can connect it to

209
00:12:53.659 --> 00:12:58.059
谷歌或者 GitHub ，或者所有这些东西。
Google, or GitHub, or
all these things as well, yeah.

210
00:12:58.059 --> 00:12:58.629
>> 另一个问题，
&gt;&gt; Another question,

211
00:12:58.629 --> 00:13:03.519
究竟怎样才是最有效的方法来监察货柜上的警报呢 ?
what would be the best way to monitor an
alert on containers going down at scale?

212
00:13:05.330 --> 00:13:08.129
>> 这是一个好问题，最好的监控方法是什么 ?
&gt;&gt; That is a good question,
what's the best way to monitor?

213
00:13:09.419 --> 00:13:13.019
有很多产品是给你做的，你可以用的东西
There's a lot of products that do this for
you, you can go as far as using things

214
00:13:13.019 --> 00:13:18.289
就像新遗迹一样运作良好，对容器有特殊的东西。
like New Relic which work really well and
they have specific things for containers.

215
00:13:18.289 --> 00:13:22.659
每个云提供者都有不同的监控机制，
Each of the cloud provider has various
different mechanisms for monitoring,

216
00:13:22.659 --> 00:13:28.200
就像 Azure 我们有 App Insights ，我认为它是 AWS 的云观察。
like Azure we have App Insights,
I think it's Cloud Watch for AWS.

217
00:13:28.200 --> 00:13:31.005
我不记得 GCP 的叫什么但都有自己的具体
I don't remember what GCP's is called,
but they all have their own specific

218
00:13:31.005 --> 00:13:36.048
这些咒语的咒语
incantations thereof That being said,

219
00:13:36.048 --> 00:13:40.639
可能还有其他工具可以使用 StatsD 和 NSCD之类的东西。
there are probably other tools like you
can use things like StatsD and NSCD.

220
00:13:40.639 --> 00:13:45.769
不是 NSCD 而是 StatsD 做某种综合记录
Not NSCD but rather StatsD for
doing some sort of consolidated logging,

221
00:13:45.769 --> 00:13:48.529
那里有很多不同的产品
there's a lot of different
products out there.

222
00:13:48.529 --> 00:13:52.600
我对他们中的任何一个都不熟悉
I'm not more familiar with any
one of them than the other,

223
00:13:52.600 --> 00:13:56.720
还有 Sentry ， Sentry 是个好的。
there's also Sentry,
Sentry would be a good one.

224
00:13:56.720 --> 00:14:00.889
所以老实说你所关心的
So, honestly there's not much difference
between what you would be concerned about

225
00:14:00.889 --> 00:14:05.350
与 Kubernetes 的工作相比，正常的 Web Service 正在做什么。
versus what Kubernetes is doing,
versus what a normal web service is doing.

226
00:14:05.350 --> 00:14:08.470
你会用同样的方式对待大部分的人
You're gonna treat them relatively
the same way for the most part.

227
00:14:08.470 --> 00:14:10.230
有些特殊的 Kubernetes 的东西
There's some specific Kubernetes stuff,
and

228
00:14:10.230 --> 00:14:12.259
您的云供应商将为您提供该服务。
your cloud provider will provide that for
you.

229
00:14:13.279 --> 00:14:14.909
好吧恭喜你
All right, well, congratulations.

230
00:14:14.909 --> 00:14:17.149
这是一个非常技术性的话题，
This is a deeply technical topic and

231
00:14:17.149 --> 00:14:21.669
希望你能像你学到的那样
hopefully was presented to you in such
that like you learned something about it,

232
00:14:21.669 --> 00:14:24.690
我为你创造了这个课程很有趣
I had a lot of fun creating
this course for you.

233
00:14:24.690 --> 00:14:28.259
如果你再喜欢它一个开始 GitHub 说很多帮助我
If you liked it again, a start and
GitHub says a lot helps me,

234
00:14:28.259 --> 00:14:31.820
我可以自由地告诉我文件问题和开放的隐私
feel free to Tweeted me,
file issues, open PRs.

235
00:14:31.820 --> 00:14:34.799
我昨晚已经看到有人开公关了所以我要把它合并
I already saw someone open a PR last
night so I'm gonna go merge that so

236
00:14:34.799 --> 00:14:37.450
谢谢你帮我尽最大的努力
thank you for
helping me make the best course possible.

237
00:14:37.450 --> 00:14:39.529
再次感谢 Fronend Masters 和全体船员
Thanks again to Frontend Masters and
the whole crew.

238
00:14:39.529 --> 00:14:40.479
你们都是最好的
You all are the best.

239
00:14:43.371 --> 00:14:46.703
但最终我认为集装箱对你们来说都是重要的工具
But in the end, I think containers are
gonna be important tools for all of you,

240
00:14:46.703 --> 00:14:49.179
是否写 CSS， Haskell 或 NodeJS。
whether you write CSS, Haskell, or NodeJS.

241
00:14:49.179 --> 00:14:53.149
这对每个人都有用而且我想向前看
Like it's useful to everyone,
and I think going forward,

242
00:14:53.149 --> 00:14:56.330
你会领先这条曲线的因为你走了这门课
you are gonna be ahead of that
curve because you took this course.

243
00:14:56.330 --> 00:14:59.184
所以谢谢你
So thank you.

244
00:14:59.184 --> 00:15:02.254
>> [APPLAUSE]
&gt;&gt; [APPLAUSE]
