WEBVTT

1
00:00:00.080 --> 00:00:05.964
我们现在正在运行这个容器，我在这里暴露了 3000 端口。
We are now running this container and
I've exposed Port 3,000 here.

2
00:00:05.964 --> 00:00:09.195
所以如果我们在这里运行一个容器，它就会暴露在端口 3000 上，好吗 ?
So if we run a container in here,
it will be exposed on port 3,000, okay?

3
00:00:09.195 --> 00:00:16.733
因此，我们将使用 Buildah 在此处的一个源中构建一个 Buildah 容器。
So then, we're gonna use Buildah to build
a Buildah container inside a source here.

4
00:00:16.733 --> 00:00:20.339
所以，如果你看，这有一个 Docker 文件，是我们的索引点。
So if you look, this has a Docker file,
it's our index dot js.

5
00:00:20.339 --> 00:00:23.242
如果我说猫咪指数点你可以看到
If I say cat index dot js,
you can see here,

6
00:00:23.242 --> 00:00:28.277
我们之前写了几章只是我们的节点服务好吗
it's just our node service that we
wrote a couple of chapters ago, okay?

7
00:00:29.916 --> 00:00:33.140
现在， Buildah 有一种特殊的方法来建造可以进入的容器。
Now Buildah has a particular way of
building containers that you can go in.

8
00:00:33.140 --> 00:00:35.560
这是一种以交互方式构建的构建。
It's kind of built to
be built interactively.

9
00:00:35.560 --> 00:00:38.520
所以不要有 Docker 文件你就会说
So rather than having a Docker file,
you go and you say,

10
00:00:38.520 --> 00:00:41.479
好了我们从这儿开始然后去集装箱
okay, we're gonna start from here and
then do this to the container.

11
00:00:41.479 --> 00:00:43.539
你以交互方式直接执行命令行。
And you do it just with
the command line interactively.

12
00:00:43.539 --> 00:00:46.420
这是一种制造容器的有趣方法。
It's kind of a fun way
to build containers.

13
00:00:46.420 --> 00:00:49.939
我们不会这么做因为要花很多时间
We're not gonna be doing that because
it would take a bunch of time.

14
00:00:49.939 --> 00:00:53.030
如果你有兴趣做 Buildah，我会让你去做的。
And I'll leave you to do that if
you're interested in doing Buildah.

15
00:00:53.030 --> 00:00:54.799
这只是把你介绍给你
This is more just to introduce you to it.

16
00:00:55.859 --> 00:00:58.942
我要做的是我要说的是 buildah
What I'm gonna do instead
is I'm gonna say buildah.

17
00:01:01.857 --> 00:01:07.686
然后，您可以使用 -docker-file 构建。
And then,
you can say build-using -docker-file.

18
00:01:10.079 --> 00:01:13.780
所以 Buildah 知道如何读取 Docker 文件，这很酷，对吧 ?
So Buildah knows how to read Docker files,
which is pretty cool, right?

19
00:01:13.780 --> 00:01:17.245
或者如果您不想输入 build - using -dockerfile，
Or if you don't wanna type
build-using-dockerfile,

20
00:01:17.245 --> 00:01:20.890
它们缩短了到 Bud ， build-using -dockerfile。
they shortened that to bud,
build-using-dockerfile.

21
00:01:20.890 --> 00:01:23.186
您告诉它该文件，即点斜杠 Dockerfile。
You tell it the file,
which is dot slash Dockerfile.

22
00:01:24.799 --> 00:01:30.093
你会给它一个标签就像你和 Docker一样
And you're gonna give it a tag
just like you would with Docker.

23
00:01:30.093 --> 00:01:33.554
你会说我的 app - app -buildah。
And you're gonna say my-app-buildah.

24
00:01:35.076 --> 00:01:37.402
不管你想做什么
Whatever you wanna tag it,
and then period.

25
00:01:42.103 --> 00:01:45.340
所以，从那里，它将会去安装所有你需要的东西。
So from there, it's gonna go and install
all the necessary things that you need.

26
00:01:45.340 --> 00:01:46.665
它会把它们从 Docker 集线器中拿走
It's gonna go grab them off of Docker hub.

27
00:01:51.235 --> 00:01:52.567
我不知道为什么这么闪
I don't know why it's flashing so much.

28
00:01:57.016 --> 00:02:00.219
因此，这将需要第二个 cuz ，这不会从 Docker 高速缓存中提取，对吗 ?
So this will take a second cuz this is not
gonna pull from the Docker cache, right?

29
00:02:00.219 --> 00:02:01.739
它是一个产品，而不是 Docker。
Cuz this is a product than Docker.

30
00:02:03.049 --> 00:02:05.379
所以下载的节点有 12个
So that downloaded node 12-stretch.

31
00:02:05.379 --> 00:02:07.637
你也可以把这个更改为节点 alpine ，会没事的
You could also change this to node alpine,
it'd be totally fine and

32
00:02:07.637 --> 00:02:09.156
下载的时间会少一些
it would take a little
less time to download.

33
00:02:12.489 --> 00:02:17.372
这件作品将会被片段和构建我们的 Docker 文件
And this is gonna go piece by piece and
build our Docker file, or

34
00:02:17.372 --> 00:02:20.515
使用 Docker 文件构建容器。
build a container with our Docker file.

35
00:02:24.915 --> 00:02:27.650
你可以看到，我们的 npm 安装在那里。
So you can see there,
it's running our npm install there.

36
00:02:29.579 --> 00:02:30.808
它会运行 npm 的
It's gonna run npm ci.

37
00:02:36.377 --> 00:02:38.901
复制节点目录。
Copy our node directory over.

38
00:02:42.447 --> 00:02:43.259
然后你就可以了
And there you go.

39
00:02:43.259 --> 00:02:46.264
我们使用 Docker 文件成功构建了 Buildah 容器。
We successfully built a Buildah
container using a Docker file.

40
00:02:49.718 --> 00:02:52.699
我们来做个 buildah 检查吧。
So let's do a buildah inspect.

41
00:02:54.069 --> 00:02:56.277
我叫什么叫我 - app-app -buildah?
What did I call,
did I call it my-app-buildah?

42
00:02:58.140 --> 00:02:58.770
我想我知道了
I think I did.

43
00:03:01.262 --> 00:03:02.300
同一件事
Same thing here.

44
00:03:02.300 --> 00:03:04.120
你可以看到它所做的各种事情。
You can see all the various things it did.

45
00:03:04.120 --> 00:03:07.193
你可以看到它所做的所有层，等等。
You can see all the layers that it did,
so on and so forth.

46
00:03:13.715 --> 00:03:14.215
好吗 ?
Okay?

47
00:03:26.058 --> 00:03:31.579
因此， Buildah 可以做的事情与波德曼可以做的事有一些重叠。
So there is some overlap between what
Buildah can do and what do Podman can do.

48
00:03:31.579 --> 00:03:35.819
不像你想象的那么干净
It's not as clean cut as
you might think it is.

49
00:03:35.819 --> 00:03:39.673
实际上，您也可以使用 Buildah 来运行容器，但是
You can actually use Buildah
to run containers as well, but

50
00:03:39.673 --> 00:03:44.847
您可以更多地使用 Docker 来运行一个命令，然后完成场景的类型。
you use it more to do the Docker run one
command and then finish kind of scenario.

51
00:03:44.847 --> 00:03:49.081
Podman 更希望运行 Web 服务器，并希望您管理
Podman is more for I wanna run a web
server and I want you to manage this for

52
00:03:49.081 --> 00:03:50.060
我，对吧 ?
me, right?

53
00:03:50.060 --> 00:03:54.670
而 Buildah 可以说，嘿，用容器做一件事，然后完成。
Whereas Buildah can say, hey, do a thing
with a container and then finish.

54
00:03:54.670 --> 00:03:58.099
所以他们在 Buildah 和 Podman之间有点不同
So they kinda separate that out
between Buildah and Podman.

55
00:03:58.099 --> 00:04:03.362
所以我们能做的就是
So what we could do here is we can say

56
00:04:03.362 --> 00:04:09.795
buildah 运行破折号网主机，我的应用程序。
buildah run dash dash net host, my app.

57
00:04:09.795 --> 00:04:11.336
我得先做这件事
I have to do that thing first.

58
00:04:11.336 --> 00:04:12.625
你必须这么做抱歉
You have to do this, sorry.

59
00:04:12.625 --> 00:04:18.769
我的 app - app -buildah ，就像这样。
Buildah from my-app-buildah, like that.

60
00:04:20.345 --> 00:04:23.600
您必须首先启动容器。
Cuz you have to get
the container started first.

61
00:04:23.600 --> 00:04:24.959
所以现在我开始了
So now, I have it started.

62
00:04:26.259 --> 00:04:27.529
我能做个建筑吗
Can I do like a buildah ps?

63
00:04:27.529 --> 00:04:28.930
它知道怎么做吗
Does it know how to do that?

64
00:04:28.930 --> 00:04:29.761
确实有 好的
It does.
Okay, so

65
00:04:29.761 --> 00:04:31.427
我可以看到这里是我开始的
I can see here that I've started this.

66
00:04:33.153 --> 00:04:35.319
我有，它是在后台运行的。
And I have,
it's running in the background.

67
00:04:35.319 --> 00:04:39.129
我的 app - app-buildah - 工作容器。
So the my-app-buildah-working-container.

68
00:04:39.129 --> 00:04:43.401
这是图片，我的 app - buildah ，然后工作容器的实际情况
So this is the image, my-app-buildah,
and then working-container's actually

69
00:04:43.401 --> 00:04:46.745
在此时刻执行的容器。
the executing container
at this moment in time.

70
00:04:46.745 --> 00:04:51.550
现在我能做的是我能说
And then now, what I can do is I can say,

71
00:04:51.550 --> 00:04:57.838
buildah 运行破折号网络主机 my-app-buildah。
buildah run dash dash
net host my-app-buildah.

72
00:04:57.838 --> 00:05:00.394
或者我只是把它贴在上面
Or I just paste that in
there from up there.

73
00:05:00.394 --> 00:05:03.192
我的 app - app-buildah - 工作容器，它就是这样叫它的。
my-app-buildah-working-container, which
is what it called it right there.

74
00:05:07.117 --> 00:05:10.721
然后我就能穿过破折号的太空堡垒
And then,
I can pass into it dash dash space bash.

75
00:05:10.721 --> 00:05:13.779
这将会对我的容器执行这一步骤
And this will execute that against the
container which is going to drop me into

76
00:05:13.779 --> 00:05:14.874
执行容器。
the executing container.

77
00:05:17.214 --> 00:05:22.680
那么现在我就在一个容器里面的一个容器里面，对吧 ?
So now, I'm inside of a container
which is inside of a container, right?

78
00:05:22.680 --> 00:05:26.636
所以我就在一个内置了 Buildah 的 Docker 容器里面
So I'm inside of a Docker container which
had Buildah installed, and then I used

79
00:05:26.636 --> 00:05:30.920
用于执行在同一上下文中运行的容器。
that to execute the container which is
running inside of the same context.

80
00:05:30.920 --> 00:05:33.456
所以，现在，如果我说猫的问题，我们希望看到什么 ?
So now, if I say cat/etc/issue,
what do we expect to see?

81
00:05:33.456 --> 00:05:38.369
Debian ，因为这就是我们用它建造的容器。
Debian, because that's what
we built our container with.

82
00:05:40.038 --> 00:05:42.848
现在，你可以看到我在这里，我可以说点节点索引点，
And now, you can see I'm here,
I could say node index dot js, and

83
00:05:42.848 --> 00:05:44.449
一切都会好的
everything will execute just fine.

84
00:05:46.733 --> 00:05:47.483
会很棒的
And it'll be great.

85
00:05:47.483 --> 00:05:50.689
所以别这样了我们就离开这里
So let's stop that,
we'll exit out of here.

86
00:05:52.439 --> 00:05:56.161
我可以说 " buildah " ，它是否停止了 ?
And I can say buildah, is it stop?

87
00:05:57.480 --> 00:05:58.898
[ INAUDIBLE] 我不记得了
[INAUDIBLE] I don't remember.

88
00:06:04.286 --> 00:06:06.065
杀了吧
Kill, maybe?

89
00:06:08.297 --> 00:06:08.923
除去。
Remove.

90
00:06:13.687 --> 00:06:19.029
是的，我可以说， buildah rm 是我的 - app-buildah - 工作容器。
Yep, so I can say buildah rm
my-app-buildah-working-container.

91
00:06:19.029 --> 00:06:22.310
这样就能让集装箱从运行中关闭。
And that'll go and actually shut
down the container from running.

92
00:06:22.310 --> 00:06:25.089
这就是 Buildah 能为你做的
So that's kind of what Buildah can do for
you.

93
00:06:25.089 --> 00:06:27.069
就像我说的波德曼有一些重叠
And like I said,
there's some overlap with Podman,

94
00:06:27.069 --> 00:06:30.290
cuz Podman 用于执行容器。
cuz Podman is built for
executing containers.

95
00:06:30.290 --> 00:06:34.620
Buildah更多的是为了建造容器而建造的。
Buildah's more, as it may sound,
built for building containers.

96
00:06:34.620 --> 00:06:36.564
但在他们能做的事情上也有一些重叠。
But there's some overlap
in what they can do.
