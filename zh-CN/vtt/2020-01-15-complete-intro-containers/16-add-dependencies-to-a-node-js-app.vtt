WEBVTT

1
00:00:00.240 --> 00:00:06.184
让我们一起执行一个更为复杂的 Node.js 应用程序，
Let's together do a more
Complicated Node.js Application so,

2
00:00:06.184 --> 00:00:12.891
我们就是喜欢 " Hello World " 或 " 我的上帝" ( lol of Node.js ) ，对吧 ?
we just did like the Hello World or
the my God, lol of Node.js, right?

3
00:00:12.891 --> 00:00:16.074
就是说不是很现实的应用是一个
Which is to say is not a very
realistic application it's one

4
00:00:16.074 --> 00:00:20.341
被执行的文件，以及我们如何进入更复杂的措施
file that's executed and, kind of where
we get into more complicated measures

5
00:00:20.341 --> 00:00:24.753
对于 " 节点 " 应用程序，我们必须开始担心 " 依赖性 " ，对吗 ?
with Node applications is we have to
start worrying about Dependencies, right?

6
00:00:24.753 --> 00:00:28.724
这实际上是我们在混合中 Docker 的一半原因
This is actually kind of like half the
reason we have Docker in the mix at all is

7
00:00:28.724 --> 00:00:31.780
我们可以冻结和控制我们的依赖性
that we can freeze and
control our dependencies, right?

8
00:00:31.780 --> 00:00:36.793
就像大多数人知道的，节点有这个叫做 MPM 的东西， MPM 不代表
So as most people know, node has this
thing called MPM, MPM does not stand for

9
00:00:36.793 --> 00:00:40.665
节点软件包管理器，但它是节点软件包管理器。
node package manager, but
it is the node package manager.

10
00:00:40.665 --> 00:00:45.098
所以我们要做的就是把这个文件留在这里
So we're going to do is I have this file
here inside of the more complicated no JS

11
00:00:45.098 --> 00:00:49.329
我们要做的就是重新开始我们的项目
app, what we're gonna do is we're gonna
go over to our project again, and

12
00:00:49.329 --> 00:00:52.984
我要打开我的侧边栏我要说新文件夹
I'm gonna open my sidebar here,
and I'm gonna say New Folder.

13
00:00:52.984 --> 00:01:01.268
这个会被称为更复杂的 nodejs-app，好吗 ?
And this one's gonna be called
more-complicated-nodejs-app, okay?

14
00:01:01.268 --> 00:01:04.905
在这里我要再创造一个新的文件
Inside of here,
I'm gonna create a new file, this again,

15
00:01:04.905 --> 00:01:10.099
将被称为 index.js ，我将会复制这里的所有内容。
will be called index.js, and I'm going
to be copying everything that's in here.

16
00:01:10.099 --> 00:01:14.364
你可以在这里看到我越来越多的人
Which you can see here I more or
less took from the hapi-pino example,

17
00:01:14.364 --> 00:01:18.777
hapi.js 是最受欢迎的 Node.js 服务器端框架之一，
hapi.js is one of the most popular
Node.js server-side frameworks,

18
00:01:18.777 --> 00:01:23.430
就像 Express，我挺喜欢的，我的好友艾兰 - 哈默写的。
it's like Express, I quite like it,
my good friend Eran Hammer writes it.

19
00:01:25.811 --> 00:01:30.203
这也做了同样的事情，它有一些记录功能，
And this does relatively the same thing,
it has some logging functionality,

20
00:01:30.203 --> 00:01:34.210
这才是暂时的，还是比较快乐的皮诺。
which is what or it will rather
momentarily or does rather hapi-pino.

21
00:01:34.210 --> 00:01:39.930
你可以看到它从快乐和快乐中下载
So you can see here it
downloads from hapi/happy and

22
00:01:39.930 --> 00:01:46.960
下载 hapi-pino ，它是一种用于幸福 js的测井工具。
downloads hapi-pino which is
a logging tool for happiness js.

23
00:01:46.960 --> 00:01:52.030
正如你所看到的，这现在有两个依赖性，所以我们要做的是
So as you can see, this has now two
dependencies, so what we're gonna do is

24
00:01:52.030 --> 00:01:57.524
我们要进入我们的指挥线我要关闭我的侧边栏
we're gonna come into our command line
here, I'm gonna close my sidebar here.

25
00:02:01.715 --> 00:02:04.132
好吧我在哪儿
All right, so, where am I?

26
00:02:04.132 --> 00:02:07.438
我在 nodejs ，所以我要直接
I am in nodejs so
I'm gonna go up a directly and

27
00:02:07.438 --> 00:02:12.572
在更复杂的节点应用中我会说 npm， init-y ，所以
into more complicated node app,
and I'm gonna say npm, init-y, so

28
00:02:12.572 --> 00:02:17.966
如果您的主机上未安装 nodejs ，那么首先
first of all if you don't have nodejs
installed like on your host computer

29
00:02:17.966 --> 00:02:22.938
你可能要去做这件事很容易安装
you probably will have to go do that,
it's pretty easy to install.

30
00:02:22.938 --> 00:02:26.230
我知道所以我要在晚上说
I do, so I'm gonna say npm init- y,

31
00:02:26.230 --> 00:02:31.242
我建议不要在节点 10 或节点 12上使用。
I would suggest being on
neither node 10 or node 12.

32
00:02:31.242 --> 00:02:34.218
我现在就在 10 号节点上，但这很容易就能有 12 个。
I'm on node 10 right now, but
this would work easily just as well as 12.

33
00:02:36.644 --> 00:02:41.473
好的，节点 npm- y 仅为您生成一个 package.json ，并且
Okay, and node npm- y just generates
a package.json for you, and

34
00:02:41.473 --> 00:02:45.218
意思就是不要问我有什么问题
the- y means don't ask me
any questions just do it.

35
00:02:45.218 --> 00:02:49.490
所以现在如果你看这里
So now if you look in here it say,

36
00:02:49.490 --> 00:02:55.353
我在那里有 package.json ，对吧 ?
I have package.json right there, right?

37
00:02:55.353 --> 00:03:00.240
我会说 mpm 安装我会说 @happy/ 快乐
And I'm going to say mpm install,
and I'm gonna say @happy/ happy,

38
00:03:00.240 --> 00:03:02.206
像这样快乐的皮诺
and happy-pino like that.

39
00:03:06.336 --> 00:03:10.570
人们经常问我你不需要 --省省吧，
People frequently ask me like don't you
need --save that's not required anymore,

40
00:03:10.570 --> 00:03:12.605
NodeJS 刚刚自动执行该操作。
NodeJS just just automatically does it.

41
00:03:12.605 --> 00:03:16.349
看其实有一面旗帜不保存就是应该这样
See actually there's a flag to not
save which is how it should have been

42
00:03:16.349 --> 00:03:18.137
第一个地方就这样
in the first place, there we go.

43
00:03:18.137 --> 00:03:25.513
我们安装了 73 个软件包，现在你可以看到我有一个节点模块目录，
We installed 73 packages, And you can see
now that I have a node modules directory,

44
00:03:25.513 --> 00:03:30.674
我有个 package.JSON package.JSON，您也可以完全使用纱线来完成此操作，
I have a package.JSON package.JSON, you
could totally do this with yarn as well,

45
00:03:30.674 --> 00:03:34.542
我对他们的工作都没有意见。
I have no opinion on the matter
they both do the job adequately.

46
00:03:34.542 --> 00:03:37.365
我只是用 MPM 是因为它很棒而且已经安装好了
I just use MPM because it's great and
it's already installed and

47
00:03:37.365 --> 00:03:38.912
我不需要为它做任何事
I don't have to do anything for it.

48
00:03:41.938 --> 00:03:46.778
好吧我现在有个计划如果你想看看
All right, so now I have an entire
project if you wanna just see what if it

49
00:03:46.778 --> 00:03:51.637
如果节点索引为 js ，那么您可以看到它现在正在运行。
works if the node index-js,
you can see there that it's now running.

50
00:03:51.637 --> 00:03:56.637
如果我点击此处的链接种类
If I click here on this link
kind of opens here, and

51
00:03:56.637 --> 00:04:04.748
你可以在这里看到它回来的有点 json 只是一个成功的真假
you can see here that it's returning
a bit of json that's just a success:true.

52
00:04:04.748 --> 00:04:08.451
然后我就会把你的反应
And then I'll put a bunch of information
about what the response was and

53
00:04:08.451 --> 00:04:10.436
所有这些东西的要求
the request, all that kind of stuff.

54
00:04:10.436 --> 00:04:16.954
所以我要把它关掉然后我们就回来
So I'm gonna shut that down and
we're gonna come back over here,

55
00:04:16.954 --> 00:04:22.167
现在我们要在我们的公司内部创建一个 Docker 文件
so now we're gonna create
a Docker file inside of our

56
00:04:22.167 --> 00:04:27.994
更复杂的节点应用程序，比如新的文件， Docker 文件。
more complicated node app and
say new file, Docker file.

57
00:04:27.994 --> 00:04:32.798
我们要从你想象的节点开始
We're gonna start from as you
may imagine node:12-stretch,

58
00:04:32.798 --> 00:04:36.055
你可以做拉伸或拉伸的
and you can do stretch or
stretch-slim, but

59
00:04:36.055 --> 00:04:41.478
在这一点上我们都安装了拉伸装置，所以我在这里的 Docker 扩展。
at this point we all have stretch
installed, so my Docker extension here.

60
00:04:41.478 --> 00:04:45.584
Cuz ，我为 Visual Studio 代码安装了 Docker 扩展，
Cuz I have a Docker extension
installed for Visual Studio Code which

61
00:04:45.584 --> 00:04:50.422
我建议你们全部安装，我们在微软维护它，所以我认为它是可以的。
I suggest all of you install, we maintain
it at Microsoft so I think it's okay.

62
00:04:50.422 --> 00:04:54.183
它也会为你做这些自动完成的工作。
It'll do these kind of auto
completions for you as well.

63
00:04:54.183 --> 00:04:57.968
我的意思是我不会在这个过程中过度过度
And, I mean, I'm not actually gonna go
over it too much in this course, but

64
00:04:57.968 --> 00:05:02.110
你知道的这很值得在这里探索所有这些我们所做的事情
just so you know, it is worth exploring
here, all this stuff that we're doing from

65
00:05:02.110 --> 00:05:05.326
命令行，您可以直接从 VS 代码运行。
the command line, you could
totally run directly from VS code.

66
00:05:08.007 --> 00:05:12.404
好了从那 12 号节点到那里
All right, so from node 12 stretch there,

67
00:05:12.404 --> 00:05:17.149
我要说的是和以前一样的用户节点
I'm gonna say user node
just like we did before,

68
00:05:17.149 --> 00:05:22.382
在那儿工作我们要做 /home/node/ 代码
work there and
we're gonna do /home/node/code.

69
00:05:22.382 --> 00:05:25.593
我们要做的就是要复制
And what we're going to do
is we're gonna say copy,

70
00:05:25.593 --> 00:05:28.451
-- 像我们以前一样， chown 节点冒号节点。
-- chown node colon node
like we did before.

71
00:05:28.451 --> 00:05:33.615
但我要把这个目录里的所有东西都复制到家庭/节点 / 代码中，对吧 ?
But I'm gonna say copy everything in this
directory over into home/node/code, right?

72
00:05:33.615 --> 00:05:37.901
所以就把一切都移到了容器里
So it just moves everything
over into the container, so

73
00:05:37.901 --> 00:05:44.572
这一点就意味着这里的一切都变成了这里的一切
that's what the dot does means everything
from here goes into everything over there.

74
00:05:44.572 --> 00:05:51.430
好的我想说的是 CMD["节点 "
Okay at this point I
want to say CMD["node",

75
00:05:51.430 --> 00:05:54.862
index.js "] 对吗 ?
index.js"] right?

76
00:05:54.862 --> 00:05:56.286
所以这看起来好像是一样的
So this looks relatively the same,

77
00:05:56.286 --> 00:05:58.999
我们从最后一节真正改变的就是这个
the only thing that we really changed
from the last section is this.

78
00:06:01.747 --> 00:06:05.934
所以我要结束我的工作了再次把它称为我的纸条应用
So I'm gonna close that I'm just gonna
continue calling it my note app, again,

79
00:06:05.934 --> 00:06:08.829
如果你想让他们去的话你可以给他们打个电话
you can call these different
things if you want them to,

80
00:06:08.829 --> 00:06:12.425
我不太在意所以我要再把它改写
I don't particularly care, so
I'm gonna just overwrite it again.

81
00:06:12.425 --> 00:06:18.870
所有东西都应该起作用，我应该可以，运行我的应用程序。
And everything should just work, and
I should be able to, Run my app.

82
00:06:22.653 --> 00:06:27.204
这就是工作，这很好，但那是因为我在我的工作上做了 MPM 的安装。
So this is working, and that's fine, but
that's because I did the MPM install on my

83
00:06:27.204 --> 00:06:30.413
电脑是几个问题但有一个
host computer,
it's a couple problems but there's one,

84
00:06:30.413 --> 00:06:34.992
如果您在 CI 中运行此节点，那么节点模块将不存在，对吗 ?
if you're running this in CI then the node
modules won't already be there, right?

85
00:06:34.992 --> 00:06:38.473
因为我们没有落实节点模块，这是第一个问题，
Because we don't commit our node modules,
that's the first problem,

86
00:06:38.473 --> 00:06:41.850
第二个问题是节点有本机模块的概念，是吗 ?
the second problem is node has
the concept of native modules, right?

87
00:06:41.850 --> 00:06:46.379
因此，如果我正在运行类似节点 SAS( 即本机模块 ) 的内容，那么它将写入
So if I'm running something like node SAS,
which is a native module, it's written in

88
00:06:46.379 --> 00:06:50.303
C，它不是用 JavaScript 编写的，它将为 Mac OS 构建。
C, it's not written in JavaScript,
it's going to build that for Mac OS.

89
00:06:50.303 --> 00:06:54.547
然后如果我把它复制到 Ubuntu 或 Debian ，在这个特定的情况下，
And then if I copy that into Ubuntu or
Debian, in this particular case,

90
00:06:54.547 --> 00:06:59.518
它不会起作用，对，因为 Mac OS 与 Debian不一样。
it's not going to work, right, because Mac
OS is very much not the same as Debian.

91
00:06:59.518 --> 00:07:02.605
所以我们要做的就是要在里面运行 MPM
So what we have to do is we have
to run MPM install inside of

92
00:07:02.605 --> 00:07:04.000
集装箱对吧
the container, right?

93
00:07:04.000 --> 00:07:07.175
这必须在容器内发生。
That has to happen
inside of the container.

94
00:07:07.175 --> 00:07:11.432
所以让我们先停一下然后证明我的观点
So let's go ahead and stop this,
and just to prove my point,

95
00:07:11.432 --> 00:07:14.353
如果我现在说除去 node_modules ，
if I say remove node_modules right now,

96
00:07:14.353 --> 00:07:19.129
如果我每次打字都有个镍我就会很有钱
if I had a nickel for every time I
typed this, I'd be a very rich man.

97
00:07:19.129 --> 00:07:23.697
好了如果我再做一次我就跑了
All right, so now if I build it again,
and I do run,

98
00:07:23.697 --> 00:07:29.026
就会是，我不不明白，对吧 ?
it is gonna be like,
I don't not understand this, right?

99
00:07:29.026 --> 00:07:31.658
因为它不会找到任何模块对吧
Because it's not gonna find
any of those modules, right?

100
00:07:31.658 --> 00:07:35.778
所以我们就不能依赖节点模块了，所以
So we can't depend on the node
modules actually being there, so

101
00:07:35.778 --> 00:07:40.812
我们要做的就是我们要来这里说 RUN
what we're gonna do, is we're gonna
come in here and we're gonna to say RUN,

102
00:07:40.812 --> 00:07:45.877
这将运行任何您希望其运行的任意 shell 命令，运行 npm。
this runs any sort of arbitrary shell
command that you want it to run, run npm.

103
00:07:45.877 --> 00:07:51.197
而你们中的大多数人可能想在晚上做安装，对吧 ?
And as most of you would probably
think to run npm install, right?

104
00:07:51.197 --> 00:07:56.468
我想建议一个比晚上做的更好
I'm gonna suggest one that I think
is better than npm install for

105
00:07:56.468 --> 00:07:59.884
这个， npmci ，所以晚上的 ci 其实是要
this, npmci so npm ci is actually going to

106
00:07:59.884 --> 00:08:04.882
包好包包里的东西吧
adhere to whatever is in
the package-lock.json, right?

107
00:08:04.882 --> 00:08:07.257
所以这个实际上是被锁定到非常具体的版本，
So this is actually locked down
to very specific versions,

108
00:08:07.257 --> 00:08:10.067
这就是你喜欢的自动化环境对吧
which is what you want in your like
automation environments, right?

109
00:08:10.067 --> 00:08:14.387
你想让它像所有东西一样接近
You want it to be like exactly
as close to everything as

110
00:08:14.387 --> 00:08:17.848
可能是你的速度更快
possible that you had, and it's faster.

111
00:08:17.848 --> 00:08:21.168
它忽略 MPM 安装对您和
It ignores a bunch of stuff that
MPM Install does for you and

112
00:08:21.168 --> 00:08:24.648
MPMCI 不需要这样做，它的运行速度也很快。
MPMCI doesn't need to do so,
it actually runs fast as well.

113
00:08:24.648 --> 00:08:29.055
因此，在 Docker 文件中，我将邀请您不要使用 MPM 安装，
So inside of Docker files I'm going
to invite you to not use MPM Install,

114
00:08:29.055 --> 00:08:34.039
而是用 MPMCI 来做最好的练习
use MPMCI instead,
Kind of a best practice there.

115
00:08:36.738 --> 00:08:41.542
好了如果我再回来再建
All right, so now if I come
back in here and build again,

116
00:08:43.894 --> 00:08:47.150
这个步骤要长一点，对，
This step will take a bit longer, right,

117
00:08:47.150 --> 00:08:52.940
它会穿过整个国家的国家防范机制发生了什么
cuz it's gonna go through and
all the NPM installs, what happened?

118
00:08:52.940 --> 00:08:59.153
是，这会是个问题，所以现在我们正在进入许可错误。
Yes, this would be a problem, so
now we're running into permission errors.

119
00:09:06.403 --> 00:09:11.339
所以现在的问题是它不拥有代码
So the issue now is that it doesn't
own code, you're gonna run into

120
00:09:11.339 --> 00:09:16.187
当您使用 Docker时，所有时间都将发生许可权错误，
permission errors all the time
when you're working with Docker,

121
00:09:16.187 --> 00:09:20.443
就像是为了这个前提而准备好
like just buckle up and
be prepared for for such a premise.

122
00:09:20.443 --> 00:09:27.576
所以如果我经营 Ls- lsh，我可以在这里看到，这就是
So if I run Ls- lsh,
I could see in here, That this

123
00:09:27.576 --> 00:09:32.864
特定目录由 root 用户拥有，因此当我尝试执行 npm 安装时，
particular directory is owned by root,
so when I'm trying to do npm install,

124
00:09:32.864 --> 00:09:38.409
它正在尝试更改此根目录，这是一个问题，对吗 ?
it's trying to make changes to this
root directory, that's a problem, right?

125
00:09:38.409 --> 00:09:41.774
那么我们是如何处理这个问题的呢 ?
So how do we handle this?

126
00:09:41.774 --> 00:09:45.280
你要处理的就是你要去
Well, the way that you're gonna
handle is you're gonna go instead

127
00:09:45.280 --> 00:09:49.357
在这里做这个工作的人总是会把它作为一个节点或路线。
of doing this worker right here, this is
always gonna do it as node or as route.

128
00:09:49.357 --> 00:09:52.334
我不认为你能告诉它即使是在哪里
I don't think you can tell it
necessarily even where to do it yeah,

129
00:09:52.334 --> 00:09:53.404
我不认为你能
I don't think you can.

130
00:09:53.404 --> 00:09:58.596
所以我们要做的不是说
So, what we're gonna do
instead of instead of saying,

131
00:09:58.596 --> 00:10:03.899
让我们的创意就在这里
letting that creative we're
just gonna say right here,

132
00:10:03.899 --> 00:10:07.221
运行它们的主/节点 / 代码。
run make their home/node/code.

133
00:10:07.221 --> 00:10:11.192
现在，因为这是用户节点，所以它将作为节点用户运行。
Now because this is user node right here,
it is going to run this as the node user.

134
00:10:13.481 --> 00:10:20.838
如果我再这样做现在一切都能做得到
Now, if I do it again,
Now it's gonna be able to do everything

135
00:10:20.838 --> 00:10:24.799
因为它是正确的用户现在如果我们再次运行它
that it needs to because it is the correct
user, and now if we go run this again,

136
00:10:29.885 --> 00:10:32.942
一切都应该做，因为我用出版
Everything should be working it and
because I ran with publish

137
00:10:32.942 --> 00:10:36.727
就在这里 3000 3000我们应该可以在这里打开链接
right here 3000 3000, we should be
able to go in here and open link.

138
00:10:39.750 --> 00:10:40.578
很酷吧
Very cool, right?

139
00:10:45.260 --> 00:10:48.947
好吧我想打电话给你因为这是我碰到的问题
All right, something I do wanna call out
here because it's an issue I ran into when

140
00:10:48.947 --> 00:10:52.113
我在做这个难免有一个你也要这样做
I was making this and inevitably one
of you is going to run this as well.

141
00:10:52.113 --> 00:10:56.621
注意这里而不是我绑定到 0000 的快乐
Notice here instead of
happy I bind to host 0000,

142
00:10:56.621 --> 00:11:01.931
如果我将此绑定到 localhost，那么在 100 个端点中的 99 次
if I bind this to localhost,
which 99 times out of 100 ends

143
00:11:01.931 --> 00:11:07.261
这样在语义上是一样的，这就不起作用了。
up being semantically the same like that,
this will not work.

144
00:11:07.261 --> 00:11:11.099
当您在 localhost 上运行容器时，这将不允许其转义容器。
This will not allow this to escape the
container when you run it on localhost,

145
00:11:11.099 --> 00:11:14.120
它是一个难以逃避的循环，对吧 ?
it's a hard loop back that it
cannot escape itself, right?

146
00:11:14.120 --> 00:11:17.556
所以我们要绑定到 0000 才能让你离开
So, that's why we have to bind to 0000
that will allow you to get outside of

147
00:11:17.556 --> 00:11:18.190
货柜
the container
