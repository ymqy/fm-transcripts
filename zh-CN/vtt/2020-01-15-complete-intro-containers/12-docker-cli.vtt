WEBVTT

1
00:00:00.190 --> 00:00:03.906
我们将通过 Docker CLI 中的一些功能，以便我们能够
We're just gonna go through a bunch of the
features in the Docker CLI, so that we can

2
00:00:03.906 --> 00:00:07.163
能为你做的各种事情都能做得好
just kind of type out and see all
the various things that it can do for you.

3
00:00:07.163 --> 00:00:09.875
这是瑞士军队的一把刀对你做了很多事情
It's a Swiss army knife,
it does many things for you.

4
00:00:09.875 --> 00:00:13.664
所以我只想让你熟悉一些其他的特点
So I just want you to be familiar
with some of the other features, so

5
00:00:13.664 --> 00:00:16.922
当你去用它们的时候你可以在这里
that when you go to use them,
that you can have them here.

6
00:00:16.922 --> 00:00:21.760
所以我们回到我的容器
So let's come back here to my container,

7
00:00:21.760 --> 00:00:25.086
或是给我的终端
or to my terminal, rather.

8
00:00:25.086 --> 00:00:30.091
首先我要说的是码头的拉力
First thing I'm gonna say is docker pull,

9
00:00:30.091 --> 00:00:34.826
我要做 jturpin/好莱坞
and I'm gonna do jturpin/hollywood.

10
00:00:34.826 --> 00:00:38.610
所以你可以看到，默认情况下，它已经是使用了最新的，对，
So you can see there, by default,
it was already using latest, right,

11
00:00:38.610 --> 00:00:41.929
因为我没有指定一个版本但它会告诉你
because I didn't specify a version,
but it tells you that.

12
00:00:41.929 --> 00:00:43.112
我已经下载了这个
And I already had this downloaded.

13
00:00:43.112 --> 00:00:45.682
所以它就已经存在了，已经存在了，已经存在了。
So it's just going to say already exists,
already exists, already exists.

14
00:00:45.682 --> 00:00:49.011
这样就能把它从注册表中提取出去
And so that will actually go and
fetch it from the registry,

15
00:00:49.011 --> 00:00:51.287
所以它是本地缓存在我的电脑上的
so it's locally cached on my computer.

16
00:00:51.287 --> 00:00:53.652
所以当我开始使用它的时候，它已经在那里了。
So later when I go to use it,
it's already there.

17
00:00:53.652 --> 00:00:54.412
对吧 ?
Right?

18
00:00:54.412 --> 00:00:58.170
我有很多人在课开始前做的，就这样
I had many of you do this before
the class started, just so

19
00:00:58.170 --> 00:01:00.926
你会把这些都准备好的
that you would have these all ready to go.

20
00:01:00.926 --> 00:01:06.929
既然已经在这里了我可以说码头上
And now that it's already here,
I could say docker run -it jturpin,

21
00:01:06.929 --> 00:01:12.932
实际上我要用一个不同的容器来
and actually I'm gonna do this to
with a different container just so,

22
00:01:12.932 --> 00:01:16.109
或者另一个终端是快速的。
or a different terminal real quick.

23
00:01:16.109 --> 00:01:23.960
这是小文本，但你不用真正在乎它的意思。
This is small text, but you don't
have to really care what it's saying.

24
00:01:23.960 --> 00:01:30.887
docker run-it， jturpin/holwood，然后我又要把宝莱坞放了
docker run-it, jturpin/hollywood, and
then I'm gonna put hollywood again.

25
00:01:38.009 --> 00:01:40.313
这事对我来说太搞笑了
So, what this is doing,
this is hilarious to me.

26
00:01:40.313 --> 00:01:42.070
这事什么都没做
[LAUGH] It's not doing anything.

27
00:01:42.070 --> 00:01:43.817
> > [LAUGH] >> 但是，
&gt;&gt; [LAUGH]
&gt;&gt; But,

28
00:01:43.817 --> 00:01:48.960
它应该看起来像好莱坞黑客的控制台
it's supposed to look like
a Hollywood hacker's console.

29
00:01:48.960 --> 00:01:49.536
对吧 ?
Right?

30
00:01:49.536 --> 00:01:53.548
所以有一个写这个的人说她会上飞机
So, one of the people that wrote this
said that she'll get on an airplane and

31
00:01:53.548 --> 00:01:56.578
来看看是谁在她周围紧张
just run this,
just to see who looks nervous around her.

32
00:01:56.578 --> 00:01:57.542
> > [LAUGH] > >
&gt;&gt; [LAUGH]
&gt;&gt; And

33
00:01:57.542 --> 00:01:59.823
她会像这样把键盘敲起来
she'll just pound the keyboard like this.

34
00:02:00.829 --> 00:02:04.531
是的，这就是这个容器的内容。
So yeah,
that's exactly what this container is.

35
00:02:04.531 --> 00:02:05.780
我觉得它用的是 tmux ，对。
I think it uses tmux, right.

36
00:02:05.780 --> 00:02:07.376
你可以在这里看到，就像在上面做矩阵一样。
You can see here,
it's like doing the matrix on the top.

37
00:02:07.376 --> 00:02:10.716
然后它就会重新分说一切都是怎么安排的
And then it'll just re-split
how everything is set up.

38
00:02:10.716 --> 00:02:15.616
那个正在做 SSH 密钥的
That one doing SSH keys.

39
00:02:15.616 --> 00:02:16.735
真好笑
That's funny.

40
00:02:16.735 --> 00:02:20.793
就像个小把戏对吧
So, it's like a trick, right?

41
00:02:20.793 --> 00:02:22.647
但这是个有趣的派对把戏
But this is a fun party trick.

42
00:02:22.647 --> 00:02:24.326
这绝对没有什么
This does absolutely nothing.

43
00:02:24.326 --> 00:02:25.699
但看起来很吓人吧
But it looks really scary, right?

44
00:02:25.699 --> 00:02:28.693
你可以看到有些甚至不起作用
You can see some of these don't even work.

45
00:02:31.259 --> 00:02:32.281
但这对我们的
But does that make sense for

46
00:02:32.281 --> 00:02:34.692
就像把东西从注册表中拉出来一样
like pull right where it pulls
something down off the registry?

47
00:02:34.692 --> 00:02:39.097
如你想象的，我可以去 dockerhub.com
And as you might imagine,
I could go to dockerhub.com or

48
00:02:39.097 --> 00:02:42.864
hub.docker.com/jturpin/hollywood, 和
hub.docker.com/jturpin/hollywood, and

49
00:02:42.864 --> 00:02:47.564
我会在码头的轮毂上看到这个特殊的入口，对。
I would see that particular
entry in the docker hub, right.

50
00:02:47.564 --> 00:02:49.218
所有这些点都与我的
Do all those dots connect with how I.

51
00:02:49.218 --> 00:02:50.829
基本上，就像 VM 安装一样。
&gt;&gt; It's like a VM install, basically.

52
00:02:50.829 --> 00:02:55.031
>> 就像 NPM，高速缓存，基本上， cutz 还没有实际运行，但是
&gt;&gt; It's like NPM, cache, basically, cuz
you're not actually running it yet, but

53
00:02:55.031 --> 00:02:56.900
你要把它拉上来
you're pulling it in.

54
00:02:56.900 --> 00:02:58.479
嗯。 好的。
Yeah.
Okay.

55
00:02:58.479 --> 00:03:01.729
别这样了太荒谬了
Let's stop that, cuz that's ridiculous.

56
00:03:01.729 --> 00:03:02.616
别说了别说了
Stop it, stop it.

57
00:03:02.616 --> 00:03:03.820
谢谢。
Thank you.

58
00:03:06.046 --> 00:03:08.306
好了我们再去另一个
Okay, now we'll go back to the other one.

59
00:03:08.306 --> 00:03:10.145
那我们现在就做码头检查吧
So, let's do docker inspect now.

60
00:03:10.145 --> 00:03:11.765
所以我要说码头检查
So, I'm gonna say docker inspect.

61
00:03:11.765 --> 00:03:16.490
让我们做一个 12 点的节点。
And let's do node 12-stretch.

62
00:03:22.194 --> 00:03:25.597
所以，你可以在这里看到，它输出了很多关于这个的信息。
So, you can see here, it just outputs
a lot of information about that.

63
00:03:25.597 --> 00:03:29.400
它会给你哈沙它会给你标签
It'll give you the hash,
it'll give you the tags.

64
00:03:29.400 --> 00:03:32.052
它会给你很多信息
It will give you a bunch of information,

65
00:03:32.052 --> 00:03:35.258
它会给你环境变量
here it will give you
environmental variables.

66
00:03:35.258 --> 00:03:38.506
就像你能看到的这里是 Node我不知道这跟 Yarn是一起的
Like you can see here, this came with
Node, I didn't know this came with Yarn,

67
00:03:38.506 --> 00:03:40.706
但你可以看到它有一个 Yarn 版本
but you can see there that
it came with a Yarn version.

68
00:03:40.706 --> 00:03:43.615
它会告诉你它将运行什么命令。
It'll tell you what command
it is going to run.

69
00:03:43.615 --> 00:03:47.740
因此，每当运行节点时，它就会运行这样的节点。
So it actually runs node like
that whenever you run it.

70
00:03:50.110 --> 00:03:50.699
入口点。
Entry Point.

71
00:03:51.960 --> 00:03:53.413
你看它只会给你一堆这样的东西
See, it just gives you
a bunch of stuff like that.

72
00:03:53.413 --> 00:03:56.912
因此，如果您想了解此版本的错误，那么这很有用。
So this is useful if you're like trying to
figure out what's wrong with this version

73
00:03:56.912 --> 00:03:58.900
就像它是怎么建造的或者类似的东西
or like how was it built or
something like that.

74
00:04:00.599 --> 00:04:01.729
像那样的东西
Bunch of stuff like that.

75
00:04:01.729 --> 00:04:02.902
接下来我们要学习的是停手
Next one we'll learn is docker pause.

76
00:04:02.902 --> 00:04:10.205
所以我要做 Docker run -dit。
So I'm going to do Docker run -dit.

77
00:04:10.205 --> 00:04:13.159
因此破折号 d 是分开的，我们之前看到过。
So the dash d is detached,
which we saw previously.

78
00:04:13.159 --> 00:04:17.077
我要再做一次 jturpin 的
I'm gonna do the jturpin
hollywood one again.

79
00:04:19.478 --> 00:04:23.733
好莱坞但是现在这个是在后台运行的，对，
Hollywood, but then now this is
gonna run in the background, right,

80
00:04:23.733 --> 00:04:28.653
我是说它在做些什么但我们没在看它对吧
which is, I mean, it's doing something,
but we're not watching it, right?

81
00:04:28.653 --> 00:04:30.023
但你可以看到它还在运转
But you can see here it's still running.

82
00:04:30.023 --> 00:04:37.485
我们可以看到它还在运行，但是这个在运行。
That we can see that's still running,
but this one here's running.

83
00:04:37.485 --> 00:04:39.168
这一点很难理解。
And this is hard to read like this.

84
00:04:42.175 --> 00:04:47.009
所以，就在第二个方面，我只是在缩小，这样你就可以在一行上看到这些。
So just for a second, I'm just zooming
out so you can see all these on one line.

85
00:04:47.009 --> 00:04:50.740
你可以看到这里的状况，它已经上升了大约 7 秒钟。
You can see the status here,
it's been up for about seven seconds.

86
00:04:50.740 --> 00:04:55.319
再一次，它已经上升了 7 秒。
So again, it's been up for seven seconds.

87
00:04:55.319 --> 00:04:57.951
所以现在我可以说停手了
So now I can say docker pause, and

88
00:04:57.951 --> 00:05:02.654
我就用那个集装箱的标识把它贴在那儿
I'll just take that container ID and
paste it right there.

89
00:05:02.654 --> 00:05:06.156
现在如果我再说 " docker ps " 的话
And now if I say docker ps again,

90
00:05:06.156 --> 00:05:11.752
它会说已经暂停了对吧
it's gonna say it's paused right there,
right?

91
00:05:11.752 --> 00:05:14.327
不管它在做什么它只冻结了所有过程树
Whatever it was doing, it just
froze all of its process trees, and

92
00:05:14.327 --> 00:05:15.894
它就停在铁轨上了
it's just stopping dead in its tracks.

93
00:05:15.894 --> 00:05:21.290
现在如果我说停停的话就像你想象的一样
And now if I say docker unpause,
as you might imagine,

94
00:05:21.290 --> 00:05:25.175
说 Docker ps 它又要执行了
say docker ps, it's back to execute.

95
00:05:25.175 --> 00:05:27.981
那么另外一件事，如果你想暂停一些正在发生的事情，
So, another thing, if you want to
pause something that's happening,

96
00:05:27.981 --> 00:05:29.824
你可以说停停停一下就可以了
you can just say docker pause,
and that works.

97
00:05:29.824 --> 00:05:34.452
当我想摆脱它的时候，当我想摆脱它的时候，
And then at the end of it, when I want
to get rid of it, docker kill, and

98
00:05:34.452 --> 00:05:35.252
它不见了
it is gone.

99
00:05:35.252 --> 00:05:39.648
让我们先杀了另一个，我不知道为什么它在跑。
Let's go ahead and kill that other one,
cuz I don't know why it's running.

100
00:05:39.648 --> 00:05:41.007
> > 是否有要立即杀死他们的命令 ?
&gt;&gt; Is there a command to
kill all of them at once?

101
00:05:44.987 --> 00:05:46.935
库兹我有很多人都跑了对我来说是不可知的
Cuz I have a lot of them running,
unbeknownst to me.

102
00:05:46.935 --> 00:05:50.939
>> docker kill >> 它不起作用，我尝试过。
&gt;&gt; docker kill
&gt;&gt; It doesn't work, I tried.

103
00:05:50.939 --> 00:05:54.286
>> 否，您必须执行 docker ps -q。
&gt;&gt; No, you have to do docker ps -q.

104
00:05:54.286 --> 00:05:58.949
所以我觉得如果你这样做的话
So I think if you do, so
this subshells out to another shell,

105
00:05:58.949 --> 00:06:03.805
好吧如果我把它放在美元符号的括号里
right, if I put it inside of
the dollar sign parentheses here.

106
00:06:03.805 --> 00:06:08.233
然后我想你可能得检查一下我的位置
And then docker ps- q, I think -q, you
might need to check me on that one, and

107
00:06:08.233 --> 00:06:09.660
我们再来一次吧
let's just do it again.

108
00:06:09.660 --> 00:06:11.360
坚持住
Hold on.

109
00:06:11.360 --> 00:06:12.151
我们会再跑几次
We'll run this a couple of times.

110
00:06:15.901 --> 00:06:17.721
答案是，没有简单的方法可以做到。
The answer is,
there's no easy way to do it.

111
00:06:17.721 --> 00:06:25.178
但我觉得你可以做码头工人
But I think you can do docker kill and

112
00:06:25.178 --> 00:06:29.408
然后 docker ps -q。
then docker ps -q.

113
00:06:29.408 --> 00:06:33.273
你可以看到它杀死了所有的人
And you can see there
it killed all of them.

114
00:06:33.273 --> 00:06:37.680
因此 docker ps -q 仅输出标识或容器标识，对吗 ?
So docker ps -q just outputs the IDs or
the container IDs, right?

115
00:06:37.680 --> 00:06:39.250
然后这就被送入了 Docker 杀死指令。
And then that's fed into
the docker kill command.

116
00:06:49.654 --> 00:06:52.161
好吧另一个好的
Okay, another good one.

117
00:06:52.161 --> 00:06:55.322
这是我需要你保持的大关键
So here's the big key
that I need you to keep.

118
00:06:55.322 --> 00:06:59.401
当我看到码头和码头的时候它花了我一秒的时间
When I saw docker run and docker exec,
it took me a second to figure out,

119
00:06:59.401 --> 00:07:01.994
为什么我需要这两个命令对吗
why do I need both of these commands,
right?

120
00:07:01.994 --> 00:07:05.004
Docker 运行将启动新容器。
Docker run is going to
start a new container.

121
00:07:05.004 --> 00:07:09.120
Docker exec 将在现有容器上运行某些内容，对吗 ?
Docker exec is going to run something
on an existing container, right?

122
00:07:09.120 --> 00:07:11.538
有道理吗 所以当我说码头的时候
That make sense?
So when I say, docker run like this,

123
00:07:11.538 --> 00:07:14.656
就会有一个新的宝莱坞容器了对吧
it's going to start up a new
hollywood container, right?

124
00:07:14.656 --> 00:07:17.023
但如果我说 Docker exec 它会尝试
But if I say docker exec,
it's going to try and

125
00:07:17.023 --> 00:07:19.957
找个容器来对付某些东西吧
find a container to execute
against something, right?

126
00:07:19.957 --> 00:07:23.100
所以这个，我又跑了一个 Docker 容器。
So this one,
I ran another docker container.

127
00:07:23.100 --> 00:07:26.516
所以如果我说 " docker ps " 你可以看到我有一个好莱坞的
So if I say docker ps, you can see here
I have this hollywood one running,

128
00:07:26.516 --> 00:07:28.036
它叫弗文特 - 卡拉姆
it's called fervent_kalam.

129
00:07:30.047 --> 00:07:35.028
我要对费文特 - 卡拉姆说
And I'm going to say docker
exec against fervent_kalam, or

130
00:07:35.028 --> 00:07:38.877
我可以把身份证放在那里，这两个都可以工作。
I can put the ID there,
both of those will work.

131
00:07:38.877 --> 00:07:41.701
我只想看看到底是怎么回事
And I just wanna see
what's running on that.

132
00:07:41.701 --> 00:07:43.404
我可以说的是
So I can say ps aux.

133
00:07:43.404 --> 00:07:46.637
你可以看到，它在运行一堆东西，对，
And you can see there,
it's running a bunch of stuff, right,

134
00:07:46.637 --> 00:07:50.427
因为它有各种不同的宝莱坞容器
because it has all the various different
hollywood containers going on.

135
00:07:50.427 --> 00:07:54.548
我们也可以说是吧
We can also say ls, right?

136
00:07:54.548 --> 00:08:00.173
你可以看到在根目录下， pwd，它会给我一个斜杠，对吗 ?
You can see that's in the root directory,
pwd, it will give me a slash, right?

137
00:08:00.173 --> 00:08:04.480
因此，这与正在执行的容器正在运行。
So this is running against that
ongoing executing container.

138
00:08:04.480 --> 00:08:05.589
这有道理吗
Does that makes sense?

139
00:08:06.769 --> 00:08:11.610
所以如果我想和它联系的话我只能说巴什
So if I wanted to connect to it,
I could just say bash.

140
00:08:11.610 --> 00:08:13.836
我想我得说了
I have to say -it, I think.

141
00:08:17.930 --> 00:08:20.754
现在，我实际上是连接到同一个正在运行的容器，对吗 ?
And now, I'm actually attached to
the same running container, right?

142
00:08:20.754 --> 00:08:21.978
所以如果我说的是
So, again, if I say ps aux,

143
00:08:21.978 --> 00:08:24.846
你可以看到这个集装箱的所有东西
you can see all the stuff that's
running against this container.

144
00:08:29.086 --> 00:08:29.586
有道理吗
Make sense?

145
00:08:33.273 --> 00:08:35.096
Docker 杀死了我们刚刚做的那个
Docker kill, that one that we just did.

146
00:08:35.096 --> 00:08:35.688
我们走吧
Here we go.

147
00:08:39.269 --> 00:08:41.052
好了我们要在这儿再做一个
All right, so
we're gonna do another one here.

148
00:08:41.052 --> 00:08:42.960
这就是我们要做的 Docker 历史
This is what we're gonna do,
docker history.

149
00:08:42.960 --> 00:08:46.177
我要说码头的历史
And I'm gonna say docker history, and

150
00:08:46.177 --> 00:08:50.085
我们会说点冒号 12 号
we're gonna say node
colon 12 dash stretch.

151
00:08:55.669 --> 00:08:58.404
在这里我们可以看到各种不同的
And here, we can see all of
the various different, and

152
00:08:58.404 --> 00:09:00.980
我们马上就能在这里找到码头文件了
we'll get into docker files
here in just a second.

153
00:09:00.980 --> 00:09:02.816
但我们可以看到历史上所有的变化。
But we can see all the changes
in the history here.

154
00:09:02.816 --> 00:09:05.495
你可以看到，这是两星期前最后一次修改。
You can see,
this was last modified two weeks ago.

155
00:09:08.869 --> 00:09:11.883
你可以看到各种大小和评论，以及图像和图像。
And you can see all the different sizes
and comments and created by, and images,

156
00:09:11.883 --> 00:09:12.912
还有这类的东西
and all that kind of stuff.

157
00:09:12.912 --> 00:09:15.369
这有点意思只是为了反省
This is kind of interesting
just to introspect how the,

158
00:09:15.369 --> 00:09:17.422
您的 Docker 容器随时间推移而发生变化。
your docker container
is changing over time.

159
00:09:21.062 --> 00:09:23.972
Docker 信息，如果您是
Docker info, this is useful like if you're

160
00:09:23.972 --> 00:09:27.840
比如 SSHed 就像一个在云中运行的虚拟机
like SSHed into like a VM that's
out running in the cloud.

161
00:09:27.840 --> 00:09:31.793
这将会转储一些关于主机计算机的信息
This will just dump a bunch of information
about the host computer that it's

162
00:09:31.793 --> 00:09:32.484
啊，对吧 ?
on, right?

163
00:09:32.484 --> 00:09:37.594
所以我可以看到这在 cgroupf 上是什么
So I can see that this
is on cgroupfs is what

164
00:09:37.594 --> 00:09:42.128
它是用来控制的 cgroups
it's using for control, cgroups.

165
00:09:42.128 --> 00:09:45.943
我可以看到这里有 20 个容器，都停了，对吧 ?
I can see that I have 20 containers here,
all of them are stopped, right?

166
00:09:45.943 --> 00:09:50.128
这意味着我有一堆不必要的信息
Which means that I have a bunch of
unnecessary information sitting on my

167
00:09:50.128 --> 00:09:50.831
计算机。
computer.

168
00:09:50.831 --> 00:09:56.130
它不是在调试模式，我现在不是在运行群，像那样的一堆东西。
It's not in debug mode, I'm not running
swarm right now, bunch of stuff like that.

169
00:09:56.130 --> 00:10:02.515
操作系统类型为 Linux，操作系统为 Docker Desktop。
OS type Linux,
operating system is Docker Desktop.

170
00:10:05.828 --> 00:10:07.808
我在用社区引擎而不是企业的引擎对吧
And I'm using the community engine,
not the enterprise one, right?

171
00:10:07.808 --> 00:10:12.144
就像这样，偶尔也会有一些有用的东西。
So just a bunch of stuff like that,
can be occasionally be useful.

172
00:10:16.597 --> 00:10:21.601
好了我们做个码头管理公司
All right, so
let's do docker run -dit mongo,

173
00:10:21.601 --> 00:10:26.740
这将会开始在后台运行 Mongo 。
this will start running
Mongo in the background.

174
00:10:27.889 --> 00:10:31.395
现在我要说的是码头的顶部
And now I'm gonna say docker top that.

175
00:10:35.140 --> 00:10:37.453
这和精确的 ux 是一样的吧
This is the same as doing
like exact px aux, right?

176
00:10:37.453 --> 00:10:40.293
这只是一个简单的方法来查看所有
This is just an easy way to
see all the processes that

177
00:10:40.293 --> 00:10:42.546
都在一个特定的容器里
are going on in a particular container.

178
00:10:48.158 --> 00:10:49.485
这样做是有用的。
So that can be useful.

179
00:10:49.485 --> 00:10:52.577
这个实际上，你可以看到它正在后台运行 mongodb ， mongod。
So this one is actually, you can see it's
running mongodb in the background, mongod.

180
00:10:56.312 --> 00:10:59.700
博士会杀了他的
And docker kill that.

181
00:10:59.700 --> 00:11:03.308
我们去码头看看码头破折号
Let's take a look at
docker ps dash dash all.

182
00:11:03.308 --> 00:11:05.899
现在我，你可以看到，我有，我知道这个，
Now for me, you can see here,
that I have, I knew this,

183
00:11:05.899 --> 00:11:08.726
我只留了 20 个容器对吧
I have 20 containers that
I've just kept around, right?

184
00:11:08.726 --> 00:11:12.288
您可以看到此处的状态，因为所有这些都已退出，
And you can see the status here for
all these is exited,

185
00:11:12.288 --> 00:11:17.399
因为我一直在执行容器，然后不删除它们。
because I keep executing containers and
then not deleting them.

186
00:11:17.399 --> 00:11:19.629
这就是破折号的破折号
That's what that dash
dash rm is useful for.

187
00:11:19.629 --> 00:11:22.431
这会给我留一堆空间但我一直忘了它
That would save me a bunch of space,
but I keep forgetting about it.

188
00:11:22.431 --> 00:11:24.602
但是让我们看看其中一个，对吧。
But let's take a look at one of these,
right.

189
00:11:24.602 --> 00:11:30.118
你可以看到其中的一些是 10 天前的。
So You can see some of
these are from 10 days ago.

190
00:11:30.118 --> 00:11:35.769
这是我刚跑的那个蒙戈的
This one here that I just ran,
the mongo one.

191
00:11:35.769 --> 00:11:41.240
我们来做码头工人的记录吧
Let's do docker logs from that.

192
00:11:42.679 --> 00:11:45.720
你可以在这里看到，这是一堆 Mongo DB 的日志，对吧 ?
You can see here,
this is a bunch of Mongo DB logs, right?

193
00:11:45.720 --> 00:11:47.202
这对任何人都不奇怪，对吧 ?
That should not be surprising to anyone,
right?

194
00:11:47.202 --> 00:11:49.635
我运行了 Mongo DB ，生成了一堆日志。
I ran Mongo DB,
it generated a bunch of logs.

195
00:11:49.635 --> 00:11:50.461
他们来了
So here they are.

196
00:11:50.461 --> 00:11:54.106
这就是 docker 允许你做的事情。
So that's what docker allows you,
that can be ongoing.

197
00:11:54.106 --> 00:11:55.767
还可以是还在跑的吧
It can be one that's still running, right?

198
00:11:55.767 --> 00:11:57.267
它会跟踪你的信息
It'll keep track of that information for
you.

199
00:11:57.267 --> 00:12:02.524
或者你可以看看最近关闭的那些
Or you can do look at ones
that have recently shut down.

200
00:12:02.524 --> 00:12:06.971
但让我们说我想摆脱这一点我可以说
But let's say I want to get rid of that,
I can say docker rm that, and

201
00:12:06.971 --> 00:12:12.148
它会去删除那个容器现在它释放了所有的空间
it will actually go and delete that
container, it now freed up all that space.

202
00:12:12.148 --> 00:12:15.282
如果我想说我已经不再打算用蒙古人了
And if I wanted to, let's say I am no
longer planning on using the Mongo

203
00:12:15.282 --> 00:12:19.799
我就可以说 Docker rmi ，就是把图像去掉，对吧 ?
container anymore, I could say docker rmi,
which is, remove the image, right?

204
00:12:19.799 --> 00:12:21.071
蒙戈 现在我不会这么做了
Mongo.
Now I am not going to do that,

205
00:12:21.071 --> 00:12:23.304
因为我们稍后会在这里用它
because we are going to use it
here later in the course, but

206
00:12:23.304 --> 00:12:25.417
你也会释放其中的一些空间
that is how you would free up
some of that space as well.

207
00:12:25.417 --> 00:12:32.211
还有码头我觉得是集装箱的修剪
And there is docker,
I think it's container prune.

208
00:12:35.210 --> 00:12:37.649
这将除去所有已停止的容器，我想这样做。
This will remove all stopped containers,
I wanna do that.

209
00:12:37.649 --> 00:12:42.578
我说了我回收了 422
And I say yes, and I reclaimed 422

210
00:12:42.578 --> 00:12:47.831
我的 256 千兆字节计算机上的字节数。
bytes on my 256 gigabyte computer.

211
00:12:49.912 --> 00:12:55.799
但现在如果我说 " docker ps " 什么都没有
But now if I say docker ps --all,
nothing there.

212
00:12:55.799 --> 00:12:58.190
对吧 ? 所以把那些东西都扔掉了
Right?
So got rid of all that stuff.

213
00:12:58.190 --> 00:13:01.118
再一次你可以做船坞的修剪机对吧
Now again,
you can do docker image prune, right?

214
00:13:01.118 --> 00:13:04.365
这将释放大量的东西。
And that will free up
a substantial amount of stuff.

215
00:13:04.365 --> 00:13:06.057
我现在不建议这样做
I don't suggest doing it right now.

216
00:13:06.057 --> 00:13:10.192
>> 您知道在哪里可以看到所有图像吗 ?
&gt;&gt; You know where to see
like all the images?

217
00:13:10.192 --> 00:13:12.812
>> 我想一个 Docker 映像列表。
&gt;&gt; I think a docker image list.

218
00:13:15.135 --> 00:13:15.986
幸运的是
Lucky guess.

219
00:13:15.986 --> 00:13:17.403
你可以看到我有不少
You can see I have quite a few.

220
00:13:17.403 --> 00:13:20.014
有几个
Quite a few.

221
00:13:20.014 --> 00:13:24.024
你可以看到它们，其中有些是相当大的。
And you can see they're,
some of these are quite big.

222
00:13:27.041 --> 00:13:32.943
所以，嗯，我可能要把这个免费，我在这之后要做。
So, yeah, I probably need to go free this
up, which I will do after the course.

223
00:13:32.943 --> 00:13:39.168
好了码头工人跑了
All right, so docker run -dit,

224
00:13:39.168 --> 00:13:44.288
do 节点:12 - 拉伸。
do node:12-stretch.

225
00:13:47.665 --> 00:13:50.581
所以现在我有了码头的位置，对，它是在后台运行的。
So now I have docker ps that, right,
it's running in the background.

226
00:13:50.581 --> 00:13:58.091
我有个无聊的加加林我可以重新开始
I have boring gagarin,
I can do a docker restart, that.

227
00:13:58.091 --> 00:14:02.326
毫不奇怪，这将重新启动容器。
Unsurprisingly, this will
restart the container.

228
00:14:02.326 --> 00:14:04.197
就这样了
That's it.

229
00:14:08.049 --> 00:14:12.870
在这个特殊情况下，为什么会这样呢 ?
In this particular case, so,
the reason why that probably took so

230
00:14:12.870 --> 00:14:15.549
只要花那么长的时间
long, it might just take that long.

231
00:14:15.549 --> 00:14:18.429
但很多时候这些容器都不会回复
But a lot of times some of these
containers won't respond to restart

232
00:14:18.429 --> 00:14:19.549
信号，对。
signals, right.

233
00:14:19.549 --> 00:14:20.600
这就是这些事情的工作方式。
So that's how these things work.

234
00:14:20.600 --> 00:14:23.115
它会发出终止信号或发送重新启动信号。
It'll send like a terminate signal or
send a restart signal.

235
00:14:23.115 --> 00:14:28.232
我认为，在这种情况下，节点不会响应于自身的重新启动信号。
I think in this case, node doesn't respond
to restart signals in and of itself.

236
00:14:28.232 --> 00:14:30.202
所以它所做的是它等待十秒
So what it does,
is that it waits ten seconds,

237
00:14:30.202 --> 00:14:33.653
就像好吧，你没重启，就硬把它给你重启了。
it's like okay, you're not restarting,
and it just hard restarts it for you.

238
00:14:33.653 --> 00:14:36.825
因此，其中一些将会更快地出现，因为响应时间
So some of these will be a lot
faster because of the respond to

239
00:14:36.825 --> 00:14:37.975
重新启动信号。
the restart signal.

240
00:14:37.975 --> 00:14:43.764
但是，不管怎样，那是 Docker 重新启动。
But, Anyway, that's docker restart.

241
00:14:43.764 --> 00:14:46.474
然后还有码头搜索
And then there's docker search.

242
00:14:46.474 --> 00:14:48.636
假设我们想搜索一个 Python 容器
Let's say we wanna search for
a Python container.

243
00:14:48.636 --> 00:14:49.870
我可以说 docker 搜索 python
I can say, docker search python.

244
00:14:49.870 --> 00:14:53.219
你可以在这里看到它会从 Docker 集线器返家
And you can see here,
it'll return off of docker hub.

245
00:14:53.219 --> 00:14:57.357
这里有一堆你可以使用的 Python 容器。
Here's a bunch of Python containers
that you could be using.

246
00:14:57.357 --> 00:15:01.950
它会给你看星星，描述，所有这些东西。
It'll show you the stars,
the descriptions, all that kind of stuff.

247
00:15:01.950 --> 00:15:05.340
那是码头搜查我很可能只是在码头上做
And that's docker search, I would
probably just do it on docker hub myself,

248
00:15:05.340 --> 00:15:08.750
但如果您不喜欢浏览器，那么它在您的命令行中可用。
but it is available in your command
line if you don't like browsers.

249
00:15:08.750 --> 00:15:11.506
可能是那些使用 Mosaic 来进行日常浏览的人。
Probably the same people that are using
Mosaic for their day-to-day browsing.
