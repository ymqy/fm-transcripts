WEBVTT

1
00:00:00.000 --> 00:00:03.641
所以我要给你们看一个小的，一种欺骗的方式，去找库伯内特。
So I'm gonna show you a little, kind
of cheat way, to get on to Kubernetes.

2
00:00:03.641 --> 00:00:06.187
我们要用一个叫 Kompose的项目
And we're gonna use
a project called Kompose.

3
00:00:06.187 --> 00:00:08.310
跟 K 一起
Kompose with a K.

4
00:00:08.310 --> 00:00:12.548
所以回到我们的项目 Kompose
So coming back over to our project here,
Kompose.

5
00:00:12.548 --> 00:00:16.922
我要你在 Kompose 上点击
I want you to click here on Kompose,
which is kompose.io.

6
00:00:16.922 --> 00:00:20.995
这是 Kubernetes 组织的一个正式项目，它是
This is an official project from the
Kubernetes organization, which is part of

7
00:00:20.995 --> 00:00:25.096
我认为它是 Linux 基金会的一部分。
the Cloud Native Foundation, which I
believe is part of the Linux Foundation.

8
00:00:27.329 --> 00:00:29.577
好了我想让你进来
Okay, and
then I want you to come in here and

9
00:00:29.577 --> 00:00:32.207
我想那里有个安装标签
I think there is
an installation tab right there.

10
00:00:33.490 --> 00:00:36.231
这是另一个您要下载并运行的 curl 命令。
And it's another curl command that
you're gonna download and run.

11
00:00:39.844 --> 00:00:41.603
就在那就是你想要的那个
And right there,
that's the one that you want.

12
00:00:41.603 --> 00:00:44.179
你要做同样的歌舞曲和舞蹈
You're gonna have to do
the same kinda song and dance,

13
00:00:44.179 --> 00:00:47.322
让它执行一个小小的加 X 然后把它移动到你的道路上
make it execute a little plus X,
and then move that into your path.

14
00:00:51.029 --> 00:00:52.787
看起来它也会在 Windows 上工作。
And it looks like it will
work on Windows as well.

15
00:00:52.787 --> 00:00:56.094
看起来我们有一个二进制文件从 GitHub 安装。
It looks like we have a binary
that you just install from GitHub.

16
00:00:57.805 --> 00:00:59.851
但我觉得你被困在了 PowerShell 的土地上
But again,
I think you're stuck in PowerShell land.

17
00:01:02.828 --> 00:01:03.825
好的。
Okay.

18
00:01:05.756 --> 00:01:07.971
现在我有了 Kompose
So now that I have Kompose.

19
00:01:15.192 --> 00:01:16.310
这只是版本
It's just version.

20
00:01:17.954 --> 00:01:21.656
给你，我有 1.19， 1.19。
There you go, I have 1.19, 1.19.

21
00:01:24.501 --> 00:01:27.536
我们需要做的一件事是我们需要修改我们的码头
And the next thing that we need to do is
we need to go modify our docker-compose

22
00:01:27.536 --> 00:01:28.948
用一点时间来处理这个问题
file a little bit to work with this.

23
00:01:28.948 --> 00:01:33.872
这就是组成你的工作的原因是它需要的是 Docker 编写的文件
So that's what compose does for you,
is it takes the docker-compose file that

24
00:01:33.872 --> 00:01:37.777
我们把它变成了库伯内特的构造
we wrote, and it turns that into
a Kubernetes configuration.

25
00:01:37.777 --> 00:01:42.180
这挺酷的因为文档的编写很容易
Which is pretty cool,
because docker-compose is pretty easy by

26
00:01:42.180 --> 00:01:46.194
与 Kubernettes 配置的比较。
comparison to understand to
Kubernetes configurations.

27
00:01:46.194 --> 00:01:50.920
只要我们能构建好的 Docker-编写我们可以使用的文件
So as long as we're good building
Docker-compose files we can be using

28
00:01:50.920 --> 00:01:51.876
库伯内特
Kubernetes.

29
00:01:51.876 --> 00:01:55.631
你能做的和我个人做的事
And what you can do and what I do
personally, when I'm messing around with

30
00:01:55.631 --> 00:01:59.448
Kubernetes I将从 Docker 编写文件开始，我将使用编写
Kubernetes I'll start with
the Docker-compose file, I'll use compose

31
00:01:59.448 --> 00:02:03.224
把所有东西都转换成 Kubernetes 的输出然后我就从那儿走了
to convert everything to Kubernetes
output and then I'll go from there.

32
00:02:03.224 --> 00:02:06.685
好了我们要去我们的码头了
Okay, so we're gonna come
into our docker-compose.yml.

33
00:02:06.685 --> 00:02:08.781
我们要改变形象
We're gonna change the image or

34
00:02:08.781 --> 00:02:12.436
因为它不会为我们建立一个形象
the build to an image because
it won't do builds for us.

35
00:02:12.436 --> 00:02:16.264
这件事对你和库伯内特不会有任何的
That's one thing that compose will
not do for you nor Kubernetes.

36
00:02:16.264 --> 00:02:21.429
因此，一旦您将此更改为 btholt/node-app ，那么会出现在 Docker Bub上，
So once you change this to
btholt/node-app, so this is on Docker Bub,

37
00:02:21.429 --> 00:02:26.268
这就是我们一直在构建的应用
it's literally the app that we've
been building this whole time.

38
00:02:26.268 --> 00:02:29.777
我刚刚构建它并将其推送到 Docker Hub ，以便我们能够做到这一点，但是
I just built it and pushed it to
Docker Hub so that we can do this, but

39
00:02:29.777 --> 00:02:31.621
你得通过一个注册中心
you have to go through a registry.

40
00:02:31.621 --> 00:02:36.194
因此，是在本地运行您自己的注册表还是将其推送到
So whether that's running your own
registry locally or that's pushing it to

41
00:02:36.194 --> 00:02:41.270
Git Hub 软件包存储库，或将其推送到 Docker Hub 或 Azure 容器注册表。
a Git Hub package repository or pushing it
to Docker Hub or Azure Container Registry.

42
00:02:41.270 --> 00:02:44.134
有一堆地方你可以推这些
There's a bunch of different
places you can push these.

43
00:02:44.134 --> 00:02:48.421
现在我们只能使用 Docker Hub ，因为这是最简单的。
For now we're just gonna use Docker Hub
because that's the easiest one.

44
00:02:48.421 --> 00:02:50.336
好了 3000口
Okay, ports 3000.

45
00:02:53.057 --> 00:02:56.635
由于您不使用 Kubernetes ，因此我们将除去此卷部分
And we are gonna get rid of this volumes
part because you do not use Kubernetes for

46
00:02:56.635 --> 00:02:57.764
发展目的。
development purposes.

47
00:02:57.764 --> 00:02:59.817
所以这些东西都是不有用的
So that's all this stuff is not useful.

48
00:03:02.010 --> 00:03:07.717
如果你像我一样把港口送回去，那是 3000 : 3000。
When I put ports back if you took that
out like I did, which is 3000:3000.

49
00:03:09.828 --> 00:03:12.674
链接 db ，那就好，环境，
Links db, that's fine, environment,

50
00:03:12.674 --> 00:03:16.997
那就好了，我们得加添一个，就是标签。
that's fine, we gotta add one more though,
which is labels.

51
00:03:19.873 --> 00:03:24.566
所以库伯内特必须知道我们的
So there's certain things that
Kubernetes needs to know about our

52
00:03:24.566 --> 00:03:26.165
特定服务。
particular service.

53
00:03:26.165 --> 00:03:28.682
其中之一就是这是负载均衡服务
And one of them is that this
is a load balancing service,

54
00:03:28.682 --> 00:03:32.231
这意味着它需要像在它前面的负载均衡器一样。
which means that it needs to have like
some sort of load balancer in front of it.

55
00:03:32.231 --> 00:03:36.520
所以如果你想让 10 个容器同时运行库伯内特也可以
So if you wanna have ten containers
running at the same time Kubernetes can do

56
00:03:36.520 --> 00:03:38.127
我们的负载平衡
that load balancing for us.

57
00:03:38.127 --> 00:03:42.676
因此 Docker 组成没有内置的负载均衡概念。
So Docker compose doesn't have this
concept of load balancing built into it.

58
00:03:42.676 --> 00:03:45.182
所以我们得说几个话
So we have to kind of
indicate to compose like hey,

59
00:03:45.182 --> 00:03:48.415
请将其放入 Kubernetes 负载均衡情况。
please put this into the Kubernetes
load balancing situation.

60
00:03:48.415 --> 00:03:53.199
所以你说 compose.service.type 和
So you say compose.service.type, and

61
00:03:53.199 --> 00:03:57.437
你就说这是负载均衡器
you just say this is a load balancer.

62
00:03:59.360 --> 00:04:06.272
因此，标签通常用于诸如数据库容器之类的内容。
So labels are typically more used for
things like, this is a database container.

63
00:04:06.272 --> 00:04:09.632
然后，通过您的集群定义的内容，可以方便地搜索。
And then it makes it easy for like search
through your clusters defined things.

64
00:04:09.632 --> 00:04:11.353
他们只是在这个意义上的标签。
They're just labels in that sense.

65
00:04:15.371 --> 00:04:19.923
好吧最后一件事我们得给
Okay, and
last thing here on we have to give

66
00:04:19.923 --> 00:04:24.353
要使用的数据库显式端口。
the database explicit ports to be using.

67
00:04:24.353 --> 00:04:28.334
所以我们要把这个放在 27017上
So we're gonna say please
put this on 27017.

68
00:04:33.185 --> 00:04:37.850
好了，现在我们有了这个 Docker 合成文件的组合。
Okay, so now we've kind of
composified this Docker compose file.

69
00:04:47.096 --> 00:04:48.220
好吧好吧
All right.

70
00:04:55.038 --> 00:04:59.100
所以我想指出的一件事就是我们做了这个
So the one thing that I wanted to
point out to you is we did this

71
00:04:59.100 --> 00:05:01.382
负载均衡器在这里
load balancer thing right here.

72
00:05:01.382 --> 00:05:05.735
如果你试着把它推到亚马逊或者 Azure 之类的地方
If you try and push this to something
like Amazon or to Azure, they know how to

73
00:05:05.735 --> 00:05:09.685
来吧负载均衡器他们为你建了服务
deal with it, load balancers,
they have built in services for you.

74
00:05:09.685 --> 00:05:11.230
通常，它们不便宜。
Typically, they're not cheap.

75
00:05:11.230 --> 00:05:15.120
所以如果你有 15 种不同的服务它们都是负载均衡器
So if you have like 15 different services,
and they're all load balancers,

76
00:05:15.120 --> 00:05:17.634
很快就会很贵的
that's gonna get really
expensive really quick.

77
00:05:17.634 --> 00:05:19.435
你真正想做的事
What you're actually gonna wanna to do for

78
00:05:19.435 --> 00:05:22.298
大多数情况下，您的服务中的每一个都不会负载均衡。
the most part is not have each one
of your services be load balanced.

79
00:05:22.298 --> 00:05:25.610
你想把 NGINX 之类的东西都在前面
You're gonna wanna have something
like NGINX in front of everything in

80
00:05:25.610 --> 00:05:27.494
所有事物的负载均衡
that load balances across everything.

81
00:05:27.494 --> 00:05:31.093
所以就知道了，我不希望有人像我那样叫我
So just be aware of that, I don't want
someone to call me with like I had

82
00:05:31.093 --> 00:05:34.526
我要杀了你我要杀了你
a $10,000 bill and
I'm going to kill you, please don't.

83
00:05:36.586 --> 00:05:39.875
我在 Kompose里面放了个好纸条
I put a nice note in here
inside of the Kompose.

84
00:05:41.384 --> 00:05:42.956
在哪儿
Where is it?

85
00:05:42.956 --> 00:05:48.843
来自 Google 云解释负载均衡器的博客帖子。
A great blog post from Google Cloud
explaining load balancer.

86
00:05:48.843 --> 00:05:50.985
还有一个叫 NodePort的东西
There's another thing called NodePort,

87
00:05:50.985 --> 00:05:54.148
就好像在每个人的港口都暴露了一样东西
which is just like exposes
the same thing on everyone's port.

88
00:05:54.148 --> 00:05:58.497
就像我说在 3000 港曝光会暴露在里面的每个容器里
So like if I say expose on Port 3000,
it'll be exposed on every container inside

89
00:05:58.497 --> 00:06:01.576
在我的集群中， 3000 端口将是一个容器。
of my clusters,
Port 3000 will be that one container.

90
00:06:01.576 --> 00:06:04.331
你还可以使用 LoadBalancer ，还有一个叫做 Ingress的东西。
And you can also use LoadBalancer and
there's another thing called Ingress.

91
00:06:04.331 --> 00:06:08.281
出口不一定是一回事，只是一个想法，就像 NGINX，对吧 ?
Ingress is not necessarily a thing, it's
just an idea, which is like NGINX, right?

92
00:06:08.281 --> 00:06:12.334
使 NGINX 管理所有进入特定集群的入口流量。
Having NGINX manage all of your Ingress
traffic into your particular cluster.

93
00:06:14.235 --> 00:06:16.776
一个你不需要知道的大话题
Kind of a deep topic you don't really
need to know this is gonna work for

94
00:06:16.776 --> 00:06:17.951
我们的发展环境
our development environment.

95
00:06:20.346 --> 00:06:24.641
好吧我需要你做个类似的黑客攻击
All right, so
I need you to do like kind of a hack here,

96
00:06:24.641 --> 00:06:28.182
这就是 Kompose 如何运作的问题
this is for
how Kompose is expected to work.

97
00:06:28.182 --> 00:06:30.689
我得去找你的工作了
It needs someway to talk to your kubectl.

98
00:06:30.689 --> 00:06:34.090
所以你要运行这个 kubectl 代理 --port-8080。
So you're gonna run this
kubectl proxy --port-8080.

99
00:06:35.707 --> 00:06:38.206
而且它只会开始服务进口的交通
And it's just gonna start
serving traffic imported.

100
00:06:38.206 --> 00:06:40.846
我想你可以看看它吧
You can actually take a look at it,
I think.

101
00:06:40.846 --> 00:06:42.971
如果我记错的话就没什么好刺激的了
It's nothing exciting,
if I remember correctly.

102
00:06:47.095 --> 00:06:52.975
是啊，基本上是 API 让任何人都能与您的多维数据集进行交互，对吧 ?
Yeah, it's basically an API for anyone to
interact with your cube control, right?

103
00:06:52.975 --> 00:06:55.072
这让你的电脑暴露了
It's kind of exposing that
to your local computer.

104
00:06:56.838 --> 00:06:59.250
好吧我不想在前台运行
Okay, so
I don't wanna run that in the foreground.

105
00:06:59.250 --> 00:07:01.930
你可以说如果我把它放在最后
You can actually just say,
if I put &amp; here at the end,

106
00:07:01.930 --> 00:07:03.850
它会在后台运行
it's gonna run it in the background.

107
00:07:05.814 --> 00:07:11.072
所以现在如果我看我的电脑，我显然有很多东西，所以
So now if I look at my computer,
which I obviously have a lot of things, so

108
00:07:11.072 --> 00:07:17.211
如果我做了希腊的草皮你可以在这里看到它在这里的背景下运行
if I do ps aux grep kubectl, you can see
here, it's running here in the background.

109
00:07:19.178 --> 00:07:23.632
这就是最终的结果，它的最终目的就是把事情变成背景。
That's what that end, does it the end
is it forces stuff into the background.

110
00:07:23.632 --> 00:07:26.348
你可以像屏幕和 T Max 那样
You can do that with like screen and
T Max and

111
00:07:26.348 --> 00:07:29.829
一堆其他的东西只会偷懒别用这个
a bunch of other stuff to just lazy and
don't use this.

112
00:07:29.829 --> 00:07:31.632
好了现在该开始了
All right, so now that's running, and

113
00:07:31.632 --> 00:07:33.816
如果你不这样做就不会有办法了
this won't work by the way
if you don't do that.

114
00:07:37.759 --> 00:07:43.288
既然我们有了小公子我们会说的
So now that we have kompose,
we're gonna say kompose up.

115
00:07:45.792 --> 00:07:49.598
你可以在这里看到它创建了一个数据库服务，它创建了一个网络服务，
And you can see here it create a db
service, it created a web service,

116
00:07:49.598 --> 00:07:52.028
它为这两个和
it created a deployment for
both of these and

117
00:07:52.028 --> 00:07:54.869
所有内容都在缺省名称空间中运行。
everything's running in
the default name space.

118
00:07:54.869 --> 00:07:59.625
理论上，我们应该可以来这里说当地的 3000 人。
So in theory, we should be able to
come here and say local host 3000.

119
00:08:01.069 --> 00:08:03.350
现在它在库伯内特的内部工作。
And it's working now within Kubernetes.

120
00:08:10.867 --> 00:08:15.180
非常酷，你现在在计算机上运行一个 Kubernetes 集群。
So pretty cool, you are now running
a Kubernetes cluster on your computer.

121
00:08:15.180 --> 00:08:18.463
我觉得很酷，就很困难，
Which I find to be very cool,
like this is very difficult and

122
00:08:18.463 --> 00:08:21.824
花了很多时间让它变得这么简单
it's spent a bunch of time getting
it down to be this simple.

123
00:08:21.824 --> 00:08:24.920
所以我需要你做个该死的人就像我需要你那样做
So I need you to be dammit,
like I need you do the impressed by this.

124
00:08:27.856 --> 00:08:29.742
让我们来看看在车篷下面到底发生了什么。
So let's take a look at what's actually
happening underneath the hood.

125
00:08:29.742 --> 00:08:37.570
所以如果我说 kubectl ，请大家，你可以看到，我有这个部署，
So if I say kubectl, get all,
You can see here, I have this deployment,

126
00:08:37.570 --> 00:08:42.692
这个部署出去了，我还有复制集，我有一些 ClusterIP。
this deployment going out, and I have
replicasets going, I have some ClusterIPs.

127
00:08:42.692 --> 00:08:47.068
但我最感兴趣的部分是服务，对吧 ?
But the part that I'm actually most
interested in is the services, right?

128
00:08:47.068 --> 00:08:50.653
我有个服务数据库我有个网站服务
I have a service for db,
I have a service for web,

129
00:08:50.653 --> 00:08:55.213
这个是 LoadBalancer ，这个只是一些静态 IP。
this one is a LoadBalancer,
this one is just some static IPs.

130
00:08:55.213 --> 00:08:58.448
在这种情况下，您的 ClusterIP，记住这些是内部集群 IP。
And in this case, your ClusterIPs, keep
in mind these are internal ClusterIPs.

131
00:08:58.448 --> 00:09:00.950
所以如果我想这样做就不行了
So if I tried like ping this,
it wouldn't work,

132
00:09:00.950 --> 00:09:05.037
因为这只会在它的虚拟网络里工作
because this only works inside of
Kubernetes, inside of its virtual network.

133
00:09:05.037 --> 00:09:11.320
但是这个有一个外部 IP ，它是在端口 3000 上暴露一个 localhost 。
But this one does have an external-IP,
is it's exposing a localhost on port 3000.
