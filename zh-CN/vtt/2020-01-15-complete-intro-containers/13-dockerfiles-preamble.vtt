WEBVTT

1
00:00:00.200 --> 00:00:04.410
让我们进入 Dockerfile 的简介，所以，到目前为止，我们所关注的一切
Let's get into intro to Dockerfiles, so,
so far everything that we've been focused

2
00:00:04.410 --> 00:00:09.000
关于 Docker 已在运行现有容器，是吗 ?
on with regards to Docker has been on
running existing containers, right?

3
00:00:09.000 --> 00:00:10.960
对于工程师和其他工程师来说
Which again, for engineers and

4
00:00:10.960 --> 00:00:15.390
开发商，大概是你用容器做的，对吧 ?
developers, it's probably most of what
you'll be doing with containers, right?

5
00:00:15.390 --> 00:00:18.679
但我也认为，了解如何构建容器是有用的，
But it's also I think,
useful to know how to build containers,

6
00:00:19.879 --> 00:00:21.109
有很多种不同的方法
there's a bunch of
different ways to do it.

7
00:00:22.217 --> 00:00:24.262
让我们称之为最常见的
Let's call it the most common and

8
00:00:24.262 --> 00:00:27.475
我认为最好的方法是使用 Dockerfile。
my opinion best way of doing
it is with Dockerfiles.

9
00:00:29.463 --> 00:00:33.292
就像一个叫 Dockerfile 的文件格式
So there's actually like a file
format called Dockerfile and

10
00:00:33.292 --> 00:00:38.329
Docker 会进行此操作，然后使用该方法为您构建容器。
Docker reads this and then it uses
that to build containers for you.

11
00:00:38.329 --> 00:00:42.880
所以，让我们直接跳到其中，开始构建一些东西，好吗 ?
So let's just jump right into it and
start building something, all right?

12
00:00:42.880 --> 00:00:50.000
所以在你的电脑上我要去做个私人的
So somewhere on your computer I'm gonna
go into, let's go into personal, and

13
00:00:50.000 --> 00:00:56.429
我要制作一个叫 " to -to - containers " 的目录好吗
I'm gonna make a directory called
intro-to-containers, okay?

14
00:00:56.429 --> 00:01:00.247
我要把目录改为 " 去容器"
I'm gonna change directory
into intro-to-containers,

15
00:01:00.247 --> 00:01:04.003
我要把我的 VS 码打开到容器里
I'm going to open my VS code
into intro-to-containers.

16
00:01:09.727 --> 00:01:14.117
所以现在我有了
So right now I have

17
00:01:14.117 --> 00:01:18.841
只是一个空的目录我们要开始做一些项目
just an empty directory that we're gonna
start making some projects together,

18
00:01:18.841 --> 00:01:22.611
再一次我创造了一个 GitHub 存储库
and again, there is a GitHub repo
out there that I've created.

19
00:01:22.611 --> 00:01:28.789
GitHub btholt 项目
GitHub btholt projects for

20
00:01:28.789 --> 00:01:32.582
完成了对容器的处理
complete intro-to-containers,

21
00:01:32.582 --> 00:01:37.620
这个存在，这个有我要做的所有档案，
this exists out there, this has all
of the files that I'm about to do, it

22
00:01:37.620 --> 00:01:42.469
也就像逃学群一样，像一个空壳档案一样。
also has like the truancy groups and all
those like it has those as a shell file.

23
00:01:42.469 --> 00:01:46.400
举个例子，我们将要做的是 Dockerfile ，你可以想象，
So for example, we're about to do
Dockerfiles, so as you may imagine,

24
00:01:46.400 --> 00:01:48.879
有一个叫 Dockerfile 的目录，单击它。
there's a directory called Dockerfile,
click on that.

25
00:01:50.310 --> 00:01:52.750
在那里有一个 Docker 文件，对吧 ?
And on behold there's a Docker
file in there, right?

26
00:01:52.750 --> 00:01:54.950
所以如果你落后了或者你不喜欢打字
So if you get behind or
if you don't feel like typing them or

27
00:01:54.950 --> 00:02:00.060
之类的东西都在那儿
something like that, it's all there, and

28
00:02:00.060 --> 00:02:02.769
我试着让它变得很明显是什么地方，对吧 ?
I try to make it pretty self
evident what goes where, right?

29
00:02:02.769 --> 00:02:06.177
所以如果我要到 Dockerfile 的简介里，对吧 ?
So if I go here into intro to Dockerfiles,
right?

30
00:02:06.177 --> 00:02:08.860
这是 Dockerfile ，我尝试这样称呼它
This is Dockerfile,
I try to call it the same thing so

31
00:02:08.860 --> 00:02:11.594
如果你在这里也叫 Dockerfile
that if you go over here
it's also called Dockerfile.

32
00:02:13.145 --> 00:02:16.224
再次，我将再次使用 Visual Studio 代码，因此
So again, I'm gonna be using Visual Studio
code, again, I work on it, so

33
00:02:16.224 --> 00:02:18.875
我喜欢，我也觉得是一个很棒的编辑，所以
I like it, I also think it's
a really great editor, so

34
00:02:18.875 --> 00:02:20.670
你一定要用它但是你也不用
you should definitely use it but
you also don't have to.

35
00:02:20.670 --> 00:02:27.872
我会很悲伤的所以我要把所有项目都留在这里
I will just be very sad, so, I'm just
gonna make all my projects in here,

36
00:02:27.872 --> 00:02:34.739
我要把一个叫 dockerfile 的目录， cd 到 dockerfile。
I'm gonna make a directory called
dockerfile, cd into dockerfile.

37
00:02:37.588 --> 00:02:41.665
现在我们有了一个目录 Instro-to-Containers ，
And here, now that we have a directory,
Intro-to-Containers,

38
00:02:41.665 --> 00:02:46.311
你可以看到我有一个 dockerfile 目录在这里创建一个新的文件
so you can see here I have a dockerfile
directory, create a new file in here and

39
00:02:46.311 --> 00:02:48.479
它会被称为 Dockerfile
it's gonna be called Dockerfile.

40
00:02:49.780 --> 00:02:56.650
我在那儿得到了一个很好的东西，所以我们有一个 Dockerfile ，对吧 ?
And I get a nice little, well right there,
so we have a Dockerfile, right?

41
00:02:56.650 --> 00:02:59.969
所以我们要在这里创建一个文件， Docker
So what we're going to create here is
we're going to create a file that Docker

42
00:02:59.969 --> 00:03:04.300
将会被读出来，它会用这个来为我们建造一个容器，对吧 ?
is going to read, and it's going to use
that to build a container for us, right?

43
00:03:04.300 --> 00:03:07.330
所以这是一系列的指令，对吧 ?
So it's a series of instructions, right?

44
00:03:07.330 --> 00:03:10.159
做这个，然后做这个，然后做这个，
Do this, then do this,
then do this, then do this,

45
00:03:10.159 --> 00:03:12.580
那是非常程序性的
it's very procedural in
that particular way.

46
00:03:12.580 --> 00:03:14.830
每一条线都被称为指令，对吗 ?
And literally each line is
called an instruction, right?

47
00:03:14.830 --> 00:03:19.329
这就是为什么我说，使用指令，因为这就是它的字面意义。
That's why I say, use instructions,
because that's literally what it is,

48
00:03:20.990 --> 00:03:26.710
所以我们要像最基本的节点 Dockerfile 一样
so we're gonna make like the most
basic node, Dockerfile ever.

49
00:03:26.710 --> 00:03:30.680
所以你首先需要的是一个基本的容器，所以你说，
So, the first thing you need to start out
with is a base container, so you say,

50
00:03:30.680 --> 00:03:37.740
FROM，我的自动完成很棒，感谢 VS 码，在后面拍我自己。
FROM, I get nice auto-completion,
thanks VS code, pat myself on the back.

51
00:03:37.740 --> 00:03:41.430
我没这么做所以我不知道我为什么要这么做 FROM
I didn't do it so
I don't know why I'm doing that, FROM,

52
00:03:41.430 --> 00:03:43.740
然后开始使用某个基本级别的容器。
and then you start with
some base level container.

53
00:03:43.740 --> 00:03:47.174
所以我们要从已经开始使用的其中一个开始
So we're gonna start with one of them
that we've already been using, so

54
00:03:47.174 --> 00:03:51.879
我要说的是 FROM 节点:12 伸展
I'm gonna say, FROM node:12-stretch So

55
00:03:51.879 --> 00:03:54.829
它知道要去 Docker Hub 会发现
it knows it's gonna go out to Docker Hub,
it's gonna find

56
00:03:54.829 --> 00:03:58.819
我们的节点拉伸容器，它是这个的起点，对吧 ?
our node stretch container, and that
is the starting point for this, right?

57
00:03:58.819 --> 00:04:01.314
所以我们知道这个是有节点的，
So we know that this has
node installed in it,

58
00:04:01.314 --> 00:04:03.960
我们知道在它上安装了 npm
we know that it has npm installed on it.

59
00:04:03.960 --> 00:04:06.729
我们知道它有一些其他的特点
We know that it has some other
features like they've already created

60
00:04:06.729 --> 00:04:09.370
一个节点用户那里有一堆东西对吧
a node user for us there's
a bunch of stuff in there, right?

61
00:04:09.370 --> 00:04:12.634
我想说如果你在做一个节点
Bunch of goodness I'm going to
suggest like if you're doing a node

62
00:04:12.634 --> 00:04:13.693
容器，对吧 ?
container, right?

63
00:04:13.693 --> 00:04:17.740
就像一个节点项目，从这样的东西开始，对吧 ?
Like a node project,
start with something like this, right?

64
00:04:17.740 --> 00:04:22.220
不一定是这个，外面有其他的，
It doesn't necessarily have to be this
one, there are other ones out there,

65
00:04:22.220 --> 00:04:24.810
我想， " 节点源 " 发出了一个。
I think, Node Source makes one.

66
00:04:24.810 --> 00:04:27.752
有一家公司的名字是我的名字
There's another company that I'm
just blanking on the name but

67
00:04:27.752 --> 00:04:30.485
有一堆能制造好容器的
there's a bunch of them that
make really good containers.

68
00:04:32.995 --> 00:04:35.206
好吧那接下来的事
Okay, and then the next thing in here,

69
00:04:35.206 --> 00:04:39.649
我只是想让它在它开始的时候做点事情对吧
I'm just gonna tell it to do something
whenever it starts up, right?

70
00:04:39.649 --> 00:04:43.846
我要说的是 CMD 然后你告诉它当它启动时要做什么
So I'm gonna say, CMD, and then you tell
it what to do when it starts up, and

71
00:04:43.846 --> 00:04:46.021
你给了它一系列的东西对吧
you give it an array of things, right?

72
00:04:46.021 --> 00:04:50.774
所以在这个例子中，我要说，节点，我们希望它运行节点，
So in this case, I'm gonna say,
node, we want it to run node,

73
00:04:50.774 --> 00:04:53.937
那我们就给它带 -e 的旗帜
then we're gonna give it the flag of -e.

74
00:04:56.612 --> 00:05:04.113
现在我们要说，运行 console.log，我们必须逃离这些。
And now we're gonna say, run console.log,
we have to escape these.

75
00:05:09.718 --> 00:05:10.252
好了好了
There we go.

76
00:05:17.944 --> 00:05:21.237
因此 -e 就意味着立即执行此处的代码字符串，因此
So -e just means immediately execute
this string of code right here, so

77
00:05:21.237 --> 00:05:24.910
它实际上是把它喂给它就像节点要运行的文件一样
it's actually feeding this in as if it was
like the file that node's gonna run for

78
00:05:24.910 --> 00:05:26.019
你对吧
you, right?

79
00:05:26.019 --> 00:05:28.129
就像你想象的一样这只是打个招呼
So as you might imagine,
this is just gonna run hi.

80
00:05:30.610 --> 00:05:33.538
所以我要告诉你如果我说的是节点 -e
So, just to show you, if I say node -e,

81
00:05:41.170 --> 00:05:42.298
那我就在这儿
Then I do that here.

82
00:05:51.759 --> 00:05:54.829
但愿那是意外的事对吧
Hopefully that's unsurprising what
that was supposed to do, right?

83
00:05:54.829 --> 00:05:56.850
这就是 -e 的意思吧
That's what the -e does, right?

84
00:05:56.850 --> 00:05:59.490
就是想给你看，因为大多数人可能不执行代码
Just wanted to show you that, because most
people probably don't execute their code

85
00:05:59.490 --> 00:06:01.040
那样的话我就看不出原因了
that way, and I can't see why not.

86
00:06:01.040 --> 00:06:05.517
我只是开个玩笑这主意糟透了别这么做
I'm just kidding, it's a terrible idea,
don't do that [LAUGH]

87
00:06:05.517 --> 00:06:08.800
好吧那就这样吧
all right, so that's it, right?

88
00:06:08.800 --> 00:06:11.649
这可能是您可以在其中写入的最基本节点应用程序
This is probably the most basic
node application you could write in

89
00:06:11.649 --> 00:06:12.379
dockerfile 。
a dockerfile.

90
00:06:14.279 --> 00:06:15.689
如果你还记得
Now, if you remember,

91
00:06:15.689 --> 00:06:20.029
如果你直接运行节点，它就会掉到波纹中，对吗 ?
if you just run node stretch directly,
it just drops into the ripple, right?

92
00:06:20.029 --> 00:06:23.329
所以它在那里有自己的 CMD 所以这就是 CMD 的运作方式
So it has its own CMD in there,
so that's how CMD works,

93
00:06:23.329 --> 00:06:25.879
就能找到它的最后一个对吧
it takes the last one that it found,
right?

94
00:06:25.879 --> 00:06:27.519
这是它找到的最后一个 CMD
So this is the last CMD that it finds so

95
00:06:27.519 --> 00:06:31.230
它执行这个，上面写过那个，是吧 ?
it executes this one, it overwrote
the one that was previously there, right?

96
00:06:31.230 --> 00:06:37.899
所以如果我在下面有一个说我不知道
So if I have one underneath
here that says, I don't know,

97
00:06:37.899 --> 00:06:43.579
啊，对，最后一个，
right, it will do this last one,

98
00:06:43.579 --> 00:06:47.610
现在对密码说你在这里有两次 CMD
now, vs codes gonna say,
you have CMD in here twice.

99
00:06:47.610 --> 00:06:49.470
为甚么呢 ? 你为什么要这么对你自己
Why?
Why would you do that to yourself?

100
00:06:49.470 --> 00:06:52.100
对吧 ? 所以感谢 VS 码，但是
Right?
So thanks VS code, but

101
00:06:52.100 --> 00:06:58.036
我们就把这条线弄走我们就这样做
we'll just get rid of that line and
we'll do it like this,

102
00:06:58.036 --> 00:07:02.410
好了我要把我的 CRI 打开
all right, so I'm gonna open my CRI here.

103
00:07:02.410 --> 00:07:06.946
我是说这个特殊的文件我会说码头的建造
And I mean this particular file,
and I'm gonna say docker build,

104
00:07:06.946 --> 00:07:09.619
告诉我码头档案在哪里
and just tell where the docker file is,

105
00:07:09.619 --> 00:07:15.709
如果您需要 dockerfile ，那么您可以告诉它其他内容 ( 如果需要 ) 。
as soon as you need the dockerfile you can
tell it something else if you need to.

106
00:07:15.709 --> 00:07:19.019
让我说在这里建个码头对吧
Let me say docker build.,
dot mean right here, right?

107
00:07:19.019 --> 00:07:20.288
在此目录中查找 Docker 文件。
And look for
the Docker file in this directory.

108
00:07:24.153 --> 00:07:26.567
好吧所以它会说从节点 12 号开始
Okay, so
it's gonna say FROM node:12-stretch,

109
00:07:26.567 --> 00:07:29.250
我们大多数人可能还在我们的电脑上对吧
most of us probably still have
that on our computer, right?

110
00:07:29.250 --> 00:07:30.529
所以它马上就会
So it'll immediately do that,

111
00:07:30.529 --> 00:07:35.600
然后再在上面建立一层这就是我们所做的
and then it builds another layer on top of
that, which is this command that we do and

112
00:07:35.600 --> 00:07:39.899
然后在这里用这个名字建造了这个集装箱
then it built this container
right here with this name.

113
00:07:39.899 --> 00:07:45.130
所以我要说 Docker 经营或者我们不知道
So I'm gonna say docker run-it,
or actually we don't

114
00:07:45.130 --> 00:07:49.930
甚至还得这么做你可以说 Docker 会运行它
even have to do the it,
you can say docker run that.

115
00:07:55.404 --> 00:07:58.822
然后我们就开始了第一个我们创造的容器。
And there you go, we just ran our
first container that we've created.

116
00:08:01.673 --> 00:08:05.730
我觉得这对大家都很重要
And I feel like this was really
important for everyone to see, probably

117
00:08:05.730 --> 00:08:10.569
最好的容器绝对是最好的容器
the best container ever, definitely
the best container ever, all right.

118
00:08:10.569 --> 00:08:13.509
你感觉怎么样
How do you feel about that?

119
00:08:13.509 --> 00:08:14.379
有道理吗
Makes sense?

120
00:08:14.379 --> 00:08:14.954
到目前为止还好吗
Good so far?

121
00:08:14.954 --> 00:08:16.730
太酷了
Cool.

122
00:08:16.730 --> 00:08:20.875
>> CMG 是九，零，不需要文档文件，但它是有用的东西，
&gt;&gt; CMG is nine, zero, it's not required
for dockerfile, but it's a useful thing,

123
00:08:20.875 --> 00:08:23.379
否则，它将会发生任何缺省情况。
otherwise, it's going
to default to whatever.

124
00:08:23.379 --> 00:08:27.000
>> ，前面的是什么，对吧 ?
&gt;&gt; Whatever the previous from is, right?

125
00:08:27.000 --> 00:08:29.201
你可以做的容器是设计来执行的，对吗 ?
And you can make containers that are like
are designed to have execute, right?

126
00:08:29.201 --> 00:08:31.899
Cuz ，我还能做 Docker ，我可以做 LS，对吧 ?
Cuz I can still do Docker run this and
I can do LS, right?

127
00:08:31.899 --> 00:08:36.019
它会覆盖那里，那是 CMD ，对吧 ?
And it'll overwrite that,
that's CMD in there, right?

128
00:08:36.019 --> 00:08:39.261
这些都是在这里做的
That's all that this does right here,

129
00:08:39.261 --> 00:08:44.567
它会覆盖任何 CMD ，因此您可以构建容器
is it overrides whatever the CMD is,
so you can build containers

130
00:08:44.567 --> 00:08:49.893
被设计用来过滤它们的指令对吧
that are designed to have commands
filtered into them, right?

131
00:08:49.893 --> 00:08:52.917
这么说有道理吗 好的
So it make sense?
Okay, cool.

132
00:09:03.083 --> 00:09:05.866
所以我要在这里说几个数字，对吧 ?
So it's annoying that I have
to say number here, right?

133
00:09:05.866 --> 00:09:10.575
就好像有名字就好了，所以
Like it'd be better if there
was like name for it, so

134
00:09:10.575 --> 00:09:14.190
那就这么做吧 Docker 建得好
let's do that, so docker build.

135
00:09:14.190 --> 00:09:19.275
而这里的秩序非常重要
And again,
the order here is quite important,

136
00:09:19.275 --> 00:09:23.485
我们要做的是标记我的节点应用程序
we're gonna do -- tag my-node app.

137
00:09:32.070 --> 00:09:35.148
现在它就会是速成的库
Now it's gonna be instant cuz
it's the exact same Dockerfile so

138
00:09:35.148 --> 00:09:36.840
一切都已经存在了
everything already exists.

139
00:09:36.840 --> 00:09:38.982
还在为你缓存这些层对吧
It still is caching all those layers for
you, right?

140
00:09:38.982 --> 00:09:40.227
所以它没有重做同样的事情。
So it doesn't redo the same thing.

141
00:09:42.371 --> 00:09:44.585
现在我有了我的应用程序 : 最新的，
And so now I have my-node-app: latest,

142
00:09:44.585 --> 00:09:47.360
它会自动把标签放在我们的上面
which it automatically puts
that tag on there for us.

143
00:09:48.460 --> 00:09:50.389
这些都是有效的
That it all just works.

144
00:09:52.890 --> 00:09:56.240
>> 是否要指定版本号，还是始终是最新的 ?
&gt;&gt; Do we have to specify the version
number or is it always gonna be latest?

145
00:09:56.240 --> 00:09:57.379
>> 如果未指定，
&gt;&gt; If you don't specify it,

146
00:09:57.379 --> 00:10:01.879
如果您指定了它，那么它将为您提供最新的信息。
It will give you latest,
if you do specify it then it wiil.

147
00:10:01.879 --> 00:10:03.720
> > 是否有很好的做法 ?
&gt;&gt; Is there a good practice for that?

148
00:10:03.720 --> 00:10:05.774
>> 您应该对容器进行版本处理。
&gt;&gt; You should version your containers,
yeah.

149
00:10:10.764 --> 00:10:13.490
但你可以看到标签是西方的，对吧 ?
But as you can see tags are the wild west,
right?

150
00:10:13.490 --> 00:10:15.659
你可以为所欲为
You can name them whatever you want and

151
00:10:15.659 --> 00:10:17.370
就像很多人都有不同的策略
like lots people have
various different strategies.

152
00:10:17.370 --> 00:10:18.919
但我想关键是
But I guess the key there is,

153
00:10:18.919 --> 00:10:22.418
我们只是想知道人们在做什么对吧
we just wanna be obvious about
what people are getting, right?

154
00:10:22.418 --> 00:10:23.328
他们就是这么想的
That's what they expect.

155
00:10:26.253 --> 00:10:31.928
那么，我们现在还是做这个，好，就是给你看，
So, let's actually even do that right now,
well, just to show you,

156
00:10:31.928 --> 00:10:38.059
Docker 运行 my-node-app ，现在就行了吗 ?
docker run my-node-app,
This now works right?

157
00:10:40.799 --> 00:10:44.970
但让我们说我又这么做了我们要建造它
But let's say I did this again and
we're gonna build it and

158
00:10:44.970 --> 00:10:45.870
我要放 1 号好吗
I'm gonna put :1, right?

159
00:10:45.870 --> 00:10:53.315
这是标记，然后我成功将它标记为我的节点应用程序 : 1.
So this is the tag, then I successfully
tag this as my-node-app:1.

160
00:10:53.315 --> 00:10:55.893
现在让我们改变这一点
Now let's go change this, so it says,

161
00:10:55.893 --> 00:10:59.970
让我们回到罗夫湖因为那也很有启发性
let's go back to rofl because
that was enlightening as well.

162
00:11:01.470 --> 00:11:06.799
根据布莱恩的理论，我们将把它放在那里，而不是 1个。
Philosophy according to Brian, and we're
going to put in there 2 now instead of 1.

163
00:11:07.993 --> 00:11:14.179
所以现在我可以进来说 docker 运行了我的应用程序 : 1，
So now I can come in here and
say docker run my-node-app: 1,

164
00:11:14.179 --> 00:11:19.662
如果我 2 岁我就会得到我的长袍
and I'll get omg hi lol and
if I do 2, I'll get rofl, so

165
00:11:19.662 --> 00:11:26.009
这就像是最基本的 " intro-to-dockerfile " ，对吧 ?
that's like the most basic
intro-to-dockerfiles, right?

166
00:11:26.009 --> 00:11:29.259
这显示了如何标记它们，如何构建它们，以及
That's showing you how to tag them,
how to build them, and

167
00:11:29.259 --> 00:11:31.739
最基本的指令集对吧
the most basic set of instructions, right?

168
00:11:31.739 --> 00:11:35.759
他们都有 FROM我们大多数人都要在我们的
All of them are gonna have a FROM,
most of us are going to be building our

169
00:11:35.759 --> 00:11:39.929
自己的基本形象别问我怎么做我自己都没做过
own base images and don't ask me how to,
cuz I've never done it myself.

170
00:11:39.929 --> 00:11:40.547
我没必要对吧
I've never needed to, right?

171
00:11:40.547 --> 00:11:45.000
我从没想过建造自己的 Ubuntu
I've never needed to build my own Ubuntu.

172
00:11:45.000 --> 00:11:47.759
讽刺的是我能更好地利用 Ubuntu
Canonical is much better
building Ubuntu that I am,

173
00:11:47.759 --> 00:11:50.889
就像比我好多了那是个笑话
just like mildly better than I am,
that's, that's a joke,

174
00:11:50.889 --> 00:11:53.220
Canonical 让 Ubuntu 我觉得他们比我强多了
Canonical makes Ubuntu I think
they're a lot better at it than I am.
