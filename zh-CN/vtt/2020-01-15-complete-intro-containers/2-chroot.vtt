WEBVTT

1
00:00:00.290 --> 00:00:08.529
所以一个容器，是一个三种不同的内核特征。
So a container, is kinda three
different kernel features put together.

2
00:00:08.529 --> 00:00:09.669
其中一个就是
One of them here is,

3
00:00:09.669 --> 00:00:14.359
我要说变革的根源，因为每次我讲 cha-root ，我都觉得很荒谬。
I'm gonna say change root because every
time I say cha-root, I feel ridiculous.

4
00:00:14.359 --> 00:00:17.760
但我知道大多数人都这么说
But I know most people
say that as cha-root.

5
00:00:17.760 --> 00:00:20.070
这就是其中的一个特点。
So that's one of the features.

6
00:00:20.070 --> 00:00:21.739
下一个功能部件将是名称空间，并且
The next feature will be name spaces, and

7
00:00:21.739 --> 00:00:24.341
然后，将控制 cha-root 或 c-groups。
then the feature after that will
be control cha-root or c-groups.

8
00:00:25.890 --> 00:00:29.109
这三种东西结合在一起形成了一个容器。
And these kind of three things
combined together form a container.

9
00:00:30.309 --> 00:00:33.899
这就是为什么我说没有一个集装箱的概念。
That's why I said there's no
one idea of a single container.

10
00:00:33.899 --> 00:00:38.009
这三个东西放在一起，让你做一个容器。
It's actually these three things put
together, allow you to make a container.

11
00:00:38.009 --> 00:00:38.509
好吗 ?
Okay?

12
00:00:39.679 --> 00:00:44.109
那么让我们从第一个和最明显的问题开始，如果我有两个
So let's start with the first and kind of
most obvious problem, that if I have two

13
00:00:44.109 --> 00:00:47.259
在同一主机操作系统上运行进程的人员。
people running processes on
the same host operating system.

14
00:00:47.259 --> 00:00:50.119
我如何确保他们看不到对方的档案
How can I make sure that they
can't see each other's files.

15
00:00:50.119 --> 00:00:53.530
所以如果我把我的秘密食谱下载到我的网页服务器上
So if I download like my secret
recipe unto my web server.

16
00:00:53.530 --> 00:00:57.229
我不知道为什么他们的秘密菜谱在他们的网站上
I don't why has their secret
recipe on their web server.

17
00:00:57.229 --> 00:01:00.719
似乎是个坏主意，但在这个例子里他们是这样做的。
Seems like a bad idea, but
in this example they do.

18
00:01:00.719 --> 00:01:03.600
但我想确保没人能看到集装箱
But I wanna make sure that no one
else can see into the container.

19
00:01:03.600 --> 00:01:06.849
我不希望任何一个容器里的任何人都能看到
And I don't want anyone inside of any
other container to be able to see out to

20
00:01:06.849 --> 00:01:08.245
其他的
other ones.

21
00:01:08.245 --> 00:01:12.305
这就是我们要用改变根或 Linux 监狱来做的事情。
So that's what we're gonna do
with change root or Linux jails.

22
00:01:12.305 --> 00:01:16.870
这就是你在一个特别的过程中被称为
That's what these used to be called as
you're jailing a process to a particular

23
00:01:16.870 --> 00:01:18.652
运行系统的一部分。
part of the operating system.

24
00:01:21.454 --> 00:01:23.715
所以，让我们先给它一次机会。
So, let's go ahead and give it a shot.

25
00:01:23.715 --> 00:01:27.359
因此，在此情况下，希望您安装 Docker 。
So, by this point hopefully
you have Docker installed.

26
00:01:27.359 --> 00:01:29.129
如果没有的话，请你这样做。
If not, please do that.

27
00:01:29.129 --> 00:01:33.319
我将会在 Docker内部进行这些操作。
I'm going to be doing
this all within Docker.

28
00:01:33.319 --> 00:01:36.759
原因是我现在就在 MacOS上
The reason being is that,
I'm running right now on MacOS.

29
00:01:36.759 --> 00:01:38.680
我的 MacOS 也没有同样的参数
And my MacOS doesn't
have the same parameters,

30
00:01:38.680 --> 00:01:40.590
因为它不是 Linux 内核，对吧 ?
because it is not a Linux kernel, right?

31
00:01:40.590 --> 00:01:44.909
它是一个基于 Unix 的内核， FreeBSD 之类的东西。
It's a Unix based kernel,
FreeBSD kind of stuff.

32
00:01:44.909 --> 00:01:47.650
所以我将从内部开始做这些
So I'm actually going to be doing
all these examples from within

33
00:01:47.650 --> 00:01:48.948
Docker 容器。
a Docker container.

34
00:01:48.948 --> 00:01:51.819
所以我要在集装箱内建造集装箱
So I'm gonna be building
containers within containers,

35
00:01:51.819 --> 00:01:56.805
就像容器一样，嵌套的虚拟化是人们喜欢的方法。
like containers all the way down, nested
virtualization as people like to call it.

36
00:01:56.805 --> 00:01:59.400
你也能做到这一点
And you can do this too.

37
00:01:59.400 --> 00:02:00.829
所以我要在这里复制这个命令
So I'm gonna copy this command right here.

38
00:02:00.829 --> 00:02:03.049
我向你保证
And I promise you by
the end of this course,

39
00:02:03.049 --> 00:02:09.580
你会明白这件事的具体内容
you will understand exactly what
this particular thing is doing.

40
00:02:09.580 --> 00:02:11.509
但现在只要相信我这一切就好了
But for now, just trust me
that all this is gonna do is,

41
00:02:11.509 --> 00:02:15.830
它会启动一个 Ubuntu 容器然后把我从里面掉进去
it's gonna start up a Ubuntu container and
then drop me inside of it.

42
00:02:17.389 --> 00:02:18.610
现在，您可以使用 iTerm 来执行此操作。
Now you can do this with an iTerm.

43
00:02:18.610 --> 00:02:21.960
您可以在您想要的任何仿真器中执行此操作。
You can do this within any
emulators you want to.

44
00:02:21.960 --> 00:02:25.360
但在 VS 码的队伍里我要给你展示尽可能多的 VS 码
But being on the VS code team, I'm gonna
show you as much VS code as I possibly can

45
00:02:25.360 --> 00:02:26.487
在他们把我赶出去之前先到这里来
get in here before they throw me out.

46
00:02:26.487 --> 00:02:27.183
好的。
Okay.

47
00:02:30.343 --> 00:02:32.557
我在 CSH里做这个
I'm actually doing this within CSH.

48
00:02:32.557 --> 00:02:36.389
但是，这不应该对您产生零差异，您可以处于 CSH 或 bash中。
But, this shouldn't make zero difference
to you, you can be in CSH or bash.

49
00:02:36.389 --> 00:02:40.060
我用螺钉试过这些命令都能起作用
I tried this in bolt and
all these commands will work both ways.

50
00:02:40.060 --> 00:02:44.127
所以我又复制了，不管它在哪里。
So I copied again, wherever it was.

51
00:02:47.610 --> 00:02:49.502
这里的指挥权
This command right here,

52
00:02:49.502 --> 00:02:55.362
docker run- it -- name docker-host --rm -- 特权 ubuntu : 仿生。
docker run- it -- name docker-host
--rm -- privilege ubuntu : bionic.

53
00:02:56.993 --> 00:02:58.159
把它粘在这里
Paste that in here.

54
00:03:02.610 --> 00:03:03.278
而且它应该
And it should,

55
00:03:03.278 --> 00:03:06.939
如果你还没拔起 Ubuntu Bioonic ，那么就需要第二次下载了。
if you don't already have Ubuntu Bionic
pulled, it will take a second to download.

56
00:03:06.939 --> 00:03:11.240
我想它就像 150 兆字节的兆字节
I think it's like 150-ish megabytes.

57
00:03:11.240 --> 00:03:12.560
我想我不记得了
It's my guess, I don't remember.

58
00:03:14.020 --> 00:03:18.629
你现在可以看到我在这根树根
You can see here now,
I'm in this root at something.

59
00:03:18.629 --> 00:03:21.629
所以如果你说猫的问题
So if you say cat /etc/ Issue,

60
00:03:21.629 --> 00:03:26.650
会告诉你你在 Ubuntu 18.04 3 LTS
it'll tell you that you
are in Ubuntu 18.04 3 LTS.

61
00:03:26.650 --> 00:03:29.639
这是个不错的诡计有时当你在容器里时
This is a nice trick,
cuz sometimes when you're in containers,

62
00:03:29.639 --> 00:03:32.189
你不知道你在 Linux 中的哪个分布
you don't actually know which
distribution in Linux you're in.

63
00:03:32.189 --> 00:03:35.759
这将告诉您在所有 Linux 发行版中，
This will tell you with across
all distributions of Linux which

64
00:03:35.759 --> 00:03:36.259
一个你的人
one you're in.

65
00:03:39.021 --> 00:03:43.819
如果您直接使用 Linux ，那么不必将其放入这样的容器中。
If you're using Linux directly, you don't
have to drop into a container like this.

66
00:03:43.819 --> 00:03:48.039
您可以直接在 Linux 中直接执行此操作，与 WSL相同。
You can just do this all directly
within Linux, same thing with WSL.

67
00:03:48.039 --> 00:03:50.920
如果你在 Windows 中，那么你就得在这里做同样的事。
If you're in Windows, then you're gonna
have to probably do the same thing here.

68
00:03:50.920 --> 00:03:53.009
所以我要尽快把它关到我的 Windows 计算机上
So I'm gonna switch over to my
Windows computer really quick,

69
00:03:53.009 --> 00:03:56.879
向你证明这其实也能从 PowerShell中实现。
just to show you that this actually
can be done as well from PowerShell.

70
00:03:58.067 --> 00:04:00.794
所以我要在这儿开个酒吧
So I'm gonna open the Start bar here and

71
00:04:00.794 --> 00:04:04.125
我只是想说 PowerShell 应该能打开它
I'm just gonna say PowerShell,
which should open this.

72
00:04:04.125 --> 00:04:07.905
您也可以在 Windows 终端中执行此操作，您可以在 VS 代码中执行此操作。
You can also do this within Windows
Terminal, you can do this within VS Code.

73
00:04:07.905 --> 00:04:10.455
我要直接从 PowerShell 应用程序中显示，因为我知道
I'm just gonna show you from the
PowerShell app directly, because I know

74
00:04:10.455 --> 00:04:12.414
都是你安装的因为我们为你安装了它
all of you have it installed,
because we installed it for you.

75
00:04:13.555 --> 00:04:16.745
实际上，让我们在 Windows 终端上做这个，但是
Well, let's actually do this
within the Windows Terminal, but

76
00:04:16.745 --> 00:04:18.776
您现在知道 PowerShell 应用程序的位置。
you now know where the PowerShell app is.

77
00:04:18.776 --> 00:04:22.168
所以我要把我复制的那个发送指令
So, I'm gonna take that send
command that I copied and

78
00:04:22.168 --> 00:04:26.887
在我的麦肯公司的 Powershell 上贴着我的麦片
pasted on my Mac here in the Powershell,
and I just paste that docker run -it

79
00:04:26.887 --> 00:04:31.060
--name docker-host --rm --特权ubuntu:仿生。
--name docker-host --rm
--privileged ubuntu:bionic.

80
00:04:31.060 --> 00:04:32.994
如果我跑了你可以看到这里
And if I run that, you can see here.

81
00:04:36.350 --> 00:04:38.319
我也在 Ubuntu
I'm in Ubuntu as well.

82
00:04:38.319 --> 00:04:40.269
这将在 PowerShell 中工作。
So this will work within PowerShell.

83
00:04:40.269 --> 00:04:43.409
事实上，对大部分的课程来说，这对你来说也应该是非常好的。
And actually for most of the course, this
should work pretty well for you as well.

84
00:04:45.735 --> 00:04:49.540
再次，不是 PowerShell 人员，我只想向您展示，
Again, not a PowerShell person,
I just want to show you that is available,

85
00:04:49.540 --> 00:04:50.379
工作的过程
that does work.

86
00:04:52.659 --> 00:04:57.000
好吧我现在就回麦克
Okay, I'm gonna go back to Mac now.

87
00:04:57.000 --> 00:04:59.500
回到我熟悉的电脑的舒适感
Back to the comfort of the computer
that I know much better.

88
00:04:59.500 --> 00:05:01.319
再在溶液里
So again in the solutions repo,

89
00:05:01.319 --> 00:05:04.579
其实我有个剧本要贯穿所有这些东西
I actually have a script that will
run through all of these things for

90
00:05:04.579 --> 00:05:08.430
你，这样你就可以运行这个脚本了，它会为你运行一切。
you, so that you can just run the script
and it'll run everything for you.

91
00:05:08.430 --> 00:05:09.629
但我们要用手来输入
But we're gonna type it by hand,

92
00:05:09.629 --> 00:05:11.870
因为我觉得用手创作这些东西是有用的
because I think it's useful to
create these things by hand.

93
00:05:13.269 --> 00:05:14.189
所以我们的目标是
So our goal here,

94
00:05:14.189 --> 00:05:18.420
这样你就可以看到我现在可以看到我的整个用户系统了
so you can see I can see my entire
user system right now if I type ls.

95
00:05:18.420 --> 00:05:19.569
这代表名单
Which stands for list.

96
00:05:21.831 --> 00:05:25.060
我想让它让我有一个只限于一个
I wanna get it so that I have
a process that's limited to one

97
00:05:25.060 --> 00:05:28.009
特定操作系统中的文件夹。
folder within my particular
operating system.

98
00:05:29.250 --> 00:05:35.949
所以我要做个新目录说我的新根
So I'm gonna make a new directory and
say, my new root.

99
00:05:39.733 --> 00:05:40.680
我们来吧
Let's do that.

100
00:05:42.840 --> 00:05:45.290
因此 mkdir ，表示 make 目录。
So mkdir, means make directory.

101
00:05:45.290 --> 00:05:47.980
因此，您可以在此处看到我的新根目录，因此
So you can see here now I have
this my-new-root directory, so

102
00:05:47.980 --> 00:05:52.759
我要去我的新树根
I'm going to CD into my-new-root.

103
00:05:52.759 --> 00:05:53.399
这里什么都没有
Nothing in here.

104
00:05:55.937 --> 00:06:01.677
现在我需要做的第一件事是，我不能只说 " 色变 " 。
Now the first thing I need to do is I
need to, I can't just say chroot.bash.

105
00:06:01.677 --> 00:06:05.714
所以你要告诉它你想把它限制在哪里，然后你告诉我
So you have to tell it where do you want
to be limited to, and then if you tell

106
00:06:05.714 --> 00:06:10.480
接下来要做什么我想在里面运行一个新的外壳
what to run afterwards, whether I
wanna run a new shell inside of that.

107
00:06:10.480 --> 00:06:15.149
如果我这么做就会说我不知道巴什在哪
If I do this it's gonna say,
I don't know where bash is, what is bash?

108
00:06:15.149 --> 00:06:16.841
因为这里没有巴什
Because there's no bash in here.

109
00:06:16.841 --> 00:06:20.514
所以你必须在这里制作一个操作系统的副本
So you actually have to make a copy of
the operating system inside of here,

110
00:06:20.514 --> 00:06:24.149
因为一旦它在这里你就不会在外面打电话了
because once it's inside of here,
you won't be calling outside of it.

111
00:06:24.149 --> 00:06:25.120
这真的不行
It literally can't.

112
00:06:25.120 --> 00:06:27.500
所以它找不到巴什它找不到
So it can't find bash, it can't find ls,

113
00:06:27.500 --> 00:06:30.129
它找不到所有通常都能得到的东西
it can't find all of these things
that would normally be available.

114
00:06:32.360 --> 00:06:33.529
所以我能做到
So I can do that.

115
00:06:33.529 --> 00:06:38.331
所以我可以说我要在这里看
So I can say, I'm gonna see
it out here and say copy from

116
00:06:38.331 --> 00:06:43.459
bin/bash，让我们看一下，我要在我的节点里面做一个目录。
bin/bash, let's see, I have to make
a directory inside of my node.

117
00:06:43.459 --> 00:06:49.730
首先我要说的是我的新菜鸟
First I'm gonna say,
mkdir inside of my-new-root/bin.

118
00:06:49.730 --> 00:06:53.981
我说的是 bin/bash 的副本
And I'm saying copy from bin/bash, and

119
00:06:53.981 --> 00:06:59.600
我要把它复制到我的新 root/bin/
I'm gonna copy that into my new root/bin/.

120
00:06:59.600 --> 00:07:05.069
所以现在如果我说了我的新秀 / bin，酷，现在就有 bash了。
So now if I say ls my-new-root/bin,
cool, now there's bash.

121
00:07:05.069 --> 00:07:12.064
我能说下我的新根
So can I say, chroot my-new-root/ bash,

122
00:07:12.064 --> 00:07:14.569
我还是不知道那是什么我不明白
cuz I still don't know what
that is I don't I don't get it.

123
00:07:16.209 --> 00:07:17.848
那我要怎么做
Well, what am I gonna do about that?

124
00:07:17.848 --> 00:07:23.899
原来你需要有一定数量的图书馆
Well it turns out, that you need
a certain amount of libraries.

125
00:07:23.899 --> 00:07:27.709
模块的库代码，这些模块
Library code of modules
that these particular

126
00:07:28.750 --> 00:07:31.970
进程和命令需要运行。
processes and commands need to run.

127
00:07:31.970 --> 00:07:32.939
所以如果你输入 ldd的话
So if you type ldd.

128
00:07:35.935 --> 00:07:38.120
Bin/bash。
Bin/bash.

129
00:07:38.120 --> 00:07:42.540
你可以在这里看到它所依赖的东西
You can see here,
here's all the stuff it depends on.

130
00:07:43.909 --> 00:07:45.639
所以你得把所有东西都带上
So you need to bring
all the stuff with us.

131
00:07:46.659 --> 00:07:51.590
所以我要在我的新树根里再做两个目录
So I'm gonna make another two
directories inside of my-new-root, and

132
00:07:51.590 --> 00:07:53.090
我要做一个叫利库的人
I'm gonna make one called lib.

133
00:07:53.090 --> 00:07:56.090
我还需要做一个叫做 " 64 " 的项目。
And I also need to make one called lib 64.

134
00:07:56.090 --> 00:08:01.053
现在我可以输入我的新 lib 库 64 或者我真的很聪明
Now I could type out my new lib,
lib 64 or I can get really clever and

135
00:08:01.053 --> 00:08:02.723
我可以用大撑
I can use curly brace.

136
00:08:02.723 --> 00:08:07.000
我可以用逗号来说明其中一个就是叫 " 利库"
I can put a comma, which means one
of them is just gonna be called lib.

137
00:08:07.000 --> 00:08:09.389
然后我再放一个这样的 64 个
And then I would put another
one called 64 like that.

138
00:08:11.110 --> 00:08:13.449
所以现在我要进入我的新根
So now if I go inside of my-new-root.

139
00:08:13.449 --> 00:08:15.223
你可以看到我有一个 lib 和一个 lib64
You can see I have a lib and a lib64.

140
00:08:15.223 --> 00:08:19.129
只是给你一些聪明的诡计
Just some clever bash tricks for you.

141
00:08:19.129 --> 00:08:22.660
你也可以输入利库然后 lib64
You can also just type out lib and
then lib64 after that,

142
00:08:22.660 --> 00:08:24.170
它也能正常工作
it will work just as well.

143
00:08:24.170 --> 00:08:24.670
有道理吗
Makes sense?

144
00:08:26.569 --> 00:08:29.129
现在我们在这里看到了这个 ldd
So, now we've seen this ldd up here for

145
00:08:29.129 --> 00:08:33.990
所以任何东西都没有路径你就可以忽略了
bash, so anything that doesn't have
a path up here you can just ignore.

146
00:08:33.990 --> 00:08:35.700
但这些有路径的人
But these ones here that do have paths,

147
00:08:35.700 --> 00:08:40.769
我们必须把所有这些都复制到我的新根目录里
we have to copy all of these into the
correct directories inside of my-new-root.

148
00:08:40.769 --> 00:08:44.309
我想说，复制，然后我就复制并粘贴这些内容。
So I'm gonna say, copy, and
then I'm just gonna copy and paste these.

149
00:08:45.980 --> 00:08:46.956
这个，复制那个。
For this one, copy that.

150
00:08:50.629 --> 00:08:54.822
收到复印这个
Copy that, copy that.

151
00:08:58.346 --> 00:09:02.756
我要把它复制到新的 root/lib中
And I'm gonna copy that
into my-new-root/lib.

152
00:09:02.756 --> 00:09:06.379
所以现在如果我看看利库里我的新根
So now if I look inside of
my-new-root inside of the lib,

153
00:09:07.769 --> 00:09:11.490
你可以看到这里有一堆我刚刚复制过来的东西
you can see here, it's got a bunch of
stuff in there that I just copied over.

154
00:09:11.490 --> 00:09:14.370
现在我们还有另一只会进入 lib64
Now we got one more here,
that's gonna go into the lib64.

155
00:09:14.370 --> 00:09:17.120
你可以告诉库兹我正在看他们在哪儿
You can tell cuz I'm just
looking at where they are here.

156
00:09:17.120 --> 00:09:20.440
我只是在模仿同样的目录结构。
And I'm just mimicking
the same directory structure.

157
00:09:20.440 --> 00:09:20.940
有道理吗
Does that make sense?

158
00:09:24.735 --> 00:09:27.990
所以我要把它复制到 lib64中
So I'm gonna copy that into lib64.

159
00:09:29.416 --> 00:09:34.341
所以如果你看看 lib64的内部
So now if you look inside of lib64.

160
00:09:34.341 --> 00:09:36.894
我们也会明白的
We get that as well.

161
00:09:37.970 --> 00:09:39.315
如果这不是显而易见的
And in case it's not obvious,

162
00:09:39.315 --> 00:09:42.279
lib64 位是 64 位，而 lib 的 lib64 位是 32 位。
lib64 is for 64 bit and
the lib by implicitly would be 32 bits.

163
00:09:42.279 --> 00:09:46.179
这就是流程的比特数。
Which is how many bits the processes are.

164
00:09:49.131 --> 00:09:54.159
所以现在理论上我应该说
So now in theory, I should be able to say,

165
00:09:54.159 --> 00:09:58.634
更改根 my-new-root/ bash。
change root my-new-root/ bash.

166
00:09:58.634 --> 00:10:01.090
你看
And look.

167
00:10:01.090 --> 00:10:05.269
现在我就在那个目录里面
Now, I am inside of bash,
inside of that directory.

168
00:10:05.269 --> 00:10:09.039
所以我想说我不知道那是什么
So if I type ls it's gonna say,
I don't know what that is.

169
00:10:09.039 --> 00:10:11.389
你什么都没有了
Cuz you don't have anything else.

170
00:10:11.389 --> 00:10:14.419
有些东西只是建在 Linus 内核里，所以我可以说 pwd
Some things are just built into
the Linus kernel, so I can say pwd for

171
00:10:14.419 --> 00:10:15.960
我所在的目录
what directory I'm in.

172
00:10:15.960 --> 00:10:21.620
您可以看到我在此特定项目的根目录中。
You can see that I'm in the root
directory of this particular project.

173
00:10:21.620 --> 00:10:23.000
我真的看不到其他的东西。
And I can't really see much else.

174
00:10:23.000 --> 00:10:25.328
所以我们还是去做吧，所以也都是工作的
So, let's actually go and
make it, so ls works as well so

175
00:10:25.328 --> 00:10:26.990
我们可以看到我们的目录里还有什么
we can see what else is in our directory.

176
00:10:29.558 --> 00:10:33.559
因此，如果您输入退出，将会使您脱离 cha-root 环境。
So if you type exit, that'll get you
out of the cha-root environment.

177
00:10:33.559 --> 00:10:34.807
这会把你送回 Ubuntu
This will drop you back into Ubuntu.

178
00:10:35.879 --> 00:10:40.090
你可以在这里看到我回来了
You can see here now I'm back in this.

179
00:10:40.090 --> 00:10:44.820
所以现在我要跟你说同样的事
So now I'm just gonna say the same thing
for, I'm gonna say copy /bin/ls and

180
00:10:44.820 --> 00:10:49.042
那我就把它复制到我的新 root/bin 中
then I'm gonna copy that
into my-new-root/ bin.

181
00:10:50.710 --> 00:10:55.946
所以现在我要把它复制到里面
So now that's gonna copy ls in there, and
I am gonna have to do the same thing for

182
00:10:55.946 --> 00:10:58.220
ldd /bin/ls。
ldd /bin/ls.

183
00:10:58.220 --> 00:10:59.929
一样的
Same thing.

184
00:10:59.929 --> 00:11:02.139
你会发现这些都是一样的
You'll notice that a bunch
of these are the same,

185
00:11:02.139 --> 00:11:04.490
我已经复制了其中的一些
that I've already copied
some of them over.

186
00:11:04.490 --> 00:11:05.799
所以让我们看看 lib的内部。
So let's just look inside of lib.

187
00:11:10.479 --> 00:11:14.870
你可以在这里看到我没有复制那个，所以我要复制那个。
So you can see here I haven't copied
that one, so I have to copy that one.

188
00:11:16.139 --> 00:11:22.537
把那个复制到我已经拥有的那个
So copy that into,
that one I already have.

189
00:11:22.537 --> 00:11:24.482
你能看到的
You can see that there.

190
00:11:24.482 --> 00:11:26.889
o.2 我有那个
so.2 I have that one.

191
00:11:26.889 --> 00:11:28.149
看来我也需要那个
Looks like I need that one as well.

192
00:11:29.250 --> 00:11:30.629
不不不
Nope, nope.

193
00:11:30.629 --> 00:11:32.059
是啊也许吧
Yes, maybe, yes.

194
00:11:32.059 --> 00:11:32.652
也就是那个
So that one too.

195
00:11:32.652 --> 00:11:37.490
或者你可以复制所有这些都不会造成伤害。
Or you could just copy all of them it
wouldn't do any harm either hurts.

196
00:11:37.490 --> 00:11:40.525
所以这就变成了我的新版本 /lib。
So that's going into my-new-root/lib.

197
00:11:42.268 --> 00:11:46.450
然后我们再看看我的新秀 / lib64
And then we'll look inside
of my-new-root/lib64.

198
00:11:46.450 --> 00:11:53.500
你可以看到我要复制而不是那个
And you can see here I'm gonna
have to copy, not that one.

199
00:11:53.500 --> 00:11:54.399
抱歉我来了
Sorry, there.

200
00:11:54.399 --> 00:12:02.860
所以现在我可以回去把我的新根
So, now I can go back into chroot
my-new-root/ bash back in here and

201
00:12:02.860 --> 00:12:07.019
理论上，我应该可以说，也找不到那个。
in theory, I should be able to say ls,
and it couldn't find that one.

202
00:12:07.019 --> 00:12:09.169
所以，让我们去确保那个也在那儿，我错过了一个。
So let's go and make sure that that
one is there as well, I missed one.

203
00:12:10.759 --> 00:12:11.259
就在那儿
That one right there.

204
00:12:14.134 --> 00:12:16.708
很高兴告诉我这好像我找不到这个图书馆
Very nice to tell me though,
it's like I can't find this library.

205
00:12:18.250 --> 00:12:23.937
把那个复制到我的新鲁特 / 利布里
So copy that one into
my-new-root/lib as well.

206
00:12:27.003 --> 00:12:29.673
现在你可以看到如果我输入
And now, you can see, if I type ls,

207
00:12:29.673 --> 00:12:34.240
我可以看到我的目录里面有什么。
I can actually see what's
inside of my directory.

208
00:12:34.240 --> 00:12:38.679
但如果你看在 pwd 里，你可以看到它认为它是最根目录的。
But if you look inside of pwd, you can see
it thinks it's at the most root directory.

209
00:12:38.679 --> 00:12:43.039
它无法摆脱这种情况，因此它没有概念。
It cannot get out of this, so
it has no concept what's going around it.

210
00:12:43.039 --> 00:12:44.549
它只能看到里面。
It can only see inside of this.

211
00:12:44.549 --> 00:12:49.335
它被关了，根也改了，所以叫查根
It's been jailed, or the root has
been changed, hence the name cha-root
