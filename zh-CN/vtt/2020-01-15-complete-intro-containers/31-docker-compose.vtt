WEBVTT

1
00:00:00.060 --> 00:00:04.392
所以现在你们所有人的好消息是我们对核心的
So the good news for all of you right now,
is that we're pretty much done with core

2
00:00:04.392 --> 00:00:08.602
Docker 功能，所以在此时，我想说的是
Docker functionality, so at this point,
you're pretty much I would say like

3
00:00:08.602 --> 00:00:12.087
Docker 的中间用户，我认为是非常酷的。
intermediate users of Docker,
which is pretty cool, I think.

4
00:00:12.087 --> 00:00:16.492
我们会有更多样的生态系统
We are gonna get into some more kind of
ecosystem type things, so the first thing

5
00:00:16.492 --> 00:00:20.833
我要讲的是像我们讲的多集装箱项目
I am going to talk about was like multi
container projects which we talked about

6
00:00:20.833 --> 00:00:25.007
以及如何将类似容器连接到此容器。
in networking, and how to connect like
this container to this container.

7
00:00:25.007 --> 00:00:27.696
但你能想象像另一个开发者一样
But can you imagine like trying
to get like another developer

8
00:00:27.696 --> 00:00:30.396
在你的团队里做我们刚刚做的事吗
in your team to kinda do the exact
same thing that we just did?

9
00:00:30.396 --> 00:00:33.508
就像一连串的九步，事情就会大错大错，
It would be like a series of like nine
steps and things would go wrong and

10
00:00:33.508 --> 00:00:34.521
是个问题吧
be a problem, right?

11
00:00:34.521 --> 00:00:38.188
如果我们能给它就好了，运行这个命令，
It would be better if we could just give
it like here, run this one command, and

12
00:00:38.188 --> 00:00:40.648
它会把所有你需要的容器都装起来
it's gonna set up all
the containers that you need.

13
00:00:40.648 --> 00:00:44.057
这就是 Docker Compose 会为我们做的事情，我们会在第二个方面谈论这个问题。
That's what Docker Compose is gonna do for
us and we'll talk about that in a second.

14
00:00:44.057 --> 00:00:47.462
然后我们要进入库伯内特
And then we're gonna get into
Kubernetes which is, deserves

15
00:00:47.462 --> 00:00:52.176
我们要去做最基本的 Kubernetes 的事情
three courses unto itself, so, we're going
to do the most basic Kubernetes thing so

16
00:00:52.176 --> 00:00:55.402
你能理解它的存在和对你的一切
that you can understand what it is and
what it does for you.

17
00:00:55.402 --> 00:00:59.218
然后我们就不去了你得去找
And then we're not gonna go any further
than that, you'll have to look for

18
00:00:59.218 --> 00:01:03.293
其他的课程如果你真的想深入库伯内特的话
other courses if you really are interested
into getting deep into Kubernetes.

19
00:01:03.293 --> 00:01:07.769
最后，我想介绍一些非 Docker 的技术，
Lastly, I wanted to introduce you to
some Non-Docker kind of technologies and

20
00:01:07.769 --> 00:01:11.593
我们会和 Buildah 和 Podman 一起去的然后我们就会结束
we'll get there with Buildah and
Podman, and then we'll wrap up.

21
00:01:11.593 --> 00:01:15.007
所以让我们继续进行 Docker
So let's go ahead and get into Docker

22
00:01:15.007 --> 00:01:20.215
这实际上可能
compose, This actually might

23
00:01:20.215 --> 00:01:23.611
是你们当中很多人在教室里走出去的最有用的东西之一。
be one of the most useful things that many
of you will walk away with this classroom.

24
00:01:23.611 --> 00:01:27.730
Docker 编写对于开发环境非常有用，
Docker compose is extremely useful for
development environments,

25
00:01:27.730 --> 00:01:30.078
对于生产环境，则较少。
less so for production environments.

26
00:01:30.078 --> 00:01:34.683
我们会有理由在这里说
And we'll get into reasons why here
in momentarily but suffice to say,

27
00:01:34.683 --> 00:01:38.137
大多数项目有一个或两个服务器或者至少两个
most projects have one or
two servers or at least two,

28
00:01:38.137 --> 00:01:40.466
两台正运行的服务器对吧
two plus servers running, right?

29
00:01:40.466 --> 00:01:43.260
您有一个数据库，可能有两个服务正在运行或类似的情况。
You have a database, maybe have two
services running or something like that.

30
00:01:43.260 --> 00:01:47.661
而这些都是 Docker 的集合，就像我们在网络上看到的东西一样，
And getting that all set up with Docker,
like we saw with the networking stuff,

31
00:01:47.661 --> 00:01:49.905
这很可能只是很烦人
it's possible, it's just annoying.

32
00:01:49.905 --> 00:01:54.384
Docker 组合允许您在此处显示此容器，此处是此容器，
Docker compose allows you to say here's
this container, here's this container,

33
00:01:54.384 --> 00:01:57.727
这里就是这个容器它们是如何相互交流的
here's this container,
here's how they talk to each other,

34
00:01:57.727 --> 00:02:01.718
现在把它们都转起来给我，然后用一个配置文件来做。
now spin them all up for me, and then
you do it with one configuration file.

35
00:02:01.718 --> 00:02:05.969
然后你说 Docker 会组成，它会为你做所有这些事情。
And then you say docker compose up,
it'll do all that stuff for you.

36
00:02:09.052 --> 00:02:12.792
那么 Docker 编写的文档上说，它适合
So, Docker compose says on its
documentation, it is suitable for

37
00:02:12.792 --> 00:02:17.134
生产环境，如果您基本有一个主机运行所有
production environments, if you have
like basically one host running all of

38
00:02:17.134 --> 00:02:20.709
你的容器大多数人都不知道
your containers, which for
the most part most people don't.

39
00:02:20.709 --> 00:02:23.960
我们有多台主机运行不同的容器，对吗 ?
We have multiple host running
our different containers, right?

40
00:02:23.960 --> 00:02:28.114
你不想被绑在一个主机上你想说这个
And you don't wanna be tied to one host,
you wanna be able to say scale this

41
00:02:28.114 --> 00:02:32.000
在这个问题上扔一百个容器
horizontally for me, throw a hundred
containers at this problem and

42
00:02:32.000 --> 00:02:36.562
你不能用 Docker Compose 来做到这一点
you can't do that with Docker Compose so
that's just something to keep in mind.

43
00:02:36.562 --> 00:02:41.593
如果您有生产环境，其中您需要多个容器
If you have a production environment
where you have many containers you want

44
00:02:41.593 --> 00:02:47.033
多个主机，您的解决方案将是 Kubernetes ，我们接下来就会进入。
multiple hosts, your solution will be
Kubernetes and we'll get into that next.

45
00:02:47.033 --> 00:02:50.521
Docker 组成的最有用的方法之一是非常有用的
One of the most useful things as well for
Docker compose it's very useful and

46
00:02:50.521 --> 00:02:53.752
持续集成，持续交付类型的情境。
continuous integration,
continuous delivery kind of situations.

47
00:02:53.752 --> 00:02:58.128
你可以说，嘿， Azure 管道或者特拉维斯 CI 之类的，
You can say, hey, Azure pipelines or
Travis CI or something like that,

48
00:02:58.128 --> 00:03:03.080
将所有这些不同的容器旋转，确保所有这些单元测试和
spin up all of these different containers,
make sure that all these unit tests and

49
00:03:03.080 --> 00:03:06.048
集成测试通过，然后将其向下旋转。
integration tests pass,
and then spin it down.

50
00:03:06.048 --> 00:03:11.963
Docker 的编写非常好让我们继续吧
Docker compose really good at that so
let's go ahead and get into it,

51
00:03:11.963 --> 00:03:17.777
所以我们从我们和我们一样的网络项目中
so let's do it from our same
networking project that we had with us,

52
00:03:17.777 --> 00:03:22.265
我要停止我的服务器如果它会响
I'm gonna stop my server here,
if it'll respond,

53
00:03:22.265 --> 00:03:27.870
它可能不会让我们继续
it might not So let's just go ahead and

54
00:03:27.870 --> 00:03:32.914
杀了它我现在要把我的所有容器都杀了
kill it, I'm gonna kill all of
my running containers right now,

55
00:03:32.914 --> 00:03:36.692
所以我要说 Docker 杀了 db 和黑体红
so I'm gonna say docker kill db and
bold rhodes.

56
00:03:39.730 --> 00:03:42.510
所以如果我看码头的话我现在一无所有了
So if I look at docker ps I have
nothing running right now, great.

57
00:03:46.731 --> 00:03:51.252
我们要在这个项目里做些什么
And what we're gonna do inside of this
particular project is we're gonna create

58
00:03:51.252 --> 00:03:54.383
网络内部的新文件，项目，对吧 ?
a new file inside of the networking,
Project, right?

59
00:03:54.383 --> 00:03:57.775
所以我们要用同样的方法
So we're gonna use the same one, and

60
00:03:57.775 --> 00:04:02.269
我们会打电话给这个码头的人
we're gonna call this docker-compose.yml,

61
00:04:08.116 --> 00:04:13.707
我把这个漂亮的粉色的小叮当容器
And for me I get this nice little pink
little docker container all right,

62
00:04:13.707 --> 00:04:17.649
所以你们很多人可能不熟悉 YAML 是什么，
so many of you may not be
familiar with what YAML is,

63
00:04:17.649 --> 00:04:20.963
如果你不是，对你好，我羡慕你。
if you're not, good for you, I envy you.

64
00:04:20.963 --> 00:04:25.562
我不是一个大型的 YAML 扇子，其他人发誓，爱它，
[LAUGH] I'm not a big YAML fan,
other people swear by it, love it,

65
00:04:25.562 --> 00:04:29.005
我称之为 " JSON 的 Python " 。
it's kind of like,
I call it the Python of JSON.

66
00:04:29.005 --> 00:04:32.896
把所有有明显白色空间的东西都给库兹
Cuz everything where there's
significant white space, and

67
00:04:32.896 --> 00:04:37.994
我不喜欢重要的空格，这只是我个人的意见。
I don't like significant white space,
that's just a personal opinion I hold.

68
00:04:37.994 --> 00:04:41.718
所以我们要去看看 YAML 到底是什么
So we're going to, and
we'll walk through what YAML is but

69
00:04:41.718 --> 00:04:46.944
基本上就像 JSON 没有所有不同语录之类的
basically it's like JSON without all of
the different quotes and stuff like that.

70
00:04:46.944 --> 00:04:49.968
所以我们将把这个 Docker 编写的文件整理成一个文件
So we're going to code together this
Docker compose file it's going to outline

71
00:04:49.968 --> 00:04:53.274
各种不同的容器是怎么连接在一起的对吧
how everything connects to each other all
the various different containers, right?

72
00:04:53.274 --> 00:04:56.682
所以说，这就是我所关心的各种不同的容器，
So it's going to say, here's all these
various different containers I care about,

73
00:04:56.682 --> 00:04:58.302
他们是如何相互联系的
here's how they connect to each other.

74
00:04:58.302 --> 00:05:03.067
所以首先要确认的是 Docker 的版本
So the first thing you have to identify
it to is what version of Docker

75
00:05:03.067 --> 00:05:05.502
你要用的是什么
compose are you going to be using.

76
00:05:05.502 --> 00:05:09.966
所以我们要用三，告诉我版二还可以
So we're going to be using three,
I'm told that version two is still fine

77
00:05:09.966 --> 00:05:13.064
就像那种反直觉的
to use like it that's kind
of counter intuitive for

78
00:05:13.064 --> 00:05:17.815
人们认为我应该用三，三是最新的，但是版本二，
people to think I should use three,
three is the latest one, but version two,

79
00:05:17.815 --> 00:05:22.742
它仍然有效，而且实际上还保留了它的两个版本。
it still works as well and they actually
still maintain version two of it as well.

80
00:05:22.742 --> 00:05:25.963
我没用，所以我不能告诉你什么是区别，但是
I don't use it, so I can't really
tell you what the difference is, but

81
00:05:25.963 --> 00:05:27.430
它就在外面还在工作
it is out there and still works.

82
00:05:27.430 --> 00:05:31.992
然后我们会说服务我们要把所有
And then here we're gonna say services,
we're going to identify all

83
00:05:31.992 --> 00:05:36.786
Docker 组成的各种不同服务将转至
the various different services that
Docker compose is going to spin up for

84
00:05:36.786 --> 00:05:40.215
我们都是不同的容器好吗
us, all the various different containers,
okay?

85
00:05:40.215 --> 00:05:43.831
所以这就是我说的他们的重要的空格
So this is what I'm talking about
with their significant whitespace, so

86
00:05:43.831 --> 00:05:46.862
我在这儿打了冒号就意味着我要给它
I hit colon here and
I'm just that means that I'm gonna give it

87
00:05:46.862 --> 00:05:49.951
做了很多事情然后你就得在这里缩进
multiple things after this and
then you have to indented here,

88
00:05:49.951 --> 00:05:53.606
如果你不去缩进 YAML 会觉得它是另一个顶级的东西
if you don't indented YAML is gonna
think it's another top level thing.

89
00:05:53.606 --> 00:05:57.656
所以我们要做一个叫做 " 网络容器 " 的
So we're gonna make one
called the web container and

90
00:05:57.656 --> 00:06:01.346
我们要做一个叫 db 容器的人
we're gonna make one
called The db container.

91
00:06:01.346 --> 00:06:05.841
Web 容器将是我们刚刚引用的项目
The web container is going to be our
project that we just quoted together with

92
00:06:05.841 --> 00:06:06.482
蒙戈 db
Mongodb.

93
00:06:06.482 --> 00:06:10.110
所以我们要告诉它 Docker 文件在哪里
So, we're gonna tell it,
where it's docker file is and

94
00:06:10.110 --> 00:06:14.721
在此处需要构建 Docker 组成文件所在的位置，
where it needs to build it which is
here where the docker compose file is,

95
00:06:14.721 --> 00:06:20.264
您还可以在 Docker 文件所在的位置指定 ./Dockerfile 。
you could also say like ./Dockerfile you'd
be pointing to where the Docker file is.

96
00:06:20.264 --> 00:06:24.600
但如果你把它装在同一目录里有一个 Docker 文件
But if you just put it means there's
a Docker file in the same directory as

97
00:06:24.600 --> 00:06:26.247
此 Docker 组成文件。
this Docker compose file.

98
00:06:26.247 --> 00:06:28.228
> > 它会自动查找的。
&gt;&gt; It's gonna automatically look for it.

99
00:06:28.228 --> 00:06:32.415
>> 确切地说，你知道你关心的是什么港口，在这里，
&gt;&gt; Exactly and you tell what ports
that you care about, and here,

100
00:06:32.415 --> 00:06:36.923
你可以把它像个子弹一样，对，有点像个标记。
you can give it like a bullet of list,
right, kinda like mark down.

101
00:06:36.923 --> 00:06:41.091
所以我们要把这些港口的清单给它建个清单
So we're gonna give it a build to list of
what ports will be on and expose where,

102
00:06:41.091 --> 00:06:46.221
我们说 3000:3000，这就是你怎么用 Docker 来运行的，对吧 ?
let's say 3000:3000, that's very much how
you would run that with Docker, right?

103
00:06:46.221 --> 00:06:49.685
当它暴露在 3000 端口 3000 的时候。
When it exposed Port 3000 on 3000.

104
00:06:51.740 --> 00:06:55.590
我们要去做卷
Here, we're gonna do volumes,

105
00:06:55.590 --> 00:07:00.264
就像我们之前说的
just like we were talking about before,

106
00:07:00.264 --> 00:07:04.261
如何把我们的代码连接到这个
of how to connect our code to this.

107
00:07:04.261 --> 00:07:09.509
所以我们要做的第一件事就是
So the first thing that we're
gonna do on this one is we're

108
00:07:09.509 --> 00:07:14.338
我们的代码是存在的 : 家庭/节点 / 代码。
gonna say our code exists
at .: home/node/code.

109
00:07:14.338 --> 00:07:19.324
把我们的集装箱里的所有东西都暴露在我们的整个密码库里
So expose everything inside of our
container like our entire code base

110
00:07:19.324 --> 00:07:24.394
就会把我们的代码装进去
inside at home node code, so this is
going to mount our code into there so

111
00:07:24.394 --> 00:07:27.542
那我们就可以写代码了吧
that then we can keep writing code, right?

112
00:07:27.542 --> 00:07:33.100
>> 在 Docker 文件中等于单词目录，
&gt;&gt; And that equals word
directory in a Docker file,

113
00:07:33.100 --> 00:07:35.093
其中- >> 就像绑定安装，
where-
&gt;&gt; It's like a bind mount,

114
00:07:35.093 --> 00:07:36.930
它是一种捆绑式的安装，实际上它是什么。
it's a bind mount, is actually what it is.

115
00:07:41.177 --> 00:07:46.018
然后我们要告诉它 home/node/code/node_modules，
And then we're gonna tell it that
home/node/code/node_modules,

116
00:07:46.018 --> 00:07:47.692
把它分开处理
treat that separately.

117
00:07:52.930 --> 00:07:57.918
基本上我们说的是不要带你的模块，你需要的是
And basically what we're saying is don't
bring over the node_modules, cuz you need

118
00:07:57.918 --> 00:08:02.165
把它安装在里面，然后你告诉它，它是有联系的。
to install it inside of there, and
then when you tell it, this is linked.

119
00:08:02.165 --> 00:08:04.420
所以链接，链接到数据库，
So links, this is linked to db,

120
00:08:04.420 --> 00:08:09.446
这意味着我知道这两个集装箱必须相互沟通
which means that I know these two
containers need to talk to each other.

121
00:08:09.446 --> 00:08:14.608
另一个问题是，因为它知道首先是联系，它将首先启动数据库，
And the other thing is, because it knows
links first, it's gonna start db first,

122
00:08:14.608 --> 00:08:18.886
因为如果您尝试启动 Web Service ，首先它将查找
because if you try and start the web
service first it's gonna look for

123
00:08:18.886 --> 00:08:22.307
蒙哥 DB 找不到它会崩溃的对吧
MongoDB and not find it and
it's gonna crash, right?

124
00:08:22.307 --> 00:08:26.417
所以说你看 db，我先启动数据库，等待
So it's gonna say, you depend on db,
I'm gonna start db first, wait for

125
00:08:26.417 --> 00:08:27.786
从那开始
that to finish starting,

126
00:08:27.786 --> 00:08:31.427
然后我就开始网络了一切都能从正确的顺序开始
then I'll start web so that everything
can start in the right order.

127
00:08:34.799 --> 00:08:39.979
还有一件东西在他们提供的地方
And then one more thing
underneath links where they give

128
00:08:39.979 --> 00:08:47.149
它的环境变量，即 MONGO_CONNECTION_，
it the environment variable of where
to go, which is MONGO_CONNECTION_,

129
00:08:49.962 --> 00:08:56.573
STRING: mongodb://
STRING: mongodb://

130
00:08:56.573 --> 00:09:01.969
Db :27 017。
Db:27 017.

131
00:09:09.787 --> 00:09:12.851
现在你会为你的各种微型服务做这些
Now, you would go do this for
all your various micro services, or

132
00:09:12.851 --> 00:09:16.422
前端服务或所有正在构建的不同容器
front end services or all the different
containers that you are building and

133
00:09:16.422 --> 00:09:18.674
开始，为了分贝，更简单。
starting up, for dB,
it's much more simple.

134
00:09:18.674 --> 00:09:23.826
我们看到了一个我们希望它运行的图像
We've seen a pointed at which
image that we want it to run,

135
00:09:23.826 --> 00:09:27.727
我们要做的就是图像 : 3。
which for us is gonna be image: mongo:3.

136
00:09:27.727 --> 00:09:31.023
这将会很聪明地把它从 Docker Hub上取下来
And that's gonna be smart enough
to go get that off a Docker Hub,

137
00:09:31.023 --> 00:09:35.173
作为 RDB 容器开始运行，这是另一种深兔洞，
start running it as RDB containers, this
is another kind of deep rabbit hole of,

138
00:09:35.173 --> 00:09:38.797
您可以做的事情， Docker - 撰写可以为您做一些事情。
things you can do, Docker-compose
can do quite a few things for you.

139
00:09:38.797 --> 00:09:42.567
这是最基本的版本。
This is pretty much the most
basic version of that for this.

140
00:09:44.725 --> 00:09:46.777
好吧我在哪儿
All right, so where am I?

141
00:09:46.777 --> 00:09:53.953
我进了集装箱我要回去联网
I am in into the container, so
I'm gonna go back into networking,

142
00:09:53.953 --> 00:10:01.018
我要说码头上的破折号很重要
and I'm gonna say docker-compose,
that dash is important up.

143
00:10:01.018 --> 00:10:04.121
在我们做这件事之前还有一件事
So one more thing before we run this,

144
00:10:04.121 --> 00:10:09.642
我在这里忘了一个主要的斜杠，所以需要 /home/node/code。
I forgot a leading slash here,
so you need /home/node/code.

145
00:10:09.642 --> 00:10:14.553
那么点，就像这样重复一次，这里的点说
So dot and just to kind of run through
that again, the dot here says that

146
00:10:14.553 --> 00:10:19.634
这将会把所有东西都纳入 Docker 的目录中
this is going to take everything in
the directory of the Docker compose,

147
00:10:19.634 --> 00:10:23.966
你可以做我不知道的事
and you could have done I don't know,
the whole path which for

148
00:10:23.966 --> 00:10:27.409
我就会一直这样对吗
me would have been it would
have been this right?

149
00:10:27.409 --> 00:10:34.750
所以我可以把所有这些都复制到那里
So I could have copied all of that And
put that right there, I do

150
00:10:34.750 --> 00:10:38.527
而不是建议这样做，因为很明显，这对你的电脑很特别。
not suggest doing that, because obviously
that's very specific to your computer.

151
00:10:38.527 --> 00:10:43.193
您想说的是 Docker 组成的目录中的所有内容
What you wanna say is everything inside of
this directory where the Docker compose

152
00:10:43.193 --> 00:10:46.788
文件是，在容器中的 /home/node/code 中安装该文件。
file is, mount that in
the container at /home/node/code.

153
00:10:46.788 --> 00:10:49.491
我忘了这个
And I had forgotten this leading slash,

154
00:10:49.491 --> 00:10:52.998
一定要把那个引领人带在那儿好吗
make sure you have that
leading slash there, okay?

155
00:10:52.998 --> 00:10:58.533
然后我们会说 Docker
And here we're gonna say Docker compose up

156
00:11:02.696 --> 00:11:04.780
这应该能让我们的整个环境工作。
And this should get our
entire environment working.

157
00:11:04.780 --> 00:11:09.355
好了，你运行 Docker 编写，并且有一堆输出和
Okay, so you ran Docker compose up,
and you got a bunch of output and

158
00:11:09.355 --> 00:11:13.219
你会注意到的第一件事就是这些 db_1
the first thing you'll notice
here is all these db_1.

159
00:11:13.219 --> 00:11:16.591
那么， Docker 编写的好东西是您可以实际运行多个版本的
So, the nice thing about Docker compose is
you can actually run multiple versions of

160
00:11:16.591 --> 00:11:19.914
同样的容器我也不会告诉你怎么和 Mongo cuz 一起去
the same container, I'm not gonna show you
how to do that with Mongo cuz then have to

161
00:11:19.914 --> 00:11:22.788
担心分片和副本集以及主项和辅助卷。
worry about sharding and replica sets and
primaries and secondaries.

162
00:11:22.788 --> 00:11:27.403
但是 db_1 意味着它意味着它是第一个不同类型的
But that's what the db_1 means it means
it's the first of those various different

163
00:11:27.403 --> 00:11:28.835
容器正在运行，并且
containers running, and

164
00:11:28.835 --> 00:11:32.232
如果它看起来熟悉的都是 MongoDB 的输出，对吧 ?
if it looks familiar to it's
all the MongoDB output, right?

165
00:11:34.687 --> 00:11:38.639
你可以在这里看到它实际上接收到一个客户端连接
So you can see here at this point it
actually receives a client connection

166
00:11:38.639 --> 00:11:42.784
从驾驶员 node.js 开始，第三点是第三点，
from driver node.js, and it's running
the three point three point five,

167
00:11:42.784 --> 00:11:44.942
是我们安装的驱动器。
driver which is one that we installed.

168
00:11:44.942 --> 00:11:48.363
它来自 Linux ，它是 Node JS V12 ，是对的，
It's from Linux and
it's Node JS version 12, which is right,

169
00:11:48.363 --> 00:11:50.177
这就是我们所做的
that's the one that we've made.

170
00:11:50.177 --> 00:11:53.628
然后你可以在下面的 web_1中看到
And then you can see down here at web_1,

171
00:11:53.628 --> 00:11:57.480
这是我们写的服务器的输出。
this is the output of our
server that we wrote.

172
00:11:57.480 --> 00:12:01.490
所以现在理论上我应该可以点击这个
So now in theory I should be
able to click on this and

173
00:12:01.490 --> 00:12:08.033
打开这个链接，这看起来很熟悉吗 ?
open this link, And
this looks very familiar to right?

174
00:12:08.033 --> 00:12:13.192
这是我们刚刚在网络上写的另一个应用
This is the other app that
we just wrote in networking,

175
00:12:13.192 --> 00:12:16.905
所以如果我加进去然后再回来
so if I go add, and then come back here.

176
00:12:16.905 --> 00:12:20.250
你注意到所有东西都在工作所以这些都是
You notice that everything is working,
so these are the logs coming

177
00:12:20.250 --> 00:12:24.488
从我们的 Node JS 应用程序中的前一个网络章节中写入的内容。
from our Node JS application that we wrote
right in the previous networking chapter.

178
00:12:24.488 --> 00:12:27.327
如果你能来这里
And if you would come over here and

179
00:12:27.327 --> 00:12:32.514
就像 /ad 一切都一样对吧
do like /ad everything is working
the same expect it right?

180
00:12:32.514 --> 00:12:34.274
就像在 3000 口工作一样
So like it's working on port 3000,

181
00:12:34.274 --> 00:12:36.716
这是我们在 Docker 编写文件中告诉它执行的操作。
which is what we told it to do
in the Docker compose file.

182
00:12:36.716 --> 00:12:38.850
如果我们来这里说这一点
And if we come over here and
say go to this,

183
00:12:38.850 --> 00:12:42.028
你可以看到数 : 11 一切都一样
you can see count: 11 everything's
working the same way.

184
00:12:42.028 --> 00:12:44.928
但不需要手动将所有内容连接到网络和
But instead of having to connect
everything manually to a network and

185
00:12:44.928 --> 00:12:48.279
说，好吧，这个容器跟这个讲，它是在这个网络上做的，
say like, okay, this container talks to
this one, it does it on this network,

186
00:12:48.279 --> 00:12:50.498
那你就不用再这样了
blah blah blah,
you don't have to do that anymore.

187
00:12:50.498 --> 00:12:54.594
我们可以通过制作一个 Docker 的 post 文件来做到这一点
We can do that just by making a Docker
post file that says, this container does

188
00:12:54.594 --> 00:12:58.393
这个这个容器是这样做的，这些都是联系在一起的。
this, this container does this, and
these ones are linked together.

189
00:12:58.393 --> 00:13:01.981
然后 Docker 只为您自己处理所有网络业务。
And then Docker just handles all of
the networking business for you by itself.

190
00:13:05.541 --> 00:13:07.053
我是个大粉丝如果你不知道
I'm a big fan, if you can't tell,

191
00:13:07.053 --> 00:13:09.134
所有与 Docker 合作的人都组成了
everything's working
with docker compose up.

192
00:13:09.134 --> 00:13:11.543
你刚刚跟你的同事分享了你的 Docker 文件
You just shared your docker
compose file with your co-workers,

193
00:13:11.543 --> 00:13:14.214
和你的队友合作他们可以说 Docker 是自己组成的
with your teammates and they can just
say docker compose up themselves,

194
00:13:14.214 --> 00:13:17.229
他们不一定要了解所有东西是怎么连接在一起的
they don't necessarily have to understand
how everything connects together.

195
00:13:17.229 --> 00:13:19.880
他们不需要与 Docker 联网进行手动交互
They don't have to manually
interact with docker networking,

196
00:13:19.880 --> 00:13:22.347
所有事情都是在幕后发生的
everything just kinda happens for
them behind the scenes.

197
00:13:22.347 --> 00:13:25.865
只要你现在需要，需要知道如何设置它，然后你就完成了。
Just you now need, needs to know how
to set it up and then you're done.
