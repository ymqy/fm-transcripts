WEBVTT

1
00:00:00.270 --> 00:00:03.601
因此，下一部分是层。
So the next section is layers.

2
00:00:03.601 --> 00:00:06.049
我们要谈一下建筑的性能。
And we're gonna talk a little
bit about build performance.

3
00:00:06.049 --> 00:00:09.330
这不是你需要担心的事情
Which is not something you have to
worry an enormous amount about.

4
00:00:09.330 --> 00:00:12.095
但我要告诉你当你开发这个应用的时候
But I will tell you that while
you're developing this app,

5
00:00:12.095 --> 00:00:13.762
每次您更改文件时。
every time that you a change a file.

6
00:00:13.762 --> 00:00:16.809
这是项目内部的文件已更改，是吗 ?
This is a file inside of
the project is changed, right?

7
00:00:18.512 --> 00:00:23.224
所以说我决定了，这个应该是五千，而不是 3000，对吧 ?
So let's say I decided, this should
run on 5000 instead of 3000, right?

8
00:00:23.224 --> 00:00:25.289
我要去改变这个
And I go in and change that.

9
00:00:25.289 --> 00:00:29.679
现在，如果我再次运行 Docker 构建，那么它将转至类似的点，
Now if I run Docker build again,
it is going to go to the points like okay,

10
00:00:29.679 --> 00:00:33.575
这个没有改变，这个没有改变，这个没有改变，
this didn't change, this didn't change,
this didn't change,

11
00:00:33.575 --> 00:00:35.710
这个没有改变，这个没有改变，这个没有改变。
this didn't change, this didn't change,
this didn't change.

12
00:00:35.710 --> 00:00:38.515
在这里这条线 COPY 这条线
Right, here, this line, COPY, this line.

13
00:00:39.524 --> 00:00:42.414
因为档案系统是不同的
Because the file system is
different it takes a quick hash of

14
00:00:42.414 --> 00:00:43.225
就像以前的样子
what it looked like before.

15
00:00:43.225 --> 00:00:45.994
就好像他们改变了什么
It's like, they changed something.

16
00:00:45.994 --> 00:00:48.426
从这里开始就开始了对吧
So it's gonna start from this
instruction right here, right?

17
00:00:48.426 --> 00:00:52.505
所以这些只使用以前所有的缓存层，对吧 ?
So these ones that just uses all
the cached layers from before, right?

18
00:00:52.505 --> 00:00:53.469
我给你看了这些数字
I showed you those numbers.

19
00:00:53.469 --> 00:00:56.246
就从这里开始但这事有多烦人
It just starts here, but
what's annoying about this is,

20
00:00:56.246 --> 00:01:00.000
它会把它复制过来然后那之后它会立即运行什么呢
is that it'll copy this over and then
what does it run immediately after that?

21
00:01:01.070 --> 00:01:06.349
npm 安装占用了很多时间，使用了带宽，并且是浪费的权利吗 ?
npm install which takes a lot of time,
uses bandwidth, and it's wasteful right?

22
00:01:06.349 --> 00:01:11.370
如果我们能在晚上进行 npm 的安装，然后再进行复制，岂不是很棒吗 ?
Wouldn't it be nice if we could just
run npm install and then do the copy?

23
00:01:11.370 --> 00:01:14.069
这就是一层层的想法。
That's kind of the idea here with layers.

24
00:01:14.069 --> 00:01:17.319
就好像你是按秩序来考虑的对吧
As if you think about things
in the proper order, right?

25
00:01:17.319 --> 00:01:21.200
然后，您可以利用此高速缓存来利用以下事实 :
Then you can leverage this caching to be
able to take advantage of the fact that

26
00:01:21.200 --> 00:01:21.960
这将进行高速缓存。
this is cached.

27
00:01:23.870 --> 00:01:26.609
所以我现在就去做同样的项目
So, I'm just gonna do this on
the same projects right now.

28
00:01:26.609 --> 00:01:29.969
有一层，这也比较是一样的。
There's a layers,
this is relatively the same thing.

29
00:01:29.969 --> 00:01:34.210
所以我要留在这里更复杂的节点项目
So I am just gonna stay here in
the more complicated node project.

30
00:01:35.590 --> 00:01:37.859
所以在 WORKDIR 中他们会来这里
So here in WORKDIR,
they are going to come in here and

31
00:01:37.859 --> 00:01:39.479
我们要先在这儿复印一份
we are gonna do a copy here first.

32
00:01:39.479 --> 00:01:40.481
所以我们要复印两份
So we're gonna do two copies.

33
00:01:40.481 --> 00:01:46.020
我要说副本， --chown node:node。
I'm gonna say copy, --chown node:node.

34
00:01:46.020 --> 00:01:53.430
我要把 package-lock.json 和
And I'm gonna copy
the package-lock.json and

35
00:01:53.430 --> 00:01:59.989
Package.json 到这里对吧
the package.json to here, right?

36
00:01:59.989 --> 00:02:02.090
你得把这个斜杠放在那个目录里，对吧 ?
You have to put the slash that to know
to put it in the directory, right?

37
00:02:05.319 --> 00:02:08.319
好吧那我就去参加晚上的工作
Okay then I'm gonna run npm ci.

38
00:02:08.319 --> 00:02:13.349
我要在这之后再做任何事
RUN npm ci, and
then I'm gonna do everything after that.

39
00:02:13.349 --> 00:02:17.129
我只是想说副本节点 : 节点，时间段，时间段，对吗 ?
I'm just gonna say copy node:node,
period, period, right?

40
00:02:17.129 --> 00:02:17.716
我要摆脱这一切
And I'm gonna get rid of this.

41
00:02:20.210 --> 00:02:22.218
现在，这个问题变得更加复杂了。
Now, this made this a little
bit more complicated.

42
00:02:22.218 --> 00:02:24.894
但现在我改变我的档案
But now any time I change one of my files,

43
00:02:24.894 --> 00:02:29.729
它会保留 npm 的高速缓存层对吧
it's gonna keep that cached
layer of npm installs, right?

44
00:02:29.729 --> 00:02:32.473
所以我要开车回家
So just to drive home my point,

45
00:02:32.473 --> 00:02:37.661
我要做船坞的建造或者建码头对吧
I'm gonna do docker run build,
or docker build, right?

46
00:02:40.966 --> 00:02:42.810
所以它会先运行一次，对吧 ?
So it's gonna run the ci one first, right?

47
00:02:42.810 --> 00:02:47.300
我只是改变了所有这些东西的顺序。
Cuz it hasn't done that yet cuz I just
changed the order of all that stuff.

48
00:02:47.300 --> 00:02:50.009
现在让我们做个改变，我把这个改成了 5000。
Now let's go ahead and change this,
I changed this to 5000.

49
00:02:50.009 --> 00:02:51.891
我们把它改回 3000吧
Let's change it back to 3000.

50
00:02:51.891 --> 00:02:55.969
先前，它将再次完成 npm 安装。
Previously, it would have
done the npm install again.

51
00:02:57.240 --> 00:02:59.293
但如果我这么做再做一次
But now if I just do this and do it again,

52
00:02:59.293 --> 00:03:02.299
通知就在最后就被复制了对吧
notice it just skips right to
the copy at the end, right?

53
00:03:02.299 --> 00:03:03.685
重建速度非常快。
And that rebuilt really fast.

54
00:03:03.685 --> 00:03:08.050
>> 这是因为软件包锁或包 json 没有更改吗 ?
&gt;&gt; Is that because package lock or
package json did not change?

55
00:03:09.060 --> 00:03:12.199
>> Right，在 package.json 或包锁定中未更改任何内容。
&gt;&gt; Right, I didn't change anything
in package.json or package lock.

56
00:03:12.199 --> 00:03:15.210
一旦我改变了某件事就会再次出现
As soon as I change something in there,
then it'll run that step again.

57
00:03:15.210 --> 00:03:17.340
> > 所以它已经知道它是有条件的
&gt;&gt; So it already knows it's
kinda conditional on that.

58
00:03:17.340 --> 00:03:18.280
> > 是。 >> 进来。
&gt;&gt; Yeah.
&gt;&gt; Come in.

59
00:03:18.280 --> 00:03:21.649
>> Right，假定没有变化，那么这是 -
&gt;&gt; Right, it assumes if nothing changed,
then this is-

60
00:03:21.649 --> 00:03:22.189
>> 现在使用高速缓存。
&gt;&gt; Now with the cache.

61
00:03:22.189 --> 00:03:24.759
>> Right，它关于高速缓存，您将获得高速缓存命中。
&gt;&gt; Right, it's about cache,
you'll get a cache hit.

62
00:03:24.759 --> 00:03:28.090
有道理
That makes sense.?

63
00:03:28.090 --> 00:03:29.620
>> 所以顺序非常重要。
&gt;&gt; So the order is really important.

64
00:03:29.620 --> 00:03:32.120
> > 非常，对，对，就像洋葱一样，对吧 ?
&gt;&gt; Very, yep, cuz it's,
it's like an onion, right?

65
00:03:32.120 --> 00:03:34.920
它是在层层之上的层之上的层之上的建筑层。
It's building layers on top of layers
on top of layers on top of layers.

66
00:03:34.920 --> 00:03:36.949
Docker 容器是这样工作的。
That's how Docker containers work.

67
00:03:36.949 --> 00:03:38.500
想想就很聪明，对吧 ?
It's really clever when
you think about it, right?

68
00:03:38.500 --> 00:03:40.020
它是可重复的
Cuz it's repeatable.

69
00:03:40.020 --> 00:03:42.650
所以这事最让人担心的对吧
So the one concern with this, right?

70
00:03:42.650 --> 00:03:46.810
特别是，如果您的 CI 系统正在维护 Docker 高速缓存。
In particular, if your CI system
is maintaining a Docker cache.

71
00:03:46.810 --> 00:03:49.060
事实上，其中许多人并不是出于这个原因。
Many of them don't,
actually, for this reason.

72
00:03:49.060 --> 00:03:51.057
如果有安全的补丁就会发生的对吧
Is that, what happens if there's
a security patch, right?

73
00:03:51.057 --> 00:03:54.719
所以说我在这里看我的 package.json。
So let's say I'm looking
here at my package.json.

74
00:03:54.719 --> 00:03:56.227
我哈皮 18.4
I have hapi 18.4.

75
00:03:56.227 --> 00:04:00.490
比如说 18.4.1 是吧 ?
Let's say 18.4.1 comes out, right?

76
00:04:00.490 --> 00:04:03.580
如果我现在做个晚上的安装我会明白的对吧
If I do an npm install right now,
I would get that, right?

77
00:04:03.580 --> 00:04:08.917
因为这里是一个相对的版本，这就是这个照护者的意思。
Because this is a relative version here,
that's what the caret means.

78
00:04:08.917 --> 00:04:12.250
但我要把那个缓存的 Docker 层
But I'll have that cached Docker
layer that it won't pick up that,

79
00:04:12.250 --> 00:04:15.275
cuz 它不是在运行 npm-重新安装，对吧 ?
cuz it's not running npm-install again,
right?

80
00:04:15.275 --> 00:04:20.204
因此，在此意义上，您可以从该特定透视图中获取旧高速缓存。
So in that sense, you can get a stale
cache from that particular perspective.

81
00:04:20.204 --> 00:04:21.324
它通常只影响到您的开发。
It usually only affects
you in development.

82
00:04:21.324 --> 00:04:25.697
我不太在意我是否得到安全贴补
And I don't really care if I
get a security patch when I'm

83
00:04:25.697 --> 00:04:27.345
在本地运行。
running it locally.

84
00:04:27.345 --> 00:04:30.204
可能是一千九百次
999 times out of 1,000 probably.

85
00:04:30.204 --> 00:04:34.355
但你应该知道这事也许会发生在你身上
But it's just something you should
know that might be happening to you.
