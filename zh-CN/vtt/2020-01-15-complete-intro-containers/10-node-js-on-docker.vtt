WEBVTT

1
00:00:00.440 --> 00:00:04.820
因此，我们将在 Docker 上运行 node.js ，因为我是一个节点开发者，并且
So we're gonna move on to node.js on
Docker because I'm a node developer and

2
00:00:04.820 --> 00:00:07.549
我喜欢这样你就卡住了我有麦克风
that's what I like, and so
you're stuck cuz I have the microphone.

3
00:00:08.570 --> 00:00:11.089
但我要教你的一切都很顺利
But pretty much everything that
I'm gonna teach you here, one,

4
00:00:11.089 --> 00:00:12.820
你根本不需要知道这么多的节点
you don't really need
to know Node that much.

5
00:00:12.820 --> 00:00:16.719
我要给你所有的密码并不一定要你理解
I'm gonna give you all of the code and not
necessarily expect you to understand it.

6
00:00:16.719 --> 00:00:19.929
第二，这个可以应用于 Ruby，它可以应用到 Go，它可以是
And two, this could be applied to Ruby,
it could be applied to Go, it could be

7
00:00:19.929 --> 00:00:25.589
应用于爪哇，钴，珍珠，我不知道，不管你喜欢什么
applied to Java, Cobalt, Pearl,
I don't know, whatever suits your fancy.

8
00:00:25.589 --> 00:00:26.089
我不会感到羞耻
I'm not gonna shame.

9
00:00:27.464 --> 00:00:30.408
但就为了开始进入其他类型的
But just to kind of start getting
into some of these other flavors of

10
00:00:30.408 --> 00:00:32.932
可能对你有用的容器
containers that might be useful to you,
in particular,

11
00:00:32.932 --> 00:00:35.527
因为我们每天都要用那个
the node one because we are gonna
be using that one all day.

12
00:00:37.792 --> 00:00:42.130
所以我们现在就在 MacOS 模式
So we're here in MacOS mode right now.

13
00:00:42.130 --> 00:00:45.115
我要说码头工人跑了
And I'm gonna say docker run dash it.

14
00:00:45.115 --> 00:00:46.930
我要说的是
And I'm gonna say node,

15
00:00:46.930 --> 00:00:52.649
这不是 Docker 认证为官方认证的官方节点容器。
which isn't the official node container
that Docker certifies as official.

16
00:00:53.799 --> 00:00:55.810
这些都是由一个叫 NodeSource的公司建造的，
These are actually built by
a company called NodeSource,

17
00:00:55.810 --> 00:00:59.130
做非常棒的节点咨询的人
wonderful people that do
really great node consulting.

18
00:00:59.130 --> 00:01:01.456
它们制造了奇妙的容器
And they make wonderful containers,

19
00:01:01.456 --> 00:01:04.730
他们是其中的专家所以我依赖他们而我自己也不这样做
they're experts in it, that's why I
rely on them and I don't do it myself.

20
00:01:04.730 --> 00:01:08.230
然后在这里如果我做了节点这将会是最新的
And then here, if I did node,
this would run latest,

21
00:01:08.230 --> 00:01:12.159
我想这和我现在要告诉你的一样
which I think would be the same as
what I'm gonna tell you to do now.

22
00:01:12.159 --> 00:01:14.007
但我又想暂时冻结了对吧
But again,
I wanna kind of freeze in time, right?

23
00:01:14.007 --> 00:01:16.709
就像你把你的附属品送到生产之前
Just like you pin your dependencies
before you send them in production,

24
00:01:16.709 --> 00:01:19.518
所以我要给你一个正确的标签
that's why I'm gonna give
you the correct tag here.

25
00:01:19.518 --> 00:01:25.310
所以我想运行节点 12，然后我希望它专门针对 Debian 拉伸。
So I wanna run node 12, and then I want it
to be tied specifically to Debian stretch.

26
00:01:25.310 --> 00:01:27.097
所以我要说 12 个破折号
So I'm gonna say 12 dash stretch.

27
00:01:32.129 --> 00:01:34.373
所以其实我就好像没有那个地方，所以
So actually, that looks like
I don't have that locally, so

28
00:01:34.373 --> 00:01:35.960
它会把它拉出来的
it's actually gonna go out and pull that.

29
00:01:35.960 --> 00:01:40.682
>> 您是否可以帮助我了解将节点绑定到 Debian 拉伸意味着什么 ?
&gt;&gt; Could you help me understand what do
you mean by tying node to Debian stretch?

30
00:01:40.682 --> 00:01:41.216
>> 确定。
&gt;&gt; Sure.

31
00:01:43.063 --> 00:01:47.278
因此，每当您运行 Docker 容器时，
So whenever you run a Docker container,

32
00:01:48.849 --> 00:01:52.259
事情会有多多多多多多多数对吧
There's multiple versions of
things going to it, right?

33
00:01:52.259 --> 00:01:55.895
我在这个特殊情况下用节点图像处理的事情
And the thing that I'm gonna care in this
particular case with the node image,

34
00:01:55.895 --> 00:01:59.254
我在乎的两个东西就是我在乎的是什么
the two things that I really care about
the versions of is I care about what

35
00:01:59.254 --> 00:02:02.695
Linux 的版本和我在乎的是哪个版本的节点，对吧 ?
version of Linux it's on and I care
what version of Node it's on, right?

36
00:02:02.695 --> 00:02:05.579
12号节点 12号是有道理的
So the 12, that's node 12,
that makes sense.

37
00:02:05.579 --> 00:02:08.199
Stretch 把它绑在 Debian的特定版本上
Stretch is tying it to
a specific version of Debian,

38
00:02:08.199 --> 00:02:10.379
我相信是德比七
which I believe is Debian seven.

39
00:02:10.379 --> 00:02:13.530
别引用我的话说我不太了解德比
Don't quote me on that,
cuz I don't really know Debian very well.

40
00:02:13.530 --> 00:02:15.879
我们为什么要去 Debian 和 Ubuntu
Now, why are we doing
Debian versus Ubuntu?

41
00:02:15.879 --> 00:02:18.550
这就是他们构建的节点图像，对吧 ?
That is just what they build
the Node images with, right?

42
00:02:18.550 --> 00:02:22.170
我想你能在仿生和其他 Ubuntu的版本上找到它
I think you can get it on Bionic and
other versions of Ubuntu,

43
00:02:22.170 --> 00:02:23.840
但缺省情况下是在 Debian
but by default it's on Debian.

44
00:02:23.840 --> 00:02:25.905
> > 就好像这两个人一样
&gt;&gt; It is kind of like
a mash up on those two.

45
00:02:25.905 --> 00:02:29.759
> > 嗯，实际上下一届会议实际上是关于标签，
&gt;&gt; Yeah, so actually literally the next
session I'll be talking about tags,

46
00:02:29.759 --> 00:02:31.050
这就是现在的情况
which is what this is.

47
00:02:31.050 --> 00:02:33.170
但可以说这是任意的
But suffice to say it's arbitrary.

48
00:02:33.170 --> 00:02:37.479
因此，谁创建容器，就会选择要调用的标记。
So whoever creates the container
chooses what the tags are called.

49
00:02:37.479 --> 00:02:38.849
所以他们可以叫它拉伸破折号 12
So they could have called
it stretch dash 12.

50
00:02:38.849 --> 00:02:41.156
他们可以给它打个电话
They could have called it
whatever they wanted to.

51
00:02:41.156 --> 00:02:42.170
有道理吗
That makes sense?

52
00:02:42.170 --> 00:02:43.000
> > 是。 >> Cool。
&gt;&gt; Yeah.
&gt;&gt; Cool.

53
00:02:43.000 --> 00:02:47.030
>> 那么拉伸只是一个名称没有吗 ?
&gt;&gt; So
stretch is just a name does not have any?

54
00:02:47.030 --> 00:02:51.569
>> 很容易记住 Debian 的版本，对吧 ?
&gt;&gt; It's a really easy way to remember
the version of Debian, right?

55
00:02:51.569 --> 00:02:55.625
同样地，我还记不起 Debian 版本的数字是什么，
Again, like I can't remember what the
numbers of what Debian version we're on,

56
00:02:55.625 --> 00:02:58.824
但我知道 Stretch 是最新的 LTS，就是
but I know that Stretch is the latest one,
latest LTS, that is.

57
00:02:58.824 --> 00:03:00.620
有道理吗
Does that make sense?

58
00:03:00.620 --> 00:03:06.210
> > 嗯，我只是不确定 Stretch 是最新的还是什么的
&gt;&gt; Yeah, I just wasn't sure if Stretch
was a term for latest or something.

59
00:03:06.210 --> 00:03:08.439
> > 它不，不，它是专门针对 Debian的。
&gt;&gt; It's not, no,
it's specifically for Debian.

60
00:03:08.439 --> 00:03:12.905
就好像我们一直在用 Ubuntu Bionic ，对，就是 18.04，
It's like we've been using Ubuntu Bionic
this whole time, right, which is 18.04,

61
00:03:12.905 --> 00:03:15.789
这就是史特奇对 Debian的事
that's what Stretch is for Debian.

62
00:03:15.789 --> 00:03:16.324
>> 谢谢。 > > 是。
&gt;&gt; Thank you.
&gt;&gt; Yep.

63
00:03:17.890 --> 00:03:22.439
所以我们有了另外两个层次它很快就会被下载到这里
So we got, looks like two more layers that
it's gonna download here very quickly.

64
00:03:22.439 --> 00:03:25.828
>> 布莱恩，你也要我们下载这个图片吗 ?
&gt;&gt; Brian, do you want us to
download this image, too?

65
00:03:25.828 --> 00:03:26.371
> 嗯，可能吧。
&gt;&gt; Yeah, probably.

66
00:03:28.986 --> 00:03:30.835
是的，答案是肯定的，我们会在整个过程中使用几次
Yes, the answer's yes cuz we'll
use it several times throughout

67
00:03:30.835 --> 00:03:31.497
其他的当然了
the rest of the course.

68
00:03:34.502 --> 00:03:37.781
那就得把一切都提取了，然后重新申请一切，所以
Then, it has to go extract everything and
then reapply everything, so

69
00:03:37.781 --> 00:03:39.625
它需要一点处理
it takes a bit of processing.

70
00:03:39.625 --> 00:03:44.388
好了，我们下载了图像，它拉开了它并执行了它，
So okay, we downloaded the image,
it pulled it and executed it, and

71
00:03:44.388 --> 00:03:47.605
现在它让我们变成了 REPL对吧
now it drops us into some sort of REPL,
right?

72
00:03:47.605 --> 00:03:51.495
REPL 就像上帝， REPL 的立场是什么 ?
REPL being like a, god,
what does REPL stand for?

73
00:03:51.495 --> 00:03:52.109
我相信这里有人知道
I'm sure someone here knows.

74
00:03:54.296 --> 00:03:56.670
不管怎样它代表某种东西 R-E-P-L
Anyway, it stands for something, R-E-P-L.

75
00:03:56.670 --> 00:04:01.969
我相信交谈中有 9 个人说这代表了这一点。
I'm sure there's nine people on
the chat saying it stands for this.

76
00:04:01.969 --> 00:04:05.069
>> Read， Evalue， Print和 Loop。
&gt;&gt; Read, Evalue, Print, Loop.

77
00:04:05.069 --> 00:04:07.276
>> 是，读，求值，打印，循环，在那里。
&gt;&gt; Yep, Read, Evaluate,
Print, Loop, there it is.

78
00:04:09.395 --> 00:04:14.159
让我吃惊的是它是个 JavaScript对吧
And surprise, it's a JavaScript, right?

79
00:04:14.159 --> 00:04:18.029
所以我可以说，控制台点日志 x是吧 ?
So I can say console dot log x, right?

80
00:04:18.029 --> 00:04:22.230
它会做到这一点，或者 2 加 2，对吧 ?
And it'll do that, or
2 plus 2, whatever, right?

81
00:04:22.230 --> 00:04:29.850
所以这把我们扔进了 Debian Stretch Linux 的节点 REPL ，对吧 ?
So this dropped us into the node REPL
inside of a Debian Stretch Linux, right?

82
00:04:29.850 --> 00:04:32.300
这也许不是你期待的
Which may or
may not be what you're expecting.

83
00:04:32.300 --> 00:04:36.350
但就像我说的，这个容器用来定义什么指令真正的运行。
But like I said, the container gets to
define what command actually gets run.

84
00:04:36.350 --> 00:04:43.540
这就变成了一个 REPL ，它代表着读，执行，打印和循环，对吗 ?
So this drops up into a REPL, which stands
for read, execute, print, and loop, right?

85
00:04:43.540 --> 00:04:44.310
对于节点 js。
For node js.

86
00:04:44.310 --> 00:04:49.050
所以，如果我说点像控制台点日志 x，它会注销 x，对吗 ?
So if I just say something like console
dot log x, it's gonna log out x, right?

87
00:04:49.050 --> 00:04:51.029
正常的 JavaScriptty 之类的对吧
Normal JavaScripty kinda stuff, right?

88
00:04:51.029 --> 00:04:52.670
如果你只在你的电脑上写就写节点
If you just do it on your computer and
you just write node,

89
00:04:52.670 --> 00:04:54.470
这就是它为你做的
this is what it does for you.

90
00:04:54.470 --> 00:04:57.949
就像我之前跟你说过的容器自己决定
Like I was telling you before,
the containers themselves get to decide.

91
00:04:57.949 --> 00:05:02.504
如果我不指定你可以在这里看到的命令
If I don't specify command,
which you can see up here, right there,

92
00:05:02.504 --> 00:05:05.089
我没有具体说明是吧
I didn't specify a command, right?

93
00:05:05.089 --> 00:05:09.129
所以不管它的缺省值是什么
So it does whatever it defaults to,
in this case, it's like I'm gonna

94
00:05:09.129 --> 00:05:13.990
将您放入节点 REPL ，因为我不知道您实际想做什么，好吗 ?
put you into the node REPL because I've no
idea what you actually want to do, okay?

95
00:05:13.990 --> 00:05:15.089
这就是这里所做的
So that's what this does here.

96
00:05:16.577 --> 00:05:17.410
我看到出口了
I see the exit.

97
00:05:20.380 --> 00:05:20.901
好了好了
There we go.

98
00:05:20.901 --> 00:05:23.636
然后按 Ctrl +C 两次，这会让您退出 REPL。
So hit Ctrl+C twice,
that'll get you out of the REPL.

99
00:05:25.567 --> 00:05:27.733
然后就在那个点完成货柜，对，
And then, it finishes
the container at that point, right,

100
00:05:27.733 --> 00:05:29.569
因为那是它设计的 CMD
because that's the CMD that
it was designed to do.

101
00:05:29.569 --> 00:05:33.639
但如果我真的想被扔进 Linux 的一部分
But if I actually wanna be dropped
into just the Linux part of it,

102
00:05:33.639 --> 00:05:35.230
我可以说巴什对吧
I can say bash, right?

103
00:05:36.649 --> 00:05:39.689
现在我在这个容器里
And now, I'm inside of this container.

104
00:05:39.689 --> 00:05:42.990
但是和其他的一样，首先，如果我说猫猫问题，
But as opposed to the other ones,
first of all, if I say cat /etc/issue,

105
00:05:42.990 --> 00:05:47.889
你可以看到我的样子好像是德宾 9 号的样子
you can see I'm on, looks like it's
Debin nine is what stretch is.

106
00:05:47.889 --> 00:05:48.555
我错了我以为是 7
I was wrong, I thought it was seven.

107
00:05:48.555 --> 00:05:53.800
任何案例都是我们的 Linux
Any case,
that's what kind of Linux we're in.

108
00:05:53.800 --> 00:05:56.560
Ubuntu 是基于 Debian 的所以一切都会感觉很舒服
And Ubuntu is based on Debian,
so everything's gonna feel very,

109
00:05:56.560 --> 00:05:57.540
非常熟悉
very familiar to you.

110
00:05:59.230 --> 00:06:02.036
但是如果我说的是节点破折号对吧
But what's cool about this one
if I say node dash v, right,

111
00:06:02.036 --> 00:06:05.194
现在它已安装节点，因为我得到了节点容器，好吗 ?
now it has Node installed because
I got the Node container, okay?

112
00:06:05.194 --> 00:06:08.353
你可以看到这里，我有 Node 12 ，这正是我所要求的。
So you can see here, I have Node 12,
which is exactly what I asked for.

113
00:06:14.682 --> 00:06:16.418
所以这很有趣，对吧 ?
So that's kind of fun, right?

114
00:06:20.665 --> 00:06:25.338
所以我觉得我觉得也是很有用的，
So again,
something I think is quite useful, too,

115
00:06:25.338 --> 00:06:30.250
就是知道这猫的事是吧
is just knowing this cat /etc/issue thing,
right?

116
00:06:30.250 --> 00:06:32.064
如果你运行节点，对，我就像这样运行 Node ，
If you run Node, right, and
I just run Node like this,

117
00:06:32.064 --> 00:06:33.223
我现在就不干了
which I'm not gonna do right now.

118
00:06:35.271 --> 00:06:37.939
你可能不知道这是 Debian吧
You might not know that this is Debian,
right?

119
00:06:37.939 --> 00:06:40.649
我不知道这是否错误的假设
I don't know if it's a faulty assumption,
but

120
00:06:40.649 --> 00:06:44.930
我只是假设大多数事情都是 Ubuntu ，因为这就是我所使用的。
I just assume most things are Ubuntu
because that's what I use.

121
00:06:44.930 --> 00:06:46.879
但在这个特殊情况下，他们决定去别的地方。
But in this particular case,
they decided to go with something else.

122
00:06:46.879 --> 00:06:49.218
但这是一种很好的方式来表达，好，我在哪里，我在做什么，
But this is a good way to kinda say,
okay, where am I, what am I doing,

123
00:06:49.218 --> 00:06:50.393
陆地上的土地是什么
what's the lay of the land there?

124
00:06:53.683 --> 00:06:58.057
我们将进入您可以选择的 Linux 分发版。
We'll go into later which Linux
distributions you can select.

125
00:06:58.057 --> 00:07:03.410
但我的意思是，故事的总和是选择你最喜欢的那个。
But I mean, the sum of the story is choose
the one that you're most comfortable with.

126
00:07:03.410 --> 00:07:04.870
所有这些都很好。
All of these are really good.

127
00:07:04.870 --> 00:07:05.795
Red Hat Linux 是一个很好的 Linux 。
Red Hat Linux is a good one.

128
00:07:07.459 --> 00:07:09.274
薄荷，阿尔卑斯， Debian， Ubuntu，
Mint, Alpine, Debian, Ubuntu,

129
00:07:09.274 --> 00:07:12.423
他们都是有效的选择取决于你想做什么
they're all valid choices just
depending what you wanna do.
