WEBVTT

1
00:00:00.340 --> 00:00:03.069
因此，让我们将这一点做得更丰富。
So let's make this even a little
bit nicer developer experience.

2
00:00:03.069 --> 00:00:06.105
如果这是我的特殊容器，我就会这样做。
This is what I would do if this
was my particular container.

3
00:00:06.105 --> 00:00:09.391
我可能会写一个不同的 dev.docker 文件
I'd probably write a different
dev.docker file but

4
00:00:09.391 --> 00:00:11.800
让我们直接修改这个
let's just modify this one directly.

5
00:00:12.869 --> 00:00:17.876
我们要做的是
What we're gonna do here is

6
00:00:17.876 --> 00:00:22.882
在这里我们会说
under here we're gonna say

7
00:00:22.882 --> 00:00:28.339
RUN npm 安装 -全局。
RUN npm install --global.

8
00:00:28.339 --> 00:00:36.039
或者我是懒惰的所以我只能说 npm i -g， Nodemon
Or I'm lazy, so
I'll just say npm i -g, Nodemon.

9
00:00:36.039 --> 00:00:40.090
我听到人们说这一百万种不同的方式，没有魔鬼，没有魔鬼。
And I've heard people say this a million
different ways, no demon, no demon.

10
00:00:41.179 --> 00:00:42.770
我要和你一起去
I'm gonna go with nodemon.

11
00:00:42.770 --> 00:00:45.679
所以你要怎么说那是魔鬼
So it's up to you how you
wanna say that nodemon.

12
00:00:46.960 --> 00:00:51.369
这基本上是一个档案观看者会研究你的
This basically is a file
watcher that will research your

13
00:00:51.369 --> 00:00:53.770
节点服务器每次看到文件更改的情况。
node server every single time
that it sees a file change.

14
00:00:53.770 --> 00:00:58.750
所以我要把它安装在这里。
So makes it really nice to developers So
I'm gonna install that up here.

15
00:00:58.750 --> 00:01:01.838
然后在这里，而不是说节点，我要说的是， nodemon。
And then down here, instead of
saying node, I'm gonna say, nodemon.

16
00:01:01.838 --> 00:01:05.679
这将会使您体验到非常好的开发者体验
And this will make a really
nice developer experience so

17
00:01:05.679 --> 00:01:09.150
我们就可以去写我们的服务器了
we can just be going and
writing our server.

18
00:01:09.150 --> 00:01:11.620
然后每当我们更改文件时，我们就会单击 " 保存 " 和 "
And then every time that we change
our file, we'll click save and

19
00:01:11.620 --> 00:01:17.420
一切都会好的现在我们有了
everything will just work So
right now, we have

20
00:01:17.420 --> 00:01:22.140
以停止所有这些内容，然后在每次更改文件时重新启动它。
to stop all this stuff and then restart it
every single time that we change a file.

21
00:01:22.140 --> 00:01:23.280
我觉得这很不好玩
I would say that's unfun.

22
00:01:24.915 --> 00:01:28.489
所以现在我们有了新恶魔我们可以做得非常快因为我不需要
So now with nodemon, we can make this
really fast because I won't have to

23
00:01:28.489 --> 00:01:32.650
每次对文件进行更改时，重新启动容器。
restart the container every single time
that we make our change to the files.

24
00:01:32.650 --> 00:01:35.379
既然我们已经完成了保存文档的程序
So now that we've done that
we save to docker file,

25
00:01:35.379 --> 00:01:37.865
我们会说码头的组成
we're gonna say docker-compose up.

26
00:01:37.865 --> 00:01:41.109
它应该穿过并重建我们的容器。
It should go through and
rebuild our container.

27
00:01:43.906 --> 00:01:45.674
它看起来不像是重建了我们的容器
It doesn't look like it
actually rebuilt our container,

28
00:01:45.674 --> 00:01:46.584
我们要自己做吗
do we need to do it ourselves?

29
00:01:50.131 --> 00:01:53.479
我可能改错了，我改错了。
I might be modifying the wrong one,
I am, I modified the wrong one.

30
00:01:55.549 --> 00:01:57.250
当您有 19 个 Docker 文件时，将到期。
It's due when you have 19 Docker files.

31
00:01:57.250 --> 00:01:58.090
好吧对不起
All right, sorry.

32
00:01:58.090 --> 00:02:02.230
加入您的网络 Docker 文件。
So come into your networking Docker file.

33
00:02:03.620 --> 00:02:04.522
我要在这做
I'm gonna do that up here.

34
00:02:04.522 --> 00:02:06.599
一样的
Same thing.

35
00:02:06.599 --> 00:02:14.840
RUN npm i -g nodemon ，然后在此处， nodemon。
RUN npm i -g nodemon, and
then down here, nodemon.

36
00:02:14.840 --> 00:02:17.829
所以我们每次都能重新启动我们的开发环境
So that we can restart our development
environment every single time that we

37
00:02:17.829 --> 00:02:18.350
保存文件。
save a file.

38
00:02:21.710 --> 00:02:22.824
好了阻止我们的服务器
Okay, stop our server.

39
00:02:27.270 --> 00:02:29.715
你可以看到它正在为我们创造网络，这很棒。
You can see that it's creating networks
on the fly for us, which is nice.

40
00:02:32.949 --> 00:02:35.296
然后我们就会重新开始码头
And then here we'll
restart docker-compose up.

41
00:02:37.579 --> 00:02:39.180
所以一切都应该在这里工作
So everything should
be still working here.

42
00:02:45.710 --> 00:02:50.283
在这里，这是一个网络，而不是说成功:
And then here, this is a networking,
so instead of saying success: true,

43
00:02:50.283 --> 00:02:52.650
也许我们会说成功是假的
maybe we're gonna say success: false

44
00:03:01.580 --> 00:03:06.252
我不确定这是否最终重建了它，让我们看看。
And I'm not sure this actually ended
up rebuilding it, let's check.

45
00:03:09.054 --> 00:03:10.000
是啊不是
Yeah, it didn't.

46
00:03:12.009 --> 00:03:12.520
那为什么呢
So why is that?

47
00:03:16.180 --> 00:03:17.349
有什么地方可以重建吗
Is there somewhere I can force rebuild?

48
00:03:22.740 --> 00:03:23.808
好的我们来吧
Yeah, let's do that.

49
00:03:23.808 --> 00:03:30.275
好了我们要做的是我们要说的是 Docker
Okay, so what we're gonna do,
is we're gonna say docker-compose

50
00:03:30.275 --> 00:03:35.750
up -build ，因为我们知道修改了 Docker 文件。
up --build because we know
we modified our Docker file.

51
00:03:37.560 --> 00:03:40.585
它会迫使它为我们建造一个网络容器。
It's gonna force it to build
the web container for us.

52
00:03:45.723 --> 00:03:48.229
通常，您不会非常修改 Docker 文件。
Typically, you're not modifying
your Docker file very much.

53
00:03:48.229 --> 00:03:49.387
通常编写 Docker 文件和
Usually you write your Docker file and

54
00:03:49.387 --> 00:03:51.420
那就需要几个月才能再修改
then it's a couple of months before
you have to go modify it again.

55
00:03:56.949 --> 00:03:58.900
一旦建成，这将为我们工作。
And then once this is built
this will work for us.

56
00:04:06.728 --> 00:04:12.340
好了这就在这里说假话
Okay, so, now, this is saying false here.

57
00:04:12.340 --> 00:04:15.370
所以不需要做整首歌和舞蹈对吧我们通常要
So instead of having to do that whole song
and dance, right, typically we'd have to

58
00:04:15.370 --> 00:04:19.180
stop docker-compose， docker-compose up， build， wait for
stop docker-compose,
docker-compose up, build, wait for

59
00:04:19.180 --> 00:04:22.889
Docker 文件将在每次查看更改时再次构建。
the Docker file to build again every
single time that we wanna see a change.

60
00:04:22.889 --> 00:04:24.240
理论上如果我回来的话
Now, in theory, if I come back.

61
00:04:24.240 --> 00:04:25.279
上面说现在是假的
It says false right now right there.

62
00:04:25.279 --> 00:04:31.920
如果我说真的，我去看看，它应该告诉我它可能重启了。
If I say true, and I go look here,
it should tell me that it restarted maybe.

63
00:04:32.990 --> 00:04:35.340
无论如何现在都是真的了
Well, in any case, it's true now.

64
00:04:35.340 --> 00:04:38.430
这样我们就能更快地迭代
So now this allows us to
more rapidly iterate,

65
00:04:42.925 --> 00:04:45.206
你就像布莱恩 - 伊桑，那是 100% 的真实情况。
So you can be like brianIsCool,
and that's 100% true.

66
00:04:47.930 --> 00:04:50.584
我现在可以刷新了，布莱恩 - 伊斯酷: 真的。
And I could refresh now,
brianIsCool: true.

67
00:04:52.225 --> 00:04:53.024
很酷吧
Very cool, right?

68
00:04:54.064 --> 00:04:54.644
跟我一样
Just like me.

69
00:04:56.204 --> 00:04:58.764
再一次，这是一种非常好的表面划伤。
Again, this is a very kind
of scratching the surface.

70
00:04:58.764 --> 00:05:00.975
你能用这个做更多的工作
There's a lot more you can do with this.

71
00:05:00.975 --> 00:05:03.452
让我们在这里做点有趣的事情。
Let's actually do something
a little bit fun here as well.

72
00:05:07.279 --> 00:05:09.244
所以我要再停一次再等这个
So I'm gonna stop this again,
wait for this to stop.

73
00:05:12.819 --> 00:05:17.288
关于 Docker 的最酷的事就是如果你想模拟
The cool thing about docker compose
is if you wanna simulate like running

74
00:05:17.288 --> 00:05:22.269
多个服务器，以确保所有操作都正常工作，
multiple servers at the same to make sure
that everything is working correctly,

75
00:05:22.269 --> 00:05:26.608
我们可以说 docker-compose up ，然后我可以说 --scale web=10.
we can say docker-compose up and
then I can say --scale web=10.

76
00:05:28.829 --> 00:05:33.199
而不是只启动一个像以前一样的网络容器
Instead of starting just one web container
which is what it was doing before,

77
00:05:33.199 --> 00:05:35.632
现在它会启动十个网络容器
now it's gonna start ten web containers.

78
00:05:38.742 --> 00:05:39.511
我都不知道为什么
I don't even know why,

79
00:05:39.511 --> 00:05:41.680
可能是因为他们都在听同样的港口
it's probably because they're
all listening to the same ports.

80
00:05:47.899 --> 00:05:50.050
是的他们都想绑定到同一个港口
Yes, they're all trying
to bind to the same port.

81
00:05:53.480 --> 00:05:55.387
是啊所以我们得过去
Yeah, and so we have to go through and

82
00:05:55.387 --> 00:05:59.819
就像一种更聪明的循环法对不同的端口进行绑定。
have like a smarter like round-robin
way of binding to different ports.

83
00:05:59.819 --> 00:06:01.545
让你看看这到底是怎么工作的
Just to show you how this
actually would work, let's just.

84
00:06:05.560 --> 00:06:10.105
如果我摆脱了这就意味着它不再工作了
If I just got rid of this which
means it wouldn't work anymore, but

85
00:06:10.105 --> 00:06:11.415
它就会启动
it would start up.

86
00:06:20.240 --> 00:06:21.550
好了好了
There you go.

87
00:06:21.550 --> 00:06:24.550
然后它就会启动这些不同的容器。
So then it's gonna go and start these
various different containers up.

88
00:06:24.550 --> 00:06:27.898
你可以在这里看到我有一大堆从这里飞过来的
And you can see here now I have a bunch
of all these different logs flown in from

89
00:06:27.898 --> 00:06:30.269
同一 Web 容器的七个不同版本。
seven different versions
of the same web container.

90
00:06:31.600 --> 00:06:33.680
因此，如果您对端口和端口的绑定变得更加智慧，
So if you're a bit smarter about
how you're binding into ports and

91
00:06:33.680 --> 00:06:34.319
你的倾听
how you're listening,

92
00:06:34.319 --> 00:06:38.435
你可能得在它前面有某种负载均衡器
you probably have to have some sort
of like load balancer in front of it.

93
00:06:38.435 --> 00:06:41.014
这样你就能像现在的那种人一样
So you could do that with like nginx,
you could do with like traffic,

94
00:06:41.014 --> 00:06:42.595
有一堆能为你做的事情
there is a bunch of things
that will do it for you.

95
00:06:42.595 --> 00:06:45.459
然后，它将在所有不同的容器之间进行负载均衡。
And then it would load balance between
all your various different containers.

96
00:06:45.459 --> 00:06:48.259
这比我现在想和 Docker 创作的要多了很多
That's a lot more involved than I wanna
get right now with Docker compose, but

97
00:06:48.259 --> 00:06:49.802
这里的一切都是绝对可能的
all things are definitely possible here.

98
00:06:53.432 --> 00:06:56.101
很酷的是我们把我们的服务推广到 10 个不同的
And it's pretty cool that we just
scaled out our service to ten different

99
00:06:56.101 --> 00:06:57.694
就像那样只为了好玩
containers just like that, just for fun.

100
00:07:00.834 --> 00:07:02.870
好的
Okay, cool.

101
00:07:02.870 --> 00:07:06.403
嗯， ha_proxy 也能在这里工作。
Yeah, ha_proxy would work for
here as well.
