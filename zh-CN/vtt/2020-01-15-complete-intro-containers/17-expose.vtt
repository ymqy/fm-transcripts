WEBVTT

1
00:00:00.178 --> 00:00:03.370
所以我在这儿有个小部分就是要注意的是吧
So I have a little section here
just to note on expose, right?

2
00:00:05.440 --> 00:00:07.892
到目前为止我们讨论的是出版，对吧 ?
So far we've been talking
about using publish, right?

3
00:00:07.892 --> 00:00:11.119
如果你看看这把它关掉
So if you look here, shut that down.

4
00:00:15.262 --> 00:00:19.768
我用的是 3000:3000 ，是吗 ?
I've been using publish 3000:3000, right?

5
00:00:19.768 --> 00:00:24.408
从技术上来说我可以说 EXPOSE
You can technically write in here,
I could say EXPOSE,

6
00:00:24.408 --> 00:00:28.292
3000 我可以暴露 3000
3000 and I can expose 3000.

7
00:00:28.292 --> 00:00:30.679
完全可以
It totally would work.

8
00:00:32.159 --> 00:00:33.503
所以我们来解决这个问题
So let's get rid of this.

9
00:00:33.503 --> 00:00:37.521
这里的问题是首先我还是要用旗子来做，
The issue here is first of all,
I still have to run it with a flag,

10
00:00:37.521 --> 00:00:41.039
那是什么
which is, What is it?

11
00:00:48.079 --> 00:00:53.509
好了，这就开始了，实际上，让我们这样做，所以它就很附着。
Okay, so that's running, and actually,
let's do it this way, so it just attaches.

12
00:00:53.509 --> 00:00:56.979
所以，我要先建它，让我们造它吧。
So, I have to build it first,
let's build it.

13
00:01:02.820 --> 00:01:03.369
我救了吗
Did I save that?

14
00:01:03.369 --> 00:01:04.799
是否运行 EXPOSE?
Did it run EXPOSE?

15
00:01:10.909 --> 00:01:12.200
而且是正确的
And the correct one.

16
00:01:13.659 --> 00:01:16.170
不我错了这就是原因
No, I'm in the wrong one, that's why.

17
00:01:16.170 --> 00:01:19.230
用于更复杂的节点应用程序的 Docker 文件。
Docker file for more complicated node app.

18
00:01:19.230 --> 00:01:24.879
然后我会说 EXPOSE 3000 ，我要再建造一次。
And then here I'm gonna say EXPOSE 3000,
and I'm gonna build it again.

19
00:01:32.319 --> 00:01:34.765
然后，我再次尝试运行我的节点应用程序。
And then I try and run my node app again.

20
00:01:34.765 --> 00:01:36.710
但我要在没有公布的情况下运行
But I'm gonna run it without publish.

21
00:01:38.020 --> 00:01:41.049
我要说的是分开的所以它是在后台运行的
I'm gonna say detached, so
it's running in the background.

22
00:01:43.281 --> 00:01:45.289
现在如果我说停手
Now, if I say docker ps.

23
00:01:47.512 --> 00:01:51.878
首先，如果我试着到这里，去 localhost:3000，
First of all if I try and
go over in here and go to localhost:3000,

24
00:01:51.878 --> 00:01:53.810
那就不起作用了吧
it's not gonna work, right?

25
00:01:53.810 --> 00:01:59.219
因为它在技术上并不暴露在那个端口上。
Cuz it's not actually technically
exposed on that particular port.

26
00:02:00.519 --> 00:02:05.019
所以你要做的就是告诉 Docker ， Docker 杀，
So what you actually have to do is
you have to tell docker, docker kill,

27
00:02:05.019 --> 00:02:07.280
我刚刚运行了我的节点应用程序
this one that I just ran my node app.

28
00:02:10.139 --> 00:02:11.349
这就是你的形象对吧
That's the image, right?

29
00:02:11.349 --> 00:02:13.099
所以你必须要杀了这条路
So you have to kill this way.

30
00:02:14.439 --> 00:02:15.365
Docker 会终止的。
Docker kill that.

31
00:02:15.365 --> 00:02:17.425
>> 神秘之旅。
&gt;&gt; Mystifying journey.

32
00:02:17.425 --> 00:02:17.939
> > 那是什么 ?
&gt;&gt; What's that?

33
00:02:17.939 --> 00:02:19.430
>> 这个名字神秘的旅程
&gt;&gt; The name of it, mystifying journey.

34
00:02:19.430 --> 00:02:23.370
>> 对，对，也行。
&gt;&gt; Right, yeah, that will work too.

35
00:02:23.370 --> 00:02:30.389
所以你必须这样做，让我看看我是否能在码头上运行 --帮助。
So you have to do it with,
let me see if I can docker run --help.

36
00:02:30.389 --> 00:02:34.000
存在要传递的额外标志，并且可能只是 EXPOSE。
There is an extra flag that you have
to pass and it might just be EXPOSE.

37
00:02:37.590 --> 00:02:40.503
EXPOSE，它是破折号 -P，我们走了。
EXPOSE, it's dash -P, there we go.

38
00:02:43.400 --> 00:02:47.989
所以我要做的是我得说破折号 -P
So instead what I have to do, is I have
to say dash -P, which is gonna go and

39
00:02:47.989 --> 00:02:50.593
把我放进去的所有港口都曝光了
expose all of those
ports that I put it on.

40
00:02:50.593 --> 00:02:51.913
现在如果我说停手
And now if I say docker ps,

41
00:02:51.913 --> 00:02:56.329
我真不知道哪个港口要曝光，就给我挑一个。
I actually don't know what port is going
to expose it, just picks one for me.

42
00:02:56.329 --> 00:03:00.848
现在你可以看到我有 3000 ，它会进入容器中。
So you can see now that I have 3000,
which is gonna go into the container.

43
00:03:00.848 --> 00:03:04.280
但从容器里出来的是 32768
But coming out of the container
is gonna be 32768.

44
00:03:04.280 --> 00:03:10.661
所以现在我可以过来把它放在这里
So now, I can come over here and
put that in here And

45
00:03:10.661 --> 00:03:13.590
它现在就会被映射到容器里
it works, right now,
it's mapping into the container.

46
00:03:13.590 --> 00:03:16.020
这看起来不太方便吗
Does that seem less convenient?

47
00:03:17.210 --> 00:03:19.579
我想大概是吧
I would assume it probably is, right?

48
00:03:19.579 --> 00:03:24.650
而大多数人并不是出于这个原因而真正使用公开的。
And for the most part people don't
really use expose for this reason.

49
00:03:25.659 --> 00:03:28.461
我听说有人说他们还会在这里曝光
I've heard some people say that they'll
still put expose in here just to let

50
00:03:28.461 --> 00:03:31.199
大家都知道，就这样，就 3000，对吧 ?
people know is like hey, just so
you know, publish on 3000, right?

51
00:03:31.199 --> 00:03:33.879
这才是我们期待的
That's what we're expecting here.

52
00:03:33.879 --> 00:03:38.375
就像文档一样，你可以很容易地把它放在我的阅读中。
It's kinda like documentation, you can
easily just put that in the read me.

53
00:03:38.375 --> 00:03:40.849
我不知道为什么你一定会把它放在 Docker 文件里。
I don't know why you'd necessarily
put it in the Docker file.

54
00:03:40.849 --> 00:03:42.798
我不去 Docker 文件以获取文档。
I don't go to the Docker file for
documentation.

55
00:03:42.798 --> 00:03:47.765
这就是 EXPOSE，当我开始使用 Docker时，这让我非常困惑，
So that's EXPOSE, that was very confusing
to me when I was starting out with Docker,

56
00:03:47.765 --> 00:03:51.640
所以我想我希望能为你做点什么
so I thought I would hopefully
demystify that a little bit for you.

57
00:03:51.640 --> 00:03:52.550
>> 所以发布什么 ?
&gt;&gt; So what does publish do?

58
00:03:52.550 --> 00:03:57.105
它只是把它包在一起就像，嘿，你可以把它装船。
It just kind of packages it all together
and like, hey, you can ship this.

59
00:03:57.105 --> 00:04:01.480
>> 因此发布如下 : 我内部有此端口，并且在外部具有此端口
&gt;&gt; So publish says like I have this port
internally and have this port externally

60
00:04:01.480 --> 00:04:06.189
我希望你能把这两件事情都塞到一起
and I want you to plug those two things
together, like tunnel out together.

61
00:04:06.189 --> 00:04:10.937
所以我可以把 8080 移植到端口 3000 的容器里
So I can port 8080 inside the container
published at the port 3000,

62
00:04:10.937 --> 00:04:15.180
它会连接到这两个集装箱或者这两个港口，对吧 ?
it'll connect to those two containers or
those two ports, right?

63
00:04:15.180 --> 00:04:18.379
所以它是端口映射，实际上它是一个端口映射。
So it's port mapping, it's literally
what it is, it's just port mapping.
