WEBVTT

1
00:00:00.270 --> 00:00:03.520
只是为了向你证明什么是没有秘密的
Just to kind of demonstrate to you
that there's no mystery into what

2
00:00:03.520 --> 00:00:05.459
是 Docker 映像。
is a Docker image.

3
00:00:05.459 --> 00:00:09.210
我们要开始用手来运行 Docker 映像，对吧 ?
We're gonna start to run
a Docker image by hand, right?

4
00:00:09.210 --> 00:00:11.070
使用之前我们所做的技术。
Using the same techniques
that we did before.

5
00:00:11.070 --> 00:00:17.498
是啊只是为了证明他们只是把文件都压缩了差不多吧
Yeah, just to show that they're literally
just zip files, pretty much, right?

6
00:00:17.498 --> 00:00:22.210
所以，预先制的容器叫做图像，对吧 ?
So, a pre-made container
is called an image, right?

7
00:00:22.210 --> 00:00:25.410
你可以把你的图像从其他人的图像中拍摄下来，对吗 ?
And you can base your images off
of other people's images, right?

8
00:00:25.410 --> 00:00:28.859
而你把它们叫做层次结构是相互顶着的。
And you kind of build these what they're
called is layers on top of each other.

9
00:00:30.600 --> 00:00:33.880
基本上所有的图像都是把状态转出来
And basically an all in images
is it just dumps out the state

10
00:00:33.880 --> 00:00:37.280
将它连接在一起或将其连接在一起。
of a particular container and
ties it together or zips it together.

11
00:00:38.289 --> 00:00:40.240
事实上它确实是这样做的，对吗 ?
It's actually literally what it does,
right?

12
00:00:40.240 --> 00:00:43.960
所以，让我们继续玩这个游戏。
So, let's go ahead and
have some fun with this.

13
00:00:46.259 --> 00:00:52.719
所以我们要在码头的集装箱里做这个
So yeah, we're gonna do this
within a docker container.

14
00:00:52.719 --> 00:00:54.979
所以我们要在码头集装箱内跑码头
So we're gonna run docker from
within a docker container.

15
00:00:56.109 --> 00:00:58.799
这事有一定程度的对吧
There's some levels to this, right?

16
00:00:58.799 --> 00:01:02.560
原因是我需要 Ubuntu，我现在在 Mac 上。
And the reason is I need Ubuntu,
and I'm on Mac right now.

17
00:01:02.560 --> 00:01:04.280
所以如果你在这里运行这个容器
So if you run this container right here,

18
00:01:04.280 --> 00:01:08.289
它要做的就是要运行一个码头的码头
what this is gonna do is it's going to
run a docker container that has a docker

19
00:01:09.849 --> 00:01:13.019
与您的主机 VM 连接的客户机，对吗 ?
client that's connected to your host VM,
right?

20
00:01:13.019 --> 00:01:14.930
或者你的电脑是吧
Or your host computer, right?

21
00:01:14.930 --> 00:01:19.600
所以如果我要这样做
So if I run this, This is going to

22
00:01:19.600 --> 00:01:24.123
连接到在我的 Docker 桌面上运行的 Docker 吗 ?
connect to my docker that's running
on my docker desktop right?

23
00:01:27.013 --> 00:01:30.293
所以你现在可以看到，其实我是，如果猫的问题。
So you can see now,
I'm actually, if cat /etc/issue.

24
00:01:31.480 --> 00:01:34.030
实际上我在阿尔派恩的 Linux 里
I'm actually within Alpine Linux,
and we'll talk about what

25
00:01:34.030 --> 00:01:39.640
Alpine Linux 是后来的，但可以说我在 Linux 中，但如果我说过 docker ps的话，
Alpine Linux is later, but suffice to say
I'm within Linux, but if I say docker ps,

26
00:01:39.640 --> 00:01:43.390
我可以看到我在运行的容器，对吗 ?
I can actually see the container
within which I'm running, right?

27
00:01:43.390 --> 00:01:46.680
这是非典型的，通常您无法连接到主机外部，
This is atypical, typically you
cannot connect outside of the host,

28
00:01:46.680 --> 00:01:48.490
但这就是这破折号的原料
but that's what this dash feed did.

29
00:01:48.490 --> 00:01:50.909
它让我在它外面连接起来，对吧 ?
It allowed me to connect outside of it,
right?

30
00:01:50.909 --> 00:01:55.319
所以我打开了一个隧道给主机， Docker 桌面。
So I opened a tunnel to the host,
Docker desktop.

31
00:01:56.500 --> 00:01:59.210
同样，不要太担心这一问题的语义。
Again, don't worry too much
about the semantics of that.

32
00:01:59.210 --> 00:02:01.349
知道我们正在连接到主机 Docker 容器。
Just know that we're connecting
to the host Docker container.

33
00:02:03.049 --> 00:02:05.349
所以我就在那儿运行了这个命令
So I ran this command right there.

34
00:02:06.489 --> 00:02:10.349
我现在想做的就是下载 Docker 容器。
So what I wanna do right now is I
want to download a Docker container.

35
00:02:10.349 --> 00:02:13.370
然后我想去环境中分享它
And then I wanted to route into
the environment and unshare it and

36
00:02:13.370 --> 00:02:15.069
然后将其添加到 C 组。
then add it to C groups.

37
00:02:15.069 --> 00:02:18.504
我要离开 C 组因为我们看到了如何做到这一点
I'll leave out running the C groups
because we saw how to do that,

38
00:02:18.504 --> 00:02:20.659
这有点烦人吗
tt's a bit burdensome?

39
00:02:20.659 --> 00:02:22.199
我想你会相信我的对吧
So I think you'll trust me, right?

40
00:02:23.280 --> 00:02:26.979
但我现在要做的就是我要说另一个 Docker 命令
But what I'm gonna do right now is I'm
gonna say another Docker command right

41
00:02:26.979 --> 00:02:35.139
现在码头工人叫我叫我的高山
now, docker run -- rm
-dit --name my-alpine.

42
00:02:35.139 --> 00:02:38.954
我们要跑高山 3.10
And we're gonna run Alpine : 3.10,

43
00:02:38.954 --> 00:02:43.099
我们要从那个范围内跑来
and we're gonna run
shell from within that.

44
00:02:45.479 --> 00:02:46.262
现在这一切都要做了
Now all this is gonna do,

45
00:02:46.262 --> 00:02:49.310
这将会在后台启动一个容器就是我们在这里做的
this is gonna start a container in
the background, that's all we did here.

46
00:02:49.310 --> 00:02:53.280
所以如果我再看 docker PS 你就能看到你
So if I look in docker PS again,
you can see you right there

47
00:02:53.280 --> 00:02:57.120
我把这个容器命名为我的高山
I have this container here which
I have named my alpine and

48
00:02:57.120 --> 00:03:01.169
都是在跑，什么都没做，就跑了。
all is doing it's just running,
not doing anything, just running.

49
00:03:03.500 --> 00:03:04.270
我为什么要这样做
Now why did I do this?

50
00:03:04.270 --> 00:03:06.729
我要把这个国家扔出去
I'm going to dump the state
out of this right and

51
00:03:06.729 --> 00:03:10.669
然后我就把它作为自己的容器运行，这正是一个图像。
then I'm gonna run it as my own container,
which is exactly what an image is.

52
00:03:12.310 --> 00:03:15.923
所以我要说码头出口 -o
So I'm going to say docker export -o

53
00:03:15.923 --> 00:03:23.500
dockercontainer.tar ，类似于 Linux 的 zip 文件。
dockercontainer.tar, which is
like a zip file right, for Linux.

54
00:03:23.500 --> 00:03:26.000
我要把我的高山倒掉
And I'm going to dump out
the state of my alpine.

55
00:03:27.069 --> 00:03:29.780
你现在可以看到我有了这个码头
So you can see now I have
this dockercontainer.tar,

56
00:03:29.780 --> 00:03:32.349
这就是那个集装箱的状态
this is the state of
what that container is.

57
00:03:33.680 --> 00:03:39.610
现在，我将创建一个目录， mkdir container-root。
Now I'm going to make a directory,
mkdir container-root.

58
00:03:39.610 --> 00:03:42.810
我要说焦油 xf
And I'm gonna say tar xf.

59
00:03:42.810 --> 00:03:45.216
我永远都不记得焦油的旗帜了
I can never remember the flags for tar.

60
00:03:45.216 --> 00:03:51.804
Dockercontainer.tar -C 容器-root/ 这将转至，
Dockercontainer.tar -C
container-root/ this is going to,

61
00:03:51.804 --> 00:04:00.349
如果我看看现在的容器内部，看起来很熟悉，对吧 ?
if I look inside of container-root now,
looks pretty familiar, right?

62
00:04:00.349 --> 00:04:04.514
看起来是另一个 Linux 文件系统。
Looks like another file system for Linux.

63
00:04:04.514 --> 00:04:07.063
这就是它的存在
Again, that's what it is.

64
00:04:07.063 --> 00:04:11.900
所以现在这个我也应该很熟悉的
So now,
this should feel very familiar too if I

65
00:04:11.900 --> 00:04:16.860
说 unshare --mount --uts --ipc --net
say unshare --mount --uts --ipc --net

66
00:04:16.860 --> 00:04:22.067
--pid --fork --user -- ，您可以复制和
--pid --fork --user --, you can copy and

67
00:04:22.067 --> 00:04:28.288
如果你不是像我一样的惩罚
paste this if you are not a glutton for
punishment like I am.

68
00:04:28.288 --> 00:04:35.394
映射 root 用户，并且我要将 root 用户更改为 root 用户，并且
Map-root-user and I'm gonna say
change root to container root and

69
00:04:35.394 --> 00:04:40.904
我不去跑了，我要跑个不同的
I am not going to run bash,
I am going to run a different

70
00:04:40.904 --> 00:04:46.810
叫做灰因为它是阿尔卑斯的权利不是 Ubuntu
called ash because it is Alpine right,
it is not Ubuntu.

71
00:04:46.810 --> 00:04:50.430
我想你也可以说贝壳
I think you could just say shell as well.

72
00:04:53.659 --> 00:05:02.050
好了，现在你可以看到，如果我运行 pwd ，你可以看到我在根目录中。
Okay, now you can see If I run pwd,
you can see I'm in the root directory.

73
00:05:02.050 --> 00:05:04.899
现在，我无法共享此 Docker 容器映像。
I am unshared now into this
docker container image.

74
00:05:06.000 --> 00:05:11.576
如果你能做典型的安装程序
And if you could do the typical
mount procs none/ proc,

75
00:05:11.576 --> 00:05:17.079
安装- t sysfs 无/系统
mount- t sysfs none/sys

76
00:05:17.079 --> 00:05:23.680
N mount-t tmpfs none/temp。
N mount-t tmpfs none/temp.

77
00:05:23.680 --> 00:05:27.870
然后我就能拯救和一样的东西了对吧
Then I can save ps aux and
the same thing, right.

78
00:05:27.870 --> 00:05:30.449
我可以看到它在运行外壳，等等，对吧 ?
I can see it's running the shell,
so on and so forth, right?

79
00:05:30.449 --> 00:05:34.740
所以我基本上执行了这个 Docker 映像，但是
So I have essentially executed
this Docker image, but

80
00:05:34.740 --> 00:05:36.629
我用以前的技术做过
I've done it with the previous techniques.

81
00:05:36.629 --> 00:05:37.930
再一次，我还没有把它分组在一起。
And again, I haven't c grouped this.

82
00:05:37.930 --> 00:05:39.930
但如果你想的话你可以去做那首歌
But if you wanted to,
you could go and do that song and

83
00:05:39.930 --> 00:05:41.079
如果你想再跳舞
dance again if you wanted to.

84
00:05:43.872 --> 00:05:47.300
所以，再一次， Docker 映像是什么，对不对 ?
So again, there's no mystery to
what Docker images are, right?

85
00:05:47.300 --> 00:05:51.769
它们差不多就是 zip 文件，对，进去，为您运行这些命令。
They're pretty much just zip files, right,
that go in and run these commands for you.

86
00:05:51.769 --> 00:05:53.709
同样， Docker 正在为您做更多的工作。
Again, Docker is doing more than that for
you.

87
00:05:53.709 --> 00:05:56.879
它正在连接卷并通过安装一些其他类似的有用的东西
It's connecting volumes and by mounting
a bunch of other like useful things for

88
00:05:56.879 --> 00:05:59.740
你，我可以教你，对你不太有用
you, that I could teach you,
that would not be very useful to you

89
00:05:59.740 --> 00:06:01.639
因为你不会用手的对吧
because you would never do it by hand,
right?

90
00:06:01.639 --> 00:06:05.029
我只是向你展示这些东西是它的
That I'm just kind of showing you that
these are the sorts of things that it's

91
00:06:05.029 --> 00:06:06.399
在车篷下面为你做的事
doing underneath the hood for you.

92
00:06:09.589 --> 00:06:12.509
但这是你永远无法理解的复杂性，对吧 ?
But this is complexity that you
never have to understand, right?

93
00:06:12.509 --> 00:06:16.279
你从不需要但我觉得这对你来说是有用的
You never needed to but it's I think
it's useful for you to know, yeah.

94
00:06:16.279 --> 00:06:19.709
>> 在更改根之后的上一个命令上，
&gt;&gt; On that previous command
after you change root,

95
00:06:19.709 --> 00:06:21.420
你不需要这个 pwd/container吗 ?
you don't need the pwd/container?

96
00:06:21.420 --> 00:06:27.276
>> 否 >> 在那里，是的。
&gt;&gt; No
&gt;&gt; Right there, yeah.

97
00:06:27.276 --> 00:06:28.596
>> 这一权利 ?
&gt;&gt; This one right?

98
00:06:28.596 --> 00:06:30.500
>> 您是否需要以 pwd 为前缀 ?
&gt;&gt; You dont need to prefix with pwd?

99
00:06:30.500 --> 00:06:34.557
>> 否，所以在我的注释中，只是为了确保它始终工作
&gt;&gt; No, so I have that in my notes, just
to make sure that it would always work

100
00:06:34.557 --> 00:06:38.310
取决于放置容器根的位置，对。
depending on where you put
that container root, right.

101
00:06:38.310 --> 00:06:39.620
所以那里的人
So the pwd there,

102
00:06:39.620 --> 00:06:43.569
就像你现在的工作目录，对吧 ?
all it's going to do is like your
present working directory, right?

103
00:06:43.569 --> 00:06:47.487
但是因为我知道我把 Docker 容器放在根里，对，
But because I know I put that Docker
container in the roots, right,

104
00:06:47.487 --> 00:06:48.670
就在那儿
it's right there.

105
00:06:48.670 --> 00:06:52.610
是啊所以没必要
That yeah, so it wasn't necessary.

106
00:06:54.019 --> 00:06:56.159
只是确定路径是正确的
It's just making sure the path is correct.

107
00:06:56.159 --> 00:07:00.720
所以我们可以退出我们还在阿尔派恩
So we can exit out of that and
we are still within Alpine or

108
00:07:00.720 --> 00:07:03.050
Docker 容器，对吗 ?
the Docker container, right?

109
00:07:03.050 --> 00:07:06.449
所以我们在一个容器里做了一个容器，总是很有趣的，对吧 ?
So we did a container within a container,
which is always kinda fun, right?

110
00:07:07.550 --> 00:07:09.410
但现在我可以退出了再一次
But now I can exit out of that,
which again,

111
00:07:09.410 --> 00:07:12.550
会毁了你的整个环境但现在我又回到了 macOS
will destroy your entire environment,
but now I'm back in macOS.
