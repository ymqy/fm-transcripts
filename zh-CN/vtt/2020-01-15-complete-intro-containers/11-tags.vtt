WEBVTT

1
00:00:00.100 --> 00:00:04.009
所以我们接下来要说的是标签，对吗 ?
So the next thing that we're gonna
be talking about is tags, right?

2
00:00:04.009 --> 00:00:10.157
你可以在网页上看到我们要在 Docker中使用的标记。
So you can see here on the webpage
we're gonna go into Tags, under Docker.

3
00:00:10.157 --> 00:00:13.188
所以我们有点在这个话题上跳舞。
And so we've kind of been dancing
around the topic a little bit.

4
00:00:13.188 --> 00:00:17.916
但我想深入了解标记的深度，以及使用这些标记的原因，因此
But I wanna kinda get into depth with what
tags are, why you use them, so on and so

5
00:00:17.916 --> 00:00:18.420
第四个
forth.

6
00:00:20.550 --> 00:00:25.629
所以如果我在那儿做船坞就可以看到它
So you can see right there if I do
docker run -it node right there and

7
00:00:25.629 --> 00:00:29.539
除了别的什么别的什么外围赛
I leave off anything else,
any sort of qualifier for that.

8
00:00:30.589 --> 00:00:34.000
这意味着你要穿上最新的标签对吧
It implies that you're gonna
put on the latest tag, right?

9
00:00:34.000 --> 00:00:35.780
最新的是少数标记之一。
And latest is one of the few tags.

10
00:00:35.780 --> 00:00:37.259
就像一个特别的标签，对吧 ?
It's actually like a special tag, right?

11
00:00:37.259 --> 00:00:39.472
它意味着您发布的最后一个。
It implies the last one that you publish.

12
00:00:39.472 --> 00:00:42.820
这是你在做什么的最新版本吧
That is the latest version of
whatever you're doing, right?

13
00:00:42.820 --> 00:00:46.070
所以你在捣乱的时候就没事了
So this is fine when
you're messing around,

14
00:00:46.070 --> 00:00:47.340
就像我们现在所做的一样
kinda like what we're doing right now.

15
00:00:47.340 --> 00:00:49.259
只要说很酷就好了给我最新的
It's fine to just say,
cool, give me the latest,

16
00:00:49.259 --> 00:00:50.807
不管最新版本是什么
give me whatever the newest version is.

17
00:00:50.807 --> 00:00:55.408
但每当你的环境或任何时候
But whenever you're making your
environments or whenever you're

18
00:00:55.408 --> 00:01:00.344
这样做你想把它绑在特定的版本上
doing anything like that, you wanna
have it tied to a specific version.

19
00:01:00.344 --> 00:01:03.927
因为我相信我们都有问题的附件
Because I'm sure we've all had issues
with appendices before where they've

20
00:01:03.927 --> 00:01:05.832
半创造的东西坏了对吧
half-created and stuff broke, right?

21
00:01:05.832 --> 00:01:07.319
我们想避免这种情况
We wanna avoid that.

22
00:01:07.319 --> 00:01:10.039
这就是为什么在这个过程中我非常谨慎地
That's why in this particular course
I've been very careful to give

23
00:01:10.039 --> 00:01:11.759
您要下载的特定标记。
you specific tags to download.

24
00:01:13.170 --> 00:01:17.460
现在，你也许会问，是否有任何韵律或有标签的原因 ?
Now, you might ask, is there any sorta
rhyme or reason of how tags are made?

25
00:01:17.460 --> 00:01:18.950
答案是，不是真的。
And the answer is, not really.

26
00:01:18.950 --> 00:01:23.379
这不像 npm ，他们期待语义上的版本控制或者任何类似的东西。
It's not like npm, where they're expecting
semantic versioning or anything like that.

27
00:01:23.379 --> 00:01:25.180
Docker 标记要松得多，对吗 ?
Docker tags are much more loose, right?

28
00:01:25.180 --> 00:01:27.545
无论作者决定如何将标签命名。
It's whatever the author
decides to name the tags.

29
00:01:29.259 --> 00:01:33.789
这里的一个例子是节点:这里是 8 个，对吧 ?
So an example of that would
be node:8 right here, right?

30
00:01:33.789 --> 00:01:37.950
假设我有个根据节点 8的应用
Let's say I had something that I had
an app that dependent on node 8,

31
00:01:37.950 --> 00:01:39.183
我可以说节点:8。
I can say node:8.

32
00:01:39.183 --> 00:01:41.670
这会给我 8 个最新发行版的
And this will give me whatever
the latest release of 8 is,

33
00:01:41.670 --> 00:01:46.020
我觉得舒服多了而不是什么最新的事
which I feel much more comfortable with,
rather than the latest of whatever.

34
00:01:46.020 --> 00:01:49.189
现在，不要这样做，因为不推荐使用节点 8 ，对吗 ?
Now, don't do this because
Node 8 is deprecated, right?

35
00:01:49.189 --> 00:01:50.689
已经不在服役了对吧
It's no longer in service, right?

36
00:01:50.689 --> 00:01:53.329
所以它没有得到安全修复或者类似的东西。
So it's not getting security fixes or
anything like that.

37
00:01:53.329 --> 00:01:54.259
但它还在外面
But it's still out there.

38
00:01:54.259 --> 00:01:58.346
如果你需要的话你可以做到的好吗
If you needed it, you could do that, okay?

39
00:01:58.346 --> 00:02:01.030
因此，我们继续关注 Docker Hub 页面。
So let's go ahead and take a look
at the Docker Hub page for that.

40
00:02:01.030 --> 00:02:04.221
这是节点容器的 Docker Hub 页面，对吗 ?
This is the Docker Hub page for
the Node container, right?

41
00:02:04.221 --> 00:02:08.915
任何一个集装箱里的每个人都要
And everyone at any one of these
containers are all gonna have

42
00:02:08.915 --> 00:02:11.240
某种类型的 Docker Hub 页面。
some sort of Docker Hub page.

43
00:02:11.240 --> 00:02:14.620
你可以在这里看到，这些标签都存在，对吧 ?
So you can see here, these all of
the labels that exist for this, right?

44
00:02:14.620 --> 00:02:16.810
有很多节点容器。
There are a lot of node containers.

45
00:02:16.810 --> 00:02:18.681
那为什么呢
Now, why is that?

46
00:02:18.681 --> 00:02:23.090
你可以看到，你可以要求很多非常具体的事情，对吗 ?
You can see here you can request
a lot of very specific things, right?

47
00:02:23.090 --> 00:02:25.901
所以如果我来这里我们就要求
So if I come down here,
we've been asking for

48
00:02:25.901 --> 00:02:28.650
12 张是这张的
12 stretch which is this one right there.

49
00:02:28.650 --> 00:02:32.198
但你可以看到有很多不同的事物
But you can see there is a lot of
different things that all refer to

50
00:02:32.198 --> 00:02:33.900
一样的对吧
the same thing, right?

51
00:02:33.900 --> 00:02:37.280
我们可以把它称为 " 双 - 拉伸" 。
We could've referred to
this as erbium-stretch.

52
00:02:37.280 --> 00:02:41.449
因为，从技术上来说，节点 12 是节点的铒释放。
Because, technically,
Node 12 is the erbium release of node.

53
00:02:41.449 --> 00:02:43.349
不是你需要知道的
Not that you ever needed to know that.

54
00:02:43.349 --> 00:02:45.766
我完全忘记了，直到我现在才看了它。
And I totally forgot that until
I just read it right now.

55
00:02:45.766 --> 00:02:48.849
所以它有一个名字，而不仅仅是没有人这么叫它。
So it does have a name,
not just no one ever calls it that.

56
00:02:50.780 --> 00:02:54.729
但你可以把它称为 LTS 拉伸的 LTS
But you could refer it to as
LTS stretch which LTS is like,

57
00:02:54.729 --> 00:02:58.599
节点 12 是节点的最新 LTS， right。
Node 12 is the latest LTS,
right, for a Node.

58
00:02:58.599 --> 00:03:02.789
或者你可以只说点 " 点 " ，对吧 ?
Or you could just actually
just said node:lts, right?

59
00:03:02.789 --> 00:03:08.580
这指的是拉伸 Debian 的 LTS 和节点的 LTS 。
Which have been referred to the LTS of
stretch Debian and the LTS of node.

60
00:03:08.580 --> 00:03:12.912
我还是不建议这样做虽然我不觉得这是个好主意
I'm still not gonna recommend that though
I don't think that's a good idea because

61
00:03:12.912 --> 00:03:17.135
当 LTS 向前滚动时，向右，当我们移动到节点 14 时，以及 Debian 10。
as that LTS rolls forward, right,
when we move on to Node 14, and Debian 10.

62
00:03:17.135 --> 00:03:21.650
或者下一个 Debian 会成为下一个 LTS 的版本，对吧 ?
Or whatever the next version of Debian
that's gonna be the next LTS, right?

63
00:03:21.650 --> 00:03:25.420
那个 LTS 的标签会和它一起滚动的对吧
That LTS tag is going to
roll along with it, right?

64
00:03:25.420 --> 00:03:28.685
如果你建造一个应用，就像坐在架子上 5 年，
And if you build an app and then it's like
sitting on the shelf for five years, and

65
00:03:28.685 --> 00:03:31.438
然后你就回来说 LTS 会很不一样对吧
then you come back to it that LTS
is gonna be very different, right?

66
00:03:31.438 --> 00:03:34.371
这些都是你想要思考的东西
So these are the kinda things you
wanna be thinking through is like,

67
00:03:34.371 --> 00:03:38.009
我怎么能及时把握这一刻才能让这一刻不再发生
how can I capture this moment in time so
this doesn't break in the future?

68
00:03:38.009 --> 00:03:39.584
这就是你想用容器做的事
That's what you wanna do with containers.

69
00:03:41.752 --> 00:03:43.430
但这里还有其他事对吧
But there's other things here, right?

70
00:03:43.430 --> 00:03:45.170
有弹性的，对吧 ?
There's stretch-slim, right?

71
00:03:45.170 --> 00:03:48.102
到目前为止，我们一直在下载完整的 Debian ，对吧 ?
So so far, we've been downloading
the full Debian, right?

72
00:03:48.102 --> 00:03:51.031
但我们可以说 12 条细长的
But we could say 12-stretch-slim, and

73
00:03:51.031 --> 00:03:56.182
根据他们的定义，没有特别的定义，但这将会
by their definition that there's no
special definition of slim but this will

74
00:03:56.182 --> 00:04:01.550
给我们一个更苗条的版本或者就像一个小版本的 Debian，对吧 ?
give us a more slender version or
like a smaller version of Debian, right?

75
00:04:01.550 --> 00:04:05.179
通常，由于几个原因，您想拥有最小的容器。
In general you wanna have the smallest
container possible for several reasons.

76
00:04:05.179 --> 00:04:10.002
有一个完整的章节让我们稍后再讨论
And there's a whole section on that so
we'll get to that later but

77
00:04:10.002 --> 00:04:12.995
甚至超出了伸展的范围对吧
there's even beyond stretch, right?

78
00:04:12.995 --> 00:04:16.370
还有杰西和巴斯特这些都是 Debian 的其他版本吧
There's Jesse and Buster and these are
other versions of Debian as well, right?

79
00:04:17.560 --> 00:04:19.812
你也可以在这里看到我们可以在高山上运行，对吧 ?
You can also see here that
we can run in Alpine, right?

80
00:04:19.812 --> 00:04:25.151
所以我可以说，给我点冒号，阿尔卑斯的破折号，什么，对吧 ?
So I can say, give me node colon,
Alpine dash, whatever, right?

81
00:04:25.151 --> 00:04:27.439
所有这些版本都存在。
And all those versions exists as well.

82
00:04:29.509 --> 00:04:30.519
里面还有什么 ?
What else is in there?

83
00:04:30.519 --> 00:04:32.742
这里甚至还有 chakracore
There's even chakracore down here.

84
00:04:32.742 --> 00:04:36.610
哪个 chakracore 实际上是 JavaScript 引擎
Which chakracore is actually
the JavaScript engine that's baked into

85
00:04:36.610 --> 00:04:38.899
Microsoft Edge ，旧版本，对吧 ?
Microsoft Edge, the old version, right?

86
00:04:38.899 --> 00:04:42.019
他们拿走了这个，把它放进了节点。
And they took that and
they put that into Node.

87
00:04:42.019 --> 00:04:43.110
所以不要跑 V8
So instead of running V8,

88
00:04:43.110 --> 00:04:47.399
这就是 Chrome 的存在你可以使用 chakracore
which is what's in Chrome,
you can actually use chakracore.

89
00:04:47.399 --> 00:04:51.130
我不建议即使是在微软工作的人
Now, I don't recommend that,
even as someone who works in Microsoft,

90
00:04:51.130 --> 00:04:53.651
因为我们都不支持 Chakra 了
because we don't even
support Chakra anymore.

91
00:04:53.651 --> 00:04:55.740
我们也要去铬化
We're moving to Chromium as well.

92
00:04:55.740 --> 00:04:59.622
所以就可以说有很多不同的版本。
So suffice to say there's
a lot of different versions.

93
00:04:59.622 --> 00:05:01.211
所以它会让你和
And so it behooves you and

94
00:05:01.211 --> 00:05:05.379
准确的了解你想要什么的版本是吧
figure out exactly which versions
of what that you want, right?

95
00:05:05.379 --> 00:05:06.810
想找出正确的标签
To figure out the right tags.

96
00:05:08.689 --> 00:05:10.519
我觉得我给你的那个很不错
I think the one that I gave
you is a pretty good one.

97
00:05:10.519 --> 00:05:12.730
如果你放弃了对吧
If you give it stretch, right?

98
00:05:12.730 --> 00:05:16.040
如果后面有更多的安全补丁，你会想要这些，对吧 ?
If there's more security patches that
come out later you want those, right?

99
00:05:16.040 --> 00:05:19.029
您希望自动合并到容器中。
You want those to automatically be
incorporated into your containers.

100
00:05:19.029 --> 00:05:21.339
这就是为什么它很依赖拉伸的原因，对吧 ?
That's why it's good dependent to stretch,
right?

101
00:05:21.339 --> 00:05:25.261
然后我认为对 12 的依赖程度非常强，因为作为次要的补丁版本
And then I think it's good dependence to
12 because it as minor patch versions come

102
00:05:25.261 --> 00:05:27.319
你也会想要这些的
out, you'll probably want those as well.

103
00:05:30.182 --> 00:05:33.569
但如果你想跟 13 号节点乱搞的话你完全可以做到的对吧
But if you wanna mess around with node 13,
you can totally do that, right?

104
00:05:33.569 --> 00:05:35.915
所以你可以看到，最晚的是，对吧 ?
So you can see there,
that's what latest is, right?

105
00:05:35.915 --> 00:05:36.451
那是 13.3.0- 拉伸
It's 13.3.0-stretch.

106
00:05:36.451 --> 00:05:41.286
如果不是显而易见的，每条线，
In case it wasn't obvious,
each one these lines,

107
00:05:41.286 --> 00:05:45.343
这些都是同一个容器吧
these are all the same container, right?

108
00:05:45.343 --> 00:05:49.223
它们都是同一个容器的各种标签。
They're all various tags for
the same container.

109
00:05:49.223 --> 00:05:50.590
>> 如何确定要执行哪个操作 ?
&gt;&gt; How do you decide
which one do you want?

110
00:05:50.590 --> 00:05:52.189
我知道你提到这取决于你的需要
I know you mentioned that
depends on your needs.

111
00:05:52.189 --> 00:05:54.060
但这是否是某种经验法则 ?
But is this some kinda rule of thumb?

112
00:05:54.060 --> 00:05:56.882
我知道你刚才说伸缩是好的，但是
I know you just mentioned that
stretch is good version, but

113
00:05:56.882 --> 00:06:00.617
每一个容器都有类似的缺省值
does every container have sort of like,
hey, here's kinda the default one.

114
00:06:00.617 --> 00:06:03.254
当不确定的时候选择这个
When in doubt, pick this one.

115
00:06:03.254 --> 00:06:03.964
>> 是。
&gt;&gt; Yes.

116
00:06:03.964 --> 00:06:08.095
所以我认为有好的经验法则
So I think there are good
rules of thumb for

117
00:06:08.095 --> 00:06:11.884
像这样像一个 " 节点容器 " 一样适用于 Ruby 或类似的东西。
something like this, like a Node container
and apply to Ruby or something like that.

118
00:06:11.884 --> 00:06:17.959
我去找最新的 LTS 给我最新的 LTS 和最新的 LTS
I would go find the latest LTS for the
Linux that I'm on and the latest LTS for

119
00:06:17.959 --> 00:06:23.410
要么要么去要么去要么就把它绑起来好吗
the Node or go or whatever I'm on and
then tie it to that, right?

120
00:06:23.410 --> 00:06:27.600
这就是为什么这两个最新的 LTS 的 12 个伸缩库都是针对这两个的原因。
So that's why the 12 stretch cuz of
the two latest LTS is for both of those.

121
00:06:27.600 --> 00:06:30.471
现在如果我只是在捣乱
Now, if I'm just messing
around with something,

122
00:06:30.471 --> 00:06:34.694
我要做最新和最伟大的技术对吧
I'll just do latest cuz I wanna play
the latest and greatest tech, right?

123
00:06:34.694 --> 00:06:37.079
但你现在不想发货 13 号节点对吧
But you don't wanna ship
Node 13 right now, right?

124
00:06:37.079 --> 00:06:38.779
这被认为是当前版本的节点
That's considered
the current version of Node,

125
00:06:38.779 --> 00:06:41.149
这意味着他们在做实验之类的事
which means that they're experimenting and
things like that.

126
00:06:41.149 --> 00:06:44.399
不能保证它不会破裂什么的
There's no promises that it's not
gonna break or anything like that.

127
00:06:44.399 --> 00:06:47.757
因此， 12 对于您的生产工作负载是好的。
So that's why it's good to be on 12 for
your production workloads.

128
00:06:49.473 --> 00:06:53.983
>> So [COUGH] ，例如， 12.13.2 出来时，
&gt;&gt; So [COUGH] when, for
example, 12.13.2 comes out,

129
00:06:53.983 --> 00:06:56.742
是这个名单上的另一个条目
is that another entry in this list or

130
00:06:56.742 --> 00:07:01.262
是否会覆盖或覆盖此 kinda 列表?
do patches get overwritten or
overwrite this kinda list?

131
00:07:01.262 --> 00:07:02.185
星星 >> 右边。
Star.
&gt;&gt; Right.

132
00:07:02.185 --> 00:07:05.980
>> 如果每次都是这样我们就会有更多的
&gt;&gt; Cuz it seems like there'd be even
more than this if it was every single

133
00:07:05.980 --> 00:07:06.879
补丁版本。
patch version ever.

134
00:07:08.810 --> 00:07:11.841
> > 是这样，您可以将其定义为特定补丁发行版 ( 如果
&gt;&gt; Yeah so you can definately tie
it to a specific patch release if

135
00:07:11.841 --> 00:07:13.312
你觉得那是 importnat
you felt that was importnat.

136
00:07:13.312 --> 00:07:14.720
我不会建议这样做的。
I would not suggest that.

137
00:07:14.720 --> 00:07:17.021
>> 右边。 我想我主要是问
&gt;&gt; Right.
I guess I was mostly asking,

138
00:07:17.021 --> 00:07:20.036
如果你用 12.13.1的制作
cuz if you created it with 12.13.1,

139
00:07:24.173 --> 00:07:28.252
你只是想让我们说 12 个吧我猜是我的问题
Do you just want us to say 12,
I guess is my question,

140
00:07:28.252 --> 00:07:32.699
主版本，然后离开次和补丁?
the major version, and
then leave off the minor and patch?

141
00:07:34.180 --> 00:07:40.821
> > 是的，如果我把它绑在 12.10，对，或者什么的，我们现在就在 12 . 13。
&gt;&gt; Yeah, so if I tied it to 12.10, right,
or whatever, we're on right now, 12.13.

142
00:07:40.821 --> 00:07:46.840
所以如果我 12 点 13 的话，它会上升到 0.4，对吧 ?
So if I did 12.13,
it would bump up to 0.4, right?

143
00:07:46.840 --> 00:07:49.158
但不会碰到 12.14，对吧 ?
But it would not bump up to 12.14, right?

144
00:07:49.158 --> 00:07:50.468
那就有13 个了
It would keep it on 13.

145
00:07:50.468 --> 00:07:53.766
所以这里有更多的版本甚至没有被列出。
So there are more versions
here that are not even listed.

146
00:07:53.766 --> 00:07:54.889
> > 好的谢谢
&gt;&gt; Okay, thank you.

147
00:07:54.889 --> 00:07:56.985
> > 是。
&gt;&gt; Yep.

148
00:07:56.985 --> 00:07:58.382
你知道这事很重要对吧
It's important stuff for
you to know, right?

149
00:07:58.382 --> 00:08:00.915
知道如何把它绑在正确的版本上是很重要的
It's important stuff to know how to
tie it to the correct versions of what

150
00:08:00.915 --> 00:08:01.670
你在等我
you're expecting.

151
00:08:03.500 --> 00:08:06.163
每个 Docker 页面都会为您提供这些信息。
And every Docker Page is
gonna have these for you.

152
00:08:09.483 --> 00:08:13.038
所以有些人不同意我的意见就像我 12 岁一样
So there are people that would disagree
with me, like I do 12 stretch,

153
00:08:13.038 --> 00:08:16.769
有人会说要做 12.13，对，破折号，
there are people that would say
just do 12.13, right, dash stretch,

154
00:08:16.769 --> 00:08:19.180
他们会把它保留在相同的小版本上
cuz they would keep it to
the same minor version.

155
00:08:19.180 --> 00:08:22.490
我想大家都同意，让补片卷是个好主意
I think everyone would universally agree,
it's a good idea to let patches roll

156
00:08:22.490 --> 00:08:25.238
不管怎么说因为这意味着你会得到安全补丁
forward no matter what, because that
means you'll get the security patches.

157
00:08:27.149 --> 00:08:31.829
我将断言，我从未有过一个次版本的 Node 破坏我正在做的事情。
I would assert that I've never had a minor
version of Node break what I'm doing.

158
00:08:33.299 --> 00:08:36.169
它们对节点的主要版本控制很有好处，
They're pretty good about
major versioning with Node,

159
00:08:36.169 --> 00:08:38.313
所以我对他们有很大的信任
so I have a lot of trust in them.

160
00:08:38.313 --> 00:08:43.849
我和他们一起在微软工作，他们非常谨慎。
And I work with them at Microsoft and
they're very careful about it.

161
00:08:43.849 --> 00:08:48.113
但这取决于你对容器的作者的信任程度，对吧 ?
But it depends on how much you trust
the authors of the container, right?

162
00:08:48.113 --> 00:08:53.841
如果您是基于某个 Joe's Crab Shack 和 Node Container 的人 ?
If you're based on someone
Joe's Crab Shack and Node container right?

163
00:08:53.841 --> 00:08:56.710
那也许你就不相信他们了对吧
Then maybe you trust them a bit less,
right?

164
00:08:56.710 --> 00:08:57.210
就看
It just depends
