WEBVTT

1
00:00:00.240 --> 00:00:04.570
下一节我们将讨论的是 Docker 映像
The next section we're gonna be talking
about is running Docker Images with

2
00:00:04.570 --> 00:00:09.369
Docker，您会发现，这将更容易一亿倍。
Docker, and you'll see that this
is about 100 million times easier.

3
00:00:11.439 --> 00:00:17.390
首先，我们要了解如何使用 Docker 运行。
So the first thing that we're gonna
learn how to do is use Docker run.

4
00:00:17.390 --> 00:00:20.140
所以 Docker 会为您做一些不同的事情。
So Docker does quite a few
different things for you.

5
00:00:20.140 --> 00:00:24.050
但是老实说，我想象的大多数人都将参加这个课程，
But honestly, for most people that I
imagined will be taking this course,

6
00:00:24.050 --> 00:00:26.370
Docker 运行是您真正关心的部分。
Docker run is the part that
you actually care most about.

7
00:00:26.370 --> 00:00:30.100
我们中的大多数人也许不会用手建造容器
Most of us probably won't be
building containers by hand and

8
00:00:30.100 --> 00:00:31.789
管理所有这些东西
managing all that kind of stuff.

9
00:00:31.789 --> 00:00:34.490
通常，很多时候，警察队伍会处理这个问题。
Typically, a lot of times
the ops teams will handle that.

10
00:00:34.490 --> 00:00:36.289
就像开发商一样
And as like developers,

11
00:00:36.289 --> 00:00:39.829
你对运行容器的兴趣可能比实际建造这些容器更感兴趣。
you might be more interested in running
containers than actually building them.

12
00:00:39.829 --> 00:00:40.630
但谁知道呢 ?
But who knows?

13
00:00:40.630 --> 00:00:42.490
我不是你妈妈你可以为所欲为
I'm not your mom,
you can do whatever you want.

14
00:00:44.880 --> 00:00:46.750
所以我们要这么做
So we're gonna do this.

15
00:00:46.750 --> 00:00:49.670
我们要运行一个 Docker alpine 容器。
We're gonna run a Docker alpine container.

16
00:00:49.670 --> 00:00:51.420
我们已经干过这事了
And we've kinda been
doing this already and

17
00:00:51.420 --> 00:00:54.719
我只是有点喜欢说别在窗帘后面偷看
I've just been kind of like saying
don't peek behind the curtain yet.

18
00:00:54.719 --> 00:00:56.030
现在我们要躲在窗帘后面
Now we're gonna peek behind the curtain.

19
00:00:57.320 --> 00:00:59.450
所以我要回到这里来对比密码
So I'm gonna come back here to vs code.

20
00:01:00.950 --> 00:01:02.658
我在 MacOS
I'm here in MacOS.

21
00:01:04.090 --> 00:01:12.328
我要说 Docker run--interactive--tty。
And I'm gonna say Docker
run--interactive--tty.

22
00:01:12.328 --> 00:01:17.299
我能记起来的跑
Yep, I can can ever remember, run.

23
00:01:17.299 --> 00:01:19.439
然后在那个时候一旦你做了这个
And then at that point,
once you've done this,

24
00:01:19.439 --> 00:01:22.099
你可以做任何你想做的事情
you can run basically anything
that you want to run.

25
00:01:22.099 --> 00:01:24.489
在这件案子里我想说的是
In this particular case,
I want to run let's say,

26
00:01:24.489 --> 00:01:26.960
Alpine ，对，是 Linux 的味道。
Alpine, right, which is a flavor of Linux.

27
00:01:26.960 --> 00:01:27.510
我要说阿尔卑斯
I'm gonna say Alpine.

28
00:01:29.478 --> 00:01:31.879
这就是 Docker Hub 的关闭权限吗 ?
And this is what's coming
off of Docker Hub right?

29
00:01:31.879 --> 00:01:33.390
这就是我们以前所看到的
Which is what we were
looking at previously.

30
00:01:34.840 --> 00:01:41.140
现在我可以说 Docker 会运行 Alpine ，这会隐式运行 :latest ， right?
Now I could say Docker run Alpine, and
this would implicitly run :latest, right?

31
00:01:41.140 --> 00:01:43.909
这将是他们出版的最新版本，对吧 ?
Which would be the latest version
that they've published, right?

32
00:01:45.430 --> 00:01:49.219
现在我建议你不要用最新的
Now I'm going to suggest
that you never use latest.

33
00:01:49.219 --> 00:01:50.400
这只是一把脚枪
It's just kind of a foot gun.

34
00:01:50.400 --> 00:01:53.890
尤其是以后大家都在看这个课程，
And in particular, since people
will be watching this course later,

35
00:01:53.890 --> 00:01:55.879
我将会非常清楚我所使用的版本
I'm gonna be very explicit about
the versions that I'm using,

36
00:01:55.879 --> 00:01:59.549
我要这些演示给你做我写的代码
cuz I want these demos to work for
you with code that I've written.

37
00:02:00.769 --> 00:02:03.909
所以我想说的是 3.10，我认为这是最近的一个。
So I'm gonna say 3.10, which I think
is one of the more recent ones.

38
00:02:06.569 --> 00:02:09.616
如果你之前没有安装或拉动
Now if you haven't installed this or
pulled this previously,

39
00:02:09.616 --> 00:02:14.099
它会花一秒下载所有这些层然后再花一秒
it'll take a second say downloading all
these layers and it'll take a second.

40
00:02:14.099 --> 00:02:17.370
我觉得阿尔派恩最终的形象就像是
I think Alpine,
the final image ends up being like,

41
00:02:17.370 --> 00:02:20.960
20 多兆字节之类的
20 some odd megabytes,
something like that.

42
00:02:20.960 --> 00:02:22.650
这就是高山的意义。
And that's the point of alpine.

43
00:02:22.650 --> 00:02:26.240
Alpine 就像一个很小的 Linux
Alpine is like a tiny Linux,
it has the barebones and

44
00:02:26.240 --> 00:02:29.868
运行 Web Service的必要性，之类的内容，以及其他任何内容。
the necessity for running web services,
stuff like that, and nothing else.

45
00:02:31.400 --> 00:02:33.966
我想我们会再讨论一段时间
And I think we'll get more into that later
there's a whole section just talking

46
00:02:33.966 --> 00:02:34.473
关于阿尔派恩的事
about Alpine.

47
00:02:34.473 --> 00:02:40.000
但是再次，你可以说猫等等，我们可以看到，欢迎阿尔派恩 - Linux
But again, you can say cat, etc, issue,
and we can see, welcome to Alpine Linux

48
00:02:40.000 --> 00:02:44.860
3.10. 我们要求 Alpine 3.10.
3.10, that's expected given
that we asked for Alpine 3.10.

49
00:02:44.860 --> 00:02:49.180
这可能比我们之前做的容易些
Now this probably seems a little bit
easier than what we were doing before

50
00:02:49.180 --> 00:02:53.099
这就像导出和执行控制组以及共享。
which is like exporting and
doing control groups and on shares.

51
00:02:53.099 --> 00:02:54.670
这都是为了你
This just did all of that for you.

52
00:02:57.259 --> 00:02:58.520
所以我们就花了
So we just spent,

53
00:02:58.520 --> 00:03:02.180
我不知道几个小时后就会有一个命令给你
I don't know, couple hours going
over what one command does for you.

54
00:03:02.180 --> 00:03:04.199
我不知道你是怎么想的
I don't know how you feel about that.

55
00:03:04.199 --> 00:03:06.405
但那是真的发生的事
But that's honestly what happened.

56
00:03:06.405 --> 00:03:09.974
这个比较容易做点，比所有人都更容易记住
This is a little bit easier to do,
a little bit easier to remember than all

57
00:03:09.974 --> 00:03:11.974
控制小组和股票之类的东西
the control groups and
the shares and stuff like that.

58
00:03:14.384 --> 00:03:15.794
好了我要退出了
All right, so I'm gonna hit exit.

59
00:03:15.794 --> 00:03:17.724
那就把我们从集装箱里出来
That'll exit us out of the container.

60
00:03:17.724 --> 00:03:23.844
再一次提醒你容器是被制造的
And again, to remind you, containers
are made to be, the entire idea behind

61
00:03:23.844 --> 00:03:28.194
Docker 容器通常是将它们进行旋转和破坏。
Docker containers in general is that
they're made to be spun up and destroyed.

62
00:03:28.194 --> 00:03:29.599
经常这么做
And frequently do that.

63
00:03:29.599 --> 00:03:33.520
比赛使用他们的短暂权利，但他们的时间不太长。
The tournament uses their ephemeral
rights but they do not last very long.

64
00:03:33.520 --> 00:03:35.787
因此，当您处理 Docker 容器时，不需要任何内容，
So nothing like when you
are dealing with Docker containers,

65
00:03:35.787 --> 00:03:38.240
如果不在 Docker 文件中，那么仅假定任何内容都是永久的。
if it is not in the Docker file,
just assume nothing is permanent.

66
00:03:38.240 --> 00:03:42.578
因此，如果您没有运行数据库，那么这是一种好的思维方式。
So that is kind of a good way of thinking
so if you are running a database without

67
00:03:42.578 --> 00:03:45.199
卷并忽略卷，仅为秒。
a volume and ignore volumes for
just a second.

68
00:03:45.199 --> 00:03:49.591
但如果你说如果你用 Docker 来运行所有数据库
But if you say, if you're running
all of your databases with Docker,

69
00:03:49.591 --> 00:03:55.199
一旦您关闭这些 Docker 容器，您的数据就会随它一起使用。
as soon as you close down those Docker
containers, your data goes with it.

70
00:03:55.199 --> 00:03:56.594
所以你得减轻这些东西
So you have to mitigate that kinda stuff.

71
00:03:56.594 --> 00:04:00.360
所以我要给你看一下小路
So I'm gonna show you
just a little shortcut,

72
00:04:00.360 --> 00:04:05.789
因为你的 " 性 " 是一种难以记忆的
because --interactive-tty,
kind of hard to remember it.

73
00:04:05.789 --> 00:04:09.467
你只能说 Docker 会运行对吧
You can just say docker run -it, right?

74
00:04:09.467 --> 00:04:15.219
它所做的就是以交互方式将你放入容器中。
And what this -it does is it puts you
interactively into the container.

75
00:04:15.219 --> 00:04:22.339
所以如果我再次说 " 松油 : 3 . 10 " ，那就是它所做的。
So if I say alpine:3.10 again,
that's what that -it does.

76
00:04:22.339 --> 00:04:27.870
如果我说 Docker 运行 Alpine 3.10
Now if I just say Docker run Alpine 3.10,

77
00:04:27.870 --> 00:04:31.610
说吧好吧
just gonna say, okay, so

78
00:04:31.610 --> 00:04:36.480
它所做的是它的运行 Alpine 是好的，我做到了，然后它结束了吗 ?
what it did is it ran Alpine is like okay,
I did it and then it finished right?

79
00:04:36.480 --> 00:04:38.430
所以这就像不一样
So that's what the -it is like no,

80
00:04:38.430 --> 00:04:41.050
对它没有任何保留我想真正地连接它
no hold on to it I want to
actually connect to it right.

81
00:04:43.930 --> 00:04:46.872
现在我可以说 Docker 运行 Alpine 3.10 和
Now I can say Docker run Alpine 3.10 and

82
00:04:46.872 --> 00:04:51.459
我实际上可以给它一个命令在完成前执行。
I can actually give it a command
to execute first before finishes.

83
00:04:51.459 --> 00:04:56.220
所以，如果我说，它会进入，它会运行，然后它就会结束。
So if I say ls, it's gonna go in, it's
gonna run ls, and then it's gonna finish.

84
00:04:56.220 --> 00:04:59.100
这就是它在容器里的位置
So this is what the ls is of
wherever it is in the container,

85
00:04:59.100 --> 00:05:00.540
好像是根的对吧
which looks like it's the root, right?

86
00:05:02.360 --> 00:05:07.052
这就是最后的部分，而这里的秩序对我们来说是非常关键的。
So that's what that last part is and the
order here actually is very critical for

87
00:05:07.052 --> 00:05:07.620
Docker。
Docker.

88
00:05:07.620 --> 00:05:10.449
因此，您会执行 Docker ，然后执行该命令。
So you do Docker, then you do the command.

89
00:05:10.449 --> 00:05:11.980
那就在这里
Then the next part here.

90
00:05:13.189 --> 00:05:15.009
就像那都是你的旗子对吧
Like that has to be all of your flags,
right,

91
00:05:15.009 --> 00:05:18.740
它，这个 -- RM，所有这些不同的东西。
the -it, the --RM,
all that kind of different stuff.

92
00:05:18.740 --> 00:05:20.839
然后你把这个集装箱的名字
And then you put the name
of the container, and

93
00:05:20.839 --> 00:05:24.029
那么容器名称之后的所有内容都是您要运行的任何内容。
then everything after the name of
the container is whatever you want to run.

94
00:05:26.949 --> 00:05:29.300
如果你不把 LS 放在这里
And again, if you don't put the LS here,

95
00:05:29.300 --> 00:05:33.590
容器里有某种形式的指令对吧
the container has some sort of
command baked into it, right?

96
00:05:33.590 --> 00:05:34.680
所以它会跑来的
And so it'll run that.

97
00:05:36.350 --> 00:05:38.029
除非你让它做点别的
Unless you tell it to do something else.

98
00:05:38.029 --> 00:05:39.310
是 CMD 对吧
It's the CMD, right?

99
00:05:39.310 --> 00:05:39.831
他们就是这么叫的
That's what they call it.

100
00:05:43.091 --> 00:05:43.591
好的。
Okay.

101
00:05:45.409 --> 00:05:51.396
所以，我们可以说， Docker 会运行 Alpine 猫/etc/c事宜，对吧 ?
So just we can say,
Docker run Alpine cat /etc/issue, right?

102
00:05:51.396 --> 00:05:55.189
你会看到这里是 Alpine Linux。
And you'll see here that
this is Alpine Linux.

103
00:05:55.189 --> 00:06:02.632
如果我们把松油 : 3.10 改变为ubuntu:仿生，怎么办 ?
What happens if we change
alpine:3.10 to ubuntu:bionic?

104
00:06:06.464 --> 00:06:09.084
你去吧，有 Ubuntu 18.04，对吧 ?
There you go, it has Ubuntu 18.04, right?

105
00:06:09.084 --> 00:06:09.952
对，这就是我们所期望的。
Right, which is what we would expect.

106
00:06:09.952 --> 00:06:14.393
所以你可以看到我们可以交换任何我们想要的东西只要它在
So you can see here we can swap out
anything that we want as long as it's on

107
00:06:14.393 --> 00:06:16.545
Docker Hub 或在本地构建。
Docker Hub or we built it locally.

108
00:06:20.358 --> 00:06:23.785
所以我要给你一个警告，因为我正在考虑这个问题。
So I'm gonna give you a warning here,
since I'm thinking about it.

109
00:06:23.785 --> 00:06:26.475
很容易在你的电脑上获取很多图像
It's very easy to get a lot of
images on your computer and

110
00:06:26.475 --> 00:06:31.290
Docker 在映像中就像一个三十亿字节的数据，对吧 ?
have Docker take up like a,
three gigabytes just in images, right?

111
00:06:31.290 --> 00:06:37.389
因此，我认为如果您使用 Docker 修剪映像或映像修剪， Docker 映像修剪，
So I think if you do Docker prune images
or images prune, Docker image prune,

112
00:06:37.389 --> 00:06:42.029
Docker 映像修剪，就像这样，这将清除。
Docker image prune, like that,
and that'll clear up.

113
00:06:42.029 --> 00:06:43.978
比如你一直在管理 Docker
Like if you've been running Docker for
a for a while,

114
00:06:43.978 --> 00:06:46.199
这可能给你清理出足够的空间
this will probably clear up
a decent amount of space for you.

115
00:06:49.497 --> 00:06:53.918
但是，下次下载时，您必须重新构建所有内容。
But again, you'll have to rebuild
everything next time that you download it.

116
00:06:57.237 --> 00:07:03.839
好了， Docker 映像上的 Docker 映像仍然存在。
All right, so, still here on
the Docker images with Docker.

117
00:07:03.839 --> 00:07:04.509
我要说 Docker
I'm gonna say Docker.

118
00:07:08.365 --> 00:07:12.021
跑吧我们会说
Run, and we're gonna say -it but

119
00:07:12.021 --> 00:07:16.939
我们要把它放在新的旗子上
we're gonna put it in
this new flag --detach

120
00:07:16.939 --> 00:07:22.250
那就是仿生机器它会运行一些东西
ubuntu:bionic and
this is gonna run something.

121
00:07:22.250 --> 00:07:24.980
它会把它的散列分解为
It's gonna split up the hash which is
the hash of the container of that's

122
00:07:24.980 --> 00:07:25.629
当前正在运行。
currently running.

123
00:07:25.629 --> 00:07:30.199
然后它完成了，但是这个容器现在实际上是在后台运行。
And then it completes but this container's
now actually running in the background.

124
00:07:30.199 --> 00:07:33.680
这就是分离所做的事情
And that's what detach does and
says like hey run this but

125
00:07:33.680 --> 00:07:36.240
我不想在前台我想让它在后台运行
I don't wanna be in the foreground
I want it to run in the background.

126
00:07:36.240 --> 00:07:37.750
所以现在我有一个容器在后台运行。
So now I have a container
running in the background.

127
00:07:39.279 --> 00:07:43.540
所以如果我说 Docker ps，我可以看到这里有两个运行。
So if I say Docker ps, I can see
here I actually have two running.

128
00:07:43.540 --> 00:07:46.420
我的 Alpine 有一个在我之前的例子，对吧 ?
I still had that my Alpine one running
from my previous example, right?

129
00:07:48.709 --> 00:07:50.779
你可以看到它已经运行了 34 分钟。
So you can see this has been running for
34 minutes.

130
00:07:50.779 --> 00:07:52.699
已运行 18 秒。
This has been running for 18 seconds.

131
00:07:55.090 --> 00:07:57.317
现在我可以说， Docker 连接。
Now I can say, Docker attach.

132
00:07:57.317 --> 00:08:01.579
然后我就可以复制并粘贴
And then I can just copy and paste that.

133
00:08:01.579 --> 00:08:05.240
我没有给这个名字，所以我不能附加任何特定的名字。
I didn't give this one a name so
I can't attach to any specific name.

134
00:08:05.240 --> 00:08:08.634
其实你可以给那些不知道的人
Actually, you can give the ones stupefied.

135
00:08:08.634 --> 00:08:13.139
布达我已经知道了我们来吧
Brattain, I already know that is,
let's do it.

136
00:08:13.139 --> 00:08:17.889
所以如果我这样做，这会把我附加到跑步的过程中，对吗 ?
So if I do that, this will actually
attach me to the running process, right?

137
00:08:17.889 --> 00:08:23.800
所以现在，如果我说一个猫 / 等等，你可以看到我现在在 Ubuntu 里面。
So now if I say a cat/ etc/ issue,
you can see now I'm inside of Ubuntu.

138
00:08:23.800 --> 00:08:29.288
如果我退出，它现在已经走了，因为我叫它退出，对吗 ?
If I exit, It's actually gone now
because I told it to exit, right?

139
00:08:31.442 --> 00:08:34.116
但我不想在后台运行这只是浪费
But I don't want this running in
the background cuz this is just wasting

140
00:08:34.116 --> 00:08:36.000
背景下的资源，我怎么杀死它呢 ?
resources in the background,
so how do I kill it?

141
00:08:38.153 --> 00:08:38.756
Docker 终止。
Docker kill.

142
00:08:38.756 --> 00:08:41.480
我猜这张卡上有我的卡片
I guess it kind of showed
my cards on that one.

143
00:08:42.559 --> 00:08:45.429
因此，您可以说 Docker 终止，并且可以为其提供容器标识。
So you can say Docker kill and
you can give it the container ID.

144
00:08:45.429 --> 00:08:47.539
你可以给它短的
You can give it the short one.

145
00:08:47.539 --> 00:08:48.590
你可以给它长长的
You can give it the long one.

146
00:08:48.590 --> 00:08:49.539
长的是这样的。
The long one looks like that.

147
00:08:51.049 --> 00:08:52.480
或者你可以给它名字吧
Or you can give it the name, right?

148
00:08:52.480 --> 00:08:56.562
在这种情况下，我会说 Docker 会杀死我的高山。
So in this case,
I'm gonna say Docker kill my-alpine.

149
00:09:00.929 --> 00:09:05.950
现在，如果我说 Docker PS ，完全是空的。
Now if I say Docker PS, totally empty.

150
00:09:05.950 --> 00:09:11.760
你之前已经见过的这两个东西是我说 Docker 运行的
Two of these things that you have already
seen before is if I say Docker run -it,

151
00:09:11.760 --> 00:09:14.440
你看到我把名字放在这里对吧
you see me put name here, right?

152
00:09:14.440 --> 00:09:16.710
就像我做了我的阿尔派恩，对。
So like I did my -Alpine, right.

153
00:09:17.889 --> 00:09:20.769
原因是我想以后可以参考一下，对吧 ?
The reason why is I wanted to be
able to reference that later, right?

154
00:09:22.169 --> 00:09:25.145
所以如果我说高山:3.10。
So if I say alpine:3.10.

155
00:09:27.490 --> 00:09:30.187
现在如果我回到我的另一个跑来的地方
Now if I go back to my
other running thing here.

156
00:09:30.187 --> 00:09:33.889
如果我说 Docker ps 你可以看到它有我的阿尔卑斯名字
If I say Docker ps you can see here
that it has the name of my-alpine.

157
00:09:33.889 --> 00:09:38.219
这就方便以后参考，对吧 ?
This just makes it easy
later to reference, right?

158
00:09:38.219 --> 00:09:44.779
现在我可以说 Docker 会杀死我的高山
So now I can say Docker kill my-alpine.

159
00:09:44.779 --> 00:09:50.549
现在我的问题是如果我再这样做的话
Now my issue here,
if I tried to do this again,

160
00:09:50.549 --> 00:09:55.750
它会说我做不到那个已经在用的了
it's gonna say I can't do that,
that one's already in use.

161
00:09:55.750 --> 00:09:56.250
为甚么呢 ?
Why is that?

162
00:09:57.309 --> 00:10:01.049
我还可以查看阿尔卑斯的 Docker 日志
Well, I can actually still look
at the Docker logs of my Alpine,

163
00:10:01.049 --> 00:10:04.940
因为我不想把它丢在这儿
it keeps it around because it seems like
I don't wanna throw anything away here.

164
00:10:04.940 --> 00:10:06.740
这显然是垃圾，这不重要，对吧 ?
This is obviously garbage,
it doesn't matter, right?

165
00:10:06.740 --> 00:10:08.580
但如果我有长长的清单
But if I had a long list of things,

166
00:10:08.580 --> 00:10:11.639
它会保留这些原木以防你事后去检查
it keeps those logs around just in
case you wanna check them afterwards.

167
00:10:11.639 --> 00:10:14.994
有一堆自省你可以在那个集装箱的事实之后
And there's a bunch of introspection you
can do after the fact of that container

168
00:10:14.994 --> 00:10:15.705
已完成。
has completed.

169
00:10:17.133 --> 00:10:21.460
显然，这就是垃圾，我不想要。
In this case obviously,
this is garbage, I don't want it.

170
00:10:21.460 --> 00:10:27.519
我要说 Docker 会移除我的阿尔卑斯
So I'm gonna say Docker remove my-alpine.

171
00:10:27.519 --> 00:10:31.620
所以现在它把所有东西都扔掉了
So now, it's thrown everything away
that was using that before and

172
00:10:31.620 --> 00:10:35.590
现在我可以回去再这样做，这次会运行 Docker alpine 。
now I can go back and do that again and
it would run Docker alpine this time.

173
00:10:35.590 --> 00:10:37.570
>> 因此，当您使用刻度时，只需停止该过程。
&gt;&gt; So when you use scale
you just stop the process.

174
00:10:37.570 --> 00:10:38.769
你别装了
You just stop the container.

175
00:10:38.769 --> 00:10:40.600
但这就是你完全移除它的方式
But then this is how
you remove it entirely.

176
00:10:40.600 --> 00:10:41.470
>> 右边。
&gt;&gt; Right.

177
00:10:41.470 --> 00:10:43.759
它会除去所有类似的元数据和
It removes all like the post meta data and

178
00:10:43.759 --> 00:10:45.350
所有这些东西都是为了它而保留的
all that kind of stuff that
it kept around for it.

179
00:10:47.299 --> 00:10:48.549
这很有用，对。
That's frequently useful, right.

180
00:10:48.549 --> 00:10:50.620
这就是为什么在缺省情况下它会这样做。
So that's why it does that by default.

181
00:10:50.620 --> 00:10:52.960
但在这件案子里我正在创作
But in this particular case,
I'm creating and

182
00:10:52.960 --> 00:10:56.029
破坏了容器我想尽快用这个名字
destroying containers and
I wanna reuse that name quickly.

183
00:10:56.029 --> 00:11:00.340
所以如果我把它放在这儿，它会把所有东西都移走了，好吗 ?
So if I just put --rm here, it'll remove
everything once it's done, all right?

184
00:11:00.340 --> 00:11:06.970
所以如果我退出，我就会再次出现，现在我可以继续这样做了。
So if I do this exit, and I come out right
again, now I can keep doing that quickly.

185
00:11:10.379 --> 00:11:14.359
所以， rm 是，你会看到我做一帮人，因为我是懒惰的
So that's what --rm is, you'll see
me do a bunch because I'm lazy and

186
00:11:14.359 --> 00:11:18.029
我不想在后面输入 Docker rm ，我忘了所有时间。
I don't wanna type Docker rm
afterwards and I forget all the time.
