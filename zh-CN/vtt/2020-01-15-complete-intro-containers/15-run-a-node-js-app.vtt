WEBVTT

1
00:00:00.210 --> 00:00:02.060
接下来我们要做的是 12 号
So the next thing we're
gonna do node-12-stretch.

2
00:00:06.802 --> 00:00:09.396
这将作为容器的 root 用户运行。
This is running as the root
user of the container.

3
00:00:09.396 --> 00:00:12.560
通常，不要以 root用户身份运行。
In general, don't run things as root.

4
00:00:12.560 --> 00:00:17.361
我的意思是，我认为这对一般来说是一件好事
I mean, I think that's kind of a good
thing in general just to learn [LAUGH] for

5
00:00:17.361 --> 00:00:19.778
系统安全之类的东西
system security and stuff like that.

6
00:00:19.778 --> 00:00:22.403
如果有人接管你的电脑就像 root 用户一样
If someone takes over your computer and
it's being ran as the root user,

7
00:00:22.403 --> 00:00:24.530
然后他们就可以为所欲为了
then they can just do whatever
they want to your computer.

8
00:00:24.530 --> 00:00:27.346
所以这才是最不权力的原则。
So that's kind of the principle
of least power right.

9
00:00:27.346 --> 00:00:30.118
因此，您要创建一个用户，使该用户能够执行服务器和
So you wanna create a user that all
that user can do is run your server and

10
00:00:30.118 --> 00:00:31.320
什么都能做对吧
can do nothing else, right?

11
00:00:31.320 --> 00:00:34.136
所以如果有人最终结束你的容器
So if someone does eventually end
up taking over your container,

12
00:00:34.136 --> 00:00:36.502
他们只能做自己可以做的事情。
they can only do things that
that user is allowed to do.

13
00:00:36.502 --> 00:00:37.685
他们做不到 root 的事情吧 ?
They can't do root things right?

14
00:00:37.685 --> 00:00:40.779
如果您不熟悉 Linux中使用的路径，
If you're not familiar with
what route uses to in Linux,

15
00:00:40.779 --> 00:00:43.421
这也会把一切都策划好了
again, this will plot
everything out there, so

16
00:00:43.421 --> 00:00:47.460
可能是工作但他们是那个集装箱的神对吧
it's probably work, but
they're the god of that container, right?

17
00:00:47.460 --> 00:00:48.049
这就是重点
That's the gist.

18
00:00:48.049 --> 00:00:52.780
所以我们可以在这里做些什么
So something we could do here

19
00:00:52.780 --> 00:00:57.515
我们可以说用户节点
is we could say user, Node.

20
00:00:57.515 --> 00:01:02.331
节点容器随附的一个凉爽的东西就是它有
One of the cool things that the node
container ships with is that it has

21
00:01:02.331 --> 00:01:08.359
一个叫做节点的用户，专门为此目的建立的。
another user on it called node, that's
build specifically for this purpose.

22
00:01:08.359 --> 00:01:10.772
但知道这里没有什么特殊的东西叫做节点
But know that there's nothing
special that this is called node and

23
00:01:10.772 --> 00:01:11.849
这称为节点。
this is called node.

24
00:01:11.849 --> 00:01:16.414
是这个容器的创造者创建了一个叫节点的用户
It's the creators of this container
created a user called node and

25
00:01:16.414 --> 00:01:20.914
用户组中的用户称为 " 节点 " 以进行混淆。
that you that users in a user group
called node to look confusing.

26
00:01:20.914 --> 00:01:26.530
但我可以说，如果我开始像 Ruby 容器那样运行，对吗 ?
But suffice to say, like, if I start
running like a Ruby container, right?

27
00:01:26.530 --> 00:01:28.420
这方面不一定是 Ruby 用户。
There won't necessarily
be a Ruby user on that.

28
00:01:28.420 --> 00:01:31.963
我不想再联系你了
I don't want that connection
to click in your head.

29
00:01:31.963 --> 00:01:33.647
这就是我想说的
That's all I'm trying to say.

30
00:01:33.647 --> 00:01:37.349
所以现在我觉得这个应该是可以的。
So now, I think this should work.

31
00:01:37.349 --> 00:01:39.900
这将作为节点用户执行。
And this would be
executing as the node user.

32
00:01:39.900 --> 00:01:43.280
但任何时候我们都是这样复制的
But any time that we run copy like this,

33
00:01:43.280 --> 00:01:47.420
这仍然会将其复制为 root 用户。
this is still going to
copy it as the root user.

34
00:01:47.420 --> 00:01:50.009
这意味着此用户无权修改或执行
Which means that this user has no
permission to modify or execute or

35
00:01:50.009 --> 00:01:51.280
都是些什么东西
any of that kind of stuff.

36
00:01:51.280 --> 00:01:52.215
所以我们必须要运行它。
So we do have to run it.

37
00:01:52.215 --> 00:01:56.450
我先把这两个都换好，让用户节点先到这里来。
I'm gonna switch those two first of all so
that user node comes up here first.

38
00:01:58.859 --> 00:02:05.325
所以我们要做破折号的破折号，幸运的 VS 代码，它把我的背带回来了。
And so we have to do dash dash, and
luckily VS code, it's got my back.

39
00:02:05.325 --> 00:02:09.647
所以你可以做 CHOWN ，也可以做 FROM ，我要做 CHOWN。
So you can either do CHOWN or
you can do FROM and I'm gonna do CHOWN.

40
00:02:09.647 --> 00:02:13.090
您必须考虑用户和组。
And you have to think about the user and
the group.

41
00:02:14.419 --> 00:02:18.879
所以我要说节点:节点，因为用户的名称是节点，
So I'm gonna say node:node because
the name of the user is node,

42
00:02:18.879 --> 00:02:20.530
该组的名称为节点。
the name of the group is node.

43
00:02:20.530 --> 00:02:25.431
现在，正在复制它，并且将由该用户节点来进行电话。
And so now, this is being copied over and
it will be phoned by this user node.

44
00:02:32.550 --> 00:02:35.141
我不知道为什么这是我在做的事
I don't know why this is,
it's cuz I was doing that.

45
00:02:38.175 --> 00:02:39.456
好了好了
There we go.

46
00:02:39.456 --> 00:02:40.256
好的。
Okay.

47
00:02:40.256 --> 00:02:45.550
现在，如果我再次运行，或者 Docker 运行，
So now if I do this run again,
or Docker run,

48
00:02:45.550 --> 00:02:50.145
建造，建造，就在那里
build, build, there we go that one.

49
00:02:53.944 --> 00:02:55.254
一切都好
Everything's all good to go.

50
00:02:55.254 --> 00:02:56.879
它正在建立一个新的用户节点。
It's putting a new user node.

51
00:02:56.879 --> 00:02:57.699
来看看这个
Check this out.

52
00:02:57.699 --> 00:03:02.469
所以如果我再做一次我说我是谁
So if I run it again And I say who am I?

53
00:03:02.469 --> 00:03:06.219
它会说现在的节点对吧
It's gonna say now node, right?

54
00:03:06.219 --> 00:03:08.659
所以它作为一个节点用户被执行。
So it's being executed as a node user.

55
00:03:08.659 --> 00:03:11.933
但我想证明我的意思是如果我回到这里
But just to kind of like prove my
point to if I come back over here and

56
00:03:11.933 --> 00:03:14.572
我对这条线说对了，我再做一次。
I comment this line out right,
and I build it again.

57
00:03:20.997 --> 00:03:26.000
我说你期待他说 " 根 " 是谁
And I say who am I when you
expect him to say root right?

58
00:03:26.000 --> 00:03:27.156
缺省情况下您是 root 用户吗 ?
You're the root user by default?

59
00:03:27.156 --> 00:03:32.036
>> 因此，用户名的发现过程与此过程有关，
&gt;&gt; So the user name what's
the discover process on that with,

60
00:03:32.036 --> 00:03:34.289
会有检查吗
will there be the inspect?

61
00:03:35.860 --> 00:03:37.139
命令?
Command?

62
00:03:37.139 --> 00:03:39.270
>> 你可以的，你肯定可以通过检查发现的。
&gt;&gt; You could, yeah, you can
definitely find out through inspect.

63
00:03:39.270 --> 00:03:43.007
我可能就像 Docker Hub上的文档一样。
I probably just find that through like
the documentation on the Docker Hub.

64
00:03:43.007 --> 00:03:46.349
换句话说，没有真正的方法去发现它。
Or in other words, there's not really
a specific way of finding that out.

65
00:03:47.449 --> 00:03:50.353
说实话我可能只是照我说的做才行我是谁
Honestly, I probably just do what I
showed you which is just run, who am I?

66
00:03:50.353 --> 00:03:51.483
>> Gotcha。
&gt;&gt; Gotcha.

67
00:03:54.698 --> 00:03:57.439
稍后，我将向您展示如何创建用户。
Later in the course I'll show you
actually how to create users.

68
00:03:57.439 --> 00:03:59.490
例如，如果您直接从 Ubuntu 中运行它，
For example, if you're running
it directly out of Ubuntu,

69
00:03:59.490 --> 00:04:02.620
他们没有为您创建的任何用户，所以您必须自己做。
they don't have any users created for
you, so you have to do it yourself.

70
00:04:02.620 --> 00:04:04.729
这不是很困难，基本上是一个命令。
It's not very hard,
it's basically one command.

71
00:04:04.729 --> 00:04:06.519
我永远记不起来了，所以我一直都是谷歌。
And I can never remember it,
so I always Google it.

72
00:04:06.519 --> 00:04:13.729
好的，请快速说明副本。
[LAUGH] Okay, so quick note on copy.

73
00:04:13.729 --> 00:04:16.350
这里还有一个人被人搞糊涂了
There is another command here,
which people get confused with, and

74
00:04:16.350 --> 00:04:17.370
我只是想解决这个问题
I just wanted to address that.

75
00:04:17.370 --> 00:04:19.110
还有一个叫做 ADD
There's another one, called ADD.

76
00:04:22.103 --> 00:04:26.779
如果我这样做，你也可以做 CHON 。
And if I did this,
you can do the CHON as well with that.

77
00:04:30.329 --> 00:04:32.569
这也行吧
This would also work, right?

78
00:04:32.569 --> 00:04:37.533
实际上在这个时刻
And actually, At this moment in time,

79
00:04:37.533 --> 00:04:42.620
第 7 行和第 5 行都做同样的事
these things do, line seven and
line five do exactly the same thing.

80
00:04:45.100 --> 00:04:49.209
因此， ADD 有一些类似的额外功能。
So ADD has some like extra
functionality associated with it.

81
00:04:49.209 --> 00:04:51.000
它会为本地文件系统工作。
It does work for your local file system.

82
00:04:51.000 --> 00:04:53.444
我想说如果你在做我们正在做的事情
I would say if you're doing stuff like
what we're doing right here which just is

83
00:04:53.444 --> 00:04:54.779
本地文件系统。
the local file system.

84
00:04:54.779 --> 00:04:56.110
用副本上更安全
Use copy, it's safer.

85
00:04:56.110 --> 00:04:59.495
少了，一般少做比较好
It does less, and doing less in
general is a better thing for

86
00:04:59.495 --> 00:05:02.079
你要是做了你需要做的事情
you if it does the thing
that you need it to do.

87
00:05:03.430 --> 00:05:07.439
但是， ADD 的伟大方法是 ADD 可以进入网络，
However, what's great about ADD
is ADD can go out to the network,

88
00:05:07.439 --> 00:05:09.459
它可以从网络中下载一个文件，对吧 ?
it can download a file off the network,
right?

89
00:05:09.459 --> 00:05:13.540
所以如果我说的是 GitHub.com 这个特定的文件，
So if I say add from GitHub.com
this particular file,

90
00:05:13.540 --> 00:05:15.870
它就会出来，下载档案，吐出来。
it will go out, download the file,
spit it out there.

91
00:05:15.870 --> 00:05:17.910
这就是 ADD 将为你做的一件事。
So that's one thing that ADD will do for
you.

92
00:05:17.910 --> 00:05:21.879
此外， ADD 还会自动解压缩并使用它，对吗 ?
And ADD will also automatically unzip and
use it that it gets, right?

93
00:05:21.879 --> 00:05:23.949
所以如果你是焦油，对。
So if you are a tar, right.

94
00:05:23.949 --> 00:05:27.750
因此，如果我说添加这一焦油，它会立即下载并将其解压缩。
So if I say add this tar, it'll
download it and unzip it immediately.

95
00:05:27.750 --> 00:05:30.514
如果我复印了我就得进去
Whereas if I had done copy,
I'd have to go in there and

96
00:05:30.514 --> 00:05:32.670
马上就能跑出来了
do a run immediately after that.

97
00:05:32.670 --> 00:05:36.894
因此，如果您正在网络中执行任何操作，或者您需要在 zip 上执行任何操作，请使用 ADD。
So if you're doing anything in the network
or you need anything on ziip, use ADD.

98
00:05:36.894 --> 00:05:39.415
其他所有使用副本的 100 % 。
For 100% of everything else use copy.

99
00:05:39.415 --> 00:05:40.194
我们不使用，我不认为我们用 ADD for
We won't be using,
I don't think we use ADD for

100
00:05:40.194 --> 00:05:43.574
其他的课但你知道它在外面是好事
the rest of the class but it's good for
you to know that it's out there.

101
00:05:43.574 --> 00:05:48.894
所以我想做的就是，将这个 index.js 复制到哪里 ?
So the next thing I wanna do is,
where's this index.js being copied?

102
00:05:48.894 --> 00:05:52.254
项目的根目录，不是非常组织的。
The root directory of the project,
not very organized.

103
00:05:52.254 --> 00:05:54.659
所以我不会建议你这么做
So I'm not gonna suggest that you do that.

104
00:05:54.659 --> 00:05:57.870
所以我们要在这个问题上加上一个指令，然后说 " WORKDIR" 。
So we're gonna add a command
right about this and say WORKDIR.

105
00:05:57.870 --> 00:06:02.250
我们要把这个放在家里
And we're gonna put this on home node,

106
00:06:02.250 --> 00:06:04.269
right ，是节点用户的主目录。
right, which is the home
directory of the node user.

107
00:06:04.269 --> 00:06:08.720
然后我就在这个叫代码的飞行上创建一个，对吧 ?
And then I'm gonna just create one
on the fly called code, right?

108
00:06:08.720 --> 00:06:10.805
我要把所有的密码都放进去
I'm gonna put all my code and
so home/node/code.

109
00:06:10.805 --> 00:06:15.377
人们把它放进密码里的人把它放在了源头上
People put it in code
people put it in source.

110
00:06:15.377 --> 00:06:16.980
事实上，源极可能更常见。
Actually source is probably more common.

111
00:06:16.980 --> 00:06:20.588
但我要用我的笔记上的代码说只要有好的地方
But I am gonna take the code that is on my
notes, say, just wherever it is good to

112
00:06:20.588 --> 00:06:23.567
把它放在像家里的目录里之类的
put it inside of like the home
directory or something like that.

113
00:06:23.567 --> 00:06:27.009
因为我们知道节点用户拥有自己的主目录。
Because we know for sure the node
user owns its own home directory.

114
00:06:27.009 --> 00:06:28.470
这很不错
It is good.

115
00:06:28.470 --> 00:06:29.132
很不错的地方
Good place to put it.

116
00:06:33.343 --> 00:06:35.187
为了证明这一点
So to prove a point here.

117
00:06:35.187 --> 00:06:41.970
我要说 pwd 和这个会告诉你我正被砍了对吗
I'm gonna say pwd and
this will tell you, I'm in slash, right?

118
00:06:41.970 --> 00:06:45.365
所以我就在这个斜杠的目录里，但是它不是以前的，
So I'm in the slash directory,
but it wasn't before and

119
00:06:45.365 --> 00:06:51.204
现在如果我重新开始建造码头
now if I run docker build again And

120
00:06:51.204 --> 00:06:56.483
我再次运行它，现在您可以看到它在主节点代码中。
I run this again,
you can see now it's in home node code.

121
00:06:56.483 --> 00:07:03.740
因此，这意味着所有在此之后的命令都将基于此目录，对吗 ?
So that means all commands after that
will be based in this directory, right?

122
00:07:03.740 --> 00:07:07.629
所以这就是你的工作目录
So that's where your working
directory Hence, WORKDIR,

123
00:07:07.629 --> 00:07:09.658
我想是描述性的
it's descriptive I suppose.

124
00:07:13.439 --> 00:07:15.529
同样，对于 WORKDIR ，如果它不存在，
And again, nice thing about WORKDIR,
if it doesn't exist,

125
00:07:15.529 --> 00:07:16.589
它会为你创造的
it will just create it for you.
