WEBVTT

1
00:00:00.194 --> 00:00:03.560
迈克 · 诺斯: 我们来看看一些更高级的类型。
&gt;&gt; Mike North: We're gonna take
a look at some more advanced types.

2
00:00:03.560 --> 00:00:07.413
我知道看起来我们已经走在了前面
I know it seems like we've already been
in advanced having gone through with

3
00:00:07.413 --> 00:00:08.750
仿制药。
a generics.

4
00:00:08.750 --> 00:00:13.919
但是我希望你们能够了解什么是可能的，因为你们学到了更多
But I want you to get a sense for
what's possible as you learn more and

5
00:00:13.919 --> 00:00:19.015
更多关于如何用打字稿设计有效的约束。
more about how to design effective
constraints with typescript.

6
00:00:30.320 --> 00:00:34.119
迈克 · 诺斯: 首先我们来看看映射类型。
&gt;&gt; Mike North: First we're
gonna look at mapped types.

7
00:00:34.119 --> 00:00:40.420
这涉及到使用一个接口作为
And this involves using an interface as

8
00:00:40.420 --> 00:00:48.140
一种从接口键到与这些键相关联的类型的方法。
a way from getting to the interfaces keys
to the types associated with those keys.

9
00:00:48.140 --> 00:00:51.756
所以我们在之前的工作室里有一个功能
So we had a function
earlier in the workshop

10
00:00:51.756 --> 00:00:56.588
我们试图通过电话或电子邮件联系人们。
where we were trying to contact
people by phone or email.

11
00:00:56.588 --> 00:01:02.222
我们使用重载，我们使用多个函数签名,
And we used overloads,
we use multiple functions signatures,

12
00:01:02.222 --> 00:01:09.539
为了确保那封邮件，一封有电子邮件和电话，一封有电话。
in order to insure that email,
one with email and phone, one with phone.

13
00:01:09.539 --> 00:01:12.789
这将需要新的通信方法的增加,
This will require as new
communications methods were added,

14
00:01:12.789 --> 00:01:16.260
will 需要更多的签名，对吧？
will requires to add more signatures,
right?

15
00:01:16.260 --> 00:01:20.890
第一个参数和第二个参数一起耦合，每个新参数一个。
One for each new, coupling of the first
and the second parameter together.

16
00:01:20.890 --> 00:01:24.490
所以我们将使用 map 类型来完成类似的事情。
So we are going to use map type
to accomplish similar thing.

17
00:01:26.412 --> 00:01:30.492
Mike North: 这是一个新的函数，叫做 contact,
&gt;&gt; Mike North: So here is a new function,
it's called contact,

18
00:01:30.492 --> 00:01:37.439
它的类型参数必须从上面接口的键扩展。
it has a type parameter that must extend
from a key of the above interface.

19
00:01:37.439 --> 00:01:44.710
有没有人有这样的预感，这可能意味着什么？
Anyone have a hunch as to what
the possible values of that could be?

20
00:01:44.710 --> 00:01:47.000
演讲者2: 电子邮件，电话，传真麦克 · 诺斯: 电子邮件，电话,
&gt;&gt; Speaker 2: Email ,phone, fax
&gt;&gt; Mike North: Email, phone,

21
00:01:47.000 --> 00:01:48.150
传真，谢谢。
fax, thank you.

22
00:01:48.150 --> 00:01:50.420
所以电子邮件，电话，传真，还有
So email, phone, and fax, and

23
00:01:50.420 --> 00:01:55.569
然后我们采用这种类型，这就是它成为地图类型的原因。
then we're taking that type and
this is what makes it a map type.

24
00:01:55.569 --> 00:01:59.370
我们将这个密钥传递到接口中，然后
We're passing that key into the interface,
and

25
00:01:59.370 --> 00:02:02.870
我们将得到与该键相关的对应值。
we'll get the corresponding
value associated with that key.

26
00:02:04.659 --> 00:02:07.579
所以这三个都可以，但是
So here these three will all work, but

27
00:02:07.579 --> 00:02:12.560
如果我试图逆转事情，像使用电话在这里我们会得到
if I were to try to reverse things
like use phone up here we're gonna get

28
00:02:12.560 --> 00:02:17.219
和函数签名的错误是一样的。
the same kinds of errors that we were
getting with the function signatures.

29
00:02:17.219 --> 00:02:20.620
第一个参数和第二个参数必须一致。
The first parameter and
the second parameter must agree.

30
00:02:20.620 --> 00:02:24.770
但是在我看来，这个更容易维护，因为
But in my opinion, this is a little
bit easier to maintain because for

31
00:02:24.770 --> 00:02:29.430
新的通信方式，我们只需要添加一种新的道路的接口。
new communication methods we only need to
add a sort of a new road to the interface.

32
00:02:29.430 --> 00:02:33.879
更重要的是，我们可以使用这种产品，我们可以消费这种产品
And what's more, we could use this,
we could consume this type and

33
00:02:33.879 --> 00:02:38.560
在我们的应用程序中做许多不同的事情的地图。
do this mapping across many
different things in our app.

34
00:02:38.560 --> 00:02:43.360
所以如果你有一些不同类型的概念
So if you have some concept
like the different types of

35
00:02:43.360 --> 00:02:46.670
你可以从你的 API 中获得的模型,
models that you can get from your API,

36
00:02:46.670 --> 00:02:52.090
你可以用名字来指代它们，然后你就可以得到正确的字体了。
and you want to refer to them by name, and
then you can get that correct type back.

37
00:02:52.090 --> 00:02:56.150
你可以有一个真理的来源，在那里所有这一切都得到维护
You can have one source of truth
where all of this is maintained and

38
00:02:56.150 --> 00:03:00.090
然后其他所有的东西都以这种方式消耗地图的类型。
then everything else that consumes
the map's type in this way.

39
00:03:00.090 --> 00:03:00.849
他们可以
They can

40
00:03:03.139 --> 00:03:07.580
自动获得更新，因为它们是用一个接口来表示的。
automatically get updated because they're
expressed in terms of that one interface.

41
00:03:08.710 --> 00:03:15.919
所以就像在价值世界里，这是，对不起，我在这里滚动。
So it's just like in the value world,
this is taking, sorry, I'm scrolling here.

42
00:03:15.919 --> 00:03:20.270
在 JavaScript 值的世界中，这只是获取一个键和
In the JavaScript values world,
this is just taking a key and

43
00:03:20.270 --> 00:03:24.460
将其传递给对象以获取其值，语法是相同的。
passing it into an object to get its
value, and the syntax is the same.

44
00:03:26.379 --> 00:03:32.078
所以我把它想象成物体。
So I just think of this like objects.

45
00:03:32.078 --> 00:03:35.376
就像你说的这里有钥匙,
So as you said, the available keys here,

46
00:03:35.376 --> 00:03:39.819
电子邮件、电话或传真等通讯方式的关键。
a key of communication methods email,
phone, or fax.

47
00:03:39.819 --> 00:03:44.399
我们甚至可以通过获取这些键和
We can even get all values
by taking these keys and

48
00:03:44.399 --> 00:03:48.756
把他们三个人的影子投射到
projecting the set of
the three of them through

49
00:03:48.756 --> 00:03:53.349
接口来获取所有可能的值。
the interface to get all
of the possible values.

50
00:03:55.550 --> 00:04:00.979
有电子邮件编号或传真，这是所有这三个在这里。
HasEmail of HasPhoneNumber or fax,
that is all three of these up here.

51
00:04:02.360 --> 00:04:06.627
所以如果你有任何东西，你有 a 或者 b 或者 c
So if you have anything that were
you've got a or b, or c, and

52
00:04:06.627 --> 00:04:12.157
通过接口，你会得到相应的值的关键或
pass it through interface, you'll get
the corresponding value of that key or

53
00:04:12.157 --> 00:04:16.550
另一个键的值，或者第三个键的值，对吗？
value of the other key, or
the value of the third key, right?

54
00:04:18.533 --> 00:04:22.427
迈克 · 诺斯: 很酷，我的意思是看起来你希望它能成功,
&gt;&gt; Mike North: Pretty cool, I mean it
seems like you would hope it would work,

55
00:04:22.427 --> 00:04:23.240
的确如此。
and it does.

56
00:04:25.029 --> 00:04:28.879
键入查询、颜色和提前概念，但
Type queries, a colors,
and advance concept, but

57
00:04:28.879 --> 00:04:33.939
理解起来相对简单 typeof 允许我们得到
it's relatively simple to understand,
typeof allows us to get

58
00:04:33.939 --> 00:04:37.769
一个符号的类型，一个值的类型。
the type of a symbol,
the type of a value I should say.

59
00:04:39.240 --> 00:04:42.579
在 JavaScript 中，Symbol 是一个非常重载的术语。
Symbol is a very overloaded
term in JavaScript.

60
00:04:42.579 --> 00:04:50.709
这里我们得到了一个值，它的类型是一个解析为一个数字的承诺。
So here we've got a value whose type
is a promise that resolves to a number.

61
00:04:52.290 --> 00:04:59.069
而且我可以得到承诺的类型，决心有喜欢的
And I can get the typeof what
promise that resolve has like

62
00:04:59.069 --> 00:05:05.279
这个函数的类型，我可以得到
the type of this function here,
I can kind of acquire that

63
00:05:05.279 --> 00:05:10.949
在类型别名的上下文中使用运算符的类型。
by using the type of operator
in the context of a type alias.

64
00:05:10.949 --> 00:05:11.829
你也可以这样做。
You could do the same thing like this.

65
00:05:16.139 --> 00:05:20.839
迈克 · 诺斯: 嗯，我喜欢这样做，但是这就对了。
&gt;&gt; Mike North: Well,
I do it like let, but there you go.

66
00:05:20.839 --> 00:05:24.819
这就是所谓的类型查询，因为你正在查询这个值的类型。
So this is called a type query cuz you're
kind of querying for this values type.

67
00:05:27.170 --> 00:05:31.576
Mike North: 条件类型这是在类型脚本2.8中添加的，非常漂亮
&gt;&gt; Mike North: Conditional types this was
added in types script 2.8 which is pretty

68
00:05:31.576 --> 00:05:32.170
最近的。
recent.

69
00:05:33.350 --> 00:05:36.990
这是用于类型的 tunnery 操作符。
This is a tunnery operator for types.

70
00:05:36.990 --> 00:05:40.040
所以我们这里有一个泛型，您只能在泛型中使用它们。
So we've got a generic here,
you can only use them with generics.

71
00:05:42.168 --> 00:05:46.574
迈克 · 诺斯: 我们的意思是，我们希望基本上抓住一个承诺的类型，或者
&gt;&gt; Mike North: We're saying we want to
basically grab the type of a promise, or

72
00:05:46.574 --> 00:05:50.980
如果不是一个承诺，就让它直接通过。
let something pass straight
through if it's not a promise.

73
00:05:50.980 --> 00:05:55.819
所以这就像，给我最终的价值，这将变成和
So this is like, give me the eventual
value that this will turn into and

74
00:05:55.819 --> 00:05:58.959
如果不是承诺，那就是价值本身。
if it's not a promise,
that is the value itself.

75
00:05:58.959 --> 00:06:05.319
所以我们引入了一个 t 型，如果 t 从 Promise 延伸出来,
So we take in a type T,
if T extends from Promise,

76
00:06:05.319 --> 00:06:10.350
提取出承诺解析的类型，我们在这里使用推断。
extract out the type that the Promise
resolves to, we use infer here.

77
00:06:10.350 --> 00:06:12.839
这是唯一可以使用推断的地方，但是
This is the only place you can use infer,
but

78
00:06:12.839 --> 00:06:17.029
它让你拿出类型的承诺决心。
it let's you pluck out the type
the Promise resolves to.

79
00:06:17.029 --> 00:06:19.459
所以如果 t 从承诺延伸出来,
So if T extends from Promise,

80
00:06:19.459 --> 00:06:23.959
返回它的结果，否则，让我们只是直接通过。
return what it results to, otherwise,
just let is sail straight through.

81
00:06:25.050 --> 00:06:27.819
在这里，我们可以看到 a 是数字类型。
And here,
we can see that a is of type number.

82
00:06:29.029 --> 00:06:32.639
我们说的是 EventualType 的承诺数字。
We're saying EventualType
of Promise number.

83
00:06:32.639 --> 00:06:38.050
一个数字的出现是因为我们在遵循真实的条款。
A number comes out cuz we're following
we're in the truthy clause here.

84
00:06:39.389 --> 00:06:44.110
在 b 中，我们可以看到数字数组有点直接通过，对吗？
In b we can see that the number array
kinda sails straight through, right?

85
00:06:44.110 --> 00:06:46.389
因为它跟着这根树枝走下去。
Cuz it's following this branch down here.
