WEBVTT

1
00:00:00.600 --> 00:00:03.439
麦克 · 诺斯: 和或者操作员。
&gt;&gt; Mike North: The and and or operators.

2
00:00:03.439 --> 00:00:06.282
所以我在这里创建了两种类型
So I've created two types here and

3
00:00:06.282 --> 00:00:10.919
一个叫做 HasPhoneNumber，一个叫做 HasName。
one is called HasPhoneNumber,
one is called HasName.

4
00:00:10.919 --> 00:00:15.189
他们有共同点，也有不同的地方，对吧？
They have something in common and they
have something that's different, right?

5
00:00:15.189 --> 00:00:18.230
把这个想象成一个维恩图，对吗？
So think of this as a Venn diagram, right?

6
00:00:18.230 --> 00:00:21.829
他们都有名字，但一个有电子邮件，一个有电话。
They both have name but
one has email and one has phone.

7
00:00:24.210 --> 00:00:29.940
这里我创建了一段代码基本上是在掷骰子,
So, here I've created a piece of
code that basically rolls the dice,

8
00:00:29.940 --> 00:00:31.679
做了一个数学运算，随机的。
does a math.random.

9
00:00:31.679 --> 00:00:36.719
有一半的时间，它会将其初始化为有声数字。
And half the time, it's gonna
initialize it to HasPhoneNumber.

10
00:00:36.719 --> 00:00:40.299
有一半的时间，它会将其初始化为 HasEmail。
Half the time,
it's gonna to initialize it to HasEmail.

11
00:00:40.299 --> 00:00:46.070
事实上，打字稿应该可以算出，不幸的是,
And, in fact, TypeScript should be able
to figure out, well unfortunately,

12
00:00:46.070 --> 00:00:47.939
所以我才把它留在那里。
that's why I left that there.

13
00:00:47.939 --> 00:00:51.640
这是同一种类型，但它只是使它难看，对不对？
It's the same type, but
it just makes it ugly, right?

14
00:00:51.640 --> 00:00:56.429
所以在这里，我们得到了好名字，HasEmail 或 HasPhoneNumber。
So here, we get the nice names,
HasEmail or HasPhoneNumber.

15
00:00:56.429 --> 00:00:59.990
我们要把它搬走,
We're moving that, okay, I mean,

16
00:00:59.990 --> 00:01:04.269
从某种程度上来说是有点准确，但是
that's It's kinda accurate in a way, but

17
00:01:04.269 --> 00:01:09.170
不是我真正想要的，而是更加冗长。
like not really what I was after,
and way more verbose.

18
00:01:10.531 --> 00:01:16.096
迈克 · 诺斯: 所以请注意，一旦我们有了这个联系方式
&gt;&gt; Mike North: So
note that once we have this contact info

19
00:01:16.096 --> 00:01:21.027
变量，我们只能访问名称。
variable, we can only access name.

20
00:01:21.027 --> 00:01:26.287
假设你有这样的维恩图，它可以
So, think of this as if you have this
sort of Venn diagram, and it could

21
00:01:26.287 --> 00:01:32.150
不管是一边还是另一边，我们看到的是两者之间的交集。
be one side or the other, we are looking
at the intersection between the two.

22
00:01:32.150 --> 00:01:34.659
我们正在研究这种镜头。
We're looking at sort of that lens.

23
00:01:34.659 --> 00:01:38.039
我们只能访问那些保证存在的东西。
We can only access things that
are guaranteed to be there.

24
00:01:38.039 --> 00:01:40.771
不管这是 HasName 还是 HasName
And regardless of whether
this is HasName or

25
00:01:40.771 --> 00:01:44.460
Hasphonenumber，名字会出现在那里。
HasPhoneNumber, name is going to be there.

26
00:01:44.460 --> 00:01:47.960
这就是为什么我们可以访问名字和唯一的名字。
So that's why we can access name and
only name.

27
00:01:47.960 --> 00:01:55.859
联合类型，他们使用这个和运算符和百分比价值和。
Union types, they use this and
operator and percentage worth and.

28
00:01:55.859 --> 00:01:58.530
这实际上就是说。
And this is saying effectively.

29
00:01:58.530 --> 00:02:04.103
其他联系信息包括一个 HasEmail 和一个 HasPhoneNumber。
Other contact info is both a HasEmail and
also a HasPhoneNumber.

30
00:02:04.103 --> 00:02:10.889
所以必须用这两个形状的所有东西来初始化它。
So it must be initialized with
everything these two shapes have.

31
00:02:10.889 --> 00:02:14.560
结合，这将是完整的维恩图，两个气泡。
The union, this will be the full
Venn diagram, both bubbles.

32
00:02:15.930 --> 00:02:20.360
所以，如果我们遗漏了一件事情，你会说，财产‘电话’丢失了。
So if we were missing one thing you
would say, Property 'phone' is missing.

33
00:02:22.735 --> 00:02:26.683
迈克 · 诺斯: 因为我们保证这三样都有
&gt;&gt; Mike North: And because we're
guaranteed to have all three of these

34
00:02:26.683 --> 00:02:30.219
这些东西，我们都能进入，对吗？
things, we can access all three of them,
right?

35
00:02:30.219 --> 00:02:34.591
没有模棱两可，没有二者之一，或者两者都是。
There's no ambiguity, there's no either or
it's definitely both.

36
00:02:40.800 --> 00:02:45.590
迈克 · 诺斯: 所以，对不起，我把那个留在那里了。
&gt;&gt; Mike North: So in this,
sorry I left that there.

37
00:02:45.590 --> 00:02:48.090
这是上一次运行的一个例子。
That was an example from a previous run.

38
00:02:48.090 --> 00:02:51.909
我们在这里重述一下，我们讨论了变量。
So just to recap here,
we covered variables.

39
00:02:51.909 --> 00:02:56.219
我们研究了打字稿是如何从到推断变量的类型的
We looked at how typescript could
infer the type of variable through

40
00:02:56.219 --> 00:02:57.719
它被初始化了。
it being initialized.

41
00:02:57.719 --> 00:03:00.942
我们研究了数组和元组。
We looked at arrays and tuples.

42
00:03:00.942 --> 00:03:02.870
这些是有序的数据结构。
Those are the ordered data structures.

43
00:03:02.870 --> 00:03:06.466
一、数组的长度是任意的。
One, the array is arbitrary is length.

44
00:03:06.466 --> 00:03:09.669
另一个 tuple 具有固定的长度和
The other, tuple, has a fixed length and

45
00:03:09.669 --> 00:03:12.800
元组中每个元素的特定类型。
a specific type for
each element in the tuple.

46
00:03:15.300 --> 00:03:16.620
我们查看了对象类型。
We looked at object types.

47
00:03:16.620 --> 00:03:20.170
你唯一需要记住的就是问号的意思
And really the only thing you have to
remember there is question mark means

48
00:03:20.170 --> 00:03:20.670
可选的。
optional.

49
00:03:21.879 --> 00:03:26.610
最后，等价于或和
And then finally,
the equivalent of or and and

50
00:03:26.610 --> 00:03:31.280
在类型世界中，交集和并运算符。
in the type world,
the intersection and union operators.
