WEBVTT

1
00:00:00.500 --> 00:00:03.600
迈克 · 诺斯: 所以这个命令会变得有点模糊和麻烦。
&gt;&gt; Mike North: So this commands are gonna
get kind of vague and cumbersome.

2
00:00:04.750 --> 00:00:11.210
传统的方法是使用配置文件来代替。
The conventional way to do this is
to use a configuration file instead.

3
00:00:11.210 --> 00:00:15.220
所以在我的源文件夹中，我要创建一个文件站点。
So in my source folder,
I'm gonna create a file site.

4
00:00:15.220 --> 00:00:20.553
在 hello-ts 文件夹中，我将创建一个名为 tsconfig.json 的文件。
In the hello-ts folder, I'm gonna
create a file called tsconfig.json.

5
00:00:23.661 --> 00:00:27.246
迈克 · 诺斯: 我们来看看你可以在这里做的各种事情
&gt;&gt; Mike North: And we're gonna look at
the various things you can do here to

6
00:00:27.246 --> 00:00:28.260
安排一下。
set it up.

7
00:00:28.260 --> 00:00:32.039
在配置编译器时需要考虑两件事。
There are two things you need to think
about when configuring the compiler.

8
00:00:32.039 --> 00:00:37.262
第一步是定义哪些文件是输入。
Number one is defining
which files are the inputs.

9
00:00:37.262 --> 00:00:43.253
您可以通过指定一个文件列表，或者
And you can do that either by
specifying a list of files, or

10
00:00:43.253 --> 00:00:49.747
我的偏好是 include，它可以让你指定一些全局变量。
my preference is include,
which lets you specify some globs.

11
00:00:49.747 --> 00:00:55.496
你以前见过像 star.ts 之类的 globs。
You seen globs before like star.ts or
something.

12
00:00:55.496 --> 00:00:59.679
一个有效的 glob 是源文件夹中的所有内容。
One valid glob is everything
in source folder.

13
00:00:59.679 --> 00:01:02.189
对，这就是第一点。
Right, so that's number one.

14
00:01:02.189 --> 00:01:03.520
我们在编译什么？
What are we compiling?

15
00:01:03.520 --> 00:01:07.980
第二个选择是，我们如何编译它？
The second option is,
how are we compiling it?

16
00:01:07.980 --> 00:01:09.728
有哪些编译器选项？
What are the compiler options?

17
00:01:09.728 --> 00:01:15.617
所以为了得到和我们刚才看到的一样的结果,
So to get an equivalent result
of what we were just looking at,

18
00:01:15.617 --> 00:01:19.370
我们会做一个模块 commonjs，目标。
we would do module commonjs, target.

19
00:01:19.370 --> 00:01:24.156
Vs Code 提供了一些，这个文件背后有一个 JSON 模式
And VS Code gives you some,
there's a JSON schema behind this file

20
00:01:24.156 --> 00:01:28.060
它会给出这个的允许值。
that'll give you the allowed values for
this.

21
00:01:28.060 --> 00:01:31.569
所以我们选择 es2017
So we'll pick es2017, and

22
00:01:31.569 --> 00:01:36.240
只是为了好玩，我实际上要把输出到一个不同的目录。
just for fun I'm actually gonna put
the output in a different directory.

23
00:01:37.620 --> 00:01:39.319
把它放到 lib 文件夹中。
Put it in the lib folder.

24
00:01:39.319 --> 00:01:43.849
这使得只发布编译后的输出变得非常容易。
And this would make it really easy to sort
of to publish only the compiled output.

25
00:01:43.849 --> 00:01:48.016
如果这是一个图书馆，我会把它发布到 npm
If this were a library,
I'd wanna publish that to npm so

26
00:01:48.016 --> 00:01:53.349
和 TypeScript 消费者一样，可以导入我的代码。
that JavaScript and TypeScript
consumers alike, can import my code.

27
00:01:53.349 --> 00:01:57.270
他们不需要能够读取这些文件。
They don't have to be
able to read ts files.

28
00:01:57.270 --> 00:01:59.909
所以现在我可以运行 tsc。
So now I can just run tsc.

29
00:02:03.090 --> 00:02:07.680
一切看起来都很好，我应该，在这里刷新之后,
Everything looks good, and
I should, after refreshing here,

30
00:02:07.680 --> 00:02:12.894
有一个包含这个 index.js 的 lib 文件夹。
have a lib folder with
this index.js in it.

31
00:02:12.894 --> 00:02:14.270
这真是太棒了。
So this is great.

32
00:02:14.270 --> 00:02:19.789
所以我几乎可以认为，如果我删除我们在这里的第一次尝试。
So I could almost think of it as,
if I delete our first attempt here.

33
00:02:19.789 --> 00:02:23.579
我可以把我们想象成我们的源文件夹有一个 ts 文件,
I could think of us,
like our source folder has a ts file,

34
00:02:23.579 --> 00:02:26.030
我们的 lib 文件夹有 js 输出。
our lib folder has the js output.

35
00:02:26.030 --> 00:02:31.710
我可以检查源文件夹到 Git，我只能发布库文件夹,
I could check the source folder into Git,
and I could only publish the lib folder,

36
00:02:31.710 --> 00:02:35.110
因为我们只关心编译后的输出。
because we really only care
about the compiled output.

37
00:02:35.110 --> 00:02:38.319
这样你就能把事情组织得井井有条。
And you'd keep things very
well organized in that way.

38
00:02:38.319 --> 00:02:40.737
这真是太棒了。
So this is great.

39
00:02:40.737 --> 00:02:44.831
不过我发现了一个问题，我们有这么多优秀的类型信息
One problem I see though, we have
all this great type information and

40
00:02:44.831 --> 00:02:49.829
我要求用户运行的东西缺少这种类型的信息。
the stuff that I would ask my users to
run is missing this type information.

41
00:02:49.829 --> 00:02:54.349
现在，我有必要提供一个不使用 type 的选项
Now, it's necessary for
me to provide an option to not use type

42
00:02:54.349 --> 00:02:59.420
因为人们可能会编写依赖于这些代码的 JavaScript 应用程序。
information because people might write
JavaScript apps that depend on this code.

43
00:02:59.420 --> 00:03:04.199
但是我想确保我提供了一些其他的东西在那之上。
But I wanna make sure I provide
some other stuff on top of that.

44
00:03:04.199 --> 00:03:10.050
所以我们要说声明为真，SourceMap 为真。
So we're gonna say declaration true and
SourceMap true.

45
00:03:11.569 --> 00:03:16.849
再次运行编译器，我们会看到在 lib 文件夹中弹出一些新文件。
Run the compiler again and we should see
some new files pop up in the lib folder.

46
00:03:16.849 --> 00:03:22.689
其中一个是.d.ts 文件，对吗？
One of them is a .d.ts file, right?

47
00:03:22.689 --> 00:03:27.962
同样的文件名，但是它是. d.ts 而不是. js。
Same file name but
it's .d.ts instead of .js.

48
00:03:27.962 --> 00:03:33.475
这个，如果你看它，它看起来有点像一个没有实现的函数,
And this, if you look at it, it looks kind
of like a function with no implementation,

49
00:03:33.475 --> 00:03:37.110
我们可以看到我论点的名字都在这里。
we can see that the names
of my arguments are there.

50
00:03:37.110 --> 00:03:39.750
我们可以看到我们有参数的类型。
We can see that we have types for
the arguments.

51
00:03:39.750 --> 00:03:41.579
这个我们马上就会知道，但是
This, we'll learn in a moment, but

52
00:03:41.579 --> 00:03:45.139
这恰好是你表示函数返回类型的方式。
it happens to be the way you represent
the return type of the function.

53
00:03:45.139 --> 00:03:50.329
但是这里没有任何东西能够描述如何将 a 和 b 加在一起。
But nothing in here describes how you
would actually add a and b together.

54
00:03:50.329 --> 00:03:53.840
没有什么可以描述我们在返回之前等待了半秒钟。
And nothing describes that we're waiting
half a second before returning that.

55
00:03:53.840 --> 00:03:57.545
所以这是一个类型声明文件
So this is a type declaration
file that is meant

56
00:03:57.545 --> 00:04:02.498
在 JavaScript 的顶部添加一个层，它表示。
to layer right on top of the JavaScript,
that it represents.

57
00:04:02.498 --> 00:04:07.572
如果你使用的是一个支持打字脚本的编辑器，比如 VS 代码,
And if you're using a TypeScript
aware editor, like VS Code,

58
00:04:07.572 --> 00:04:13.028
它会读取这个，然后把它和 JavaScript 匹配
it's going to read this and
kind of match it with that JavaScript and

59
00:04:13.028 --> 00:04:19.252
理解这些类型是为了配合这段代码,
understand that these are the types that
are meant to go along with this code,

60
00:04:19.252 --> 00:04:23.970
这是为了得到我们想要的价值而运行的。
which is what is run in order
to get the value we're after.

61
00:04:25.519 --> 00:04:28.170
另一个文件是源映射，对吗？
The other file is a source map, right?

62
00:04:28.170 --> 00:04:31.077
所以这就是让我们,
So, this is what would let us,

63
00:04:31.077 --> 00:04:36.149
如果在代码中加入断点，在调试器中,
if you put break points in your code,
it's what would, in your debugger,

64
00:04:36.149 --> 00:04:41.300
将断点映射回原始打字稿源。
map that break point back to
the original TypeScript source.

65
00:04:41.300 --> 00:04:45.310
所以你有点像是在通过打字稿代码进行调试,
So you kind of feel as if you're
debugging through TypeScript code,

66
00:04:45.310 --> 00:04:47.379
但事实上，这不是逃跑的原因。
when in fact, that is not what's running.

67
00:04:47.379 --> 00:04:49.220
正在运行的是 JavaScript。
What's running is the JavaScript.

68
00:04:49.220 --> 00:04:52.840
我可以通过在这里给你另一个配置示例来结束。
I can close by giving you
another example config here.

69
00:04:52.840 --> 00:04:54.560
所以这是一个更复杂的问题。
So this is a more complicated one.

70
00:04:55.970 --> 00:04:59.730
编译器具有对反应的本机支持。
The compiler has native support for react.

71
00:04:59.730 --> 00:05:01.451
所以它可以通过 JSX。
So it can pass JSX.

72
00:05:01.451 --> 00:05:07.889
可以理解，如果你调用你的文件 TSX，这就像一个打字稿的反应文件。
Can understand that if you call your files
TSX, that's like a TypeScript react file.

73
00:05:07.889 --> 00:05:10.610
但是你不需要任何东西，除了打字稿
But you don't need anything
other than the TypeScript

74
00:05:10.610 --> 00:05:12.089
编译器来检查。
compiler in order to check that.

75
00:05:13.579 --> 00:05:16.920
严格，设置严格的真实是非常重要的。
Strict, setting strict to
true is really important.

76
00:05:18.079 --> 00:05:21.370
你可能想要严格为假，这是默认的
You may wanna have strict as false,
it's default

77
00:05:22.480 --> 00:05:26.889
从 JavaScript 转移到 TypeScript。
as your sort of Moving from
JavaScript to TypeScript.

78
00:05:26.889 --> 00:05:31.339
我将向您展示的方法包括从松散的配置和
The approach I'll show you involves
starting with the loose configuration and

79
00:05:31.339 --> 00:05:32.649
然后拧紧。
then tightening it up.

80
00:05:32.649 --> 00:05:35.300
但是最终，你想要在一个地方结束你的生命
But ultimately,
you wanna end up in a place where you've

81
00:05:35.300 --> 00:05:37.959
开启了一些严格的功能。
got some of these strict
features turned on.

82
00:05:39.269 --> 00:05:43.379
禁止任何暗示，这也很重要。
Forbidding implicit any,
that's also important.

83
00:05:43.379 --> 00:05:46.340
隐含的茴香就像是百搭牌。
Implicit anys are like wild card.

84
00:05:46.340 --> 00:05:49.939
它们是编译器无法自己解决问题的地方。
They're places where the compiler
couldn't figure things out by itself.

85
00:05:49.939 --> 00:05:53.189
这是一个允许任何类型的地方。
And it's kind of a place
where any type is allowed.

86
00:05:54.370 --> 00:05:56.649
说得更悲观一点,
And to put that in a more pessimistic way,

87
00:05:56.649 --> 00:05:59.350
那是个没有字体安全的地方，对吗？
it's a place where you have
no type safety, right?

88
00:06:00.920 --> 00:06:05.870
编译器可以检查和编译常规的 JavaScript。
The TypeScript compiler can check and
compile regular JavaScript.

89
00:06:05.870 --> 00:06:07.730
如果你有兴趣了解更多,
And if you are interested in
learning more about this,

90
00:06:07.730 --> 00:06:11.629
查看 Visual Studio Code 的 FrontEnd Masters 课程。
check out the Visual Studio Code
course on FrontEnd Masters.

91
00:06:11.629 --> 00:06:17.540
您可以使用 JSdoc 注释并声明这个函数有一个参数和
You can use JSdoc comments and
say that this function has an argument and

92
00:06:17.540 --> 00:06:20.470
它是字符串类型，这里是描述和
it is of type string and
here is the description and

93
00:06:20.470 --> 00:06:23.930
编译器实际上会将其作为类型信息读取。
the compiler will actually
read that as type information.

94
00:06:23.930 --> 00:06:29.259
所以即使你处在一个你不能切换的位置
So even if you are in a position
where you can't actually switch

95
00:06:29.259 --> 00:06:33.490
文件，你仍然可以使用打字稿编译器来检查和
to TS files, you can still use
the TypeScript compiler to check and

96
00:06:33.490 --> 00:06:36.959
确保你的代码以一种类型安全的方式排列。
make sure that your code kind
of lines up in a type-safe way.

97
00:06:38.930 --> 00:06:43.779
我们已经讨论了目标环境，他们经常添加
And we already talked about the target
environment, and they regularly add

98
00:06:43.779 --> 00:06:49.259
并且与 JavaScript 规范的新草案保持同步。
features, and keep pace with new drafts
of the JavaScript specification.

99
00:06:49.259 --> 00:06:51.750
所以 async 和 await 是最近添加的。
So async and await were things
that were added recently.

100
00:06:53.269 --> 00:06:57.798
我希望他们能对一些新的东西，项目领域做些什么。
I expect they will do something about
some of the new stuff, project fields.

101
00:06:58.879 --> 00:07:01.389
在官方 JavaScript 规范中添加内容时,
As things are added to
the official JavaScript spec,

102
00:07:01.389 --> 00:07:03.240
你会看到他们成为新的目标。
you'll see them added as a new target.

103
00:07:07.779 --> 00:07:09.646
迈克 · 诺斯: 什么事？
&gt;&gt; Mike North: Yes?

104
00:07:09.646 --> 00:07:13.187
演讲者2: 如果你想支持，你有什么建议吗,
&gt;&gt; Speaker 2: Do you have a recommendation
for if you wanted to support,

105
00:07:13.187 --> 00:07:15.728
我记得你说过 ES3就像 IA6。
say, I think you said ES3 was like IA6.

106
00:07:15.728 --> 00:07:17.685
迈克 · 诺斯: 是的 演讲者2: 如果你想得到支持
&gt;&gt; Mike North: Yep.
&gt;&gt; Speaker 2: If you wanted the support to

107
00:07:17.685 --> 00:07:21.500
比如 IE 或者其他所有的，或者你根本不想支持 IE,
say like IE or all them, or
you didn't want to support IE at all,

108
00:07:21.500 --> 00:07:22.930
除非他们的目标。
unless their targets.

109
00:07:22.930 --> 00:07:24.540
迈克 · 诺斯: 是的，问得好。
&gt;&gt; Mike North: Yep, good quesiton there.

110
00:07:24.540 --> 00:07:28.745
所以说真的，我能要求你们改进你们的问题吗？
So really, can I ask you to
refine your question there?

111
00:07:28.745 --> 00:07:32.699
你在考虑把巴别塔用在打字稿上吗？
Are you thinking about using
Babel with typescript?

112
00:07:32.699 --> 00:07:33.422
讲者2: 是的 迈克 · 诺斯: 所以,
&gt;&gt; Speaker 2: Yes.
&gt;&gt; Mike North: So that,

113
00:07:33.422 --> 00:07:38.221
使用 Babel 和打字脚本，可以将打字脚本减少到真正的
using Babel with TypeScript that
would reduce TypeScript to really

114
00:07:38.221 --> 00:07:42.606
只是检查器，而不是产生输出的东西。
just the checker,
not the thing it's producing the output.

115
00:07:42.606 --> 00:07:49.119
我建议设置的方式是让打字脚本发出非常,
And the way I would recommend setting that
up, would be have TypeScript emit very,

116
00:07:49.119 --> 00:07:54.899
非常非常现代的 JavaScript，让 Babel 来完成剩下的工作。
very, very modern JavaScript, and
let Babel take it the rest of the way.

117
00:07:54.899 --> 00:07:59.002
你已经有了一些可以接受常规 JavaScript 和
You already have something that
can take regular JavaScript and

118
00:07:59.002 --> 00:08:04.180
像使用巴别塔预置，你可以只列出你的浏览器，对不对？
target like with using Babel preset and
you can just list your browsers, right?

119
00:08:04.180 --> 00:08:08.356
然后说，我关心最后两个版本的 Chrome。
And say, I care about the last
two versions of Chrome.

120
00:08:08.356 --> 00:08:12.122
而且这个库实际上与 Chrome 保持同步，并且
And that library actually keeps
up to date with Chrome, and

121
00:08:12.122 --> 00:08:15.663
基本上可以免除你的责任
will basically remove that
responsibility from you and

122
00:08:15.663 --> 00:08:21.199
你的团队在跟踪什么功能我应该启用和什么不？
your team in terms of keeping track of
what feature should I enable and what not?

123
00:08:21.199 --> 00:08:27.730
所以我会说，让你的目标成为 ESNext。
So I would say,
leave your target as ESNext maybe.

124
00:08:27.730 --> 00:08:30.360
现在随着项目变得越来越大,
Now, as projects get really big,

125
00:08:30.360 --> 00:08:35.539
有时候有些语言特征并不吸引人。
sometimes there are language features
that just are not appealing to include.

126
00:08:35.539 --> 00:08:40.129
例如，在 LinkedIn 我们有一个支持异步的应用程序
For example, at LinkedIn we
have an app that enabling async

127
00:08:40.129 --> 00:08:45.549
等待是很困难的，因为每一次等待
in await would be tough,
just because at every await

128
00:08:45.549 --> 00:08:51.190
我们得用蓄热器之类的东西来填充。
we have to polyfill using regenerator or
something like that.

129
00:08:51.190 --> 00:08:53.629
这开始变得昂贵,
And this starts to get expensive,

130
00:08:53.629 --> 00:08:57.120
这实际上大大增加了资产规模。
it actually increases
the asset size quite a bit.

131
00:08:57.120 --> 00:09:02.730
所以我会把所有这些都留给借贷工具和巴别塔。
So I would leave all of that in
the hands of lending tools and Babel.

132
00:09:02.730 --> 00:09:06.679
如果你只是使用编译器作为静态分析工具,
And if you're just using the compiler
as a static analysis tool, well,

133
00:09:06.679 --> 00:09:09.059
把你的目标设置在 ESNext。
leave your target set at ESNext.
