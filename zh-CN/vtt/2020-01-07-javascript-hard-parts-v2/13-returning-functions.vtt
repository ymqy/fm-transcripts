WEBVTT

1
00:00:00.000 --> 00:00:03.571
但是这一切都是从我们返回一个函数开始的
&gt;&gt; Will Sentance: But it all starts
with us returning a function from

2
00:00:03.571 --> 00:00:07.660
调用，通过运行另一个函数。
the invocation,
from the running of another function.

3
00:00:07.660 --> 00:00:13.368
这是很重要的一部分,
This is a big part,
it's a part that's gonna feel,

4
00:00:13.368 --> 00:00:16.885
好吧我有点明白了。
okay, yeah, I kinda get this.

5
00:00:16.885 --> 00:00:21.838
然而，伙计们，如果我们记下这一点，所有的圈地就会像这样,
And yet, folk, if we get this bit down,
everything enclosure follows like that,

6
00:00:21.838 --> 00:00:22.917
好像很容易似的。
like it's easy.

7
00:00:22.917 --> 00:00:25.365
但是我们必须理解返回一个函数听起来是多么美妙
But we have to understand what sounds
pretty from returning a function

8
00:00:25.365 --> 00:00:26.079
另一个函数。
another function.

9
00:00:26.079 --> 00:00:28.661
是的，我向你保证我已经做过这个演讲了。
And yeah,
I promise you I've given this talk.

10
00:00:28.661 --> 00:00:33.066
我不是评估更多，我在知道这些的插入式公司做这个演讲
I'm not assessing more, I give this talk
at insert companies who knows what this

11
00:00:33.066 --> 00:00:35.026
是我的 be 和本季工程师们。
is my be and this season engineers.

12
00:00:35.026 --> 00:00:38.203
他们真的没有这个小概念。
They really don't have
this little notion down.

13
00:00:38.203 --> 00:00:40.881
在我们做 a 之前，任何真正理解 JavaScript 的东西。
And until we do A,
anything really understand JavaScript.

14
00:00:40.881 --> 00:00:45.689
其次，我们绝对没有能力做个了结，对吧？
And B, we definitely don't have
the ability to get closure, right?

15
00:00:45.689 --> 00:00:47.180
当然，因为我们还没有准备好结束。
Of course,
cuz we don't have closure ready.

16
00:00:47.180 --> 00:00:50.566
所以我们要去理解返回另一个函数的函数,
So we're gonna go and understand
returning a function of another function,

17
00:00:50.566 --> 00:00:51.093
找到了。
here it is.

18
00:00:51.093 --> 00:00:53.984
函数可以从 JavaScript 中的其他函数返回,
Functions can be returned from
other functions in JavaScript,

19
00:00:53.984 --> 00:00:55.115
我们走过去看看。
let's walk through it.

20
00:00:55.115 --> 00:00:57.405
我们从 createFunction 中保存了一个函数,
We've got a function saved
here from createFunction,

21
00:00:57.405 --> 00:00:59.848
我们会给出一个标签 generatedFunc 一个标识符。
we're gonna give a label generatedFunc,
an identifier.

22
00:00:59.848 --> 00:01:04.941
Generatedfunc，我们将为其分配运行 create 函数的输出。
GeneratedFunc, to which we're gonna assign
the output of running create function.

23
00:01:04.941 --> 00:01:06.774
一次运行 create 函数。
One time running create function.

24
00:01:06.774 --> 00:01:07.551
我们怎么知道？
How do we know that?

25
00:01:07.551 --> 00:01:10.769
我看到了 parens，它说去运行这里的代码。
I see parens,
it says go run this code up here.

26
00:01:10.769 --> 00:01:14.188
我们要创建一个执行上下文来运行它,
We're gonna create an execution
context to run it, dive in,

27
00:01:14.188 --> 00:01:17.159
我们要马上保留一个全新的功能。
we're gonna save immediately
a brand new function.

28
00:01:17.159 --> 00:01:18.602
呼叫乘以二。
Call multiplied by two.

29
00:01:18.602 --> 00:01:19.968
我们不会用的,
We're not gonna use it,

30
00:01:19.968 --> 00:01:23.626
我们会直接把它退回到 generatedFunc。
we're instead gonna return it
straight out into generatedFunc.

31
00:01:23.626 --> 00:01:26.706
这样 generatedFunc 将成为一个新的标签
Such that generatedFunc is
gonna be a new label for

32
00:01:26.706 --> 00:01:29.504
这个函数生来就是乘法 by2。
the function that was born as multiplyBy2.

33
00:01:29.504 --> 00:01:33.061
在全局中，局部标号乘以创建函数内部的两个数
In global, the local label multiplied
by two inside of create function's

34
00:01:33.061 --> 00:01:35.384
执行上下文，这将被删除。
execution context,
that's gonna be deleted.

35
00:01:35.384 --> 00:01:38.756
但是它们的函数将在 generatedFunc 中返回
But their functions are gonna be
returned out in the generatedFunc and

36
00:01:38.756 --> 00:01:42.771
我们现在将有一个新的标签为什么是倍增 by2生成的 func。
we'll now gonna have a new label for what
was born as multiplyBy2 generatedFunc.

37
00:01:42.771 --> 00:01:45.415
这有点像另一个翻转，我们正在进入一些东西
It's kinda like the flip of the other
one where we were taking something into

38
00:01:45.415 --> 00:01:46.831
另一个函数，给它一个新的标签。
another function, give it a new label.

39
00:01:46.831 --> 00:01:49.471
现在，我们把它拿出来，给它一个新的标签
Now, we're taking it out,
giving it a new label and

40
00:01:49.471 --> 00:01:51.573
通过那个有 params 的新唱片公司经营。
running it by that new label with params.

41
00:01:51.573 --> 00:01:56.265
那个生成的 func 将会是多倍的 by2。
That generatedFunc is really
gonna be multiplyBy2.

42
00:01:56.265 --> 00:02:00.427
听起来也许不深刻但是民谣我们都知道,
Sounds maybe not profound,
but folk, we get this down,

43
00:02:00.427 --> 00:02:02.787
自然而然就结束了。
closure follows so naturally.

44
00:02:02.787 --> 00:02:06.153
好了我们开始吧。
All right, here we go.

45
00:02:06.153 --> 00:02:09.073
1号线，托德，我们在这儿干什么？
Line 1, Todd, what are we doing here?

46
00:02:09.073 --> 00:02:11.682
托德: 我们正在定义创建函数的函数。
&gt;&gt; Todd: We're defining
the function createFunction.

47
00:02:11.682 --> 00:02:15.782
威尔 · 森特斯: 创造功能，我们把它存在哪里？
&gt;&gt; Will Sentance: CreateFunction,
and we're storing it where?

48
00:02:15.782 --> 00:02:16.649
托德: 在全局记忆中。
&gt;&gt; Todd: In global memory.

49
00:02:16.649 --> 00:02:19.983
威尔 · 森坦斯: 没错，我们实际上存储了
&gt;&gt; Will Sentance: That's right we're
actually storing all the code of

50
00:02:19.983 --> 00:02:23.980
这个函数从来没有忘记这个方块代表所有的代码
the function never lose sight of
this box represents all the code

51
00:02:23.980 --> 00:02:28.070
被定义的函数，被保存到全局内存中。
of the function being defined,
being saved into global memory.

52
00:02:28.070 --> 00:02:29.931
太好了，谢谢托德。
Perfect, thank you to Todd.

53
00:02:29.931 --> 00:02:34.706
现在我们继续下一行？
And now we move on to what line next?

54
00:02:34.706 --> 00:02:36.430
伊森？
Ethan?

55
00:02:36.430 --> 00:02:41.414
伊森: 我们将定义 generatedFunc 的概念。
&gt;&gt; Ethan: We'll be defining
the concepts generatedFunc.

56
00:02:41.414 --> 00:02:45.766
Will Sentance: Beautiful，define the const generatedFunc.
&gt;&gt; Will Sentance: Beautiful,
define the const generatedFunc.

57
00:02:45.766 --> 00:02:48.375
这就是 generatedFunc，好吗？
There it is generatedFunc, okay?

58
00:02:48.375 --> 00:02:51.989
事情变得有趣了 Ethan 我们卖了那个标签,
Now, things got interesting Ethan,
we sold that label,

59
00:02:51.989 --> 00:02:55.033
标识常量标签产生的 func。
that identify that const
label generatedFunc.

60
00:02:55.033 --> 00:02:57.841
我们要存储分配给它的什么？
What are we're gonna store assign to it?

61
00:02:57.841 --> 00:02:59.252
它的价值是什么？
What's it's value gonna be?

62
00:03:01.769 --> 00:03:04.181
威尔 · 森坦斯: 答案可能只是，我们还不知道。
&gt;&gt; Will Sentance: The answer
might just be, we don't know yet.

63
00:03:04.181 --> 00:03:05.288
伊森: 我们还不知道。
&gt;&gt; Ethan: We don't know yet.

64
00:03:05.288 --> 00:03:09.188
威尔 · 森特斯: 我们还不知道，它还没有初始化，我们必须去,
&gt;&gt; Will Sentance: We don't know yet, it's
uninitialized, while we've gotta go and,

65
00:03:09.188 --> 00:03:12.907
你逃不掉的，我们得去做什么，伊森？
you can't get away with that,
we've gotta go and do what, Ethan?

66
00:03:12.907 --> 00:03:14.246
伊森: 调用创建函数。
&gt;&gt; Ethan: Call createFunction.

67
00:03:14.246 --> 00:03:17.155
Will Sentance: 调用 createFunction 和
&gt;&gt; Will Sentance: Call createFunction and

68
00:03:17.155 --> 00:03:22.419
无论它返回什么，都没有初始化
whatever it returns out, uninitialized for

69
00:03:22.419 --> 00:03:28.651
现在，我们要去关闭和创建功能,
now, we are going to go off and
pull createFunction,

70
00:03:28.651 --> 00:03:33.376
没有争论，没有输入，没有问题。
no arguments, no inputs, no problem.

71
00:03:33.376 --> 00:03:35.237
所有他是一个正常的使一个函数运行。
All he was a normal make a function run.

72
00:03:35.237 --> 00:03:37.120
括号将使函数运行。
Parentheses will make a function run.

73
00:03:37.120 --> 00:03:38.772
这是一个很大的区别。
It's a big distinction.

74
00:03:38.772 --> 00:03:44.448
我们将进入执行环境。
And we're going to enter
that execution context.

75
00:03:44.448 --> 00:03:47.908
我们要创造每个人，因为午餐后表演什么？
We're gonna create everybody
because after lunch shows what?

76
00:03:47.908 --> 00:03:49.555
我们要创造一个全新的？
We're gonna create a brand new?

77
00:03:49.555 --> 00:03:51.608
托德: 执行环境。
&gt;&gt; Todd: Execution context.

78
00:03:51.608 --> 00:03:57.132
威尔 · 森坦斯: 当我们走到这里，不管从这个函数返回什么,
&gt;&gt; Will Sentance: As we go and here, okay,
whatever is returned out of this function,

79
00:03:57.132 --> 00:04:02.941
可以是数字，可以是字符串，可以是数组
it could be a number, it could be
a string, it could be an array, it could

80
00:04:02.941 --> 00:04:09.162
定义一个函数的代码将被存储到 generatedFunc 中。
be a definition the code of a function
is gonna be stored into generatedFunc.

81
00:04:09.162 --> 00:04:14.079
但是在我们开始之前，布莱登，我们要宣布的是什么,
But before we get to that, Braden, what
is it that we're going to declare, save,

82
00:04:14.079 --> 00:04:17.336
存储在 createFunction 的执行上下文中？
store inside createFunction's
execution context?

83
00:04:17.336 --> 00:04:18.584
我们在那里储存什么？
What are we storing there?

84
00:04:18.584 --> 00:04:20.737
伊森: 你在声明多元 by2函数。
&gt;&gt; Ethan: You're declaring
the multiplyBy2 function.

85
00:04:20.737 --> 00:04:25.418
威尔 · 森特斯: 是的，字面意思是，人们,
&gt;&gt; Will Sentance: Yeah, and
that literally means, people,

86
00:04:25.418 --> 00:04:29.978
这是我们定义的局部临时内存。
this is local temporary memory we define.

87
00:04:29.978 --> 00:04:31.334
没有拼写，对吧？
That's not spelled, right?

88
00:04:31.334 --> 00:04:36.268
定义 multilyby2为，我要做一个不同的颜色，所以
Define multiplyBy2 as,
I'm gonna do a different colors so

89
00:04:36.268 --> 00:04:40.730
我们可以追踪它的旅程，找到 multimyby2。
we can really track its
journey to find multiplyBy2.

90
00:04:40.730 --> 00:04:42.113
这可读吗？
Is that readable?

91
00:04:42.113 --> 00:04:47.800
没关系，把 multilyby2定义为一个函数就是整个代码。
That's okay, define multiplyBy2
as a function is whole code.

92
00:04:47.800 --> 00:04:52.502
凯拉我们现在用的是二乘法吗？
Now, Kayla are we using
multiply by two right now?

93
00:04:52.502 --> 00:04:56.446
我们要调用它，在 createFunctions 执行上下文中调用它吗？
Are we gonna call it, invoke it inside
of createFunctions execution context?

94
00:04:56.446 --> 00:04:57.784
没有 威尔 · 森塔斯: 我们绝对不会,
&gt;&gt; Kayla: No.
&gt;&gt; Will Sentance: We absolutely not,

95
00:04:57.784 --> 00:04:59.867
那我们现在怎么办 Kayla？
what are we gonna do instead here, Kayla?

96
00:04:59.867 --> 00:05:04.107
我们要把它归还给常量生成基金会。
&gt;&gt; Kayla: We're gonna return it
to the constant generatedFunc.

97
00:05:04.107 --> 00:05:04.819
威尔 · 森特斯: 太棒了,
&gt;&gt; Will Sentance: Fantastic,

98
00:05:04.819 --> 00:05:08.197
我们要把它返回到恒定的 generatedFunc。
we're gonna return it out into
the constant generatedFunc.

99
00:05:08.197 --> 00:05:10.730
这就是 JavaScript 的作用，它似乎返回了,
Here's what JavaScript does,
it seems returned,

100
00:05:10.730 --> 00:05:13.550
2，它说，i’ ve no i don’t return means,
multiplyBy2, it goes,
I've no I don't return means,

101
00:05:13.550 --> 00:05:17.130
接下来是函数执行上下文的输出。
the next thing is gonna be the output
of this function execution context.

102
00:05:17.130 --> 00:05:20.071
实际上，这将替换对函数的调用
In fact, this is gonna replace
the call to the function and

103
00:05:20.071 --> 00:05:21.875
我们在左手边看到的。
we saw it on the left hand side here.

104
00:05:21.875 --> 00:05:24.627
我知道，但我不知道这个词是什么意思。
I know that but
I have no idea what this word means.

105
00:05:24.627 --> 00:05:27.869
所以它像往常一样发出信号，去寻找记忆。
So it goes off as it always
does to look into memory.

106
00:05:27.869 --> 00:05:29.173
别担心。
Don't worry.

107
00:05:29.173 --> 00:05:33.502
这里有一个函数，它使用这个标签来取值,
There's a function,
it uses that label to take the value,

108
00:05:33.502 --> 00:05:37.588
信不信由你，函数定义是一个值。
which believe it or
not function definition is a value.

109
00:05:37.588 --> 00:05:41.781
函数的代码是一种可以存储的东西，它具有很大的价值
The code of a function is a thing that can
be stored that has a lot of value with

110
00:05:41.781 --> 00:05:44.122
可以用标签存储的东西。
the thing that can be stored with a label.

111
00:05:44.122 --> 00:05:46.762
标识的标签，它的值的花哨名称,
Label for identify,
a fancy name for it value,

112
00:05:46.762 --> 00:05:49.012
这是整个函数的代码。
which is the whole code of the function.

113
00:05:49.012 --> 00:05:52.122
我们在讨论，如果我们接受它，除了标签什么都可以。
We're talking, if we were to take it,
it would be everything but the label.

114
00:05:52.122 --> 00:05:54.471
除了标签之外的所有东西，都是它的主体。
Everything there but the label,
that's the body of it.

115
00:05:54.471 --> 00:05:57.062
Returnnumby2，这就是它的参数 num。
ReturnNumBy2, that's the parameter of it,
num.

116
00:05:57.062 --> 00:05:59.687
所有的存储，这就是这里。
All stored, that's what this is here.

117
00:05:59.687 --> 00:06:03.853
我去拿正如 Kayla 所说我们要把它还回去。
I'm gonna grab, and exactly as Kayla said,
we're gonna return it out.

118
00:06:03.853 --> 00:06:08.434
凯拉，它来了吗，它返回时标签是否带有 multilyby2？
Kayla, does it come, does it get
returned out with its label multiplyBy2?

119
00:06:08.434 --> 00:06:13.047
不，只是定义什么新的全球标签，凯拉？
No, just the definition into
what new global label, Kayla?

120
00:06:13.047 --> 00:06:14.048
通用基金。
&gt;&gt; Kayla: GeneratedFunc.

121
00:06:14.048 --> 00:06:16.144
威尔 · 森特斯: 她说得很对。
&gt;&gt; Will Sentance: Into generatedFunc,
she's spot on.

122
00:06:16.144 --> 00:06:19.851
这就是它，它的正式名称是，只是为了
There it is,
it was formally known as, just for

123
00:06:19.851 --> 00:06:22.726
我们追踪它的目的,
our purposes of keeping track of it,

124
00:06:22.726 --> 00:06:27.858
它以前叫做 multilyby2，但现在不是了，好吗？
it was formerly known as multiplyBy2,
but not anymore, okay?

125
00:06:27.858 --> 00:06:30.502
也就是说，顺便说一下，我甚至可能在这里展示它。
That is also to say by the way,
I might even show it here.

126
00:06:30.502 --> 00:06:35.978
也就是说，我们实际上是在替换函数调用
That is to say that we are literally
replacing that function call and it's

127
00:06:35.978 --> 00:06:42.093
我们要返回到 generatedFunc 中的 multiplyBy2函数定义。
gonna return out that function definition
of multiplyBy2 into generatedFunc.

128
00:06:42.093 --> 00:06:44.915
好的，[声音] ，这很棘手。
Okay, [SOUND], that's tricky.

129
00:06:44.915 --> 00:06:48.192
这个执行环境，各位，它发生了什么？
And this execution context,
everybody, what happens to it?

130
00:06:48.192 --> 00:06:48.754
托德: 消失。
&gt;&gt; Todd: Disappears.

131
00:06:48.754 --> 00:06:51.040
是的，它消失了，被删除了，被关闭了,
&gt;&gt; Will Sentance: Yeah, it disappears,
it's deleted, it's closed,

132
00:06:51.040 --> 00:06:52.558
里面的东西都会被删除。
everything inside of gets deleted.

133
00:06:52.558 --> 00:06:55.091
除了函数返回但是
Well, except the function
got returned that but

134
00:06:55.091 --> 00:06:58.877
除了一些有效的结果，我们确实失去了所有的标签。
we do lose that label everything
besides a bunch of efficient outcomes.

135
00:06:58.877 --> 00:07:04.435
好，现在我们回到 global，我们击中下一行的左手边。
Okay, now we're back into global, where
we hit left hand side of the next line.

136
00:07:04.435 --> 00:07:08.721
上面说要做瑞恩在最后一行左手边的动作。
It says to do what Ryan on the left
hand side of the last line there.

137
00:07:08.721 --> 00:07:09.951
定义一个恒定的结果。
&gt;&gt; Ryan: Define a constant result.

138
00:07:09.951 --> 00:07:13.615
定义一个不变的结果，非常好。
&gt;&gt; Will Sentance: Define
a constant result, very nice.

139
00:07:13.615 --> 00:07:16.161
定义一个恒定的结果。
Okay, define a constant results.

140
00:07:18.293 --> 00:07:23.668
那么这等于什么呢？
&gt;&gt; Will Sentance: And
so that equal to what?

141
00:07:23.668 --> 00:07:24.524
瑞恩，请讲。
Ryan go ahead.

142
00:07:24.524 --> 00:07:25.786
瑞安: GeneratedFunc。
&gt;&gt; Ryan: GeneratedFunc.

143
00:07:25.786 --> 00:07:26.353
威尔 · 森塔斯: 不完全是,
&gt;&gt; Will Sentance: Not quite,

144
00:07:26.353 --> 00:07:29.887
我甚至不会说精确度在这里是如此重要。
I wouldn't even say that words where
the precision is so important here.

145
00:07:29.887 --> 00:07:31.538
凯拉，你想试试吗？
Kayla do you wanna take a shot?

146
00:07:31.538 --> 00:07:36.649
这是用3调用 generatedfunc 的结果。
&gt;&gt; Kayla: It's the result of
calling generatedfunc with 3.

147
00:07:36.649 --> 00:07:38.709
威尔 · 森塔斯: 是的，那么我们就在这里写吧，她完全正确。
&gt;&gt; Will Sentance: Yeah, so
let's write it here, she's exactly right.

148
00:07:38.709 --> 00:07:43.832
在这里区分函数是非常重要的。
You see it's really important here that
we distinguish between a function.

149
00:07:43.832 --> 00:07:47.050
如果这里没有 parenns，那么结果就是 generatedFunc。
If we just had no parens here,
the result would be generatedFunc.

150
00:07:47.050 --> 00:07:49.855
它只是这个函数的另一个标签。
And it would just be another label for
this function here.

151
00:07:49.855 --> 00:07:53.644
但是相反，这是一个在这里运行这个函数的命令。
But instead, this is a command to go and
run this function here.

152
00:07:53.644 --> 00:07:55.692
所以现在让我们更精确地说明这一点。
So now let's be really precise on this.

153
00:07:55.692 --> 00:07:58.933
Kayla 通用基金会如果你在看这段代码,
Kayla, generatedFunc,
if you're looking at this code here,

154
00:07:58.933 --> 00:08:02.367
人们一直都是这么做的，完全可以理解。
and this what people do all the time,
and totally understandably.

155
00:08:02.367 --> 00:08:04.076
你抬起头，问什么是 generatedFunc？
You look up and
you say what's generatedFunc?

156
00:08:04.076 --> 00:08:07.024
什么是 generatedFunc？
It's the, well, what is generatedFunc?

157
00:08:07.024 --> 00:08:08.641
凯拉，你想试试吗？
Kayla, do you wanna give it a shot?

158
00:08:08.641 --> 00:08:12.122
这就是多倍体的定义。
&gt;&gt; Kayla: It was
the definition of multiplyBy2.

159
00:08:12.122 --> 00:08:16.439
威尔 · 森塔斯: 她说的没错，一般来说，她给了你另一种方式
&gt;&gt; Will Sentance: She's spot on, more
generally to give you sort of another way

160
00:08:16.439 --> 00:08:19.603
就创造功能而言。
of putting it, in terms of createFunction.

161
00:08:19.603 --> 00:08:21.718
它和创建函数有什么关系？
What's its relationship to createFunction?

162
00:08:21.718 --> 00:08:23.302
这是跑步的结果。
&gt;&gt; Kayla: It was the result of running it.

163
00:08:23.302 --> 00:08:24.706
威尔 · 森塔斯: 这就是结果。
&gt;&gt; Will Sentance: It was the result.

164
00:08:24.706 --> 00:08:26.660
这就是结果。
It was the result.

165
00:08:26.660 --> 00:08:30.055
Createfunction 的一次性运行。
The one time running of createFunction.

166
00:08:30.055 --> 00:08:36.081
通用的 func 人员，从那行开始就没有任何关系,
GeneratedFunc people,
has zero relationship from that line on,

167
00:08:36.081 --> 00:08:40.924
从这个倒数第二行在 generatedFunc 有零
from this penultimate line
on generatedFunc has zero

168
00:08:40.924 --> 00:08:46.648
与 createFunction 的关系，它有零连接。
relationship with createFunction,
it has zero connection.

169
00:08:46.648 --> 00:08:48.264
然而，当我们看到这些的时候，我们看到了什么？
And yet
what do we look at that when we see that?

170
00:08:48.264 --> 00:08:53.403
我们就像 generatedFunc 一样运行 createFunction 或者
We're like generatedFunc is kind of
the running of createFunction or

171
00:08:53.403 --> 00:08:56.985
即使是 generatedFunc 也是一种创建函数。
even generatedFunc is
kind of createFunction.

172
00:08:56.985 --> 00:09:00.331
不，所以 JavaScript 是一种同步语言。
No, so
JavaScript is a synchronous language.

173
00:09:00.331 --> 00:09:03.572
做完这一行，继续前进，永远不要再碰它。
Do the line, move on,
never to touch it again.

174
00:09:03.572 --> 00:09:07.245
当你完成了这一行，运行 createFunction,
When you've done that line,
the running of createFunction,

175
00:09:07.245 --> 00:09:10.864
你进去，创建一个新的函数，内部是 multilyby2。
you go in, you create a new function,
multiplyBy2 inside.

176
00:09:10.864 --> 00:09:14.320
它被返回到 generatedFunc 中。
It gets returned out into generatedFunc.

177
00:09:14.320 --> 00:09:16.956
Generatedfunc 是纯粹的、简单的
GeneratedFunc is pure and simply and

178
00:09:16.956 --> 00:09:21.470
只有 create 函数一次运行的结果。
only the result of the one time
running of the create function.

179
00:09:21.470 --> 00:09:26.198
也就是说，它是保存在 generatedFunc 上的，multilyby2的代码。
That is to say that it is saved,
multiplyBy2's code on a generatedFunc.

180
00:09:26.198 --> 00:09:29.933
从这一行开始，它与 createFunction 没有任何关系。
It has nothing to do from that
line on with createFunction.

181
00:09:29.933 --> 00:09:32.818
然而，我们是否倾向于看到这条线？
And yet,
are we prone we see this line here?

182
00:09:32.818 --> 00:09:34.996
当我们看到 generatedFunc 引用时，我们上升并且
When we see generatedFunc refer to,
we go up and

183
00:09:34.996 --> 00:09:36.907
我们发现它与创建函数有关。
we see it's related to createFunction.

184
00:09:36.907 --> 00:09:40.750
我们假设，它与创造函数有某种联系。
We assume, somehow it's got some
relation to createFunction.

185
00:09:40.750 --> 00:09:42.710
它没有任何关系。
It has zero relationship.

186
00:09:44.568 --> 00:09:49.076
威尔 · 森塔斯: 它们之间的联系如此之少，真是不可思议。
&gt;&gt; Will Sentance: It's quite extraordinary
how little connection it has.

187
00:09:49.076 --> 00:09:53.365
就这一次我知道我一直在纠结但我向你们保证,
It's was a one-time, I know I'm dwelling
on this, but I promise you people,

188
00:09:53.365 --> 00:09:56.565
世界各地的人们都会说，是的，是的，当然,
people around the world are going,
yeah, yeah, sure,

189
00:09:56.565 --> 00:09:59.648
就像是创建函数，是的，明白了。
generatedFunc is like createFunction,
yeah, got it.

190
00:09:59.648 --> 00:10:03.660
我们都有过这样的经历，如果我们得到了这一点，合上你的书，它就是如此
And we've all been there, and if we
get this bit, close your book, it's so

191
00:10:03.660 --> 00:10:04.365
自然地。
naturally.

192
00:10:04.365 --> 00:10:08.214
这实际上是潜在的混乱的原因。
This is actually the cause
of underlying confusion.

193
00:10:08.214 --> 00:10:10.543
所以让我们试着回答更多的问题。
So let's try and answer a few more ways.

194
00:10:10.543 --> 00:10:15.145
当我运行 createFunction 的时候，我进去创建了 multimyby2。
When I ran createFunction at one time I
went inside and I created multiplyBy2.

195
00:10:15.145 --> 00:10:19.679
当我实际执行 createFunction 上下文时，它就被创建了
When I actually did that createFunction
execution context it was created

196
00:10:19.679 --> 00:10:23.053
我不能接触到这里面的任何东西。
by calling it I lose access
to anything inside of here.

197
00:10:23.053 --> 00:10:25.562
除非等等我们问问地图,
Unless, hold on, let's ask map,

198
00:10:25.562 --> 00:10:30.677
我还能在全局中运行 multiplyBy2的函数定义吗？
can I still run the function definition
of multiplyBy2 back in global?

199
00:10:30.677 --> 00:10:31.826
讲者6: 是的 威尔 · 桑特斯: 是啊，怎么会这样？
&gt;&gt; Speaker 6: Yes.
&gt;&gt; Will Sentance: Yeah, how come?

200
00:10:31.826 --> 00:10:33.350
我可以使用什么? 我可以使用什么标签？
What can I use?
What label can I use?

201
00:10:33.350 --> 00:10:34.962
扬声器6: 你可以使用 generatedFunc。
&gt;&gt; Speaker 6: You can use generatedFunc.

202
00:10:34.962 --> 00:10:37.812
Will Sentance: 我可以使用 generatedFunc，因为 generatedFunc 是
&gt;&gt; Will Sentance: I can use generatedFunc,
because generatedFunc is the result of

203
00:10:37.812 --> 00:10:41.817
一次性运行一个 createFunction，结果得到了 multiplyBy2的定义。
one-time running a createFunction, that it
turned out the definition of multiplyBy2.

204
00:10:41.817 --> 00:10:44.203
我还要说多少次？
How many more times do I have to?

205
00:10:44.203 --> 00:10:45.485
接下来我该怎么说？
[LAUGH] Which way should I say it next?

206
00:10:45.485 --> 00:10:48.864
大家听清楚了如果我在运行 generatedFunc,
So to be clear everybody,
if I'm running generatedFunc,

207
00:10:48.864 --> 00:10:51.370
我正在运行这个函数。
I'm running the function that was born as.

208
00:10:51.370 --> 00:10:53.004
讲者6: multilyby2。
&gt;&gt; Speaker 6: MultiplyBy2.

209
00:10:53.004 --> 00:10:56.197
如果我运行 generatedFunc 什么？
&gt;&gt; Will Sentance: If I'm
running generatedFunc what?

210
00:10:56.197 --> 00:10:57.923
有人说创建，我听到了创建功能这个词。
Someone say created,
I heard the word createFunction.

211
00:10:57.923 --> 00:11:03.541
如果我正在运行 generatedFunc，那么我正在运行的函数是作为什么而诞生的？
If I'm running generatedFunc, I'm running
the function that was born as what?

212
00:11:03.541 --> 00:11:05.115
讲者6: multilyby2。
&gt;&gt; Speaker 6: MultiplyBy2.

213
00:11:05.115 --> 00:11:08.386
威尔 · 森特斯: GeneratedFunc 是代码，最初是什么？
&gt;&gt; Will Sentance: GeneratedFunc is
the code that was originally what?

214
00:11:08.386 --> 00:11:09.815
讲者6: multilyby2。
&gt;&gt; Speaker 6: MultiplyBy2.

215
00:11:09.815 --> 00:11:11.941
威尔 · 斯坦斯: 没错，就是多倍 by2的定义。
&gt;&gt; Will Sentance: Exactly,
definition of multiplyBy2.

216
00:11:11.941 --> 00:11:15.029
Generatedfunc，它是否与 createFunction 有连接？
GeneratedFunc, does it have
a connection to createFunction?

217
00:11:15.029 --> 00:11:15.561
讲者6: 没有。
&gt;&gt; Speaker 6: No.

218
00:11:15.561 --> 00:11:19.673
不，它是由 createFunction 创建的还是有点像创建的？
&gt;&gt; Will Sentance: No, did it get created
or sort of get created by createFunction?

219
00:11:19.673 --> 00:11:23.650
是的，但仅此而已，我们继续前进。
Yes, but that was it, and we moved on.

220
00:11:23.650 --> 00:11:28.109
好的如果我在这里运行 generatedFunc 我会创建,
Okay, so, if I'm running generatedFunc
here, I'm gonna create, everybody,

221
00:11:28.109 --> 00:11:28.817
全新的？
a brand new?

222
00:11:28.817 --> 00:11:30.014
演讲者6: 执行情境。
&gt;&gt; Speaker 6: Execution context.

223
00:11:30.014 --> 00:11:31.198
威尔 · 森特斯: 太好了，彼得。
&gt;&gt; Will Sentance: Excellent, Peter.

224
00:11:31.198 --> 00:11:32.684
其他人都是全新的吗？
Everyone else a brand new?

225
00:11:32.684 --> 00:11:33.705
演讲者6: 执行情境。
&gt;&gt; Speaker 6: Execution context.

226
00:11:33.705 --> 00:11:36.278
威尔 · 森特斯: 很好，就是这个。
&gt;&gt; Will Sentance: Very nice, there it is.

227
00:11:36.278 --> 00:11:40.524
好吧，这就是为什么我觉得很困惑的原因。
Okay, and
here's why it's really confusing I think.

228
00:11:40.524 --> 00:11:41.667
让我们进入正题。
Let's go into it.

229
00:11:43.809 --> 00:11:46.460
我们的论点3，占位符是什么？
&gt;&gt; Will Sentance: Our arguments 3,
what's the placeholder?

230
00:11:46.460 --> 00:11:48.033
参数是什么？
What's the parameter?

231
00:11:48.033 --> 00:11:50.423
丹，那是在等那三个吗？
Dan, that's waiting for that 3?

232
00:11:50.423 --> 00:11:51.429
丹: 数字。
&gt;&gt; Dan: Num.

233
00:11:51.429 --> 00:11:55.219
威尔 · 森塔斯: 他说对了，但是这就是为什么人们会加倍困惑的原因。
&gt;&gt; Will Sentance: He's spot on, but here's
why this is doubly confusing people.

234
00:11:55.219 --> 00:11:58.236
为了找出占位符是什么，丹必须去哪里？
Where did Dan have to go,
to figure out what the placeholder was?

235
00:11:58.236 --> 00:12:00.913
他不得不回到创意公司。
He had to go back into createFunction.

236
00:12:00.913 --> 00:12:06.744
作为一个开发人员，如果你回来了，但是 JavaScript 百分之百没有这样做。
Visually as a developer if you're back in
and yet is JavaScript doing that 100% no.

237
00:12:06.744 --> 00:12:10.951
但是 Dan 不得不回去创造功能，这是多么令人困惑啊
But how damn confusing is that that Dan
had to go back up to create function and

238
00:12:10.951 --> 00:12:13.010
再多看几眼，他就能挽救了？
see more of it and he will saved that?

239
00:12:13.010 --> 00:12:15.485
但这并不是它真正被拯救的地方。
But that's not where it's actually saved.

240
00:12:15.485 --> 00:12:18.597
当我们运行 createFunction 时，这行代码运行了那段代码,
That line there when we ran
createFunction ran that code,

241
00:12:18.597 --> 00:12:22.292
这是创建函数的方式，全局保存在全局内存中。
which was by the way create functions
global saved in global memory.

242
00:12:22.292 --> 00:12:25.032
即使在运行 create 函数时，也没有去备份 create 函数。
Even when it ran create functions
didn't go backups create function.

243
00:12:25.032 --> 00:12:28.596
线程永远不会返回，它不需要返回，因为当它说你创建的时候
The thread never goes back up, it didn't
have to because when it say you create

244
00:12:28.596 --> 00:12:31.145
函数启动时，它将所有代码保存在内存中。
functions that start,
it saved all the code in memory.

245
00:12:31.145 --> 00:12:34.206
它就是从那里抓取代码开始运行的。
That's where it went and
grabbed the code from to start running it.

246
00:12:34.206 --> 00:12:38.288
然后在创建函数 multipleyby2中创建。
And then it created inside of
createFunction multiplyBy2.

247
00:12:38.288 --> 00:12:42.908
它还保存了 multilyby2的代码，包括参数名
And it literally saved the code of
multiplyBy2 including the parameter name

248
00:12:42.908 --> 00:12:47.750
Num，在执行上下文(本地内存)中创建参数 name num。
num, creating parameter name num into
that execution context, local memory.

249
00:12:47.750 --> 00:12:50.428
然后他抓住它，把它放回到全球
And then he grabbed it and
returned it out into global and

250
00:12:50.428 --> 00:12:52.028
存储在 generatedFunc 下。
stored it under generatedFunc.

251
00:12:52.028 --> 00:12:54.211
它进入了我们的记忆
And it's into memory where we go and

252
00:12:54.211 --> 00:12:58.445
获取我们在运行 generatedFunc 时使用的函数代码。
grab the code of that function that
we had when we run generatedFunc.

253
00:12:58.445 --> 00:13:02.082
但问题是，我们看不到这一点，因为我们
But the problem is,
we don't get to see that because we

254
00:13:02.082 --> 00:13:06.849
看不到存储在这里的代码乘以2。
don't get to see visually that code
multiplied by 2 stored over here.

255
00:13:06.849 --> 00:13:12.421
所以我们必须像 Dan 那样，回到上面，但是 JavaScript 没有做到这一点。
So we have to visually as Dan did, go back
up, but JavaScript is not doing that.

256
00:13:12.421 --> 00:13:15.701
它对创建功能没有兴趣。
It has no interest in createFunction.

257
00:13:15.701 --> 00:13:19.568
但是要从视觉上弄清楚如何做到这一点是非常困惑的
But it's pretty doubly confusing
that visually to figure out how

258
00:13:19.568 --> 00:13:23.871
如果 generatedFunc 正在工作，我们必须返回到 createFunction。
the generatedFunc is working,
we have to go back into createFunction.

259
00:13:23.871 --> 00:13:27.658
但只是从我们的角度来看，我们的开发者来看,
But only in terms of our perspective,
our developer looking at it,

260
00:13:27.658 --> 00:13:29.394
不是这样做的。
JavaScript is not doing that.

261
00:13:29.394 --> 00:13:32.663
好的，干得好，丹，没错。
Okay, so well done to Dan, exactly.

262
00:13:32.663 --> 00:13:37.956
现在我们来做数字2，也就是3 × 2，也就是6和
Let's now do number 2,
which is 3 by 2 which is 6 and

263
00:13:37.956 --> 00:13:41.078
我们把它归结为结果。
we return that out into result.

264
00:13:41.078 --> 00:13:46.088
所以它是评价结果转化为结果。
So it's the evaluated result into result.

265
00:13:46.088 --> 00:13:47.908
就是这样。
And there it is.

266
00:13:47.908 --> 00:13:52.065
哇，我们一开始为什么要这么做？
Wow, why did we do all of
this in the first place?

267
00:13:52.065 --> 00:13:56.415
现在我们来讨论一下,
Let's have thumbs over now on
what fundamentally people,

268
00:13:56.415 --> 00:14:01.984
我向你保证这不是我能理解的那种,
I promise you this isn't one of the ones
where you're like I roughly got it,

269
00:14:01.984 --> 00:14:06.702
这是任务的关键部分，所以没关系。
this is the mission-critical
part of closure, so it's okay.

270
00:14:06.702 --> 00:14:08.748
这也不是一件简单的事情。
It's also not like, this is an easy thing.

271
00:14:08.748 --> 00:14:12.466
我向你保证，我已经看到太多有十年经验的开发人员没有
I promise you, I've seen too many
developers with ten years' experience not

272
00:14:12.466 --> 00:14:15.410
在这里真的有执行的精确度，好吗？
really have the precision of
the execution down here, okay?

273
00:14:15.410 --> 00:14:17.722
你把我弄糊涂了，我明白了吗，澄清一下？
You lost me, I'm clear, clarifications?

274
00:14:17.722 --> 00:14:20.706
所有人，大拇指出来，我向你们保证，这是很好的澄清这一点。
Everybody, thumbs out, I promise you,
it's good to have clarifications on this.

275
00:14:22.631 --> 00:14:27.259
威尔 · 森特斯: 好吧，答应我，好吧，答应我，答应我？
&gt;&gt; Will Sentance: Okay, promise,
okay, all right promise, promise?

276
00:14:27.259 --> 00:14:29.135
托德: (笑)威尔 · 森坦斯: 好吧，那么
&gt;&gt; Todd: [LAUGH]
&gt;&gt; Will Sentance: All right, so

277
00:14:29.135 --> 00:14:34.209
我要说的是，为什么我保存了一个很好的语义
one thing I will say is this,
why did I save a nicely semantically that

278
00:14:34.209 --> 00:14:39.813
意味着有意义的函数命名在这里，另一个函数,
means kind of meaningfully named
function inside there another function,

279
00:14:39.813 --> 00:14:45.614
然后把它退回去，给它一个很坏的名字，然后在全球范围内使用？
only to then return it out, giving it
a really bad name out and use it globally?

280
00:14:45.614 --> 00:14:47.265
人们只是想在全球范围内找到它。
One will just to find it globally.

281
00:14:47.265 --> 00:14:49.885
我可能已经这样做了。
What I possibly have
done it this way round.

282
00:14:49.885 --> 00:14:52.815
会把人变成。
Is gonna turn out people.

283
00:14:52.815 --> 00:14:59.225
保存一个函数，声明在执行中存储一个函数。
That, saving a function, declaring
storing a function inside the execution.

284
00:14:59.225 --> 00:15:03.075
在本地内存中运行另一个保存函数的上下文
Context of running another functions
of saving inside its local memory

285
00:15:03.075 --> 00:15:04.561
在另一个函数中。
inside another function.

286
00:15:04.561 --> 00:15:09.557
当该函数返回时，它将获得最强大的
When that function gets returned out,
it gets the most powerful

287
00:15:09.557 --> 00:15:14.101
我们可以要求 JavaScript 的属性加值特性。
property bonus feature of
JavaScript that we can ask for.
