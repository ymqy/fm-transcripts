WEBVTT

1
00:00:00.000 --> 00:00:01.000
威尔 · 森坦斯: 请讲，马克。
&gt;&gt; Will Sentance: Go ahead Mark.

2
00:00:01.000 --> 00:00:06.296
Mark: 所以，就 JavaScript 而言，函数已经完成了。
&gt;&gt; Mark: So, as far as JavaScript
is concerned, the function is done.

3
00:00:06.296 --> 00:00:06.854
所以，它朝着什么方向
So, that it's headed off for what

4
00:00:06.854 --> 00:00:07.464
我们说的是-威尔 · 森坦斯: 哪个函数？
we're talking about-
&gt;&gt; Will Sentance: Which function?

5
00:00:07.464 --> 00:00:11.265
马克: 打印，对不起，设定时间。
&gt;&gt; Mark: Print, I'm sorry, set time out.

6
00:00:11.265 --> 00:00:11.904
威尔 · 森特斯: 设定时间，是的。
&gt;&gt; Will Sentance: Set time out, yes.

7
00:00:11.904 --> 00:00:16.518
或者在我们的外观之后，我们的功能触发网页浏览器的东西,
Or after our facade, our function that
triggers stuff in the web browser,

8
00:00:16.518 --> 00:00:17.408
是的，是的。
yeah, yeah.

9
00:00:17.408 --> 00:00:22.350
网页浏览器会直接影响堆栈
&gt;&gt; Mark: The web browser then is
directly affecting the stack at

10
00:00:22.350 --> 00:00:25.234
一个晚些的日期-[声音]在一些-威尔森塔斯: 那似乎
a later date- [SOUND] In some-
&gt;&gt; Will Sentance: That seems

11
00:00:25.234 --> 00:00:26.489
很疯狂，对吧？
insane, right?

12
00:00:26.489 --> 00:00:31.067
马克: 是的，这看起来很奇怪，如果堆栈里有东西怎么办？
&gt;&gt; Mark: Yeah, that seems strange and
what if the stack has got stuff in it?

13
00:00:31.067 --> 00:00:33.423
威尔 · 森特斯: 马蒂说所有的调用堆栈,
&gt;&gt; Will Sentance: And so
Marty is saying all of the call stack,

14
00:00:33.423 --> 00:00:35.332
如果我们运行一个函数,
what if we're running a function,

15
00:00:35.332 --> 00:00:39.299
这个函数是不是只是在 JavaScript 中重新运行了一下？
does this- This function is only
just rock up back in JavaScript?

16
00:00:39.299 --> 00:00:40.310
这不可能。
That can't be right.

17
00:00:41.750 --> 00:00:43.520
是的，布莱登。
Yeah, Braden.

18
00:00:43.520 --> 00:00:45.319
布雷顿: 那么零毫秒的例子呢？
&gt;&gt; Braydon: What about
the zero millisecond example?

19
00:00:45.319 --> 00:00:48.009
布雷登: 那个人在哪里? 威尔 · 森坦斯: 是的，等一下。
&gt;&gt; Braydon: Where did that one-
&gt;&gt; Will Sentance: Yeah, hold on.

20
00:00:48.009 --> 00:00:50.240
零毫秒怎么样？
What about zero milliseconds?

21
00:00:50.240 --> 00:00:53.731
为什么函数不直接到这里
Why did the function not
just come out into here and

22
00:00:53.731 --> 00:00:56.402
然后直接回家跑掉？
then come straight back home and run?

23
00:00:56.402 --> 00:00:57.701
问得好，布莱登，杰森？
Great question Braden, Jason?

24
00:00:57.701 --> 00:01:00.493
布雷顿: 对不起。
&gt;&gt; Braydon: Excuse me.

25
00:01:00.493 --> 00:01:05.340
当我们转移它时，printHello 函数是设置时间和
The printHello function,
when we transfer it, is the set time and

26
00:01:05.340 --> 00:01:10.480
我不记得实现的方法了，是设置超时记得这样的位
I don't remember the implementation,
is set timeout memorized so the bits that

27
00:01:10.480 --> 00:01:16.010
编写 printHello，它们存储在我们会说这是 V8执行上下文吗？
make up printHello, are they stored in
we'll say it's the V8 execution context?

28
00:01:16.010 --> 00:01:18.852
威尔 · 森特斯: 所以我们在这里暗示一些事情。
&gt;&gt; Will Sentance: So
here we're hinting at something around.

29
00:01:18.852 --> 00:01:25.156
等等，这个 printHello 函数能够保持它周围的任何状态吗？
Hold on, does that printHello function
get to hold onto any state around it?

30
00:01:25.156 --> 00:01:30.094
假设它需要使用周围的其他数据，那么这些数据会被保存吗？
Suppose it needs to use some other data
around it, does that data get held onto?

31
00:01:30.094 --> 00:01:31.548
那么，你认为这些数据是从哪里来的呢？
Well, where do you think that
data gets held onto, people?

32
00:01:31.548 --> 00:01:33.320
在哪里？
In the?

33
00:01:33.320 --> 00:01:34.652
布雷顿: 背包 威尔 · 森特斯: 在背包里,
&gt;&gt; Braydon: Backpack.
&gt;&gt; Will Sentance: In the backpack,

34
00:01:34.652 --> 00:01:35.293
没错。
exactly.

35
00:01:35.293 --> 00:01:38.408
传播，传播。
Spreading, spreading.

36
00:01:38.408 --> 00:01:40.703
布雷登: 便条还是威尔 · 森特斯: 那东西留在里面
&gt;&gt; Braydon: The note or-
&gt;&gt; Will Sentance: That thing stays in

37
00:01:40.703 --> 00:01:44.450
这是一个关于它存储在 JavaScript 中的地方的引用。
JavaScript, this is a reference back
to where it's stored in JavaScript.

38
00:01:44.450 --> 00:01:45.390
是的，当然。
Yeah, absolutely.

39
00:01:45.390 --> 00:01:49.314
是的，是的，printHello 函数并没有被复制到网页浏览器中。
Yeah, yeah, the printHello function is
not sort of copied into the web browser.

40
00:01:49.314 --> 00:01:51.551
这是一个链接到它最初保存的地方,
It's a link back to where
it's originally saved,

41
00:01:51.551 --> 00:01:53.640
也许包括所有周围的数据。
including maybe all
surrounding data as well.

42
00:01:53.640 --> 00:01:54.514
好了，各位。
All right people.

43
00:01:54.514 --> 00:01:59.628
所以，很明显，我们这里有一个问题，我们需要
So, clearly, we have a problem
here where we need to have

44
00:01:59.628 --> 00:02:04.319
某种规则，当这个非凡的另一个
some sort of rules for
when this extraordinary other

45
00:02:04.319 --> 00:02:09.639
在 JavaScript 中使用这个函数。
world is allowing this
function back into JavaScript.

46
00:02:09.639 --> 00:02:12.819
布拉登暗示了这一点，马克暗示了这一点。
Braden hinted at this,
Mark hinted at this.

47
00:02:12.819 --> 00:02:15.800
如果堆栈上还有其他代码怎么办？
What if I've got other
code on the stack here?

48
00:02:15.800 --> 00:02:20.719
顺便说一下，如果我有一百万个控制台日志怎么办？
By the way, what if I've got
maybe a million console logs?

49
00:02:21.770 --> 00:02:24.240
这个函数什么时候被允许返回？
When is this function allowed back in?

50
00:02:24.240 --> 00:02:26.270
谈论不可预知的语言，任何时候都可能？
Talk about unpredictable language,
any time maybe?

51
00:02:28.110 --> 00:02:32.370
如果我们现在与 JavaScript 之外的世界进行交互,
It turns out given we're interacting
with a world outside of JavaScript now,

52
00:02:32.370 --> 00:02:34.659
我们需要一些非常非常严格的规定。
we're gonna need some really,
really strict rules.

53
00:02:34.659 --> 00:02:36.490
他们真的很严格。
And they are really strict.

54
00:02:36.490 --> 00:02:39.115
但是它让我们的代码变得超级可预测。
But it makes our code super predictable.

55
00:02:39.115 --> 00:02:42.778
如果我们知道这些核心规则，我们就能从根本上知道它的行为。
We fundamentally know how it's gonna
behave if we know these core rules.

56
00:02:42.778 --> 00:02:44.581
我们会看到这个代码。
So we're gonna see this code here.

57
00:02:44.581 --> 00:02:47.129
我们有一个函数 printHello，一个函数 blockFor1Sec。
We've got a function printHello,
a function blockFor1Sec.

58
00:02:48.569 --> 00:02:50.716
一秒钟的阻塞线程。
A block thread for one second.

59
00:02:50.716 --> 00:02:54.520
它是怎么做到的呢，因为任何 JavaScript 中的缓慢任务,
How's it gonna do that because
any slow task in JavaScript,

60
00:02:54.520 --> 00:02:57.050
它总是把它扔到网页浏览器的功能里。
it'll always throw it out
to the web browser feature.

61
00:02:57.050 --> 00:02:58.510
如果我们想和互联网对话,
If we want to speak to the Internet,

62
00:02:58.510 --> 00:03:00.836
我们要在网页浏览器的后台进行。
we're gonna do it in
the background of the web browser.

63
00:03:00.836 --> 00:03:03.710
如果我们要做一个计时器，我们要在后台的网页浏览器，所以
If we wanna do a timer, we're gonna do it
in the background of the web browser so

64
00:03:03.710 --> 00:03:07.789
我们不会阻止任何单线程语言的代码运行。
we don't block any further code in our
single threaded language from running.

65
00:03:07.789 --> 00:03:11.759
那么我们怎样才能真正阻止 JavaScript 运行
So how could we actually block
JavaScript from running code for

66
00:03:11.759 --> 00:03:16.170
比如，有没有人执行一个任务，结果阻止了代码的运行？
like a- have anyone does a task that
it ends up blocking code from running?

67
00:03:16.170 --> 00:03:17.340
是的，彼得，说吧。
Yeah, Peter, go ahead.

68
00:03:17.340 --> 00:03:18.319
彼得: 只要运行 for 循环。
&gt;&gt; Peter: Just run a for loop.

69
00:03:18.319 --> 00:03:19.997
威尔 · 森特斯: 对于循环，杰森，你也要说同样的话吗？
&gt;&gt; Will Sentance: For loop, Jason,
you're gonna say the same thing?

70
00:03:19.997 --> 00:03:21.646
彼得: 是的，对于循环，计时器，有事情要做。
&gt;&gt; Peter: Yeah, for loop,
timer, something to occupy.

71
00:03:21.646 --> 00:03:24.930
威尔: 嗯，不是计时器，因为计时器会在这里发生。
&gt;&gt; Will Sentance: Well, not a timer,
cuz a timer's gonna happen down here.

72
00:03:26.379 --> 00:03:31.599
所以，一个 for 循环正如你所说的那样，Jason。
So, a for loop is exactly right
as you say as well, Jason.

73
00:03:31.599 --> 00:03:34.319
它会阻塞线程一秒钟，所以可能是一个 for
It's gonna block the thread for
one second, so maybe like a for

74
00:03:34.319 --> 00:03:37.300
循环添加我不知道，我需要找出这个。
loop adding I don't know,
I need to find this out.

75
00:03:37.300 --> 00:03:40.759
也许在一个数组中加入三百万个元素,
Maybe adding like three
million elements to an array,

76
00:03:40.759 --> 00:03:42.698
大概需要一秒钟。
that's gonna take maybe about a second.

77
00:03:42.698 --> 00:03:44.423
我不会在这里写代码，但是
I'm not gonna write the code out here but

78
00:03:44.423 --> 00:03:47.170
只要知道这就是那种黑盒子的功能。
just know that that's in that
kind of black box function there.

79
00:03:47.170 --> 00:03:51.896
如果我们要运行它，它会坐在调用堆栈上做——因为你不能这样做
If we were to run it, it's gonna sit on
the call stack doing- because you can't do

80
00:03:51.896 --> 00:03:55.747
一个长任务，但你可以做许多小的短任务。
one long task in JavaScript, but
you can do many tiny short tasks.

81
00:03:55.747 --> 00:03:58.409
这就是我们如何阻止它的方法。
And that's how we can block it.

82
00:03:58.409 --> 00:04:01.848
然后我们可以设定暂停顺便说一句,
Then we're gonna be able to set timeout,
we're already by the way,

83
00:04:01.848 --> 00:04:05.580
对于 Braden 0毫秒等待并不陌生。
not unfamiliar with that with
Braden zero millisecond wait.

84
00:04:05.580 --> 00:04:07.740
然后我们给我们的街区打个电话。
Then we're gonna call our block for
one second.

85
00:04:07.740 --> 00:04:08.729
然后我们会先打电话。
And then we're gonna call first.

86
00:04:08.729 --> 00:04:10.832
现在我当然假设,
Now I assume, of course,

87
00:04:10.832 --> 00:04:16.002
printhello 会在0毫秒时运行。
the printHello is gonna run
immediately at zero milliseconds.

88
00:04:16.002 --> 00:04:20.577
我们需要一些基本的规则
Mm-hm, we're gonna need to have
some pretty fundamental rules

89
00:04:20.577 --> 00:04:22.829
我们的代码将如何运行
about how our code is going to run
