WEBVTT

1
00:00:00.190 --> 00:00:00.854
威尔 · 森特斯: 好了，伙计们。
&gt;&gt; Will Sentance: Okay, folks.

2
00:00:00.854 --> 00:00:06.139
所以我们在这里重新构造这个函数，这个函数接受一个数组。
So we are back building out this function
here that's gonna take in an array.

3
00:00:06.139 --> 00:00:10.086
复制右边，鲍勃先生，它看起来是一个数组，1,2,3在这里，和
Copy right Mr. Bob it was take in an array
by the looks of it, 1, 2, 3 here, and

4
00:00:10.086 --> 00:00:14.016
创建一个新数组，然后循环遍历输入数组。
create a new array, is then gonna iterate
through loop through the input array.

5
00:00:14.016 --> 00:00:18.768
从除两个以外的每个元素模式，用所有填充输出数组
Take each element mode from other than by
two, fill up the output array with all

6
00:00:18.768 --> 00:00:23.303
这些双倍的值和返回的年金填写的数组。
those doubled values and return out
that annuity filled out for the array.

7
00:00:23.303 --> 00:00:26.658
好吧，这是我们的工作，像这样的任务。
Okay, it's something we do,
some sort of task like this.

8
00:00:26.658 --> 00:00:29.882
我们要把它做出来，画出来，然后我们会看到另一个函数
We're gonna build it out, diagram it out,
but we're then gonna see another function

9
00:00:29.882 --> 00:00:32.237
我要试探一下我的最佳位置。
that's going to look,
I'm gonna sound out my best position.

10
00:00:32.237 --> 00:00:35.840
我们会看到另一个函数，这就是为什么我不喜欢讲台。
We're gonna see another function that's,
that's why I don't like podiums.

11
00:00:35.840 --> 00:00:40.747
我们将会看到另一个函数，看起来特别令人沮丧
We're gonna see another function that's
gonna look particularly frustratingly

12
00:00:40.747 --> 00:00:41.384
相似的。
similar.

13
00:00:41.384 --> 00:00:43.460
然而，我们还是要从头开始建造它。
And yet, we're gonna build
it out from scratch, again.

14
00:00:43.460 --> 00:00:48.792
好吧从我们的朋友 Adam 开始。
All right,
let's start with our friend Adam.

15
00:00:48.792 --> 00:00:50.283
开始吧亚当。
Here we go, Adam.

16
00:00:50.283 --> 00:00:51.054
把它拿走。
Take it away.

17
00:00:51.054 --> 00:00:52.582
让我们从这里开始学习我们的代码。
Let's start walking through our code here.

18
00:00:52.582 --> 00:00:55.593
我们在做什么，亚当，在我们代码的第一行？
What are we doing, Adam,
in line one of our code here?

19
00:00:55.593 --> 00:01:00.332
我们在全球记忆中存储了什么，亚当？
What are we storing into Global Memory,
Adam?

20
00:01:00.332 --> 00:01:04.322
扬声器2: 是的，功能定义与标签复印机 a 和乘-
&gt;&gt; Speaker 2: Yeah, function definition
with the label copier A and multiply-

21
00:01:04.322 --> 00:01:05.769
威尔 · 森特斯: 非常好，是的,
&gt;&gt; Will Sentance: Very nice, yeah,

22
00:01:05.769 --> 00:01:10.753
函数定义的标签复制数组，要尝试和
the function definition with
the label copy array, gonna try and

23
00:01:10.753 --> 00:01:15.477
保持这个整齐，复制数组，乘以2，很好。
keep this neat, copy array and
multiply by two, excellent.

24
00:01:15.477 --> 00:01:19.899
保存了整个函数定义，就是这样。
The whole function definition is saved,
there we go.

25
00:01:19.899 --> 00:01:22.700
就是这样，复制数组，乘以2，就保存了。
So, there it is, copy array and
multiply by two, it's saved.

26
00:01:22.700 --> 00:01:28.242
现在我们来看看 Matt，我们下一行 JavaScript 代码是什么,
Let's hit up Matt now, with what is our
next line that gets done by JavaScript,

27
00:01:28.242 --> 00:01:30.582
是由 JavaScript 执行的，Matt？
executed by JavaScript, Matt?

28
00:01:30.582 --> 00:01:32.972
我们要定义数组的常数。
&gt;&gt; Speaker 2: We're gonna define
the constant of my array.

29
00:01:32.972 --> 00:01:34.384
威尔 · 森塔斯: 太美了。 谢谢你，马特。
&gt;&gt; Will Sentance: Beautiful.
Thank you, Matt.

30
00:01:34.384 --> 00:01:36.251
它有什么价值？
It's got what value?

31
00:01:36.251 --> 00:01:37.286
演讲者2: 一个123的数组。
&gt;&gt; Speaker 2: An array of 123.

32
00:01:37.286 --> 00:01:38.448
威尔 · 森塔斯: 太美了。 谢谢你，马特。
&gt;&gt; Will Sentance: Beautiful.
Thank you, Matt.

33
00:01:38.448 --> 00:01:40.629
现在我们到了下一个，马特，继续。
Now we hit the next Matt, keep going.

34
00:01:40.629 --> 00:01:43.222
现在我们来定义结果常数。
Now we're gonna define
the constant of result.

35
00:01:43.222 --> 00:01:46.531
太好了，我真的很喜欢 Matt 大声自信的声音。
Excellent, I'm really enjoying Matt's
loud and confident voice here.

36
00:01:46.531 --> 00:01:48.021
所以我们要继续和马特在一起。
So we're gonna keep staying with Matt.

37
00:01:48.021 --> 00:01:51.625
马特，现在还没有初始化，我们得去做什么？
Matt, it's uninitialized for now,
well we've got to go and do what?

38
00:01:51.625 --> 00:01:52.609
演讲者2: 执行情境。
&gt;&gt; Speaker 2: Execution context.

39
00:01:52.609 --> 00:01:54.765
执行上下文执行什么？
&gt;&gt; Will Sentance: Execution
context to execute what?

40
00:01:54.765 --> 00:01:56.128
复制数组，乘以2。
&gt;&gt; Speaker 2: Copy array and
multiply by two.

41
00:01:56.128 --> 00:02:01.730
复制数组并乘以2,
&gt;&gt; Will Sentance: Copy array and
multiply by two,

42
00:02:01.730 --> 00:02:07.132
就是这样，乘以2。
there it is, multiply by two.

43
00:02:07.132 --> 00:02:09.800
我们要把什么作为我们的论点？
And we're gonna pass in
what as our argument?

44
00:02:09.800 --> 00:02:11.923
演讲者2: 我的阵列 威尔 · 森特斯: 是的，也就是一，二,
&gt;&gt; Speaker 2: My array.
&gt;&gt; Will Sentance: Yeah, which is one, two,

45
00:02:11.923 --> 00:02:14.192
三，数组一，二，三。
three, the array one, two, three.

46
00:02:14.192 --> 00:02:18.403
让我们创建一个全新的-扬声器3: 执行上下文。
Let's create that brand new-
&gt;&gt; Speaker 3: Execution context.

47
00:02:18.403 --> 00:02:19.599
威尔 · 森特斯: 干得好，伙计们。
&gt;&gt; Will Sentance: Well done, people.

48
00:02:19.599 --> 00:02:24.006
而我只是得到我的优势在这里。
While I just get my edge here.

49
00:02:29.710 --> 00:02:35.183
威尔 · 森塔斯: 好的，这是执行上下文，这是。
&gt;&gt; Will Sentance: Okay, there is
the execution context, here it is.

50
00:02:35.183 --> 00:02:38.194
让我们把调用堆栈，我们很好。
Let's just put on the call stack,
we're good.

51
00:02:38.194 --> 00:02:39.968
我们在录这个版本，对吧？
We're recording this version,
right, aren't we?

52
00:02:39.968 --> 00:02:44.162
所以我们要把我们所有的东西都放得格外完整。
So we're gonna be extra complete
in all our, all our stuff.

53
00:02:44.162 --> 00:02:46.704
为了子孙后代。
So that for posterity.

54
00:02:46.704 --> 00:02:50.639
我们有，是的，复制，数组。
We have, yeah, copy, array.

55
00:02:50.639 --> 00:02:56.341
乘以2，我们正在运行它，它在我们的调用堆栈上。
Multiply by 2, we're running it,
it's on our call stack.

56
00:02:56.341 --> 00:02:58.335
我保证，我们总是有全球化的，第二次进攻。
We always have global,
come to second down, I promise.

57
00:02:58.335 --> 00:03:01.091
我们总是有全球性的，我做错什么了吗？
We always have global,
did I get anything wrong?

58
00:03:01.091 --> 00:03:03.548
演讲者2: 不，你刚刚明白了，我要问的是全球化。
&gt;&gt; Speaker 2: No, you just got it,
I was gonna ask about the global.

59
00:03:03.548 --> 00:03:06.919
威尔 · 森坦斯: 好极了，全球化在那里，我刚刚拿到了,
&gt;&gt; Will Sentance: Excellent,
global's there on the, I did just get it,

60
00:03:06.919 --> 00:03:10.169
很好，[笑]正确答案，做得好。
excellent, [LAUGH] correct answer,
well done well.

61
00:03:10.169 --> 00:03:13.246
现在，这是我们的执行环境。
And now, here's our execution context.

62
00:03:13.246 --> 00:03:16.319
执行线程在左手边一行一行地通过代码
With the thread of execution going through
the code line by line on the left hand

63
00:03:16.319 --> 00:03:18.927
我不会总是写出每一行代码
side here, I'm not gonna always
write out every line of code, but

64
00:03:18.927 --> 00:03:21.134
我们大概要经历一下死刑的过程。
roughly we're going through
the thread of execution.

65
00:03:21.134 --> 00:03:26.462
运行代码，这是我们的本地内存。
Running the code, and
then here's our local memory.

66
00:03:26.462 --> 00:03:27.204
马特，交还给你。
Matt, back to you.

67
00:03:27.204 --> 00:03:29.004
在我们当地的记忆中，第一件事是什么？
What is the first thing
in our local memory?

68
00:03:29.004 --> 00:03:31.227
我们马上要在里面储存什么？
What are we storing in there immediately?

69
00:03:31.227 --> 00:03:32.335
我们的数组参数。
&gt;&gt; Speaker 2: Our array parameter.

70
00:03:32.335 --> 00:03:35.768
是的，用什么论点？
&gt;&gt; Will Sentance: Yes,
with assigned what argument?

71
00:03:35.768 --> 00:03:36.432
讲者二: 一二三。
&gt;&gt; Speaker 2: One two three.

72
00:03:36.432 --> 00:03:37.490
威尔 · 森特斯: 是的，一二三，就是这样。
&gt;&gt; Will Sentance: Yep,
one two three, there it is.

73
00:03:37.490 --> 00:03:40.979
我的数组拍摄，填充一个数组，一二三。
My array shot in,
fills an array, one two three.

74
00:03:40.979 --> 00:03:42.728
那么，丹，我们接下来要唱哪一行？
Then Dan, we hit what line next?

75
00:03:42.728 --> 00:03:45.093
现在我们来看函数的主体。
We hit the body of the function now.

76
00:03:45.093 --> 00:03:47.216
谁说要做什么？
Which says to do what?

77
00:03:47.216 --> 00:03:51.501
演讲者2: 我们想创建一个新的常量输出。
&gt;&gt; Speaker 2: We want to
create a new constant output.

78
00:03:51.501 --> 00:03:53.022
威尔 · 森塔斯: 他说得对，干得好，完全正确。
&gt;&gt; Will Sentance: He's spot on,
well done, exactly.

79
00:03:53.022 --> 00:03:54.284
分配一个什么？
And assign a what?

80
00:03:54.284 --> 00:03:55.883
说话人2: 一个空数组。
&gt;&gt; Speaker 2: A empty array.

81
00:03:55.883 --> 00:03:58.375
威尔 · 森塔斯: 丹说得太好了。
&gt;&gt; Will Sentance: Excellent from Dan.

82
00:03:58.375 --> 00:04:01.111
现在我们点击 for 循环。
Now we hit our for loop.

83
00:04:01.111 --> 00:04:02.876
就是这个，for loop。
Here it is, for loop.

84
00:04:02.876 --> 00:04:05.975
我们不会深入到你怎么知道它是声明的，但是
We're not gonna go into the intricacies
of how you know it's declared but

85
00:04:05.975 --> 00:04:08.876
我们知道它的身体之间的位的花括号这一行是
we know that the body of it the bit
between the curly braces that line is

86
00:04:08.876 --> 00:04:10.233
要做 x 次。
gonna be done X number of times.

87
00:04:10.233 --> 00:04:11.528
多少次？
How many number of times?

88
00:04:11.528 --> 00:04:14.978
只要 i 小于数组的长度，我看到,
As long as I is less than the length
of the array, I saw zero,

89
00:04:14.978 --> 00:04:19.682
数组的长度是3，我们每次都要增加 i。
the length of the array's three, we're
gonna increment increase I each time.

90
00:04:19.682 --> 00:04:23.529
然后我们将运行这条线，只要我继续减少或
And then we're going to run that line
as long as I continues to be less or

91
00:04:23.529 --> 00:04:24.769
零继续是,
zero continues to be,

92
00:04:24.769 --> 00:04:29.161
我可以做到小于数组的长度，所以应该是三倍。
I can do to be less than the length of
the array, so that's gonna be three times.

93
00:04:29.161 --> 00:04:33.024
我们会看到它在文件夹的正文中发挥作用。
We're gonna see it play out into
the body of the folder we go.

94
00:04:33.024 --> 00:04:36.840
我把这些放在左边,
I'm going to put these on
the left-hand side here,

95
00:04:36.840 --> 00:04:41.538
不是复制它们，只是为了更容易地使用它们。
not copying them, but just so
we can work with them more easily.

96
00:04:41.538 --> 00:04:45.636
我们有数组123和
We have our array one two three and

97
00:04:45.636 --> 00:04:50.324
我们的输出是空数组 Kayla？
our output is an empty array, Kayla?

98
00:04:50.324 --> 00:04:51.933
让我们来看看 for 循环的主体。
Let's hit the body of the for loop.

99
00:04:51.933 --> 00:04:56.159
数组位置0是什么，凯拉？
Array position zero is what, Kayla?

100
00:04:56.159 --> 00:04:56.923
讲者4: 一。
&gt;&gt; Speaker 4: One.

101
00:04:56.923 --> 00:05:01.961
威尔 · 森塔斯: 一，我们选择一个，然后用它做什么，凯拉？
&gt;&gt; Will Sentance: One, we take the one and
we do what with it, Kayla?

102
00:05:01.961 --> 00:05:03.819
说话人4: 我们把它乘以2-Will Sentance: x 当我们得到2时，我们就乘以
&gt;&gt; Speaker 4: We multiply it by 2-
&gt;&gt; Will Sentance: x when we get 2 we do

103
00:05:03.819 --> 00:05:05.064
怎么回事 Kayla？
what with that, Kayla?

104
00:05:05.064 --> 00:05:06.293
音箱4: 我们把它推入输出阵列。
&gt;&gt; Speaker 4: We push it
into the output array.

105
00:05:06.293 --> 00:05:09.088
威尔 · 森坦斯: 我们推入输出数组，它在那里。
&gt;&gt; Will Sentance: We push into
the output array, there it is.

106
00:05:09.088 --> 00:05:11.814
第二，漂亮，干得好。
Two, beautiful, good job.

107
00:05:11.814 --> 00:05:12.643
凯拉，太棒了。
Kayla, excellent.

108
00:05:12.643 --> 00:05:14.922
下一个凯拉，这次我的价值是什么？
Next one Kayla,
this time I's value is what?

109
00:05:14.922 --> 00:05:16.593
讲者4:2。
&gt;&gt; Speaker 4: 2.

110
00:05:16.593 --> 00:05:20.062
威尔 · 森特斯: 这就对了，别担心，我的价值是下次。
&gt;&gt; Will Sentance: There you go
don't worry, i's value next time.

111
00:05:20.062 --> 00:05:21.757
讲者4:1 威尔 · 森特斯: 不要担心，人们,
&gt;&gt; Speaker 4: 1.
&gt;&gt; Will Sentance: Don't worry people,

112
00:05:21.757 --> 00:05:24.940
在我的新火锅里，我实际上只是迭代了一下
in my new hot pot I literally
only iterate to section make

113
00:05:24.940 --> 00:05:28.146
人们每次都会犯这种错误。
people consistently get that
wrong every single time.

114
00:05:28.146 --> 00:05:29.834
因为归根结底，这是一只蝙蝠。
Because in the end, this is a bat.

115
00:05:29.834 --> 00:05:32.014
这是一个过时的数据界面。
It's a dated interface for data.

116
00:05:32.014 --> 00:05:34.867
但是如果我有一个数据集合，我并不真正关心索引的位置
But if I've got a collection of data, I
don't really care about the index position

117
00:05:34.867 --> 00:05:36.725
大多数时候，我只是想得到下一个元素。
most of the time,
I just want to get the next element.

118
00:05:36.725 --> 00:05:40.100
很明显，这里有一个过时的界面，用来访问数据。
And there's obviously a dated
interface dated way of accessing data.

119
00:05:40.100 --> 00:05:44.375
我把我的数据当作一个不合时宜的文件，这样更好。
I take my data like a anachronistic
document any better is it.

120
00:05:44.375 --> 00:05:48.408
好吧，一个老式的，我想说，就像一个不完美的设计，或者,
[LAUGH] Okay, an old fashioned I'd say,
like a not perfectly designed, or,

121
00:05:48.408 --> 00:05:52.504
因为我们大部分时间都不在乎索引,
because we don't really care about
the index most of the time we're using it,

122
00:05:52.504 --> 00:05:54.139
我们只是想得到元素。
we just wanna get the element.

123
00:05:54.139 --> 00:05:57.487
现在有了新的方法，我们仍然坚持传统的方法。
And there are new ways of doing it, we're
sticking with the traditional way here.

124
00:05:57.487 --> 00:06:00.625
这就是我要说的，我们不会经历
That's what I was gonna say,
we're not gonna go through the for

125
00:06:00.625 --> 00:06:04.130
循环的过程，但这是一个有趣的数据接口。
loop's sort of journey, but
it is an interesting interface for data.

126
00:06:04.130 --> 00:06:08.235
Kayla 向我们展示了为什么,
And Kayla sort of showed us there why,
ultimately,

127
00:06:08.235 --> 00:06:12.725
每次像凯拉这样经验丰富的工程师。
seasoned engineers every time
like Kayla will still go.

128
00:06:12.725 --> 00:06:13.769
不管怎样，你明白我的意思。
Anyway, you get the point.

129
00:06:13.769 --> 00:06:17.805
就是这样，位置1，到达2，拿着它,
So there it is, position 1,
get to 2, take it,

130
00:06:17.805 --> 00:06:21.571
乘以2得到4，把它推到输出。
multiplied by 2 to get 4,
push it to output.

131
00:06:21.571 --> 00:06:23.478
现在我们知道了。
There we have it.

132
00:06:23.478 --> 00:06:24.853
所以对于循环，我们再做一次。
So for loops, we do it again.

133
00:06:24.853 --> 00:06:27.533
好了，2,4,6。
There we go, 2, 4, 6.

134
00:06:27.533 --> 00:06:32.533
现在最后一行 Kayla，复制数组乘以2表示做什么？
And now the final line Kayla, of copy
array multiplied by 2 says to do what?

135
00:06:32.533 --> 00:06:34.100
音箱4: 我们返回输出数组。
&gt;&gt; Speaker 4: We return the output array.

136
00:06:34.100 --> 00:06:39.093
是的，我们将输出的值返回到全局常量,
&gt;&gt; Will Sentance: Yeah, we return the
value of output into what global constant,

137
00:06:39.093 --> 00:06:39.745
凯拉？
Kayla?

138
00:06:41.697 --> 00:06:42.209
讲者四: 结果。
&gt;&gt; Speaker 4: Result.

139
00:06:42.209 --> 00:06:43.699
威尔 · 句子: 结果，很好。
&gt;&gt; Will Sentance: Into result, well on.

140
00:06:43.699 --> 00:06:45.557
就是这样，伙计们。
And there it is, folk.

141
00:06:45.557 --> 00:06:49.944
我们接受了1,2,3，我们运行了 copyArrayMultipleBy2,
We took in one, two, three, we ran
copyArrayMultipleBy2 on that argument,

142
00:06:49.944 --> 00:06:51.906
我们创建了一个全新的数组
we've created a brand new array and

143
00:06:51.906 --> 00:06:55.326
返回的数组中填充了我们的双倍元素。
returned out that array filled
in with our doubled elements.

144
00:06:55.326 --> 00:06:57.153
任务完成得很好，很好。
Good task, there we go, great.

145
00:06:57.153 --> 00:06:58.620
等一下，杰森。
One second, Jason.

146
00:06:58.620 --> 00:06:59.973
干得好，各位。
Well done, everybody.

147
00:06:59.973 --> 00:07:01.692
你喜欢这个功能。
You love this function.

148
00:07:01.692 --> 00:07:06.833
你会喜欢我的下一个功能的。
[LAUGH] You're gonna
love my next function.

149
00:07:06.833 --> 00:07:11.384
我甚至不想开始说我的下一个功能是多么令人兴奋。
I don't even wanna get started on
how exciting my next function is.

150
00:07:11.384 --> 00:07:12.151
看看这个。
Look at this one.

151
00:07:12.151 --> 00:07:17.697
它动了，动的时候就不那么引人注目了。
[LAUGH] It moved,
it's less compelling when it moves.

152
00:07:17.697 --> 00:07:21.612
好了，大家都看到这里的变化了。
Okay, everyone can see how much
it's changing here, people.

153
00:07:21.612 --> 00:07:23.271
一个字符。
One character.

154
00:07:23.271 --> 00:07:25.505
字面上的意思是一个字符，没错。
Literally one character, exactly.

155
00:07:25.505 --> 00:07:26.329
你认为什么发生了变化？
What do you think has changed?

156
00:07:26.329 --> 00:07:31.117
一切都是一样的，但我们要重建它，因为我们
Everything's the same, but we're gonna
rebuild it from scratch because we

157
00:07:31.117 --> 00:07:35.872
想要感受我们的，威尔 · 森塔斯: 肠子，可以这么说。
want to feel in our,
&gt;&gt; Will Sentance: Gut, so to speak.

158
00:07:35.872 --> 00:07:41.139
这是有问题的，必须有一个更好的方式。
That this is problematic, and
there must be a better way.
