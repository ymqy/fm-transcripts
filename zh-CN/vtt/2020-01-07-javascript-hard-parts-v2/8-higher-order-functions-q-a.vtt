WEBVTT

1
00:00:00.160 --> 00:00:03.980
说话人1: 你说当我们传递一个函数或者传递一个函数定义时,
&gt;&gt; Speaker 1: You say when we're passing a
function or passing a function definition,

2
00:00:03.980 --> 00:00:05.919
这也是一个函数引用吗？
is that also just like
a function reference?

3
00:00:05.919 --> 00:00:08.449
因为你不能改变它，它已经在内存中了？
Because you can't change it and
it's already in memory?

4
00:00:09.609 --> 00:00:11.339
威尔 · 森特斯: 是的，所以我决定是否
&gt;&gt; Will Sentance: Yeah, so
I was deciding whether or

5
00:00:11.339 --> 00:00:13.509
不包括我的额外奖励。
not to include my little bonus piece.

6
00:00:13.509 --> 00:00:15.970
我们就这么简单吧。
Let's just keep it as simple as this.

7
00:00:15.970 --> 00:00:20.109
全局中的这个数组保存在全局中。
This array here in global
is saved in global.

8
00:00:20.109 --> 00:00:23.135
然后将其解析为一个链接，返回到它保存在全局中的位置。
It is then parsed in as a link back
to where it was saved in global.

9
00:00:23.135 --> 00:00:24.905
现在我拯救全球，没有一个标签。
Now I was saving global without a label.

10
00:00:24.905 --> 00:00:29.088
它只是存在于全局中，但我们实际上解析了它的一个链接。
It was just there in global, but
we actually parse in a link to it.

11
00:00:29.088 --> 00:00:30.388
我们不会抄袭它。
We are not copying it in.

12
00:00:30.388 --> 00:00:35.109
我们正在解析，是的，一个关于它最初保存在全局内存中的位置的引用。
We're parsing, yes, a reference to where
it was initially saved in global memory.

13
00:00:35.109 --> 00:00:40.091
如果你还记得我们传入数组的早期版本，我们保存了1,
If you remember our earlier version where
we passed in my array, we saved that 1,

14
00:00:40.091 --> 00:00:44.500
2,3个数组，然后我们传回一个链接。
2, 3 array in global, and
then we just passed a link back to it.

15
00:00:44.500 --> 00:00:48.460
这就是为什么我们不想改变复制数组的内部
And that's why we don't want to
change inside of copy array and

16
00:00:48.460 --> 00:00:53.280
操作我们传入的数据，因为这会改变全局数据,
manipulate the data we pass in because
that would be changing the global data,

17
00:00:53.280 --> 00:00:56.770
没有功能就很难预测会发生什么。
which is hard to predict what's
then gonna happen without function.

18
00:00:56.770 --> 00:00:58.359
他们称之为副作用。
They call it a side effect.

19
00:00:58.359 --> 00:01:02.670
但是，在这里，我们创建一个全新的数组，每个单独的元素,
But instead, here, we create a brand new
array, and take each individual element,

20
00:01:02.670 --> 00:01:03.649
插入新的阵列。
stick it in that new array.

21
00:01:03.649 --> 00:01:07.519
我们的输入数组保持不变，保持不变。
And our input array stays unmutated,
stays unchanged.

22
00:01:07.519 --> 00:01:09.519
很好，丹，是的，继续，丹。
Nice, by Dan, yeah, go ahead, Dan.

23
00:01:09.519 --> 00:01:11.989
但是这个函数，你可以称它为函数引用，或者
&gt;&gt; Dan: But the function,
can you call it a function reference, or

24
00:01:11.989 --> 00:01:14.060
这是一个函数定义吗? ——威尔 · 森特斯: 我明白了,
is it a function definite-
&gt;&gt; Will Sentance: I see,

25
00:01:14.060 --> 00:01:16.849
是啊，我们又来了，一样的事情。
yeah, we're again, same thing here.

26
00:01:16.849 --> 00:01:18.510
就我们的功能来说,
With our function, again,

27
00:01:18.510 --> 00:01:24.739
这是一个返回原始保存的 multilyby2函数的链接。
it's a link back to the original
saved multiplyBy2 function.

28
00:01:24.739 --> 00:01:28.879
因此，任何函数、数组或对象，当它被保存时,
So any function, array, or
object, when it's saved,

29
00:01:28.879 --> 00:01:31.319
如果我们在其他地方使用它
if we ever use it anywhere else and

30
00:01:31.319 --> 00:01:35.234
链接到它，我们实际上引用了它的原始保存版本。
link to it, we're actually referring
back to its original saved version.

31
00:01:35.234 --> 00:01:37.396
Dan 说得很好，太好了。
Very nice from Dan, excellent.

32
00:01:37.396 --> 00:01:39.229
彼得? 彼得: 有点像幕后工作
Peter?
&gt;&gt; Peter: Kind of a behind the scenes

33
00:01:39.229 --> 00:01:43.620
当 for 循环运行时，它是否有自己的执行上下文？
thing, when the for loop is running, does
it kind of get its own execution context?

34
00:01:43.620 --> 00:01:46.310
威尔 · 森坦斯: 不，它有自己受保护的名称空间。
&gt;&gt; Will Sentance: No,
it gets its own protected namespace.

35
00:01:46.310 --> 00:01:50.140
也就是说如果我们用 let 来定义 i,
That is to say that if we
use let to define the i,

36
00:01:50.140 --> 00:01:56.609
我只能在那个区块范围内，也就是那个小花括号里。
that i is only available inside that block
scope, which is the little curly braces.

37
00:01:56.609 --> 00:02:00.519
但是它不是一个执行，它不是把它放在调用堆栈上。
But it is not an execution it is
not putting that on the call stack.

38
00:02:00.519 --> 00:02:05.769
它只是内存中另一个被标记名称的受保护空间。
It's just another protected space
in memory for those labeled names.

39
00:02:05.769 --> 00:02:09.009
好吧问得好。
Okay, yeah, yeah, nice question.
