WEBVTT

1
00:00:00.260 --> 00:00:02.209
这不是一个执行任务的模型。
&gt;&gt; Will Sentance: This is not
a model of jobs of execution.

2
00:00:03.209 --> 00:00:08.289
每次我们有任务要做的时候，我们必须在继续前进之前完成它。
Every single time we have a task to do,
we must finish it before we move on.

3
00:00:08.289 --> 00:00:10.442
但这会带来一个大问题。
But that's gonna pose a big problem.

4
00:00:10.442 --> 00:00:15.830
单线程，一次一个命令，并执行同步性。
Single threaded, one command at a time,
and synchronicity executed.

5
00:00:15.830 --> 00:00:19.379
这意味着在你移动到下一行之前，每一行都必须完成。
That means each line must be finished
before you move onto the next line.

6
00:00:20.570 --> 00:00:22.500
但这可能会产生一个问题。
But that might create a problem.

7
00:00:22.500 --> 00:00:25.820
如果我们有一个任务，比如对服务器说话,
What if we have a task
like speaking to a server,

8
00:00:25.820 --> 00:00:28.390
的服务器，获取新的 tweets。
to Twitter's server, to get new tweets.

9
00:00:28.390 --> 00:00:30.777
点击这里查看 Twitter 上的新消息,
To like we click here to
view new tweets on Twitter,

10
00:00:30.777 --> 00:00:33.369
它会向 Twitter 的服务器发送一条消息。
it's gonna send a message
to Twitter's server.

11
00:00:33.369 --> 00:00:37.340
关于这些信息从推特上传回来的数据,
And on those messages,
the data coming back from Twitter,

12
00:00:37.340 --> 00:00:41.929
然后想要显示新的数据，那些新的 tweets。
is then going to want to display
that new data, those new tweets.

13
00:00:41.929 --> 00:00:46.420
我们必须坐在那条线上，等待数据回来，当数据回来的时候
We've gotta sit on that line, and wait for
that data to come back, and when it comes

14
00:00:46.420 --> 00:00:49.990
最后回来，然后我们可以显示它，然后我们可以继续下一行。
back finally, then we can display it, and
then we can move on to the next line.

15
00:00:51.000 --> 00:00:53.840
但那可能需要半秒钟，可能需要更长时间,
But that could take like half a second,
it could take longer,

16
00:00:53.840 --> 00:00:59.060
在那段时间里，我们不能再运行任何代码了。
and in that time we can't run
any further code afterwards.

17
00:00:59.060 --> 00:01:00.890
这是一个严重的问题。
That's a serious problem.

18
00:01:00.890 --> 00:01:01.600
我们想要等待
We want to wait for

19
00:01:01.600 --> 00:01:05.349
将 tweets 存储在 tweets 中，而不是运行一个函数。
the tweets to be stored in tweets as
opposed to be sort of, run a function.

20
00:01:05.349 --> 00:01:06.180
让我们看看。那么,
Let's have a look.
So,

21
00:01:06.180 --> 00:01:10.989
如果你曾经运行过 get tweets 这样的函数，它会向 Twitter 发送一条消息。
if you ever run a function like get
tweets, it sends off a message to Twitter.

22
00:01:10.989 --> 00:01:13.829
推特回来后我们会把它们存在标签推特里,
And when the tweets come back, we're
gonna store them in the label tweets,

23
00:01:13.829 --> 00:01:15.909
然后我们要把这些推文。
then we're gonna display those tweets.

24
00:01:15.909 --> 00:01:19.849
但与此同时，我们是否可以进一步讨论下面的代码？
But in the meantime,
can we move on to any further code below?

25
00:01:19.849 --> 00:01:23.950
不，不是在 JavaScript 中，不是在我们现在的 JavaScript 模型中。
No, not in JavaScript,
not with our current model of JavaScript.

26
00:01:27.530 --> 00:01:32.533
想象一下这样做的后果，比如假设我正在做一件松弛的事情
And imagine what that does,
like suppose I'm doing on a slack

27
00:01:32.533 --> 00:01:38.259
比如我点击表情符号，然后点击表情符号回复。
like I'm clicking emoji, and
then clicking emoji responses.

28
00:01:38.259 --> 00:01:38.840
我们的最爱。
Our favorite.

29
00:01:38.840 --> 00:01:43.000
所以点击表情符号回复，它就会发送一条信息到
So clicking emoji responses,
and it's sending a message to

30
00:01:44.259 --> 00:01:47.349
懒散地说嘿，新的表情符号灯。
slack saying hey, new emoji light.

31
00:01:47.349 --> 00:01:50.189
在得到确认之前它不能继续前进,
It can't move on until it's
got confirmation back,

32
00:01:50.189 --> 00:01:52.747
已经成功更新到服务器上了。
that that was successfully
updated to the server.

33
00:01:52.747 --> 00:01:56.200
在确认代码之前，您不能转移到进一步的代码。
You can't kinda move onto to further
code until you've confirmed its code.

34
00:01:56.200 --> 00:01:58.150
理论上是这样的，对吧？
Well, in theory, right?

35
00:01:58.150 --> 00:02:01.269
然后意味着如果你试图点击下一个表情符号回复，和
And then meaning if you're trying to
click the next emoji response, and

36
00:02:01.269 --> 00:02:04.750
七个都排好了你要喜欢每一个,
you got the seven lined up, and
you need to like every single one,

37
00:02:04.750 --> 00:02:09.370
因为它是非常，娱乐性的信息，你点击每一个。
because it is very, entertaining message,
you click each one.

38
00:02:10.490 --> 00:02:12.229
你无法点击下一个,
You wouldn't be able
to click the next one,

39
00:02:12.229 --> 00:02:15.150
直到你确认前一个被点击了。
until you got confirmation back of
the previous one being clicked.

40
00:02:15.150 --> 00:02:15.919
如果你在 Twitter 上，并且
If you're on Twitter, and

41
00:02:15.919 --> 00:02:18.900
你点击查看更多的推文，它会发送一条消息，说嘿，得到新的推文。
you click view more tweets, it's gonna
send a message say hey, get new tweets.

42
00:02:18.900 --> 00:02:22.939
把他们带回来，直到你收到他们的推文，你才能继续前进
Bring them back, and until you get
the tweets back, you can't move on and

43
00:02:22.939 --> 00:02:24.610
点击页面上的其他东西。
click any other stuff on the page.

44
00:02:24.610 --> 00:02:28.420
你点击一个心形喜欢一个表情符号，然后在它回来之前喜欢一条推特,
You click a heart to like an emoji,
and like a tweet before it comes back,

45
00:02:28.420 --> 00:02:32.090
你点击那个心脏却没有任何反应,
you click that heart, and
you're getting no response,

46
00:02:32.090 --> 00:02:36.670
因为这个代码需要运行，才能把心脏从透明变成粉红色。
because that's code that needs to run
to turn the heart from clear to pink.

47
00:02:36.670 --> 00:02:39.870
那我们该怎么办？
So, what are we gonna do?

48
00:02:39.870 --> 00:02:44.770
慢的函数阻碍了进一步的代码运行，所以，我们能做什么人呢？
Slow function blocks further code
running so, what can we do people?

49
00:02:46.180 --> 00:02:47.439
让我们把它变得更难。
Let's make it even harder.

50
00:02:47.439 --> 00:02:52.569
如果我们想直接延迟函数的运行，使用 set timer,
What if we wanted to directly delay
a function running, using set timer,

51
00:02:52.569 --> 00:02:53.469
内置功能？
built in function?

52
00:02:53.469 --> 00:02:57.079
它的第一个输入，是你想延迟运行的函数。
Its first input,
is the function you wanna delay running.

53
00:02:57.079 --> 00:03:00.237
它的第二个输入，是你想延迟的毫秒数。
And its second input, is the number of
milliseconds by which you wanna delay it.

54
00:03:00.237 --> 00:03:04.978
所以，对于 Ethan，很高兴你们都回来了
So, to Ethan, it's lovely to have all
of you back by the way to, and for

55
00:03:04.978 --> 00:03:09.403
我们的在线观众稍后会以视频的形式观看,
our online audience who are watching
this in a video format later,

56
00:03:09.403 --> 00:03:12.881
从今天早些时候开始 Ethan,
from earlier today from
this one day world, Ethan,

57
00:03:12.881 --> 00:03:16.703
现在暂停会怎么样？
what are we gonna have happen
here with this set timeout?

58
00:03:16.703 --> 00:03:18.829
所以我有我的功能打印你好。
So I've got my function print hello.

59
00:03:18.829 --> 00:03:24.930
我已经设置了一个超时调用，打印 hello，1000毫秒延迟。
I've got my set timeout call with
print hello, 1000 milliseconds delay.

60
00:03:24.930 --> 00:03:29.319
假设我必须在设定暂停时间内完成，对吧，在那之前？
Presume I gotta do it inside set timeout,
right, before I then have?

61
00:03:29.319 --> 00:03:34.069
我们现有的 JavaScript 模型会以什么顺序
In what order, Ethan, would our
existing model of JavaScript suggest

62
00:03:35.069 --> 00:03:37.829
控制台日志会发生。
the console logs would happen.

63
00:03:37.829 --> 00:03:39.849
那么你认为这是真实发生的吗？
And then do you think that's
actually what happens?

64
00:03:39.849 --> 00:03:40.360
把它拿走，伊森。
Take it away Ethan.

65
00:03:40.360 --> 00:03:43.849
伊森: 我想你会等一会儿，然后
&gt;&gt; Ethan: I think you'll wait for
one second, and

66
00:03:43.849 --> 00:03:47.829
然后打印你好，然后你会先打印我。
then print hello, and
then you'll print me first.

67
00:03:47.829 --> 00:03:51.939
威尔 · 森坦斯: 我的意思是，如果你看看我在这里得到了什么，这是一种解释
&gt;&gt; Will Sentance: I mean, if you look at
what I've got here, that's kind of explain

68
00:03:51.939 --> 00:03:57.280
不然怎么能举起手来呢，不要在这里举手。
how else it could be and yet raise,
no raising hands from here and yet.

69
00:03:57.280 --> 00:03:59.389
我们认为这是真实发生的吗？
Do we think that's actually what happens?

70
00:03:59.389 --> 00:04:01.150
不可能。
There's no way.

71
00:04:01.150 --> 00:04:05.240
但是对于我们现有的 JavaScript 模型，Ethan 是正确的。
But with our existing model of JavaScript,
Ethan would be spot on.

72
00:04:05.240 --> 00:04:06.694
让我们把它变得更加极端。
Let's make it even more extreme.

73
00:04:06.694 --> 00:04:11.259
这里是布雷登，现在我们已经得到了零毫秒的延迟。
Brayden here, now we've got
delay at zero milliseconds now.

74
00:04:11.259 --> 00:04:14.930
现在，我假设，现在我假设它会很好。
Now, I assume,
now I assume it will be fine.

75
00:04:14.930 --> 00:04:19.069
布雷登，你觉得控制台日志的顺序是怎样的？
Brayden, what's that order of
console logs here, do you think?

76
00:04:19.069 --> 00:04:21.600
布雷登: 和以前一样，我们在那里打招呼，然后
&gt;&gt; Brayden: The same as before,
where we'd say hello, and

77
00:04:21.600 --> 00:04:23.370
那么它指的是威尔 · 森坦斯: 不是那样的
then it refers to
&gt;&gt; Will Sentance: It wasn't that

78
00:04:23.370 --> 00:04:23.954
以前也是。
before, either.

79
00:04:23.954 --> 00:04:25.639
布雷登: 如果你遵循
[LAUGH]
&gt;&gt; Brayden: If you follow the, [LAUGH]

80
00:04:25.639 --> 00:04:26.790
威尔 · 森特斯: 好吧，我们走
&gt;&gt; Will Sentance: Okay, let's

81
00:04:26.790 --> 00:04:28.120
看看我们到底在想什么。
see what we actually think.

82
00:04:28.120 --> 00:04:30.180
所以之前，实际上，是的。
So before, actually, it was, yeah.

83
00:04:30.180 --> 00:04:32.730
先是我，然后是你好。
Me first, and then hello.

84
00:04:32.730 --> 00:04:34.040
我们觉得这样不对吗？
We didn't feel like that'd be right?

85
00:04:34.040 --> 00:04:37.459
但是我们知道在现实中，先是接近我，然后是你好,
But we know in reality is closer
towards me first, and then hello,

86
00:04:37.459 --> 00:04:38.944
但这说不通啊。
but that makes no sense.

87
00:04:38.944 --> 00:04:41.259
你觉得布雷登怎么样？
So here, what do you think Brayden?

88
00:04:41.259 --> 00:04:44.360
布雷登: 在你好第一，没有等待。
&gt;&gt; Brayden: In hello first,
there's no wait.

89
00:04:44.360 --> 00:04:46.490
那样更符合逻辑，对吗？
&gt;&gt; Will Sentance: That would
be more logical right?

90
00:04:46.490 --> 00:04:47.740
他说的对吗？
Is he right?

91
00:04:47.740 --> 00:04:48.463
这就是为什么答案是否定的。
That's why the answer's no.

92
00:04:48.463 --> 00:04:50.141
布雷登: (笑)威尔 · 森坦斯: 他，不是,
&gt;&gt; Brayden: [LAUGH]
&gt;&gt; Will Sentance: He's, not,

93
00:04:50.141 --> 00:04:52.480
我先来。
it's gonna be me first.

94
00:04:52.480 --> 00:04:53.350
然后你好。
And then hello.

95
00:04:54.439 --> 00:04:55.459
这是什么语言？
What is this language?

96
00:04:55.459 --> 00:04:56.970
这是深刻的。
This is profound.

97
00:04:57.990 --> 00:05:01.819
因为在现实中，仅有 JavaScript 是不够的。
For in reality, JavaScript is not enough.

98
00:05:01.819 --> 00:05:06.439
我们需要新的代码，其中一些根本不是 JavaScript,
We need new pieces, some of which
aren't actually JavaScript at all,

99
00:05:06.439 --> 00:05:11.139
为了解释这里发生了什么，我们的核心 Java 引擎，我们已经看到了一切。
in order to explain what's happening here,
our core Java engine, we've seen it all.

100
00:05:11.139 --> 00:05:12.620
它有三个主要部分。
It has three main parts.

101
00:05:12.620 --> 00:05:16.290
实际上，让我们确保我们的调用堆栈在这里。
Actually, let's make sure
our call stack is on here.

102
00:05:16.290 --> 00:05:17.939
它有三个主要部分。
It has three main parts.

103
00:05:17.939 --> 00:05:23.879
它拥有我们的记忆，存储东西，我们的执行线程。
It has our memory, storing stuff,
our thread of execution.

104
00:05:23.879 --> 00:05:28.079
执行上下文，它只是基于这两个东西的迷你版本。
Execution context, that has been based on
just mini versions of those two things.

105
00:05:28.079 --> 00:05:31.971
它有我们的调用堆栈，全局总是在底部。
And it has our call stack on which
global is always at the bottom.

106
00:05:35.659 --> 00:05:39.250
威尔 · 森塔斯: 用这个模型，我们乘以二,
&gt;&gt; Will Sentance: With the model,
that and we have multiplied by two,

107
00:05:39.250 --> 00:05:42.040
当我们在这里经营的时候。
when we're running it here.

108
00:05:42.040 --> 00:05:46.009
我们在全球范围内取下它，我们在这里运行它，它在顶端。
We take it off throughout the global
we run it here, it's on top.

109
00:05:46.009 --> 00:05:50.149
这些都是 JavaScript 但是我们需要添加新的组件,
This is all a JavaScript but,
we're gonna have to add new components,

110
00:05:50.149 --> 00:05:52.159
我们得加上。
we're gonna have to add.

111
00:05:52.159 --> 00:05:55.689
网页浏览器的功能，我们必须加上承诺。
Web browser features,
we have to add promises.

112
00:05:55.689 --> 00:06:00.634
事件循环回调任务、回调任务和微任务队列。
The event loop callback task, callback
will task you, and the microtask queue.

113
00:06:00.634 --> 00:06:04.555
我们要把这些加到我们的拼图中，来解释什么是
And we're gonna add all of these to
our puzzle in order to explain what's

114
00:06:04.555 --> 00:06:05.529
发生在这里。
happening here.
