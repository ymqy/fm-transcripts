WEBVTT

1
00:00:00.230 --> 00:00:02.899
威尔 · 森塔斯: 其中一个奖金我想给你之前，因为我说我们移动
&gt;&gt; Will Sentance: One of the bonuses I
want to give you before as I say we moved

2
00:00:02.899 --> 00:00:03.855
第三个解决方案。
to solution three.

3
00:00:03.855 --> 00:00:06.676
这将是下一个大美化和
Which is gonna be the big
next prettifying and

4
00:00:06.676 --> 00:00:09.358
简化所有这些对象创建。
simplifying of all this object creation.

5
00:00:09.358 --> 00:00:11.458
还有一件额外的东西我想给你们，那就是这个。
One more bonus thing I want
to give you which is this.

6
00:00:11.458 --> 00:00:16.129
在方法增量中声明和调用一个新函数。
Declaring and calling a new function
inside our method increment.

7
00:00:16.129 --> 00:00:21.856
让我把我们添加的东西清理一下，这样我们就不会搞混了。
Let me just clear away the stuff we
added there so we don't get confused.

8
00:00:21.856 --> 00:00:24.722
让我们把这些额外的零件处理掉吧。
Let's just get rid of
these bonus pieces here.

9
00:00:24.722 --> 00:00:29.403
在底部你可以看到，我调用了递增函数,
So at the bottom there you can see,
I'm calling the increment function,

10
00:00:29.403 --> 00:00:31.606
和以前一样，这是同样的密码。
as before, this is the same code.

11
00:00:31.606 --> 00:00:34.457
我在这里唯一改变的就是,
The only thing I've changed here, folk,

12
00:00:34.457 --> 00:00:39.781
我已经将 increment 方法作为用户函数存储中的唯一方法。
is I've put the increment method as the
only method in the user function store.

13
00:00:39.781 --> 00:00:45.832
我刚刚在行上定义了它，所以我们可以在这里添加一些额外的东西。
And I've just defined it over lines, so
that we can add something extra in there.

14
00:00:45.832 --> 00:00:47.880
是这样吗，我真的这么做了吗？
Is that right,
is that actually what I've done?

15
00:00:47.880 --> 00:00:50.950
我希望如此，我认为这是正确的，希望如此。
I hope it is,
I think it is right hopefully.

16
00:00:50.950 --> 00:00:53.231
现在我们在这里只有增量函数。
So now we only have our
increment function in here.

17
00:00:53.231 --> 00:00:57.567
但这只是为了简单起见，所以我们可以在其中做一些事情,
But that's just for simplicity's sake,
so we can do something inside of it,

18
00:00:57.567 --> 00:00:58.301
好了。
there we go.

19
00:01:00.125 --> 00:01:07.069
威尔 · 森特斯: 约翰不喜欢我把黑板擦掉。
&gt;&gt; Will Sentance: John's not liking
my bad erasing of the board.

20
00:01:07.069 --> 00:01:10.840
好的，这是我们在 user1上调用的增量方法,
Okay, there's our increment
method being called on user1,

21
00:01:10.840 --> 00:01:14.055
通过原始连接，没问题吧？
via the proto link, yep, all good?

22
00:01:14.055 --> 00:01:16.807
它能做到这一点？
It does this.score++?

23
00:01:16.807 --> 00:01:22.353
我现在把它稍稍展开因为我想这么做,
I just put it now on to slightly spread
it out because I want to do this,

24
00:01:22.353 --> 00:01:25.716
我想在增量方法里面。
I want to inside of the increment method.

25
00:01:25.716 --> 00:01:28.933
因为如果你开始用这种风格写代码,
Because if you start thinking
in this style of writing code,

26
00:01:28.933 --> 00:01:32.989
你会发现自己一直在使用递增方法。
you'll find yourself all the time,
having to, in that increment method.

27
00:01:32.989 --> 00:01:35.825
一堆代码，大概10行，12行，还有
A bunch of code maybe 10 lines,
12 lines, and

28
00:01:35.825 --> 00:01:38.739
你可能不希望只有12行[声音]。
you may not want to have
that just 12 lines [SOUND].

29
00:01:38.739 --> 00:01:42.496
您可能需要将其分解为增量内部的小函数
You may wanna break that into little
mini-functions inside of the increment

30
00:01:42.496 --> 00:01:44.822
方法，只有一行，它可能是12行。
methods, only one line,
it may be 12 lines.

31
00:01:44.822 --> 00:01:47.218
你想要定义它们的内部,
And you wanna define inside of them,

32
00:01:47.218 --> 00:01:51.716
有些函数甚至可能在 increment 中运行。
some functions that you may even
end up running inside of increment.

33
00:01:51.716 --> 00:01:56.020
你可能还是想用 user1。
Which you're probably gonna
still wanna use user1.

34
00:01:56.020 --> 00:02:01.819
这将创造出一些有趣而有趣的挑战，让我们来看看。
That's gonna create some interesting and
intriguing challenges, let's have a look.

35
00:02:01.819 --> 00:02:03.957
我要保持这个超级简单
I'm gonna keep this super simple and

36
00:02:03.957 --> 00:02:08.306
我们只需要在函数中结束这个.score + + 。
we're literally just going to wrap
up the this.score++ in a function.

37
00:02:08.306 --> 00:02:10.317
然后当场运行这个函数。
And then run that function right there and
then.

38
00:02:10.317 --> 00:02:12.949
因为我想表达我的观点但结果是一样的,
Because I wanna make a point, but
it's gonna be exactly the same,

39
00:02:12.949 --> 00:02:13.756
看看这个。
have a look at that.

40
00:02:13.756 --> 00:02:19.170
我把它放在.score + + ，看一下，在一个函数里面，我在这里调用它。
I put this.score++, take a look, inside
of a function I'm calling it right there.

41
00:02:19.170 --> 00:02:21.710
把它放进去，加1，我就在这里称它为1。
Put it inside, add 1, and
I'm calling it right there.

42
00:02:21.710 --> 00:02:25.490
很明显，在实践中我从来没有真正做到这一点，但我想说明一点。
Obviously I'd never really do this in
practice, but I wanna make a point.

43
00:02:25.490 --> 00:02:28.150
但实际上，我们经常创造一些小功能
But in reality we're often
creating little functions

44
00:02:28.150 --> 00:02:31.400
在我们的对象上调用的方法中。
inside of our method that's
being called on our object.

45
00:02:31.400 --> 00:02:34.629
这将会非常有趣。
And this is going to be
really interesting here.

46
00:02:34.629 --> 00:02:40.575
让我们回到我们的底线 user1.increment,
So let's get back to our bottom
line here user1.increment,

47
00:02:40.575 --> 00:02:43.849
让我们调用 user1.increment。
let's call user1.increment.

48
00:02:43.849 --> 00:02:45.420
显然没有什么变化。
Apparently not much has changed.

49
00:02:45.420 --> 00:02:50.099
我把 this.score + + 加入到这里的一个小 baby 函数中,
I've just put my this.score++ into
a little baby function inside of here,

50
00:02:50.099 --> 00:02:52.639
我会立刻参选。
that I'm gonna immediately run.

51
00:02:52.639 --> 00:02:56.430
各位，这些都是额外的东西，我想带你们参观一下这个生态系统
And, people, these are just bonus things
I wanna show you around the ecosystem of

52
00:02:56.430 --> 00:02:59.180
原型世界和这个关键词。
the prototype world and the this keyword.

53
00:02:59.180 --> 00:03:04.493
那么，让我们来运行 user1.increment，Braden，全新的？
So there we go, let's run our
user1.increment, Braden, brand new?

54
00:03:04.493 --> 00:03:05.442
布莱登: 执行环境。
&gt;&gt; Braden: Execution context.

55
00:03:05.442 --> 00:03:11.377
威尔 · 森塔斯: 执行上下文，没错，就是这样，我们进入它。
&gt;&gt; Will Sentance: Execution context,
exactly, there it is, into it we go.

56
00:03:11.377 --> 00:03:18.558
首先，Braden，在本地记忆中，我们的隐含参数是什么？
First thing, Braden, in local memory,
what's our implicit parameter immediately?

57
00:03:18.558 --> 00:03:20.364
这个，是的，分配什么？
This, yeah, assigned what?

58
00:03:20.364 --> 00:03:23.728
用户1，不管剩下什么，这很好,
User1 whatever's left, so that's good,

59
00:03:23.728 --> 00:03:29.312
因为你想在 user1上做一些代码，然后改变分数，即 user1。
because you wanna do some code on
user1 and change the score, the user1.

60
00:03:32.123 --> 00:03:34.813
在增量核心里面我们接下来要做什么？
&gt;&gt; Will Sentance: What's the next thing
we do inside of the increment core?

61
00:03:34.813 --> 00:03:36.061
布莱登: 声明一个函数 add1。
&gt;&gt; Braden: Declare a function add1.

62
00:03:36.061 --> 00:03:42.918
威尔 · 森塔斯: 好极了，add1，就是这个，函数 add1。
&gt;&gt; Will Sentance: Excellent,
add1, there it is, function add1.

63
00:03:44.310 --> 00:03:46.409
那我们现在该怎么办，布莱登？
&gt;&gt; Will Sentance: What do we
do then immediately, Braden?

64
00:03:46.409 --> 00:03:47.098
布莱登: 运行这个函数。
&gt;&gt; Braden: Run the function.

65
00:03:47.098 --> 00:03:49.783
我们调用函数，运行函数，调用函数,
&gt;&gt; Will Sentance: We call the function, we
run the function, we invoke the function,

66
00:03:49.783 --> 00:03:50.949
都是同一个意思。
they all mean the same thing.

67
00:03:50.949 --> 00:03:52.132
全新的什么，布莱登？
Brand new what, Braden?

68
00:03:52.132 --> 00:03:53.211
布莱登: 执行环境。
&gt;&gt; Braden: Execution context.

69
00:03:53.211 --> 00:03:54.365
执行上下文，完全正确。
&gt;&gt; Will Sentance: Execution context,
exactly.

70
00:03:56.783 --> 00:03:58.269
威尔 · 森塔斯: 现在事情变得有趣了。
&gt;&gt; Will Sentance: Now
things get interesting.

71
00:04:02.937 --> 00:04:05.728
威尔 · 森特斯: 里面的代码行是什么？
&gt;&gt; Will Sentance: What's
the line of code inside?

72
00:04:05.728 --> 00:04:08.574
布莱登: 这个——威尔 · 森特斯: 嗯，代码行——
&gt;&gt; Braden: This-
&gt;&gt; Will Sentance: Well, the line of code-

73
00:04:08.574 --> 00:04:09.153
布莱登: 代码行应该是
&gt;&gt; Braden: The line of code would be

74
00:04:09.153 --> 00:04:09.653
这个，得分 + + 。
this.score++.

75
00:04:09.653 --> 00:04:10.680
威尔 · 斯坦斯: 这个，得分。
&gt;&gt; Will Sentance: This.score.

76
00:04:12.759 --> 00:04:14.668
2. Will Sentance: + + .
&gt;&gt; Will Sentance: ++.

77
00:04:17.047 --> 00:04:23.521
威尔 · 森塔斯: 我们在阿迪本地内存中的价值是什么？
&gt;&gt; Will Sentance: What [LAUGH] is our
value of this inside add1's local memory?

78
00:04:23.521 --> 00:04:26.603
大概是 user1，因为我们在这个函数里面，我们怎么想,
Presumably it's user1 cuz we are inside
this function, what do we think,

79
00:04:26.603 --> 00:04:27.143
所有人？
everybody?

80
00:04:27.143 --> 00:04:29.574
这是有道理的，其他语言都是这样做的！
That makes sense,
every other language does that!

81
00:04:29.574 --> 00:04:32.079
什么，布莱登，你觉得是这样吗？
What, Braden, do you think it's that?

82
00:04:32.079 --> 00:04:33.365
布莱登: 没有。
&gt;&gt; Braden: No.

83
00:04:33.365 --> 00:04:34.850
威尔 · 森特斯: 不，(笑) ，荣耀！
&gt;&gt; Will Sentance: No, [LAUGH], glories!

84
00:04:34.850 --> 00:04:37.591
布莱登: (笑)威尔 · 森坦斯: 是的，所以这是
&gt;&gt; Braden: [LAUGH]
&gt;&gt; Will Sentance: Yes, so this is one of

85
00:04:37.591 --> 00:04:42.625
这些可能不是最好的早期 JavaScript 实现。
those arguably, maybe not the best
earlier implementations of JavaScript.

86
00:04:42.625 --> 00:04:45.949
尤其是在其他语言中，当你在使用一种语言的时候，它是绝对标准的
Especially as in other languages it's
absolutely standard that while you're

87
00:04:45.949 --> 00:04:46.800
在方法里面。
inside the method.

88
00:04:46.800 --> 00:04:51.555
相关对象，我们关心的用数据做事情的对象。
The pertinent object, the object that we
care about doing stuff to with the data.

89
00:04:51.555 --> 00:04:55.249
是贯穿始终的，将是我们运行方法的对象。
Is throughout, going to be the object
that we're running the method on.

90
00:04:55.249 --> 00:04:58.747
即使我们在内部声明其他函数并运行它们,
Even if we declare other
functions inside and run them,

91
00:04:58.747 --> 00:05:01.134
他们在当地的记忆中就是这样。
they're this in their local memory.

92
00:05:01.134 --> 00:05:04.446
但是不，这个在当地的记忆里，布拉登,
But no, the this in the local memory here,
Braden,

93
00:05:04.446 --> 00:05:07.021
你想猜猜它指的是什么吗？
you wanna take a guess what it refers to?

94
00:05:07.021 --> 00:05:10.182
[声音]威尔 · 森坦斯: 我们的缺省值是什么
&gt;&gt; [SOUND]
&gt;&gt; Will Sentance: What's our default for

95
00:05:10.182 --> 00:05:10.899
这个？
the this?

96
00:05:10.899 --> 00:05:11.990
怎么了，丹？
Yeah, Dan?

97
00:05:11.990 --> 00:05:12.920
全局记忆。
&gt;&gt; Dan: The global memory.

98
00:05:12.920 --> 00:05:16.026
嗯，全局窗口对象,
&gt;&gt; Will Sentance: Well,
the global window object,

99
00:05:16.026 --> 00:05:19.569
特别是现在没用。
especially not useful at this moment.

100
00:05:19.569 --> 00:05:24.456
所以我们最终会连接到这个有趣的全局对象，窗口,
And so we'd end up attaching to this
funny global object called window,

101
00:05:24.456 --> 00:05:26.307
一笔财产，一笔生意。
a property on it, a score.

102
00:05:26.307 --> 00:05:30.399
那么默认情况下就不能定义了，我们会尝试增加它。
Which would then be undefined by default,
and we'd try and increment it.

103
00:05:30.399 --> 00:05:33.418
真漂亮，那是一只漂亮的虫子。
[SOUND] beautiful, well,
that's one of those glorious bugs.

104
00:05:33.418 --> 00:05:37.433
不是虫子只是如果我们知道它是怎么工作的,
Not a bug, it's just like,
I guess if we know how it's working,

105
00:05:37.433 --> 00:05:38.975
这是不可能的。
it's not gonna happen.

106
00:05:38.975 --> 00:05:42.644
所以在过去，这是如何处理的，这是一个有趣的方式。
So in the old days, how was this
dealt with, it was a funny way.

107
00:05:42.644 --> 00:05:45.055
丹: (笑)威尔 · 森坦斯: 他们过去常常,
&gt;&gt; Dan: [LAUGH]
&gt;&gt; Will Sentance: They used to,

108
00:05:45.055 --> 00:05:47.240
各位，你们知道这个吗？
do you know this, everybody?

109
00:05:47.240 --> 00:05:53.942
他们过去常常这样，他们过去常常那样,
They used to do this,
they used to do that,

110
00:05:53.942 --> 00:05:58.427
他们以前经常这么做。
they used to do that=this.

111
00:05:58.427 --> 00:06:03.408
这样就等于这个 user1，漂亮。
Which would set that equal to this user1,
beautiful.

112
00:06:03.408 --> 00:06:07.036
然后在这里面，我们不会写这个.score + + ，我们会怎么做？
And then inside of here, we wouldn't
write this.score ++, what would we do?

113
00:06:07.036 --> 00:06:08.449
阿丹: 那个。
&gt;&gt; Dan: That.

114
00:06:08.449 --> 00:06:10.750
威尔 · 森特斯: That.score + + ，我们会在本地内存中寻找它，它不在那里。
&gt;&gt; Will Sentance: That.score ++, we'd look
for that in local memory, it ain't there.

115
00:06:10.750 --> 00:06:14.499
所以我们在这里抓取 user1，没问题[声音]没问题。
So we go out here and grab user1,
no problem [SOUND] no problem.

116
00:06:14.499 --> 00:06:17.670
您可以在整个代码中看到这些函数中的许多内容。
You'd see that=this inside many of
these functions throughout the code.

117
00:06:17.670 --> 00:06:20.629
这不是最漂亮的设计路线，我得说。
It wasn't the most beautiful design path,
and I've gotta say.

118
00:06:20.629 --> 00:06:22.665
还有其他的方法,
There are other ways of doing it,

119
00:06:22.665 --> 00:06:27.406
你可以运行 add1函数，我们把父母放在最后。
you can actually run the add1 function,
we're putting parents on the end.

120
00:06:27.406 --> 00:06:30.987
但是也有一些手动的方法来运行这个函数,
But also, there's some manual
ways to run the function,

121
00:06:30.987 --> 00:06:34.069
有人知道手动操作吗 Kayla？
does anyone know the manual ways,
yeah, Kayla?

122
00:06:34.069 --> 00:06:35.307
打电话或者回复。
&gt;&gt; Kayla: Call or reply.

123
00:06:35.307 --> 00:06:36.981
威尔 · 森特斯: 打电话或者回复，或者捆绑，完全正确，好吧,
&gt;&gt; Will Sentance: Call or
reply, or bind, exactly, well,

124
00:06:36.981 --> 00:06:38.526
宾德要做一件非常接近的事。
bind is gonna do something very close.

125
00:06:38.526 --> 00:06:42.031
电话和答复，我们要进入这个更多的公关部分。
Call and reply, we're gonna go
into this more in the PR parts.

126
00:06:42.031 --> 00:06:46.048
如果你想去看深海潜水，我们有什么，你可以去。
If you wanna go watch that,
the deep dive, what we have, you can.

127
00:06:46.048 --> 00:06:48.646
但是很快就会变得很酷,
But just quickly add1.cool, actually,

128
00:06:48.646 --> 00:06:51.745
也许我现在就可以展示给你看，add1。
I probably might as well
show you right now, add1.

129
00:06:51.745 --> 00:06:58.834
顺便说一句，这是很标准的，这个东西，太神奇了。
Let's get rid of, by the way that was very
standard that that.this thing, amazing.

130
00:06:58.834 --> 00:07:03.413
我不认为这本身就很糟糕，我知道这很愚蠢。
I don't think it was inherently terrible,
it's kind of know it's pretty dumb.

131
00:07:03.413 --> 00:07:07.990
但是还有另一种方式，就像我说的运行广告的一个功能。
But there is another way as I say
of running the ad one function.

132
00:07:07.990 --> 00:07:12.920
手动，我们实际上得到控制什么这个任务
Manually where we actually get to take
control of what the this assignment

133
00:07:12.920 --> 00:07:14.040
就在里面。
is inside of it.

134
00:07:14.040 --> 00:07:19.485
这有点酷，这是通过运行它使用凉爽或申请。
That's kinda cool, and that is by
running it using the cool or apply.

135
00:07:19.485 --> 00:07:21.641
对于这一点，他们都做了同样的事情。
For this bit, they both do the same thing.

136
00:07:21.641 --> 00:07:26.946
如果我经过这里，这里，那么不管我经过什么,
And if I've passed in here,
this, then whatever I pass in,

137
00:07:26.946 --> 00:07:30.901
这将评估为什么，各位？
the this will evaluate to what, everybody?

138
00:07:30.901 --> 00:07:32.052
用户1。
&gt;&gt; Braden: User1.

139
00:07:32.052 --> 00:07:35.971
Will Sentance: User1，因此 this inside of here 将被设置为 that-
&gt;&gt; Will Sentance: User1, and therefore the
this inside of here will be set to that-

140
00:07:35.971 --> 00:07:37.427
用户1。
&gt;&gt; Braden: User1.

141
00:07:37.427 --> 00:07:38.816
用户1，然后它再次工作。
&gt;&gt; Will Sentance: User1,
and then it works again.
