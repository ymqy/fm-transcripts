WEBVTT

1
00:00:00.050 --> 00:00:02.660
威尔 · 森坦斯: 我们有两个立面功能，我的天哪,
&gt;&gt; Will Sentance: We had our two
prong facade functions, my goodness,

2
00:00:02.660 --> 00:00:03.850
他们是不是很了不起？
weren't they remarkable?

3
00:00:03.850 --> 00:00:04.570
如果你还记得,
And if you remember,

4
00:00:04.570 --> 00:00:08.109
我想再问一次休息前我们问过的问题。
I wanna just ask that question we asked
right before the break just one more time.

5
00:00:08.109 --> 00:00:11.119
我们的澄清是什么？
Which was, what is our clarification?

6
00:00:12.250 --> 00:00:16.370
我想是的，有人记得我问过的问题吗？
And I think it was, can anyone
remember one of the questions I asked?

7
00:00:16.370 --> 00:00:17.539
你问是不是托德？
Was it Todd, you asked?

8
00:00:17.539 --> 00:00:18.460
等等，什么会？
Hold on, what would?

9
00:00:18.460 --> 00:00:19.199
是的，去吧。
Yeah, go ahead.

10
00:00:19.199 --> 00:00:22.420
演讲者2: 我猜当它进入调用堆栈时？
&gt;&gt; Speaker 2: I guess when
that gets onto the call stack?

11
00:00:22.420 --> 00:00:26.019
威尔 · 森塔斯: 是的，那个函数是什么时候被
&gt;&gt; Will Sentance: Yeah, when does that
function that was delayed, deferred by

12
00:00:26.019 --> 00:00:31.609
附加到实现数组上的承诺对象？
being attached to the promise
object on fulfillment array?

13
00:00:31.609 --> 00:00:35.659
考虑到它是自动触发运行的，那么它什么时候起作用？
When does that function,
given that it's auto-triggered to run?

14
00:00:35.659 --> 00:00:37.149
是不是变得很棒了？
Does it just get great?

15
00:00:37.149 --> 00:00:39.588
我的意思是它是在 JavaScript 中，那么它是直接在调用堆栈中吗？
I mean it's in JavaScript, so does it
just go straight in the call stack?

16
00:00:42.079 --> 00:00:43.840
没有疯狂的想法，好吧,
No crazy to think, well,

17
00:00:43.840 --> 00:00:48.640
我们需要了解我们承诺延期的规则
we're gonna need to understand
the rules by which our promise deferred

18
00:00:48.640 --> 00:00:53.283
函数返回到 JavaScript 以便执行。
functionality gets back into
JavaScript in order to be execute off.

19
00:00:53.283 --> 00:00:58.200
知道吗，回到 JavaScript 中的调用堆栈。
You know what, get back on to
the call stack it's in JavaScript.

20
00:00:58.200 --> 00:01:01.210
回到调用堆栈以便执行。
Get back on to the call stack
in order to be executed.

21
00:01:01.210 --> 00:01:02.409
我们会在这里看到。
We're gonna see that here.

22
00:01:02.409 --> 00:01:05.912
让我们在这里快速重申 then 方法和功能，它是做什么的
Let's just quickly reiterate here the then
method and functionality, what does it

23
00:01:05.912 --> 00:01:09.018
例如，then method and functionality to call，yeah，the then method and
say, then method and functionality
to call, yeah, the then method and

24
00:01:09.018 --> 00:01:12.456
调用和完成任何我们想要运行的代码的功能将返回数据。
the functionality to call and completion
any code we want to run will return data.

25
00:01:12.456 --> 00:01:15.923
响应数据必须添加到 promise 对象上
The response data must be
added on the promise object

26
00:01:15.923 --> 00:01:21.180
使用 then 方法添加到 fulfillment 数组的 hidden 属性。
added using the then method to the hidden
property on fulfillment array.

27
00:01:21.180 --> 00:01:26.960
Promise 对象将自动触发该数组中的附加函数运行
Promise objects will automatically trigger
the attached function in that array to run

28
00:01:26.960 --> 00:01:33.020
它的输入是来自 Twitter 的 web 浏览器功能的响应数据。
with its input being the response data
from the web browser feature from Twitter.

29
00:01:33.020 --> 00:01:34.670
好了我们开始吧。
All right, here we go.

30
00:01:34.670 --> 00:01:37.960
让我们看看，这是我们今天要看到的最复杂的代码。
Let's see, this is the most complex
code we're gonna see today.

31
00:01:38.979 --> 00:01:43.329
我们会在今天下午看到，但这是一个，我这里有三个功能
We'll see this afternoon but
this is one I have three functions here

32
00:01:43.329 --> 00:01:48.219
为了我尝试和最小化代码，只是得到的核心。
in order to I try and minimize
the code and just get to the core.

33
00:01:48.219 --> 00:01:52.141
但是我们需要三个人在这里，以便看到我们的规则
But we need three here in order
to see the rules by which our

34
00:01:52.141 --> 00:01:55.587
异步延迟代码最终被运行。
asynchronously deferred
code ends up being run.

35
00:01:55.587 --> 00:02:00.969
顺便说一下，我将在最后完成“异步”这个词的意思。
And I will, by the way, finalize at
the end what this word asynchronous means.

36
00:02:01.969 --> 00:02:03.430
我现在就说。
I will say it right now.

37
00:02:03.430 --> 00:02:06.150
这意味着你看到代码的时候就乱编码,
It means doing code out of
order from when you saw it,

38
00:02:06.150 --> 00:02:07.260
就是那个时候。
from when it was said to be done.

39
00:02:07.260 --> 00:02:12.240
所以当我们看到普通的 JavaScript 代码时，如果一行代码是 do the code,
So when we see normal JavaScript code,
if a line says do the code,

40
00:02:12.240 --> 00:02:13.699
那我现在就去做。
I do it right then.

41
00:02:13.699 --> 00:02:15.590
如果这行代码说做代码，那么我马上就做。
If the line says do the code,
I do it right then.

42
00:02:15.590 --> 00:02:17.500
异步电动说不，不,
Asynchronous says no, no,

43
00:02:17.500 --> 00:02:22.620
不，当这个功能回来的时候 JavaScript 会处理。
no, JavaScript's gonna handle when
that functionality comes back in.

44
00:02:22.620 --> 00:02:26.003
当你触发浏览器功能的时候，它就会被打乱顺序
And it's gonna be out of order of
when you trigger the browser feature

45
00:02:26.003 --> 00:02:27.181
开始了它的工作。
that started its work.

46
00:02:27.181 --> 00:02:30.295
相关的功能会回来的时候
And the associated functionality
is gonna come back in when that

47
00:02:30.295 --> 00:02:31.939
背景工作完成了。
background work is done.

48
00:02:31.939 --> 00:02:36.659
我们不再有我们的，我们不能离开这行代码，直到我们已经完成
No longer do we have our, we cannot leave
this line of code until we've finished on

49
00:02:36.659 --> 00:02:39.569
直到我们换到下一行。
it until we've moved to the next line.

50
00:02:39.569 --> 00:02:43.270
现在我们可以得到代码，然后运行它
Now we can actually have code
that's gonna be run after

51
00:02:43.270 --> 00:02:44.949
我们所有的常规代码。
all of our regular code is run.

52
00:02:44.949 --> 00:02:50.289
好了，我们来看看这一切是怎么发生的。
Okay, so we're gonna see how all of
that plays out here line by line.

53
00:02:50.289 --> 00:02:55.520
我们已经有了传统的 ES5和更早的设置时间的函数。
We've got our traditional ES5 and
earlier set time out with a function.

54
00:02:55.520 --> 00:02:57.039
它会被扔进网页浏览器。
It's gonna be thrown down the web browser.

55
00:02:57.039 --> 00:02:59.800
我们接到了两个尖头的电话。
We've got our fetch call
with the two prongs.

56
00:03:01.759 --> 00:03:05.199
这边，这个代码，这个图表,
With this side, and
with this code, and this diagram,

57
00:03:05.199 --> 00:03:10.240
我们将看到 JavaScript 中异步性的整个映射。
we're gonna see the entire map
of asynchronicity in JavaScript.

58
00:03:10.240 --> 00:03:12.479
好了，开始了，伙计们。
Okay, here we go, folks.

59
00:03:12.479 --> 00:03:13.770
我们几乎已经到了最后的关卡。
We're almost at the final hurdle.

60
00:03:15.389 --> 00:03:16.560
不完全是。
Not quite.

61
00:03:16.560 --> 00:03:17.889
开始了。
Here we go.

62
00:03:17.889 --> 00:03:25.199
第一行，我们要把什么存进我们的全球记忆里，我的朋友马特？
Line one, into our global memory we
are going to store what, my friend Matt?

63
00:03:25.199 --> 00:03:26.870
讲者2: 功能显示。
&gt;&gt; Speaker 2: The function display.

64
00:03:26.870 --> 00:03:32.468
威尔句子: 很好，功能就是威尔句子: 展示，就是这样。
&gt;&gt; Will Sentance: Excellent, the function
&gt;&gt; Will Sentance: Display, there it is.

65
00:03:34.579 --> 00:03:37.770
保存到全局内存中。
Saved into global memory.

66
00:03:37.770 --> 00:03:38.520
谢谢你，马特。
Thank you Matt.

67
00:03:38.520 --> 00:03:40.900
现在到托德下一行。
Now to Tod next line.

68
00:03:40.900 --> 00:03:42.829
演讲者2: 打印 hello 功能。
&gt;&gt; Speaker 2: The function print hello.

69
00:03:42.829 --> 00:03:44.210
威尔 · 森特斯: 打印你好。
&gt;&gt; Will Sentance: Print hello.

70
00:03:44.210 --> 00:03:49.009
存储在全局内存中，并且很好地声明和存储在内存中。
Stored in global memory as well
declared and stored in memory.

71
00:03:49.009 --> 00:03:51.277
下一句 Ryan 我们该怎么做才安全？
Next line, Ryan,
what's it safe for us to do?

72
00:03:51.277 --> 00:03:54.753
清除300毫秒的函数块或
Clear the function block for
300 milliseconds or

73
00:03:54.753 --> 00:03:59.240
300毫秒一个区块30毫秒。
300 milliseconds a block for
30 milliseconds.

74
00:03:59.240 --> 00:04:01.759
我想把这些片段剪切超过300毫秒。
I'd like to cut these bits for
over 300 milliseconds.

75
00:04:01.759 --> 00:04:02.819
就是这个。
There it is.

76
00:04:02.819 --> 00:04:07.330
这是一个300毫秒的新块。
That's a fresh block for 300 milliseconds.

77
00:04:08.620 --> 00:04:10.199
就是这个。
There it is.

78
00:04:10.199 --> 00:04:14.800
现在事情变得有趣了。
And now things get interesting.

79
00:04:14.800 --> 00:04:19.889
现在我们进入设定的暂停时间。
Now we get to our set timeout.

80
00:04:19.889 --> 00:04:22.160
它在 JavaScript 中做了什么有趣的事情吗，各位？
Is it doing anything interesting
in JavaScript, people?

81
00:04:22.160 --> 00:04:23.110
讲者二: 没有。
&gt;&gt; Speaker 2: No.

82
00:04:23.110 --> 00:04:26.759
威尔 · 森塔斯: 不，不是，这是唯一的问题之一。
&gt;&gt; Will Sentance: No, it's not,
this is one of the one-problem ones.

83
00:04:26.759 --> 00:04:32.569
实际上，让我们把我们的网络浏览器放在这里，就在这里。
Actually, let's put up our web
browser over here, right over here.

84
00:04:32.569 --> 00:04:35.370
网页浏览器。
Web browser.

85
00:04:35.370 --> 00:04:41.569
我们已经知道，white 是 JavaScript 引擎和特性。
We've got,
white is JavaScript engine and features.

86
00:04:41.569 --> 00:04:46.959
然后你看这里，我们有网络请求
And then you've got over here
we have network requests

87
00:04:46.959 --> 00:04:52.050
是内置在 c + + 中的浏览器特性之一，绝对不是在 JavaScript 中。
was one of the web browser features built
in C++, definitely not in JavaScript.

88
00:04:52.050 --> 00:04:59.360
而且它是通过这个神奇的 fetch facade 函数从 JavaScript 中控制的。
And it's controlled from within JavaScript
by this amazing fetch facade function.

89
00:04:59.360 --> 00:05:00.730
然后我们有了控制台。
Then we had console.

90
00:05:00.730 --> 00:05:05.786
我们还有计时器，网络的一个特性
We also had timer, a feature of the web

91
00:05:05.786 --> 00:05:10.685
浏览器由设定的暂停时间控制。
browser controlled by set time out.

92
00:05:10.685 --> 00:05:12.240
但是有一大堆我们认识的。
But there's a whole
bunch of those we know.

93
00:05:13.519 --> 00:05:19.019
好了，这下面的东西都在运行
Okay, so everything below here is going

94
00:05:19.019 --> 00:05:25.988
不是 JavaScript 而是我们的网页浏览器特性。
to be not JavaScript but
our web browser features.

95
00:05:28.879 --> 00:05:30.415
我还忘记了我们的主平台上还有什么？
What else have I forgotten
from our main platform?

96
00:05:30.415 --> 00:05:33.899
Dan，我忘记了我的主要 Java 平台是什么？
Dan, what am I forgetting from
my sort of main Java platform?

97
00:05:33.899 --> 00:05:35.290
我的演讲者2: 我最喜欢的名字是 stack。
My-
&gt;&gt; Speaker 2: My favorite called stack.

98
00:05:35.290 --> 00:05:37.689
威尔 · 森特斯: 是的，不觉得堆栈很酷。
&gt;&gt; Will Sentance: Yeah,
don't feel very cool stack.

99
00:05:37.689 --> 00:05:39.340
没错，就是这样。
Exactly, there it is.

100
00:05:41.000 --> 00:05:43.949
就是这样，我们正在执行全局代码。
There it is.
And we're executing code in global.

101
00:05:43.949 --> 00:05:45.350
就是这样。
So there it is.

102
00:05:45.350 --> 00:05:47.093
不是什么好货色。
Well, not cool sack.

103
00:05:47.093 --> 00:05:50.699
好的，进入 JavaScript 执行，我们已经讨论过了
All right, into JavaScript
execution we've gone we've had on

104
00:05:50.699 --> 00:05:53.879
在保存全局内存时显示打印 hello 块，时间为300毫秒。
display print hello block for
300 milliseconds at saving global memory.

105
00:05:53.879 --> 00:05:59.079
现在我们点好了，想说话的请举手
Now we hit okay, raise your hand if
you wanna be the person who verbalizes

106
00:05:59.079 --> 00:06:04.689
伊森已经是这方面的专家了也许我们会选伊森。
through, Ethan's been already our expert
on this, maybe we'll choose Ethan.

107
00:06:04.689 --> 00:06:10.050
这是第一个用言语表达的
That verbalizes through this first

108
00:06:10.050 --> 00:06:14.870
立面函数设置超时时间。
facade function set time out.

109
00:06:14.870 --> 00:06:18.240
如果想成为动员者请举手,
Raise your hand if wanna be the person
who mobilizes through this,

110
00:06:18.240 --> 00:06:20.050
因为我没有四处看，我真的不知道。
cuz I'm not looking around,
I can't really tell.

111
00:06:20.050 --> 00:06:24.292
但我看不到马特在那儿。
So, but I can't see Matt there.

112
00:06:24.292 --> 00:06:26.819
马特，告诉我怎么回事。
Matt, tell me what's happening.

113
00:06:26.819 --> 00:06:28.910
任何人举手都很棒，谢谢。
Anyone has raised a hand fantastic,
thank you.

114
00:06:28.910 --> 00:06:31.399
但唯一让她生气的人。
But the only person that she feels mad.

115
00:06:31.399 --> 00:06:32.529
因为我背对着他。
Given my back was turned.

116
00:06:32.529 --> 00:06:35.379
所以，是的，马特，设置超时，它的后果是什么？
So yeah, Matt, set timeout,
where's its consequence?

117
00:06:35.379 --> 00:06:37.649
演讲者2: 它将会转到 web 浏览器功能，计时器功能。
&gt;&gt; Speaker 2: It's gonna go to the web
browser feature, the timer feature.

118
00:06:37.649 --> 00:06:39.302
威尔 · 森塔斯: 太棒了，太棒了。
&gt;&gt; Will Sentance: Fantastic, fantastic.

119
00:06:39.302 --> 00:06:41.480
网页浏览器功能。
Web browser feature.

120
00:06:41.480 --> 00:06:46.199
音箱2: 它会发送持续时间，值为0。
&gt;&gt; Speaker 2: It's going to send it
the duration, the value of zero.

121
00:06:46.199 --> 00:06:46.769
威尔 · 森塔斯: 非常好。
&gt;&gt; Will Sentance: Very nice.

122
00:06:46.769 --> 00:06:49.509
扬声器2: 还有运行打印 hello 的功能。
&gt;&gt; Speaker 2: And
the function to run print hello.

123
00:06:49.509 --> 00:06:50.370
威尔 · 森塔斯: 好的，非常好。
&gt;&gt; Will Sentance: All right,
that was excellent.

124
00:06:50.370 --> 00:06:52.620
这是非常好的沟通，谢谢你。
That was very well communicated,
thank you.

125
00:06:52.620 --> 00:06:53.430
没错。
Yeah, exactly.

126
00:06:53.430 --> 00:06:54.810
这就是我们的零毫秒。
There's our zero milliseconds.

127
00:06:54.810 --> 00:06:58.269
这就是我们的功能，在完成之后运行。
And there's our function to
run on the completion of that.

128
00:06:58.269 --> 00:07:01.574
那么，让我们更准确地说，现在，我们要增加的功能,
Well, let's be more precise nowadays,
our function to add to,

129
00:07:01.574 --> 00:07:03.682
扬声器2: 调用 stack。
&gt;&gt; Speaker 2: Call stack.

130
00:07:03.682 --> 00:07:04.956
调用栈扬声器2: 回调队列
&gt;&gt; Will Sentance: The call stack
&gt;&gt; Speaker 2: Callback queue

131
00:07:04.956 --> 00:07:06.009
Will Sentance: 回调队列到
&gt;&gt; Will Sentance: Callback queue up to

132
00:07:06.009 --> 00:07:09.949
0毫秒完成的回调队列。
the callback queue on the zero
millisecond completion, exactly.

133
00:07:09.949 --> 00:07:12.430
那么我们设置一个计时器。
So let's set up a timer.

134
00:07:15.089 --> 00:07:15.718
就是这个。
There it is.

135
00:07:15.718 --> 00:07:22.819
计时器，0毫秒。
Timer, zero milliseconds.

136
00:07:22.819 --> 00:07:25.480
各位，在零毫秒完成任务。
Complete at zero milliseconds everybody.

137
00:07:25.480 --> 00:07:26.199
讲者二: 对。
&gt;&gt; Speaker 2: True.

138
00:07:26.199 --> 00:07:27.889
威尔 · 森坦斯: 是的，没错，是的。
&gt;&gt; Will Sentance: Yeah, exactly, yeah.

139
00:07:27.889 --> 00:07:34.560
完成后，我们希望运行什么？
On completion,
what What do we want to have run?

140
00:07:34.560 --> 00:07:37.480
我们想在 JavaScript 中加入什么，托德？
What do we wanna have taken
back into JavaScript, Todd?

141
00:07:37.480 --> 00:07:38.269
演讲者2: 打印你好。
&gt;&gt; Speaker 2: Print hello.

142
00:07:38.269 --> 00:07:41.800
Will Sentance: 打印 hello，刚好在0毫秒完成
&gt;&gt; Will Sentance: Print hello, exactly
at zero milliseconds is it complete

143
00:07:41.800 --> 00:07:42.990
就像你们说的那样？
as you all said?

144
00:07:42.990 --> 00:07:44.689
当然了。
You bet it is.

145
00:07:44.689 --> 00:07:49.610
完成了，计时器完成了，我们要叫它
It is complete, the timer on
completion we're going to call

146
00:07:51.019 --> 00:07:54.430
印刷，他们应该只是告诉他们去从前面的怪物
Print, they should just tell them
go to go from front of monsters

147
00:07:54.430 --> 00:07:56.629
如果我现在移动到它的前屏幕上。
if I'm currently moving on
the front screen of it.

148
00:07:58.810 --> 00:07:59.990
不冷静。
No cools.

149
00:07:59.990 --> 00:08:01.019
就是这个。
There it is.

150
00:08:01.019 --> 00:08:01.519
你好。
print hello.

151
00:08:02.750 --> 00:08:05.269
会在那一刻出现，但我们现在就把它放上去。
is going to be at that moment but
let's put it up right now.

152
00:08:06.329 --> 00:08:07.790
我们现在就把它放上去。
Let's put it up right now.

153
00:08:07.790 --> 00:08:08.290
酷。
Cool.

154
00:08:12.737 --> 00:08:13.259
威尔 · 森塔斯: Que。
&gt;&gt; Will Sentance: Que.

155
00:08:16.649 --> 00:08:17.740
在这里，回调队列。
There it is, call back queue.

156
00:08:18.949 --> 00:08:21.740
所以在零毫秒时，它就完成了。
So at zero milliseconds, it's complete.

157
00:08:21.740 --> 00:08:24.964
Jeff，调用栈上的打印 hello 函数会怎么样？
Jeff, what's going to happen to that
print hello function on the call stack?

158
00:08:24.964 --> 00:08:27.910
威尔 · 森坦斯: 不，回调队列。
&gt;&gt; [INAUDIBLE]
&gt;&gt; Will Sentance: No, callback queue.

159
00:08:27.910 --> 00:08:28.639
太棒了，杰夫。
Excellent Jeff.

160
00:08:28.639 --> 00:08:29.800
在零毫秒。
At zero milliseconds.

161
00:08:29.800 --> 00:08:30.615
没错。
Exactly.

162
00:08:30.615 --> 00:08:32.235
毫秒。
Milliseconds.

163
00:08:32.235 --> 00:08:34.769
我们会有《你好》杂志。
We're gonna have print hello.

164
00:08:34.769 --> 00:08:39.759
我肯定它马上就会跑起来，对吧？
I'm sure it's gonna get to run almost
like almost immediately, right?

165
00:08:39.759 --> 00:08:40.769
是的。
Yeah.

166
00:08:40.769 --> 00:08:42.909
这么快就把那些很酷的东西发给我。
Send me all that cool stuff so soon.

167
00:08:42.909 --> 00:08:46.240
我们得到的是非常认真和渴望在这里。
We got is very earnest and
eager down here.

168
00:08:46.240 --> 00:08:49.159
可以人格化了。
It's ready to go anthropomorphized.

169
00:08:49.159 --> 00:08:50.340
功能是非常兴奋的。
Function is very excited.

170
00:08:50.340 --> 00:08:52.450
我等不及了。
It's almost I can't wait.

171
00:08:54.129 --> 00:08:55.830
准备进入调用堆栈。
Ready to go off onto the call stack.

172
00:08:57.570 --> 00:09:01.429
设置超时工作是在设置计时器和后台时间时完成的
Set timeouts job was done when it set up
the timer and the background time his job

173
00:09:01.429 --> 00:09:04.460
是因为它将打印机的 low 函数放在回调队列中。
is done because it put the printer
low function in the callback queue.

174
00:09:04.460 --> 00:09:08.269
美丽的呼喊对每一个说话的人说非常好。
Beautiful shout out to everybody
who verbalized says very nice.

175
00:09:08.269 --> 00:09:12.370
现在我们来看看最难对付的家伙
We now plow on to the The toughee

176
00:09:12.370 --> 00:09:17.445
我们要以毫秒的速度继续前进。
we area gonna plow on
to at one millisecond.

177
00:09:17.445 --> 00:09:20.179
尽可能保持整洁。
And try to keep it as neat as possible.

178
00:09:20.179 --> 00:09:21.950
用一毫秒的时间来解决这个问题。
Plow into it one millisecond.

179
00:09:21.950 --> 00:09:28.620
左手边的伊森，我们在下一行做什么，左手边？
Left-hand side Ethan, what are we doing
in the next line, left-hand side?

180
00:09:28.620 --> 00:09:30.652
说话人2: 声明常量未来数据。
&gt;&gt; Speaker 2: Declare
the const future data.

181
00:09:30.652 --> 00:09:35.803
未来数据，就是这个,
&gt;&gt; Will Sentance: futureData, there it is,

182
00:09:35.803 --> 00:09:38.496
futuredata.
futureData.

183
00:09:38.496 --> 00:09:43.700
这是一个双管齐下的门面。
It is a two-pronged facade.

184
00:09:43.700 --> 00:09:49.029
不，不是的，它会有我们接电话的结果,
No it's not, it's going to have
the result of our fetch call,

185
00:09:49.029 --> 00:09:51.990
它的 JavaScript 结果。
its JavaScript consequence.

186
00:09:51.990 --> 00:09:58.985
作为未来数据的值，因为获取外观函数的获取调用,
As the value of future data, because that
fetch call, that fetch facade function,

187
00:09:58.985 --> 00:10:04.320
获取 facade 功能是一个双管齐下的 facade 功能。
that fetch facade function is
a two-pronged facade function.

188
00:10:04.320 --> 00:10:09.110
在浏览器中查看网络请求，在 JavaScript 中查看内容。
Look network request in the web
browser and stuff in JavaScript.

189
00:10:09.110 --> 00:10:12.039
让我们来看看 JavaScript 的结果。
Let's look at it stuff in
JavaScript consequence.

190
00:10:12.039 --> 00:10:14.100
所以我们要打电话给 fetch。
So we're gonna call fetch.

191
00:10:14.100 --> 00:10:18.960
就是这样，我们只有一个字符串，而 JavaScript 只有一个字符串。
There it is, with our just a string,
by the way to JavaScript is just a string.

192
00:10:18.960 --> 00:10:21.490
有没有人把他的数据
Is there anyone that's
taken his data down to

193
00:10:21.490 --> 00:10:23.309
让浏览器变得更有意义？
the browser that it
becomes more meaningful?

194
00:10:24.580 --> 00:10:26.840
到底是什么？
What exactly is it?

195
00:10:26.840 --> 00:10:28.996
推特推特网。
Twitter twitter.com.

196
00:10:28.996 --> 00:10:32.159
我们只是稍微缩短一下。
We're just going to shorten it slightly.

197
00:10:32.159 --> 00:10:34.279
对，就是这样。
Yeah, there we go.

198
00:10:34.279 --> 00:10:43.009
好的，这是 JavaScript 的结果，Dan 的 JavaScript 结果是什么？
Okay, it's JavaScript consequence, is what
Dan what's his JavaScript consequence?

199
00:10:43.009 --> 00:10:44.169
它创造了一个新的承诺。
It creates a new promise.

200
00:10:44.169 --> 00:10:48.519
是的，立即返回，因此存储在左边
Yeah, exactly returns out immediately,
which therefore gets stored on the left

201
00:10:48.519 --> 00:10:54.429
在这一毫秒的时刻，一个物体，特殊的物体。
hand side in this one millisecond
moment an object, special object.

202
00:10:54.429 --> 00:11:00.035
承诺对象，这将被存储在未来的数据中。
Promise object, and that's gonna be
stored over here in future data.

203
00:11:00.035 --> 00:11:07.273
什么是意志句子: 自动的
And what are
&gt;&gt; Will Sentance: The automatic

204
00:11:07.273 --> 00:11:11.330
上面有房产吗 Dan？
properties on it, Dan?

205
00:11:11.330 --> 00:11:15.820
说话人2: 它的价值和意愿句子: 未完成的是,
&gt;&gt; Speaker 2: Its value and
&gt;&gt; Will Sentance: Unfulfilled which is,

206
00:11:17.139 --> 00:11:21.399
这是一个正好是一个数组的数组，现在是一个空数组，但
which is what a array of exactly
an array right now an empty array but

207
00:11:21.399 --> 00:11:24.740
这将是一个函数的数组衍生从做得好说。
it will be an array of function
spawned from done well said.

208
00:11:24.740 --> 00:11:25.799
就是这个。
There it is.

209
00:11:25.799 --> 00:11:31.769
他们去数组，他们值属性，让我们不要忘记。
They go to the array and
they value property and let's not forget.

210
00:11:31.769 --> 00:11:36.419
该值属性一旦更新就会立即更新
That value property is soon
as it's updated, immediately

211
00:11:38.100 --> 00:11:42.970
将触发存储在该数组中的函数自动运行。
is going to trigger the function stored
in that array to automatically run.

212
00:11:44.740 --> 00:11:48.059
非常好，这是因为如果我们，顺便说一下。
Very nice, which is because if we,
and by the way.

213
00:11:49.509 --> 00:11:53.379
我有一种感觉，这个价值属性将会紧密联系在一起
This value property here I have a feeling
is going to be intimately connect

214
00:11:53.379 --> 00:11:56.309
另一个后果，另一个刺
with the other consequence,
the other prong

215
00:11:56.309 --> 00:12:00.179
从获取，这是对网络在网络浏览器中的对话。
from fetch which is speaking to
the network in the web browser.

216
00:12:00.179 --> 00:12:04.320
一旦完成，返回给响应对象的值
And as soon as that's done, that value
that comes back the response object as

217
00:12:04.320 --> 00:12:08.629
凯拉把它放在前面，将要填写这个值属性
Kayla put it earlier,
is going to fill in that value property

218
00:12:08.629 --> 00:12:12.080
回到 JavaScript，它会自动触发任何函数
Back in JavaScript which is going to
trigger automatically any functions in

219
00:12:12.080 --> 00:12:16.879
这个值作为函数的输入的数组，或者这些函数。
that array with that value as the input
of that function, or those functions.

220
00:12:16.879 --> 00:12:18.849
好的，太好了。
All right, perfect.

221
00:12:18.849 --> 00:12:25.360
现在让我们把手交给另一个我的上帝，让我们现在处理另一个取物的尖端。
Let's now hand to the other my God,
let's now handle the other prong of fetch.

222
00:12:25.360 --> 00:12:26.802
蓝色的笔，是浏览器的东西。
Blue pen, it's web browser stuff.

223
00:12:29.225 --> 00:12:34.335
威尔 · 森塔斯: 那么，请提醒我们，布雷登，什么是网络
&gt;&gt; Will Sentance: So, just remind us,
Brayden, what is the web

224
00:12:34.335 --> 00:12:39.929
浏览器的特性。
browser feature that
gets sort of turned on.

225
00:12:39.929 --> 00:12:40.700
讲者2: 网络请求。
&gt;&gt; Speaker 2: Network request.

226
00:12:40.700 --> 00:12:41.399
网络请求。
&gt;&gt; Will Sentance: Network request.

227
00:12:41.399 --> 00:12:43.279
非常好。
Well done exactly.

228
00:12:43.279 --> 00:12:46.059
网络请求。
Network request.

229
00:12:47.250 --> 00:12:48.669
就是这个。
There it is.

230
00:12:48.669 --> 00:12:50.615
它来了，它来了，它来了网页浏览器,
down it comes, down it comes web browser,

231
00:12:50.615 --> 00:12:56.491
我们开始吧，威尔 · 森特斯: 我最好的姿势,
here we go,
&gt;&gt; Will Sentance: My best posture,

232
00:12:56.491 --> 00:12:59.370
网络请求。
network request.

233
00:12:59.370 --> 00:13:00.080
好了，我们走吧。
All right, there we go.

234
00:13:00.080 --> 00:13:02.309
这不是一个大厅通行证的谈话。
It wouldn't be a hall pass talk.

235
00:13:03.570 --> 00:13:04.288
就是这个。
There it is.

236
00:13:05.309 --> 00:13:08.769
现在，我们要求，我们需要什么信息，亚当，在后面？
Now, we request, what info do we need for
it, Adam, at the back?

237
00:13:08.769 --> 00:13:10.940
对于那个网络请求我们需要什么信息？
What info do we need for
that network request?

238
00:13:10.940 --> 00:13:11.789
讲者2: 地址。
&gt;&gt; Speaker 2: The address.

239
00:13:11.789 --> 00:13:13.440
威尔 · 森坦斯: 是的，我们有两部分感兴趣的内容。
&gt;&gt; Will Sentance: Yep,
we've got two parts of interest.

240
00:13:14.980 --> 00:13:16.980
有人想告诉我吗，布雷登？
Anyone wanna tell me, Brayden?

241
00:13:16.980 --> 00:13:18.029
讲者二: 域名 威尔 · 森坦斯: 域名
&gt;&gt; Speaker 2: Domain.
&gt;&gt; Will Sentance: The domain name

242
00:13:18.029 --> 00:13:18.970
及-讲者二: 名录。
and-
&gt;&gt; Speaker 2: Directory.

243
00:13:18.970 --> 00:13:20.059
威尔 · 森特斯: 是的，另一部分，确切地说,
&gt;&gt; Will Sentance: Yeah,
the other part of, exactly,

244
00:13:20.059 --> 00:13:22.899
我们想从中获取数据的部分。
the portion of it we wanna get data from.

245
00:13:22.899 --> 00:13:30.429
所以 domain 是 Twitter.com，path 是 / will / 1，默认是 get。
So domain is Twitter .com,
path is /will/1, and it defaults to get.

246
00:13:31.990 --> 00:13:35.919
所以在大约1毫秒的时候,
And so at roughly 1 millisecond,

247
00:13:37.590 --> 00:13:42.529
我们开始前往，我们在哪里做这个？
we start heading off to,
where shall we do this?

248
00:13:42.529 --> 00:13:49.129
也许嗯，我们认为任何我猜下降到立方体非常小。
Maybe Hmm, we thought any off I
guess down to cube very small.

249
00:13:49.129 --> 00:13:53.659
去推特的总部，推特的总部，看看那个，远远的。
To Twitter's headquarters,
Twitter's HQ, look at that, far away.

250
00:13:55.860 --> 00:14:00.710
就是这样，一条打招呼的信息，我需要一些新的消息,
There it is, with that of a message
saying hello, I need some new tweets,

251
00:14:00.710 --> 00:14:01.580
所以那些推特。
so those tweets.

252
00:14:01.580 --> 00:14:03.837
我们发送的时间大约是。
And we send that off at roughly.

253
00:14:03.837 --> 00:14:06.731
零毫秒。
Zero milliseconds.

254
00:14:06.731 --> 00:14:08.360
真漂亮。
Beautiful.

255
00:14:08.360 --> 00:14:09.399
就是这个。
There it is.

256
00:14:09.399 --> 00:14:12.200
在那个时候它是完整的吗？
And is it a complete at that point?

257
00:14:12.200 --> 00:14:13.899
数据拿回来了吗，丹？
Do we have the data back, Dan?

258
00:14:13.899 --> 00:14:17.259
不，我们知道我们不想把它放在那里。
No, we know we don't want
put exactly there it is.

259
00:14:17.259 --> 00:14:20.360
但是当它完成时，疣举起你的手。
But when it is complete,
warts Raise your hand.

260
00:14:20.360 --> 00:14:22.759
你想告诉我接下来会发生什么。
You want to tell me what's gonna happen.

261
00:14:22.759 --> 00:14:26.169
回到 JavaScript，在 JavaScript 中我们自己的补全是什么？
Back in JavaScript, what's our own
completion back in JavaScript?

262
00:14:26.169 --> 00:14:28.759
他要给你看一个比萨饼。
He was going to show you a pizza please.

263
00:14:28.759 --> 00:14:33.389
返回的对象被输入到数据的 value 属性中。
The returned object is entered into
the value property of your data.

264
00:14:33.389 --> 00:14:34.100
非常非常好。
Very, very nice.

265
00:14:34.100 --> 00:14:37.200
我们要保持它的简单，只是说一个字符串，实际的 tweet 本身，但
We're going to keep it simple and just say
a string, the actual tweet itself, but

266
00:14:37.200 --> 00:14:37.799
是的，没错。
yeah, exactly.

267
00:14:37.799 --> 00:14:41.169
这将会填充因为
That's going to go and fill in the Because

268
00:14:41.169 --> 00:14:45.950
未来的数据是我们存储取冷的另一个后果的地方。
future data is where we stored the other
consequence of the fetch cool.

269
00:14:45.950 --> 00:14:49.220
这个问题在 JavaScript 中产生了影响，让我们能够跟踪
It's problem that has an effect in
JavaScript that lets us keep track

270
00:14:49.220 --> 00:14:51.129
和我们在后台做的事情一致。
consistently with what we're
doing in the background.

271
00:14:51.129 --> 00:14:51.799
我喜欢。
I love that.

272
00:14:51.799 --> 00:14:54.090
看看这种一致性，在幕后做一些事情。
Look at that consistency,
doing something in the background.

273
00:14:55.210 --> 00:14:57.029
前景中有一个漂亮的承诺对象,
Got a nice promise object
in the foreground,

274
00:14:57.029 --> 00:14:58.669
在 JavaScript 中保持跟踪。
in JavaScript to keep track of it.

275
00:14:58.669 --> 00:15:01.669
你知道吗，它会更新它的 value 属性，当背景
You know what, it's going to be updated
its value property when the background

276
00:15:01.669 --> 00:15:03.779
工作完成了，就像彼得说的那样。
work complete, just as Peter said.

277
00:15:03.779 --> 00:15:08.897
所以未来的数据，你的价值
So future data, your value

278
00:15:08.897 --> 00:15:13.320
就是背景调查的结果
will be whatever comes back
from the background work, but

279
00:15:13.320 --> 00:15:17.919
一毫秒的背景工作还远远没有完成。
that background work at one
millisecond is so far from being done.

280
00:15:17.919 --> 00:15:21.710
想象一下，如果我们不得不在 JavaScript 的前台等待它，或者
And imagine if we had to wait for
it in the foreground in JavaScript, or

281
00:15:21.710 --> 00:15:24.669
我们会在那儿坐上一会儿，大概转动70毫秒。
we'd be sitting there for while,
probably turning 70 milliseconds.

282
00:15:24.669 --> 00:15:28.549
我们的语言是非常务实的，但相反。
And our language would be very pragmatic,
but instead.

283
00:15:28.549 --> 00:15:31.408
顺便说一句，干得好，大家我们几乎完成了所有的东西相对来说,
By the way, well done everybody we almost
finished all the fetch stuff relatively,

284
00:15:31.408 --> 00:15:31.940
舒服地。
comfortably.
