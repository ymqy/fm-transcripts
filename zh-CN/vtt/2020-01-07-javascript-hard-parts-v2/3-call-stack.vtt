WEBVTT

1
00:00:00.140 --> 00:00:04.115
威尔 · 森坦斯: 让我们来谈谈这个交织在和中的执行线程
&gt;&gt; Will Sentance: Let's just talk about
this thread of execution that wove in and

2
00:00:04.115 --> 00:00:04.794
编织。
wove out.

3
00:00:04.794 --> 00:00:07.809
我们知道当我们运行完乘以2,
We knew that when we finished
running multiply by two,

4
00:00:07.809 --> 00:00:09.842
称之为用 parens 调用它,
calling it invoking it with parens,

5
00:00:09.842 --> 00:00:13.723
我们知道我们的死刑威胁会传到 global 那里。
we knew that our threat of execution
was gonna come back out to global.

6
00:00:13.723 --> 00:00:18.175
我们可以直观地看到它是在全局 JavaScript 代码中运行的
We kind of visually saw that it's being
run within the code of global JavaScript

7
00:00:18.175 --> 00:00:22.362
需要做更多的工作，这是一个更准确和精确的轨道,
needs to do more work on that is a track
that more accurately and precisely,

8
00:00:22.362 --> 00:00:25.164
它有一个叫做调用堆栈的功能。
it has something called
the call stack to do, so.

9
00:00:25.164 --> 00:00:30.125
追踪当前正在运行的函数
JavaScript keeps track of what
function is currently running by using

10
00:00:30.125 --> 00:00:34.496
这是我们理解平台的最后一部分
this final part of our platform
of understanding our platform

11
00:00:34.496 --> 00:00:37.963
调用栈是 JavaScript 引擎的一部分。
of the JavaScript engine
called the call stack.

12
00:00:37.963 --> 00:00:43.405
这是一种在我们的电脑上储存信息的传统方式,
Here it is, it is a traditional way of
storing information on our computer,

13
00:00:43.405 --> 00:00:47.145
我们有很多种方法，数组，对象,
we have a number of ways,
arrays, we have objects,

14
00:00:47.145 --> 00:00:49.790
我们还有所谓的堆栈。
we also have what's called stacks.

15
00:00:49.790 --> 00:00:52.920
我们不会深入研究他们的前提，但是
We're not gonna go deeply
into their premise, but

16
00:00:52.920 --> 00:00:56.264
堆栈的一个关键问题是，当你在堆栈中添加一些东西时,
a key thing with a stack is
when you add something to it,

17
00:00:56.264 --> 00:01:00.151
当你运行一个函数时，我们要把它添加到调用堆栈中。
when you run a function we're
going to add it to our call stack.

18
00:01:00.151 --> 00:01:04.420
所以当我们开始运行乘以2的时候,
So when we started running
multiply by two up here,

19
00:01:04.420 --> 00:01:10.096
我们把它加到调用堆栈中，乘以2再加上3的输入。
we add it to our call stack,
multiply by two with the input of three.

20
00:01:10.096 --> 00:01:14.882
现在 JavaScript 已经确定了当前正在运行的代码在哪里
Now JavaScript has certainty of
what is currently running where is

21
00:01:14.882 --> 00:01:17.451
我们的行刑线索吗？
our thread of execution right now?

22
00:01:17.451 --> 00:01:20.924
因为一个关键的单一规则和
Well, it's busy inside a multiple by two,
cuz the one key single rule and

23
00:01:20.924 --> 00:01:23.891
我们只和一个非常非常重要的东西打交道,
stack is we're only engaged with a very,
very top thing on it,

24
00:01:23.891 --> 00:01:26.243
这是我们唯一能接触到的东西。
that's the only thing
we're interacting with.

25
00:01:26.243 --> 00:01:29.432
所以不管调用堆栈的顶部是什么，那就是我们现在所处的位置。
So whatever's at the top of the call
stack, that's where we are right now.

26
00:01:29.432 --> 00:01:34.242
只要我们运行完这个函数，并且
As soon as we finish
running that function, and

27
00:01:34.242 --> 00:01:38.709
顺便说一句，亚当，事实上，杰夫？
by the way, Adam, actually, [SOUND] Jeff?

28
00:01:38.709 --> 00:01:43.146
Jeff 告诉我们我们已经完成了一个函数的执行,
Jeff, what, Jeff tells us,
we have finished executing a function,

29
00:01:43.146 --> 00:01:46.396
什么关键字说，结束这个功能，继续前进。
what keywords says,
end this function, move on.

30
00:01:46.396 --> 00:01:46.945
讲者二: 报税表。
&gt;&gt; Speaker 2: Return.

31
00:01:46.945 --> 00:01:52.179
Will Sentance: 完全返回，只要我们点击返回这个函数
&gt;&gt; Will Sentance: Return exactly,
as soon as we hit return this function

32
00:01:52.179 --> 00:01:58.228
执行上下文从调用堆栈中弹出，那么最重要的是什么？
execution context popped off
the call stack, so what's top?

33
00:01:58.228 --> 00:02:02.539
这是不令人印象深刻的，那么现在调用堆栈的顶部是什么？
That was underwhelming, so
what is top of the call stack now?

34
00:02:02.539 --> 00:02:03.326
有什么问题吗？
Well is there anything?

35
00:02:03.326 --> 00:02:08.058
是的，总是在呼叫堆栈底部的人是我们的全球
Yeah, always on the bottom of
the call stack folk is our global

36
00:02:08.058 --> 00:02:09.699
执行上下文。
execution context.

37
00:02:09.699 --> 00:02:13.348
考虑一下全局标签函数中的所有代码，以及
Think of all of our code inside
a function with the label global, and

38
00:02:13.348 --> 00:02:16.485
一旦我们打开 JavaScript 开始运行代码,
as soon as we turn on JavaScript,
start running the code,

39
00:02:16.485 --> 00:02:19.058
运行那个全局函数，运行整个代码。
run that global function
run the overall code.

40
00:02:19.058 --> 00:02:22.283
所以一旦你开始运行 JavaScript,
So that's always as soon as
you start running JavaScript,

41
00:02:22.283 --> 00:02:23.966
在底部加上 global。
global is added on the bottom.

42
00:02:23.966 --> 00:02:27.977
所以当我们开始运行乘以2的时候，我们把它加到最上面,
And that's always there, so when we start
running multiply by two we add it on top,

43
00:02:27.977 --> 00:02:31.265
当我们运行完它，我们移除它，然后我们回到哪里？
when we finish running it, we remove it,
and where do we go back to?

44
00:02:31.265 --> 00:02:35.375
别慌电话里还有什么情况 Kayla？
Well don't panic,
what's left on the call stat, Kayla?

45
00:02:35.375 --> 00:02:37.353
讲者三: 全球 威尔 · 森坦斯: 全球化，就是这样,
&gt;&gt; Speaker 3: Global.
&gt;&gt; Will Sentance: Global, and there it is,

46
00:02:37.353 --> 00:02:42.317
太好了，谢谢你，凯拉，就是这样，当我们开始运行乘以2
excellent, thank you Kayla, there it is,
when we start running multiply by two

47
00:02:42.317 --> 00:02:46.776
再加上10的输入，我们把它加到调用松弛上，就是这样。
again with the input of 10, we add
it onto the call slack, there it is.

48
00:02:46.776 --> 00:02:50.002
当我们运行完之后，我们把它取下来，JavaScript 不会慌乱，然后,
When we finish running it, we take it off,
and JavaScript doesn't panic and go,

49
00:02:50.002 --> 00:02:50.576
我该去哪儿？
where do I go?

50
00:02:50.576 --> 00:02:55.923
回到全局，如果我在 multimyby2中运行另一个函数,
It goes back to global, if I were to run
another function inside of multiplyBy2,

51
00:02:55.923 --> 00:03:01.117
然后在上面加一个，再在里面加一个，然后加到上面。
that would be added on top, another inside
of that, that would be added on top.

52
00:03:01.117 --> 00:03:04.603
运行完那个程序，我要回局里吗？
Finish running that one,
do I go back to global?

53
00:03:04.603 --> 00:03:08.812
我回到我开始运行这个功能的地方，换句话说，把它关掉
I go back to wherever I started running
that function, in other words, take it off

54
00:03:08.812 --> 00:03:12.727
这是堆栈的关键前提。
the stack and about where I was before and
that's the key premise of a stack.

55
00:03:12.727 --> 00:03:17.556
好的，但是我们会看到更多的酷的一面
Okay, but we're gonna see the cool side
quite a bit more over the session where

56
00:03:17.556 --> 00:03:19.176
有个通话功能。
there's a call feature.

57
00:03:19.176 --> 00:03:24.287
这就是人们，这就是 JavaScript 的三个核心组件,
That is it people, that is the three
core components of JavaScript,

58
00:03:24.287 --> 00:03:29.413
当我们一行一行地检查代码时，我们有存储数据的记忆。
we have our memory to store data as
we go through the code line by line.

59
00:03:29.413 --> 00:03:33.646
令人惊讶的是，我们可以存储代码功能，然后我们可以运行
And amazingly, to store code
functionality, and we can then run and

60
00:03:33.646 --> 00:03:37.662
触发运行代码时，我们想要，这不是一件小事,
trigger to run code whenever we want,
that's not a small thing,

61
00:03:37.662 --> 00:03:39.414
真是不可思议。
that's quite remarkable.

62
00:03:39.414 --> 00:03:43.223
在排序数据中，我们看到了运行的代码，仔细想想，你真的可以
And in a sort data, we saw code to run,
think about it, you're literally able to

63
00:03:43.223 --> 00:03:46.475
随时在你的代码中启动一个你自己选择的小程序。
start a little mini program of your
choice at any moment in your code.

64
00:03:46.475 --> 00:03:50.810
然后，我们有一个执行线程，一行一行地检查代码,
And, then we have the thread of execution
to go through the code line by line,

65
00:03:50.810 --> 00:03:55.078
它大部分时间都在存储数据，但它同时也把一些存储的数据
a lot of the time it's storing data,
but it's also taking some of the stored

66
00:03:55.078 --> 00:03:57.901
然后说开始运行它。
functionality code and
saying start running it.

67
00:03:57.901 --> 00:04:01.752
我们创建了一个小程序一个小子程序,
We create a little mini program,
a little sub-program,

68
00:04:01.752 --> 00:04:04.346
我们进入的执行环境
a execution context into which we go and

69
00:04:04.346 --> 00:04:09.626
当我们在那个函数里的时候，把我们存储的所有数据划分开来。
compartmentalize any data we're storing
while we're inside that function.

70
00:04:09.626 --> 00:04:14.911
当我们退出该函数时，除了返回的内容外，所有内容都被删除了,
When we exit that function, all is
deleted, besides whatever we return out,

71
00:04:14.911 --> 00:04:18.514
实际上我们可以看到所有的都被删除了,
let's actually show that all is deleted,
the size,

72
00:04:18.514 --> 00:04:23.096
无论我们返回什么，然后运行另一个函数也是这样。
whatever we return out, and
then run another function do the same.

73
00:04:23.096 --> 00:04:26.360
我们跟踪我们正在运行的函数
We keep track of the functions
we're running and

74
00:04:26.360 --> 00:04:30.029
我们的执行线程正在使用我们的调用栈。
where our thread of execution
is using our call stack.
