WEBVTT

1
00:00:00.240 --> 00:00:05.108
威尔 · 森特斯: 这条蓝线下面是
&gt;&gt; Will Sentance: Below
this blue line here is

2
00:00:05.108 --> 00:00:10.612
就是那些不存在的东西
gonna be the things that are not

3
00:00:10.612 --> 00:00:16.547
在 JavaScript 中发生的事情。
happening in JavaScript at all.

4
00:00:16.547 --> 00:00:20.728
它们将成为我们网页浏览器的特性。
They're gonna be our web browser features.

5
00:00:20.728 --> 00:00:22.224
它们是在 JavaScript 中吗？
Are they in JavaScript?

6
00:00:22.224 --> 00:00:24.823
不不不绝对不行。
No, no, no, no, absolutely not.

7
00:00:24.823 --> 00:00:27.713
跟平常一样。
Up here same as normal.

8
00:00:27.713 --> 00:00:33.424
这是 JavaScript 中的全局内存。
Here's our global memory in JavaScript.

9
00:00:33.424 --> 00:00:34.978
就是这个。
There it is.

10
00:00:34.978 --> 00:00:39.289
这是我们的调用堆栈。
Here's our call stack over here.

11
00:00:39.289 --> 00:00:41.895
就是这个。
There it is.

12
00:00:41.895 --> 00:00:46.762
好了，一号线，一号线,
And here we go, line one, line one,

13
00:00:46.762 --> 00:00:52.268
马克，一号线，我们该怎么办，朋友？
Mark, line one, what do we do my friend?

14
00:00:52.268 --> 00:00:54.353
马克: 我们正在定义一个函数 printHello。
&gt;&gt; Mark: We're defining
a function printHello.

15
00:00:54.353 --> 00:00:58.359
威尔 · 森塔斯: 马克说得很好，他只是回来了，然后直奔主题,
&gt;&gt; Will Sentance: Very nice from Mark, he
just came back in and straight on point,

16
00:00:58.359 --> 00:00:59.779
马克说得太好了。
excellent from Mark.

17
00:00:59.779 --> 00:01:05.141
我们正在定义一个函数 printHello，就是这个。
We're defining a function printHello,
there it is.

18
00:01:05.141 --> 00:01:07.105
被拯救，美丽。
Saved, beautiful.

19
00:01:07.105 --> 00:01:10.129
好吧，现在事情变得有趣了。
Okay, now things get interesting.

20
00:01:10.129 --> 00:01:14.120
现在我们进入下一行。
Now we head to the next line.

21
00:01:14.120 --> 00:01:16.519
这条线在干什么？
What is this line doing?

22
00:01:16.519 --> 00:01:21.359
我们要，我删除了大部分，所以我要把它放回去。
We are going to, I erased much of it so
I'm gonna put it back on.

23
00:01:21.359 --> 00:01:28.680
但是我们的 web 浏览器是 JavaScript 和 JavaScript 的结合
But we had our web Browser being
a combination of JavaScript and

24
00:01:28.680 --> 00:01:36.289
我们从 JavaScript 中获取标签的浏览器特性。
browser features that we get labels for
from within JavaScript.

25
00:01:36.289 --> 00:01:41.929
看看这个，setTimeout 是 web 浏览器中计时器的标签。
And look at this one here, setTimeout is
a label for a timer in the web browser.

26
00:01:41.929 --> 00:01:47.378
那么让我们开始 JavaScript 的第一行
So let's do our first line of JavaScript

27
00:01:47.378 --> 00:01:52.829
这只是一个命令,
that's really just gonna be a command,

28
00:01:52.829 --> 00:01:58.778
网页浏览器功能的信息。
a message down to the web
browser features.

29
00:01:58.778 --> 00:02:01.200
在 JavaScript 中它甚至什么都做不了。
It's not even gonna do
anything in JavaScript.

30
00:02:01.200 --> 00:02:05.183
在这里，setTimeout。
Here it is, setTimeout.

31
00:02:05.183 --> 00:02:06.052
好了我们开始吧。
All right, here we go.

32
00:02:06.052 --> 00:02:08.352
我可以请人到白板上来吗，马克？
Am I allowed to have someone
come to the whiteboard, Mark?

33
00:02:08.352 --> 00:02:13.318
不，好吧，伊森，这是你的荣幸，朋友。
No, all right, Ethan,
it is your honored moment my friend.

34
00:02:13.318 --> 00:02:14.304
过来。
Come up here.

35
00:02:14.304 --> 00:02:16.870
伊森: (笑)威尔 · 森坦斯: 拿着那支蓝色的钢笔。
&gt;&gt; Ethan: [LAUGH]
&gt;&gt; Will Sentance: Take the blue pen.

36
00:02:16.870 --> 00:02:17.536
伊森: 我的天啊。
&gt;&gt; Ethan: My goodness.

37
00:02:17.536 --> 00:02:23.691
Will Sentance: 然后在 setTimeout 在 JavaScript 中的位置给我画一条线
&gt;&gt; Will Sentance: And draw a line for
me from where setTimeout is in JavaScript

38
00:02:23.691 --> 00:02:29.118
它的后果将会在网页浏览器中显现。
to where its consequence
will be in the web browser.

39
00:02:29.118 --> 00:02:33.471
给我画一条线，从它在 JavaScript 中的位置到它的结果可能出现的位置
Draw me a line from where it is in
JavaScript to where its consequence might

40
00:02:33.471 --> 00:02:35.167
在这块黑板上。
be on this blackboard here.

41
00:02:35.167 --> 00:02:36.223
伊森: 好吧 威尔 · 森塔斯: 这是一个很长的
&gt;&gt; Ethan: All right.
&gt;&gt; Will Sentance: It's a long

42
00:02:36.223 --> 00:02:37.134
直线。
straight line.

43
00:02:37.134 --> 00:02:43.050
议长4: (笑)威尔 · 森坦斯: 他说得对吗？
&gt;&gt; Speaker 4: [LAUGH]
&gt;&gt; Will Sentance: Is he right?

44
00:02:43.050 --> 00:02:44.247
让我们为他鼓掌。
Let's give him a huge hand.

45
00:02:44.247 --> 00:02:46.962
观众: (掌声)威尔 · 森坦斯: 谢谢你，伊森。
&gt;&gt; Audience: [APPLAUSE]
&gt;&gt; Will Sentance: Thank you, Ethan.

46
00:02:46.962 --> 00:02:49.320
伊森给你一个好的。
One up from Ethan, all right.

47
00:02:49.320 --> 00:02:50.793
不，好吧，很好。
No, okay, good.

48
00:02:50.793 --> 00:02:52.550
不，那很好，很好。
No, that's perfect, perfect.

49
00:02:52.550 --> 00:02:57.558
我们在网页浏览器中设置了一个计时器。
We have set up a timer in the web browser.

50
00:02:57.558 --> 00:03:00.545
这就是了，与 JavaScript 无关。
There it is,
nothing to do with JavaScript.

51
00:03:00.545 --> 00:03:02.629
在浏览器中有我们的计时器。
In the web browser there's our timer.

52
00:03:02.629 --> 00:03:07.372
布雷登有什么消息,
Now, what information Brayden,

53
00:03:07.372 --> 00:03:13.429
我们需要一个成功的计时器吗？
do we need for
this to be a successful timer?

54
00:03:13.429 --> 00:03:14.300
布雷登: printHello。
&gt;&gt; Brayden: printHello.

55
00:03:14.300 --> 00:03:15.729
威尔 · 森特斯: 是的，是的，当然。
&gt;&gt; Will Sentance: Yeah, yeah, sure.

56
00:03:15.729 --> 00:03:18.728
但还有更重要的事吗，杰夫？
But something even more important, Jeff?

57
00:03:18.728 --> 00:03:19.611
杰夫: 持续时间。
&gt;&gt; Jeff: Duration.

58
00:03:19.611 --> 00:03:21.527
威尔 · 森特斯: 计时器的持续时间，完全正确。
&gt;&gt; Will Sentance: Duration of the timer,
exactly.

59
00:03:21.527 --> 00:03:24.510
也就是1000毫秒。
Which is 1,000 milliseconds.

60
00:03:24.510 --> 00:03:27.806
就是这样，1000毫秒。
So there we go, 1,000 milliseconds.

61
00:03:27.806 --> 00:03:31.776
也就是说，暂停，结果,
That is to say, timeouts, consequences,

62
00:03:31.776 --> 00:03:36.621
所有的结果都在浏览器里，什么功能？
consequences all in the web browser,
what feature?

63
00:03:36.621 --> 00:03:42.098
这是计时器，需要1000毫秒。
It's the timer and
it's gonna take 1,000 milliseconds.

64
00:03:42.098 --> 00:03:43.317
就是这个。
There it is.

65
00:03:43.317 --> 00:03:46.653
现在，我们不是无缘无故地设置一个计时器，我们是这样设置的
Now, we're not setting up a timer for
no reason, we're setting it up so

66
00:03:46.653 --> 00:03:48.639
我们可以在它完成后运行这个函数。
we can run the function on its completion.

67
00:03:48.639 --> 00:03:53.614
所以让我们来看看完成时和完成时,
So let's have over here On Completion and
On Completion,

68
00:03:53.614 --> 00:03:57.479
马特，我们希望发生什么？
Matt, what are we gonna
want to have happen?

69
00:03:57.479 --> 00:03:58.746
我们想运行 printHello。
We want to run printHello.

70
00:03:58.746 --> 00:04:02.329
我们想打电话，我们想用 JavaScript 运行 printHello。
&gt;&gt; Matt: We want to call, we want to
run printHello back in JavaScript.

71
00:04:02.329 --> 00:04:06.544
威尔 · 森坦斯: 所以你要抓住 printHello 函数，和
&gt;&gt; Will Sentance: So you're gonna grab
the printHello function as well, and

72
00:04:06.544 --> 00:04:08.748
就是这儿，我们的公主。
there it is, our printHello.

73
00:04:10.169 --> 00:04:13.340
威尔 · 森塔斯: 完成之后，美丽。
&gt;&gt; Will Sentance: On completion,
beautiful.

74
00:04:13.340 --> 00:04:17.043
现在，它完成了吗？
Now, is it complete?

75
00:04:17.043 --> 00:04:22.908
这就是为什么我们必须在我们的谜题中加入一个新的部分。
And this is wherefore we're gonna
have to add a new part to our puzzle.

76
00:04:22.908 --> 00:04:27.557
那是我的绿色笔，代表时间的流逝。
And that's my green pen that
represents time passing.

77
00:04:27.557 --> 00:04:32.492
所以我们要引爆它
So we're setting this off

78
00:04:32.492 --> 00:04:37.872
大概是0，很漂亮,
at roughly 0, beautiful,

79
00:04:37.872 --> 00:04:43.038
大概0毫秒。
roughly 0 milliseconds.

80
00:04:43.038 --> 00:04:45.817
这时，这一行触发了后台的工作。
That's when this line triggers
the work in the background.

81
00:04:45.817 --> 00:04:50.752
这个计时器，这个1000毫秒的计时器 Dan,
At 0 millisecond folk, is this timer,
this 1,000 milliseconds timer Dan,

82
00:04:50.752 --> 00:04:51.747
完成了吗？
is it complete?

83
00:04:51.747 --> 00:04:56.290
阿丹: 不是的 威尔 · 森塔斯: 不是，不是。
&gt;&gt; Dan: It is not.
&gt;&gt; Will Sentance: It is not, it is not.

84
00:04:56.290 --> 00:05:02.839
但是 JavaScript facade 函数完成了它的工作了吗？
But has the JavaScript facade
function done its work?

85
00:05:02.839 --> 00:05:04.057
的确如此。
It has.

86
00:05:04.057 --> 00:05:06.709
它唯一的工作是做什么？
Its only job was to do what?

87
00:05:06.709 --> 00:05:08.228
它唯一的任务是做什么，布雷登？
Its only job was to do what, Brayden?

88
00:05:08.228 --> 00:05:08.838
布雷登: 设定时间。
&gt;&gt; Brayden: Set the timer.

89
00:05:08.838 --> 00:05:10.310
威尔 · 森特斯: 把计时器设置在？
&gt;&gt; Will Sentance: Set the timer up in the?

90
00:05:10.310 --> 00:05:12.432
浏览器 在网页浏览器中。
&gt;&gt; Brayden: Browser.
&gt;&gt; Will Sentance: In the web browser.

91
00:05:12.432 --> 00:05:13.699
这是它唯一的工作。
That's its only job.

92
00:05:13.699 --> 00:05:18.682
那么在那个时候我们能做些什么呢,
So what can we do at that moment
after setting up that work,

93
00:05:18.682 --> 00:05:24.093
一毫秒之内我们可以移动到哪条线上 Todd？
well, at one millisecond,
we can move onto what line, Todd?

94
00:05:24.093 --> 00:05:26.100
我们可以直接走哪条线？
What line can we move straight onto?

95
00:05:26.100 --> 00:05:27.411
托德: 控制台记录我第一。
&gt;&gt; Todd: Console log me first.

96
00:05:27.411 --> 00:05:28.970
我们可以直接移动到控制台日志我第一！
&gt;&gt; Will Sentance: We can move
straight onto console log Me first!

97
00:05:28.970 --> 00:05:31.127
大家看看这个。
Look at this, people.

98
00:05:31.127 --> 00:05:37.281
直接到控制台登录我第一。
Straight onto console log me first.

99
00:05:37.281 --> 00:05:41.430
在那里，我会把我们的控制台放在这里。
There it is, and
I will put our console over here.

100
00:05:41.430 --> 00:05:46.519
如果有人告诉我应该是蓝色的，因为我哥哥
And if anybody tells me it should
be in blue, because my brother

101
00:05:46.519 --> 00:05:51.319
是的，我知道，但我们要把它放在这里，我先。
feature yes, I know but
we'll put it over here, me first.

102
00:05:51.319 --> 00:05:53.682
看看这个，是不是很漂亮，伙计们？
And look at that,
isn't that beautiful, people?

103
00:05:53.682 --> 00:05:56.350
在一毫秒的时间里，顺便说一句,
At one millisecond, and
to be clear by the way,

104
00:05:56.350 --> 00:05:58.834
这些时间就是我所说的序数。
these timings here
are what I call ordinal.

105
00:05:58.834 --> 00:06:03.848
这意味着他们在向我们展示事情发生的顺序
That means that like they're showing
us the order of things happening

106
00:06:03.848 --> 00:06:08.353
实际上下一句话需要十亿分之一秒的时间
actually would take like nanoseconds
to do that next line, but

107
00:06:08.353 --> 00:06:12.778
还有一段时间比较容易，那就是我。
there's a sort of a milliseconds
to be easier and there is me.

108
00:06:12.778 --> 00:06:16.786
我第一个在一毫秒和民间,
Me first at one millisecond and folk,

109
00:06:16.786 --> 00:06:21.428
我们所有的常规 JavaScript 代码都完成了。
all of our regular
JavaScript code is done.

110
00:06:21.428 --> 00:06:28.009
但是在浏览器的后台，时间在流逝，滴答。
But in the background in the web browser,
time is passing, tick tock.

111
00:06:28.009 --> 00:06:29.832
滴答滴答就在那儿。
Tick, tock, there it is.

112
00:06:29.832 --> 00:06:30.504
托德: 是的。
&gt;&gt; Todd: Yeah.

113
00:06:30.504 --> 00:06:34.047
威尔 · 森坦斯: 向我们最喜欢的大型箱式零售商大声疾呼吧，就是它了。
&gt;&gt; Will Sentance: Shout out to our
favorite big box retailer, there it is.

114
00:06:34.047 --> 00:06:36.773
观众: (笑)威尔 · 森坦斯: 在网页浏览器中,
&gt;&gt; Audience: [LAUGH]
&gt;&gt; Will Sentance: In the web browser,

115
00:06:36.773 --> 00:06:37.920
时间在流逝。
time is passing.

116
00:06:37.920 --> 00:06:44.670
在1000毫秒时，凯拉，我们认为会发生什么？
And at 1,000 milliseconds, Kayla,
what do we think is gonna have happened?

117
00:06:44.670 --> 00:06:47.007
我们的计时器完成了吗？
Is our timer complete?

118
00:06:47.007 --> 00:06:47.548
是的。
&gt;&gt; Kayla: Yeah.

119
00:06:47.548 --> 00:06:49.156
威尔 · 森塔斯: 是的 它会调用函数。
&gt;&gt; Will Sentance: It is.
&gt;&gt; Kayla: It's gonna call the function.

120
00:06:49.156 --> 00:06:50.062
威尔 · 森塔斯: 她说得很对。
&gt;&gt; Will Sentance: She is spot on.

121
00:06:50.062 --> 00:06:51.759
计时器已经完成
The timer is complete and

122
00:06:51.759 --> 00:06:56.048
这个函数会回到 JavaScript。
that function there is gonna
head right back into JavaScript.

123
00:06:56.048 --> 00:07:01.757
我们要把它放在调用堆栈上，因为这是我们在调用上运行函数的方式
We're gonna put it on the call stack, cuz
that's how we run a function on the calls

124
00:07:01.757 --> 00:07:06.829
随着时间的推移，时间过去了，时间过去了。
as it goes, and look, tons of time
has passed, tons of time has passed.

125
00:07:06.829 --> 00:07:12.220
1,000 milliseconds，JavaScript with the help of the web
At 1,000 milliseconds,
JavaScript with the help of the web

126
00:07:12.220 --> 00:07:18.499
浏览器将以某种方式自动开始执行 printHello。
browser is going to somehow automatically
start executing, printHello.

127
00:07:18.499 --> 00:07:19.697
这对民众有什么影响呢？
And what's that going to do folk?

128
00:07:19.697 --> 00:07:23.040
它将在控制台和控制台中显示。
That's going to put on the console and
display in the console.

129
00:07:23.040 --> 00:07:28.552
你好在1000毫秒的时候,
Hello, at 1,000 milliseconds,

130
00:07:28.552 --> 00:07:34.230
我们得到了你好，人们，就是这样。
we get Hello, and people, that's it.

131
00:07:34.230 --> 00:07:38.206
设定暂停，我们需要知道的就是设定暂停并不是真的一无所有
Set timeout, all we need to know really is
that set timeout ain't really has nothing

132
00:07:38.206 --> 00:07:39.439
做一个 JavaScript 代码。
to do a JavaScript at all.

133
00:07:39.439 --> 00:07:43.401
现在，从技术上来说，它在 JavaScript 中确实有一个返回值，不仅仅是这样
Now, technically it does have a return
value in JavaScript is not just not that

134
00:07:43.401 --> 00:07:45.449
有趣就像定时器的 ID。
interesting is like an ID for the timer.

135
00:07:45.449 --> 00:07:50.475
这就是真正的 Java 设置超时时间。
That's real Java set timeout is all
the way down here in the web browser.

136
00:07:50.475 --> 00:07:52.533
这才是真正的目的。
That's it's real purpose.

137
00:07:52.533 --> 00:07:54.709
一旦我们意识到这点我想是的,
Once we realized that, I guess yeah,

138
00:07:54.709 --> 00:07:59.610
设置一个 web 浏览器功能需要花费大量的时间，而且是零毫秒,
that bit setting up a web browser feature
takes like that time, is zero millisecond,

139
00:07:59.610 --> 00:08:02.488
一毫秒意味着我们可以继续前进。
one millisecond meaning
we can plow straight on.

140
00:08:02.488 --> 00:08:07.473
看看这个，我们要直接犁地
Look at this, we're going to
plow straight on to running at

141
00:08:07.473 --> 00:08:12.170
先在我身上安慰一下，然后一分钟一秒。
one minute second straight
after a console on me first.

142
00:08:12.170 --> 00:08:16.437
然后在后台，我们的时间都是在网页浏览器中完成的,
And then in the background, our time is
doing all this stuff in the web browser,

143
00:08:16.437 --> 00:08:18.170
与 JavaScript 无关。
nothing to do with JavaScript.

144
00:08:18.170 --> 00:08:21.029
只是 web 浏览器众多特性中的一个,
JavaScript is just one of the many
features of the web browser,

145
00:08:21.029 --> 00:08:24.684
网页浏览器是一个不可思议的应用程序，坐在那里，就这样。
the web browser is an incredible
application sitting down there, that's it.
