WEBVTT

1
00:00:00.180 --> 00:00:02.209
威尔 · 森坦斯: 现在，我们几乎就要进入最后的冲刺阶段了。
&gt;&gt; Will Sentance: Now, we're getting
towards the final stretch, almost.

2
00:00:02.209 --> 00:00:06.815
所以，在这里，我们有它，我们有我们的美好分享,
So, here, we had it,
we had our wonderful shared,

3
00:00:06.815 --> 00:00:11.648
我们的函数和对象的单一保存版本。
single saved version of our function and
our objects.

4
00:00:11.648 --> 00:00:16.809
用户1、用户2、用户500[ SOUND ]都可以通过原始链接访问它。
User 1, user 2, user 500 [SOUND] all had
access to it through the proto-chain.

5
00:00:16.809 --> 00:00:22.152
不通过原型引用作为 JavaScript 原型的结果,
Nope, through the proto-reference, as
a result of JavaScript prototype nature,

6
00:00:22.152 --> 00:00:27.067
它的原型特征，它的对象连接到其他对象的能力。
its prototype feature, its ability for
objects to connect to other objects.

7
00:00:27.067 --> 00:00:32.091
所以，当我们没有在给定的对象上找到一个函数时，不要惊慌，直接向上。
So, when we don't find a function on
the given object, don't panic, head on up.

8
00:00:32.091 --> 00:00:37.371
好的，现在，我想做一些有趣的事情，没有奖金。
Okay, now, I wanna do something
interesting here, no bonus.

9
00:00:37.371 --> 00:00:40.459
如果我想确认一下呢，顺便说一下，没有什么改变
What if I want to confirm,
nothing's changed by the way, except for

10
00:00:40.459 --> 00:00:41.854
现在我没有使用增量。
now I'm not using increment.

11
00:00:41.854 --> 00:00:45.619
我正在使用这个方法，这个函数具有 ownproperty。
I'm using this method,
this function hasOwnProperty.

12
00:00:46.659 --> 00:00:50.326
如果我们想要确认我们的用户1拥有属性分数怎么办？
What if we wanna confirm our
user1 has the property score?

13
00:00:50.326 --> 00:00:54.106
这很有趣，hasOwnProperty 在这里。
This is interesting, hasOwnProperty here.

14
00:00:54.106 --> 00:00:59.201
我假设 hasOwnProperty 在 user1上是一个属性，Matt，是吗？
I presume hasOwnProperty is on
user1 as a property, Matt, is it?

15
00:00:59.201 --> 00:01:02.109
扬声器2: 是的，我的意思是，那里没有什么可以用的。
&gt;&gt; Speaker 2: Yes, I mean,
there's nothing there for it.

16
00:01:02.109 --> 00:01:02.976
威尔 · 森特斯: 没有财产，对不起,
&gt;&gt; Will Sentance: There's no property,
sorry,

17
00:01:02.976 --> 00:01:04.430
没有叫做 hasOwnProperty 的方法，没错。
no method called hasOwnProperty,
yeah, exactly.

18
00:01:04.430 --> 00:01:07.198
它一定在用户功能商店里，是吗，托德？
It must be on user function store,
is it Todd?

19
00:01:07.198 --> 00:01:08.448
演讲者2: 不，不是的。
&gt;&gt; Speaker 2: No, it's not.

20
00:01:08.448 --> 00:01:11.048
那么这个函数从哪里来呢？
&gt;&gt; Will Sentance: So
where is this function gonna come from?

21
00:01:11.048 --> 00:01:17.001
人们发现，在 JavaScript 中有一个很大的标题对象,
It turns out people, that there is a big
old headline object in JavaScript,

22
00:01:17.001 --> 00:01:22.210
稍后我们会看到它的确切存放位置,
we're gonna see exactly where it's
stored a little bit later on,

23
00:01:22.210 --> 00:01:26.843
但是现在，威尔 · 森塔斯: 有一个很大的古老的
but for now
&gt;&gt; Will Sentance: There's a big old

24
00:01:26.843 --> 00:01:32.778
在 JavaScript 中称为 object.prototype 的标题对象。
headline object in JavaScript
called object.prototype.

25
00:01:32.778 --> 00:01:35.939
我们稍后会了解更多，就是这样。
We're gonna learn more about that
a little bit later, there it is.

26
00:01:35.939 --> 00:01:37.682
说实话，我应该换个颜色。
I should do it in a different color,
honestly.

27
00:01:37.682 --> 00:01:40.870
但是我要，而不只是一种，和
But I'm gonna, instead just kind of, and

28
00:01:40.870 --> 00:01:46.463
它有很多有用的功能，亲爱的。
it has a bunch of useful functions
that are gonna be available to, dear.

29
00:01:46.463 --> 00:01:54.239
我们所有的对象都可以使用。
They're gonna be available
to all of our objects.

30
00:01:54.239 --> 00:01:58.400
但是怎么做呢？
But how?

31
00:01:58.400 --> 00:01:59.753
因为，你不会相信的。
Well because, hey, you won't believe it.

32
00:01:59.753 --> 00:02:04.844
但是 JavaScript 中的所有对象，不仅仅是用户1和
But all objects in JavaScript,
not just how user 1 and

33
00:02:04.844 --> 00:02:08.497
用户2，我们在这里设置我们的原始值,
user 2, where we set our proto value,

34
00:02:08.497 --> 00:02:13.165
的所有对象都有一个 proto 属性。
all objects in JavaScript
have a proto property.

35
00:02:13.165 --> 00:02:18.860
一个默认的，默认链接到，你想猜猜马特在哪里？
A default one, that defaults to linking
to, you wanna take a guess to where Matt?

36
00:02:18.860 --> 00:02:22.103
说话人2: 对象 Will Sentance: To this object.prototype
&gt;&gt; Speaker 2: The object
&gt;&gt; Will Sentance: To this object.prototype

37
00:02:22.103 --> 00:02:23.579
对象。
object.

38
00:02:23.579 --> 00:02:25.508
我可能不会去画那支箭，对吧？
I'm not gonna probably draw the arrow,
am I?

39
00:02:25.508 --> 00:02:28.270
但是让我们做一个小星星。
But let's just do a little star.

40
00:02:28.270 --> 00:02:34.013
这个用户函数存储将链接到这个对象。
This user function stores is
gonna link down to this object.

41
00:02:34.013 --> 00:02:36.929
那个物体的原型你猜里面有什么 Matt？
The object.prototype object, and
what do you bet's in there, Matt?

42
00:02:36.929 --> 00:02:38.945
你猜里面有什么功能？
What function do you bet's in there?

43
00:02:38.945 --> 00:02:39.538
讲者二: hasOwnProperty。
&gt;&gt; Speaker 2: hasOwnProperty.

44
00:02:39.538 --> 00:02:43.343
威尔 · 森塔斯: 哈森有房产，他说对了,
&gt;&gt; Will Sentance: hasOwnProperty,
he's spot on,

45
00:02:43.343 --> 00:02:47.939
有自己的财产，我猜超级有用。
hasOwnProperty, super useful I guess.

46
00:02:48.979 --> 00:02:57.514
这样，当我运行 user1.hasOwnProperty 时,
Such that,
when I run user1.hasOwnProperty,

47
00:02:57.514 --> 00:03:04.632
然后用 scores 作为我的论据来执行。
and execute it with score as my argument.

48
00:03:04.632 --> 00:03:08.921
凯拉，我在哪里找用户1？
Kayla, where do I look for user 1?

49
00:03:08.921 --> 00:03:10.223
讲者3: 在全球。
&gt;&gt; Speaker 3: In global.

50
00:03:10.223 --> 00:03:11.353
威尔 · 森坦斯: 在全球化中我会找到它吗？
&gt;&gt; Will Sentance: In
global will I find it?

51
00:03:11.353 --> 00:03:12.219
是的。
Yeah.

52
00:03:12.219 --> 00:03:16.034
然后在该对象上查找 hasOwnProperty。
Then I look for
hasOwnProperty on that object.

53
00:03:16.034 --> 00:03:18.996
我在用户1上找到它了吗？
Do I find it on user 1?

54
00:03:18.996 --> 00:03:19.665
讲者3: 没有。
&gt;&gt; Speaker 3: No.

55
00:03:19.665 --> 00:03:21.200
威尔 · 森塔斯: 绝对不是，不是那里。
&gt;&gt; Will Sentance: Definitely not,
not there.

56
00:03:21.200 --> 00:03:22.117
我恐慌吗？
Do I panic?

57
00:03:22.117 --> 00:03:26.704
原型性意味着解释器会去哪里
Where does JavaScript prototypal nature
mean that the interpreter is gonna go and

58
00:03:26.704 --> 00:03:27.774
看下一个，到？
look next, up to?

59
00:03:27.774 --> 00:03:30.127
讲者3: 用户功能-威尔 · 森特斯: 太棒了,
&gt;&gt; Speaker 3: The user function-
&gt;&gt; Will Sentance: Fantastic,

60
00:03:30.127 --> 00:03:31.370
也许有房子在这里。
maybe hasOwnProperty's here.

61
00:03:31.370 --> 00:03:33.628
是增量，是不。
Is increment, is No.

62
00:03:33.628 --> 00:03:34.521
我们恐慌吗？
Do we panic?

63
00:03:34.521 --> 00:03:41.050
不，我们去看看，我们要看什么隐藏财产，凯拉？
No, here do we go look, what hidden
property that we're gonna look at, Kayla?

64
00:03:41.050 --> 00:03:43.240
演讲者3: 原型。
&gt;&gt; Speaker 3: The prototype.

65
00:03:43.240 --> 00:03:45.055
威尔 · 森坦斯: 原始财产，是的，是的。
&gt;&gt; Will Sentance: The proto property,
yeah, yeah.

66
00:03:45.055 --> 00:03:50.020
别担心，我们会看到区别的，但是原始属性(proto property)是指向-的链接
Don't worry, we'll see the difference, but
the proto property, which is a link to-

67
00:03:50.020 --> 00:03:51.722
讲者3: 反对，普罗托。
&gt;&gt; Speaker 3: Object.proto.

68
00:03:51.722 --> 00:03:52.632
那么我们在那里发现了什么呢？
&gt;&gt; Will Sentance: And
what do we find there?

69
00:03:52.632 --> 00:03:53.518
讲者3: hasOwn。
&gt;&gt; Speaker 3: hasOwn.

70
00:03:53.518 --> 00:03:59.300
Will Sentance: hasOwnProperty，我们抓取它的代码，然后执行它。
&gt;&gt; Will Sentance: hasOwnProperty, and
we grab its code, and we execute it.

71
00:03:59.300 --> 00:04:03.680
我们实际上在做的就是控制我们的目标
What we're actually doing with our
object.create is kinda taking control

72
00:04:03.680 --> 00:04:05.219
我们在那个原型里放了什么。
of what we put in that proto.

73
00:04:05.219 --> 00:04:07.401
因为默认情况下所有对象，它们的原型,
Because all objects by default,
their proto,

74
00:04:07.401 --> 00:04:10.300
一旦他们被创建，就会得到一个到 object.prototype 的链接。
as soon as they're created gets
a link to object.prototype.

75
00:04:10.300 --> 00:04:15.277
我们已经控制住了，但是不要惊慌，我们不会失去访问权
We'd have taken control of that, but
don't panic, we don't lose access

76
00:04:15.277 --> 00:04:19.314
这里的东西，因为它是一个链，所有的方式。
to this stuff down here,
because it is a chain all the way up.

77
00:04:19.314 --> 00:04:21.468
我想说的是,
To the point that I kinda
want to show the line,

78
00:04:21.468 --> 00:04:23.307
只是想让你知道这是个链条，对吗？
just so you know it's a chain, right?

79
00:04:23.307 --> 00:04:27.826
这是一个链条，威尔 · 森坦斯: 这是一个链条
It's a chain,
&gt;&gt; Will Sentance: It's a chain all

80
00:04:27.826 --> 00:04:32.379
一直到我们的头条，反对，原型。
the way up to our headline,
Object.prototype.

81
00:04:32.379 --> 00:04:34.064
这个对象还有一个原型属性。
This object also has a proto property.

82
00:04:34.064 --> 00:04:37.209
不，但是不要惊慌。
No, but don't panic.

83
00:04:37.209 --> 00:04:40.656
如果有人猜的话，我会告诉你们链条的顶端。
Anyone take a guess given this is, I'm
just gonna tell you the top of the chain.

84
00:04:40.656 --> 00:04:44.305
这对原始人来说有什么价值？
What this might have as its value for
proto?

85
00:04:44.305 --> 00:04:45.689
丹？
Dan?

86
00:04:45.689 --> 00:04:46.269
讲者二: 未入籍人士。
&gt;&gt; Speaker 2: Under naturalised.

87
00:04:46.269 --> 00:04:48.567
是的，非常接近，但是没有，是的,
&gt;&gt; Will Sentance: Yeah,
actually very close but null, yeah,

88
00:04:48.567 --> 00:04:52.144
就像我们现在结束了一样，没有更高层了，好吗？
it's like we're done now,
there's no further up the chain, okay?

89
00:04:52.144 --> 00:04:56.463
但是我不打算详细说明，但是如果你这样做的话
But I'm not going to go into this in
greater detail than that, but if you do

90
00:04:56.463 --> 00:05:01.942
想知道所有复杂的细节，就去看面向对象的硬件部分。
wanna know all the intricacies of that,
go watch the object oriented hard parts.

91
00:05:01.942 --> 00:05:05.225
真的[笑]或者人们对此的谈论,
Really [LAUGH] or people's talks on that,

92
00:05:05.225 --> 00:05:09.737
我们会讲得更详细。
go parts on that,
we go into in much more detail.

93
00:05:09.737 --> 00:05:14.050
特别是关于数组和函数如何也有大量的集合
Especially related to how arrays and
functions also had a big collection of

94
00:05:14.050 --> 00:05:16.798
他们可以使用与此相关的共享函数。
shared functions they
can use related to this.

95
00:05:16.798 --> 00:05:20.384
好吧，还有一件事我想说。
Okay, there is another thing
I want to talk about though.

96
00:05:20.384 --> 00:05:23.254
是的，如果你想确认我们的用户有属性分数呢？
Yes, what if you wanna confirm our
user's has the property score?

97
00:05:23.254 --> 00:05:24.324
我们可以使用 hasOwnProperty 方法。
We can use the hasOwnProperty method.

98
00:05:24.324 --> 00:05:24.879
但是它在哪里呢？
But where is it?

99
00:05:24.879 --> 00:05:26.293
在用户1上吗？
Is it on user 1?

100
00:05:26.293 --> 00:05:28.855
不，我们所有人默认都有一个原型属性
No.
All of us have a proto property by default

101
00:05:28.855 --> 00:05:32.207
默认导向一个大物体 object.prototype,
which defaults a lead to a big object,
object.prototype,

102
00:05:32.207 --> 00:05:34.394
充满了一些有用的功能。
full of somewhat, useful functions.

103
00:05:34.394 --> 00:05:41.230
我们可以通过用户功能存储的原始属性访问它，链接就会上升。
We can access it via user function store's
proto property, the chain goes up.
