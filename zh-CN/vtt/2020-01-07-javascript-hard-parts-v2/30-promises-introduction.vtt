WEBVTT

1
00:00:00.050 --> 00:00:06.028
威尔 · 森坦斯: 所以我们现在要谈谈在 ES2015和
&gt;&gt; Will Sentance: So we are now going to
move onto what changed in the ES2015 and

2
00:00:06.028 --> 00:00:07.035
全世界。
on world.

3
00:00:07.035 --> 00:00:07.966
Es6世界。
The ES6 world.

4
00:00:07.966 --> 00:00:11.237
所以在那之前，我们之前看到的。
So until then, what we saw here before.

5
00:00:11.237 --> 00:00:14.266
这个模型，还记得我们这个漂亮的模型吗？
This model,
remember that beautiful model here we had?

6
00:00:14.266 --> 00:00:15.698
差不多就是这样。
That was pretty much it.

7
00:00:15.698 --> 00:00:21.428
然后承诺出现了，一切都变得有点不同了。
And then along came promises, and
everything got a little bit different.

8
00:00:21.428 --> 00:00:23.628
它的前提是。
The premise for it is this.

9
00:00:23.628 --> 00:00:28.024
如果我试着总结一下，前提是这样的。
If I were to try and sum it up,
the premise would be this.

10
00:00:28.024 --> 00:00:31.347
当我有这个模型的时候，当我使用 setTimeout 的时候。
When I had this model here,
when I used setTimeout.

11
00:00:31.347 --> 00:00:34.045
在 JavaScript 中做了什么吗？
Did setTimeout do anything in JavaScript?

12
00:00:34.045 --> 00:00:36.500
没有结果是什么 Kayla？
No, where was its consequence, Kayla?

13
00:00:36.500 --> 00:00:37.939
在网页浏览器里。
&gt;&gt; Kayla: In the web browser.

14
00:00:37.939 --> 00:00:39.310
威尔 · 森坦斯: 在网页浏览器上，完全正确。
&gt;&gt; Will Sentance: In the web browser,
spot-on.

15
00:00:39.310 --> 00:00:42.393
但是一旦我在浏览器中设置好计时器,
But once I've set up
the timer in the web browser,

16
00:00:42.393 --> 00:00:47.402
记录我已经开始使用它的事实，或者其他背景特征？
keeping track of the fact that I've
started it, or other background features?

17
00:00:47.402 --> 00:00:51.514
我在 JavaScript 中没有找到任何方法来跟踪它，对吧？
I didn't really get any way of tracking
that back in JavaScript, right?

18
00:00:51.514 --> 00:00:52.985
在 JavaScript 中，我只是把它们扔掉。
In JavaScript,
I kinda just threw them out.

19
00:00:52.985 --> 00:00:58.009
现在，我可以使用我的控制台在 JavaScript 数据和 JavaScript 中使用 console.log 状态。
Now, I can console.log state In JavaScript
data and JavaScript using my console.

20
00:00:58.009 --> 00:01:00.506
但是我不能去想象这里所有的东西。
But I can't go and visualize all
the stuff that was down here.

21
00:01:00.506 --> 00:01:04.295
没有像控制台那样的可视化网页浏览器,
There's no like console visualize it for
the web browser,

22
00:01:04.295 --> 00:01:06.956
这有点过时了，对吧？
which is that is a little bit old, right?

23
00:01:06.956 --> 00:01:10.397
你所做的一半显然比你在 JavaScript 中所做的一半多
That half of what you're doing obviously
more than half what you do in JavaScript

24
00:01:10.397 --> 00:01:11.471
正在这里发生。
is happening down here.

25
00:01:11.471 --> 00:01:16.390
我得到了一种没有跟踪，它不能保持一致性
And I'm getting kind of no tracking of
it can no maintaining of consistency

26
00:01:16.390 --> 00:01:20.057
我记忆中的数据
between the state,
the data I see up here in my memory and

27
00:01:20.057 --> 00:01:22.725
这里发生的事情。
the stuff that's happening down here.

28
00:01:22.725 --> 00:01:26.807
没有一种方法可以描绘出我在这里做什么
There's no kind of way of mapping
what I'm doing down here in

29
00:01:26.807 --> 00:01:30.903
浏览器和这里发生的事情。
the web browser with what's
going on up here in JavaScript.

30
00:01:30.903 --> 00:01:36.561
这是在开发者的推理和思考我们正在做什么的方面
That's in terms of developer reasoning and
thinking about what we're doing as we

31
00:01:36.561 --> 00:01:42.389
然后去维护应用程序的规模，这并不是我想说的理想。
go and sort of maintaining the application
scale that isn't that ideal I would say.

32
00:01:42.389 --> 00:01:46.367
我认为承诺绝对是最有价值的
And I would put promises as
the absolute one of the most valuable

33
00:01:46.367 --> 00:01:51.097
他们提供的作品，他们也有所有的好处，这是一个愿望说,
pieces they offer, they have all
the benefits as well, is a desire to say,

34
00:01:51.097 --> 00:01:56.158
当你在背景里触发什么东西的时候，不要把它扔出去。
when you trigger something in the
background, don't just throw it out there.

35
00:01:56.158 --> 00:02:02.379
但是它在 JavaScript 内存中也有某种结果。
But have it have some sort of consequence
in JavaScript memory as well.

36
00:02:02.379 --> 00:02:06.697
所以，我有一个一致性之间的事情进行背景是要去
So, that I have a consistency between
things going on in background is gonna

37
00:02:06.697 --> 00:02:09.536
在某种程度上对 Java 产生了一些影响。
have some consequence back
in Java at some point.

38
00:02:09.536 --> 00:02:13.717
不知怎么的，我也在 JavaScript 内存中记录了这些信息。
And I'm somehow keeping track of that
within JavaScript memory as well.

39
00:02:13.717 --> 00:02:19.274
在 ES6中，我们引入了我称之为双管齐下的 facade 函数。
So with ES6, we introduced what I'm
gonna call two-pronged facade functions.

40
00:02:19.274 --> 00:02:25.568
他们不仅仅是，让我们记住我们的网络浏览器，里面有什么。
They did not just, let's remember
our web browser, what's in it.

41
00:02:25.568 --> 00:02:32.027
我们有 JavaScript 引擎，JS，JavaScript 引擎,
We had our JavaScript engine,
we had our JS, our JavaScript engine,

42
00:02:32.027 --> 00:02:36.298
我们还有很多浏览器功能,
and then we also had a ton
of browser features,

43
00:02:36.298 --> 00:02:42.122
其中一个是对互联网的网络请求。
one of which was speaking to
the Internet the network request.

44
00:02:42.122 --> 00:02:46.079
而且它的标签。
And that its label.

45
00:02:46.079 --> 00:02:50.615
我们有一个老式的标签，这个标签的作用方式和设置暂停是一样的。
We have an old school label, that by the
way worked in the same way as set timeout.

46
00:02:50.615 --> 00:02:53.382
添加了一个功能把它放到了网页浏览器里,
Took a function,
threw it down into the web browser,

47
00:02:53.382 --> 00:02:55.483
设置一个老式的定时器。
set up a timer with the old school style.

48
00:02:55.483 --> 00:03:01.025
我们有一个新的学校风格的设置浏览器功能对话互联网,
We have a new school style of setting up
the browser feature speak to the Internet,

49
00:03:01.025 --> 00:03:03.849
跟推特聊聊，不管它是什么。
speak to Twitter, whatever it might be.

50
00:03:03.849 --> 00:03:06.084
通过互联网发送更多数据请求。
Send a request for
more data over the Internet.

51
00:03:06.084 --> 00:03:08.949
在 JavaScript 中，它的标签是 fetch。
And the label for
it in JavaScript is fetch.

52
00:03:08.949 --> 00:03:12.194
但是有一种新的明星方式来做到这一点。
But there's a new star way of doing it.

53
00:03:12.194 --> 00:03:15.739
这是一个双管齐下的门面函数。
It's one I'm gonna call it
two-pronged facade function.

54
00:03:15.739 --> 00:03:20.235
它确实在网络上建立了一个网络请求
It does set up a network
request in the web

55
00:03:20.235 --> 00:03:24.610
浏览器功能，我一直在做这个。
browser features, I keep doing that.

56
00:03:24.610 --> 00:03:30.231
在 web 浏览器的特性中，它在这里设置了一个网络请求。
In the web browser features, it does
set up a network request down here.

57
00:03:30.231 --> 00:03:33.826
但与其这么做然后什么都不做,
But rather than just doing that and
then nothing,

58
00:03:33.826 --> 00:03:38.192
从那时起就没有办法知道这是用 JavaScript 完成的,
no way of knowing this being
done in JavaScript from then on,

59
00:03:38.192 --> 00:03:43.093
这在 JavaScript 中也会立即产生结果。
it's gonna have a consequence
immediately in JavaScript as well.

60
00:03:43.093 --> 00:03:47.175
这个获取标签会触发这里的互联网对话。
This fetch label is gonna trigger
speaking to the Internet down here.

61
00:03:47.175 --> 00:03:50.437
发送网络请求，对互联网说话，请求
Sending a network request,
speaking to the internet, asking for

62
00:03:50.437 --> 00:03:51.901
来自 Twitter 的数据。
data from Twitter down here.

63
00:03:51.901 --> 00:03:57.025
同时在 JavaScript 中,
And simultaneously it's
going to also in JavaScript,

64
00:03:57.025 --> 00:04:00.076
在 JavaScript land 中返回
in the JavaScript land return out

65
00:04:00.076 --> 00:04:04.658
一种特殊的物体，叫做承诺物体。
a special kind of object
called a promise object.

66
00:04:04.658 --> 00:04:06.990
这些都会留在记忆中。
That's going to sit in memory.

67
00:04:06.990 --> 00:04:11.358
当背景工作在这里完成，这将填充和
And when the background work is done here,
that's going to fill in and

68
00:04:11.358 --> 00:04:15.294
用背景中的数据更新对象的数据。
update that object's data with
the data from the background.

69
00:04:15.294 --> 00:04:18.117
现在当我们完成背景工作后,
And now when we finish
our background work,

70
00:04:18.117 --> 00:04:22.314
我们一点都不惊讶，有些东西会有结果
we are not surprised that something's
gonna have a result back in

71
00:04:22.314 --> 00:04:26.072
因为我们有一个双管齐下的 facade 函数。
JavaScript because we had
a two pronged facade function.

72
00:04:26.072 --> 00:04:29.774
它在这里产生了后果，一针见血。
It had consequences out here, one prong.

73
00:04:29.774 --> 00:04:32.596
但是它在 JavaScript 中立即产生了另一个结果。
But it had another consequence
immediately in JavaScript.

74
00:04:32.596 --> 00:04:35.935
一个小小的占位对象，可以让我们
A little sort of placeholder object
that's gonna allow us to keep

75
00:04:35.935 --> 00:04:38.726
在我们的本地内存或者全局内存中追踪 JavaScript
track in JavaScript in our local memory or
in our global

76
00:04:38.726 --> 00:04:42.387
我们在浏览器里触发的东西的记忆。
memory there of the stuff we triggered
off down here in the web browser.

77
00:04:42.387 --> 00:04:46.182
所以现在我们有点像把这两个映射在一起，它们紧密地联系在一起。
So now we kinda have these two mapped
together and they're intimately linked.

78
00:04:46.182 --> 00:04:49.843
后台特性在它完成时将对
The background feature when it completes
is going to have consequences for

79
00:04:49.843 --> 00:04:52.471
然后立即返回 JavaScript 对象。
that immediately returned
down JavaScript object.

80
00:04:52.471 --> 00:04:56.324
我们会看到它在这里发挥，但看看它,
We're gonna see it play through here,
but take a look at it,

81
00:04:56.324 --> 00:05:01.314
双管齐下的外观功能，都启动后台网页浏览器工作
two pronged facade functions that both
initiate background web browser works

82
00:05:01.314 --> 00:05:04.733
并返回一个位置持有者对象。
being the Internet and
return a place holder object.

83
00:05:04.733 --> 00:05:06.744
这只是一个物体的电荷
It's just a charge of object but

84
00:05:06.744 --> 00:05:11.072
一个特殊的类型，在 JavaScript 的世界里立刻就有了承诺。
a special type of one with a promise
immediately in JavaScript land.

85
00:05:11.072 --> 00:05:15.675
这样我们就有办法确保我们知道下面发生了什么，因为
So that we have a way of making sure we
know what's going on down here because

86
00:05:15.675 --> 00:05:17.733
我们一直在更新。
we've kept it up to date up here.

87
00:05:17.733 --> 00:05:21.545
非常有趣，是一个非常有趣的概念。
Really interesting,
is very interesting concept.

88
00:05:21.545 --> 00:05:22.093
我们开始吧。
So here we go.

89
00:05:22.093 --> 00:05:23.771
我们要在这里看比赛。
We're gonna see it play out here.

90
00:05:23.771 --> 00:05:29.548
保存一个函数显示，希望是要运行的数据
Save a function display, which hopefully
is gonna be run with the data that

91
00:05:29.548 --> 00:05:35.985
从 Twitter 上得到的数据，然后我们就可以得到他的标签未来的数据。
comes back from Twitter as input, then
we're going to have his label future data.

92
00:05:35.985 --> 00:05:38.435
然后在右手边,
And then on the right hand side there,

93
00:05:38.435 --> 00:05:42.428
这个五个字母的单词是 JavaScript 中最强大的。
the five letter word that is
the most powerful in JavaScript.

94
00:05:42.428 --> 00:05:46.348
这五个字母的作用是非常复杂的。
It is profoundly complex
what those five letters do.

95
00:05:46.348 --> 00:05:49.314
他们准备开始与互联网对话。
They are going to set out
speaking to the Internet.

96
00:05:49.314 --> 00:05:53.495
这个五个字母的字面意思是指互联网
That five letter word literally
speaks to the Internet down here from

97
00:05:53.495 --> 00:05:54.588
网页浏览器。
the web browser.

98
00:05:54.588 --> 00:05:56.733
不是在 JavaScript 中，JavaScript 不能做到，但是 web 浏览器可以。
Not in JavaScript, JavaScript can't do it,
but the web browser can.

99
00:05:56.733 --> 00:05:59.500
这就是五个字母的单词的力量。
That is how powerful
that five letter word is.

100
00:05:59.500 --> 00:06:02.351
它使用了大量的技术
It's using a myriad of
technologies to go and

101
00:06:02.351 --> 00:06:06.338
从世界的另一端获取数据。
get data from the other side of
the world Adrian, JavaScript.

102
00:06:06.338 --> 00:06:07.754
相信我，JavaScript 没有这个功能。
JavaScript does not have that feature,
believe me.

103
00:06:07.754 --> 00:06:10.795
但是网页浏览器有着无数惊人的功能
But the web browser has
a whole myriad of remarkable

104
00:06:10.795 --> 00:06:13.564
所有的工作开始的技术。
technologies that get
all that work started.

105
00:06:13.564 --> 00:06:18.050
但同时在 JavaScript 中返回一个小对象,
But it also simultaneously in
JavaScript returns out a little object,

106
00:06:18.050 --> 00:06:23.449
它叫做 promise 对象，只是一个普通的 JavaScript 对象。
that's gonna be called a promise object,
that is just a regular JavaScript object.

107
00:06:23.449 --> 00:06:27.957
但有一些小的奖金功能，它一点奖金属性两，我们要去
But has some little bonus features on it
a little bonus properties two we're gonna

108
00:06:27.957 --> 00:06:30.259
看看他们，看看他们一会儿是怎么玩的。
see them and
how they play out in a moment.
