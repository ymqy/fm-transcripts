WEBVTT

1
00:00:00.000 --> 00:00:03.379
Will Sentance: 这里我们从 JavaScript 的原理开始。
&gt;&gt; Will Sentance: So here we start
with principles of JavaScript.

2
00:00:03.379 --> 00:00:08.419
所有这些奇妙的东西，所有这些深奥的东西,
All of this fancy stuff to come,
all of this profundity to come,

3
00:00:08.419 --> 00:00:10.789
但是我们从 JavaScript 的原理开始。
but we start with
principles of JavaScript.

4
00:00:10.789 --> 00:00:12.980
我要说的就是这些。
And I'll say this of all this.

5
00:00:12.980 --> 00:00:15.150
你要看着代码，然后你要去是的，是的，是的,
You're gonna look at the code, and
you're gonna go yeah, yeah, yeah,

6
00:00:15.150 --> 00:00:16.870
我知道这是怎么回事了。
I get what this is doing.

7
00:00:16.870 --> 00:00:19.600
好了，伙计们，开始了。
All right, people, here we go.

8
00:00:19.600 --> 00:00:21.230
并不是那么花哨。
JavaScript is not that fancy.

9
00:00:21.230 --> 00:00:23.239
它有两个作用。
It does two things.

10
00:00:23.239 --> 00:00:26.329
第一，它一行一行地检查我们的代码。
One, it goes through
our code line by line.

11
00:00:26.329 --> 00:00:28.460
我们现在要处理一段代码。
There's a block of code we're
gonna work through right now.

12
00:00:28.460 --> 00:00:32.109
它一行一行地检查代码，并执行每一行代码。
It go through it line by line and
does each of the lines of code.

13
00:00:32.109 --> 00:00:34.219
他们称之为执行线程。
They call this the thread of execution.

14
00:00:34.219 --> 00:00:36.195
它沿着它的路线下行并执行,
It threads its way down and executes,

15
00:00:36.195 --> 00:00:39.939
这个词用来形容随机应变很好听。
that's a fancy word for
doing the code as it goes.

16
00:00:39.939 --> 00:00:41.460
这是 JavaScript 的特性之一。
That's feature one of JavaScript.

17
00:00:41.460 --> 00:00:45.140
Javascript 的第二个特性就是它遇到的东西
Feature two of JavaScript is
the stuff that it encounters

18
00:00:45.140 --> 00:00:49.859
如果它说保存某个东西，比如变量或者常量
if it's saying save something,
like a variable or a constant, or

19
00:00:49.859 --> 00:00:52.929
甚至一些代码本身，被称为函数。
even some code itself,
known as a function.

20
00:00:52.929 --> 00:00:56.329
它把这些东西保存在电脑的内存里,
Well, it saves that stuff
in the computer's memory,

21
00:00:56.329 --> 00:00:58.700
以后再回来，并使用。
to come back to later on, and use.

22
00:00:58.700 --> 00:01:02.008
好了，这个区域，这里，各位，我要捕捉,
All right, and this area, here,
people, I'm gonna capture,

23
00:01:02.008 --> 00:01:04.054
就像 JavaScript 在引擎盖下做的那样,
just as JavaScript does under the hood,

24
00:01:04.054 --> 00:01:07.861
我们一行一行地检查代码时，存储的所有东西。
all of the stuff that's being stored
as we go through the code line by line.

25
00:01:07.861 --> 00:01:08.754
这不是魔术,
This isn't like magic,

26
00:01:08.754 --> 00:01:11.019
这不是我对现状的抽象描述。
this isn't me creating
an abstraction of what's happening.

27
00:01:11.019 --> 00:01:12.219
这就是正在发生的事。
This is literally what's happening.

28
00:01:12.219 --> 00:01:16.680
我的意思是，不明显，视觉上，但这是我们存储的每一行，我们去。
I mean, not obviously, visually, but
this is every line we store as we go.

29
00:01:16.680 --> 00:01:22.120
这就是我们遇到的所有东西都被储存在记忆中。
And that's all that stuff we
encounter is stored into the memory.

30
00:01:22.120 --> 00:01:25.180
这是 JavaScript 中的一个花哨的词
This is the fancy word in
JavaScript in partnering for

31
00:01:25.180 --> 00:01:27.090
我们存储数据的地方。
the place in which we store data.

32
00:01:27.090 --> 00:01:32.780
我们开始吧，谁有幸做第一行，是凯拉吗？
And so here we go, who is gonna have
the honor of doing line one, was it Kayla?

33
00:01:32.780 --> 00:01:37.496
凯拉，一号线，我们要怎么处理这些代码，说给我听,
Kayla, line one, what are we doing with
that code here, verbalize it for me,

34
00:01:37.496 --> 00:01:38.004
女名女子名。
Kayla.

35
00:01:38.004 --> 00:01:40.781
演讲者2: 你在定义一个叫 num 的常量。
&gt;&gt; Speaker 2: You're defining
a constant called num.

36
00:01:40.781 --> 00:01:41.682
威尔 · 森塔斯: 美丽，而且？
&gt;&gt; Will Sentance: Beautiful, and?

37
00:01:41.682 --> 00:01:42.579
演讲者2: 改变三。
&gt;&gt; Speaker 2: Alter three.

38
00:01:42.579 --> 00:01:45.450
威尔 · 森塔斯: 赋值3，就是人。
&gt;&gt; Will Sentance: And assigning it
the value 3, there it is people.

39
00:01:45.450 --> 00:01:50.188
这意味着从现在开始，如果你在我们的代码中看到 num，我们知道它会去查看,
That means from now on if you see num in
our code, we know that it's gonna go look,

40
00:01:50.188 --> 00:01:52.301
然后找到它的价值是什么 Kayla？
and find the value, what, Kayla?

41
00:01:52.301 --> 00:01:53.680
讲者2:3 威尔 · 森塔斯: 3，她说得很对。
&gt;&gt; Speaker 2: 3.
&gt;&gt; Will Sentance: 3, she's spot-on.

42
00:01:53.680 --> 00:01:58.640
为 Kayla 干杯作为第一个被邀请的人。
Excellent to Kayla, for
being the first person to be called upon.

43
00:01:58.640 --> 00:02:01.659
下一行，我转向马特。
Next line, now I turn to Matt.

44
00:02:03.250 --> 00:02:04.828
演讲者3: 我们正在定义函数，multiplyBy2。
&gt;&gt; Speaker 3: We're defining the function,
multiplyBy2.

45
00:02:04.828 --> 00:02:06.760
威尔 · 森特斯: 谢谢你，马特，非常感谢。
&gt;&gt; Will Sentance: Thank you,
Matt, exactly.

46
00:02:06.760 --> 00:02:13.770
这就是说，人们，当我们定义一个函数时，有两个部分。
And this is to say, people, when we
define a function, there's two parts.

47
00:02:13.770 --> 00:02:17.400
这是我们的标识符，这是标签的华丽词汇
There's our identifier,
that is the fancy word for the label for

48
00:02:17.400 --> 00:02:19.789
任何你存储在电脑内存里的东西。
anything you're storing
in computer's memory.

49
00:02:19.789 --> 00:02:21.533
这里的标识符是 multilyby2。
The identifier here is multiplyBy2.

50
00:02:21.533 --> 00:02:23.439
前面的标识符是 num。
The identifier before was num.

51
00:02:23.439 --> 00:02:25.729
我最近学会了这个词，标识符。
I recently learned this word,
the identifier.

52
00:02:25.729 --> 00:02:27.896
然后我们把所有的代码转换成函数,
And we then take all
the code to the function,

53
00:02:27.896 --> 00:02:29.844
我们现在什么都不做。
we're not gonna run any of it right now.

54
00:02:29.844 --> 00:02:34.117
我们要把它捆起来，存储在电脑的内存里
We're gonna take it, bundle it up and
store it in the computer's memory like

55
00:02:34.117 --> 00:02:37.449
一个字符串，这个函数的所有代码。
a string of characters,
all the code of that function.

56
00:02:37.449 --> 00:02:40.856
我不会把所有的代码都写出来，但是想象一下它们都保存在这里。
I'm not gonna write all that code up,
but literally imagine it all saved here.

57
00:02:40.856 --> 00:02:45.816
相反，我要用这个小盒子代表它，里面有一个人渣
Instead, I'm gonna represent it
with this little box with an effin

58
00:02:45.816 --> 00:02:48.170
表示函数。
that represents the function.

59
00:02:48.170 --> 00:02:48.783
给你。
There you go.

60
00:02:48.783 --> 00:02:50.129
好吧,
All right,

61
00:02:50.129 --> 00:02:54.745
因此我们的执行线程，JavaScript 的奇特特性,
and therefore our thread of execution,
the fancy feature of JavaScript,

62
00:02:54.745 --> 00:02:57.939
拿到密码，拿到密码，拿到密码，拿到密码，拿到密码。
that can take the code do it, take
the code, do it, take the code, do it.

63
00:02:57.939 --> 00:03:04.944
现在我们来看看布拉登，它接下来会撞上什么？
Now we've down to where Braden,
what does it hit next?

64
00:03:04.944 --> 00:03:06.993
扬声器3: 它定义了变量输出。
&gt;&gt; Speaker 3: It defines
the variable output.

65
00:03:06.993 --> 00:03:11.292
威尔 · 森坦斯: 是的，我要创造常量，人们似乎倾向于使用
&gt;&gt; Will Sentance: Yeah, I'm gonna create
constant, people tend to seem to be using

66
00:03:11.292 --> 00:03:15.973
变量作为标签 + 数据、标识符 + 数据的通用术语，但是
variable as a generic term for,
Label + data, identifier + data, but

67
00:03:15.973 --> 00:03:21.228
仔细想想，它的字面意思是，我可以改变存储在标签中的数据。
think about it, it literally means I can
vary the data that I store in that label.

68
00:03:21.228 --> 00:03:25.167
对于一个常数，我不能改变，我不能拿走我以前储存在那里的东西
And with a constant, I can't vary, I can't
take away what I had stored there before

69
00:03:25.167 --> 00:03:28.349
存储其他东西，稍后我们会详细讨论。
and store something else, and
we'll see more about that later on.

70
00:03:28.349 --> 00:03:32.099
假设我们声明一个常量输出，非常好。
So let's say we declare a constant output,
excellent.

71
00:03:32.099 --> 00:03:35.189
现在，Braden，我要在输出中存储什么？
Now Braden,
what am I gonna store in output?

72
00:03:35.189 --> 00:03:36.949
我知道了吗？
Do I know yet?

73
00:03:36.949 --> 00:03:37.634
讲者3: 没有。
&gt;&gt; Speaker 3: No.

74
00:03:37.634 --> 00:03:38.731
威尔 · 森特斯: 确切地说，我不知道,
&gt;&gt; Will Sentance: I don't, exactly,

75
00:03:38.731 --> 00:03:41.050
因为这个右手边是什么布莱登？
because this right hand
side is what Braden?

76
00:03:41.050 --> 00:03:42.774
说话人3: 一个串行函数。
&gt;&gt; Speaker 3: A serial function.

77
00:03:42.774 --> 00:03:43.378
威尔 · 森特斯: 是吗？
&gt;&gt; Will Sentance: It's?

78
00:03:43.378 --> 00:03:44.069
讲者3: 函数调用。
&gt;&gt; Speaker 3: Function call.

79
00:03:44.069 --> 00:03:45.210
Will Sentance: 函数调用。
&gt;&gt; Will Sentance: Function call.

80
00:03:45.210 --> 00:03:49.199
来自丹的精彩，来自丹的精彩。
Excellent from Dan, excellent from Dan.

81
00:03:49.199 --> 00:03:51.579
对函数的调用就是命令。
A call to a function is a command.

82
00:03:51.579 --> 00:03:55.210
我只能存储固定的最终值。
I can only store values
that's fixed final things.

83
00:03:55.210 --> 00:03:59.009
我不能存储指令，只能去做一些工作。
I can't store a instruction,
a go do some work.

84
00:03:59.009 --> 00:04:01.520
丹，是什么告诉我右边这个是命令？
Dan, what tells me that this
right hand side is a command?

85
00:04:01.520 --> 00:04:04.270
讲者3: 括号 威尔 · 句子: 括号，完全正确。
&gt;&gt; Speaker 3: Parentheses.
&gt;&gt; Will Sentance: Parentheses, exactly.

86
00:04:04.270 --> 00:04:05.250
完全正确。
Exactly right.

87
00:04:05.250 --> 00:04:07.939
所以现在它仍然是未初始化的。
So then now it's gonna
remain uninitialized.

88
00:04:07.939 --> 00:04:12.294
这与过去不明确的情况形成了对比，因为如果我们不得不这样做的话
This is in contrast to the old days where
it's undefined because again, if we had to

89
00:04:12.294 --> 00:04:16.838
如果我们保存了这里没有定义的小数据，那么我们
carry our constant output, if we saved the
little data undefined here, well, then we

90
00:04:16.838 --> 00:04:21.579
不能改变从函数返回的值。
wouldn't get to change it out for the
value that calls back from the function.

91
00:04:21.579 --> 00:04:24.168
所以现在我们只能说它甚至没有完全储存在这里。
So now we just say it's not
really even fully stored here.

92
00:04:24.168 --> 00:04:27.589
我要在这里展示，但是它还没有任何价值。
I'm gonna show it here, but
it's not got any value in it yet.

93
00:04:27.589 --> 00:04:31.649
好吧，我们甚至不会，如果我们在运行和多个 by2尝试和
Okay, so we wouldn't even, if we were to
inside the running and multiplyBy2 try and

94
00:04:31.649 --> 00:04:35.170
对数输出，我们不会看到未定义，我们只是看到它不在那里。
log output, we wouldn't see undefined,
we just see it's not there.

95
00:04:35.170 --> 00:04:40.560
好了，当我们出发跑步的时候，乘以二，各位,
Okay, while we head off and
run, multiplyBy2, everybody,

96
00:04:40.560 --> 00:04:46.379
准备好，因为这是 JavaScript 的一个很酷的特性。
be ready, because this is
the cool feature of JavaScript.

97
00:04:46.379 --> 00:04:48.689
这是你们期待已久的时刻。
This is the moment that
you've all been waiting for.

98
00:04:48.689 --> 00:04:50.949
我们打算用 num 的名字。
We're gonna call it with num.

99
00:04:50.949 --> 00:04:54.531
Kayla num 的估值是多少变成多少？
Kayla, what does num evaluate to,
what value does it turn into?

100
00:04:54.531 --> 00:04:55.704
讲者2:3 威尔 · 森塔斯: 3，等一下。
&gt;&gt; Speaker 2: 3.
&gt;&gt; Will Sentance: 3, hold on.
