WEBVTT

1
00:00:00.780 --> 00:00:01.280
威尔 · 森特斯: 我们走吧。
&gt;&gt; Will Sentance: Let's go.

2
00:00:01.280 --> 00:00:04.150
让我们看看，因为这是一条复直线。
Let's see that because it's
gonna be a complex line.

3
00:00:04.150 --> 00:00:08.619
但是从我们的第一句台词开始，我们想放一段时间，瑞安。
But starting with our first line here,
we wanna put on for a while, Ryan.

4
00:00:08.619 --> 00:00:09.820
我向你道歉，莱恩。
I apologize Ryan.

5
00:00:09.820 --> 00:00:14.460
莱恩，我们在第一行代码里做什么？
Ryan, what are we doing here
in line one of our code?

6
00:00:14.460 --> 00:00:16.820
Ryan: 声明一个函数显示。
&gt;&gt; Ryan: Declaring a function display.

7
00:00:16.820 --> 00:00:19.570
声明一个函数显示，精确地和
&gt;&gt; Will Sentance: Declaring
a function display, exactly and

8
00:00:19.570 --> 00:00:23.480
存储在全局存储器中。
storing it in global memory.

9
00:00:23.480 --> 00:00:26.949
在那里，功能显示被存储。
There it is,
the function display is stored.

10
00:00:26.949 --> 00:00:28.769
太好了，谢谢你，瑞恩。
Excellent, thank you, Ryan.

11
00:00:28.769 --> 00:00:30.289
第二行，左手边。
Line two, left hand side.

12
00:00:30.289 --> 00:00:33.189
伊森，我们先从左边开始,
Ethan, what do we do on
the left hand side here first,

13
00:00:33.189 --> 00:00:35.390
先说点简单的，伊森。
just a sort of easy bit here first Ethan.

14
00:00:35.390 --> 00:00:38.619
伊森: 声明一个常量未来数据。
&gt;&gt; Ethan: Declaring
a constant future data.

15
00:00:38.619 --> 00:00:43.587
威尔 · 森特斯: 没错，未来的数据，我从来不知道美国人说的是数据还是
&gt;&gt; Will Sentance: Exactly, future data,
I never know whether Americans say data or

16
00:00:43.587 --> 00:00:44.125
数据。
data.

17
00:00:44.125 --> 00:00:46.268
但是好吧，现在还没有初始化。
But all right, so
it's uninitialized for now.

18
00:00:46.268 --> 00:00:50.185
顺便说一句，这告诉我们右边的 fetch 调用,
Already by the way, this tells us that
fetch call on the right hand side,

19
00:00:50.185 --> 00:00:53.463
在背景中触发东西的 facade 函数,
the facade function that
triggers stuff in the background,

20
00:00:53.463 --> 00:00:55.729
它还必须在 JavaScript 中做些什么。
it must also do something in JavaScript.

21
00:00:55.729 --> 00:00:59.479
因为它在 JavaScript 中的结果
Because the result of it in
JavaScript at that moment

22
00:00:59.479 --> 00:01:01.469
储存在左手边。
is stored on the left hand side.

23
00:01:01.469 --> 00:01:04.459
因此，在某种程度上，它必须是双管齐下的，两个结果。
So it must be two pronged in some way,
two consequences.

24
00:01:04.459 --> 00:01:06.751
所以，未来的数据。
So, future data.

25
00:01:09.325 --> 00:01:14.694
在这里，futureData 将是 JavaScript 的结果
&gt;&gt; Will Sentance: Here it is, futureData
will be the result in JavaScript

26
00:01:14.694 --> 00:01:20.760
的结果的一半，它的 JavaScript 控制台。
of half of the consequence of fetch,
its JavaScript console.

27
00:01:20.760 --> 00:01:24.629
记住，右边的输出存储在左边。
Remember, the output of the right hand
side stored on the left-hand side.

28
00:01:24.629 --> 00:01:27.769
但是这是一个假想的 JavaScript 函数，它是一个 facade。
But this is a pretend JavaScript function,
it's a facade.

29
00:01:27.769 --> 00:01:33.920
它会为我们做一些 JavaScript 的工作，但是它也会自动地,
It's gonna do some JavaScript work for
us, but it's also, automatically,

30
00:01:33.920 --> 00:01:39.436
但它也会在后台做一些工作，网页浏览器。
but it's also gonna do some work in
the background, the web browser.

31
00:01:39.436 --> 00:01:43.491
这就是我们的网址。
There it is, off to our URL.

32
00:01:43.491 --> 00:01:48.780
所以，让我们先来做 JavaScript consequences。
So, let's do it JavaScript
consequence first.

33
00:01:48.780 --> 00:01:54.289
它将立即在 JavaScript 中返回。
It is going to immediately
in JavaScript return out.

34
00:01:54.289 --> 00:02:00.239
让我用我的粉红色作为我的特殊对象。
Let me use my pink here for
my special object.

35
00:02:03.921 --> 00:02:05.209
威尔 · 森塔斯: 我的特殊对象。
&gt;&gt; Will Sentance: My special object.

36
00:02:08.554 --> 00:02:10.164
威尔 · 森塔斯: 一个承诺的对象,
&gt;&gt; Will Sentance: A promise object,

37
00:02:10.164 --> 00:02:16.015
它只是一个通过获取在 JavaScript 中自动创建的对象。
it's just an object automatically
created in JavaScript by fetch.

38
00:02:16.015 --> 00:02:18.443
它有两个属性。
It has two properties.

39
00:02:18.443 --> 00:02:22.090
我们等会儿再看他们的表现。
We're gonna see what they do later on.

40
00:02:22.090 --> 00:02:24.037
没有定义的值，没有任何东西存储在上面。
Value which is undefined,
nothing stored on it yet.

41
00:02:24.037 --> 00:02:28.192
你可能已经在想，等等，我去拿些数据回来。
Already you might be thinking,
hold on, I'm gonna get some data back.

42
00:02:28.192 --> 00:02:31.498
我想知道这些在 JavaScript 中会出现在什么地方。
I wonder where that's gonna perhaps
show up back in JavaScript.

43
00:02:31.498 --> 00:02:37.326
一个被称为满足的财产。
And a property called on fulfilled.

44
00:02:37.326 --> 00:02:42.979
结果是隐藏的，但是非常重要的是一个空数组。
It's gonna turn out to be hidden but
super important which is an empty array.

45
00:02:44.170 --> 00:02:47.953
如果右边的输出被存储在
And that object is gonna be stored if the
output of the right hand side is stored on

46
00:02:47.953 --> 00:02:50.841
左手边被撕破了，要存放在哪里？
the left hand side and so torn,
it's gonna be stored where?

47
00:02:50.841 --> 00:02:53.872
演讲者4: 未来数据。
&gt;&gt; Speaker 4: In the futureData.

48
00:02:53.872 --> 00:02:56.387
Will Sentance: 在 futureData 标签中，在 futureData 标识符中，精确地。
&gt;&gt; Will Sentance: In the futureData label,
in the futureData identifier, exactly.

49
00:02:56.387 --> 00:03:01.849
我们抓住它，把它插入，威尔 · 森特斯: 未来数据,
We grab it, we stick it into,
&gt;&gt; Will Sentance: FutureData,

50
00:03:01.849 --> 00:03:07.109
就是这个，value，我可以听到 Tana 开始担心
there it is, value,
I can hear Tana getting worried about how

51
00:03:07.109 --> 00:03:12.079
我带着我的承诺目标来到这里。
far right I've gone here with
the my promise object here.

52
00:03:12.079 --> 00:03:14.764
我们走吧,
On, there we go,

53
00:03:14.764 --> 00:03:20.329
是一个大的，空的数组。
on fulfilled is a big, empty array.

54
00:03:21.759 --> 00:03:22.485
就是这样，伙计们。
There it is, folk.

55
00:03:22.485 --> 00:03:25.789
那么好吧,
So, well,

56
00:03:25.789 --> 00:03:29.680
看看这个，我要去建立一些网页浏览器的背景资料。
look at this, I'm about to go and
set up some background web browser stuff.

57
00:03:29.680 --> 00:03:30.394
我忘了我安排好了吗？
Do I forget I set it up?

58
00:03:30.394 --> 00:03:34.716
当然不是，我有一个可爱的小承诺对象在这里提醒我
Well, of course not, I've got a lovely
little promise object here that reminds me

59
00:03:34.716 --> 00:03:37.203
我在后台设置了一些东西。
that I've set something
up in the background.

60
00:03:37.203 --> 00:03:38.584
但现在，事情变得有趣起来。
But now, things get interesting.

61
00:03:38.584 --> 00:03:43.008
另一个后果是什么呢
Where is fetch's other
consequence on the board to our

62
00:03:43.008 --> 00:03:47.395
空间安置专家-伊森: [笑]
specialist in spatial placement-
&gt;&gt; Ethan: [LAUGH]

63
00:03:47.395 --> 00:03:48.111
威尔 · 森特斯: 伊森，我们的
&gt;&gt; Will Sentance: Ethan, where is our

64
00:03:48.111 --> 00:03:48.911
其他... 不不不,
other- no, no, no,

65
00:03:48.911 --> 00:03:51.550
你不用...-我们的另一个后果是什么？
you don't have to- where is our other
consequence of fetch on the board?

66
00:03:51.550 --> 00:03:52.439
伊森: 在网页浏览器里。
&gt;&gt; Ethan: It's in the web browser.

67
00:03:52.439 --> 00:03:54.240
威尔 · 森坦斯: 确切地说，是在网页浏览器里。
&gt;&gt; Will Sentance: It's in the web browser,
exactly.

68
00:03:54.240 --> 00:03:58.853
看看这个，两个尖头，[声音] ，对吗？
Look at this, two prongs, [SOUND], right?

69
00:03:58.853 --> 00:04:05.147
另一个后果就是网页浏览器。
And the other consequence
is in the web browser.

70
00:04:07.415 --> 00:04:08.269
威尔 · 森特斯: 这就对了。
&gt;&gt; Will Sentance: There you go.

71
00:04:08.269 --> 00:04:12.377
在浏览器里就是我们要设置的地方,
In the web browser, there it is,
where we are gonna set up,

72
00:04:12.377 --> 00:04:18.053
现在我有时称这个 XHR 为 XML HTTP 请求，它来自于概念
now I sometimes call this XHR which is XML
HTTP request, that comes from the notion

73
00:04:18.053 --> 00:04:23.509
Xml 是我们在互联网上发送消息的数据格式。
of XML being the format of the data by
which we send messages over the Internet.

74
00:04:23.509 --> 00:04:29.029
Http 是我们如何在浏览器和浏览器之间发送消息的一组规则
HTTP being the set of rules for
how we send messages between a browser and

75
00:04:29.029 --> 00:04:31.889
一个服务器，一个 HTTP 协议。
a server, an HTTP protocol.

76
00:04:31.889 --> 00:04:33.949
并请求意义，我想得到的东西。
And request meaning, I wanna get stuff.

77
00:04:33.949 --> 00:04:37.209
但是我们只是把它作为一个网络来讨论,
But we'll just talk about it
more generally as a network,

78
00:04:37.209 --> 00:04:40.500
这意味着通过互联网，请求。
that means over the Internet, request.

79
00:04:40.500 --> 00:04:41.923
这就是了，一个网络请求。
There it is, a Network Request.

80
00:04:41.923 --> 00:04:46.670
这就是我们将要在网页浏览器中使用的功能。
That's the feature we're gonna
use in the web browser down here.

81
00:04:46.670 --> 00:04:55.579
就是这样，网络请求，威尔 · 森特斯: 就是这样。
There it is, Network Request,
&gt;&gt; Will Sentance: There it is.

82
00:04:55.579 --> 00:05:00.269
我们大概在0毫秒内完成这个过程。
And we're doing this at roughly I guess,
zero milliseconds.

83
00:05:00.269 --> 00:05:03.781
我们倾向于从那里开始。
We tend to start there.

84
00:05:03.781 --> 00:05:07.449
顺便说一下，看看这个五个字母的单词已经做了多少工作。
By the way, already, look how much
that five letter word has done.

85
00:05:07.449 --> 00:05:09.470
而我们，还没有完成。
And we, not done yet.

86
00:05:11.399 --> 00:05:16.449
对 Twitter 的网络请求需要知道什么重要信息 Jeff,
A network request to Twitter needs to
know what important information Jeff,

87
00:05:16.449 --> 00:05:18.040
从什么被传送到接收,
from what's being passed into fetch,

88
00:05:18.040 --> 00:05:20.079
它需要知道哪些重要信息才能知道去哪里？
what important information does it
need to know to know where to go?

89
00:05:21.310 --> 00:05:22.199
杰夫: 地址。
&gt;&gt; Jeff: The address.

90
00:05:22.199 --> 00:05:24.040
威尔 · 森特斯: 是的，这里有两部分。
&gt;&gt; Will Sentance: Yeah and
that's sorta got two parts here.

91
00:05:24.040 --> 00:05:27.149
上面有域名,
It's got the domain name,

92
00:05:27.149 --> 00:05:31.750
它会告诉我们在互联网上应该去哪台电脑，在哪个 IP 地址。
that's gonna tell us which computer on the
Internet to go to, at which IP address.

93
00:05:31.750 --> 00:05:36.840
一旦我们在那里着陆，这条路径，就会告诉我们这些电脑的哪一部分
And once we land there, the path, that's
gonna tell us which bit of that computers

94
00:05:36.840 --> 00:05:39.750
存储数据，我们要去哪条路线，并从中获取数据。
store of data, which route that
we're gonna go and grab data from.

95
00:05:41.519 --> 00:05:47.009
这两个部件会被传送到我们的网络请求。
Those two pieces are gonna be passed
to our Network Request down here.

96
00:05:47.009 --> 00:05:52.096
所以我们必须有我们的推特网站,
So we're gotta have our twitter.com,

97
00:05:52.096 --> 00:05:56.141
我们会找到自己的路。
and we're gonna have our path.

98
00:05:56.141 --> 00:06:02.079
我们可以通过互联网从浏览器发送数据，或者我们也可以要求数据。
And we can send data from a browser over
the Internet, or we can also ask for data.

99
00:06:02.079 --> 00:06:04.749
所以我们可以说，嘿，我有一个新的推特，我想让你保存。
So we can say, hey,
I've got a new tweet I want you to save.

100
00:06:06.649 --> 00:06:07.798
我们使用什么方法呢？
What's a method we use for that?

101
00:06:07.798 --> 00:06:11.266
我们用什么 HTTP 方法发送数据，发布。
What's the HTTP method we
use to send data, to post.

102
00:06:11.266 --> 00:06:13.093
观众: (笑)威尔 · 森塔斯: 好了。
&gt;&gt; Audience: [LAUGH]
&gt;&gt; Will Sentance: There we go.

103
00:06:13.093 --> 00:06:13.990
亲爱的。
Dear.

104
00:06:13.990 --> 00:06:15.103
好了，各位。
All right, well everybody.

105
00:06:15.103 --> 00:06:18.649
太棒了，是的，发表了，干得好。
[LAUGH] Brilliant, yes, post, well done.

106
00:06:18.649 --> 00:06:20.449
没错 post。
Exactly, post.

107
00:06:20.449 --> 00:06:22.942
如果我们想要的主要是获取数据推文呢？
What about when we wanted is
mainly be getting data tweets?

108
00:06:22.942 --> 00:06:24.255
好的，对-观众: (笑)
Okay, right-
&gt;&gt; Audience: [LAUGH]

109
00:06:24.255 --> 00:06:24.814
威尔 · 森塔斯: 这太愚蠢了。
&gt;&gt; Will Sentance: This is just silly.

110
00:06:24.814 --> 00:06:25.446
好吧。
All right, well.

111
00:06:25.446 --> 00:06:27.702
观众: (笑)威尔 · 森塔斯: 我们会重拍的。
&gt;&gt; Audience: [LAUGH]
&gt;&gt; Will Sentance: We'll reshoot that.

112
00:06:27.702 --> 00:06:29.625
如果我想检索数据怎么办？
What if I want to retrieve data?

113
00:06:29.625 --> 00:06:30.622
讲者4: Get。
&gt;&gt; Speaker 4: Get.

114
00:06:30.622 --> 00:06:31.216
威尔 · 森坦斯: 得到。
&gt;&gt; Will Sentance: Get.

115
00:06:31.216 --> 00:06:31.869
瑞恩: 走吧。
&gt;&gt; Ryan: Get.

116
00:06:31.869 --> 00:06:32.512
威尔 · 森特斯: 干得好，伙计们。
&gt;&gt; Will Sentance: Get, well done, people.

117
00:06:32.512 --> 00:06:34.026
留在里面。
Leave it in.

118
00:06:34.026 --> 00:06:37.389
听众: (笑)威尔 · 森塔斯: 那么,
&gt;&gt; Audience: [LAUGH]
&gt;&gt; Will Sentance: So,

119
00:06:37.389 --> 00:06:38.963
我们这里没有明确说明。
we didn't specify that here.

120
00:06:38.963 --> 00:06:40.807
这是因为 fetch 默认为 get。
That's because fetch defaults to get.

121
00:06:40.807 --> 00:06:42.629
它会默认为。
It's gonna default to get.

122
00:06:42.629 --> 00:06:47.579
如果我们想 Post，我们实际上可以作为另一个参数传入
If we wanted to Post, we can
actually pass in as another argument

123
00:06:47.579 --> 00:06:50.079
获取一个充满选择的对象。
to fetch an object full of options.

124
00:06:50.079 --> 00:06:54.170
这意味着我们需要了解更多关于如何使用 fetch 的信息。
That means kind of extra information
about how we wanna use fetch.

125
00:06:54.170 --> 00:06:55.778
我们可以设置发布的方法。
And we can set the method to be posting.

126
00:06:55.778 --> 00:07:00.439
但是我们会默认从这个五个字母的单词,
But we're gonna default to get all by
the way from this five letter word,

127
00:07:00.439 --> 00:07:01.220
有点疯狂。
kind of crazy.

128
00:07:02.439 --> 00:07:03.103
这就是我们正在使用的功能。
That's the feature we're using.

129
00:07:03.103 --> 00:07:04.826
完成了吗？
Is it complete?

130
00:07:04.826 --> 00:07:08.151
好吧，这都是第二种，但是
Well, that's all kind of second, but

131
00:07:08.151 --> 00:07:13.839
完成后，威尔 · 森坦斯: 我们该怎么办？
on completion,
&gt;&gt; Will Sentance: What are we gonna do?

132
00:07:14.980 --> 00:07:18.110
它是在零毫秒时完成的吗？
Is it complete at zero milliseconds?

133
00:07:18.110 --> 00:07:20.279
上网需要多长时间？
How long does it take to be
able to go to the Internet?

134
00:07:20.279 --> 00:07:22.730
上网需要零毫秒吗？
Does it take zero milliseconds to
be able to go to the Internet?

135
00:07:22.730 --> 00:07:24.709
没有所以是完整的吗 Kayla？
No, so is it complete, Kayla?

136
00:07:24.709 --> 00:07:25.209
没有 威尔 · 森塔斯: 绝对没有。
&gt;&gt; Kayla: No.
&gt;&gt; Will Sentance: It's definitely no.

137
00:07:25.209 --> 00:07:25.882
完全正确。
Spot on.

138
00:07:28.769 --> 00:07:31.132
威尔 · 森塔斯: 事实上，在我们开始完成工作之前,
&gt;&gt; Will Sentance: Actually, before we
move on to what we do on completion,

139
00:07:31.132 --> 00:07:32.250
我们开始吧。
let's get it started.

140
00:07:32.250 --> 00:07:34.240
我们开始工作吧。
Let's get the work started.

141
00:07:34.240 --> 00:07:39.090
所以它会通过互联网发送信息,
So it's gonna send a message
off to over the Internet,

142
00:07:39.090 --> 00:07:45.000
它开始通过互联网向 Twitter 总部发送 HTTP 消息。
it starts to send a HTTP message over
the Internet to Twitter's headquarters.

143
00:07:46.029 --> 00:07:52.360
他们在那里，Twitter 总部，就在那里。
There they are, Twitter HQ, there it is.

144
00:07:52.360 --> 00:07:56.112
我从来不知道我是在这里画电脑还是有点像办公室，但是
I never know whether I'm drawing a
computer here or kinda like an office, but

145
00:07:56.112 --> 00:07:58.079
让我们保持模棱两可。
let's leave it ambiguous.

146
00:07:58.079 --> 00:08:00.692
实际上，那是，威尔 · 森坦斯: 可能是
Actually that's,
&gt;&gt; Will Sentance: Could be

147
00:08:00.692 --> 00:08:01.502
一间办公室，不是吗？
an office, couldn't it?

148
00:08:01.502 --> 00:08:03.927
可能有点有意思。
Could be, it's kind of, interesting, yeah.

149
00:08:03.927 --> 00:08:05.997
听众: (笑)威尔 · 森塔斯: 一个观察,
&gt;&gt; Audience: [LAUGH]
&gt;&gt; Will Sentance: One observation,

150
00:08:05.997 --> 00:08:10.588
在互联网上，开始的时间是0毫秒,
there it is, over the Internet,
that's started off as zero milliseconds,

151
00:08:10.588 --> 00:08:14.274
它会说，嘿，Twitter，我需要去获取数据。
off it runs saying, hey, Twitter,
I need to go and get data.

152
00:08:14.274 --> 00:08:18.480
好吧，但目前还没有完成。
All right, but
it's not complete at this point.

153
00:08:18.480 --> 00:08:21.461
顺便说一下，所有这些都是通过这五个字母完成的。
By the way,
all this done by these five letters.

154
00:08:24.605 --> 00:08:26.132
威尔 · 森坦斯: 我要回到我的故事
&gt;&gt; Will Sentance: I'm gonna
go back to my story about my

155
00:08:26.132 --> 00:08:27.867
跨西伯利亚铁路的雇主。
employer at the transsiberian railway.

156
00:08:27.867 --> 00:08:29.824
在互联网上到处都是，怎么样？
All over the Internet, how about that?

157
00:08:29.824 --> 00:08:33.451
好吧，那么，在网上，是的，那么,
All right, so, at the Internet, yeah, so,

158
00:08:33.451 --> 00:08:37.086
一旦完工，会发生什么？
on completion though,
what is gonna happen?

159
00:08:37.086 --> 00:08:42.775
如果你还记得我说的暂停当我们设置一个背景功能时,
Well, if you remember when I said timeout,
when we set up a background feature,

160
00:08:42.775 --> 00:08:47.128
我们这里有一个函数可以在 Call Stack 上自动运行,
we had a function here,
that would auto run on the Call Stack,

161
00:08:47.128 --> 00:08:51.147
我们把 Call Stack 放在这里,
let's actually put our Call Stack
in here at this point,

162
00:08:51.147 --> 00:08:55.947
将自动运行的调用堆栈，将森坦斯: 在
would auto run on the Call Stack,
&gt;&gt; Will Sentance: On

163
00:08:55.947 --> 00:09:00.038
完成后台任务。
completion of the background task.

164
00:09:00.038 --> 00:09:04.389
但是有人看到一个函数在这里被解析为 fetch 吗？
But anyone see a function
being parsed into fetch here?

165
00:09:04.389 --> 00:09:08.480
没有，所以我们的双重功能
No, so our two pronged features or

166
00:09:08.480 --> 00:09:13.460
在 web 浏览器功能方面，他们采用了不同的模式。
facade functions for web browser features,
they take a different model.

167
00:09:13.460 --> 00:09:18.240
他们说，不是传入一个函数,
They say,
instead of having a function passed in,

168
00:09:18.240 --> 00:09:21.309
你可以看到这个漂亮的东西
you've got this pretty object
that's kind of keeping track

169
00:09:21.309 --> 00:09:23.200
我们在背景里设置了一些东西。
of the fact that we set
something up in the background.

170
00:09:24.519 --> 00:09:25.480
所以人们会使用它。
So one will use it.

171
00:09:26.789 --> 00:09:30.970
实际上，当数据返回时，我们用紫色表示返回的数据
And in fact, when that data comes back,
let's use purple for my return data from

172
00:09:30.970 --> 00:09:34.769
推特，当它完成的时候，它会带回一些推文。
Twitter, when it does complete,
it's gonna come back with some tweets.

173
00:09:34.769 --> 00:09:36.149
他们称之为响应对象。
They call it response object.

174
00:09:36.149 --> 00:09:37.000
我们要简化它
We're gonna simplify it and

175
00:09:37.000 --> 00:09:39.659
只要给它一连串的推特，无论它什么时候回来。
just give it the string of the tweet,
whenever it comes back.

176
00:09:39.659 --> 00:09:40.519
这能去哪儿呢？
Where could that go?

177
00:09:41.529 --> 00:09:42.860
如果你有什么想法，请举手
Raise your hand if you've got an idea

178
00:09:44.139 --> 00:09:48.639
我们如何将这些数据返回到作业中，并返回到 JavaScript 中。
how we could get that data back into jobs
where it could go back in JavaScript.

179
00:09:48.639 --> 00:09:50.269
好的，让我们请凯拉。
Yeah, let's have Kayla.

180
00:09:50.269 --> 00:09:53.576
是这样的我不记得你叫它什么了,
&gt;&gt; Kayla: It goes,
I can't remember what you called it,

181
00:09:53.576 --> 00:09:56.371
在威尔 · 森塔斯的一些东西上: 它不是
the on, something on the
&gt;&gt; Will Sentance: It's not

182
00:09:56.371 --> 00:09:56.948
放到那个数组里。
into that array.

183
00:09:56.948 --> 00:09:59.029
马克，你要不要短一点？
Mark, do you wanna take this short?

184
00:09:59.029 --> 00:09:59.600
马克: 进入价值？
&gt;&gt; Mark: Into the value?

185
00:09:59.600 --> 00:10:00.779
进入价值属性。
&gt;&gt; Will Sentance: Into the value property.

186
00:10:00.779 --> 00:10:04.789
对了，顺便说一下，你说，凯拉，在那里，进入价值属性。
So right, by the way, you said, Kayla,
there, into the value property.

187
00:10:04.789 --> 00:10:09.500
因为取物有两个尖端，它们紧密地连接在一起。
Because fetch has these two prongs,
and they are intimately connected.

188
00:10:09.500 --> 00:10:12.960
这样当后台任务完成时,
Such that when the background
task completes,

189
00:10:12.960 --> 00:10:16.120
它会粘在那个立即返回的物体上。
it's going to stick into that
immediately returned out object.

190
00:10:16.120 --> 00:10:19.940
无论何时发生这种情况，都可能是明天，非常，非常慢的网络请求。
Whenever this happens, could be tomorrow,
very, very slow network request.

191
00:10:19.940 --> 00:10:21.610
但随时都有可能,
But could be any time,

192
00:10:21.610 --> 00:10:25.490
存储在 futureData 中的对象有一个漂亮的
that object that got stored into
futureData has a beautiful little, look at

193
00:10:25.490 --> 00:10:29.809
空的未定义绑定属性可以存储什么？
that, empty undefined binding property,
into which what could be stored Kayla?

194
00:10:29.809 --> 00:10:30.687
回应。
&gt;&gt; Kayla: The response.

195
00:10:30.687 --> 00:10:33.087
威尔 · 森坦斯: 回复数据，来自 Twitter 的数据,
&gt;&gt; Will Sentance: The response data,
the data that comes back from Twitter,

196
00:10:33.087 --> 00:10:33.761
她说对了。
she's spot on.

197
00:10:33.761 --> 00:10:36.875
它将返回到这个值属性中。
It will go back into this value property.

198
00:10:36.875 --> 00:10:38.900
特别是 Matt,
So specifically, Matt,

199
00:10:38.900 --> 00:10:44.889
什么样的确切位置，我可以把它放在这里的完成位？
what's the exact sort of locations I can
put it in the on completion bit here?

200
00:10:44.889 --> 00:10:46.135
马特: 它在未来数据中。
&gt;&gt; Matt: It's in the futureData.

201
00:10:46.135 --> 00:10:49.784
未来数据，嗯，未来数据,
&gt;&gt; Will Sentance: FutureData,
mm-hm, futureData.,

202
00:10:49.784 --> 00:10:51.841
马特: 点值。
&gt;&gt; Matt: Dot value.

203
00:10:51.841 --> 00:10:54.375
点值，是的，没错,
&gt;&gt; Will Sentance: Dot value, yeah exactly,

204
00:10:54.375 --> 00:10:59.113
值会随着数据更新,
futureData.value will be
updated with the data,

205
00:10:59.113 --> 00:11:04.289
正如凯拉所说，从对互联网讲话。
just as Kayla said,
from speaking to the Internet.

206
00:11:04.289 --> 00:11:06.590
是的，她说得很对，也要谢谢马特。
Yeah, she's spot on,
thank you to Matt as well.

207
00:11:06.590 --> 00:11:13.539
好了，各位，我们能不能稍微谈谈那五个字母的作用？
All right people, can we just talk about
for a second what those five letters did?

208
00:11:13.539 --> 00:11:17.539
我的天，他们设置在背景里，他们对着互联网说话
My goodness, they set up in
the background, they speak to the Internet

209
00:11:17.539 --> 00:11:21.169
它需要所有的信息，去取回正确的数据。
with all the information it needs
to go and get the right data back.

210
00:11:21.169 --> 00:11:25.779
但是他们也在 JavaScript 中设置了一个小的占位符对象，称为
But they also set up in JavaScript
a little placeholder object known as

211
00:11:25.779 --> 00:11:28.929
一个承诺的对象。
a promise object.

212
00:11:31.240 --> 00:11:34.559
只是一个普通的对象，但有一些自动内置的属性。
Just a regular object but
with some auto built in properties.

213
00:11:34.559 --> 00:11:38.360
存储在 futureData 中，就是这样。
And that was stored into futureData,
there it is.

214
00:11:38.360 --> 00:11:41.940
它有一个空值属性，它在 on fulfilled 属性上有一个空数组,
It has an empty value property, it has an
empty array on the on fulfilled property,

215
00:11:41.940 --> 00:11:44.059
顺便说一句，这是一个隐藏的财产。
which by the way we'll
see as a hidden property.

216
00:11:46.110 --> 00:11:50.860
但它与正在进行的背景工作密切相关。
But it's intimately linked to
the background work being done.

217
00:11:50.860 --> 00:11:53.090
这样当背景工作完成后,
Such that when the background
work finishes,

218
00:11:53.090 --> 00:11:56.679
可能是200毫秒，300毫秒，谁知道呢？
could be 200 milliseconds from now,
300, who knows?

219
00:11:56.679 --> 00:12:00.582
对象的 value 属性将被[ SOUND ]更新。
That value property of the object
is gonna be [SOUND] updated.
