WEBVTT

1
00:00:00.000 --> 00:00:03.923
[音乐]
[MUSIC]

2
00:00:03.923 --> 00:00:08.160
&gt；&gt；Douglas Crockford：我刚才概述的这个攻击称为XSS攻击，
&gt;&gt; Douglas Crockford: So this attack which I just outlined is called the XSS attack,

3
00:00:08.160 --> 00:00:10.942
代表跨站点脚本。
which stands for cross site scripting.

4
00:00:10.942 --> 00:00:12.769
现在它应该被称为CSS。
Now it should be called CSS.

5
00:00:12.769 --> 00:00:15.539
但是还有另一个令人憎恶的东西叫做CSS。
But there was another abomination called CSS.

6
00:00:15.539 --> 00:00:20.059
所以他们称它为XSS，但名称是个问题。
So they call it XSS but the name is a problem.

7
00:00:21.239 --> 00:00:24.199
名字说跨站点描述有问题，但是
The name says that there's something wrong with cross-sitescripting but

8
00:00:24.199 --> 00:00:27.289
事实上，这是一件非常可取的事情。
in fact that is a highly desirable thing.

9
00:00:27.289 --> 00:00:30.679
我们希望能够有网站相互合作，业务和
We want to be able to have sites cooperate with each other and businesses and

10
00:00:30.679 --> 00:00:34.249
服务相互协作，这些服务可能位于不同的站点上。
services cooperate with each other which might be located on different sites.

11
00:00:35.289 --> 00:00:39.722
这是一件可取的事情，并不是一件坏事。
That's a desirable thing, it's not a bad thing.

12
00:00:39.722 --> 00:00:45.030
并且这种攻击的形式不需要使用第二个站点。
And there are forms of this attack which do not require the use of a second site.

13
00:00:45.030 --> 00:00:49.159
所以这个名字是完全错误的，但是安全专家首先
So the name is just completely wrong but the security experts who first

14
00:00:49.159 --> 00:00:53.049
已确定此攻击不了解此攻击是什么。
identified this attack did not understand what this attack was.

15
00:00:53.049 --> 00:00:56.100
他们给了一个不正确的名字，但是
They gave an incorrect name but

16
00:00:56.100 --> 00:01:00.590
安全行业仍在使用这个名称，他们期待您成为
the security industry is still operating on that name, and they're expecting you as

17
00:01:00.590 --> 00:01:05.578
当他们的语言不正确时，实践者要理解他们的意思。
practitioners to understand what they're meaning when their language is incorrect.

18
00:01:08.079 --> 00:01:13.289
跨站点脚本攻击是在1995年JavaScript首次发布时发明的
Cross site scripting attacks were invented in 1995 when JavaScript was first released

19
00:01:13.289 --> 00:01:15.090
从那以后他们就一直在继续。
and they've been going on ever since.

20
00:01:16.810 --> 00:01:21.510
我们现在正处于跨站点脚本攻击的20周年纪念日。
We're just now on the 20th anniversary of cross site scripting attacks.

21
00:01:23.280 --> 00:01:25.560
所以，我们已经迈出了一些小步。
So, we have made some baby steps.

22
00:01:25.560 --> 00:01:29.930
例如，现在浏览器中有一个内容安全策略。
For example, there's a content security policy thing that's in browsers now.

23
00:01:31.099 --> 00:01:34.370
花了很长时间才把它弄出来，但它就在那里。
It took a long time to get it out but it's out there.

24
00:01:34.370 --> 00:01:36.520
不幸的是，大多数网站都没有使用它。
Unfortunately most sites aren't using it.

25
00:01:36.520 --> 00:01:38.479
所以默认情况下它仍然是不安全的。
So it's still unsafe by default.

26
00:01:39.990 --> 00:01:41.210
事实上，为了使用它，
And in fact, in order to use it,

27
00:01:41.210 --> 00:01:46.069
这意味着很多常见的做法现在都变成了非法的，因为它们应该是非法的。
it means that a lot of common practices now become illegal, as they should.

28
00:01:46.069 --> 00:01:50.680
但因为它们是常见的做法，它不会被使用。
But because they're common practices, it's not gonna get used.

29
00:01:52.569 --> 00:01:55.323
mashup是一种自我造成的XSS攻击，
A mashup is a self-inflicted XSS attack,

30
00:01:55.323 --> 00:01:58.228
事实证明，广告是一个混搭，而且
and it turns out advertising is a mashup, and

31
00:01:58.228 --> 00:02:03.063
注入恶意代码最可靠、最具成本效益的方法是购买广告。
the most reliable cost effective method to inject evil code is to buy an ad.

32
00:02:06.418 --> 00:02:08.289
&gt；&gt；Douglas Crockford：那么为什么会有XSS呢？
&gt;&gt; Douglas Crockford: So why is there XSS?

33
00:02:08.289 --> 00:02:10.729
所以当架构层面出现问题时，
So when things go wrong at an architectural level,

34
00:02:10.729 --> 00:02:12.060
永远不会只有一件事。
it's never just one thing.

35
00:02:12.060 --> 00:02:14.909
你需要很多事情同时出错。
You need a lot of things to go wrong simultaneously.

36
00:02:14.909 --> 00:02:16.829
这件事发生在网络上。
And that happened on the Web.

37
00:02:16.829 --> 00:02:19.300
第一个是Web堆栈太复杂。
The first one is that the web stack is too complicated.

38
00:02:19.300 --> 00:02:23.610
有太多的语言，每种语言都有自己的编码，引用，
There are too many languages, each with its own encoding, quoting,

39
00:02:23.610 --> 00:02:28.189
注释和擒纵约定，它们都可以相互嵌套。
commenting and escapement conventions that can all be nested inside of each other.

40
00:02:28.189 --> 00:02:30.689
我把这个叫做土耳其问题。
I've called this the turducken problem.

41
00:02:30.689 --> 00:02:34.110
很难看到一段代码
It's very difficult to look at a piece of code and

42
00:02:34.110 --> 00:02:37.689
确定它在所有情况下都是良性的。
determine that it's going to be benign in all contexts.

43
00:02:37.689 --> 00:02:39.420
这是一个很难做的分析.
That's a very hard analysis to do..

44
00:02:39.420 --> 00:02:42.775
而且它变得更糟了，因为浏览器做了英勇的
And it's made even worse because browsers do heroic

45
00:02:42.775 --> 00:02:45.254
试图从格式错误的内容中找出有意义的东西。
things to try to make sense out of malformed content.

46
00:02:47.224 --> 00:02:51.844
事实上，HTML5一开始就是试图将可怕的愚蠢行为标准化
In fact HTML5 began as an attempt to standardize the terrible stupid

47
00:02:51.844 --> 00:02:54.884
浏览器试图解释无效HTML所做的事情。
things that browsers do to try to make sense of invalid HTML.

48
00:02:57.110 --> 00:03:01.522
然后再加上基于模板的Web框架的流行
Then that's compounded with the popularity of template-based web frameworks that

49
00:03:01.522 --> 00:03:03.307
针对XSS注入进行了优化。
are optimized for XSS injection.

50
00:03:03.307 --> 00:03:06.305
我讨厌模板，我们稍后再讨论这些。
I hate templating, we'll talk more about those later.

51
00:03:06.305 --> 00:03:11.080
最后，JavaScript全局对象给出了所有脚本片段
And then finally the JavaScript global object gives every scrap of script

52
00:03:11.080 --> 00:03:13.325
同样强大的能力。
the same powerful capabilities.

53
00:03:13.325 --> 00:03:16.312
但就像安全部门一样糟糕，
And yet as bad as it is at security,

54
00:03:16.312 --> 00:03:21.772
浏览器仍然是对其他所有东西的巨大改进。
the browser is still a vast improvement over everything else.

55
00:03:21.772 --> 00:03:27.050
所以问题不是跨站点脚本攻击。
So the problem is not a cross site scripting attack.

56
00:03:27.050 --> 00:03:29.379
这是利益的混淆。
It is a confusion of interests.

57
00:03:29.379 --> 00:03:33.920
浏览器区分用户和站点的兴趣，但是
The browser distinguishes between the interests of the user and of the site, but

58
00:03:33.920 --> 00:03:37.310
它没有预料到可能会涉及其他利益。
it did not anticipate that there might be other interests involved.

59
00:03:37.310 --> 00:03:38.170
这就是它失败的地方。
And that's where it fails.

60
00:03:40.590 --> 00:03:42.865
所以页面内的兴趣是混乱的。
So within a page interests are confused.

61
00:03:42.865 --> 00:03:45.425
所以一个广告，一个小部件，一个Ajax库，
So an ad, a widget, an AJAX library,

62
00:03:45.425 --> 00:03:50.129
分析库，任何从第三方加载的东西，
an analytics library, anything that gets loaded from a third party,

63
00:03:50.129 --> 00:03:52.979
所有这些代码都获得与您完全相同的权限。
all of that code gets exactly the same rights as you do.

64
00:03:55.110 --> 00:03:59.680
这意味着你信任所有其他机构中的每个人。
It means you are trusting everybody in all of those other institutions.

65
00:04:02.580 --> 00:04:05.300
现在JavaScript接近于正确地完成它
Now JavaScript gets close to getting it right and

66
00:04:05.300 --> 00:04:09.893
我认为JavaScript可以修复并成为一种对象能力语言，
I think JavaScript can be repaired and become an object capability language,

67
00:04:09.893 --> 00:04:11.620
我们将更多地讨论这意味着什么。
we'll talk more about what that means.

68
00:04:13.199 --> 00:04:17.449
HTML，我对我们修复HTML没有任何希望
HTML, I don't have any hope that we're ever gonna fix HTML and

69
00:04:17.449 --> 00:04:22.353
DOM是HTML使用可怕API，非常不安全。
the DOM which is that hideous API that HTML uses, is horribly insecure.

70
00:04:22.353 --> 00:04:23.754
我也不认为这种感觉会消失。
I don't see that going away either.

71
00:04:25.165 --> 00:04:28.362
所以这些东西不会很快修好。
So this stuff is not gonna get fixed in a hurry.

72
00:04:28.362 --> 00:04:32.391
因此，由Web开发人员在不安全的环境中创建安全的应用程序
So it's up to web developers to create secure applications on an insecure

73
00:04:32.391 --> 00:04:35.682
平台，这真的，真的很难。
platform and that is really, really hard.

74
00:04:35.682 --> 00:04:39.461
它本不应该那么难，但它就是那么难。
It shouldn't have to be that hard but it is that hard.
