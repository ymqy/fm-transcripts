WEBVTT

1
00:00:00.000 --> 00:00:03.595
[音樂]
[MUSIC]

2
00:00:03.595 --> 00:00:08.465
&gt；&gt；Douglas Crockford：這種使用函式構造物件的模式。
&gt;&gt; Douglas Crockford: This pattern for using functions to construct objects.

3
00:00:08.465 --> 00:00:13.115
我有我的建構函式，我傳入了我的初始化物件，
And I've got my constructor function, I've passed in my initialization object,

4
00:00:13.115 --> 00:00:18.256
我正在呼叫另一個建構函式，它允許我繼承它所做的事情。
I'm calling another constructor, which allows me to inherit what that thing does.

5
00:00:18.256 --> 00:00:23.750
我會在上面新增一些東西，或者這將是我正在構建的物件。
And I'm gonna add stuff to that, or that will be the object that I'm constructing.

6
00:00:23.750 --> 00:00:26.570
我將建立我的成員變數，
I will create my member variables,

7
00:00:26.570 --> 00:00:29.780
這些都是我的方法可以訪問的東西。
which are the things that my methods will have access to.

8
00:00:29.780 --> 00:00:31.879
我要把整個州都放在那裡，
That's where I'm gonna be keeping all of the state,

9
00:00:31.879 --> 00:00:33.700
此物件中的所有資料。
all of the data that's within this object.

10
00:00:33.700 --> 00:00:40.030
我將建立我的成員方法，它們只是這個作用域中的區域性函式，
I will create my member methods, which are just local functions within this scope,

11
00:00:40.030 --> 00:00:43.948
其中的每一個都將關閉我們傳入的初始化值，
and each of these will close over the initialization value that we passed in,

12
00:00:43.948 --> 00:00:44.969
或者不管那是什麼。
or whatever that is.

13
00:00:44.969 --> 00:00:49.350
我推薦一個物件，勝過所有其他成員
I recommend an object, over all of the other members and

14
00:00:49.350 --> 00:00:51.399
而不是所有其他的方法。
over all of the other methods.

15
00:00:51.399 --> 00:00:55.079
這樣我們就不會在這個模式中使用這個了。
So that we don't ever use this in this pattern.

16
00:00:56.170 --> 00:01:01.329
然後，任何需要公開的內容，我都會通過將其分配給
And then anything which needs to be public, I publish it by assigning it

17
00:01:01.329 --> 00:01:07.780
新增到傳出物件，當我完成時，我返回傳出物件。
to the outgoing object and when I'm done, I return the outgoing object.

18
00:01:07.780 --> 00:01:11.629
而且，我想要多少成員就有多少成員，我想要多少方法就有多少方法。
And also, have as many members as I want, as many methods as I want.

19
00:01:11.629 --> 00:01:16.189
我想公開多少就公開多少，然後就完了。
I make as many of them public as I need to, and then I'm done.

20
00:01:17.239 --> 00:01:20.879
這是一種非常簡單的製作物品的方法，非常靈活。
It's a really straightforward way of making objects, it's very flexible.

21
00:01:20.879 --> 00:01:24.560
關於這一點有很多很多的變體，但這是基本模式
There are lots and lots of variations on this, but this is the basic pattern

22
00:01:24.560 --> 00:01:28.670
我推薦使用它來構造JavaScript中的物件。
that I recommend for using, for constructing objects in JavaScript.

23
00:01:30.620 --> 00:01:36.165
現在，明年當所有ES6都可用時，
Now, next year when all of ES6 becomes available, and there's some new syntax in

24
00:01:36.165 --> 00:01:41.349
ES6，可以應用於此，也著眼於使
ES6, which can be applied toward this, and also with an eye on making

25
00:01:41.349 --> 00:01:46.310
我們的系統更加安全，我要把模式修改成這樣。
our systems even more secure, I'm going to revise the pattern to be like this.

26
00:01:47.659 --> 00:01:49.864
這就是明年的模式。
So this is next year's pattern.

27
00:01:49.864 --> 00:01:52.930
我將一如既往地從建構函式物件開始，
I'm gonna start with a constructor object as before,

28
00:01:52.930 --> 00:01:57.174
裡面會有很多好東西，告訴我如何製作物品。
which will contain lots of good stuff, which tells me how to make the object.

29
00:01:57.174 --> 00:02:04.560
然後我將使我的例項成為變數，我在這裡使用了一些新的語法。
Then I'm gonna make my instance variables, and I'm using some new syntax here.

30
00:02:04.560 --> 00:02:06.975
首先，我使用的是let語句。
First off, I'm using the let statement.

31
00:02:06.975 --> 00:02:12.403
在這種情況下，使用let over var沒有優勢，但它使Java
In this case, there's no advantage to using let over var, but it makes the Java

32
00:02:12.403 --> 00:02:17.359
夥計們會更開心，所以我會試著用let，因為我們要遷移到新的語言。
guys happier, so I'm gonna try to use let as we move to the new language.

33
00:02:18.420 --> 00:02:24.409
變數名周圍的花括號，在這裡意味著一些特殊的東西。
And the curly braces around the variable name, means something special here.

34
00:02:24.409 --> 00:02:30.050
所以我要做的是，我要建立一個名為Member的新變數，
So what I'm doing is, I'm creating a new variable called member,

35
00:02:30.050 --> 00:02:34.240
我將使用spec.ember對其進行初始化。
and I'm going to initialize it with spec.member.

36
00:02:34.240 --> 00:02:38.270
所以這是做這類事情的一種速記方式，我可以輸入儘可能多的名字
So it's a shorthand for doing those sorts of things, and I can put as many names in

37
00:02:38.270 --> 00:02:43.180
花括號是我想要的，用逗號分隔，每個花括號
the curly braces as I want, separated by commas, and each of those

38
00:02:43.180 --> 00:02:48.490
名稱將由該物件中名稱相似的屬性初始化。
names will be initialized by a similarly named property from that object.

39
00:02:48.490 --> 00:02:52.639
所以這並不能讓我們做任何我們以前做不到的事情，但是它是一些
So this doesn't let us do anything that we couldn't do before, but it's some

40
00:02:52.639 --> 00:02:57.949
用於從初始化物件中拉出值的方便語法和
convenient syntax for pulling values out of the initialization object and

41
00:02:57.949 --> 00:03:04.354
將它們放入我們的區域性變數中。&gt；&gt；揚聲器2：當您說let(Member)=
putting them into our local variables. &gt;&gt; Speaker 2: When you say let (member) =

42
00:03:04.354 --> 00:03:10.719
規範，現在規範成員已初始化？&gt；&gt；道格拉斯·克羅克福德：它是
spec, now spec.member is initialized? &gt;&gt; Douglas Crockford: It's

43
00:03:10.719 --> 00:03:12.409
的初始化值
the initialization value for

44
00:03:12.409 --> 00:03:15.605
成員變數。&gt；&gt；道格拉斯·克羅克福德：所以
the member variable. &gt;&gt; Douglas Crockford: So

45
00:03:15.605 --> 00:03:21.709
該語句的含義與let(Ember)=spec.ember相同
that statement means the same thing as let (member) = spec.member

46
00:03:21.709 --> 00:03:24.528
&gt；&gt；發言人2：成員相等
&gt;&gt; Speaker 2: Member equals

47
00:03:24.528 --> 00:03:31.239
特定成員。&gt；&gt；道格拉斯·克羅克福德：那麼，
spec.member. &gt;&gt; Douglas Crockford: Then,

48
00:03:31.239 --> 00:03:33.961
我要用新的康斯特宣告。
I'm gonna use the new const statement.

49
00:03:33.961 --> 00:03:38.961
以類似的方式，我將轉到另一個建構函式，在那裡我將
In a similar way, I'm going to this other constructor where I'm going to

50
00:03:38.961 --> 00:03:43.478
獲取我將使用的方法，然後我將提取
get methods, which I'm gonna be using, and I'm going to extract

51
00:03:43.478 --> 00:03:48.689
我想要使用的方法，並將它們放到私有變數中。
the methods that I want to use and put them into private variables.

52
00:03:48.689 --> 00:03:53.719
我之所以這麼做，是因為我預計這個物體可能會被凍結，所以
And I'm doing that, because I anticipate that this object could be frozen, and so

53
00:03:53.719 --> 00:03:58.340
我不想像在以前的模型中那樣給它新增東西。
I don't want to be adding stuff to it as I was in the previous model.

54
00:03:58.340 --> 00:04:00.840
因為我不想打破如果有人
Because I don't want to break if someone

55
00:04:02.419 --> 00:04:05.960
我想要繼承的東西把我當成了冰凍的東西。
that I'm trying to inherit from passes me as a frozen object.

56
00:04:07.530 --> 00:04:10.490
這也解決了有時被稱為香蕉問題的問題。
This also solves what's sometimes called the banana problem.

57
00:04:12.069 --> 00:04:14.539
有關於物體系統的投訴，
That there's a complaint about object systems,

58
00:04:14.539 --> 00:04:17.240
在那裡你想繼承一根香蕉。
where you want to inherit a banana.

59
00:04:17.240 --> 00:04:20.920
但你最終也繼承了拿著香蕉的大猩猩
But you end up also inheriting the gorilla that's holding the banana and

60
00:04:20.920 --> 00:04:23.060
大猩猩所在的叢林
the jungle that the gorilla is and

61
00:04:23.060 --> 00:04:26.759
你得到了所有這些東西，而你想要的只是這個小東西。
you get all of this stuff and all you wanted was this little thing.

62
00:04:26.759 --> 00:04:30.269
這使我們能夠做到這一點，我們可以提取我們想要的東西。
So this allows us to do that we can extract things that we want.

63
00:04:30.269 --> 00:04:32.420
因為我們現在正在提取東西，
And because we're extracting things now,

64
00:04:32.420 --> 00:04:35.860
我們想叫多少這樣的人就叫多少。
we can call it as many of these guys as we want.

65
00:04:35.860 --> 00:04:39.170
所以我們可以找到儘可能多的其他建構函式
So we can get to as many of these other constructors and take all of their

66
00:04:39.170 --> 00:04:44.360
然後把它拉到區域性變數中，我們就得到了所有的善。
goodness and pull it out into local variables and we get all that goodness.

67
00:04:45.790 --> 00:04:48.850
然後，再一次，我將制定我的方法，
Then, again I'm going to be making my methods, and

68
00:04:48.850 --> 00:04:52.439
再一次，我的方法將結束所有的東西。
again my methods will close over all of the stuff.

69
00:04:52.439 --> 00:04:54.428
再說一次，我的方法沒有使用這個。
And again, my methods are not using this.

70
00:04:56.629 --> 00:05:02.029
然後，當我完成後，我在這裡釋出公共方法。
Then when I'm done, I publish the public methods here.

71
00:05:02.029 --> 00:05:05.009
不管是我做的還是我繼承的。
The ones that I made or the ones that I inherited.

72
00:05:05.009 --> 00:05:08.899
我在這裡利用了新的物件文字語法。
And I'm taking advantage of new object literal syntax here.

73
00:05:08.899 --> 00:05:12.129
如果你有一個物件文字，你只需要說一個名字和
That if you have an object literal and you just say a name and

74
00:05:12.129 --> 00:05:17.800
你省略了冒號，這是名字的縮寫，叫名字。
you leave out the colon, it's a shorthand for name call a name.

75
00:05:17.800 --> 00:05:20.355
所以這是名為method的方法的縮寫。
So this is short for method called, method.

76
00:05:20.355 --> 00:05:22.500
這是“其他人呼叫另一個人”的縮寫。
And that's short for other call an other.

77
00:05:23.970 --> 00:05:26.250
再說一次，這不是必須的。
Again, not essential.

78
00:05:26.250 --> 00:05:32.090
但它很不錯，它給了我們一個，這開始看起來更像是一份宣言
But it's nice and it gives us a, this starts to look more like a declaration

79
00:05:32.090 --> 00:05:35.819
而不是像程式碼一樣，在那裡我只是得到我想要釋出的東西的列表。
than like code, where I'm just getting the list of things that I want to publish.

80
00:05:38.069 --> 00:05:41.590
最後，我要凍結那個物體
Then finally, I'm going to freeze that object

81
00:05:41.590 --> 00:05:45.550
因為冷凍為我們提供了非常好的安全性和可靠性
because freezing gives us very good security and reliability properties for

82
00:05:45.550 --> 00:05:49.079
物件，我們不能以任何其他方式在這種語言中獲取這些物件。
objects, which we can't get in this language in any other way.

83
00:05:50.340 --> 00:05:54.449
所以當我們看程式設計的演變時。
So when we look at the evolution of programming.

84
00:05:56.649 --> 00:06:01.379
在像C和PASCAL這樣的語言中，我們有結構和記錄。
In languages like C and Pascal, we've got struct and records.

85
00:06:01.379 --> 00:06:05.019
量身定做的結構，讓你有名字，有屬性。
Tailored structures which let you have names, properties.

86
00:06:05.019 --> 00:06:07.089
然後是物件[INAUDIBLE]程式設計，
And then an object [INAUDIBLE] programming,

87
00:06:07.089 --> 00:06:10.860
我們更進一步，我們可以有功能或者
we took it a step further where we could have functions or

88
00:06:10.860 --> 00:06:15.399
與將作用於它們的結構相關的方法。
methods which are related to those structures which will act upon them.

89
00:06:16.540 --> 00:06:20.240
我認為這是非常重要的一步，但是
And I think that was a really important evolutionary step, but

90
00:06:20.240 --> 00:06:22.800
這不應該是最後一步。
it shouldn't have been the last step.

91
00:06:22.800 --> 00:06:27.980
所以我認為JavaScript實際上給了我們一種前進的方式，所以
So I think JavaScript actually gives us a way to go forward from this, so

92
00:06:27.980 --> 00:06:34.180
我現在認為我們有兩種截然不同的物體。
that I'm now thinking that we have two very distinct kinds of objects.

93
00:06:34.180 --> 00:06:38.300
我們的物件只包含資料，只包含資料和
We have objects which just contain data, only data and

94
00:06:38.300 --> 00:06:41.779
物件只包含凍結的函式。
objects contain only functions, which are frozen.

95
00:06:42.860 --> 00:06:47.159
這些物體非常堅固，非常可靠，不能被篡改。
And those objects are very strong, very reliable that cannot be tampered with.

96
00:06:48.500 --> 00:06:51.590
它們提供處理物件的介面，
They provide the interface for dealing with the objects,

97
00:06:51.590 --> 00:06:54.560
其中包含資料。
which are containing the data.

98
00:06:54.560 --> 00:06:58.569
這樣我們就可以建立好的API，它們可以自我防禦。
And that way we can create good API's, which can defend themselves.

99
00:06:58.569 --> 00:07:03.209
它可以保持健壯，面對所有正在發生的混亂
Which can remain robust and in the face of all the confusion that's happening

100
00:07:03.209 --> 00:07:06.670
在我們的系統內部。&gt；&gt；演講者2：那麼你們如何配對呢？
inside of our system. &gt;&gt; Speaker 2: So how would you pair those

101
00:07:06.670 --> 00:07:09.620
兩件事，資料，又是物件？&gt；&gt；道格拉斯·克羅克福德：我要把
two things, the data, object again? &gt;&gt; Douglas Crockford: I'm going to put

102
00:07:09.620 --> 00:07:16.454
成員變數中的資料。&gt；&gt；道格拉斯·克羅克福德：全部
the data in the member variables. &gt;&gt; Douglas Crockford: All

103
00:07:16.454 --> 00:07:19.103
的資料放在成員變數中，並且
of the data goes in the member variables, and

104
00:07:19.103 --> 00:07:23.009
它們可以包含簡單的值，如數字和字串。
those could contain simple values like numbers and strings.

105
00:07:23.009 --> 00:07:24.538
它們可能包含物體。
They could contain objects.

106
00:07:33.106 --> 00:07:33.639
&gt；&gt；道格拉斯·克羅克福德：那麼還有其他的嗎？
&gt;&gt; Douglas Crockford: So any other

107
00:07:33.639 --> 00:07:37.444
對此有問題嗎？&>&>演講者2：我一個也聽不懂
questions about that? &gt;&gt; Speaker 2: I don't understand any of

108
00:07:37.444 --> 00:07:38.432
這。道格拉斯·克羅克福德：是的，
this. &gt;&gt; Douglas Crockford: Yeah,

109
00:07:38.432 --> 00:07:39.879
今天下午我們再複習一遍。
we'll review it again this afternoon.

110
00:07:41.040 --> 00:07:42.779
所以我現在想做的是。
So what I want to do now.

111
00:07:42.779 --> 00:07:44.149
我們需要休息一下還是
Do we need a break or

112
00:07:44.149 --> 00:07:47.600
我們準備好進入下一個問題了嗎？&gt；&gt；演講者3：我能問一個問題嗎？
are we ready to go on to the next problem? &gt;&gt; Speaker 3: Can I just ask a question

113
00:07:47.600 --> 00:07:49.259
[聽不見]。&gt；&gt；道格拉斯·克羅克福德：謝謝。
[INAUDIBLE]. &gt;&gt; Douglas Crockford: Please.

114
00:07:49.259 --> 00:07:49.949
&gt；&gt；揚聲器3：那麼你是
&gt;&gt; Speaker 3: So you're

115
00:07:49.949 --> 00:07:51.779
我要用這個模式。
gonna use that pattern.

116
00:07:51.779 --> 00:07:56.622
您將擁有您的函式物件，您將擁有您要饋送的資料物件
You'll have your function object, you'll have your data object that you'll feed

117
00:07:56.622 --> 00:08:00.918
將您的資料輸入到函式物件中，然後將您的資料物件輸入到函式物件中，
your data into and you'll feed your data object into the function object,

118
00:08:00.918 --> 00:08:04.887
對該函式物件執行操作，建立一個新的資料物件，然後對其執行操作。
act on that function object creating a new data object to then act on.

119
00:08:04.887 --> 00:08:09.338
下一步是欺騙函式物件，這些物件都是從不改變的函式
The next in the cheat of function objects that are all functions which never change

120
00:08:09.338 --> 00:08:10.305
是不變的，但是
are immutable but

121
00:08:10.305 --> 00:08:12.389
他們將建立新的資料集。&gt；&gt；道格拉斯·克羅克福德：對。
they'll create new data sets. &gt;&gt; Douglas Crockford: Right.

122
00:08:12.389 --> 00:08:15.942
每次我們呼叫這個建構函式，我們都會得到一個新的東西，
Each time we call this constructor, we get a new thing and with it,

123
00:08:15.942 --> 00:08:17.089
它的功能正常執行。
it's functions go.

124
00:08:17.089 --> 00:08:22.214
它將關閉，無論您需要處理什麼物件。
It will close over, whatever objects you need to work on.

125
00:08:22.214 --> 00:08:22.930
&gt；&gt；揚聲器3：本身和
&gt;&gt; Speaker 3: In itself and

126
00:08:22.930 --> 00:08:27.360
這是你要建立的資料，這些資料都很漂亮，它會給你
it's data that you were to create, it is all beautiful and it's going to give you

127
00:08:27.360 --> 00:08:30.336
新資訊傳出。&gt；&gt；道格拉斯·克羅克福德：資料是可變的
new information out of. &gt;&gt; Douglas Crockford: The data is mutable

128
00:08:30.336 --> 00:08:36.415
但只能在函式範圍內，不能從外部進行變異，
but only within the function scope, you cannot mutate it from outside,

129
00:08:36.415 --> 00:08:38.655
除了通過盒子。&gt；&gt；揚聲器3：所以
except through the box. &gt;&gt; Speaker 3: So

130
00:08:38.655 --> 00:08:42.070
凍結並不意味著你可以改變它自己，如果你加起來的話
freeze doesn't mean that you can change its own if you add up

131
00:08:42.070 --> 00:08:43.475
這些功能。&gt；&gt；道格拉斯·克羅克福德：對。
the functions. &gt;&gt; Douglas Crockford: Right.

132
00:08:43.475 --> 00:08:44.331
&gt；&gt；揚聲器3：[相聲]給出新的
&gt;&gt; Speaker 3: [CROSSTALK] to give a new

133
00:08:44.331 --> 00:08:45.448
輸入。&gt；&gt；Douglas Crockford：凍結僅啟用
input. &gt;&gt; Douglas Crockford: Freeze is only on

134
00:08:45.448 --> 00:08:47.330
包含函式的物件。
the object containing the functions.

135
00:08:48.340 --> 00:08:52.090
函式本身仍然可以自由地對任何
The functions themselves are still free to act on anything with

136
00:08:52.090 --> 00:08:52.947
一個結案陳詞。&gt；&gt；揚聲器3：好的。
a close. &gt;&gt; Speaker 3: Okay.

137
00:08:52.947 --> 00:08:56.480
來追上你。&gt；&gt；揚聲器2：可以
To just catch up to you. &gt;&gt; Speaker 2: Could

138
00:08:56.480 --> 00:08:57.899
請回到上一張幻燈片。
you go back to the previous slide, please.

139
00:09:12.274 --> 00:09:12.794
&gt；&gt；揚聲器2：可能是5和
&gt;&gt; Speaker 2: And it could be five and

140
00:09:12.794 --> 00:09:16.720
可能會吧。道格拉斯·克羅克福德：是的，但是
it could be. &gt;&gt; Douglas Crockford: Yeah, but

141
00:09:16.720 --> 00:09:18.149
那是&gt；&gt；演講者2：它可以是你的任何東西
that's &gt;&gt; Speaker 2: It could be anything you

142
00:09:18.149 --> 00:09:18.960
想要。&gt；&gt；道格拉斯·克羅克福德：什麼都行
want. &gt;&gt; Douglas Crockford: It's anything

143
00:09:18.960 --> 00:09:20.149
您希望傳遞給建構函式。
you want to pass to a constructor.

144
00:09:48.582 --> 00:09:51.153
&gt；&gt；演講者2：我想我被
&gt;&gt; Speaker 2: I think I'm confused by

145
00:09:51.153 --> 00:09:59.828
事實上&gt；&gt；演講者2：什麼
the fact that &gt;&gt; Speaker 2: What

146
00:09:59.828 --> 00:10:03.067
另一個建構函式是否建立了一個尚未建立的
is the other constructor do if creates a not yet

147
00:10:03.067 --> 00:10:05.750
另一個物體。&gt；&gt；道格拉斯·克羅克福德：對。
another object that. &gt;&gt; Douglas Crockford: Right.

148
00:10:05.750 --> 00:10:08.940
IF提供了一種繼承其他東西的方式。
If provides a means of inheriting something else.

149
00:10:08.940 --> 00:10:10.668
這就是你在這件事上繼承的方式。
This is how you would do inheritance in this matter.

150
00:10:12.200 --> 00:10:15.009
如果您不需要繼承其他東西，那麼
If you don't need to inherit from something else, then

151
00:10:15.009 --> 00:10:19.980
開始時不要成為空物件。&gt；&gt；揚聲器2：或可以是以下值
just start without being an empty object. &gt;&gt; Speaker 2: Or could be some values that

152
00:10:19.980 --> 00:10:21.700
道格拉斯·克羅克福德：你可以指定？&gt；&gt；道格拉斯·克羅克福德：隨便什麼，
you could assign? &gt;&gt; Douglas Crockford: Whatever,

153
00:10:21.700 --> 00:10:27.311
嗯。&gt；&gt；揚聲器2：i
yeah. &gt;&gt; Speaker 2: I

154
00:10:27.311 --> 00:10:32.154
我不明白這和你有什麼關係，跟工作有什麼關係。
don't understand how this is related to you, to work.

155
00:10:32.154 --> 00:10:35.292
你祝賀我們五分鐘前做了一件事，
You congratulated us for doing something five minutes ago that,

156
00:10:35.292 --> 00:10:37.409
我已經用一個節點這樣做了一年了。
I've been doing that with a node for a year.

157
00:10:38.440 --> 00:10:42.460
這對我來說仍然沒有任何意義，我是說，這對我來說是有意義的。
And this still doesn't make any sense to, I mean, this makes sense to me.

158
00:10:42.460 --> 00:10:44.639
我不明白我們之間的關係，我們之間的關係，
I don't understand the relationship, what we are passing,

159
00:10:44.639 --> 00:10:47.779
我們正在將一個函式傳遞給-&gt；&gt；Douglas Crockford：關係是，
we are passing a function in- &gt;&gt; Douglas Crockford: The relationship is,

160
00:10:47.779 --> 00:10:51.870
只有當您瞭解如何使用閉包和函式作用域時，這才是可能的。
this is only possible if you understand how to use closure and function scope.

161
00:10:51.870 --> 00:10:56.490
[聲音]這是你現在可以做的事情。&gt；&gt；揚聲器2：好的。
[SOUND] Which is something you can do now. &gt;&gt; Speaker 2: All right.
