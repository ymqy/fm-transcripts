WEBVTT

1
00:00:00.000 --> 00:00:03.878
[音乐]
[MUSIC]

2
00:00:03.878 --> 00:00:05.788
&gt；&gt；Douglas Crockford：让我们进入面向对象的编程，
&gt;&gt; Douglas Crockford: Let's get into an object oriented programming,

3
00:00:05.788 --> 00:00:07.370
你怎么说？
what do you say?

4
00:00:07.370 --> 00:00:11.390
所以当Brendan Eich设计JavaScript时
So when Brendan Eich designed JavaScript,

5
00:00:11.390 --> 00:00:17.500
他受到一篇他读到的关于自我项目的论文的强烈影响。
he was very strongly influenced by a paper that he read about the self project.

6
00:00:17.500 --> 00:00:21.410
而自己的项目是进入原型，而不是进入类。
And the self project was into prototypes not into classes.

7
00:00:21.410 --> 00:00:22.570
他想，哇，这真是太棒了。
And he thought, wow that's pretty neat.

8
00:00:24.030 --> 00:00:28.190
所以他决定用他的语言表达，但他并不完全理解
So he decided to put that in his language but he didn't fully understand it or

9
00:00:28.190 --> 00:00:29.219
对此有信心。
have confidence in it.

10
00:00:29.219 --> 00:00:33.619
所以他想出了某种打算
So he came up with something kind of intended to

11
00:00:33.619 --> 00:00:37.750
更经典的想法是古典的人会更喜欢它。
be more classical thinking that the classical guys would like it better.

12
00:00:37.750 --> 00:00:43.979
因此，这就是您应该如何使用JavaScript的最初预期模型。
So this is the original intended model for how you were supposed to use JavaScript.

13
00:00:43.979 --> 00:00:45.579
所以我们要做个Gizmo
So we're gonna make a Gizmo.

14
00:00:45.579 --> 00:00:47.219
这是我们的Gizmo构造函数。
That's our Gizmo constructor function.

15
00:00:47.219 --> 00:00:52.320
我们将传入一个ID并创建一个属性
We'll pass in an ID and we'll create a property

16
00:00:52.320 --> 00:00:56.728
对象的，即名为ID的对象，它将获得该值。
of the object with an, that is named ID, which will get that value.

17
00:00:58.850 --> 00:01:02.479
我们希望我们的Gizmo继承t0String方法。
And we want our gizmos to inherit a t0String method.

18
00:01:02.479 --> 00:01:07.629
因此，您这样做的方式是使用gizmo.prototype.toString=函数。
So the way you do that is use a gizmo.prototype.toString = function.

19
00:01:07.629 --> 00:01:09.879
在该函数中实现toString方法。
In that function implements the toString method.

20
00:01:12.000 --> 00:01:17.063
Java程序员看着这个说，该死的那是什么，
And the Java programmers looked at this and said, what the hell is that,

21
00:01:17.063 --> 00:01:21.710
我的意思是这看起来很糟糕，这是什么.原型废话？
I mean this is awful looking that what's this .prototype crap?

22
00:01:21.710 --> 00:01:26.629
为什么你泄露了你的东西，什么都没有，对吧？
Why you leaking your stuff and nothing's contained in anything, right?

23
00:01:26.629 --> 00:01:31.030
你想让你的类有一些完整性，就像它被包裹在什么东西里一样。
You want to have your class have some integrity, like it's wrapped in something.

24
00:01:31.030 --> 00:01:33.609
它的内脏溅得到处都是。
And this has its guts spilled all over the place.

25
00:01:33.609 --> 00:01:35.759
这真是太可怕了。
This is just really awful.

26
00:01:35.759 --> 00:01:39.640
但这就是Brendan认为语言将起作用的方式。
But this is how Brendan thought the language was going to work.

27
00:01:39.640 --> 00:01:42.579
所以让我给你画个图，这样你就可以看到到底发生了什么。
So let me diagram this for you, so you can see what's actually going on.

28
00:01:43.680 --> 00:01:45.909
这就是代码，
So this is that code,

29
00:01:45.909 --> 00:01:50.159
放在屏幕上，新的Gizmo就是我们制作实例的方式。
put up on the screen, new gizmo is how we make the instance.

30
00:01:50.159 --> 00:01:52.430
这是Gizmo的实例，
So this is the instance of the gizmo,

31
00:01:52.430 --> 00:01:56.400
我们看到构造函数放入其中的ID属性。
we see the ID property that the constructor put in it.

32
00:01:56.400 --> 00:02:01.890
这是Gizmo函数，因为在这种语言中函数是对象，
This is the gizmo function because in this language functions are objects,

33
00:02:01.890 --> 00:02:04.689
所以它们也可以有属性。
so they can also have properties.

34
00:02:06.239 --> 00:02:10.199
每个函数都有一个原型属性，
Every function is born with a prototype property,

35
00:02:10.199 --> 00:02:13.598
以防万一它将被用作方法或构造函数。
just in case it's going to be used as a method or as a constructor.

36
00:02:13.598 --> 00:02:18.060
而gizmo.prototype就是这个对象。
And the gizmo.prototype is this object.

37
00:02:18.060 --> 00:02:21.900
这是gizmo.prototype，它包含这些字段。
This is gizmo.prototype and it contains these fields.

38
00:02:21.900 --> 00:02:25.099
这是我们在那里分配的toString方法。
This is the toString method that we assign there.

39
00:02:25.099 --> 00:02:29.039
并且系统还具有目标函数，即所有对象的构造函数
And the system also has the object function that's the constructor of all

40
00:02:29.039 --> 00:02:30.199
对象。
objects.

41
00:02:30.199 --> 00:02:33.110
我们已经讨论过对象原型，
And we've already talked about object.prototype,

42
00:02:33.110 --> 00:02:35.329
这是所有对象文字都继承的东西。
that's the thing that all object literals inherit from.

43
00:02:37.210 --> 00:02:41.920
所以我们可以在这里添加一个构造函数链接。
So we can add a constructor link here.

44
00:02:41.920 --> 00:02:46.375
构造函数属性包含对构造函数的引用，因此
The constructor property contains a reference to the constructor, so

45
00:02:46.375 --> 00:02:49.216
构造函数是gizmo。
gizmo.prototype.constructor is gizmo.

46
00:02:49.216 --> 00:02:53.586
并且类似的object.prototype.structor是Object。
And similarly object.prototype.constructor is object.

47
00:02:53.586 --> 00:02:58.329
你甚至可以绕过那个循环
You can even go around that loop as many

48
00:02:58.329 --> 00:03:01.133
时间如你所愿，&gt；&gt；Douglas Crockford：但是
times as you want, &gt;&gt; Douglas Crockford: But

49
00:03:01.133 --> 00:03:05.490
重要的是委托链接，继承链接。
the important thing is the delegation link, the inheritance link.

50
00:03:05.490 --> 00:03:09.617
因此我们的实例继承了gizmo.prototype和
So our instance inherits from gizmo.prototype and

51
00:03:09.617 --> 00:03:13.949
type继承自object.prototype。
gizmo.prototype inherts from object.prototype.

52
00:03:13.949 --> 00:03:20.449
因此，如果我要求我的实例提供一个ID，我们在这里找到它，我们返回字符串。
So if I ask my instance for an ID, ID we find it here, we return the string.

53
00:03:20.449 --> 00:03:25.460
如果我问我的实例它的Toos方法，它会说我没有Toos方法，
If I ask my instance for it's tooS method, it goes I don't have one,

54
00:03:25.460 --> 00:03:30.670
他有一个，所以我们返回这个函数，就像它是这个对象的一部分一样。
he's got one so we return this function as though It were part of this object.

55
00:03:32.240 --> 00:03:36.979
如果我们要他的Foo财产，他没有，
And if we ask for its foo property, he doesn't have one,

56
00:03:36.979 --> 00:03:42.090
他没有，这是不确定的，好吗？
he doesn't have one, he doesn't have one, It's undefined, okay?

57
00:03:43.610 --> 00:03:46.758
这就是Brendan认为你会使用这种语言的方式。
So that's how Brendan thought you're going to use this language.

58
00:03:46.758 --> 00:03:52.335
这里有一些很好的想法，但是有点混乱，但是
And there are some good ideas in here, but it's kind of a mess but

59
00:03:52.335 --> 00:03:57.829
您已经对JavaScript现在实际做的事情有了一些了解。
you got some idea about what JavaScript is actually doing now.

60
00:03:57.829 --> 00:04:02.102
所以新的前缀，如果它是作为一个方法实现的，而不是
So the new prefix, if it had been implemented as a method instead of

61
00:04:02.102 --> 00:04:04.789
作为运营商，这就是它应该做的。
as an operator, this is what it would do.

62
00:04:06.939 --> 00:04:08.860
它将创建一个新对象，
It would create a new object,

63
00:04:08.860 --> 00:04:15.165
它继承自functions.prototype属性。
which inherits from the functions.prototype property.

64
00:04:15.165 --> 00:04:22.709
然后它将调用传入该对象的方法，将其绑定到这个，
And it will then call the method passing in that object, binding it to this,

65
00:04:22.709 --> 00:04:27.560
得到一个结果，这个结果可能就是会得到的结果。
and getting a result and that result is probably what's gonna get returned.

66
00:04:30.158 --> 00:04:32.819
&gt；&gt；Douglas Crockford：再一次，这是一种混乱，所以。
&gt;&gt; Douglas Crockford: And again, this is kind of a mess, so.

67
00:04:32.819 --> 00:04:35.129
但我们还没有继承太多，所以
But we haven't inherited much yet, so

68
00:04:35.129 --> 00:04:39.189
让我们重新审视这个关于继承的想法。
let's reexamine this thinking about inheritance.

69
00:04:39.189 --> 00:04:42.040
所以如果我们替换原始原型对象，
So if we replace the original prototype object,

70
00:04:42.040 --> 00:04:44.840
然后我们可以继承另一个对象的东西。
we can then inherit another object's stuff.

71
00:04:44.840 --> 00:04:47.040
所以这毫无意义。
So that made no sense.

72
00:04:47.040 --> 00:04:51.290
让我们来看一个例子，试着弄清楚这一点。
So let's look at an example try to figure this out.

73
00:04:51.290 --> 00:04:55.545
所以我们要做一个Hoozit是从Gizmo继承的东西，
So we're going to make a Hoozit a Hoozit is something that will inherit from Gizmo,

74
00:04:55.545 --> 00:04:56.529
好吗？
okay?

75
00:04:56.529 --> 00:04:59.680
所以我们有一个像以前一样的Hoozit构造函数。
So we've got a Hoozit constructor like before.

76
00:04:59.680 --> 00:05:04.649
我们将用Gizmo实例替换hoozit.prototype
And we're gonna replace hoozit.prototype with an instance of Gizmo

77
00:05:06.329 --> 00:05:09.300
然后我们将添加一个额外的方法。
and then we'll add an additional method.

78
00:05:09.300 --> 00:05:12.050
我们将在我们的新原型中添加一种测试方法。
We're gonna add a test method to our new prototype.

79
00:05:13.230 --> 00:05:15.803
Java人看着这个说，该死的那是什么？
And the Java guys looked at this and said what the hell is that?

80
00:05:15.803 --> 00:05:17.903
我的意思是我们认为另一个是坏的，但我的天哪，
I mean we thought the other one was bad, but holy cow,

81
00:05:17.903 --> 00:05:19.173
这就是你写扩展的方式。
that's how you write extends.

82
00:05:19.173 --> 00:05:21.110
你是认真的吗？
Are you serious?

83
00:05:21.110 --> 00:05:24.930
这是，这是可怕的，这是绝对可怕的。
This is just, this is horrible and this is absolutely horrible.

84
00:05:26.220 --> 00:05:29.180
所以让我们把它画出来，让我们看看这里到底发生了什么。
So let's diagram it, let's look at what's actually going on here.

85
00:05:31.019 --> 00:05:33.120
这是我们的Hoozit实例。
So here's our instance of Hoozit.

86
00:05:33.120 --> 00:05:38.264
这是我们之前在Gizmo.prototype中使用的Gizmo函数。
This is the Gizmo function that we had before in Gizmo.prototype.

87
00:05:38.264 --> 00:05:42.100
这是我们在Hoozit.Prototype中的Hoozit函数。
And it was our Hoozit function in Hoozit.prototype.

88
00:05:42.100 --> 00:05:48.540
但是我们用Gizmo的这个新实例替换Hoozit.prototype。
But we replace Hoozit.prototype with this new instance of Gizmo.

89
00:05:48.540 --> 00:05:51.540
所以当我们添加委托链接时。
So when we add the delegation links.

90
00:05:53.300 --> 00:05:59.519
我们从那个继承来的，
We've got that inheriting from that, which inherits from that,

91
00:05:59.519 --> 00:06:02.879
这将从object.prototype继承，但我遗漏了这一点。
and that will inherit from object.prototype, but I left that one out.

92
00:06:04.480 --> 00:06:08.810
因此，如果我们要求我们的新实例提供它的ID，我们就会在那里得到它。
So if we ask our new instance for its ID, we get it there.

93
00:06:08.810 --> 00:06:13.750
如果我们要求它的测试方法，不，它在那里，我们将返回该方法。
If we ask for its test method, no, there it is, we'll return that method.

94
00:06:13.750 --> 00:06:19.829
如果我们要求它的toString方法，去不，它在那里，我们会返回那个方法。
If we ask for it's toString method, go no, no, there it is, we'll return that one.

95
00:06:19.829 --> 00:06:25.560
如果我们问它的构造函数属性，我们会说，不，是的。
If we ask for it's constructor property, we'll go, no, no, yes.

96
00:06:25.560 --> 00:06:31.913
除了它是一个小玩意，哦，&gt；&gt；Douglas Crockford：那么我
Except it's a gizmo, oops, &gt;&gt; Douglas Crockford: So which I

97
00:06:31.913 --> 00:06:37.439
认为并不是那么糟糕，因为你永远不应该问它继承自什么。
think is not that bad because you should never ask anything what it inherits from.

98
00:06:37.439 --> 00:06:40.161
你应该只问你能做什么
You should only be asking what can you do and

99
00:06:40.161 --> 00:06:44.100
我们应该根据内容的性质来判断我们的对象。
we should judge our objects by the character of the contents.

100
00:06:46.180 --> 00:06:48.081
所以，再一次，这就是它的工作原理。
So again, it's, that's how it works.

101
00:06:48.081 --> 00:06:54.021
令人困惑的一个原因是有时我们
And one source of confusion is that sometimes we

102
00:06:54.021 --> 00:06:59.081
将其视为原型链接。
consider this to be the prototype link.

103
00:06:59.081 --> 00:07:03.319
但这个也叫.Prototype。
But this one is also called .prototype.

104
00:07:03.319 --> 00:07:06.875
所以有两个指针，被指定为原型指针，
So having two pointers, which are designated as the prototype pointer,

105
00:07:06.875 --> 00:07:08.550
这是完全不同的。
which are completely different.

106
00:07:08.550 --> 00:07:12.177
而DISTINCT当然也是混淆的来源。
And distinct is certainly a source of confusion as well.

107
00:07:12.177 --> 00:07:16.788
但大多数编写JavaScript的人都是这样使用的
But this is how most of the people who are writing the JavaScript are using

108
00:07:16.788 --> 00:07:17.776
语言。
the language.

109
00:07:17.776 --> 00:07:22.023
他们这样做，他们很痛苦，他们憎恨自己的生活。
They are doing this and they are miserable, they are hating their lives.

110
00:07:22.023 --> 00:07:24.259
他们憎恨JavaScript，他们愤怒而痛苦。
And they are hating JavaScript and they're angry and bitter.

111
00:07:24.259 --> 00:07:29.237
并希望他们最喜欢的语言做得更好，因为为什么
And wishing that their favorite language was doing better because why

112
00:07:29.237 --> 00:07:33.125
他们有没有上过JavaScript写作课？
have they come to this writing classes in JavaScript.

113
00:07:33.125 --> 00:07:33.899
太可怕了。
It's just awful.

114
00:07:33.899 --> 00:07:39.627
所以是的，所以把它们放在一起，
So yeah, so putting them together,

115
00:07:39.627 --> 00:07:45.731
只是这里有可怕的东西。
it's just there's awful stuff here.

116
00:07:45.731 --> 00:07:51.430
只有丑陋的头部和缺乏抚慰的句法。
There is just the head of ugliness and in the lack of soothing syntax.

117
00:07:51.430 --> 00:07:53.009
我们没有得到足够的代码重用。
We're not getting enough code reuse.

118
00:07:53.009 --> 00:07:56.487
例如，两个构造函数都创建了一个ID属性，但是
For example, both constructors create an ID property, but

119
00:07:56.487 --> 00:08:00.629
他们都必须重复这一点，而且这不是代码重用。
they both have to repeat that and that it's not code reuse.

120
00:08:00.629 --> 00:08:04.439
所以世界上有很多的JavaScript库。
So there are lots and lots of JavaScript libraries in the world.

121
00:08:04.439 --> 00:08:10.040
他们中的大多数人都认识到这里严重缺乏一些东西。
And most of them recognize that there is something seriously lacking here.

122
00:08:10.040 --> 00:08:13.165
所以他们会提供一些机制
And so they'll provide some mechanism for

123
00:08:13.165 --> 00:08:21.379
给这种经典的系统涂上糖衣，让它变得更好一点。
sugarcoating this sort of classical system in order to make it a little bit nicer.

124
00:08:21.379 --> 00:08:25.610
例如，他们可能会创建一个名为new_structor的函数。
For example, they might do something like create a function called new_constructor.

125
00:08:27.430 --> 00:08:30.490
它将构造函数。
And it will make constructor functions.

126
00:08:30.490 --> 00:08:34.440
我会把我想要继承的东西传给它。
And I will pass into it the thing that I want to inherit from.

127
00:08:34.440 --> 00:08:39.009
所以我想扩展对象，我想扩展Gizmo。
So I want to extend object, I want to extend gizmo.

128
00:08:39.009 --> 00:08:41.620
我将传入一个构造函数，然后传入
And I'll pass in a constructor function and I'll pass in

129
00:08:41.620 --> 00:08:45.909
包含我希望实例继承的方法的对象。
an object containing the methods that I want the instances to inherit.

130
00:08:47.429 --> 00:08:53.289
所以它看起来不像Java，但至少您可以识别组件，对吗？
So it doesn't look like Java, but at least you can recognize the components, right?

131
00:08:53.289 --> 00:08:56.679
所以这件事有更好的一面。
And so there is something nicer about this.

132
00:08:56.679 --> 00:09:00.860
这个函数令人惊讶的是
And the surprising thing about this function

133
00:09:00.860 --> 00:09:03.379
这就是整个功能。
is that that's the entire function.

134
00:09:03.379 --> 00:09:06.700
所以JavaScript是一种非常有表现力的语言，
So JavaScript is such an amazingly expressive language,

135
00:09:06.700 --> 00:09:08.389
如此强大的语言。
such a powerful language.

136
00:09:08.389 --> 00:09:12.090
一小段代码就可以从根本上改变
That one little piece of code can radically transform

137
00:09:12.090 --> 00:09:16.200
语言的出现，这是非常不寻常的，
the appearance of the language, which is pretty extraordinary,

138
00:09:17.919 --> 00:09:19.360
不是很多语言都能做到这一点。
not a lot of languages can do that.

139
00:09:20.509 --> 00:09:22.429
我推荐这种方法吗？
Do I recommend this approach?

140
00:09:22.429 --> 00:09:26.860
不，我没有，尽管这显然比使用语言作为
No I don't, Even though this is clearly better than using the language as

141
00:09:26.860 --> 00:09:32.240
本意是，你仍然被困在这个经典的范例中。
intended, you're still stuck in this classical paradigm.

142
00:09:32.240 --> 00:09:35.179
除了你试图用一种语言进行经典编程
Except you're trying to do classical programming in a language

143
00:09:35.179 --> 00:09:37.110
没有类型系统。
without a type system.

144
00:09:37.110 --> 00:09:39.240
这真的很难。
And that is really really hard.

145
00:09:39.240 --> 00:09:43.129
是的，课程提供了很多脆性。
Yeah, that classes provide a lot of brittleness.

146
00:09:43.129 --> 00:09:47.429
如果没有持续的类型检查来保持你的诚实，
And without the constant type checking to keep you honest,

147
00:09:47.429 --> 00:09:49.950
事情真的很容易变坏。
it's really easy for things to go bad.

148
00:09:49.950 --> 00:09:53.049
而在JavaScript中，事情总是变得非常快。
And in JavaScript, things go bad very quickly all the time.

149
00:09:53.049 --> 00:09:56.919
这就是为什么人们试图用JavaScript编写这个模型，
And that's why people who are trying to write in this model, in JavaScript,

150
00:09:56.919 --> 00:09:58.809
对语言很生气。
are so angry at the language.

151
00:09:58.809 --> 00:10:00.830
他们总是在愤怒的感觉中。
They're constantly in a sense of rage.
