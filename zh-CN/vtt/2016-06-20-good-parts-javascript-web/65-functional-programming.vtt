WEBVTT

1
00:00:00.000 --> 00:00:03.967
[音乐]
[MUSIC]

2
00:00:03.967 --> 00:00:05.674
&gt；&gt；Douglas Crockford：拯救的函数式编程。
&gt;&gt; Douglas Crockford: Functional Programming to the Rescue.

3
00:00:05.674 --> 00:00:10.551
所以四年后函数式编程突然变得
So one of the reasons why after four years, Functional Programming is suddenly

4
00:00:10.551 --> 00:00:15.151
变得重要是因为它包含了这些问题的解决方案。
become important is because it contains the solutions to these problems.

5
00:00:15.151 --> 00:00:17.496
我们在这方面有很多历史。
And we've got a lot of history with this stuff.

6
00:00:17.496 --> 00:00:22.454
回到来自数据流和LISP的未来，未来是一个对象
And going back to future which came out of Dataflow and LISP, future is an object

7
00:00:22.454 --> 00:00:27.850
这代表了一些尚不可知的东西，但可能是在未来。
which represents something which isn't knowable yet, but might be in the future.

8
00:00:27.850 --> 00:00:32.039
因此，您可以开始与未来对象进行交互，最终它将
So you can begin interacting with the future object, and eventually it will

9
00:00:32.039 --> 00:00:35.710
向任何人传达你的兴趣，无论答案是什么。
communicate your interest to whatever the answer turns out to be.

10
00:00:36.869 --> 00:00:41.729
期货对一个叫做承诺的功能有很大的影响。
Futures had a big influence on a feature called Promises.

11
00:00:41.729 --> 00:00:46.209
承诺是在我创立的一家公司里发现的，这个公司叫做
Promises were discovered in a company that I founded called

12
00:00:46.209 --> 00:00:50.341
电子社区的一种语言，我们称之为E。
Electric Communities for a language that we called E.

13
00:00:50.341 --> 00:00:53.430
承诺后来从E逃出来，转移到Python和
Promises have since escaped from E and moved into Python and

14
00:00:53.430 --> 00:00:57.405
然后进入JavaScript，不幸的是，它们发生了很大的变异。
then into JavaScript where unfortunately they've mutated kind of badly.

15
00:00:57.405 --> 00:00:59.965
但仍然有一个非常有趣的机制
But there's still a really interesting mechanism for

16
00:00:59.965 --> 00:01:03.219
管理分布式系统中的异步性。
managing asynchronicity in distributed systems.

17
00:01:03.219 --> 00:01:06.719
上门服务社区已经开始使用Monads和Arrows，
The house call community has begun to Monads, and Arrows,

18
00:01:06.719 --> 00:01:10.890
微软有一种叫做RX的东西，反应性扩展
Microsoft has something called RX, reactive extensions which

19
00:01:12.760 --> 00:01:16.420
允许组成事件流，非常有趣的东西。
allows for composing of events streams, very interesting stuff.

20
00:01:16.420 --> 00:01:19.460
不幸的是，它从来没有被记录准确或
Unfortunately it's never been documented accurate or

21
00:01:19.460 --> 00:01:24.596
有充分的记录。&gt；&gt；演讲者2：我们确实有一门课程
documented sufficiently. &gt;&gt; Speaker 2: We do have a course by which

22
00:01:24.596 --> 00:01:32.280
基本上涵盖了可观察到的模式以及RX和是如何工作的一切。
covers essentially the observable pattern and how RX and are working everything.

23
00:01:32.280 --> 00:01:33.795
只是把它扔出去。&gt；&gt；Douglas Crockford：是的。
Just throwing it out there. &gt;&gt; Douglas Crockford: Yeah.

24
00:01:33.795 --> 00:01:35.215
是好东西。
It's good stuff.

25
00:01:35.215 --> 00:01:39.325
只是我不会用它，因为如果我把它投入生产，
It's just I wouldn't use it because if I'm putting it into production,

26
00:01:39.325 --> 00:01:43.905
我想知道它是如何工作的，但它给了我灵感。
I want to know how it works but it's been inspirational.

27
00:01:43.905 --> 00:01:48.585
它创造了一种新的编程形式，称为函数式反应编程和
It's created a new form of programming called Functional Reactive Programming and

28
00:01:48.585 --> 00:01:52.525
例子包括煎饼，培根和元素等。
examples include Flapjacks, bacon, and element, and others.

29
00:01:52.525 --> 00:01:54.709
但我突然意识到这份清单还不够长。
But occurred to me that this list just isn't long enough.

30
00:01:56.490 --> 00:02:00.159
我正在给它添加我自己的东西，那就是一个叫做RQ的库。
I'm adding my own thing to it and that is a library called RQ.

31
00:02:01.200 --> 00:02:05.010
RQ是一个用于管理异步性和服务器应用程序的库。
RQ is a library for managing asynchronicity and server applications.

32
00:02:05.010 --> 00:02:07.930
区别于我提到的其他东西的是，
The thing that distinguishes it from the others that I mention,

33
00:02:07.930 --> 00:02:12.500
这个是专门为您在服务器中所做的而设计的。
is that this one was designed specifically for what you do in servers.

34
00:02:12.500 --> 00:02:15.439
其他人都不是。
None of the other ones were.

35
00:02:15.439 --> 00:02:17.849
一切都可以工作，但我认为
Everything can be made to work but I think for

36
00:02:17.849 --> 00:02:20.670
你在服务器上做的这一个会更好地为你工作。
what you do in servers this one is gonna work better for you.

37
00:02:22.219 --> 00:02:25.729
RQ是一个非常小的库，它只包含四个或
RQ is a very small library, that only contains four or

38
00:02:25.729 --> 00:02:28.900
五种方法取决于你如何计数。
five methods depending on how you count.

39
00:02:28.900 --> 00:02:33.158
如果你用Java计数，它是5，如果你用JavaScript计数，它是4。
If you count in Java, it's five, if you count in JavaScript, it's four.

40
00:02:33.158 --> 00:02:36.127
所以让我们来看看这四个，因为一旦你完成了这四个功能，
So let's look at the four, cuz once you do these four functions,

41
00:02:36.127 --> 00:02:37.319
这就是整件事。
that's the whole thing.

42
00:02:38.687 --> 00:02:43.949
所以一个序列需要一个请求者函数的数组，并且
So a sequence takes an array of requester functions and

43
00:02:43.949 --> 00:02:46.889
返回一个函数，该函数一次调用它们一个
returns a function that will call them one at a time

44
00:02:46.889 --> 00:02:49.699
将前一个请求者的结果传递给下一个请求者。
passing the result of the previous requestor to the next requestor.

45
00:02:50.729 --> 00:02:55.759
例如，这里我们将创建一个getnav请求器，它将首先读取文件，
Here for example we're gonna make a getnav requestor which will first read the file,

46
00:02:55.759 --> 00:03:00.969
然后获得首选项，然后获得自定义导航。
and then get the preference, and then get the custom nav.

47
00:03:00.969 --> 00:03:02.909
然后我们可以并行地做事情。
Then we can do things in parallel.

48
00:03:02.909 --> 00:03:07.157
现在我们没有向JavaScript添加并行性，我们所做的是，
Now we're not adding parallelism to JavaScript, what we're doing is,

49
00:03:07.157 --> 00:03:11.485
允许JavaScript利用宇宙的自然并行性。
allowing JavaScript to exploit the natural parallelism of the universe.

50
00:03:11.485 --> 00:03:15.870
因为很可能您将调用不同的服务
Cuz it's likely that you're gonna be calling services that are in different

51
00:03:15.870 --> 00:03:17.729
盒子或不同的网络。
boxes or different networks.

52
00:03:17.729 --> 00:03:21.349
一切都在宇宙中流逝，一直在异步运行，所以
It's all going out in the universe, runs asynchronously all the time so

53
00:03:21.349 --> 00:03:22.368
你可以利用这一点。
you get to take advantage of that.

54
00:03:23.469 --> 00:03:26.689
在这里，我们将创建一个Get Stuff构造函数，
Here we're gonna make a get stuff constructor which will,

55
00:03:26.689 --> 00:03:30.449
当它被称为获得导航，获得广告和获得每日信息，
when it's called get the Nav, get the Ads and get the Message Of The Day,

56
00:03:30.449 --> 00:03:31.789
它会一下子把他们都弄到手。
it will get them all at once.

57
00:03:33.400 --> 00:03:36.590
这样做的成本将是这三个中最慢的一个。
The cost of this will be whichever of these three is the slowest.

58
00:03:38.500 --> 00:03:41.020
那么我们也可以有可选的东西。
Then we can also have optional things.

59
00:03:41.020 --> 00:03:44.129
我们可以提供第二组可选的东西。
We can provide a second array of optional things.

60
00:03:44.129 --> 00:03:49.680
我们也会去拿星座和八卦，但我们不会等
We will also go and get the horoscope and the gossip but we will not wait for

61
00:03:49.680 --> 00:03:54.439
如果他们没有，如果这十二个人中的任何一个在主要的三个之前完成
those if they don't if either of those dozen complete before the main three

62
00:03:54.439 --> 00:03:59.060
完成后，我们只需取消它们，然后带着已完成的内容返回。
complete, we'll just cancel them and return with whatever has been finished.

63
00:04:01.939 --> 00:04:03.169
我们可以处理种族问题。
We can deal with races.

64
00:04:03.169 --> 00:04:04.889
这些都是好的种族。
These are the good kinds of races.

65
00:04:04.889 --> 00:04:06.979
我们可以一次开始几件事
We can start several things at once and

66
00:04:06.979 --> 00:04:11.460
不管第一个成功完成的是哪一个，那就是我们得到的那个。
whichever the first one to finish successfully, that's the one we get.

67
00:04:12.479 --> 00:04:14.740
我们的广告网络可能有问题。
We might be having trouble with our Ad network.

68
00:04:14.740 --> 00:04:17.730
我们正在处理三个广告网络，它们都太慢了。
We're dealing with three Ad networks and they're all too slow.

69
00:04:17.730 --> 00:04:19.930
我们告诉他们，我们会有一场比赛。
We tell them, we're gonna have a race.

70
00:04:19.930 --> 00:04:24.519
无论何时我们有了职位，我们都会问你和你的两个竞争对手，并且
Whenever we have a position, we will ask you and two of your competitors, and

71
00:04:24.519 --> 00:04:27.620
谁先回来拿到合适的位置就会赢。
whoever comes back first with a suitable placement will win.

72
00:04:30.019 --> 00:04:33.091
我们也可以处理后备，所以我们可以尝试一件事。
We can also deal with fallbacks, so we can try one thing.

73
00:04:33.091 --> 00:04:35.009
如果失败了，我们再试一次。
If that fails, we'll try another.

74
00:04:35.009 --> 00:04:37.139
我们要这样做来适应我们的天气。
We're gonna do that to get on our weather.

75
00:04:37.139 --> 00:04:38.536
我们将首先转到本地缓存。
We'll first go to our local Cache.

76
00:04:38.536 --> 00:04:40.345
如果失败，我们将转到我们的localDB。
If that fails, we'll go to our localDB.

77
00:04:40.345 --> 00:04:43.064
如果失败，我们将转到remoteDB。
If that fails, we go to the remoteDB.

78
00:04:43.064 --> 00:04:47.319
现在理论上，获得天气的最快方法是进行一场比赛，但是
Now in theory, the fastest way to get the weather would be to have a race, but

79
00:04:47.319 --> 00:04:49.970
拥有这种等级制度的整个意义在于我们想要
the whole point of having this kind of hierarchy is that we want to go to

80
00:04:49.970 --> 00:04:54.560
remoteDB只是作为最后的手段，而回退允许我们这样做。
the remoteDB only as a last resort, and fall backs allow us to do that.

81
00:04:57.350 --> 00:04:59.340
就是这样，这就是RQ的全部指标。
That's it, that's the whole metrics for RQ.

82
00:04:59.340 --> 00:05:03.300
我们可以一次启动所有请求者，也可以一次启动一个请求者，
We can start all the requesters at once, or we can start them one at a time,

83
00:05:03.300 --> 00:05:07.420
然后我们可以得到一个结果或者我们可以得到所有的结果。
and then we can then take one result or we can take all of the results.
