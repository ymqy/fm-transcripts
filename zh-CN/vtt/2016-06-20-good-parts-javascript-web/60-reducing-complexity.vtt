WEBVTT

1
00:00:00.000 --> 00:00:04.086
[音乐]
[MUSIC]

2
00:00:04.086 --> 00:00:07.474
&gt；&gt；Douglas：这个模型的好处之一就是它完全改变了
&gt;&gt; Douglas: So one of the nice things about this model is it completely changes

3
00:00:07.474 --> 00:00:09.599
黑客的经济学。
the economics of hacking.

4
00:00:09.599 --> 00:00:13.900
在大多数架构中，如果你可以混淆一个对象，基本上，
In most architectures, if you can confuse an object, basically,

5
00:00:13.900 --> 00:00:16.719
这样你就可以访问系统中的所有东西。
that gives you access to everything in the system.

6
00:00:17.829 --> 00:00:18.800
而在这个模型中，
Whereas in this model,

7
00:00:18.800 --> 00:00:23.170
如果你能混淆一个对象，你会得到该对象的能力，但是
if you can confuse an object, you get the capabilities of that object but

8
00:00:23.170 --> 00:00:28.250
只有这样，在大多数情况下-&gt；&gt；扬声器2：那么一个令人困惑的对象是什么？
only that and in most cases- &gt;&gt; Speaker 2: So is a confusing objects?

9
00:00:28.250 --> 00:00:30.643
道格拉斯：是的。对象未正确创建，并且
&gt;&gt; Douglas: Yeah. The object is not created correctly and

10
00:00:30.643 --> 00:00:33.966
你可以让它做一些它不应该做的事情。
you can cause it to do something that it's not supposed to do.

11
00:00:33.966 --> 00:00:34.710
&gt；&gt；扬声器2：好的。
&gt;&gt; Speaker 2: Okay.

12
00:00:34.710 --> 00:00:37.372
&gt；&gt；Douglas：您可能能够控制该对象可以做什么，但是
&gt;&gt; Douglas: You might be able to get control of what that object can do but

13
00:00:37.372 --> 00:00:40.100
你不能控制系统所能做的一切。
you don't get control of everything that the system can do.

14
00:00:42.429 --> 00:00:44.630
所以我们改变了黑客的经济学，
So we changed the economics of hacking,

15
00:00:44.630 --> 00:00:48.409
YouTube上有一个关于这些东西的很好的演讲，
there's a really nice talk on YouTube about this stuff,

16
00:00:48.409 --> 00:00:52.229
“懒惰程序员安全计算指南”(The Lazy Programmer‘s Guide to Secure Computing)，作者：Mark Stiegler。
The Lazy Programmer's Guide to Secure Computing by Mark Stiegler.

17
00:00:52.229 --> 00:00:56.890
Stiegler的前提是最好的程序员是懒惰的，但是
Stiegler's premise is that the best programmers are lazy but

18
00:00:56.890 --> 00:00:59.639
他们懒惰的方式避免了未来的工作。
they're lazy in a way which avoids future work.

19
00:01:01.229 --> 00:01:03.981
如果你采用这种方法
And if you take that approach that

20
00:01:03.981 --> 00:01:08.311
您也倾向于引导自己使用安全系统。
you tend to lead yourself to secure systems as well.

21
00:01:10.840 --> 00:01:15.662
&gt；&gt；Douglas：今天早上我们在发现渗漏的地方做了这个练习
&gt;&gt; Douglas: So this morning we did this exercise where we've found this leakage

22
00:01:15.662 --> 00:01:22.159
因为这所做的意想不到的事情危及了我们的安全。
because of the unexpected thing that this does which compromised our security.

23
00:01:22.159 --> 00:01:25.819
所以我们需要了解这些东西，我们需要为它做计划，我们需要改进
So we need to understand for this stuff, we need to plan for it, we need to improve

24
00:01:25.819 --> 00:01:29.430
语言，我们需要提高我们对语言的理解
the language, we need to improve our understanding of the language so

25
00:01:29.430 --> 00:01:34.090
我们不会因此而妥协。
that we're not compromised by it.

26
00:01:34.090 --> 00:01:39.180
这个攻击是混淆攻击的一个例子，这就是为什么我如此讨厌混淆
That attack is an example of a confusion attack, and that's why I hate confusion so

27
00:01:39.180 --> 00:01:43.329
很大程度上是因为混乱是导致我们的系统失败的原因。
much because confusion is what causes our systems to fail.

28
00:01:44.700 --> 00:01:46.280
混乱帮助敌人。
Confusion aids the enemy.

29
00:01:46.280 --> 00:01:51.370
bug是混乱的表现，但安全漏洞也是表现
Bugs are a manifestation of confusion but also security exploits are manifestation

30
00:01:51.370 --> 00:01:56.049
混乱的情况下，通常攻击者会接管
of confusion and usually attackers get to take over

31
00:01:56.049 --> 00:02:00.450
当他们对我们的系统的理解比我们的更好时。
a systems when their understanding of our systems are better than ours.

32
00:02:00.450 --> 00:02:05.959
不幸的是，这种情况经常发生，而我们阻止这种情况的方法
And unfortunately, that tends to happen a lot and the way we stop that

33
00:02:05.959 --> 00:02:08.840
就是更好地了解我们自己的系统和
is by getting a better understanding of our own systems and

34
00:02:08.840 --> 00:02:13.150
我们通过尽可能消除许多混淆的来源来做到这一点。
we do that by eliminating is many sources of confusion as possible.

35
00:02:13.150 --> 00:02:18.569
我不能容忍混乱，我想尽可能地消除混乱。
I have no tolerance for confusion, I want to eliminate as much confusion as I can.

36
00:02:18.569 --> 00:02:24.424
&gt；&gt；扬声器3：混淆攻击是指您不了解[INAUDIBLE]的工作原理。
&gt;&gt; Speaker 3: Confusion attack is when you don't understand how [INAUDIBLE] it works.

37
00:02:24.424 --> 00:02:28.293
&gt；&gt；Douglas：我们认为系统以一种特殊的方式工作，攻击者通过
&gt;&gt; Douglas: We think the system works in a particular way and the attacker by

38
00:02:28.293 --> 00:02:33.340
研究这些数字发现这不是我们的工作方式，他能够利用这一点。
studying those figures out that's not how we work and he's able to exploit that.

39
00:02:33.340 --> 00:02:37.040
事实上，几乎所有的安全漏洞都是这样的，
In fact, virtually all security exploits are like that,

40
00:02:37.040 --> 00:02:41.950
我们从来没有故意公开然后投入生产的代码
that we never intentionally go public and then into production with code that

41
00:02:41.950 --> 00:02:45.122
我们知道它有安全漏洞
we know has security vulnerabilities in it and yet

42
00:02:45.122 --> 00:02:50.110
所部署的所有内容都存在安全漏洞，并且
everything that's ever been deployed has security vulnerabilities in it and

43
00:02:50.110 --> 00:02:54.759
这是因为我们对自己的系统如何运作感到困惑。
it's because we're confused about how our own systems work.

44
00:02:54.759 --> 00:02:55.710
我们不能再这样了。
We need to stop doing that.

45
00:02:58.479 --> 00:03:01.099
因此，伴随着巨大的复杂性而来的是巨大的困惑。
So with great complexity comes great confusion.

46
00:03:01.099 --> 00:03:06.000
这就是为什么我是极简主义者，我想在所有情况下找到最简单的解决方案
So that's why I'm minimalist, I want to find the simplest solution in all cases

47
00:03:06.000 --> 00:03:09.340
因为这些都是最容易推理的事情。
because those are the things that are easiest to reason about.

48
00:03:09.340 --> 00:03:11.780
所以我们应该让一切都尽可能的简单。
So we should keep everything as simple as we can.

49
00:03:11.780 --> 00:03:14.870
我们应该尽可能保持我们的代码库干净。
We should keep our code bases as clean as we can.

50
00:03:14.870 --> 00:03:19.340
如果我们允许我们的代码库变得粗糙，那么它们就会变得更难理解
If we allow our code bases to get crufty then they become harder to understand more

51
00:03:19.340 --> 00:03:21.449
很可能会令人困惑，并且会被利用。
likely to be confusing and will get exploited.

52
00:03:23.969 --> 00:03:25.579
所以我们应该总是编写好代码。
So we should always code well.

53
00:03:25.579 --> 00:03:28.620
好的代码最终比坏的代码更便宜。
Good code is ultimately cheaper to produce than bad code.

54
00:03:28.620 --> 00:03:30.889
所以我们应该总是写出好的代码。
So we should always make good code.

55
00:03:30.889 --> 00:03:32.960
好的代码更容易推理。
Good code is easier to reason about.

56
00:03:32.960 --> 00:03:36.530
难以推理的代码更有可能是有问题的，并且
Code that is difficult to reason about is more likely to be problematic and

57
00:03:36.530 --> 00:03:39.430
我们应该严格遵守好的作风规则。
we should have strict conformance to good style rules.

58
00:03:39.430 --> 00:03:42.039
这意味着如果我们用JavaScript编写
Which means that if we're writing in JavaScript

59
00:03:42.039 --> 00:03:45.509
所有内容都应该无一例外地通过JSLint。
everything should pass JSLint without exceptions.

60
00:03:45.509 --> 00:03:49.460
我们不应该在网络上发布任何至少不那么好的东西。
We should not put anything out on the web which is not at least that good.

61
00:03:52.590 --> 00:03:56.079
你永远不应该相信一台不在你绝对控制之下的机器
You should never trust a machine that is not under your absolute control and

62
00:03:56.079 --> 00:03:58.680
那么我甚至不能确定这些都是不是真的。
then I'm not even sure about all of those.

63
00:03:58.680 --> 00:04:02.930
但有一件事是肯定的，你永远不能相信浏览器。
But one thing for sure, you must never trust the browser.

64
00:04:04.150 --> 00:04:06.860
它不能也不会保护你的利益。
It cannot and will not protect your interests.

65
00:04:06.860 --> 00:04:11.030
您需要正确过滤和验证从浏览器获得的所有输入，
You need to properly filter and validate all inputs that you get from the browser,

66
00:04:11.030 --> 00:04:14.099
需要对发送到浏览器的所有内容进行正确编码，
need to properly encode everything that you send to the browser,

67
00:04:14.099 --> 00:04:19.379
编码和解码和过滤的上下文是关键的。
the context of that encoding and decoding and filtering is critical.

68
00:04:19.379 --> 00:04:22.509
您需要针对正确的上下文进行过滤和编码。
You need to filter and code for the correct context.

69
00:04:22.509 --> 00:04:25.050
所以让我告诉你我关于信任浏览器的意思。
So let me tell you what I mean about trusting the browser.

70
00:04:25.050 --> 00:04:28.850
所以这是一个真实的故事，几年前，
So this is a true story, a few years ago,

71
00:04:28.850 --> 00:04:32.100
我的一个朋友打算去访问中国。
a friend of mine was going to go visit China.

72
00:04:32.100 --> 00:04:35.790
所以他在一家著名的航空公司买了一张机票
So he bought a ticket on a famous airline and

73
00:04:35.790 --> 00:04:37.870
这是一个昂贵的航班，所以他买了一张二等舱的票。
it's an expensive flight so he bought a coach ticket.

74
00:04:39.069 --> 00:04:42.574
然后，他意识到，哇，这真的是一次很长的飞行，真的很不舒服，
And then, he realized, wow, it's a really long flight, it's really uncomfortable,

75
00:04:42.574 --> 00:04:44.247
升级到头等舱要好得多。
it be much nicer to upgrade to first class.

76
00:04:44.247 --> 00:04:47.608
所以，他去了航空公司的网站，然后
And so, he went to the website of the airline, and

77
00:04:47.608 --> 00:04:50.600
查看是否有升级可用。
look to see if upgrades were available.

78
00:04:50.600 --> 00:04:54.699
它们确实是，但您需要一定数量的升级证书，并且
And they were, but you needed a certain number of upgrade certificates, and

79
00:04:54.699 --> 00:04:59.110
它告诉他的号码是零，因为他不经常坐飞机。
it told him his number was zero, because he doesn't fly all that often.

80
00:04:59.110 --> 00:05:02.345
所以他非常失望，直到他打开调试器。
So he was very disappointed until he opened the debugger.

81
00:05:02.345 --> 00:05:05.201
&gt；&gt；扬声器2：[laugh]&gt；&gt；Douglas：他发现了变量
&gt;&gt; Speaker 2: [LAUGH] &gt;&gt; Douglas: He found the variable that

82
00:05:05.201 --> 00:05:07.449
包含了他的一些证书。
contained his number of certificates.

83
00:05:07.449 --> 00:05:09.555
他坐头等舱去了中国。
And he flew first class to China.

84
00:05:09.555 --> 00:05:11.865
&gt；&gt；道格拉斯：这是一个真实的故事。
&gt;&gt; Douglas: It's a true story.

85
00:05:14.144 --> 00:05:18.970
&gt；&gt；Douglas：成功的原因是，设计这个系统的人假设
&gt;&gt; Douglas: The reason that worked was, the guys who designed that system assumed

86
00:05:18.970 --> 00:05:23.956
只有一组特定的URL才能生成特定的URL
that there is a certain URL that could only be generated if a certain set of

87
00:05:23.956 --> 00:05:30.194
条件是真的，他们依赖浏览器来保证这一点。
conditions were true, and they were relying on the browser to guarantee that.

88
00:05:30.194 --> 00:05:33.055
而且浏览器不会保证这一点，您不能信任浏览器。
And the browser will not guarantee that, you cannot trust the browser.

89
00:05:34.235 --> 00:05:35.375
另一个浏览器故事。
Another browser story.

90
00:05:35.375 --> 00:05:39.784
在作为电子商务的最初几天，当在线商店开始出现时，
In the first days as an e-commerce when online stores first started happening,

91
00:05:41.375 --> 00:05:45.389
他们还不知道如何扩展网络系统。
they didn't understand yet how to scale web systems.

92
00:05:45.389 --> 00:05:46.269
好吧。他们试图做
Right. They tried to do

93
00:05:46.269 --> 00:05:48.649
一台服务器中的所有工作以及非常快速的数据，
all of the work in one server and very quickly the data,

94
00:05:48.649 --> 00:05:53.189
而且交通流量超过了一个箱子所能处理的范围，他们非常恐慌。
and amount of traffic was bigger than one box could handle, and they were panic.

95
00:05:53.189 --> 00:05:57.199
差不多在同一时间，JavaScript上线了，他们走了，太好了，
About the same time JavaScript comes online and they go, great,

96
00:05:57.199 --> 00:06:00.279
我们现在可以将所有这些处理卸载到浏览器上。
we can now offload all this processing onto the browser.

97
00:06:00.279 --> 00:06:03.970
所以他们现在让浏览器做准备发票的所有工作
So they now have the browser do all the work of preparing the invoice and

98
00:06:03.970 --> 00:06:04.819
全部都准备好了。
totalling everything up.

99
00:06:05.819 --> 00:06:10.334
他们只是允许浏览器提交这个东西，然后发送出去
They just allow the browser to then submit this thing which then gets sent

100
00:06:10.334 --> 00:06:12.043
直接实现。
directly to fulfillment.

101
00:06:13.372 --> 00:06:16.276
&gt；&gt；Douglas：所以如果你能知道如何输入URL，
&gt;&gt; Douglas: So if you can figure out how to type a URL,

102
00:06:16.276 --> 00:06:21.615
你可以订购任何你想要的东西，并支付你认为合理的任何东西。
you can order anything you want and pay whatever you think is reasonable.

103
00:06:21.615 --> 00:06:25.560
&gt；&gt；扬声器2：[laugh]&gt；&gt；Douglas：SO
&gt;&gt; Speaker 2: [LAUGH] &gt;&gt; Douglas: So

104
00:06:25.560 --> 00:06:28.730
事实证明，在浏览器中做事情是有很好的理由的，
it turns out there are good reasons to do stuff in the browser,

105
00:06:28.730 --> 00:06:33.970
它们中的大多数都是为了提供更好的用户体验。
most of them are to provide a better user experience.

106
00:06:33.970 --> 00:06:36.728
因此您可以避免用户填写表单并
So you can avoid the thing where the user fills in a form and

107
00:06:36.728 --> 00:06:40.122
然后你把它踢回他们的牙齿，因为他们做错了什么，
then you kick it back in their teeth because they got something wrong,

108
00:06:40.122 --> 00:06:42.331
我们可以帮助他们做到这一点，并使之令人愉快。
we can help them do that and make it pleasant.

109
00:06:42.331 --> 00:06:48.072
但这并不意味着服务器不应该检查它的每个细节
But that doesn't mean that the server shouldn't check every detail of it and

110
00:06:48.072 --> 00:06:52.149
确保它的发生是正确的，你必须这样做。
make sure that it happened right, you have to do that.

111
00:06:52.149 --> 00:06:56.923
所以模板就是这个过程，今天下午我们将更多地讨论模板，
So templating is this process, we'll talk more about templating this afternoon,

112
00:06:56.923 --> 00:07:00.959
我讨厌模板，因为浏览器是指着你脑袋的枪
I hate templating, because the browser is a gun pointed at your head and

113
00:07:00.959 --> 00:07:03.199
模板是扣动扳机的。
templating is what pulls the trigger.
