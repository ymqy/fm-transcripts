WEBVTT

1
00:00:00.000 --> 00:00:03.750
[音乐]
[MUSIC]

2
00:00:03.750 --> 00:00:07.379
&gt；&gt；Douglas Crockford：让我们将它与伪经典模型进行比较。
&gt;&gt; Douglas Crockford: So let's compare this to the pseudoclassical model.

3
00:00:08.550 --> 00:00:10.099
所以你记得这个。
So you remember this.

4
00:00:10.099 --> 00:00:12.410
有这么多东西在周围晃荡真是太可怕了。
It's just awful with all this stuff hanging around.

5
00:00:14.400 --> 00:00:17.929
所以现在这个功能模型中，这是相同的事情。
So this is the same thing now in this functional model.

6
00:00:17.929 --> 00:00:21.460
而且代码变得更干净了。
And the code gets a lot cleaner.

7
00:00:21.460 --> 00:00:25.609
首先，我们没有.原型的东西挂在末端。
For one thing, we don't have the .prototype stuff hanging off the end.

8
00:00:25.609 --> 00:00:29.589
一切都很好，整洁，包含在这里。
Everything is nice and neat and contained within here.

9
00:00:29.589 --> 00:00:34.090
所以gizmo构造函数非常简单，它只是返回一个新对象。
So the gizmo constructor very simple, it's simply returning a new object.

10
00:00:34.090 --> 00:00:35.759
请注意，花括号位于右侧。
Notice the curly braces are on the right.

11
00:00:35.759 --> 00:00:37.520
所以这会很好用的。
So this is gonna work perfectly.

12
00:00:40.100 --> 00:00:45.710
我们不是说this.id等于id，而是简单地说id：id，我们就完成了。
Instead of saying this.id equals id, we simply say id:id and we're done.

13
00:00:46.990 --> 00:00:51.030
然后我们的名人堂将会制作一个新的小玩意儿。
Then our who's it is going to make a new gizmo.

14
00:00:52.039 --> 00:00:56.463
然后我们将向该函数添加我们的测试方法或
And we're then going to add to that function our test method or

15
00:00:56.463 --> 00:00:59.079
将我们的测试方法添加到该对象中。
add to that object our test method.

16
00:00:59.079 --> 00:01:01.729
返回对象，它就完成了。
Return the object and it's done.

17
00:01:01.729 --> 00:01:04.609
所以代码也变得简单了很多。
So the code got a lot simpler as well.

18
00:01:04.609 --> 00:01:07.859
是吗？&gt；&gt；演讲者2：我想大约十分钟
Yeah? &gt;&gt; Speaker 2: I think about ten minutes

19
00:01:07.859 --> 00:01:11.510
以前，你说不要用这个，或者你不推荐，或者
ago, you were saying not to use this, or that you didn't recommend it or

20
00:01:11.510 --> 00:01:12.710
就算是喜欢。&gt；&gt；Douglas Crockford：是的，
even like it. &gt;&gt; Douglas Crockford: Yeah,

21
00:01:12.710 --> 00:01:13.960
这是下一步。&gt；&gt；扬声器2：好的。
that's the next step. &gt;&gt; Speaker 2: Okay.

22
00:01:16.269 --> 00:01:17.930
&gt；&gt；Douglas Crockford：那么让我们假设
&gt;&gt; Douglas Crockford: So let's suppose we

23
00:01:17.930 --> 00:01:18.989
想要有隐私
want to have privacy,

24
00:01:20.030 --> 00:01:23.769
这是我认为在对象系统中非常重要的东西。
which is something that I think is very important to have in object systems.

25
00:01:23.769 --> 00:01:28.849
所以我们可能有一个目标，只有这样才能获得访问权限
So that we may have a goal where the only way to get access

26
00:01:28.849 --> 00:01:34.430
到ID是通过对象的方法
to the ID is through the methods of the object

27
00:01:34.430 --> 00:01:39.810
我们不希望任何人能够访问ID，除非通过方法。
that we don't want anybody to be able to access ID except through the methods.

28
00:01:39.810 --> 00:01:45.590
JavaScript在经典模型中没有提供任何隐私的方式，
JavaScript doesn't provide any way of having privacy in the classical model,

29
00:01:45.590 --> 00:01:49.280
在伪经典模型中，因为你附加到一个对象上的一切
in the pseudo-classical model, because everything you attach to an object

30
00:01:49.280 --> 00:01:52.240
对访问该对象的任何人都可见。
is visible to anybody who gets access to the object.

31
00:01:52.240 --> 00:01:53.400
所以那里没有隐私。
So there's no privacy there.

32
00:01:54.460 --> 00:01:59.620
但是函数模型，因为我们在闭包中有函数作用域，所以我们这样做。
But the functional model, because we have functions scope in closure, we do.

33
00:01:59.620 --> 00:02:01.680
假设我们想隐藏ID。
So let's say we want to hide the IDs.

34
00:02:01.680 --> 00:02:05.531
只能通过两种字符串测试方法获取ID。
You can only get ID through the two string test methods.

35
00:02:05.531 --> 00:02:07.519
代码实际上变得更简单了。
The code actually gets simpler.

36
00:02:08.550 --> 00:02:12.960
所以这里我们不说this.id，而是简单地说id，
So instead of saying this.id here we simply say id,

37
00:02:14.259 --> 00:02:18.810
我们得到它，我们将关闭传入的变量。
and we're getting it from, we're closing over the variable that got passed in.

38
00:02:18.810 --> 00:02:22.745
所以这是私人的，完全是私人的。
So it's private, it's completely private.

39
00:02:22.745 --> 00:02:24.054
而且这个代码也变得更简单了。
And this code got simpler too.

40
00:02:24.054 --> 00:02:28.849
我们拿到了这个ID，再一次，我们要结束了
We got this ID, and which again, we're getting through closure and

41
00:02:28.849 --> 00:02:31.259
代码变得更小更简单。
the code got smaller and simpler.

42
00:02:33.479 --> 00:02:35.180
是啊。&gt；&gt；扬声器3：难道功能没有被复制，
Yeah. &gt;&gt; Speaker 3: Aren't the functions copied,

43
00:02:35.180 --> 00:02:37.219
但是，那么对于每个实例？&gt；&gt；Douglas Crockford：对，
though, then for each instance? &gt;&gt; Douglas Crockford: Right,

44
00:02:37.219 --> 00:02:39.670
因此，这种模式是有成本的。
so there is a cost to this model.

45
00:02:39.670 --> 00:02:42.979
在原型模型中我们节省了内存，
That in the prototypal model we're saving memory,

46
00:02:42.979 --> 00:02:47.400
因为每个实例只有一个方法。
because we only have one of each method per instance.

47
00:02:47.400 --> 00:02:51.680
在这一个中，我们将创建更多的函数对象。
In this one we're going to have lots more function objects being created.

48
00:02:53.069 --> 00:02:56.770
我们周五会更多地讨论这个，但事实证明
And we'll talk more about this on Friday, but it turns out that

49
00:02:58.439 --> 00:03:02.500
只有当您拥有数百万个实例时，这一点才有意义。
that's significant only if you've got millions of instances.

50
00:03:02.500 --> 00:03:07.030
记忆变得如此庞大，
That memory has become so expansive,

51
00:03:07.030 --> 00:03:10.009
你的口袋里有千兆字节的RAM。
you've got gigabytes of RAM in your pocket.

52
00:03:10.009 --> 00:03:14.310
基于内存保护做出重要的架构决策
Making important architectural decisions based on memory conservation

53
00:03:14.310 --> 00:03:16.039
现在不是一个好的选择。
is not a good way to go now.

54
00:03:17.289 --> 00:03:20.849
我认为如果你担心数以百万计的情况，
And I would contend that if you are worried about millions of instances,

55
00:03:20.849 --> 00:03:22.949
也许这不是你应该使用的语言。
maybe this is not the language you should be using.

56
00:03:24.729 --> 00:03:26.819
但对于我们所做的大部分事情，
But for most of what we do,

57
00:03:26.819 --> 00:03:30.099
你将要制造的物体的数量将会相对较少。
the number of objects that you're gonna make is gonna be relatively small.

58
00:03:31.310 --> 00:03:36.219
就性能而言，这会很棒的。
And performance-wise, this is gonna be great.

59
00:03:36.219 --> 00:03:38.680
所以我们会在建筑上花更多的钱，但是
So we're gonna spend a little bit more in construction, but

60
00:03:38.680 --> 00:03:41.500
我们在执行上的花费会少很多。
we're gonna spend a lot less in execution.

61
00:03:43.000 --> 00:03:47.603
所以我认为这是一场胜利。&gt；&gt；Speaker 2：您创建的事实
So I think it's a win. &gt;&gt; Speaker 2: That fact that you create

62
00:03:47.603 --> 00:03:52.662
对象的每个实例的该函数的实例，
an instance of that function for each instance of the object,

63
00:03:52.662 --> 00:03:55.788
那是因为结束了对吧？
that's because of closure, right?

64
00:03:57.539 --> 00:04:02.310
如果没有那个我们就不能结束。&gt；&gt；Douglas Crockford：那是
If we can't have closure without that. &gt;&gt; Douglas Crockford: That's

65
00:04:02.310 --> 00:04:03.830
好吧。&gt；&gt；扬声器2：好的。
right. &gt;&gt; Speaker 2: Okay.

66
00:04:03.830 --> 00:04:05.259
&gt；&gt；Douglas Crockford：是的，因为
&gt;&gt; Douglas Crockford: Yeah, because of

67
00:04:05.259 --> 00:04:07.110
结束，我们愿意付出这个代价。
closure, we're willing to pay that cost.

68
00:04:07.110 --> 00:04:08.370
&gt；&gt；扬声器2：好的。&gt；&gt；Douglas Crockford：和
&gt;&gt; Speaker 2: Right. &gt;&gt; Douglas Crockford: And

69
00:04:08.370 --> 00:04:09.250
这不是很大的成本。
it's not much of a cost.

70
00:04:09.250 --> 00:04:11.280
如果您查看函数对象中的内容，
If you look at what is in a function object,

71
00:04:12.740 --> 00:04:17.459
基本上有一个对象，其中有两个额外的指针。
there is basically an object with two extra pointers in it.

72
00:04:17.459 --> 00:04:20.589
一个用于指向代码的指针，以及
One for the pointer to the code, and

73
00:04:20.589 --> 00:04:24.389
一个是指向创建功能的激活的指针。
one the pointer to the activation of the creating function.

74
00:04:26.519 --> 00:04:28.699
里面没什么别的了。
There's not much else in there.

75
00:04:28.699 --> 00:04:35.590
将有一个到原型对象的链接，
There will be a link to the prototype object,

76
00:04:35.590 --> 00:04:38.238
这是一种浪费，因为我们不打算使用它。
which is a waste because we're not going to use that.

77
00:04:39.340 --> 00:04:39.985
就是这样。所以
That's it. So,

78
00:04:39.985 --> 00:04:43.959
这些东西没有太多的内存，初始化它们的工作也不多。
there's not much memory in those things, not a lot of work to initialize them.

79
00:04:43.959 --> 00:04:51.281
所以它很轻。&gt；&gt；Douglas Crockford：有人吗
So it's very lightweight. &gt;&gt; Douglas Crockford: Anybody

80
00:04:51.281 --> 00:04:56.658
其他？&gt；&gt；Douglas Crockford：所以这也是
else? &gt;&gt; Douglas Crockford: So this also

81
00:04:56.658 --> 00:05:03.069
解决了我们在语言中遇到的与此绑定相关的另一个问题。
solves another problem that we have in the language which is related to this binding.

82
00:05:03.069 --> 00:05:07.170
这就是古老的hoozit，最初的伪古典hoozit。
So this is the old hoozit, the original pseudo-classical hoozit.

83
00:05:07.170 --> 00:05:11.279
假设我们想要将测试函数从对象中取出。
Suppose we want to take the test function out of the object.

84
00:05:11.279 --> 00:05:16.012
我们可以这样做，因为您可以从对象中复制任何对象引用，并且
Which we can do because you can copy any object reference out of an object and

85
00:05:16.012 --> 00:05:20.692
将其放在一个单独的变量中，然后将该变量作为函数调用。
put it in a separate variable, and then call that variable as a function.

86
00:05:20.692 --> 00:05:25.442
该调用将失败，因为当我们将test作为函数调用时，
That call will fail because when we call test as a function,

87
00:05:25.442 --> 00:05:29.812
这将不会绑定到它所来自的对象，而是
this will be bound not to the object that it came from but

88
00:05:29.812 --> 00:05:35.420
到其他对象，或者是全局对象，或者是未定义的对象。
to something else, either to the global object or undefined.

89
00:05:35.420 --> 00:05:39.293
这两种情况中的任何一种都会导致测试失败。
Either of which will cause this test to fail.

90
00:05:39.293 --> 00:05:46.550
但是在新的形式中，因为我们的方法中没有这一点，所以我们可以
But in the new form because our methods do not have this in them, we can

91
00:05:46.550 --> 00:05:51.360
获取这些函数，将它们从对象中拉出，并独立调用它们，以及
take those functions, pull them out of the object, and call them independently, and

92
00:05:51.360 --> 00:05:55.909
它们仍然以完全相同的方式工作，因为它们不依赖于此。
they still work exactly the same way because they don't depend on this.

93
00:05:55.909 --> 00:06:00.059
因此，无论如何调用这些方法，它们都将始终正确工作。
So no matter how those methods are called, they will always work correctly.

94
00:06:01.120 --> 00:06:05.639
所有这方面的脆弱性都是完全避免的。
All the fragileness of this is completely avoided.

95
00:06:05.639 --> 00:06:07.769
&gt；&gt；扬声器4：我想说清楚这一点，
&gt;&gt; Speaker 4: Just so I'm clear on this,

96
00:06:07.769 --> 00:06:14.209
在中间，在您要获取测试ID的函数中，
in the middle one there, in your function where you're taking the Test ID,

97
00:06:14.209 --> 00:06:19.680
您可以访问ID，因为它被推到堆上，
you have access to ID because it was pushed onto the heap,

98
00:06:19.680 --> 00:06:21.319
它还没有被垃圾收集
and it hasn't been garbage collected yet

99
00:06:21.319 --> 00:06:22.970
因为它植根于某个地方。
because it's rooted somewhere.

100
00:06:22.970 --> 00:06:23.639
&gt；&gt；Douglas Crockford：对。&gt；&gt；扬声器4：好的。
&gt;&gt; Douglas Crockford: Right. &gt;&gt; Speaker 4: Okay.

101
00:06:24.860 --> 00:06:25.509
&gt；&gt；Douglas Crockford：是的，事实上，
&gt;&gt; Douglas Crockford: Yeah, in fact,

102
00:06:25.509 --> 00:06:27.769
它是由那个物体扎根的。&gt；&gt；扬声器4：是的。
it's being rooted by that object. &gt;&gt; Speaker 4: Yeah.

103
00:06:27.769 --> 00:06:28.970
&gt；&gt；道格拉斯·克罗克福德：或者用那种方法。
&gt;&gt; Douglas Crockford: Or by that method.

104
00:06:28.970 --> 00:06:30.500
只要那个方法还存在，
As long as that method survives,

105
00:06:32.420 --> 00:06:35.250
它需要的环境也将继续存在。&gt；&gt；扬声器4：好的。
the context it needs will also survive. &gt;&gt; Speaker 4: Okay.
