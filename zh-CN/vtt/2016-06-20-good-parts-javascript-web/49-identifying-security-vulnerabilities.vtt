WEBVTT

1
00:00:00.000 --> 00:00:02.911
但是功能不会因为该体验而改变，
But the function is not altered as result of that experience,

2
00:00:02.911 --> 00:00:05.655
它不记得了。&gt；&gt；演讲者1：所以目标是保护
it doesn't remember that. &gt;&gt; Speaker 1: So the goal is to protect

3
00:00:05.655 --> 00:00:12.080
数组。&gt；&gt；扬声器2：我们已经开始这样做了，
array. &gt;&gt; Speaker 2: Which we have started to do,

4
00:00:12.080 --> 00:00:18.280
现在我们已经有了这个东西，在一个函数范围内，我们已经有了关闭它的方法。
now we've got the thing, in a function scope, we've got methods of close over it.

5
00:00:18.280 --> 00:00:23.510
我们已经做得很好了，但是语言中有一个漏洞，
We've done all of that stuff well, but there is a vulnerability in the language,

6
00:00:23.510 --> 00:00:29.336
这会阻碍我们的工作。&GT；&GT；演讲者1：我的意图是，
which will frustrate our work. &gt;&gt; Speaker 1: My intention is just,

7
00:00:29.336 --> 00:00:34.310
你只有一个返回对象，对吗？
and you just have the return object, right?

8
00:00:34.310 --> 00:00:41.560
所以你可以创建一个新的，你是否可以潜在地定义一个新的，关键字
So you could make a new, could you potentially define a new, key of

9
00:00:41.560 --> 00:00:47.439
只返回数组的函数。&gt；&gt；扬声器2：那么，你只是。
the function that just return array. &gt;&gt; Speaker 2: So, you just.

10
00:00:47.439 --> 00:00:50.259
你会怎么做？&gt；&gt；扬声器3：是的，
How would you do that? &gt;&gt; Speaker 3: Yeah,

11
00:00:50.259 --> 00:00:56.207
卡斯特。&gt；&gt；扬声器2：那么，
Castor. &gt;&gt; Speaker 2: So,

12
00:00:56.207 --> 00:00:58.723
更明确一点。&gt；&gt；扬声器4：那么，
be more explicit. &gt;&gt; Speaker 4: So,

13
00:00:58.723 --> 00:01:04.462
您可以调用存储的vector，或者传入包含数组的函数。
you call vector that store or you pass in a function that contains the array.

14
00:01:04.462 --> 00:01:06.319
&gt；&gt；扬声器2：好的，但是
&gt;&gt; Speaker 2: Okay, but

15
00:01:06.319 --> 00:01:10.560
您传入的函数是在外部创建的，对吗？
the function you pass in, is created on the outside, right?

16
00:01:10.560 --> 00:01:15.534
所以当函数在外部时，函数不会在数组上关闭，所以，
So that function doesn't close over the array when it's on the outside, and so,

17
00:01:15.534 --> 00:01:19.587
只有在内部创建的函数才是该闭包的一部分。
only functions created on the inside will be part of that closure.

18
00:01:24.444 --> 00:01:30.501
&gt；&gt；[INAUDIBLE]。
&gt;&gt; [INAUDIBLE].

19
00:01:30.501 --> 00:01:32.079
&gt；&gt；扬声器2：有可能
&gt;&gt; Speaker 2: It is possible to have

20
00:01:32.079 --> 00:01:37.787
函数到系统对象的原型，这肯定是
functions to the prototypes of system objects, and that is definitely going

21
00:01:37.787 --> 00:01:42.638
关心这个问题会解决的。&gt；&gt；扬声器3：如果你要，
to be concerned about that's going to fix. &gt;&gt; Speaker 3: if you were to,

22
00:01:42.638 --> 00:01:45.896
我想这就是约翰所说的，如果你要，
I think this is what John was saying, if you were to,

23
00:01:45.896 --> 00:01:49.829
你仍然可以实现一个向量，然后你说，向量。
you can still achieve a vector, and then you say, vector.

24
00:01:49.829 --> 00:01:53.293
获取数组等于函数返回，数组。
Get array equals function return, array.

25
00:01:53.293 --> 00:01:58.221
但是数组是未定义的，因为它的影响范围是
But array is undefined, because its impact scope of

26
00:01:58.221 --> 00:02:01.829
你创造它的地方。&gt；&gt；扬声器2：没错。
where you're creating it. &gt;&gt; Speaker 2: That's right.

27
00:02:04.079 --> 00:02:06.890
所以这很好，这是语言工作的地方
So that's good, that's a place where the language is working for

28
00:02:06.890 --> 00:02:07.442
我们。&gt；&gt；[CROSSTALK]
us. &gt;&gt; [CROSSTALK]

29
00:02:07.442 --> 00:02:08.100
&gt；&gt；扬声器2：是的，
&gt;&gt; Speaker 2: Yeah,

30
00:02:08.100 --> 00:02:11.834
这不是语言薄弱的地方。
that's not where the language is weak.

31
00:02:25.162 --> 00:02:28.298
&gt；&gt；Speaker 4：如果从Vector继承，
&gt;&gt; Speaker 4: If you inherit from vector,

32
00:02:28.298 --> 00:02:34.121
您是否可以访问[INAUDIBLE]。&gt；&gt；演讲者2：非常好的问题，
do you have access to the [INAUDIBLE]. &gt;&gt; Speaker 2: Really good question,

33
00:02:34.121 --> 00:02:38.182
不，因为函数停止工作，比如JavaScopes，
no, because functions go stop work like JavaScopes,

34
00:02:38.182 --> 00:02:41.663
你知道没有包装之类的东西。
you know there's no package kind of thing.

35
00:02:41.663 --> 00:02:45.849
所以，不，你不能继承函数作用域的内容。
So, no you don't inherit the contents of a function scope.

36
00:02:45.849 --> 00:02:51.623
你能摆弄一下那个函数吗。&gt；&gt；扬声器3：那么，向量，您的实例
Can you twiddle with that function. &gt;&gt; Speaker 3: So, vector, your instance

37
00:02:51.623 --> 00:02:57.020
那个.get，里面有这个功能。
that.get, has this function in it.

38
00:02:57.020 --> 00:02:57.750
你能不能，这是一个函数。
Can you, it is a function.

39
00:02:57.750 --> 00:03:03.092
有没有什么方法可以操作这个函数的内脏一次
Is there some way to manipulate the guts of that function once

40
00:03:03.092 --> 00:03:09.929
您有指向它的指针吗？&gt；&gt；扬声器2：没有。
you have a pointer to it? &gt;&gt; Speaker 2: No.

41
00:03:11.139 --> 00:03:12.919
不，功能。
No, functions.

42
00:03:12.919 --> 00:03:15.389
是的，你可以存储一个函数。
Yeah, you could store a function.

43
00:03:15.389 --> 00:03:17.750
您可以使用STORE将函数放入数组中，然后
You could use store to put a function through an array and

44
00:03:17.750 --> 00:03:20.259
然后使用get将其恢复。
then use get, to get it back out.

45
00:03:20.259 --> 00:03:23.520
但是功能不会因为该体验而改变，
But the function is not altered as result of that experience,

46
00:03:23.520 --> 00:03:25.490
它不记得了。&gt；&gt；扬声器3：函数没有
it doesn't remember that. &gt;&gt; Speaker 3: The function doesn't have

47
00:03:25.490 --> 00:03:27.039
您可以使用的任何属性
any properties that you could go and

48
00:03:28.229 --> 00:03:29.479
挑。&gt；&gt；扬声器2：好的。
pick at. &gt;&gt; Speaker 2: Right.

49
00:03:29.479 --> 00:03:30.759
&gt；&gt；扬声器3：哪里更改，所以
&gt;&gt; Speaker 3: Where change, so

50
00:03:30.759 --> 00:03:34.759
当你下次打电话时，它会完全给你一些东西
that when you call the next time, it gives you something completely

51
00:03:34.759 --> 00:03:35.960
不一样。&gt；&gt；扬声器2：好的。
different. &gt;&gt; Speaker 2: Right.

52
00:03:37.060 --> 00:03:38.329
&gt；&gt；扬声器4：如果我将函数附加到
&gt;&gt; Speaker 4: If I tack a function onto

53
00:03:38.329 --> 00:03:39.969
然后叫这个。
that and call this.

54
00:03:39.969 --> 00:03:43.985
这台设备是否可以访问阵列？&gt；&gt；扬声器2：您可以
Does this have access to the array? &gt;&gt; Speaker 2: You are on to

55
00:03:43.985 --> 00:03:49.600
一些东西。&gt；&gt；扬声器4：SO
something. &gt;&gt; Speaker 4: So

56
00:03:49.600 --> 00:03:53.347
如果我调用了append on function code，把它搞砸了，
if I had called append on function code, screw it up,

57
00:03:53.347 --> 00:03:57.780
如果把它搞砸了，并且说，这个.array等于一个新的数组。
and if screw it up, and said, this .array equals a new array.

58
00:04:01.090 --> 00:04:04.340
&gt；&gt；扬声器2：不会是这个.array，
&gt;&gt; Speaker 2: It wouldn't be this .array,

59
00:04:04.340 --> 00:04:10.250
因为没有代表作用域内容的对象。
because there is not an object which represents The contents of the scope.

60
00:04:10.250 --> 00:04:14.710
但这绝对是袭击的一部分。
But this is, definitely part of the attack.

61
00:04:14.710 --> 00:04:15.689
&gt；&gt；扬声器3：我们可以改变Push，
&gt;&gt; Speaker 3: Can we change push,

62
00:04:15.689 --> 00:04:19.250
所以我们说的是阵列？
so that we said array?

63
00:04:19.250 --> 00:04:24.100
我们改变了数组的原型推送，
We changed what the prototypical push of an array,

64
00:04:24.100 --> 00:04:29.470
这样做，它将返回自己的值。&gt；&gt；扬声器2：是，是
does so that, it returns its own value. &gt;&gt; Speaker 2: Yeah, yeah

65
00:04:32.379 --> 00:04:38.596
你越来越接近了。&gt；&gt；扬声器3：好的。
you are getting close. &gt;&gt; Speaker 3: Okay.

66
00:04:38.596 --> 00:04:42.959
好的，所以return(I)，第三个函数不返回任何东西。
Okay so the return (i), that, the third function doesn't return anything.

67
00:04:42.959 --> 00:04:43.970
所以这不会把它弄出来的。
So that's not gonna get it out.

68
00:04:43.970 --> 00:04:45.840
第二个不返回任何内容。
The second one doesn't return anything.

69
00:04:45.840 --> 00:04:46.990
所以这不会把它弄出来的。
So that's not gonna get it out.

70
00:04:46.990 --> 00:04:51.845
或者，实际上，如果你传入一个数组，
Or, actually, if you pass in an array,

71
00:04:51.845 --> 00:04:54.870
为了储存，
to store,

72
00:04:54.870 --> 00:05:00.350
你可以改变，或者
you could change, or

73
00:05:00.350 --> 00:05:05.490
不可以，您可以传入一个数组进行追加，并更改push，以便push所做的事情。
no, you could pass in an array to append, and change push, so that what push does.

74
00:05:05.490 --> 00:05:12.389
它接受你已经通过的东西，并推到它的末端，它本身。
It takes the thing that you've passed in, and pushes onto the end of it, itself.

75
00:05:12.389 --> 00:05:16.923
所以你用这个数组调用append，然后得到数组的最后一件事，
So you call append with this array, and then you get the last thing of the array,

76
00:05:16.923 --> 00:05:20.428
这就是你想要的数组。&gt；&gt；扬声器2：不，那不起作用，
and that's the array you want. &gt;&gt; Speaker 2: No, that wouldn't work,

77
00:05:20.428 --> 00:05:24.480
是的，你在漂流，你差点就成功了。
yeah, you're drifting away, you almost had it.

78
00:05:24.480 --> 00:05:26.021
你非常接近
You were very, very close

79
00:05:33.843 --> 00:05:36.750
&gt；&gt；Speaker 4：末尾推送函数
&gt;&gt; Speaker 4: Push a function at the end

80
00:05:36.750 --> 00:05:42.702
使用append，然后使用get，
of the array, using append, and then you use get,

81
00:05:42.702 --> 00:05:47.430
调用那个函数，所以。&gt；&gt；扬声器2：你可以这样做。
to call that function, so. &gt;&gt; Speaker 2: You can do that.

82
00:05:47.430 --> 00:05:52.610
但是，这个函数不记得那个，那个发生了。
But, the function, the function does not remember that, that happened.

83
00:05:52.610 --> 00:05:59.016
所以它不会因此而改变。&GT；&GT；扬声器3：你好，
So it is not altered by that. &gt;&gt; Speaker 3: How do you,

84
00:05:59.016 --> 00:06:03.079
在JavaScope中更改原型的功能，
in JavaScope change the function of a prototype,

85
00:06:03.079 --> 00:06:07.238
你像雷达原型一样耍花招。推，现在，
you trick like a radar prototype .push, and now,

86
00:06:07.238 --> 00:06:10.689
你会没事的。&gt；&gt；扬声器2：就是这样。
you're gonna okay. &gt;&gt; Speaker 2: That's exactly it.

87
00:06:10.689 --> 00:06:13.310
是的，你可以去array.prototype.push。
Yeah, you could go to array.prototype.push.

88
00:06:13.310 --> 00:06:14.980
但我们假设这一点已经解决了。
But we're assuming that, that's been fixed.

89
00:06:16.759 --> 00:06:19.490
所以JavaScript设计的一个方面，
So one of the aspects of the design of JavaScript,

90
00:06:19.490 --> 00:06:25.220
就是所有的东西都是解锁的，它的内脏暴露出来了，而且
is that everything is unlocked with its guts exposed, and

91
00:06:25.220 --> 00:06:28.029
如果你想到安全，那显然是一件可怕的事情。
If you think about security, that's obviously a terrible thing.

92
00:06:28.029 --> 00:06:29.629
所以我们假设，这个问题已经解决了。
So we're assuming that, that's been fixed.

93
00:06:30.740 --> 00:06:34.863
所以我们关心的不仅仅是普通的性能
So we're concerned not just with the performance of ordinary

94
00:06:34.863 --> 00:06:40.036
程序。&gt；&gt；扬声器4：SO
programs. &gt;&gt; Speaker 4: So

95
00:06:40.036 --> 00:06:43.500
如果要存储函数，
if you were to store a function,

96
00:06:43.500 --> 00:06:48.731
这称为.array&gt；&gt；扬声器4：you
that calls this .array &gt;&gt; Speaker 4: You

97
00:06:48.731 --> 00:06:53.692
仍然无法访问数组。&gt；&gt；扬声器2：此.array
still wouldn't have access to array. &gt;&gt; Speaker 2: This .array

98
00:06:53.692 --> 00:06:58.014
不会带你去那里，但这本身会带你去那里。
won't get you there, but this itself will get you there.

99
00:07:04.490 --> 00:07:06.208
&gt；&gt；扬声器4：有很多次是这样的。
&gt;&gt; Speaker 4: There were times this.

100
00:07:06.208 --> 00:07:06.745
&gt；&gt；扬声器2：是的。
&gt;&gt; Speaker 2: Yes.

101
00:07:18.141 --> 00:07:19.439
&gt；&gt；扬声器3：我知道了。
&gt;&gt; Speaker 3: I got it.

102
00:07:19.439 --> 00:07:24.310
就是，我所描述的确实做到了，每个人都在雷达原型上。推。
It was, what I described exactly did it, everyone at the radar prototype.push.

103
00:07:24.310 --> 00:07:30.110
等于函数a，括号零等于这个。
Equals functional a, a brackets zero equals this.

104
00:07:31.389 --> 00:07:32.750
所以他们不是在创建数组一，二，
So they're not creating array one, two,

105
00:07:32.750 --> 00:07:34.939
三四。&gt；&gt；扬声器2：对吗？
three, four. &gt;&gt; Speaker 2: Right?

106
00:07:34.939 --> 00:07:37.355
&gt；&gt；扬声器3：他们正在创建数组x，
&gt;&gt; Speaker 3: They are creating array x,

107
00:07:37.355 --> 00:07:43.170
到数组中，然后我调用我的第一个arra.push传递x。
into array, and then I call My first array.push passing in x.

108
00:07:43.170 --> 00:07:50.639
两位的空数组，取走了自己，使x的第一个元素。
The two bit empty array, took away itself made that the first element of x.

109
00:07:50.639 --> 00:07:54.810
因此，它们进入其中，现在x，x的第一个元素，
So, they pass into it and now x, the first element of x,

110
00:07:54.810 --> 00:07:56.949
就是我想黑掉的阵列。&gt；&gt；扬声器2：好的。
is the array I want to hack out. &gt;&gt; Speaker 2: Right.

111
00:07:56.949 --> 00:08:03.790
我已经说过几次了，我们不是在寻找阵列点原型，那就是
I've said it a couple of times, we're not looking for array dot prototype, that

112
00:08:03.790 --> 00:08:06.790
我们假设，这个问题已经解决了。&gt；&gt；扬声器3：我是
we're assuming that, that's been fixed. &gt;&gt; Speaker 3: I'm

113
00:08:06.790 --> 00:08:09.470
对不起，数组点原型是固定在新的
sorry, Array dot prototype is fixed in the new

114
00:08:09.470 --> 00:08:12.040
语言的版本。&gt；&gt；扬声器2：不，我们假设在
version of language. &gt;&gt; Speaker 2: No, we're assuming in

115
00:08:12.040 --> 00:08:16.540
这个问题的背景，那个已经解决了，因为这件事，
the context of this problem, that, that's been fixed, because of the very thing,

116
00:08:16.540 --> 00:08:20.480
你刚刚描述的。&gt；&gt；扬声器4：它与此无关
that you just described. &gt;&gt; Speaker 4: It has nothing to do

117
00:08:20.480 --> 00:08:23.680
使用Call方法？&gt；&gt；扬声器2：it
with using the call method? &gt;&gt; Speaker 2: It

118
00:08:23.680 --> 00:08:25.100
不需要使用Call方法。
does not require use of the call method.
