WEBVTT

1
00:00:00.000 --> 00:00:03.984
[音乐]
[MUSIC]

2
00:00:03.984 --> 00:00:07.597
&gt；&gt；Douglas Crockford：然后我们添加了一个元对象API，让我们可以更好地控制
&gt;&gt; Douglas Crockford: Then we added a Meta Object API to give us more control over

3
00:00:07.597 --> 00:00:10.685
对象属性的属性，因此
the attributes of the properties of objects, so

4
00:00:10.685 --> 00:00:14.019
我们可以对发生的事情进行更精细的控制。
we can get much finer control over what's going on.

5
00:00:14.019 --> 00:00:15.849
因此，我们现在有两种类型的属性。
So, we now have two types of properties.

6
00:00:15.849 --> 00:00:20.024
我们有数据属性，这是我们一直拥有的东西，或者只是一些
We have data properties, which are the things we've always had or it's just some

7
00:00:20.024 --> 00:00:24.219
您可以存储在要检索的对象中的数据，并且我们具有访问器属性。
data that you can store in the object to retrieve and we have accessor properties.

8
00:00:24.219 --> 00:00:28.865
我之前给你展示了一个温度对象的例子，在那里我们可以有
I showed you an example earlier with the temperature object where we can have

9
00:00:28.865 --> 00:00:33.729
访问器实际上一直是中的访问器属性
accessors and that's an, actually, have always been accessor properties in

10
00:00:33.729 --> 00:00:38.609
语言，但它们从未接触过你，所以你不能制作它们。
the language, but they were never exposed to you, so you couldn't make them.

11
00:00:38.609 --> 00:00:43.570
所以在DOM中有一些东西像是一个点innerHTML是一个访问器属性，
So there are things in the DOM like a dot innerHTML is an accessor property,

12
00:00:43.570 --> 00:00:48.320
这就是为什么你可以分配一些东西给它，然后发生一些事情。
that's why you can assign something to it and then something happens.

13
00:00:50.789 --> 00:00:55.369
所以有很多人对允许你写东西很感兴趣，
And so there was a lot of interest in allowing you to write stuff,

14
00:00:55.369 --> 00:00:59.310
就像DOM一样糟糕，我们成功了。
which is as crappy as the DOM and we succeeded.

15
00:00:59.310 --> 00:01:04.683
所以废话没有限制，你现在可以写了。
So there's no limit on the crap, you can write now.

16
00:01:04.683 --> 00:01:07.290
所以，我们有物体。
So, we've got objects.

17
00:01:07.290 --> 00:01:09.510
对象由属性组成。
Objects are composed of properties.

18
00:01:09.510 --> 00:01:10.834
每个属性都由属性组成。
Each property is composed of attributes.

19
00:01:10.834 --> 00:01:14.210
每个属性都有四个属性。
Every property has four attributes.

20
00:01:14.210 --> 00:01:18.588
如果您是数据属性，则您的属性是值的、可写的、可枚举的和
If you're a data property, your attributes are value, writable, enumerable and

21
00:01:18.588 --> 00:01:20.109
可配置。
configurable.

22
00:01:20.109 --> 00:01:22.189
如果您是访问者属性，
If you're an accessor property,

23
00:01:22.189 --> 00:01:27.730
您的属性是可枚举的，可配置的，获取和设置的。
your attributes are enumerable, configurable, get and set.

24
00:01:27.730 --> 00:01:30.310
因此，value是属性的实际值。
So, value is the actual value of the property.

25
00:01:31.439 --> 00:01:34.889
Writable是一个布尔值，它确定您是否可以读取或写入它，或者
Writable is a Boolean that determines if you can read it or write it, or

26
00:01:34.889 --> 00:01:35.890
如果你能写的话。
if you can write it.

27
00:01:35.890 --> 00:01:38.789
因此，如果可写为false，则为只读。
So if writeable is false, it's read only.

28
00:01:38.789 --> 00:01:43.127
事实证明，该语言始终具有只读属性，但是
It turns out the language has always had read only properties, but

29
00:01:43.127 --> 00:01:44.993
它从来没有暴露给你。
it was never exposed to you.

30
00:01:44.993 --> 00:01:47.939
所以你不能创造它们，只有语言可以创造它们。
So you couldn't create them, only the language could create them.

31
00:01:47.939 --> 00:01:52.867
所以现在任何人都可以。
So now, anybody can.

32
00:01:52.867 --> 00:01:58.060
可枚举意味着它将出现在一个四个n循环中，或者
Enumerable means it will show up in a four n loop or

33
00:01:58.060 --> 00:02:01.362
将显示在object.keys中。
will show up in object.keys.

34
00:02:01.362 --> 00:02:05.385
如果您关闭它，这意味着它不会显示在枚举中，这
If you turn that off, it means it's not going to show up in enumerations, which

35
00:02:05.385 --> 00:02:10.319
意味着你可以更好地隐藏它，这样它就不会一直被挖掘出来。
means you can hide it a little bit better that it won't get dredged up all the time.

36
00:02:10.319 --> 00:02:13.312
可配置意味着您可以删除它或
Configurable means you can delete it or

37
00:02:13.312 --> 00:02:18.759
如果它是数据属性，则可以将其更改为访问器属性。
you can change it into an accessor property, if it was a data property.

38
00:02:18.759 --> 00:02:22.503
get是一个函数，如果您尝试获取属性并
Get is a function that will be called if you try to get the property and

39
00:02:22.503 --> 00:02:25.328
set是一个函数，如果您尝试设置
set is a function that will be called if you try to set

40
00:02:25.328 --> 00:02:30.451
财产。&gt；&gt；Douglas Crockford：So
the property. &gt;&gt; Douglas Crockford: So

41
00:02:30.451 --> 00:02:33.492
有了这一点，我们就有了两个版本的声明。
having that, we've got two versions of a statement.

42
00:02:33.492 --> 00:02:38.469
第一个语句是您可以在ES3中创建对象文字的方式，并且
The first statement is the way you could create an object literal in ES3 and

43
00:02:38.469 --> 00:02:42.894
第二个在ES5中做了完全相同的事情，您可能是
the second one does exactly the same thing in ES5, and you might be

44
00:02:42.894 --> 00:02:47.635
非常感谢。&gt；&gt；扬声器2：[笑]
thinking thank you very much for that. &gt;&gt; Speaker 2: [LAUGH]

45
00:02:47.635 --> 00:02:49.151
&GT；&GT；道格拉斯·克罗克福德：那是巨大的。
&gt;&gt; Douglas Crockford: That's huge.

46
00:02:49.151 --> 00:02:53.400
所以问题是我们希望能够添加这个功能，但是
So the thing is we wanted to be able to add this functionality, but

47
00:02:53.400 --> 00:02:57.579
我们受到限制，无法添加语法。
we were constrained that we couldn't add syntax.

48
00:02:57.579 --> 00:03:01.169
所以我们想让它成为可能，但我们不能让它变得美好。
So we wanted to make it possible, but we couldn't make it nice.

49
00:03:01.169 --> 00:03:05.479
但至少可能总比不可能好，这就是我们曾经的处境。
But at least possible is better than impossible, which is where we were.

50
00:03:05.479 --> 00:03:09.742
因此，这意味着库现在可以构造对象和
So, this means that a library can now construct objects and

51
00:03:09.742 --> 00:03:12.650
可以控制正在发生的事情。
can have control over what's going on.

52
00:03:12.650 --> 00:03:16.370
因此，对象可以指定它想要继承的对象。
So, an object can designate what it wants to inherit from.

53
00:03:16.370 --> 00:03:17.969
它不需要从对象那里听到原型。
It doesn't have to hear from object.prototype.

54
00:03:17.969 --> 00:03:20.042
它可以从任何东西继承，也可以什么都不继承。
It can inherit from anything or nothing.

55
00:03:20.042 --> 00:03:24.573
以前从来没有这样的选择，现在我们可以这样做
That's never been an option before, now we can do that and

56
00:03:24.573 --> 00:03:28.098
它可以说，这个属性是不可写的。
it can say, this property is not writeable.

57
00:03:28.098 --> 00:03:29.521
它不是可枚举的。
It's not enumerable.

58
00:03:29.521 --> 00:03:30.593
它是不可配置的。
It's not configurable.

59
00:03:30.593 --> 00:03:33.530
所以，我们可以允许你把这些东西锁起来。
So, we can allow you to lock those things down.

60
00:03:33.530 --> 00:03:35.969
一旦你将其中一个设置为假，
And once you set one of those things to false,

61
00:03:35.969 --> 00:03:39.030
它再也不能变回真的了。
it can never be turned back to true again.

62
00:03:39.030 --> 00:03:42.889
所以这给了你一些控制，如果你想锁定你的对象，
So that gives you some control that if you wanna lock your object down,

63
00:03:42.889 --> 00:03:43.699
你现在可以这么做了。
you can now do that.

64
00:03:45.939 --> 00:03:50.509
因此我们添加了一个新方法Object.getProperty，
So we added a new method, Object.getProperty,

65
00:03:50.509 --> 00:03:53.599
这样你就可以利用这些东西了。
which allows you to take advantage of this stuff.

66
00:03:53.599 --> 00:03:58.000
因此，这显示了一个创建附件属性的示例
So, this shows an example of creating an accessory property

67
00:03:58.000 --> 00:04:00.319
而不使用新语法。
without using new syntax.

68
00:04:00.319 --> 00:04:04.080
因此，这与我们之前所做的类似，但是
So this does something similar to what we did before, but

69
00:04:04.080 --> 00:04:07.289
它只使用方法调用和
it's only using method calls and

70
00:04:07.289 --> 00:04:13.159
这个表单的优点是你可以在它周围放一个if，你不会
the advantage of this form is that you can put an if around this and you won't

71
00:04:13.159 --> 00:04:17.310
如果您试图在没有语法错误的浏览器上运行它，则会出现语法错误。
get a syntax error if you're trying to run it on a browser that doesn't have it.

72
00:04:17.310 --> 00:04:21.185
而对于语法形式，您不能在语法错误周围放置if。
Whereas with the syntax form, you can't put an if around a syntax error.

73
00:04:21.185 --> 00:04:23.427
因此，如果您尝试在较旧的浏览器上运行它，
So if you try to run it on an older browser,

74
00:04:23.427 --> 00:04:27.862
它只会失败&GT；&GT；Douglas Crockford：所以
it will simply fail &gt;&gt; Douglas Crockford: So

75
00:04:27.862 --> 00:04:31.867
元对象API包含Object.defined edProperty，
that the Meta Object API contains Object.definedProperty,

76
00:04:31.867 --> 00:04:34.100
我刚给你看过了。
which I just showed you.

77
00:04:34.100 --> 00:04:39.608
Object.DefineProperties，它允许您一次定义其中的几个，并且
Object.defineProperties, which will allow you to define several of these at once and

78
00:04:39.608 --> 00:04:43.980
也是Object.getOwnProperty描述符，它将返回一个对象，
also Object.getOwnProperty descriptor, which will return an object,

79
00:04:43.980 --> 00:04:47.000
它描述属性的属性。
which describes the attributes of a property.

80
00:04:48.430 --> 00:04:52.470
我必须指出，这个制度显然是由委员会设计的。
I should point out that this system was clearly designed by committee.

81
00:04:52.470 --> 00:04:55.771
你有像object.create和这样的东西
You've got things like object.create and

82
00:04:55.771 --> 00:04:59.524
你可以得到像getOwnPropertyDescriptor这样的东西。
you get things like getOwnPropertyDescriptor.

83
00:04:59.524 --> 00:05:00.939
委员会就是这样做的。
Committees do stuff like that.

84
00:05:00.939 --> 00:05:04.315
这些名字是如何起作用的没有一致性。
There's no consistency on how the names work.

85
00:05:04.315 --> 00:05:08.971
我们添加了一些您可能永远不会使用的方法。
We added a couple of methods that you'll probably never get to use.

86
00:05:08.971 --> 00:05:12.670
GetOwnPropertyNames，getPropertyOf。
GetOwnPropertyNames, getPropertyOf.

87
00:05:12.670 --> 00:05:13.841
我们添加了这些
We added these for

88
00:05:13.841 --> 00:05:18.923
安全库的目的是希望在所有其他事情之前运行，并且
the purpose of security libraries that want to run before everything else and

89
00:05:18.923 --> 00:05:23.459
锁定所有Brendan故意未锁定的东西，所以
lockdown everything that Brendan intentionally left unlocked, so

90
00:05:23.459 --> 00:05:28.790
环境现在是安全的，第三方代码可以在您的环境中运行。
that the environment is now safe for third party code to run in your environment.

91
00:05:29.980 --> 00:05:33.685
为了得到所有需要锁定的东西，它需要
And in order to get at everything that needed to be locked down, it needed

92
00:05:33.685 --> 00:05:37.781
专门的访问端口钻进了语言，这样他就可以拿到这些东西了。
special access ports drilled into the language, so he could get at this stuff.

93
00:05:37.781 --> 00:05:43.439
所以，那些图书馆可能会做的就是拿这些。
So, what those libraries are likely to do is take these.

94
00:05:43.439 --> 00:05:49.858
使用它们，然后销毁它们，这样其他人就不能使用它们了。
Use them, then destroy them, so that nobody else can use them.

95
00:05:49.858 --> 00:05:51.153
所以拥有了所有这些东西，
So having all of this stuff,

96
00:05:51.153 --> 00:05:53.970
我们可以做以前做不到的事情。
it becomes possible to do things that we couldn't do before.

97
00:05:53.970 --> 00:05:58.029
例如，这是replace_prototype函数。
For example, this is the replace_prototype function.

98
00:05:58.029 --> 00:06:00.451
它完美地复制了一个物体，
It makes a perfect copy of an object,

99
00:06:00.451 --> 00:06:04.209
除了它现在继承了一个不同的原型。
except that it now inherits from a different prototype.

100
00:06:05.370 --> 00:06:08.019
这是人们多年来一直要求的
That's something that people have been asking for for years and

101
00:06:08.019 --> 00:06:13.439
没有，直到现在没有办法做到这一点。
there is no, until now there was no way to accomplish that.

102
00:06:13.439 --> 00:06:16.024
现在有了。所以函数本身看起来很难看
Now, there is. So the function itself is an ugly looking

103
00:06:16.024 --> 00:06:18.733
函数，但可以将其包装在名称中并
function, but you can wrap that in a name and

104
00:06:18.733 --> 00:06:23.716
现在你可以在你的库中提供它，任何人现在都可以创建一个对象
now you can provide that in your library and anybody can now make an object that's

105
00:06:23.716 --> 00:06:29.122
找到了一个不同的原型。&gt；&gt；Douglas Crockford：it
got a different prototype. &gt;&gt; Douglas Crockford: It

106
00:06:29.122 --> 00:06:33.836
过去，您可以随时向任何对象添加新属性
used to be the case that you could add a new property to any object at any time

107
00:06:33.836 --> 00:06:37.350
只需给它赋值，现在就可以关闭它了。
simply by assigning to it and you can now turn that off.

108
00:06:37.350 --> 00:06:41.665
如果调用Object.proventExtensions并向其传递一个对象，
If you called Object.preventExtensions and pass it an object,

109
00:06:41.665 --> 00:06:45.279
该对象现在将拒绝接受新属性。
that object will now refuse to accept new properties.

110
00:06:45.279 --> 00:06:50.060
如果您尝试给它一个新的属性，它将抛出一个异常，而不是
If you attempt to give it a new property, it will throw an exception instead and

111
00:06:50.060 --> 00:06:52.098
我们可以走得更远。
we can go even further than that.

112
00:06:52.098 --> 00:06:54.552
我们可以冻结物体。
We can freeze the object.

113
00:06:54.552 --> 00:06:59.389
冻结可防止扩展，并使每个属性都为只读和
Freeze prevents extensions and also makes every property read-only and

114
00:06:59.389 --> 00:07:03.761
不可配置，这意味着它现在是一个不可变的对象，并且
non-configurable, which means it is now an immutable object and

115
00:07:03.761 --> 00:07:05.879
它有一些很好的特性。
that has some nice properties.

116
00:07:05.879 --> 00:07:10.108
这意味着该语言的未来版本可能能够做出一些
It means that future versions of the language may be able to make some

117
00:07:10.108 --> 00:07:12.038
有趣的优化，
interesting optimizations,

118
00:07:12.038 --> 00:07:16.279
因为他们可以假设这个物体不能改变。
because they can make assumptions that this object cannot change.

119
00:07:16.279 --> 00:07:20.050
这意味着我们可以更聪明地为该对象生成代码。
That means we can be smarter in the way we generate code for that object.

120
00:07:21.689 --> 00:07:27.339
这也意味着我们可以把冻结的物体交给第三方
It also means that we can take a frozen object hand it to a third party and

121
00:07:27.339 --> 00:07:30.439
确信第三方不会腐败或
be confident that the third party cannot corrupt or

122
00:07:30.439 --> 00:07:34.209
篡改物体，这是非常有价值的东西，
tamper with the object and that's an extremely valuable thing,

123
00:07:34.209 --> 00:07:39.240
特别是在我们越来越多的派对上做越来越复杂的事情的时候。
particularly as we're doing more and more complicated stuff with more parties.
