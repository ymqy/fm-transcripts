WEBVTT

1
00:00:00.025 --> 00:00:03.874
[音乐]
[MUSIC]

2
00:00:03.874 --> 00:00:08.813
&gt；&gt；Douglas：那么让我们谈谈测试，所以异步系统中的测试是
&gt;&gt; Douglas: So let's talk about testing, so testing in asynchronous systems is

3
00:00:08.813 --> 00:00:13.849
很棘手，因为大多数测试框架都带有这样的东西。
tricky because most test frameworks come with stuff like this right.

4
00:00:13.849 --> 00:00:18.519
你得到了一些断言，你得到了一个描述性的信息和一些东西
You've got some assertion and you've got a descriptive message and something

5
00:00:18.519 --> 00:00:23.239
你将在实际值中得到一个期望值，如果它们匹配，那么它就是好的。
you'll have an expected value in an actual value and if they match, then it's good.

6
00:00:23.239 --> 00:00:25.030
如果它们不匹配，那就不好了。
And if they don't match, it's bad.

7
00:00:25.030 --> 00:00:27.750
只是这在异步系统中不起作用，对吧？
Except this doesn't work in asynchronous systems, right?

8
00:00:27.750 --> 00:00:31.870
因为你不能等待实际值。
Because you can't wait for the actual value.

9
00:00:31.870 --> 00:00:36.670
实际的价值可能不会发生，直到许多变成未来和
The actual value might not happen until many turns into the future and

10
00:00:36.670 --> 00:00:37.859
这根本行不通。
this just doesn't work.

11
00:00:39.380 --> 00:00:42.579
更重要的是，我对我们做测试的方式有一个普遍的问题。
More than that though, I have a problem with the way we do testing in general.

12
00:00:42.579 --> 00:00:45.329
在这一点上，我们试图猜测
In that, we're trying to guess what

13
00:00:45.329 --> 00:00:48.560
期望值是将识别bug的值。
the expected value is which is going to identify the bug.

14
00:00:49.789 --> 00:00:53.270
但我们的大多数错误都发生在事物的相互作用中。
But most of our errors happen in the interactions of things.

15
00:00:54.320 --> 00:00:57.640
找出一堆东西会在哪里汇聚在一起
And finding where a bunch of things are going to come together and

16
00:00:57.640 --> 00:01:00.149
在发生故障的一点进行交互。
interact at the one point that fails.

17
00:01:00.149 --> 00:01:03.170
要找到那一点几乎是不可能的。
It's virtually impossible to find that one point.

18
00:01:03.170 --> 00:01:08.590
所以你真正想要的是有一个网格，一个拖网，在那里你会有很多
So what you really want is to have a grid, a dragnet where you're gonna have a much

19
00:01:08.590 --> 00:01:13.750
在可能性空间上随机分布的更大的空间阵列。
larger array of spaces that's distributed randomly over the possibility space.

20
00:01:13.750 --> 00:01:17.489
你把它们都挑出来，希望你能
And you pick them all out and hopefully then you'll

21
00:01:17.489 --> 00:01:20.099
提高发现错误的可能性。
improve the likelihood that you're gonna find the error.

22
00:01:20.099 --> 00:01:22.189
只是你不想这么做，对吧？
Except you don't wanna do that, right?

23
00:01:22.189 --> 00:01:26.909
你想要写一千倍的测试用例，
You wanna have to write a thousand times more test cases,

24
00:01:26.909 --> 00:01:29.980
其中大多数无论如何都不太可能成功找到任何东西。
most of which are unlikely to succeed in finding anything anyway.

25
00:01:29.980 --> 00:01:33.310
这是一个巨大的努力，没有人会想这样做。
That's a huge amount of effort, no one's gonna wanna do that.

26
00:01:33.310 --> 00:01:35.370
再加上如果模型有变化，
Plus if there's a model change,

27
00:01:35.370 --> 00:01:40.670
这意味着你现在必须更新数以千计的测试，没有人会这么做。
it means you now have to update thousands more tests and nobody is gonna do that.

28
00:01:40.670 --> 00:01:45.430
当我看到约翰·休斯的演讲时，我对此感到有点绝望
And it was kind of despairing about that, when I saw a talk by John Hughes of

29
00:01:45.430 --> 00:01:50.159
查尔默斯大学关于一个叫QuickCheck的东西，我认为它很聪明。
Chalmers University about something called QuickCheck which I thought was brilliant.

30
00:01:50.159 --> 00:01:56.680
为了给您提供相关的上下文，QuickCheck是在Haskell中开发的。
So to give you the context about that, QuickCheck was developed in Haskell.

31
00:01:56.680 --> 00:02:01.799
Haskell是爱丁堡大学开发的一种语言
Haskell is a language that was developed at the University of Edinburgh and

32
00:02:01.799 --> 00:02:04.310
它是一种纯函数式编程语言。
it is a pure functional programming language.

33
00:02:04.310 --> 00:02:10.180
他们所说的纯粹是因为这是一种没有副作用的语言
That they say pure in that it's a language without side effects and

34
00:02:10.180 --> 00:02:12.259
这有好有坏，但也有好的一面。
that's good and bad but there's good things about it.

35
00:02:13.259 --> 00:02:14.860
关于Haskell的另一件事是
The other thing about Haskell is,

36
00:02:14.860 --> 00:02:18.009
它可能是世界上任何语言中最好的类型系统。
it's got maybe the best type system of any language in the world.

37
00:02:19.300 --> 00:02:23.579
而不是在Java中指定类型
Instead of having something like in Java where you specify the type

38
00:02:23.579 --> 00:02:28.210
对于每一件小事，你几乎没有指定任何东西的类型。
of every little thing, you specify the types of almost nothing.

39
00:02:28.210 --> 00:02:32.300
相反，有一个推理引擎作为编译器的一部分运行，它
And instead there is an inference engine that runs as part of the compiler which

40
00:02:32.300 --> 00:02:38.469
通过查找程序中的所有内容，尝试确定所有内容。
goes through looking up everything in the program trying to determine everything is.

41
00:02:38.469 --> 00:02:41.400
如果你是那些人中的一员，如果你想在没有行动的情况下行动，那么你必须是那些人中的一员
If you're one of those, if you want to act without then you must be one of those and

42
00:02:41.400 --> 00:02:44.199
继续这样做，试图解决整个程序。
so on and keep doing that trying to solve the entire program.

43
00:02:45.210 --> 00:02:49.349
如果它发现了不一致的地方，
And if it gets to a point where it finds an inconsistency,

44
00:02:49.349 --> 00:02:52.560
它可以停止，这里出了问题。
it can stop and something's wrong here.

45
00:02:54.170 --> 00:02:56.710
困难之处在于
And the difficulty with that is that where it

46
00:02:56.710 --> 00:03:02.050
发现它的不一致可能与你实际犯下错误的地方相隔数英里。
finds its inconsistency may be miles away from where you actually made your mistake.

47
00:03:02.050 --> 00:03:06.927
所以要编译一个程序真的很有挑战性，但是
And so getting a program to compile can be really challenging, but

48
00:03:06.927 --> 00:03:12.518
理论是，一旦你让一个程序编译，它就能保证运行。
the theory is that once you get a program to compile it's guaranteed to run.

49
00:03:12.518 --> 00:03:16.574
但这并不是因为它证明了潜在错误的类别是无限的
Except it's not because it turns out the class of potential errors is infinitely

50
00:03:16.574 --> 00:03:20.332
比即使是世界上最好的人也能发现的一类错误更大
bigger than the class of errors that could be found even by the world's best

51
00:03:20.332 --> 00:03:21.675
键入系统。
type system.

52
00:03:21.675 --> 00:03:24.574
所以你仍然需要测试
So you still have to test and

53
00:03:24.574 --> 00:03:28.782
这些人想出了一个非常好的测试方法。
these guys came up with a really nice way of doing tests.

54
00:03:28.782 --> 00:03:33.961
不是编写具体的实际与预期的比较，
Instead of writing specific compare actual versus expected,

55
00:03:33.961 --> 00:03:39.361
相反，您可以编写一个函数，如果系统正常工作，则该函数将为真。
instead you write a function which will be true if the system is working correctly.

56
00:03:40.771 --> 00:03:44.781
因此，他们将这些属性称为系统
So in that they call those properties that the system

57
00:03:44.781 --> 00:03:47.951
将为真，如果这些属性保持不变，则工作正常。
will be true is working correctly if these properties hold.

58
00:03:48.991 --> 00:03:53.990
因此，然后QuickCheck将生成随机数据
And so and then QuickCheck will generate random data and

59
00:03:53.990 --> 00:03:57.689
把它们扔到你的函数上，试着反驳你的断言。
throw them at your functions and try to disprove your assertion.

60
00:03:59.189 --> 00:04:02.240
因此他们可以在那里获得巨大的覆盖，甚至能够
And so they can get tremendous coverage there, even able to

61
00:04:02.240 --> 00:04:05.810
调试实时系统，这是非常困难的事情。
debug real time systems which is something that is really, really hard to do.

62
00:04:06.810 --> 00:04:09.800
所以我想，哇，我们应该为JavaScript买一个这样的东西。
So I thought, wow, we should get one of those for JavaScript.

63
00:04:09.800 --> 00:04:13.169
所以我写了一个，叫做JSCheck。
So I wrote one, it's called JSCheck.

64
00:04:13.169 --> 00:04:17.199
JSCheck提供了两个好东西，一个是案例生成。
JSCheck provides two nice things, one is case generation.

65
00:04:17.199 --> 00:04:20.730
所以它会为你生成随机的测试用例
So it'll generate random test cases for you and

66
00:04:20.730 --> 00:04:23.300
它还支持翻转测试。
it also supports testing over turns.

67
00:04:23.300 --> 00:04:27.560
所以你可以用它来测试节点中的东西，你可以用它来测试浏览器中的东西，
So you can use it to test stuff in node, you can use it to test things in browsers,

68
00:04:27.560 --> 00:04:32.220
您可以使用它来测试同步和异步函数。
you can use it to test synchronous and asynchronous functions.

69
00:04:33.939 --> 00:04:38.930
所以这是一个带有一些功能的小型库，
So it's a small library that comes with some functions,

70
00:04:38.930 --> 00:04:40.850
这些是一些有趣的。
these are a few of the interesting ones.

71
00:04:40.850 --> 00:04:43.490
最重要的一个是索赔，我们将在一分钟内更多地讨论这个问题。
The most important one is claim, we'll talk more about that in a minute.

72
00:04:43.490 --> 00:04:47.100
这就是你提出关于系统的要求的地方。
That's where you make a claim about how about the system.

73
00:04:47.100 --> 00:04:50.529
如果它正在工作，工作正常，那么这就是真的。
If it's working through, working correctly then this would be true.

74
00:04:51.720 --> 00:04:55.790
然后您可以告诉您检查您所做的所有声明
You can then tell to check all of the claims that you've made so

75
00:04:55.790 --> 00:04:58.560
远，你也可以给它加一个时间限制。
far and you can also put a time limit on it.

76
00:04:59.590 --> 00:05:04.019
所以它会同时开始所有的测试，他们都必须完成
So it will start all the test simultaneously and they all have to finish

77
00:05:04.019 --> 00:05:08.939
在一定的时间内，如果他们不这样做，那么你可以记录下来。
by a certain amount of time, if they don't then you can record that.

78
00:05:08.939 --> 00:05:14.610
这一点非常重要，因为我们的系统现在的工作方式
And that's really important because, the way our systems work now getting

79
00:05:14.610 --> 00:05:19.509
正确的答案，但花费的时间太长，无法与错误的答案区分开来。
the right answer but taking too long is indistinguishable from the wrong answer.

80
00:05:19.509 --> 00:05:22.300
因此，我们还需要能够测试性能
And so, we need to be able to test performance as well and

81
00:05:22.300 --> 00:05:26.769
这是同步测试框架不做的事情。
that's something that the synchronous testing frameworks don't do.

82
00:05:26.769 --> 00:05:29.769
然后我们可以在事情完成后得到一个回调
Then we can get a callback when the thing is done and

83
00:05:29.769 --> 00:05:32.269
我们会得到所有发生的事情的完整报告。
we'll get a full report about everything that happened.

84
00:05:32.269 --> 00:05:36.720
我们还可以在发生错误时获得每个错误的回调，并且
We can also get a callback on each error as the errors occur and

85
00:05:36.720 --> 00:05:39.689
您可以对该回调进行编程，以将您带到调试器中。
you can program that callback to take you into the debugger.

86
00:05:39.689 --> 00:05:45.800
因此，当您发现bug时，您就处于可以立即修复它的上下文中。
So as you're finding bugs, you're in the context where you can fix it immediately.

87
00:05:47.920 --> 00:05:52.779
这就是声明函数，它接受一个描述性的名称，它接受一个谓词
So this is the claim function, it takes a descriptive name, it takes a predicate

88
00:05:52.779 --> 00:05:57.230
功能为布尔值，如果您的系统工作正常，则该值为真。
function as a Boolean which will be true if your system is working correctly.

89
00:05:57.230 --> 00:06:01.120
它需要一个签名，它是一个数组
And it takes a signature which is an array

90
00:06:01.120 --> 00:06:06.060
类型描述符的类型，用于描述谓词函数的参数。
of type descriptors which describes the parameters to the predicate function.

91
00:06:07.399 --> 00:06:10.879
这里有一个例子，我们将比较旧代码和新代码。
So here's an example, we're going to compare the old code with the new code.

92
00:06:10.879 --> 00:06:15.899
我们的谓词将采用一个verdict函数和一个参数，并且
Our predicate will take a verdict function and an argument and

93
00:06:15.899 --> 00:06:20.379
然后我们将确定
we will then determine that the old code for

94
00:06:20.379 --> 00:06:22.500
该参数的作用与新代码相同。
that argument does the same thing as the new code.

95
00:06:23.680 --> 00:06:27.100
我们告诉它参数是一个整数。
And we tell it that that argument is an integer.

96
00:06:27.100 --> 00:06:30.930
所以当我们让这东西检查的时候。
So when we tell this thing to check.

97
00:06:30.930 --> 00:06:36.300
它将生成随机整数并将它们抛向该函数，
It will generate random integers and throw them at that function,

98
00:06:36.300 --> 00:06:41.420
试图反驳我们的断言，你可以设置你想要的数量。
trying to disprove our assertion and you can set as many as you want.

99
00:06:41.420 --> 00:06:45.829
所以使用系统的所有努力都是通过编写这些谓词和
So all of the effort in using the system is in writing these predicates and

100
00:06:45.829 --> 00:06:47.244
有很多方法可以做到。
there are lots of ways you could do it.

101
00:06:47.244 --> 00:06:52.000
一个是，在这种情况下，我们将旧代码与新代码进行比较。
One is, in this case we're comparing the old code against the new code.

102
00:06:52.000 --> 00:06:55.399
所以当我们迁移系统时，
So as we're migrating the system,

103
00:06:55.399 --> 00:06:58.509
我们可以确保我们没有改变任何东西的行为。
we can make sure that we haven't changed the behavior of anything.

104
00:06:58.509 --> 00:07:02.279
另一种可以做到这一点的方法是，如果你有对称的操作，例如，
Another way you could do it is if you have symmetrical operations, for example,

105
00:07:02.279 --> 00:07:04.819
如果你在写编码器和解码器。
if you're writing an encoder and a decoder.

106
00:07:04.819 --> 00:07:08.310
通常情况下，编码的解码应该等于原始
It's usually the case that the decode of the encode should be equal the original

107
00:07:08.310 --> 00:07:14.470
事情，所以我们可以测试，对于一大类试验来说，这实际上是真的。
things, so we can test that that's actually true for a large class of trials.

108
00:07:14.470 --> 00:07:20.360
我们可以生成对称的事物对，就像我们可以生成信用和
We can generate symmetric pairs of things like we can generate a credit and

109
00:07:20.360 --> 00:07:24.569
借方，你知道两者都使用随机值来确保一切平衡。
a debit, you know both using random values make sure everything balances.

110
00:07:24.569 --> 00:07:28.920
在某些情况下，您可能只是在某件事情上抛出了很多随机事务。
And in some cases you just might throw a lot of random transactions at something.

111
00:07:28.920 --> 00:07:32.220
在每一次之后，对所有的数据结构进行深度诊断，
And after each one, run a deep diagnostic of all your data structures,

112
00:07:32.220 --> 00:07:35.350
确保一切仍然一致。&gt；&gt；扬声器2：SO
make sure everything is still consistent. &gt;&gt; Speaker 2: So

113
00:07:35.350 --> 00:07:39.319
这看起来像是实现了什么？
what would this look like implemented?

114
00:07:39.319 --> 00:07:42.860
我不明白什么是判决。&gt；&gt；Douglas：我们来看看
I don't understand what verdict is. &gt;&gt; Douglas: We'll look at

115
00:07:42.860 --> 00:07:43.590
一分钟内垂直。
the vertical in a minute.

116
00:07:44.699 --> 00:07:47.937
因此，verdict是正在使用的回调
So verdict is the callback that is being used in

117
00:07:47.937 --> 00:07:49.230
箱子。&gt；&gt；扬声器2：好的。
the cases. &gt;&gt; Speaker 2: Okay.

118
00:07:50.350 --> 00:07:51.230
&gt；&gt；道格拉斯：是这样
&gt;&gt; Douglas: So it

119
00:07:51.230 --> 00:07:54.180
附带了一个小型说明符的库。
comes with a small library of specifiers.

120
00:07:54.180 --> 00:07:58.230
您可以将其中的每一个放在描述符数组中，描述符数组中包含我们想要的类型
You can put each of these in the descriptor array of what types we want to

121
00:07:58.230 --> 00:08:02.449
抛给我们的谓词和
throw to our predicate and

122
00:08:02.449 --> 00:08:06.968
它会尝试，它会生成这些类型的每个值的随机值。
it'll try, it'll generate values random values of each of these types.

123
00:08:08.060 --> 00:08:11.829
所以，如果你需要布尔值，如果你需要整数，数字，对象，任何东西。
So if you need Booleans, if you need integers, numbers, objects, whatever.

124
00:08:11.829 --> 00:08:13.779
它会制造随机的东西然后分发出去。
It'll make random things and pass them out.

125
00:08:15.290 --> 00:08:20.000
如果它变了，这些也可以用有趣的方式堆肥。
If it turns, and these are also compostable in interesting ways.

126
00:08:20.000 --> 00:08:24.589
例如，如果您想要随机的社会保险号码。
For example, if you want random social security numbers.

127
00:08:24.589 --> 00:08:28.670
我可以说我想用三位数来加强，然后是破折号和
I can say I want to strengthen with three digits and then a dash and

128
00:08:28.670 --> 00:08:31.399
一个破折号中的两个数字，以此类推。
two digits in a dash and so on.

129
00:08:31.399 --> 00:08:35.370
或者如果我需要一个包含三个元素的数组，其中第一个
Or if I need an array containing three elements where the first

130
00:08:35.370 --> 00:08:38.490
元素是一个整数，第二个元素是一个介于0和100之间的数字，并且
element is an integer and the second is a number between zero and 100 and

131
00:08:38.490 --> 00:08:44.289
第三个是我可以得到的字符串。
the third is a character string I can get that.

132
00:08:44.289 --> 00:08:48.970
或者我需要一个对象，其中具有left属性的top属性和
Or I need an object where with the left property a top property and

133
00:08:48.970 --> 00:08:50.409
从列表中选择的颜色。
a color selected from a list.

134
00:08:52.570 --> 00:08:57.779
或者我需要一个具有可变数量属性的对象，其中每个属性都是
Or I need an object with a variable number of properties where each property is

135
00:08:57.779 --> 00:09:03.909
一个四个字母的名称，每个值都是一个布尔值，我可以做到这一点。
a four letter name and each value is a Boolean, I can do that.

136
00:09:03.909 --> 00:09:05.929
有很多方法来组成这些和
There are lots of ways to compose these and

137
00:09:05.929 --> 00:09:08.919
如果结果是有一些您需要的特定测试数据，则不是
if it turns out there is some particular test data that you need that's not

138
00:09:08.919 --> 00:09:13.080
很容易从这些组成，你可以写你自己的。
easily composed from these, you can write your own.

139
00:09:13.080 --> 00:09:16.190
它是一个发电机，和你一直在写的发电机一模一样。
And it's a generator, exactly like the generators you've been writing.

140
00:09:16.190 --> 00:09:19.230
因此，您有一个函数，它返回一个函数，当您每次调用它时，
So you have a function that returns a function that when, each time you call it,

141
00:09:19.230 --> 00:09:20.929
你会得到下一个值。
you'll get the next value.

142
00:09:20.929 --> 00:09:28.139
您可以编写其中一个来生成所需的所有随机测试数据。
You can write one of those to generate all the random test data that you need.

143
00:09:28.139 --> 00:09:31.899
异步工作的原因是由于verdict函数。
The reason this works asynchronously is because of the verdict function.

144
00:09:33.440 --> 00:09:38.639
每次检查开始时，都会传递一个用于
Every check when it begins, is passed a verdict function that it is used to

145
00:09:38.639 --> 00:09:43.519
返回其结果，判决只是一个延续。
return its result and the verdict is just a continuation.

146
00:09:43.519 --> 00:09:47.970
这只是一个回叫，允许试验延长许多回合。
It's just a call back which allows the trials to be extended over many turns.

147
00:09:47.970 --> 00:09:49.899
因为我们也可以对此设定时间限制，
And because we can also put time limits on this,

148
00:09:49.899 --> 00:09:52.419
现在每个试验都有三种可能的结果。
we now have three possible outcomes for every trial.

149
00:09:53.559 --> 00:09:57.100
我们可以看到通行证，我们可以看到失败者，或者我们可以看到失败者。
We can see a pass, we can see a fail or we can see a lost.

150
00:09:57.100 --> 00:10:01.450
丢失意味着我们在时间到期之前没有收到报告。
Lost means we did not get a report before the time expired.

151
00:10:01.450 --> 00:10:04.629
而这些有时也同样重要，就像通过和失败一样。
And those are sometimes as important, as the passes and fails.
