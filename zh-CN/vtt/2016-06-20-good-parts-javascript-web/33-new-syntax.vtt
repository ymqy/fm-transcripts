WEBVTT

1
00:00:00.000 --> 00:00:03.710
[音乐]
[MUSIC]

2
00:00:03.710 --> 00:00:06.759
&gt；&gt；Douglas Crockford：所以说我们忍不住添加了一些新的语法。
&gt;&gt; Douglas Crockford: So saying that we couldn't resist adding some new syntax.

3
00:00:08.810 --> 00:00:10.878
我们做的不是太多
We did it not too much and

4
00:00:10.878 --> 00:00:16.882
我会警告你，在IE 9之前的浏览器中，所有这些都是致命的错误，
I'll warn you all of these are fatal errors in browsers before IE 9,

5
00:00:16.882 --> 00:00:21.870
所以，如果你还在使用IE8，请忽略以下内容。
so if you're still on IE 8 please ignore the following.

6
00:00:21.870 --> 00:00:25.478
因此我们在Object文字中添加了尾随逗号，
So we added trailing commas to object literals,

7
00:00:25.478 --> 00:00:30.149
这是没有用的，我不建议你使用它。
which is not useful, I don't recommend you use it.

8
00:00:30.149 --> 00:00:34.164
我们这样做的原因是因为我们修复了尾随逗号的工作方式
The reason we did that was because we fixed the way trailing commas worked in

9
00:00:34.164 --> 00:00:35.128
数组文字。
array literals.

10
00:00:35.128 --> 00:00:39.133
原来数组总是允许悬挂的逗号，但是
It turns out arrays always allowed that dangling comma but

11
00:00:39.133 --> 00:00:41.454
他们对它的意思有不同意见。
they disagreed on what it meant.

12
00:00:41.454 --> 00:00:45.140
在某些浏览器上，该数组的长度为2。
On some browsers that array would have a length of two.

13
00:00:45.140 --> 00:00:48.381
在IE浏览器上，它的长度为3。
On IE browsers it had a length of three.

14
00:00:48.381 --> 00:00:53.006
当你有这种差异时，可能会发生错误，所以我们将其更改为
When you have that kind of disparity bugs can happen so we changed it so

15
00:00:53.006 --> 00:00:56.116
该规则现在将忽略悬挂的逗号，因此
the rule is now the dangling comma is ignored so

16
00:00:56.116 --> 00:00:59.420
每个人都会同意它有两个长度。
everybody will agree that it has a length of two.

17
00:01:00.630 --> 00:01:02.939
我们修复了一个可怕的保留字策略。
We fixed a terrible reserved word policy.

18
00:01:02.939 --> 00:01:07.459
JavaScript最初的保留字策略说
JavaScript's original reserved word policy said that

19
00:01:07.459 --> 00:01:12.069
在名称位置、对象文字或对象中不能有保留字
you could not have a reserved word in name position, in an object literal or

20
00:01:12.069 --> 00:01:15.980
在点位置，没有理由这样做。
in dot position and there's is no reason for that.

21
00:01:18.230 --> 00:01:19.078
我们修好了。
We fixed that.

22
00:01:19.078 --> 00:01:23.289
所以现在所有黄色的东西都是错误的，现在一切都好了。
So everything that's yellow now used to be an error, that's all now okay.

23
00:01:25.849 --> 00:01:26.400
所以这很好。
So that's good.

24
00:01:27.609 --> 00:01:32.680
事实上，JSON需要将其引号引起来的原因是
In fact the reason that JSON requires quotes around its

25
00:01:32.680 --> 00:01:36.247
名称是因为ES3中的这个设计问题。
names was because of this design problem in ES3.

26
00:01:38.909 --> 00:01:40.352
我们添加了getter和setter。
We added getters and setters.

27
00:01:40.352 --> 00:01:45.234
这些是访问器属性，因此当您去检索值时
These are accessor properties, so that when you go to retrieve a value

28
00:01:45.234 --> 00:01:50.115
从对象或转到将值存储到对象中，而不是函数中
from an object or go to store a value into an object, instead a function

29
00:01:50.115 --> 00:01:55.930
将被调用，它将使用您的值或返回值。
will be called which will either consume your value or return a value.

30
00:01:55.930 --> 00:01:58.750
这就允许了一些新的编程形式。
And that allows some new forms of programming.

31
00:01:58.750 --> 00:02:03.012
这里我们得到了一个具有摄氏度属性的温度构造函数
So here we've got a temperature constructor which has a celsius property

32
00:02:03.012 --> 00:02:05.230
还有一处华氏房产。
and a fahrenheit property.

33
00:02:05.230 --> 00:02:08.490
您可以读取其中任何一个，也可以设置其中任何一个。
You can read either one and you can set either one.

34
00:02:10.000 --> 00:02:12.530
你不知道它是如何工作的，但它只是工作。
You don't know how it works but it just works.

35
00:02:12.530 --> 00:02:13.569
这是一件非常漂亮的事情。
That's a pretty nifty thing.

36
00:02:14.569 --> 00:02:19.289
现在看来，你可以用这个做一些非常愚蠢的事情，因为
Now turns out you can do some really stupid stuff with this because

37
00:02:20.590 --> 00:02:24.420
如果你正确使用这些方法，那么这些方法将是非常有限的，
if you use this correctly, then these methods will be very limited,

38
00:02:24.420 --> 00:02:28.300
在他们做的事情上非常有限，但对他们没有实际的限制。
very restricted in what they do, but there is no actual restriction on them.

39
00:02:28.300 --> 00:02:29.139
他们什么都能做。
They can do anything.

40
00:02:29.139 --> 00:02:34.680
他们可以改变世界上的一切，所以你可以
They can change everything in the world and so you can

41
00:02:34.680 --> 00:02:39.340
只需读取对象的属性，就可以使事情在那里发生。
simply by reading a property of an object you can cause things to happen over there.

42
00:02:39.340 --> 00:02:41.509
我不建议你这么做，因为这很愚蠢。
I don't recommend you do that because it's stupid.

43
00:02:43.349 --> 00:02:45.250
我肯定有人会这么做，他们会，
I'm sure somebody is gonna do that and they're gonna,

44
00:02:45.250 --> 00:02:49.360
我敢打赌，没有人认为你可以做到这一点，并且会去做到这一点。
I bet nobody thought that you could do that, and will go and do that.

45
00:02:49.360 --> 00:02:52.420
我们确实考虑过这一点，只是希望没有人这样做。
We actually did think about that, just hoping nobody does that.

46
00:02:54.150 --> 00:02:56.689
前面，我们讨论了多行字符串文字，
Earlier, we talked about the multiline string literals,

47
00:02:56.689 --> 00:02:58.125
我仍然认为这是个错误。
I still think this was a mistake.

48
00:03:00.257 --> 00:03:01.284
&gt；&gt；Douglas Crockford：这太棒了。
&gt;&gt; Douglas Crockford: This is great.

49
00:03:01.284 --> 00:03:05.888
所以它过去是无穷大的，NaN和undefined都不是常量，
So it used to be infinity, NaN and undefined were not constants,

50
00:03:05.888 --> 00:03:10.502
它们是全局变量，这意味着您可以更改它们。
they were global variables, which meant you could change them.

51
00:03:10.502 --> 00:03:13.574
你可以说今天无穷大是五，让我们看看会发生什么。
You could say today infinity is five, let's see what happens.

52
00:03:13.574 --> 00:03:18.395
&gt；&gt；[笑]&gt；&gt；Douglas Crockford：我知道这种安全性
&gt;&gt; [LAUGH] &gt;&gt; Douglas Crockford: I know that security

53
00:03:18.395 --> 00:03:22.111
专家们非常担心有人重新定义未定义，并且
experts were very worried about someone redefining undefined, and

54
00:03:22.111 --> 00:03:24.300
那会有什么后果。
what the consequences of that could be.

55
00:03:24.300 --> 00:03:27.469
我不知道因此而发生的任何利用行为，但是
I'm not aware of any exploits that actually happened as a result of that, but

56
00:03:27.469 --> 00:03:29.860
这是一件令人担忧的事情。
it is something that was worried about.

57
00:03:29.860 --> 00:03:32.143
因此它们现在是只读变量。
So they are now read only variables.

58
00:03:32.143 --> 00:03:35.711
所以[声音]现在是固定的。
So [SOUND] now that's fixed.

59
00:03:35.711 --> 00:03:36.973
我们修复了parseInt
We fixed parseInt so

60
00:03:36.973 --> 00:03:41.849
当第一个字符为零时，它不再默认为八进制。
that it no longer defaults to octal when the first character is zero.

61
00:03:41.849 --> 00:03:44.900
无论如何，我还是建议加入基数论证，但是
I still recommend putting in the radix argument anyway but

62
00:03:44.900 --> 00:03:48.805
至少默认行为没有以前那么糟糕。
at least the least the default behavior is not nearly as bad as it had been.

63
00:03:50.625 --> 00:03:54.545
正则表达式文字现在将生成一个新的正则表达式
Regular expression literals now will produce a new regular expression

64
00:03:54.545 --> 00:03:58.875
对象，因此它们的工作方式与函数相同。
object every time they're evaluated, so they work the same way that functions do.

65
00:03:58.875 --> 00:04:02.875
我们这样做的原因是，最初编译器只会创建
The reason we did that, originally the compiler would only create

66
00:04:02.875 --> 00:04:06.050
每个正则表达式文字对应一个正则表达式对象。
one regular expression object for each regular expression literal.

67
00:04:06.050 --> 00:04:09.289
问题是，它们包含国家。
And the problem with that is, that they contain state.

68
00:04:09.289 --> 00:04:12.310
例如，它们包含最后一个，
For example they contain a last,

69
00:04:14.300 --> 00:04:17.790
最后一个位置或最后一个位置，有人记得吗？
what was it last position or last, anybody remember?

70
00:04:17.790 --> 00:04:21.839
EXEC用来记住最后一场比赛发生在哪里的东西。
The thing that exec uses to remember where the last match happened.

71
00:04:21.839 --> 00:04:22.850
没人知道？
No one knows?

72
00:04:22.850 --> 00:04:28.680
无论如何，这里有一个变量，如果每个人都分享它，
Anyway, there's this variable that's in there which if everybody is sharing it,

73
00:04:28.680 --> 00:04:31.879
那么你不能让多个高管发生，因为他们会干扰
then you can't have multiple execs happening because they'll interfere with

74
00:04:31.879 --> 00:04:33.090
所以我们解决了这个问题。
each other so we fixed that.

75
00:04:35.826 --> 00:04:41.505
这太糟糕了，所以我之前告诉过您对象函数。
This was awful, so I told you earlier about the object function.

76
00:04:41.505 --> 00:04:43.319
每次创建对象时都会调用它，
It gets called every time you make an object,

77
00:04:43.319 --> 00:04:45.918
每次创建数组时都会调用数组函数。
and the array function gets called every time you make an array.

78
00:04:47.610 --> 00:04:51.122
结果是你可以用你的函数替换这些函数，所以
It turns out you could replace those functions with your function so

79
00:04:51.122 --> 00:04:54.338
每次有人创建对象或数组时都会调用您。
you get called every time someone makes an object or an array.

80
00:04:54.338 --> 00:04:57.862
这是一个巨大的安全违规，对吧？
And that's a huge security violation, right?

81
00:04:57.862 --> 00:05:01.951
您不希望某些代码能够接管这些东西，所以
You don't want some code to be able to take those things over, so

82
00:05:01.951 --> 00:05:06.800
规范现在会说好像是通过原始的目标函数或数组
the specification will now say as if by the original object function or array

83
00:05:06.800 --> 00:05:11.990
函数，您仍然可以替换它们，但不会遇到安全风险。
function that you can still replace them but you don't get the security hazard.

84
00:05:13.189 --> 00:05:17.009
我很高兴地报告，JSON是世界上最受欢迎的数据交换格式，
I'm happy to report that JSON, the world's best loved data interchange format,

85
00:05:17.009 --> 00:05:19.398
现在已内置到语言中。
is now built into the language.

86
00:05:19.398 --> 00:05:24.550
因此，我们得到了一个JSON对象，它提供了一个parse函数和一个stringify函数。
So we've got a JSON object that provides a parse function and a stringify function.

87
00:05:24.550 --> 00:05:27.276
那些名字都是我的错，完全是我的错。
Those names are my fault, completely my fault.

88
00:05:27.276 --> 00:05:31.687
我可能应该说编码或解码，或者类似的东西，但是
I probably should have said encode or decode, or something like that, but

89
00:05:31.687 --> 00:05:32.393
我没有。
I didn't.

90
00:05:32.393 --> 00:05:36.223
所以我们被困在那里了，所以，不客气。
So we're stuck with those, so, you're welcome.

91
00:05:36.223 --> 00:05:38.927
&gt；&gt；[笑]&gt；&gt；Douglas Crockford：如果你正在使用
&gt;&gt; [LAUGH] &gt;&gt; Douglas Crockford: If you're using

92
00:05:38.927 --> 00:05:43.540
json2.js那么它的工作方式完全相同，
json2.js then it works exactly the same,

93
00:05:43.540 --> 00:05:48.819
除了json2.js知道如果有内置的话应该让路，
except json2.js knows to get out of the way if built in one is there,

94
00:05:48.819 --> 00:05:51.579
所以它会变得更快，这就是你想要的。
so it'll just get faster which is what you want.
