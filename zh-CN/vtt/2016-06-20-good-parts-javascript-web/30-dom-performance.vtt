WEBVTT

1
00:00:00.000 --> 00:00:03.645
[音乐]
[MUSIC]

2
00:00:03.645 --> 00:00:07.009
&gt；&gt；Douglas Crockford：所以在使用DOM时，性能是一个巨大的问题。
&gt;&gt; Douglas Crockford: So performance is a huge problem in working with the DOM.

3
00:00:08.470 --> 00:00:12.570
每次你接触一个节点，你付出了巨大的时间惩罚。
Every time you touch a node, you pay a huge time penalty.

4
00:00:12.570 --> 00:00:14.179
重新设计有很大的成本。
Restyling has a big cost.

5
00:00:14.179 --> 00:00:15.570
回流有很大的成本。
Reflowing has a big cost.

6
00:00:15.570 --> 00:00:17.370
重新粉刷有很大的成本。
Repainting has a big cost.

7
00:00:17.370 --> 00:00:20.129
像节点列表这样的随机事物可能会有巨大的成本。
Random things like node lists can have a huge cost.

8
00:00:20.129 --> 00:00:24.280
节点列表看起来像一个数组，只是每次触摸它时都会重复
A node list looks like an array except every time you touch it it can repeat

9
00:00:24.280 --> 00:00:29.800
导致它出现的查询可能非常昂贵。
the query that caused it to come into existence which can be wildly expensive.

10
00:00:30.929 --> 00:00:35.079
事实证明，在大多数应用程序中，JavaScript的成本非常低。
And it turns out in most applications JavaScript has a very small cost.

11
00:00:35.079 --> 00:00:38.463
所以如果你把所有的时间都花在浏览器上，然后说，这就像
So if you took all the time that's being spent in the browser and say, this much as

12
00:00:38.463 --> 00:00:42.859
解析，这个就像编组，这个就像呈现等等。
parsing, this much as marshalling, this much as rendering and so on.

13
00:00:42.859 --> 00:00:47.009
JavaScript将会非常类似，但我看到人们在追求他们的代码，
JavaScript will be like that much but I see people going after their code,

14
00:00:47.009 --> 00:00:48.530
试着把它缩小得更多，而且
trying to shrink it down more, and more, and

15
00:00:48.530 --> 00:00:52.310
更多的时候，所有这些其他的东西都需要时间。
more when it's all this other stuff that's taking the time.

16
00:00:52.310 --> 00:00:57.189
尝试优化它，如果JavaScript引擎的速度是无限快的话
Trying to optimize that, if JavaScript engines were infinitely fast

17
00:00:57.189 --> 00:00:59.920
大多数Web应用程序的运行速度都差不多。
most web applications would run about the same speed.

18
00:00:59.920 --> 00:01:01.240
没人会注意到有什么不同。
No one would notice any difference.

19
00:01:03.700 --> 00:01:08.010
因此，除非有好的工具，否则无法优化性能。
So you can't optimize for performance unless you have good tools.

20
00:01:08.010 --> 00:01:10.129
不幸的是，我们现在有一些好的工具。
Unfortunately, we now have some good tools.

21
00:01:10.129 --> 00:01:12.090
例如，Chrome上有速度跟踪器。
For example, there's speed tracer on Chrome.

22
00:01:14.409 --> 00:01:18.400
当您的应用程序在浏览器中运行时，它会记录Micro Density。
It records micro dense as your application is running in the browser.

23
00:01:19.420 --> 00:01:22.829
完成后，你可以做尸检分析
And when it's done, you can then do a post-mortem analysis and

24
00:01:22.829 --> 00:01:28.340
它将向您显示代码中的所有热点以及消耗时间的内容。
it will show you all the hotspots in the code and what is consuming time.

25
00:01:28.340 --> 00:01:32.670
有了这些信息，他们就有可能优化应用程序。
And with that information it is possible to them optimize the application.

26
00:01:32.670 --> 00:01:37.349
微软有一个类似的东西叫做性能仪表板，我认为
Microsoft has a similar thing called performance dashboard which I think

27
00:01:37.349 --> 00:01:39.283
开始在IE 11上可用。
starts becoming available on IE 11.

28
00:01:41.069 --> 00:01:46.729
没有良好性能数据的优化是浪费时间。
Optimization without good performance data is a waste of time.

29
00:01:46.729 --> 00:01:50.450
事实证明，少量的JavaScript就可以转换DOM
It turns out that a small amount of JavaScript can transform the DOM

30
00:01:50.450 --> 00:01:53.909
只是世界上最糟糕的API之一，变成了令人愉快和富有成效的东西。
just one of the world's awfullest APIs into something pleasant and productive.

31
00:01:55.079 --> 00:01:59.349
所以Ajax库既有趣又容易制作，这就是为什么会有这么多这样的库。
So Ajax libraries are fun and easy to make which is why there are so many of them.

32
00:01:59.349 --> 00:02:01.019
任何应用程序都应该使用一个。
Any apps should be using one.

33
00:02:02.909 --> 00:02:09.090
它们提供了可移植性，因为浏览器是如何实现的，非常不一致。
They provide portability because the browser is how, are hugely inconsistent.

34
00:02:09.090 --> 00:02:14.169
因此您需要一个库来处理这些不一致的问题
And so you need a library that will deal with those inconsistencies for

35
00:02:14.169 --> 00:02:18.139
你这样你就可以和一个更好的模特一起工作了。
you so you can be working with a much better model.

36
00:02:18.139 --> 00:02:22.500
它们提供了对DOM的def规范中的错误的纠正。
They provide correction of errors that are in the def specification of the DOM.

37
00:02:22.500 --> 00:02:25.629
它们提供了更高的编程模型，
They provide a much higher programming model,

38
00:02:25.629 --> 00:02:27.090
一些可以让你更有效率的事情。
something where you can be much more productive.

39
00:02:27.090 --> 00:02:31.740
而且它们还提供了一组小部件，可以简化您的开发工作。
And they also provide sets of widgets, which can simplify your development work.

40
00:02:33.620 --> 00:02:34.810
那你怎么选择？
So how do you choose?

41
00:02:34.810 --> 00:02:36.490
外面有这么多图书馆。
There are so many libraries out there.

42
00:02:36.490 --> 00:02:39.873
对所有现有库进行完整评估需要更长的时间
It would take longer to do a complete evaluation of all the existing libraries

43
00:02:39.873 --> 00:02:42.030
而不是从头开始建立一个新的。
than to build a new one from scratch.

44
00:02:42.030 --> 00:02:44.789
我不建议任何人从头开始构建一个新的。
I don't recommend that anybody build a new one from scratch.

45
00:02:45.840 --> 00:02:49.900
所以几年前，阿贾克斯人建议投掷飞镖
So some years ago the Ajaxians suggested throw a dart

46
00:02:49.900 --> 00:02:54.449
因为随便挑一个，他们都很棒，而且都好得多
cuz just picking one at random they're all pretty good and they're all much better

47
00:02:54.449 --> 00:02:58.569
而不是直接和DOM交谈，这样你就不会输了，随便挑一个就行了。
than talking to the DOM directly so you can't lose, just pick one at random.

48
00:02:59.650 --> 00:03:03.189
问题是每一个都是陷阱
The problem with that is that each one is a trap,

49
00:03:04.189 --> 00:03:06.840
它们都是彼此极不相容的。
that they are all extremely incompatible with each other.

50
00:03:06.840 --> 00:03:10.909
事实上，从一个版本到另一个版本，有些版本与自己不兼容。
In fact some are incompatible with themselves from one version to another.

51
00:03:10.909 --> 00:03:14.870
某物的第一点可能与第二点完全不相容
That point one of something might be completely incompatible with point two of

52
00:03:14.870 --> 00:03:19.139
某件事，一旦你陷入其中一件事，你就被卡住了。
something, and once you get into one of these things you are stuck.

53
00:03:19.139 --> 00:03:22.689
它是由焦油制成的，你写的一切都将依赖于这个东西
It's made of tar and everything you write is gonna be dependent on this thing and

54
00:03:22.689 --> 00:03:27.590
从它中解脱出来，去做其他的事情是极其昂贵和痛苦的。
getting loose from it and onto something else is extremely expensive and painful.

55
00:03:27.590 --> 00:03:29.270
那么你是如何决定做什么的呢？
So how do you decide what to do?

56
00:03:30.750 --> 00:03:35.099
几年前我就预测过，市场不能容忍有这样的人
Some years ago I predicted that the market could not tolerate having so

57
00:03:35.099 --> 00:03:38.170
这周围的许多图书馆都将不得不进行一次洗牌。
many of these libraries around that there is gonna have to be a shakeout.

58
00:03:39.810 --> 00:03:45.920
我预测他们都会消失，也许会有两个赢家。
And I predicted that they'd would all disappear the be maybe two winners.

59
00:03:45.920 --> 00:03:47.689
其中一个可能是微软，
One of them was probably gonna be Microsoft,

60
00:03:47.689 --> 00:03:50.750
因为赢家之一总是微软。
because one of the winners is always Microsoft.

61
00:03:50.750 --> 00:03:55.360
一个是其他东西，PlayWire、Dojo或jQuery或其他东西。
And one would be something else, PlayWire, Dojo or jQuery or something.

62
00:03:55.360 --> 00:03:57.479
结果证明这是完全错误的。
That turned out to be completely wrong.

63
00:03:57.479 --> 00:04:00.930
从那时起，图书馆的数量只增加了。
The number of libraries has only increased since then.

64
00:04:00.930 --> 00:04:03.469
第一个失败的图书馆
And the first library to fail and

65
00:04:03.469 --> 00:04:08.009
完全退出市场的是微软的Atlas
completely leave a market was Microsoft's Atlas which was so

66
00:04:08.009 --> 00:04:11.750
糟糕的是，即使他们不能使用它，他们切换到jQuery。
bad even they couldn't use it and they switched to jQuery.

67
00:04:11.750 --> 00:04:13.939
那你怎么决定？
So how do you decide?

68
00:04:13.939 --> 00:04:16.949
这是一个非常困难的问题，我没有解决方案。
And it's a really hard problem and I do not have a solution.

69
00:04:16.949 --> 00:04:20.480
我们发现越来越多的图书馆一直在线，
And we find more libraries coming online all the time,

70
00:04:20.480 --> 00:04:23.110
更多的平台，更多的做事方式。
more platforms, more ways of doing stuff.

71
00:04:24.689 --> 00:04:28.009
我觉得我跟不上这些东西。
And I thought I can't keep up with the stuff.

72
00:04:28.009 --> 00:04:29.339
那你怎么选择？
So how do you choose?

73
00:04:30.550 --> 00:04:33.939
我没有什么好的建议，除了这个它是值得的。
I have no good advice except this for what it's worth.

74
00:04:33.939 --> 00:04:38.709
询问JSLint，选择您正在考虑通过JSLint运行的任何候选人。
Ask JSLint, take any candidates that you're considering run through JSLint.

75
00:04:38.709 --> 00:04:40.798
这是代码质量的客观度量。
That's an objective measure of code quality.

76
00:04:40.798 --> 00:04:44.610
它会给你同样的指示写的东西有多好。
It will give you same indication how well the things written.

77
00:04:44.610 --> 00:04:45.860
也许这对你有意义。
Maybe that's meaningful to you.
