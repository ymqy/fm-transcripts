WEBVTT

1
00:00:00.000 --> 00:00:03.697
[音乐]
[MUSIC]

2
00:00:03.697 --> 00:00:05.016
&gt；&gt；Douglas：这就给我们带来了JavaScript，
&gt;&gt; Douglas: That brings us to JavaScript,

3
00:00:05.016 --> 00:00:08.150
世界上最容易被误解的编程语言。
the world's most misunderstood programming language.

4
00:00:08.150 --> 00:00:12.990
JavaScript拥有任何编程语言中最好的部分。
JavaScript has some of the best parts ever put into any programming language.

5
00:00:12.990 --> 00:00:16.089
令人惊讶的是，这门语言的好的部分是多么的好，而且
That's extraordinary how good the good parts of this language are, and

6
00:00:16.089 --> 00:00:18.960
我们将花费大量的时间来探索这一点。
we're going to spend a lot of time exploring that.

7
00:00:18.960 --> 00:00:24.079
众所周知，JavaScript比任何其他编程语言都有更多不好的部分。
JavaScript also famously has more bad parts than any other programming language.

8
00:00:24.079 --> 00:00:28.170
在接下来的一个小时里，我们将讨论为什么会发生这种情况，但它确实发生了，
And in the next hour, we'll talk about why that happened, but it does,

9
00:00:28.170 --> 00:00:32.520
现在看来，每种编程语言都有好的部分和不好的部分。
now it turns out every programming language has good parts and bad parts.

10
00:00:32.520 --> 00:00:36.570
但很少有语言像JavaScript或
But very few languages have as much goodness as JavaScript or

11
00:00:36.570 --> 00:00:38.240
和JavaScript一样糟糕。
as much badness as JavaScript.

12
00:00:38.240 --> 00:00:44.149
JavaScript拥有从崇高到完全荒谬的一切。
JavaScript has everything from the sublime to the completely ridiculous.

13
00:00:45.600 --> 00:00:48.570
我将要做的分析，你可以在上面做
And the analysis I'm about to do, you could do on and

14
00:00:48.570 --> 00:00:50.740
在每一种语言上都应该这样做。
should do on every language.

15
00:00:50.740 --> 00:00:52.719
但在JavaScript中尤其具有说服力。
But it's especially telling with JavaScript.

16
00:00:54.060 --> 00:00:58.661
所以因为JavaScript中有很多不好的部分，
So because JavaScript has so many bad parts in it,

17
00:00:58.661 --> 00:01:01.737
我写了一个叫JSLint的程序。
I wrote a program called JSLint.

18
00:01:01.737 --> 00:01:05.563
它是用JavaScript编写的，它读取JavaScript程序并警告您，
It's written in JavaScript it reads JavaScript programs and it warns you,

19
00:01:05.563 --> 00:01:07.432
你在搅乱坏的部分。
you're messing with the bad parts.

20
00:01:07.432 --> 00:01:11.146
通过清理并坚持好的部分，
And by cleaning that up and sticking to the good parts,

21
00:01:11.146 --> 00:01:15.123
你最终会得到更好的程序。
you end up with programs which are substantially better.

22
00:01:15.123 --> 00:01:21.299
更容易维护，更接近完美，这些都是好东西。
Which are gonna be more maintainable, closer to perfect, that's all good stuff.

23
00:01:21.299 --> 00:01:23.710
而且它是免费的，每个人都应该使用它。
And it's free and everybody should be using it.

24
00:01:23.710 --> 00:01:26.289
您的所有代码都应该无异常地通过JSLint，
All of your code should pass JSLint without exceptions,

25
00:01:26.289 --> 00:01:28.000
你真的希望你的代码有那么好。
you really want your code to be that good.

26
00:01:29.039 --> 00:01:33.400
但很多人不想这样做，因为它伴随着这个警告，
But a lot of people don't want to do that because it comes with this warning,

27
00:01:33.400 --> 00:01:35.890
JSLint会伤害你的感情
JSLint will hurt your feelings.

28
00:01:35.890 --> 00:01:41.079
这是真的，我听到人们不停地哭，抱怨，JSLint
And it's true, and I hear from people constantly crying, whining, JSLint

29
00:01:42.329 --> 00:01:48.409
你把它修好，这样它就不会抱怨我了，因为我在那和之后都很棒
you fix it, so it doesn't complain about me because I'm awesome in that and after

30
00:01:48.409 --> 00:01:52.329
几年后一个明星奇迹，嗯，等一下，在编程中没有哭泣。
a few years a star wonder, well, wait a minute, there's no crying in programming.

31
00:01:54.620 --> 00:01:57.883
我们想象自己是世界上最理性的计算机
We imagine ourselves to be the most rational computers in the world or

32
00:01:57.883 --> 00:02:00.201
世界上最理性的人，对吧？
that most rational people in the world, right?

33
00:02:00.201 --> 00:02:04.546
因为我们是电脑的大使，你不能胡说八道，
Because we're the ambassadors to the computer, you can't bullshit computers,

34
00:02:04.546 --> 00:02:08.335
我们想象自己对每件事都是完全合乎逻辑的
we imagine ourselves to be totally completely logical about everything

35
00:02:08.335 --> 00:02:10.210
高于所有普通人。
superior to all ordinary mortals.

36
00:02:11.259 --> 00:02:12.219
但事实证明，
But it turns out,

37
00:02:12.219 --> 00:02:17.030
我们对事情非常情绪化，对于我们如何编写程序。
we get really emotional about things, about how we write our programs.

38
00:02:18.610 --> 00:02:21.149
诸如制表符或空格之类的问题。
Questions like tabs or spaces.

39
00:02:22.469 --> 00:02:26.628
事实证明并没有很多数据支持其中一种，但是
Turns out there's not a lot of data to support one versus the other, but

40
00:02:26.628 --> 00:02:30.438
我们真的很情绪化，或者花括号在左边，或者
we get really emotional about it or do curly braces go on the left or

41
00:02:30.438 --> 00:02:34.966
在右边？&gt；&gt；道格拉斯：你
on the right? &gt;&gt; Douglas: You

42
00:02:34.966 --> 00:02:38.993
可以把这个问题扔到程序员的房间里，所有的工作都会停止。
can toss that question into a room with programmers and all work is gonna stop.

43
00:02:38.993 --> 00:02:42.388
他们会有非常情绪化的争论，
And they're gonna have these really emotional arguments,

44
00:02:42.388 --> 00:02:46.969
因为事实证明根本没有数据支持这两个论点。
because it turns out there is no data at all to support either argument.

45
00:02:46.969 --> 00:02:51.280
没有数据表明你获得了更好的生产力或更低的错误率。
There's no data which shows you get better productivity or lower error rates.

46
00:02:51.280 --> 00:02:54.490
任何重要的区别，但那并不重要。
Any important difference, but that doesn't matter.

47
00:02:54.490 --> 00:02:58.158
争论将在那里，他们将是激烈的。
The arguments will be there and they'll be intense.

48
00:02:59.250 --> 00:03:00.949
他们不会停止的。
And they won't stop.

49
00:03:00.949 --> 00:03:04.449
为此，我责怪肯·汤普森。
And for this, I blame Ken Thompson.

50
00:03:04.449 --> 00:03:09.360
肯·汤普森是有史以来最重要的程序员之一。
Ken Thompson is one of the most important programmers to have ever of lived.

51
00:03:09.360 --> 00:03:10.680
我们稍后再谈他。
We'll talk more about him later.

52
00:03:11.900 --> 00:03:13.569
他设计了一种叫做B的语言。
He designed a language called B.

53
00:03:13.569 --> 00:03:15.699
它启发了被称为C的语言，
Which inspired the language called C,

54
00:03:15.699 --> 00:03:19.199
从那时起，几乎所有的语言都受到了启发。
which inspired virtually all languages to happen since then.

55
00:03:20.579 --> 00:03:21.980
非常重要的贡献。
Really, really important contributions.

56
00:03:21.980 --> 00:03:29.759
在这些语言中，你可以把花括号放在左边或右边。
And in those languages, you could put the curly brace on the left or on the right.

57
00:03:29.759 --> 00:03:32.110
汤普森把它们放在右边。
Thompson put them on the right.

58
00:03:32.110 --> 00:03:36.590
只是在他看来是正确的，他的搭档Richie也把它们放在右边，但是
Just seemed right to him and his partner Richie also put them on the right but

59
00:03:36.590 --> 00:03:38.699
他们的实验室里还有其他人，他们想把它们放在左边。
there are other people in their lab, who want to put them on the left.

60
00:03:39.789 --> 00:03:43.079
我肯定他们开了个会，可能会持续几天
And I'm sure they had a meeting and it probably went on for days and

61
00:03:43.079 --> 00:03:45.650
在某个时候，汤普森说，让我一个人呆着。
at some point, Thompson said, leave me alone.

62
00:03:45.650 --> 00:03:47.740
我不在乎，只是，我不在乎。
I don't care, just, I don't care.

63
00:03:47.740 --> 00:03:48.909
让我一个人呆着。
Leave me alone.

64
00:03:48.909 --> 00:03:52.800
这是一个遗憾，因为他可以说，我正在修复我的编译器，所以
Which is a shame because he could have said, I'm fixing my compiler so

65
00:03:52.800 --> 00:03:55.599
你必须把它们放在右边，如果你把它们放在左边，
that you have to put them on the right and if you put them on the left,

66
00:03:55.599 --> 00:03:57.610
这将是一个语法错误。
it's gonna be a syntax error.

67
00:03:57.610 --> 00:04:01.694
如果他这么做了，谁知道我们可以节省多少人-几个世纪的时间。
If he had done that, who knows how many man-centuries of time we could have saved.

68
00:04:01.694 --> 00:04:03.590
&gt；&gt；扬声器2：[笑]
&gt;&gt; Speaker 2: [LAUGH]

69
00:04:03.590 --> 00:04:04.550
&gt；&gt；道格拉斯：但他没有，所以
&gt;&gt; Douglas: But he didn't, so

70
00:04:04.550 --> 00:04:05.969
我们还在争论这件事。
we are still arguing about it.

71
00:04:07.050 --> 00:04:08.580
这是一个非常情绪化的争论。
And it's a really an emotional argument.

72
00:04:08.580 --> 00:04:11.039
所以有些事情我们可以达成一致。
So there are some things that we can agree on.

73
00:04:11.039 --> 00:04:14.319
每个人都会同意你应该始终如一，你应该总是把
Everyone would agree that you should be consistent, that you should always put

74
00:04:14.319 --> 00:04:16.110
他们在左边或者你应该总是把他们放在右边，
them on the left or you should always put them on the right,

75
00:04:16.110 --> 00:04:18.920
你不应该把它弄混，因为它看起来很蠢。
you shouldn't mix it up because it looks stupid.

76
00:04:18.920 --> 00:04:21.699
我们真的很努力不让自己看起来很蠢，所以
We're trying really hard not to intentionally look stupid, so

77
00:04:21.699 --> 00:04:23.110
你不会想这么做的。
you don't want to do that.

78
00:04:23.110 --> 00:04:27.730
每个人都会同意，无论他们怎么做，其他人都应该这样做
And everyone will agree that however they do it, everyone else should do it that way

79
00:04:27.730 --> 00:04:31.231
同样，这很容易，但我们无法就这种方式达成一致。
too, that it's easy, but we can't agree on what that way is.

80
00:04:31.231 --> 00:04:34.363
所以如果你有一个习惯把它们放在左边的人，并且
So if you have someone who is used to putting them on the left, and

81
00:04:34.363 --> 00:04:37.553
他去一家商店工作，把他们放在右边，然后再说一遍，
he goes to work for a shop that puts them on the right and again say,

82
00:04:37.553 --> 00:04:39.620
我们就是这么做的。
well, that's how we do it.

83
00:04:39.620 --> 00:04:40.519
得把它们放在右边。
Gotta put them on the right.

84
00:04:40.519 --> 00:04:41.218
他会开始哭的。
He's gonna start to cry.

85
00:04:41.218 --> 00:04:45.379
他说，不，他会开始想出理由
He goes, no, and he's gonna start trying to come up with reasons for

86
00:04:45.379 --> 00:04:47.209
为什么这是错误的。
why this is wrong.

87
00:04:47.209 --> 00:04:51.149
直觉告诉我们，这是错误的，第二个系统正在进行，是的，
And the gut is saying, this is wrong, this is wrong, and system two is going, yeah,

88
00:04:51.149 --> 00:04:53.019
我知道这是错的，为什么？
I know that's wrong, why is that?

89
00:04:53.019 --> 00:04:54.310
它开始合理化，
And it starts rationalizing,

90
00:04:54.310 --> 00:04:58.939
它正试图找出理由来支持其根深蒂固的信念。
it's trying to come up with reasons to support its deeply held belief.

91
00:04:58.939 --> 00:05:02.720
但是没有理由，所以，他听到你自己说的话
But there are no reasons and so, he hear yourself saying things which

92
00:05:02.720 --> 00:05:06.449
完全是荒谬的，它只会让你更生气。
are completely ridiculous, and and it just makes you madder.

93
00:05:06.449 --> 00:05:11.000
你越生气就越多，就是这样
And the madder you get the more, and it's just this and

94
00:05:11.000 --> 00:05:12.899
最终没有任何意义。
it ultimately doesn't make any sense.

95
00:05:12.899 --> 00:05:15.319
现在有点像开车。
Now it's sort of like driving.

96
00:05:15.319 --> 00:05:16.990
在一些国家，他们靠左行驶，而且
In some countries they drive on the left, and

97
00:05:16.990 --> 00:05:18.990
在一些国家，他们靠右行驶。
in some countries they drive on the right.

98
00:05:18.990 --> 00:05:22.360
没有数据支持其中一种对另一种。
There's no data to support one versus the other.

99
00:05:22.360 --> 00:05:24.050
你不会得到更好的燃油效率或者
You don't get better fuel efficiency or

100
00:05:24.050 --> 00:05:26.810
降低一方或另一方的事故率。
lower accident rates on one side or the other.

101
00:05:26.810 --> 00:05:28.209
但无论你在哪里
But wherever you are,

102
00:05:28.209 --> 00:05:31.879
每个人都在同一边开车真是个好主意。
it's a really good idea that everybody be driving on the same side.

103
00:05:31.879 --> 00:05:34.470
这个就是这样的。
And this is kind of like that.

104
00:05:34.470 --> 00:05:38.050
我们知道应该有一个答案。
We know that there should be one answer.

105
00:05:38.050 --> 00:05:42.129
想出一个答案真的很难，把它留给机会或者
coming up with the one answer is really hard and leaving it to chance or

106
00:05:42.129 --> 00:05:48.480
任由个人品味决定并不能很好地预测任何类型的结果。
leaving it to personal taste is not a good predictor of any kind of outcome.

107
00:05:48.480 --> 00:05:51.069
所以，我们可以继续在这上面浪费时间。
And so, we can keep wasting time on this.

108
00:05:51.069 --> 00:05:52.156
所以最终
So ultimately,

109
00:05:52.156 --> 00:05:56.903
除了JavaScript之外，我不知道这个问题的正确解决方案是什么。
I don't know what the correct solution to this is except in JavaScript.

110
00:05:56.903 --> 00:05:59.081
在JavaScript中我绝对相信，
And in JavaScript I'm absolutely convinced,

111
00:05:59.081 --> 00:06:02.629
你应该总是把它们放在右边，而不是左边，这就是为什么。
you should always put them on the right and never on the left, and here is why.

112
00:06:03.910 --> 00:06:07.089
所以JavaScript最好的地方之一就是，
So one of the really nice things about JavaScript is,

113
00:06:07.089 --> 00:06:10.189
我们可以有一个返回对象的函数。
we can have a function that returns an object.

114
00:06:10.189 --> 00:06:12.550
有时您会调用这些构造函数。
Sometimes you call those constructors.

115
00:06:12.550 --> 00:06:16.879
JavaScript提供了一个非常好的东西叫做Object literal，
And JavaScript provides this really nice thing called an object literal,

116
00:06:16.879 --> 00:06:20.470
在那里我们可以返回一个新对象。
where we can return a new object.

117
00:06:20.470 --> 00:06:22.540
非常好。
That's very, very nice.

118
00:06:22.540 --> 00:06:27.000
如果你把花括号放在右边，它完全符合你的预期。
And if you put the curly brace on the right, it does exactly what you expect.

119
00:06:27.000 --> 00:06:30.689
但是如果你把花括号放在左边，你会得到一个无声的错误。
But if you put the curly brace on the left, you get a silent error.

120
00:06:30.689 --> 00:06:32.139
这些都是最糟糕的错误。
These are the worst kinds of errors.

121
00:06:32.139 --> 00:06:35.459
编译时不会出现错误，运行时也不会出现错误。
You don't get an error at compiler time, you don't get an error at run time.

122
00:06:36.569 --> 00:06:40.129
会发生的是你的函数而不是返回一个新的对象，
What'll happen is your function instead of returning a new object,

123
00:06:40.129 --> 00:06:42.519
将返回未定义的值。
will return the undefined value.

124
00:06:42.519 --> 00:06:47.180
所以它不会在这里失败，它会在这里下游的某个地方失败，
So it doesn't fail here, it's gonna fail somewhere downstream from here,

125
00:06:47.180 --> 00:06:51.077
在那里有东西会去对一个物体进行操作，但它不在那里
where something will go to operate on an object, and it's not there and

126
00:06:51.077 --> 00:06:52.139
程序爆炸了。
boom, program blows up.

127
00:06:54.069 --> 00:06:56.779
所以，你必须调试这个东西。
And so, you're gonna have to debug this thing.

128
00:06:56.779 --> 00:07:00.209
你可能最终会追溯到这条线。
And you may eventually trace it back to this line.

129
00:07:00.209 --> 00:07:03.230
看起来是对的，我的物体去哪里了？
And that looks right, where did my object go?

130
00:07:03.230 --> 00:07:05.110
你很容易在这上面浪费很多时间。
You can easily waste a lot of time on this.

131
00:07:06.259 --> 00:07:08.949
所以让我们看看发生了什么，让我们放大这个。
So let's look at what happens, let's zoom in on this.

132
00:07:10.399 --> 00:07:13.079
所以我们在接下来的一小时里会发现，
So as we're gonna find out in the next hour,

133
00:07:13.079 --> 00:07:16.879
JavaScript是为初学者设计的一种语言。
JavaScript was designed as a language for beginners.

134
00:07:16.879 --> 00:07:20.447
这就是最初的目标，就是成为初学者的编程语言。
That was the original goal, was to make a beginner's programming language.

135
00:07:20.447 --> 00:07:23.812
但它看起来也像C
But it also looks like C.

136
00:07:23.812 --> 00:07:27.720
而且C语言不是为初学者设计的。
And C was not designed for beginners.

137
00:07:27.720 --> 00:07:30.872
C语法真的很模糊，它太复杂了。
C syntax is really fuzzy, it's way too complicated.

138
00:07:30.872 --> 00:07:35.560
特别是如果你要把它给那些没受过太多训练的人。
Especially, if you're gonna give it to people who haven't had much training.

139
00:07:35.560 --> 00:07:36.422
那你怎么处理这件事？
So how do you deal with that?

140
00:07:36.422 --> 00:07:38.691
但我认为正确的答案是，
But I think the correct answer would be,

141
00:07:38.691 --> 00:07:41.819
设计一种简单明了的新语法。
design a new syntax which is simple and clear.

142
00:07:41.819 --> 00:07:43.110
不是他干的。
He didn't do that.

143
00:07:43.110 --> 00:07:47.550
相反，有一个叫做自动分号插入的特性，
Instead, there was a feature called automatic semi-colon insertion,

144
00:07:47.550 --> 00:07:50.980
其将尝试在某些位置插入分号，
which would attempt to insert semi-colons in places,

145
00:07:50.980 --> 00:07:54.120
初学者不知道他们必须去那里。
where the beginners wouldn't know that they had to go.

146
00:07:55.230 --> 00:07:59.279
不幸的是，它有时并不能把它们放在你认为它的地方
And unfortunately, it sometimes doesn't put them in places where you think it

147
00:07:59.279 --> 00:08:02.720
应该，有时它会把它们放在你认为不应该的地方。
should, and it sometimes puts them in places where you think it shouldn't.

148
00:08:02.720 --> 00:08:04.470
而这就是其中之一。
And this is one of those times.

149
00:08:04.470 --> 00:08:08.279
因此自动插入分号将在返回后放置分号。
So automatic semicolon insertion will put a semicolon after that return.

150
00:08:09.829 --> 00:08:11.279
现在我们有了所有其他的东西。
Now we've got all this other stuff.

151
00:08:12.490 --> 00:08:15.410
你可能希望有些东西会遇到语法错误，所以
You would hope that something's gonna snag a syntax error, so

152
00:08:15.410 --> 00:08:16.769
我们可以得到一些警告。
we can get some warning.

153
00:08:16.769 --> 00:08:22.050
例如，我们有一个圆括号，它打开Object文字。
For example, we've got the curly brace which opens up the object literal.

154
00:08:22.050 --> 00:08:26.220
除非您将花括号移动到语句位置，否则它将成为一个块。
Except when you move that curly brace into statement position, it becomes a block.

155
00:08:27.620 --> 00:08:29.730
所以存在句法上的歧义。
So there's a syntactic ambiguity.

156
00:08:29.730 --> 00:08:32.330
现在JavaScript没有块作用域。
Now JavaScript Doesn't have block scope.

157
00:08:32.330 --> 00:08:38.000
因此，使用裸露的顶级块没有任何价值，但是
So there is no value in having naked top level blocks but

158
00:08:38.000 --> 00:08:40.570
是的，所以掩盖了这个错误。
it does, so that masks this error.

159
00:08:40.570 --> 00:08:44.789
然后我们有OK呼叫，OK冒号看起来不像是一个声明，但是
Then we've got ok calling, ok colon doesn't look like a statement but

160
00:08:44.789 --> 00:08:46.289
看起来确实像个标签。
it does look like a label.

161
00:08:47.549 --> 00:08:52.220
现在C语言中有一个GO TO语句，这意味着您可以
Now the C language had a go to statement in it, which meant that you could

162
00:08:52.220 --> 00:08:55.129
将控制从一个语句转移到任何其他语句。
transfer control from one statement to any other statement.

163
00:08:56.200 --> 00:09:00.139
而且我们已经确定goto是有害的，所以我们不再使用它了。
And we have since determined that goto is harmful, so we don't use it anymore.

164
00:09:00.139 --> 00:09:02.789
它在JavaScript中不存在。
It does not exist in JavaScript.

165
00:09:02.789 --> 00:09:03.669
JavaScript万岁。
Hurray for JavaScript.

166
00:09:03.669 --> 00:09:05.149
在这方面它比C好。
It's better than C in that respect.

167
00:09:06.279 --> 00:09:10.006
但是JavaScript语法仍然允许每个语句都有一个标签，
But JavaScript syntax still allows every statement to have a label,

168
00:09:10.006 --> 00:09:14.066
即使只有四个语句有意义的标签。
even though there are only four statements that make sense having labels.

169
00:09:14.066 --> 00:09:18.518
因为他们会利用标签中断
Because they'd make use of label break and

170
00:09:18.518 --> 00:09:23.149
这不是其中之一，所以这是不好的。
that is not one of them, so that's bad.

171
00:09:23.149 --> 00:09:25.049
虽然我们得到了一个虚假的陈述，
Although we've got a false statement,

172
00:09:25.049 --> 00:09:28.509
虚假陈述没有任何意义，但还有另一个
of false statement doesn't make any sense, but there's another

173
00:09:28.509 --> 00:09:32.230
我们从C继承的另一个东西是无用的表达式语句。
other thing we inherit from C which is the useless expression statement.

174
00:09:32.230 --> 00:09:35.490
现在我们可以取任何表达式，把它放在语句位置，
Now we can take any expression, put it in statement position,

175
00:09:35.490 --> 00:09:38.000
在它的末尾加上一个分号，现在它就是一个语句。
put a semicolon on the end of it, and it's now a statement.

176
00:09:39.340 --> 00:09:42.779
在我看来，只有两种表达方式有意义
Now in my view, there are only two expressions that make sense

177
00:09:42.779 --> 00:09:47.230
in语句位置、赋值和调用。
in statement position, assignment and invocation.

178
00:09:47.230 --> 00:09:51.299
我认为，其他一切都应该是语法错误，但事实并非如此。
Everything else, I think, should be a syntax error, but it's not.

179
00:09:51.299 --> 00:09:54.759
所以这在编译器中是允许的，看起来就会变假。
So this is allowed in the compiler will look at it go false.

180
00:09:54.759 --> 00:09:59.679
然而你仍然是恒定的，很好，我只是继续。
Yet you're still constant, good, I'll just go on.

181
00:09:59.679 --> 00:10:01.590
但如果它是一个语句，它需要一个分号。
But if it's a statement, it needs a semicolon.

182
00:10:02.639 --> 00:10:05.370
我们的问题是我们有一些分号插入，所以它进来了
Our problem we've got some semicolon insertion, so it comes in and

183
00:10:05.370 --> 00:10:06.039
插入那个。
inserts that.

184
00:10:07.320 --> 00:10:11.110
现在块的末尾有一个分号，块不以分号结束。
Now there's a semicolon at the end of the block, blocks do not end with semicolons.

185
00:10:12.360 --> 00:10:14.210
但我们从C继承了另一个特性，
But there's another feature that we inherit from C,

186
00:10:14.210 --> 00:10:16.019
也就是空的陈述。
which is the empty statement.

187
00:10:16.019 --> 00:10:19.769
所以在你想要的任何地方，你都可以有额外的分号，它们都会被浸泡。
So anywhere you want, you can have extra semi-colons and they all get soaked up.

188
00:10:21.740 --> 00:10:23.830
那么，所有这些都是不可达的代码。
Then, all of this is unreachable code.

189
00:10:25.649 --> 00:10:29.889
你不可能在中断之后执行一些事情。
That you can't possibly execute something that comes after disruption.

190
00:10:29.889 --> 00:10:31.960
但JavaScript可以接受这一点。
But JavaScript is okay with that.

191
00:10:31.960 --> 00:10:35.169
它允许你想要的任何东西，在没有任何警告的情况下返回语句。
It allows anything you want, after return statement without any warning.

192
00:10:37.100 --> 00:10:39.836
所以如果你写的代码看起来像这样，
So if you write code that looks like that,

193
00:10:39.836 --> 00:10:44.870
编译器认为您正在编写看起来像这样的代码。
the compiler thinks you're writing code that looks like that.

194
00:10:44.870 --> 00:10:47.419
你可能会想，这是我见过的最愚蠢的事情。
You might be thinking, this is the stupidest thing I've ever seen.

195
00:10:49.279 --> 00:10:50.450
你可能没说错。
And you're probably not wrong.

196
00:10:52.070 --> 00:10:53.509
但它就是这样存在的。
But that's how it exists.

197
00:10:53.509 --> 00:10:56.830
这就是这种愚蠢的语言所做的。
That's what this silly language does.

198
00:10:56.830 --> 00:11:02.960
如果你把你的卷边括号放在右边，你将永远不会经历这种情况。
If you put your curly brace on the right, you will never experience this.

199
00:11:02.960 --> 00:11:07.020
如果你把你的花括号放在左边，这就是在等你。
And if you put your curly braces on the left, this is waiting for you.

200
00:11:07.020 --> 00:11:12.613
所以在考虑编程风格时，让我们看看这里的权衡。
So in thinking about programming style, let's look at the trade offs here.

201
00:11:12.613 --> 00:11:17.639
那么，在一边放一个圆括号相对于另一边的成本是多少？
So what is the cost of putting a curly brace on one side versus the other?

202
00:11:18.759 --> 00:11:22.690
零，没有成本，只是标点符号，没有成本。
Zero, there's no cost, it's just punctuation, there's no cost.

203
00:11:22.690 --> 00:11:23.980
好处是什么？
What's the benefit?

204
00:11:23.980 --> 00:11:27.198
好处是你永远不会在这个虫子上浪费时间，
The benefit is you will never waste time on this bug,

205
00:11:27.198 --> 00:11:29.842
这个bug永远不会存在于你的程序中。
this bug will never exist in your program.

206
00:11:29.842 --> 00:11:32.769
这是个好福利吗？
Is that a good benefit?

207
00:11:32.769 --> 00:11:35.639
如果你能免费得到它，是的，绝对的。
If you can get it for free, yeah, absolutely.

208
00:11:35.639 --> 00:11:38.059
这就是为什么在JavaScript中，我建议
So that's why in JavaScript, I recommend

209
00:11:38.059 --> 00:11:42.159
总是把你的花括号放在左边或右边，不要放在左边。
always put your curly braces on the left or on the right, never on the left.

210
00:11:43.159 --> 00:11:46.330
您应该更喜欢抗错误的表单。
You should prefer forms that are error resistant.

211
00:11:46.330 --> 00:11:50.080
您应该以一种更难形成新错误的方式进行编码。
You should be coding in a way which makes it harder to form new errors.
