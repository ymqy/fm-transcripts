WEBVTT

1
00:00:00.000 --> 00:00:04.238
[音乐]
[MUSIC]

2
00:00:04.238 --> 00:00:07.217
&gt；&gt；Douglas Crockford：作用域是编程中最重要的发明之一。
&gt;&gt; Douglas Crockford: Scope is one of the most important inventions in programming.

3
00:00:07.217 --> 00:00:10.179
我们从Algol 60得到的
We got it from ALGOL 60.

4
00:00:10.179 --> 00:00:14.451
几乎所有现代语言都有块范围，JavaScript没有。
Almost all modern languages have block scope, JavaScript doesn't.

5
00:00:14.451 --> 00:00:18.908
JavaScript只有函数作用域，这证明它并不是一件坏事。
JavaScript only has functions scope, which turns out it's not a bad thing.

6
00:00:18.908 --> 00:00:22.010
这个函数范围足以编写好的程序。
That function scope is sufficient for writing good programs.

7
00:00:22.010 --> 00:00:27.725
问题是大多数用JavaScript编写的程序员都是经过培训的
The problem is that most programmers who are writing in JavaScript were trained

8
00:00:27.725 --> 00:00:33.030
在Java或C或其他C-ish语言中，并期望具有块范围。
in Java or C or other C-ish languages, and expected to have block scope.

9
00:00:34.189 --> 00:00:38.582
并且关于声明变量的位置的规则在块范围内是不同的
And the rules about where you declare variables are different in block scope

10
00:00:38.582 --> 00:00:41.265
语言与函数范围语言。
languages versus function scope languages.

11
00:00:41.265 --> 00:00:44.909
而这种困惑可能会导致错误。
And that confusion can cause errors.

12
00:00:44.909 --> 00:00:48.343
这是因为var语句工作的疯狂方式。
And this is because of the crazy way that the var statement works.

13
00:00:48.343 --> 00:00:53.100
今天下午我们将更多地关注var。
We'll look more at var this afternoon.

14
00:00:53.100 --> 00:00:57.551
因此，由于这种疯狂，我建议在顶部声明所有变量
So because of this craziness, I recommend declare all of your variables at the top

15
00:00:57.551 --> 00:01:01.820
函数，因为JavaScript实际上将在那里声明它们。
of the function because that is where JavaScript actually will declare them.

16
00:01:01.820 --> 00:01:06.549
所以如果你把你的声明放在那里，那就增加了谁是
And so if you put your declarations there, that increases the likelihood that who is

17
00:01:06.549 --> 00:01:10.609
只要阅读过你的程序，你就会正确地理解这个程序是什么
ever reading your program will correctly understand what the program is

18
00:01:10.609 --> 00:01:15.219
正在做。&gt；&gt；Douglas Crockford：我找到了这个地方
doing. &gt;&gt; Douglas Crockford: I find the place

19
00:01:15.219 --> 00:01:20.099
让人们最困惑的是for的归纳变量
that gets people the most confused is in the induction variable of the for

20
00:01:20.099 --> 00:01:20.983
声明。
statement.

21
00:01:20.983 --> 00:01:23.950
他们真的很想拯救我们的我在那里。
They really want to save our I there.

22
00:01:23.950 --> 00:01:25.680
我建议不要，甚至不要在那里做。
And I recommend no, don't even do it there.

23
00:01:25.680 --> 00:01:28.329
将条形图i移动到函数的顶部。
Move the bar I to the top of the function.

24
00:01:28.329 --> 00:01:32.912
他们真的很生气，他们开始尖叫，他们说，但是
And they get really upset, and they start screaming and they say, but

25
00:01:32.912 --> 00:01:35.329
用Java不是这样写的。
that's not how you write it in Java.

26
00:01:35.329 --> 00:01:40.143
我说，用你正在写的语言写。
And I say, write in the language you're writing in.

27
00:01:40.143 --> 00:01:42.579
Java是一种不同的语言。
That Java is a different language.

28
00:01:42.579 --> 00:01:43.796
他们看起来很相似，但是
They look similar but

29
00:01:43.796 --> 00:01:47.319
这是一种不同的语言，有一套不同的坏部分。
it's a different language with a different set of bad parts.

30
00:01:47.319 --> 00:01:51.843
在JavaScript中，您不想这样做，因为它
In JavaScript, you don't wanna be doing that because it

31
00:01:51.843 --> 00:01:54.870
不会像你想象的那样。
doesn't do what you imagine it does.

32
00:01:54.870 --> 00:02:02.599
在ECMA大会今年6月发表的EX6中。
In EX6, which was published in June of this year by the ECMA General Assembly.

33
00:02:02.599 --> 00:02:07.668
现在JavaScript中有一个let语句，它现在开始找到它的
There's now a let statement in JavaScript which is now starting to find its

34
00:02:07.668 --> 00:02:12.818
实现的方式，当它变得完全无处不在时，我将
way into implementations and when that becomes totally ubiquitous, I will

35
00:02:12.818 --> 00:02:18.550
建议停止使用var，从现在开始使用let，因为let将尊重块范围。
recommend stop using var, use let from now on because let will respect block scope.

36
00:02:18.550 --> 00:02:26.546
除非您的代码必须在IE 6上运行，因为let是IE 6上的语法错误，并且
Unless your code has to run on IE 6 because let is a syntax error on IE 6 and

37
00:02:26.546 --> 00:02:31.659
您的代码将永远不会在IE7或IE8或
your code won't ever run or in IE 7 or on IE 8 or

38
00:02:31.659 --> 00:02:38.082
IE 9或IE 10或IE 11，但如果您必须在Edge 2或
IE 9 or IE 10 or IE 11, but if you have to run on Edge 2 or

39
00:02:38.082 --> 00:02:42.699
不管下一个叫什么。
whatever the next one is gonna be called.

40
00:02:42.699 --> 00:02:43.777
是啊。
Yeah.

41
00:02:43.777 --> 00:02:45.865
让。否则
Let. Otherwise,

42
00:02:45.865 --> 00:02:50.272
继续使用var。&gt；&gt；扬声器2：[笑]当前
keep using var. &gt;&gt; Speaker 2: [LAUGH] Does the current

43
00:02:50.272 --> 00:02:54.310
边缘允许让？&GT；&GT；道格拉斯·克罗克福德：我不知道。
Edge allow let? &gt;&gt; Douglas Crockford: I don't know.

44
00:02:54.310 --> 00:02:54.846
&gt；&gt；扬声器2：好的。
&gt;&gt; Speaker 2: Okay.

45
00:02:54.846 --> 00:02:55.671
&gt；&gt；Douglas Crockford：有可能。
&gt;&gt; Douglas Crockford: It might.

46
00:02:55.671 --> 00:02:59.167
我不知道。&gt；&gt；演讲者2：2016年我们都会很好，
I don't know. &gt;&gt; Speaker 2: We'll all be good in 2016,

47
00:02:59.167 --> 00:03:02.133
因为微软放弃支持
because Microsoft's dropping support

48
00:03:02.133 --> 00:03:04.699
对于所有那些IE浏览器。&gt；&gt；Douglas Crockford：我知道你的
for all those IE browsers. &gt;&gt; Douglas Crockford: I know your

49
00:03:04.699 --> 00:03:06.846
客户将使用这些浏览器。
customers will be using these browsers.

50
00:03:06.846 --> 00:03:08.459
是啊。微软说我们不支持你
Yeah. Microsoft said we're not supporting you

51
00:03:08.459 --> 00:03:11.277
不再是男人了，但这并不意味着世界将停止使用它。
guys anymore but that doesn't mean that the world's gonna stop using it.

52
00:03:11.277 --> 00:03:16.185
所以，恐怕我们还要在IE上呆上一段时间。
So we're gonna be stuck with IE for a while longer, I'm afraid.

53
00:03:16.185 --> 00:03:20.989
所以全局变量在所有语言中都是邪恶的，它们导致了事物的耦合，
So global variables are evil in all languages they caused coupling of things,

54
00:03:20.989 --> 00:03:25.590
意外碰撞和安全隐患以及各种各样的坏事。
and accidental collisions and security hazards and all sorts of badness.

55
00:03:25.590 --> 00:03:26.984
不幸的是
And unfortunately,

56
00:03:26.984 --> 00:03:32.018
在浏览器中需要使用全局变量，因为没有种类
in the browser the use of global variables is required because there is no kind

57
00:03:32.018 --> 00:03:36.753
允许一个编译单元找到另一个编译单元的链接机制。
of linkage mechanism that allows one compilation unit to find another.

58
00:03:36.753 --> 00:03:41.129
他们只是共享一个共同的全球空间，这是疯狂的。
They just all share a common global space which is crazy.

59
00:03:41.129 --> 00:03:46.155
因此，由于我建议在浏览器应用程序中使用很少全局
So because of that I recommend in browser applications use as few global

60
00:03:46.155 --> 00:03:51.598
变量越多越好，当您这样做时，请将它们全部命名为大写，因为您
variables as possible and when you do, name them all in uppercase because you

61
00:03:51.598 --> 00:03:56.983
希望他们真正脱颖而出，成为危险和重要的东西。
want them to really stand out as something that is dangerous and important.

62
00:03:56.983 --> 00:04:03.110
JavaScript有一个模仿C+和Java新前缀的新前缀。
JavaScript has a new prefix that was modeled after the C++ and Java new prefix.

63
00:04:03.110 --> 00:04:08.229
我不建议永远使用它，但因为它的危险之一是
I don't recommend using it ever but because one of the hazards with it is that

64
00:04:08.229 --> 00:04:13.189
如果您忘记将新的前缀放在构造函数的前面，
if you forget to put the new prefix on the front of a constructor function,

65
00:04:13.189 --> 00:04:17.754
它将重击全局变量，而不是创建新对象。
instead of creating a new object it will clobber global variables.

66
00:04:17.754 --> 00:04:22.744
并且碰巧与您的实例变量具有相同的名称
And happen to have the same names as the instance variables you're

67
00:04:22.744 --> 00:04:25.863
尝试初始化，这很糟糕，而且
trying to initialize which is awful, and

68
00:04:25.863 --> 00:04:31.225
没有运行时警告，没有编译时警告，这太糟糕了。
there's no run time warning no compile time warning it's just awful.

69
00:04:31.225 --> 00:04:35.812
因此，正因为如此，我们在JavaScript中有一个构造函数起作用的约定
So because of that, we have a convention in JavaScript that constructor functions

70
00:04:35.812 --> 00:04:37.841
应使用InitialCaps和
should be named with InitialCaps and

71
00:04:37.841 --> 00:04:40.800
其他任何东西都不能用InitialCaps命名。
nothing else should ever be named with InitialCaps.

72
00:04:40.800 --> 00:04:46.034
这是我们唯一的线索，关于什么需要一个新的前缀和
This is the only clue we have as to what requires a new prefix and

73
00:04:46.034 --> 00:04:51.279
什么不是。&gt；&gt；Douglas Crockford：这是
what doesn't. &gt;&gt; Douglas Crockford: This is

74
00:04:51.279 --> 00:04:56.540
JavaScript中允许的东西，但它并不意味着人们期望的东西。
something which is allowed in JavaScript but it doesn't mean what people expect.

75
00:04:56.540 --> 00:04:59.612
所以这种方法似乎与之相关，
So this approach appears to do with it does,

76
00:04:59.612 --> 00:05:04.610
它将创建两个变量a和b，并将它们初始化为0。
it's gonna create two variables a and b and initialize them both to 0.

77
00:05:04.610 --> 00:05:08.685
取而代之的是，它将b初始化为0，然后
What it does instead is, it initializes b to 0 and

78
00:05:08.685 --> 00:05:13.923
创建也变为0的a，但这个不会是本地的
creates a which also become 0, but this one will not be a locally

79
00:05:13.923 --> 00:05:18.398
作用域变量，此变量将是全局变量。
scoped variable, this one will be a global variable.

80
00:05:18.398 --> 00:05:23.324
JavaScript中的一个大设计错误是，如果您没有显式声明
One of the big design errors in JavaScript is, if you do not explicitly declare

81
00:05:23.324 --> 00:05:27.875
函数JavaScript中的变量假设您希望它是
a variable in a function JavaScript assumes that you intended for it to be

82
00:05:27.875 --> 00:05:33.024
一个全局变量，故意这样做是为了让它更容易
a global variable which is something that was done intentionally to make it easier

83
00:05:33.024 --> 00:05:37.980
对于初学者来说，因为他们通常根本不知道变量是什么。
for the beginners because often they didn't know what variables were at all.

84
00:05:37.980 --> 00:05:40.206
但这会让你更难
But it's makes it much harder for

85
00:05:40.206 --> 00:05:44.976
你是因为如果你真的不小心，你的任何变量都可能
you because if you're not really careful, any of your variables could

86
00:05:44.976 --> 00:05:49.521
变成全局变量，在那里它们很容易被踩到。
turn into global variables where they could easily get stepped on.

87
00:05:49.521 --> 00:05:54.209
所以，再一次，推荐你指的是哪一个，然后写出来。
So again, recommend which one of these you mean and write that instead.

88
00:05:54.209 --> 00:05:56.021
用这样的方式写-&gt；&gt；扬声器2：你也可以这样写吗
Write in a way that- &gt;&gt; Speaker 2: Is it the same way you can

89
00:05:56.021 --> 00:05:59.860
在一个范围上声明多个变量a逗号b逗号c？
declare multiple variables on a range var a comma b comma c?

90
00:05:59.860 --> 00:06:00.680
&gt；&gt；Douglas Crockford：是的
&gt;&gt; Douglas Crockford: Yeah

91
00:06:00.680 --> 00:06:02.283
&gt；&gt；扬声器2：b和c是否都成为
&gt;&gt; Speaker 2: Does b and c all become

92
00:06:02.283 --> 00:06:05.120
全球贵重物品如果你这样做了吗？&gt；&gt；Douglas Crockford：不，
global valuables if you do that? &gt;&gt; Douglas Crockford: No,

93
00:06:05.120 --> 00:06:07.420
在这种情况下你是可以的。
in this kind of form you're okay.

94
00:06:07.420 --> 00:06:09.447
问题是如果你的任务是这样做的话。
The problem is if you assignment to do that.

95
00:06:09.447 --> 00:06:10.848
&gt；&gt；扬声器2：好的，
&gt;&gt; Speaker 2: Okay,

96
00:06:10.848 --> 00:06:14.923
好吧。&gt；&gt；Douglas Crockford：那么，用一种方式写
okay. &gt;&gt; Douglas Crockford: So, write in a way

97
00:06:14.923 --> 00:06:19.853
这清楚地传达了你的意图。&gt；&gt；Douglas Crockford：这是另一个
that clearly communicates your intent. &gt;&gt; Douglas Crockford: This is another one

98
00:06:19.853 --> 00:06:24.704
汤普森的，所以b语言是模仿bcpl的，
of Thompson's, so the the b language was modeled after BCPL,

99
00:06:24.704 --> 00:06:27.829
这是一种聪明的小语言。
which was a brilliant little language.

100
00:06:27.829 --> 00:06:31.391
BCPL是第一个大括号语言。
BCPL was the first curly brace language.

101
00:06:31.391 --> 00:06:34.377
BCPL的if语句是正确的，
And BCPL got its if statement right,

102
00:06:34.377 --> 00:06:38.720
条件周围的双亲是可选的。
that the parens around the condition were optional.

103
00:06:38.720 --> 00:06:42.862
结果周围的花括号是必需的。
And the curly braces around the consequence were required.

104
00:06:42.862 --> 00:06:43.694
汤普森颠倒了这一点。
Thompson reversed that.

105
00:06:43.694 --> 00:06:49.110
汤普森让父母满足了条件要求
Thompson made the parents around the condition required and

106
00:06:49.110 --> 00:06:53.792
结果周围的花括号可选。
the curly braces around the consequence optional.

107
00:06:53.792 --> 00:06:58.927
因为这看起来更像Fortran，更符合当时的风格。
Because that looked more like Fortran which was more in the style of the day.

108
00:06:58.927 --> 00:07:04.654
因此，这条语句似乎与这条语句相关，但是
So as result, this statement appears to do with this one does but

109
00:07:04.654 --> 00:07:11.779
实际上这个函数是这样做的，它将无条件地调用c。
actually does with this one does, that it's going to call c unconditionally.

110
00:07:11.779 --> 00:07:16.033
或者阅读声明的人很容易认为c
Or someone reading the statement could easily think that c

111
00:07:16.033 --> 00:07:20.129
只会被有条件地调用，这是一个错误。
is only gonna be called conditionally, that's a bug.

112
00:07:20.129 --> 00:07:24.923
正因为如此，我建议每次都要放上花括号，
And so because of this, I recommend always put the curly braces in every time,

113
00:07:24.923 --> 00:07:28.480
在每一个如果，在每个其他，在每一个时刻，在永远，
on every if, on every else, on every while, on ever for,

114
00:07:28.480 --> 00:07:30.680
每次都把花括号放进去。
every time put the curly braces in.

115
00:07:30.680 --> 00:07:35.653
这只是两个字符，已经完成了。
It's just two characters and it's done.

116
00:07:35.653 --> 00:07:41.903
这样做的成本非常低，它使你的程序更具弹性，
And what that does is for very low cost, it makes your program much more resilient,

117
00:07:41.903 --> 00:07:47.461
这意味着其他人会进来并添加到您的if语句中。
that means that someone else is gonna come in and add to your if statement.

118
00:07:47.461 --> 00:07:50.997
他们将有更大的可能性
They're gonna have a much greater likelihood of being able to do

119
00:07:50.997 --> 00:07:55.055
在没有介绍她的情况下，这是一件非常好的事情，如果你
that without introducing her into it which is a really good thing and if you

120
00:07:55.055 --> 00:07:59.590
如果你把花括号留在外面，你就是在让你的同事失败。
are leaving the curly braces out, you are setting your coworkers up for failure.

121
00:07:59.590 --> 00:08:03.480
这是不可原谅的和不专业的。
Which is inexcusable and unprofessional.

122
00:08:03.480 --> 00:08:07.781
所以总是把它们放进去，我总是收到人们的来信，但是
So always put them in, and I hear from people all the time but

123
00:08:07.781 --> 00:08:11.500
你必须如此努力，这只是两个字符。
you have to go so hard, it's just two characters.

124
00:08:11.500 --> 00:08:16.110
这只是两个糟糕的角色，他们让你的程序变得更好。
It's just two lousy characters and they make your program so much better.

125
00:08:16.110 --> 00:08:20.055
随着我们的过程变得更加敏捷，我们的编码必须更具弹性。
That as our processes become more agile, our coding must be more resilient.

126
00:08:20.055 --> 00:08:22.860
因为我们的程序永远不会结束，对吧？
Cuz our programs are never finished, right?

127
00:08:22.860 --> 00:08:27.165
他们总是处于不断改进的状态
They're always going to be constant states of improvement and

128
00:08:27.165 --> 00:08:28.879
我们需要这样编码。
we need to code that way.

129
00:08:28.879 --> 00:08:33.320
编码我们的程序，使它们更容易随着时间的推移而改进。
Code our programs so that they are more easily improved over time.
