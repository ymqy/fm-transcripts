WEBVTT

1
00:00:00.000 --> 00:00:03.939
[音樂]
[MUSIC]

2
00:00:03.939 --> 00:00:05.839
&gt；&gt；道格拉斯·克羅克福德：這是下一個問題。
&gt;&gt; Douglas Crockford: Here's the next problem.

3
00:00:05.839 --> 00:00:08.981
這一次會有一點不同，因為我們要做的是
This one's going to be a little bit different in that we're going to do it

4
00:00:08.981 --> 00:00:09.929
總而言之，好嗎？
altogether, okay?

5
00:00:09.929 --> 00:00:16.390
所以我們要用get方法建立一個數組包裝物件，
So we're gonna make an array wrapper object with methods get,

6
00:00:16.390 --> 00:00:21.420
儲存和追加，這樣攻擊者就無法訪問私有陣列。
store and append, such that an attacker cannot get access to the private array.

7
00:00:21.420 --> 00:00:27.429
所以我們的想法是，我們有一個數組，我們想在一個好的API後面保護它。
So the idea is that we've got an array and we want to protect it behind a good API.

8
00:00:27.429 --> 00:00:31.739
我們希望能夠將其交給第三方，即使是惡意的第三方
And we want to be able to hand it to a third party, even a malicious third

9
00:00:31.739 --> 00:00:36.469
可能想要直接到達陣列的參與方，我們要阻止它。
party that might want to get directly to the array, which we want to prevent.

10
00:00:36.469 --> 00:00:38.070
所以這就是我們要做的事情，
So this is how we would do it,

11
00:00:38.070 --> 00:00:41.659
我們有我們的向量建構函式，它將建立一個向量例項。
we've got our vector constructor, which will make a vector instance.

12
00:00:41.659 --> 00:00:43.759
它將有一個append方法，
And it will have an append method,

13
00:00:43.759 --> 00:00:47.179
它可以用來將東西附加到該祕密陣列上。
which can be used to append things onto that secret array.

14
00:00:47.179 --> 00:00:52.030
它將有一個儲存方法，允許您將資料儲存到陣列中。
It will have a store method, which will allow you to store things into that array.

15
00:00:52.030 --> 00:00:53.520
它將有一個GET方法，
And it will have a get method,

16
00:00:53.520 --> 00:00:57.880
這樣你就可以從那個陣列中檢索東西了，好的。
which will allow you to retrieve things from that array, okay.

17
00:00:57.880 --> 00:01:01.270
所以想一想，你可能會如何實現這樣的事情。
So think about how you might implement something like that.

18
00:01:01.270 --> 00:01:04.019
我要根據我們一直在做的猜測，
I'm going to guess based on what we've been doing,

19
00:01:04.019 --> 00:01:06.159
它可能看起來像這樣。
it might look something like this.

20
00:01:06.159 --> 00:01:07.799
這裡有一個叫做向量的函式。
So here's a function called vector.

21
00:01:08.819 --> 00:01:12.340
我們有一個包含陣列的陣列變數，
We have an array variable containing the array,

22
00:01:12.340 --> 00:01:14.710
這就是我們想要保護的祕密。
that's the secret that we want to protect.

23
00:01:14.710 --> 00:01:17.868
而且它隱藏在函式作用域中，所以我們已經有了一個良好的開端。
And it's hidden in the function scope, so we're already off to a good start.

24
00:01:19.060 --> 00:01:22.870
我們將返回一個包含三個函式的物件。
And we're gonna return an object containing three functions.

25
00:01:22.870 --> 00:01:25.750
我們得到函式、儲存函式和附加函式。
We get function, store function, and append function.

26
00:01:25.750 --> 00:01:31.280
GET函式將接受i並返回i的陣列。
The get function will take i and return arrays of i.

27
00:01:31.280 --> 00:01:37.689
STORE函式將獲取i和v，並將v值儲存到i中。
The store function will take i and v and store into i the v value.

28
00:01:37.689 --> 00:01:41.870
AND APPEND將接受一個值並將該值推入陣列。
And append will take a value and push that value onto the array.

29
00:01:43.710 --> 00:01:48.590
所以我們想要保證的是我們可以把這個給第三方。
So the guarantee that we want to make is that we can give this to a third party.

30
00:01:48.590 --> 00:01:53.359
第三方可以使用這些方法間接訪問陣列，但是
The third party can access the array indirectly using these methods, but

31
00:01:53.359 --> 00:01:57.469
第三方無法直接訪問陣列本身。
the third party cannot get direct access to the array itself.

32
00:01:57.469 --> 00:02:02.010
因為我們希望限制對陣列的訪問，僅限於
Because we want to limit access to the array, to only the things

33
00:02:02.010 --> 00:02:05.799
這是我們可以做的，而不是你可以對陣列做的任何其他事情。
that we can do and not to any of the other things that you could do to an array.

34
00:02:07.329 --> 00:02:08.599
現在事實證明，
Now it turns out,

35
00:02:08.599 --> 00:02:13.699
JavaScript中存在使該保證無效的漏洞。
there is a vulnerability in JavaScript which invalidates that guarantee.

36
00:02:13.699 --> 00:02:19.969
有決心的黑客有可能直接進入陣列。
That it is possible for a determined hacker to get direct access to the array.

37
00:02:21.300 --> 00:02:26.409
現在這個問題已經向世界上一些頂尖的JavaScript專家展示了，
Now this problem has been shown to some of the top JavaScript experts in the world,

38
00:02:26.409 --> 00:02:28.189
他們看不到襲擊。
and they could not see the attack.

39
00:02:30.379 --> 00:02:35.300
這種攻擊不是由於實現中的錯誤造成的，
The attack is not something that's due to bugs in implementations,

40
00:02:35.300 --> 00:02:40.018
所以我們只關心語言的標準行為。
so we're only concerned with standard behavior of the language.

41
00:02:40.018 --> 00:02:45.729
我們知道關於這種語言的一些事情是有問題的。
There are some things about the language which we know are problematic.

42
00:02:45.729 --> 00:02:50.780
例如，您可以轉到Array.Prototype並替換其
For example you can go to array.prototype and replace its

43
00:02:50.780 --> 00:02:57.150
使用您自己的方法推送方法，否則，我們將假定這些問題已經修復。
push method with your own method or, we'll assume that those things have been fixed.

44
00:02:57.150 --> 00:03:01.599
因此，正如我們已經討論過的，我們只關心語言的工作方式。
So we're just concerned with the language as it works, as we've discussed.

45
00:03:02.659 --> 00:03:08.500
因此，您的工作將是找出此程式碼並建議
So your job will be to figure out this code and suggest

46
00:03:08.500 --> 00:03:14.180
如何攻擊程式碼，以及攻擊者如何訪問陣列。
how the code could be attacked, and how an attacker could get access to the array.

47
00:03:15.639 --> 00:03:20.280
然後我們如何修復它，這樣攻擊者就不會那樣做了。
And then how we would repair it so that the attacker couldn't do that.

48
00:03:20.280 --> 00:03:24.610
我的工作就是誠實地回答你們所有關於這個程式碼是如何
And my job will be to honestly answer all of your questions about how this code

49
00:03:24.610 --> 00:03:29.300
好了，你就來了，好嗎？
works, and there you are, okay?
