WEBVTT

1
00:00:00.000 --> 00:00:04.177
[音乐]
[MUSIC]

2
00:00:04.177 --> 00:00:07.445
&gt；&gt；Douglas Crockford：所以JavaScript是一种面向对象的编程语言
&gt;&gt; Douglas Crockford: So JavaScript is an object-oriented programming language

3
00:00:07.445 --> 00:00:10.900
但是它所认为的对象与大多数
which, but what it thinks an object is is different from the most

4
00:00:10.900 --> 00:00:13.500
其他面向对象的语言。
other object-oriented languages.

5
00:00:13.500 --> 00:00:17.339
在JavaScript中，对象只是属性的动态集合。
In JavaScript, an object is simply a dynamic collection of properties.

6
00:00:18.649 --> 00:00:22.739
每个属性都有一个键字符串，该字符串在该对象中是唯一的，并且
Every property has a key string that is unique within that object, and

7
00:00:22.739 --> 00:00:25.070
该键字符串将与任何值关联。
that key string will be associated with any value.

8
00:00:27.899 --> 00:00:32.179
可以使用点表示法或从对象中获取属性
You can get a property from an object by using the dot notation or

9
00:00:32.179 --> 00:00:36.600
括号表示法，它们在某些情况下可以互换使用。
the bracket notation, they can be used, in some cases, interchangeably.

10
00:00:36.600 --> 00:00:40.159
如果括号包含作为字符串的表达式，
If the bracket contains an expression which is a string,

11
00:00:40.159 --> 00:00:44.369
与名称相同，那么您将获得相同的属性。
which is the same as a name, then you'll get the same property.

12
00:00:44.369 --> 00:00:51.670
这使得在不使用反射API的情况下动态获取东西成为可能。
That makes it possible to dynamically get at things without use of a reflection API.

13
00:00:51.670 --> 00:00:55.929
只需指定对象的属性，即可设置这些属性。
You can set of properties of an object simply by assigning to those properties.

14
00:00:55.929 --> 00:01:01.969
您可以简单地通过赋值来添加新属性或修改旧属性，
You can add new properties or modify old properties simply by assignment,

15
00:01:01.969 --> 00:01:05.750
您还可以使用删除操作符从对象中删除属性。
and you can also delete properties from an object using a delete operator.

16
00:01:05.750 --> 00:01:07.950
虽然，我很少看到这个用过。
Although, I very rarely see this used.

17
00:01:07.950 --> 00:01:10.730
一般来说，一旦一个物体被制造出来，它就会保留它的东西。
Generally, once an object is made, it keeps its stuff.

18
00:01:13.280 --> 00:01:18.510
JavaScript中的一个设计错误是键必须是字符串。
One design mistake in JavaScript is that the keys must be strings.

19
00:01:18.510 --> 00:01:23.230
如果它们可以有任何价值，那会更好，但它们不是。
It would've been better if they could've been any value, but they're not.

20
00:01:23.230 --> 00:01:26.329
因此您可以将任何类型传递到括号中，
So you can pass any type into the brackets,

21
00:01:26.329 --> 00:01:28.289
JavaScript会将其转换为字符串。
JavaScript will turn that into a string.

22
00:01:30.019 --> 00:01:33.390
所以bean，实际上，值必须是字符串。
So the beans, effectively, the values have to be strings.

23
00:01:34.789 --> 00:01:37.171
我们有一个非常好的对象文字表示法，
We have a very nice object literal notation,

24
00:01:37.171 --> 00:01:41.060
JavaScript的对象文字表示法是Jason的灵感来源
JavaScript's object literal notation was the inspiration for the Jason

25
00:01:41.060 --> 00:01:45.210
数据交换格式，世界上最受欢迎的数据交换格式。
data interchange format, the world's most loved data interchange format.

26
00:01:47.808 --> 00:01:51.716
&gt；&gt；Douglas Crockford：你有一个花括号来标识对象，
&gt;&gt; Douglas Crockford: You've got curly braces that identify the object,

27
00:01:51.716 --> 00:01:56.520
然后，您已经在对象中获得了命名字段或属性。
then you've got named fields or properties within the object.

28
00:01:59.909 --> 00:02:05.230
如果名称是有效的标识符，则不必在名称两边加上引号。
You don't have to put quotes around the names if the names are valid identifiers.

29
00:02:05.230 --> 00:02:08.150
如果它们不是标识符，则需要用引号将它们括起来。
If they are not identifiers, then you need to put the quotes around them.

30
00:02:11.360 --> 00:02:14.800
所以大多数面向对象的编程语言都是经典的。
So most object oriented programming languages are classical.

31
00:02:14.800 --> 00:02:19.420
它们都是关于创建类，其中对象是类的实例，并且
They're all about making classes where objects are instances of classes and

32
00:02:19.420 --> 00:02:21.699
类从其他类继承。
classes inherit from other classes.

33
00:02:21.699 --> 00:02:26.969
JavaScript有一个更简单，更高级的设计，
JavaScript has a much simpler, much more highly evolved design,

34
00:02:26.969 --> 00:02:31.319
它基于原型，其中对象从对象继承并
which is based on prototypes where objects inherit from objects and

35
00:02:31.319 --> 00:02:32.800
就是这样，没有课。
that's it, there are no classes.

36
00:02:33.849 --> 00:02:36.770
这是我们从自我那里得到的想法，
This was the idea that we got from the self,

37
00:02:36.770 --> 00:02:38.670
这比闲聊好多了。
which was an improvement over small talk.

38
00:02:39.729 --> 00:02:43.079
但这确实是一个有争议的想法，大多数写这篇文章的人
But it's a really controversial idea and most people who are writing in this

39
00:02:43.079 --> 00:02:48.210
语言不明白这到底是怎么回事，但我们会讨论一下。
language do not understand how this really works, but we're gonna talk about it.

40
00:02:48.210 --> 00:02:52.099
所以使用原型实际上是非常容易的。
So working with prototypes is actually very easy.

41
00:02:52.099 --> 00:02:55.280
您可以使用任何可用的技术来制作您喜欢的对象
You make an object that you like using any of the techniques available for

42
00:02:55.280 --> 00:02:56.889
制作一个物体。
making an object.

43
00:02:56.889 --> 00:03:00.639
可以创建从对象继承的新实例，然后可以
You can create new instances that inherit from the object, and then you can

44
00:03:00.639 --> 00:03:05.860
通过指定新属性或替换属性来自定义新实例。
customize the new instances by assigning new properties or replacing properties.

45
00:03:07.169 --> 00:03:13.120
您必须在中执行的分类和分类操作
The classification and taxonomy operations that you have to do in

46
00:03:13.120 --> 00:03:19.520
一个经典的系统是不必要的，结果是一个巨大的胜利。
a classical system aren't necessary, which turns out to be a huge win.

47
00:03:19.520 --> 00:03:23.099
所以如果你在一个经典的系统中工作，当你开始时，
So if you're working in a classical system, when you start off,

48
00:03:23.099 --> 00:03:24.530
你必须对所有的物体进行分类。
you have to classify all the objects.

49
00:03:24.530 --> 00:03:26.960
你必须弄清楚所有的物体是什么，它们是由什么组成的，
You have to figure out what are all the objects, what are they composed of,

50
00:03:26.960 --> 00:03:27.920
它们之间有什么关系？
how are they related?

51
00:03:27.920 --> 00:03:31.645
然后你做了一个分类法，在这个分类法中你找出了要继承的东西
Then you make a taxonomy in which you figure out what's going to inherit from

52
00:03:31.645 --> 00:03:35.740
什么，什么要实现什么，这是一个非常复杂的层次结构。
what, what's gonna implement what, and it's a really complicated hierarchy.

53
00:03:35.740 --> 00:03:38.860
通常，你在项目中的某一点上做这项工作，通常，
Usually, you're doing that work at the point in the project, usually,

54
00:03:38.860 --> 00:03:39.539
一开始
the beginning,

55
00:03:39.539 --> 00:03:43.370
我们对象系统实际上是如何工作的了解最少。
we have the least understanding of how the object system's actually gonna work.

56
00:03:43.370 --> 00:03:49.680
这意味着几乎可以肯定你会弄错
Which means it's almost certain that you're gonna get it wrong and

57
00:03:49.680 --> 00:03:53.849
你看，东西组合得不好。
you see that in that things don't compose properly.

58
00:03:53.849 --> 00:03:56.439
你就是不能，它们不起作用。
You just can't, they don't work.

59
00:03:56.439 --> 00:03:58.694
你发现自己希望他们有多重继承，
You find yourself wishing they had multiple inheritance,

60
00:03:58.694 --> 00:04:01.280
因为没有办法从这里到那里。
cuz there's no way to get from here to there.

61
00:04:01.280 --> 00:04:05.060
当你把越来越多的类放在上面的时候，
And as you layer in more and more classes on top,

62
00:04:05.060 --> 00:04:10.060
你发现破碎开始渗透到所有更高的层面，然后
you find that that brokenness starts to seep up into all the higher layers, and

63
00:04:10.060 --> 00:04:13.210
最终达到这样一个点，它已经坏到你必须重构的地步，
eventually reach the point where it's so broken that you have to refactor,

64
00:04:13.210 --> 00:04:16.389
这意味着必须把所有的东西都撕碎，然后再重新组装起来。
which means have to tear it all apart and put it back together again.

65
00:04:16.389 --> 00:04:20.430
这真的很危险，因为它有可能永远不会回到一起
Which is really dangerous, cuz there's a chance it might not ever go back together

66
00:04:20.430 --> 00:04:25.660
同样，所有这些都是由于类的耦合。
again, and all of that is due to the coupling of classes.

67
00:04:25.660 --> 00:04:26.699
如果你不上课，
And if you get rid of classes,

68
00:04:26.699 --> 00:04:30.759
你不需要做任何这些，这真的很了不起。
you don't have to do any of that, which is really quite remarkable.

69
00:04:32.470 --> 00:04:36.470
因此JavaScript提供的模型有时称为委托，
So the model that JavaScript provides is sometimes called delegation,

70
00:04:36.470 --> 00:04:39.879
一个对象只能做它能做的事情
where an object can only do what it can do and

71
00:04:39.879 --> 00:04:42.269
如果在那里，如果它被要求做一些它不能做的事情，
if there if it's asked to do something that it can't do,

72
00:04:42.269 --> 00:04:45.909
它将指定另一个对象来代表它完成工作。
it will designate another object to do that work on its behalf.

73
00:04:45.909 --> 00:04:50.259
这也称为差异继承，其中每个对象仅
This is also called differential inheritance, where each object will only

74
00:04:50.259 --> 00:04:55.000
包含将其与其继承的对象区分开来的材料。
contain the material which distinguishes it from the object that it inherits from.

75
00:04:57.310 --> 00:05:01.490
JavaScript中用于创建新对象的原语是object dot create，
The primitive in JavaScript for making a new object is object dot create,

76
00:05:01.490 --> 00:05:05.500
我们将一个对象传递给它，不幸的是，这个对象被称为原型，并且
where we pass it an object, which unfortunately is called a prototype, and

77
00:05:05.500 --> 00:05:08.399
我们创建了一个继承旧对象的新对象。
we make a new object that inherits from the old one.

78
00:05:08.399 --> 00:05:13.370
这里的Prototype这个词是有问题的，因为它太过载了。
The word prototype here is problematic because it's so overloaded.

79
00:05:14.649 --> 00:05:17.709
它的意思是，这是我们想要继承的对象。
All it means is, this is the object that we want to inherit from.

80
00:05:19.569 --> 00:05:22.459
所以让我们用图表来描述一下。
So let's diagram this.

81
00:05:22.459 --> 00:05:27.459
我要制作一个叫做母亲的物体，它有两个属性，
I'm gonna make up an object called mother, which will have two properties,

82
00:05:27.459 --> 00:05:29.899
a和b，其值为1和2。
a and b, whose values will be 1 and 2.

83
00:05:29.899 --> 00:05:32.870
这就是创建的数据结构。
And this is the data structure that is created.

84
00:05:32.870 --> 00:05:35.959
所以我们有我们的键值对和
So we've got our key value pairs and

85
00:05:35.959 --> 00:05:40.439
我们也有指向object.prototype的不可见指针。
we also have invisible pointer to object.prototype.

86
00:05:40.439 --> 00:05:42.409
所以无论何时你把一个对象变成文字，
So whenever you make an object literal,

87
00:05:42.409 --> 00:05:46.600
它最终将从object.prototype继承。
it will ultimately inherit from object.prototype.

88
00:05:46.600 --> 00:05:48.134
如果我做了一个女儿对象，
Then if I make a daughter object,

89
00:05:48.134 --> 00:05:51.990
我将使用object.创建母亲，因此我现在有了一个女儿。
I'll use object.create mother, so I now have a daughter.

90
00:05:53.170 --> 00:05:56.218
所以我得到了一个空的女儿对象，它是从母亲那里继承的。
So I've got an empty daughter object which inherits from mother.

91
00:05:59.159 --> 00:06:02.886
&gt；&gt；Douglas Crockford：所以，如果我说dayter.b+2，
&gt;&gt; Douglas Crockford: So if I say daughter.b + 2,

92
00:06:02.886 --> 00:06:07.720
原来这里没有价值。
originally there is no value here.

93
00:06:07.720 --> 00:06:12.069
所以我们得到了b的继承值，然后我们把2加到它上面，
So we get the inherited value of b, then we add two to it and

94
00:06:12.069 --> 00:06:14.370
把它储存在女儿身上。
store it in the daughter.

95
00:06:14.370 --> 00:06:18.889
因此，存储操作将始终进入最顶层的对象，但是
So storing operations will always go into the top most object, but

96
00:06:18.889 --> 00:06:21.540
阅读操作可以一直沿着原型链进行。
reading operations can go all the way down the prototype chain.

97
00:06:23.600 --> 00:06:26.610
我们可以让这些锁链走多长时间都行。
And we can have these chains go as long as you want.

98
00:06:27.709 --> 00:06:31.170
通常，这种语言中的链往往非常浅。
Generally, chains in this language tend to be very shallow.

99
00:06:31.170 --> 00:06:35.759
我们不会像你在古典语言中看到的那样深层次，但是
We don't get the deep hierarchies that you tend to see in classical languages but

100
00:06:35.759 --> 00:06:36.899
如果你想深入，你可以。
if you wanna go deep, you can.

101
00:06:39.389 --> 00:06:43.689
然后，我们可以向子对象添加材质
Then, we can add material to the daughter object

102
00:06:43.689 --> 00:06:48.540
它与母对象没有关系，所以我们可以添加更多的内容。
which has no relation to the mother object, so we can add more stuff.

103
00:06:48.540 --> 00:06:53.608
所以一般来说，我们使用它的方式是母对象将在哪里
So generally, the way we'll use this is the mother object will be where

104
00:06:53.608 --> 00:06:59.290
我们放入方法，然后实例将继承这些方法，好吗？
we put the methods, and then the instances will inherit those methods, okay?

105
00:07:02.492 --> 00:07:05.250
&gt；&gt；Douglas Crockford：还有一个表单Object.create(Null)，
&gt;&gt; Douglas Crockford: There's also a form Object.create (null),

106
00:07:05.250 --> 00:07:08.810
这将使对象没有继承任何东西。
which will make an object that inherits nothing.

107
00:07:08.810 --> 00:07:12.310
因此，您得到的对象不是从object.prototype继承的。
So you get an object that does not inherit from object.prototype.

108
00:07:12.310 --> 00:07:15.250
如果你想做点什么，这是很方便的
This is handy if you want to make something which is just

109
00:07:15.250 --> 00:07:18.350
一个装满东西的容器而你不想
a container of stuff and you don't want to

110
00:07:18.350 --> 00:07:21.959
被你可能从object.prototype继承来的东西弄糊涂了。
be confused by stuff that you might inherit from object.prototype.

111
00:07:21.959 --> 00:07:24.339
因此，这将更像一个哈希表。
So this will act much more like a hash table.
