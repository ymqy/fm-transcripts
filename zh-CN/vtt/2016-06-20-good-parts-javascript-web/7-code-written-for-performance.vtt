WEBVTT

1
00:00:00.000 --> 00:00:03.984
[音乐]
[MUSIC]

2
00:00:03.984 --> 00:00:06.762
&gt；&gt；Douglas Crockford：所以我需要说一些关于性能的事情，
&gt;&gt; Douglas Crockford: So I need to say something about performance,

3
00:00:06.762 --> 00:00:10.756
因为我有时听到需要表演作为借口
because I sometimes hear the need for performance as the excuse for

4
00:00:10.756 --> 00:00:13.099
为什么我们不能有好的风格。
why we can't have good style.

5
00:00:13.099 --> 00:00:15.269
事实证明，这些论点都是错误的。
It turns out those arguments are all wrong.

6
00:00:15.269 --> 00:00:18.250
特定于性能的代码通常是CRUFFY
Performance specific code is usually crufty

7
00:00:18.250 --> 00:00:20.814
因为我们正在从代码中去除通用性。
because we're removing generality from the code.

8
00:00:20.814 --> 00:00:24.359
我们增加了通过代码的路径，
We're increasing paths through the code,

9
00:00:24.359 --> 00:00:28.269
这使得测试和维护都变得更加困难。
which makes testing and maintenance all much harder to do.

10
00:00:28.269 --> 00:00:30.269
干净的代码更容易推理。
Clean code is much easier to reason about.

11
00:00:30.269 --> 00:00:34.969
因此，我们应该尽可能地保持代码的干净，尽可能长的时间。
So we should try to keep our code as clean as we can, for as long as we can.

12
00:00:34.969 --> 00:00:38.689
斯坦福大学的Donald Knuth说过早的优化是一切的根源
Donald Knuth of Stanford said that premature optimization is the root of all

13
00:00:38.689 --> 00:00:40.960
邪恶，这是真的。
evil, which is true.

14
00:00:40.960 --> 00:00:45.990
我们不应该试图优化任何代码，直到我们已经测量了它。
We should not attempt to optimize any code until we have measured it.

15
00:00:45.990 --> 00:00:50.070
然后我们应该做优化，然后我们应该再次测量。
We should then do the optimization, we should then measure again.

16
00:00:50.070 --> 00:00:52.340
如果我们没有得到显著的改善，
And if we did not get a significant improvement,

17
00:00:52.340 --> 00:00:56.240
然后，我们应该将更改视为bug，并将其退回。
then we should consider the change to be a bug and back it out.

18
00:00:56.240 --> 00:01:00.210
如果我们将CRUFT添加到代码库的原因是为了让它更快，
If the reason we added cruft to the code base was to make it faster,

19
00:01:00.210 --> 00:01:04.650
如果我们实际上没有获得显著的性能提升，
if we didn't actually obtain the significant performance increase,

20
00:01:04.650 --> 00:01:07.579
那么它就失败了，我们应该删除那个代码。
then it fails, and we should remove that code.

21
00:01:07.579 --> 00:01:09.510
所以量两次，切一次。
So measure twice, cut once.

22
00:01:09.510 --> 00:01:14.549
事实证明，大多数代码对性能的影响可以忽略不计，所以
It turns out most code has a negligible impact on performance, so

23
00:01:14.549 --> 00:01:19.189
我们应该只为优化花费最多时间的代码而烦恼。
we should only bother with optimizing the code that is taking the most time.

24
00:01:19.189 --> 00:01:22.870
您只有限的时间进行优化，所以
You have only a limited amount of time for doing optimization, so

25
00:01:22.870 --> 00:01:26.260
你不想浪费时间优化那些无关紧要的代码。
you don't wanna waste that time optimizing code that doesn't matter.

26
00:01:26.260 --> 00:01:28.659
你需要优化你的优化。
You need to optimize your optimizing.

27
00:01:30.200 --> 00:01:34.799
最后，算法替换比代码篡改更有效。
And finally, algorithm replacement is vastly more effective than code fiddling.

28
00:01:34.799 --> 00:01:39.277
所以如果你的代码很慢，因为你有一个n平方的循环，
So if your code is slow because you've got an n squared loop, fiddling with

29
00:01:39.277 --> 00:01:44.122
内环的细节对显着增加n没有影响。
the details of the inner loop will have no effect on significantly increasing n.

30
00:01:44.122 --> 00:01:49.201
唯一可行的方法是将代码替换为不同的
The only thing that could work is replacing that code with a different

31
00:01:49.201 --> 00:01:54.996
算法，可能是一个nlogn算法，然后可以得到一个更大的n。
algorithm in maybe an n log n algorithm, which can then get you a much larger n.

32
00:01:54.996 --> 00:01:59.870
并且，如果代码具有以下条件，那么这种更改就容易得多
And that kind of change is much easier to do if the code has

33
00:01:59.870 --> 00:02:03.019
尚未预先优化。
not already been pre-optimized.

34
00:02:03.019 --> 00:02:06.280
编程是人类所做的最复杂的事情。
Programming is the most complicated thing that humans do.

35
00:02:06.280 --> 00:02:10.237
计算机程序必须是完美的，而人类并不擅长完美，
Computer programs must be perfect and humans are not good at perfect,

36
00:02:10.237 --> 00:02:11.185
尤其是我。
especially me.

37
00:02:11.185 --> 00:02:15.055
我是一个有很大缺陷的人，但是我是一个很好的程序员，但是
I am a deeply flawed human being, but I'm a pretty good programmer, but

38
00:02:15.055 --> 00:02:18.239
它需要大量的努力和纪律。
it requires a tremendous amount of effort and discipline.

39
00:02:19.460 --> 00:02:22.840
因此，设计一种编程风格需要纪律。
So designing a programming style demands discipline.

40
00:02:22.840 --> 00:02:27.490
它并不是因为喜欢或漂亮或熟悉而选择特征。
It is not selecting features because they are liked or pretty or familiar.

41
00:02:27.490 --> 00:02:29.939
这是因为它可以帮助你降低错误率。
It's because it helps you to reduce your error rate.

42
00:02:31.569 --> 00:02:36.650
另一种选择是在深渊中花费更多的时间。
The alternative is spending more time in the abyss.

43
00:02:36.650 --> 00:02:37.659
你知道我在说什么。
You know what I'm talking about.

44
00:02:37.659 --> 00:02:41.930
那就是我们下到的寒冷，黑暗，伤害的地方，我们去的地方
That's that cold, dark, hurtful place we descend into where we go and

45
00:02:41.930 --> 00:02:43.659
与恶魔战斗并杀死虫子。
battle the demons and kill the bugs.

46
00:02:45.879 --> 00:02:48.979
当我第一次开始编程的时候，感觉很棒。
When I first started programming, it was wonderful.

47
00:02:48.979 --> 00:02:50.520
我突然顿悟了。
I was having this epiphany.

48
00:02:50.520 --> 00:02:55.170
我以为我有了一种新的方式来理解世界上的一切，而且
I thought I had this new way of understanding everything in the world, and

49
00:02:55.170 --> 00:02:56.150
我觉得很棒。
I thought it was great.

50
00:02:56.150 --> 00:03:00.159
我认为每个人都应该学习如何做到这一点，因为这真的是令人兴奋的事情。
I thought everybody should learn how to do this, cuz this is really exciting stuff.

51
00:03:00.159 --> 00:03:01.169
我再也不相信了。
I don't believe that anymore.

52
00:03:02.800 --> 00:03:07.500
我认为我们能够进行编程，因为有一些严肃的事情
I think that we are able to do programming because there's something seriously

53
00:03:07.500 --> 00:03:10.780
我们有问题。&gt；&gt；[笑]
wrong with us. &gt;&gt; [LAUGH]

54
00:03:10.780 --> 00:03:11.370
&gt；&gt；Douglas Crockford：普通人
&gt;&gt; Douglas Crockford: Normal people

55
00:03:11.370 --> 00:03:12.069
我不能这么做。
can't do this.

56
00:03:12.069 --> 00:03:16.000
如果一个正常人掉进了深渊，他们会马上回来说，
If a normal person goes down into the abyss, they come right back up and say,

57
00:03:16.000 --> 00:03:16.900
我在换专业。
I'm changing majors.

58
00:03:16.900 --> 00:03:18.180
我不知道你们这些人怎么了。
I don't know what's wrong with you people.

59
00:03:18.180 --> 00:03:18.680
我要离开这里。
I'm out of here.

60
00:03:20.000 --> 00:03:26.319
我们之所以能做到这一点，是因为我们患有健忘症，我们
We're able to do this because of this amnesia thing that we suffer from, that we

61
00:03:26.319 --> 00:03:30.500
忘记我们在那里度过了多少时间，忘记了我们在那里有多糟糕。
forget how much time we spend down there and how awful it is when we're down there.

62
00:03:31.659 --> 00:03:34.079
这就是让我们再次下去的原因。
And that's what allows us to go down there again.

63
00:03:34.079 --> 00:03:38.159
而且，我们是极大的乐观主义者，我们认为我们可以
Also, we're tremendous optimists, that we think that we can actually

64
00:03:38.159 --> 00:03:43.159
去那里，赢得比赛，然后回来，这是一件很棒的事情。
go down there and win and come back, and that's a great thing.

65
00:03:43.159 --> 00:03:45.300
我认为你不能既是乐观主义者又是程序员。
I don't think you can be an optimist and be a programmer.

66
00:03:45.300 --> 00:03:48.840
或者你必须是一个乐观主义者才能成为一个程序员，这是必要的。
Or you gotta be an optimist to be a programmer, it's just necessary.

67
00:03:48.840 --> 00:03:51.329
这也是为什么我们不能安排有价值的废话，对吧？
That's also why we can't schedule worth crap, right?

68
00:03:51.329 --> 00:03:52.439
那要花多长时间？
How long is that gonna take?

69
00:03:52.439 --> 00:03:55.191
而且进行得很好，它大约有那么多击键，所以
And go well, it's about that many keystrokes, so

70
00:03:55.191 --> 00:03:57.191
[声音]应该要花那么长时间。
[SOUND] it is should take about that long.

71
00:03:57.191 --> 00:03:59.159
我们忘了这件事，对吧？
We forget about that, right?

72
00:03:59.159 --> 00:04:00.930
那是大部分时间去的地方。
That's where most of the time goes.

73
00:04:00.930 --> 00:04:02.460
所以如果你想更有效率
So if you want to be more effective,

74
00:04:02.460 --> 00:04:07.360
更有效率，找到一种远离那里的方法，这就是最大的胜利。
more productive, figuring out a way to stay out of there, that's the big win.

75
00:04:07.360 --> 00:04:10.620
弄清楚如何减少击键次数是无关紧要的，对吧？
Figuring out how to reduce your keystrokes is irrelevant, right?

76
00:04:10.620 --> 00:04:12.877
你想优化那些占用你时间的东西。
You wanna optimize the thing that's taking your time.

77
00:04:12.877 --> 00:04:17.139
占用你时间的不是打字，而是打字。
And the thing that's taking your time isn't the typing, it's that.

78
00:04:19.660 --> 00:04:23.550
因此，JSLint风格是由自动检测缺陷的需求驱动的。
So the JSLint style was driven by the need to automatically detect defects.

79
00:04:25.100 --> 00:04:28.600
可以隐藏缺陷的表单被认为是有缺陷的。
And that forms that can hide defects are considered defective.

80
00:04:28.600 --> 00:04:30.240
即使他们当时不是虫子。
Even if they're not bugs that instant.

81
00:04:31.430 --> 00:04:33.139
所以当我开发JSLint时，
So when I was developing JSLint,

82
00:04:33.139 --> 00:04:36.240
Usenet上有一个叫做comped out lang.javascript的东西。
there was a thing called comped out lang.javascript on the Usenet.

83
00:04:36.240 --> 00:04:40.370
有无数的人说，我的程序不起作用。
And there was an endless stream of people saying, my program doesn't work.

84
00:04:40.370 --> 00:04:42.230
有人能告诉我为什么吗？
Can someone tell me why?

85
00:04:42.230 --> 00:04:44.590
所以我会把它们扔进JSLint，然后
And so I would take them and I'd throw them in JSLint, and

86
00:04:44.590 --> 00:04:46.399
有时候它会去，就在那里。
sometimes it'd go, there it is.

87
00:04:46.399 --> 00:04:49.100
有时它会去，它不能，为什么呢？
And sometimes it'd go, it couldn't, why is that?

88
00:04:49.100 --> 00:04:52.860
有时是因为他们使用的形式
And sometimes it was because they were using forms which made

89
00:04:52.860 --> 00:04:55.507
进一步分析该方案是不可能的。
further analysis of the program impossible.

90
00:04:55.507 --> 00:05:00.596
最终，我很不情愿地决定，
And eventually, reluctantly, I came to decide that,

91
00:05:00.596 --> 00:05:07.524
如果你是这样写的，你不需要这样写，那就有问题了，
if you're writing that way and you don't need to, then that's a problem,

92
00:05:07.524 --> 00:05:13.286
因为我们想让我们的程序让错误脱颖而出。
because we want to make our programs make the errors stand out.

93
00:05:13.286 --> 00:05:19.579
你可以通过一直写得更好来做到这一点。
And you can do that by writing better all the time.

94
00:05:19.579 --> 00:05:24.110
所以分设语言的想法并不是一个原创的想法，
So the idea of sub-setting a language is not an original idea,

95
00:05:24.110 --> 00:05:29.180
对于几乎每一种语言，您都希望将其划分为子集。
that for virtually every language you wanna subset it.

96
00:05:29.180 --> 00:05:31.600
据说只有疯子才会使用所有的C+。
It's been said only a madman would use all of C++.

97
00:05:31.600 --> 00:05:36.610
也有人说只有疯子才会使用C+，但这是一种
It's also been said only a madman would use C++, but that's a for

98
00:05:36.610 --> 00:05:39.850
下次吧。
another time.

99
00:05:39.850 --> 00:05:43.389
让每个人都使用相同的子集是有好处的。
And there is something nice about having everybody using the same subset.

100
00:05:43.389 --> 00:05:47.788
每个编写C+的团队都会计算出他们想要使用多少语言。
Every team writing C++ will figure out how much of the language they want to use.

101
00:05:49.199 --> 00:05:53.250
这是很好的，直到他们现在不得不接管别人的代码和
And that's fine until they now have to take over someone else's code and

102
00:05:53.250 --> 00:05:57.199
去吧，朋友，垃圾，你不需要处理那些东西。
go, friends, crap, you don't have to deal with that stuff.

103
00:05:57.199 --> 00:06:00.043
所以如果我们可以让每个人使用相同的子集，
So if we could get everybody using the same subset,

104
00:06:00.043 --> 00:06:04.564
这使得互操作性更加容易。&gt；&gt；Douglas Crockford：So
that makes interoperability a lot easier. &gt;&gt; Douglas Crockford: So

105
00:06:04.564 --> 00:06:06.050
会有虫子。
there will be bugs.

106
00:06:06.050 --> 00:06:10.120
我不能保证如果你采用一种更好的编程风格，你就可以没有bug，
I'm not promising that you can be bug free if you adopt a better programming style,

107
00:06:10.120 --> 00:06:14.040
但是你可以把赔率转移到你的有利位置，你肯定会赢，而且
but you can move the odds to your favor and you definitely win, and

108
00:06:14.040 --> 00:06:15.730
你这样做是免费的。
you do that at no cost.
