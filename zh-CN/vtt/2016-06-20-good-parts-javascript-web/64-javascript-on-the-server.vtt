WEBVTT

1
00:00:00.000 --> 00:00:04.112
[音乐]
[MUSIC]

2
00:00:04.112 --> 00:00:06.227
&gt；&gt；道格拉斯：这就是这些东西的来源
&gt;&gt; Douglas: That's where the stuff came from and

3
00:00:06.227 --> 00:00:10.256
因为初学者是用HyperCard编写的，我们知道它很容易
because the beginners were writing in HyperCard we know it's easy for

4
00:00:10.256 --> 00:00:14.570
初学者使用基于事件的系统并进行异步编程。
beginners to use event based systems and to do asynchronous programming.

5
00:00:14.570 --> 00:00:19.239
JavaScript在征服了浏览器之后，现在正在向服务器转移
JavaScript is now moving to the server after having conquered the browser it's

6
00:00:19.239 --> 00:00:22.582
现在转移到服务器，它也在那里征服，
now moving to the server and it's conquering there too,

7
00:00:22.582 --> 00:00:26.830
这很棒，因为它意味着我们开发的所有技能
which is great because it means all of the skill that we've developed and

8
00:00:26.830 --> 00:00:31.637
在浏览器端做一些事情，我们现在可以将这些技能带回服务器端
doing stuff on the browser side we can now bring those skills back to the server side

9
00:00:31.637 --> 00:00:35.329
这意味着你只需要真正掌握一种语言和
it means you only need to be really competent in one language and

10
00:00:35.329 --> 00:00:37.109
这可以帮助节省一些时间。
that can help save some time.

11
00:00:38.130 --> 00:00:42.740
不幸的是，服务器所做的与浏览器所做的有很大的不同。
Unfortunately what servers do is quite different than what browsers do.

12
00:00:42.740 --> 00:00:47.149
事实上，它是如此的不同，以至于您需要一个相当不同的编程模型。
In fact it's so different that you need a fairly different programming model.

13
00:00:49.020 --> 00:00:51.159
我们现在NODE中做服务器的事情。
We're doing server stuff now in node.

14
00:00:51.159 --> 00:00:54.320
节点在JavaScript事件循环中实现Web服务器。
Node implements a web server in a JavaScript event loop.

15
00:00:54.320 --> 00:00:56.200
这只是一个高性能的事件泵。
It's just a high performance event pump.

16
00:00:56.200 --> 00:01:00.170
它非常高效，非常快，可以做大量的工作。
It's very efficient, very fast, can do a tremendous amount of work.

17
00:01:00.170 --> 00:01:03.000
它第一次正确地执行文件I/O。
It does File I/O correctly for the first time.

18
00:01:04.299 --> 00:01:09.109
回到Fortran和COBOL，文件I/O一直是阻塞的，
Going all the way back to Fortran and COBOL, File I/O has always been blocking,

19
00:01:09.109 --> 00:01:12.439
在节点中，我们最终获得了非阻塞文件I/O。
and in node we finally get non blocking File I/O.

20
00:01:12.439 --> 00:01:15.859
我们异步这样做，所以当你想读一个文件时，
We do it asynchronously so when you wanna read a file,

21
00:01:15.859 --> 00:01:20.650
您传入一个文件名和一个回调函数，当读取文件时，
you pass in a filename and a callback function, and when the file is read,

22
00:01:20.650 --> 00:01:24.829
它会调用你的回调函数，你会得到数据，这很棒。
it'll call your callback function and you get the data, and it's great.

23
00:01:24.829 --> 00:01:28.620
因此程序不会阻止执行文件I/O，因为阻止会
And so the programs don't block on doing File I/O because blocking would

24
00:01:28.620 --> 00:01:31.632
违反转弯定律，我们就永远不会违反转弯定律。
violate the law of turns and we'd never violate the law of turns.

25
00:01:31.632 --> 00:01:36.584
我们注意到一切都是或可以是非阻塞的。
We note everything is or can be should be non blocking.

26
00:01:36.584 --> 00:01:40.229
不幸的是，就像所有与JavaScript有关的事情一样，
Unfortunately, like everything that has anything to do with JavaScript,

27
00:01:41.819 --> 00:01:43.579
节点并不是每件事都是正确的。
node doesn't get everything right.

28
00:01:43.579 --> 00:01:47.689
对于Node，有几件事我真的很不满意，
A couple of things that I'm really unhappy about with node,

29
00:01:47.689 --> 00:01:51.049
该节点具有许多烘焙到API中的同步函数。
is that node has a number of synchronous functions baked into the API.

30
00:01:51.049 --> 00:01:55.460
而这些同步功能会阻塞一切。
And these synchronous functions block everything.

31
00:01:55.460 --> 00:01:59.789
所以你从拥有一个非常快的高性能系统
And so you go from having a very fast high performance system

32
00:01:59.789 --> 00:02:04.750
到一个非常慢的低性能系统，因为你阻塞了。
to a very slow low performance system instantly because you're blocking.

33
00:02:04.750 --> 00:02:08.539
在完成同步调用之前，不会发生其他任何事情。
Nothing else gets to happen until the synchronous calls are done.

34
00:02:08.539 --> 00:02:11.719
我想宣布那些同步功能为非法。
I would like to outlaw those synchronous functions.

35
00:02:11.719 --> 00:02:15.120
不幸的是，我们在JavaScript社区中看到的
Unfortunately, what we've seen in the JavaScript community

36
00:02:15.120 --> 00:02:20.060
如果你把一些非常愚蠢的东西放到API中，有网络开发人员会说，
is if you put something really stupid into an API, there are web developers that say,

37
00:02:20.060 --> 00:02:23.370
我有权在那里使用它
I have a right to use it and there

38
00:02:23.370 --> 00:02:28.289
节点中的这些同步功能是永远不应该使用的，但因为
are these synchronous functions in node which should never be used but because

39
00:02:28.289 --> 00:02:33.259
他们在节点上，有人在使用他们，他们违反了转弯定律。
they're in node there are people using them and they violate the law of turns.

40
00:02:34.310 --> 00:02:38.840
然后我不喜欢Required的东西，因为它也是阻塞的。
Then I don't like the requires thing because it is also blocking.

41
00:02:38.840 --> 00:02:42.909
它在节点上第一个版本是异步的，
The very first version of it on node was asynchronous,

42
00:02:42.909 --> 00:02:47.060
这是正确的做法，有人抱怨这太难了，
which is the correct way to do it and there were complaints that it's too hard,

43
00:02:47.060 --> 00:02:52.030
它是由内到外的，我们只在早上开始工作
it's inside out and we only start things up in the morning

44
00:02:52.030 --> 00:02:57.620
当我们打开服务器，所以一旦他们热身了，那就无关紧要了。
when we turn the servers on and so once they get warmed up then it doesn't matter.

45
00:02:57.620 --> 00:03:00.080
这不是真的，然后我们总是让服务器启动和关闭。
That's not true and then we're bringing servers up and down all the time.

46
00:03:01.090 --> 00:03:03.969
任何阻挡的东西都是坏事。
Anything which blocks is a bad thing.

47
00:03:03.969 --> 00:03:08.662
幸运的是，在ES 6中，我们得到了一个新的模块系统，它取代了这一点，所以
Fortunately in ES 6 we're getting a new module system which obsoletes that, so

48
00:03:08.662 --> 00:03:09.909
那样会更好。
that will be better.

49
00:03:12.310 --> 00:03:15.949
但我们正在做的是，服务器与浏览器有很大的不同。
But what we're doing, servers are significantly different than browsers.

50
00:03:17.599 --> 00:03:21.250
在服务器中，我们处理的不是事件，而是消息。
In a server we're not dealing with events we're dealing with messages.

51
00:03:21.250 --> 00:03:23.420
现在消息来自网络。
Now message comes in from the network.

52
00:03:23.420 --> 00:03:25.210
我们会做些什么，我们会发出另一条信息。
We'll do something, we'll send another message out.

53
00:03:25.210 --> 00:03:26.110
都是关于信息的。
It's all about messaging.

54
00:03:27.159 --> 00:03:31.420
节点服务器类似于参与者，它是一种接收消息和
A node server is actor like and that it's a thing which receives messages and

55
00:03:31.420 --> 00:03:35.539
发送消息但我们的简单事件模型
sends messages but the simple events model that we

56
00:03:35.539 --> 00:03:40.610
在浏览器上使用并不真正适合我们在服务器上所做的工作流。
use on the browser doesn't really fit the workflows that we do on a server.

57
00:03:40.610 --> 00:03:45.900
例如，我们可能有一些东西需要几个连续的步骤，例如
For example, we may have things which take several sequential steps like

58
00:03:45.900 --> 00:03:50.590
一个请求进来，我们接受这个请求，我们必须发送一些东西到数据库，
a request comes in, we take that request, we have to send something to a database,

59
00:03:50.590 --> 00:03:53.180
找点东西回来，我们可以拿到这些信息，
get something back, we can take that information,

60
00:03:53.180 --> 00:03:56.199
我们用它去另一个数据库取回东西。
we use that to go to another database and get stuff back.

61
00:03:56.199 --> 00:03:58.879
这些事情中的每一件事都取决于前一件事。
Each of these things depends on the previous thing.

62
00:03:58.879 --> 00:04:00.469
你怎么做到的？
How do you do that?

63
00:04:00.469 --> 00:04:01.800
如果你不知道怎么做
If you don't know how to do it,

64
00:04:01.800 --> 00:04:04.930
天真的方法是编写深度嵌套的事件处理程序。
the naive approach is to write deeply nested event handlers.

65
00:04:04.930 --> 00:04:09.210
在一件事情的事件处理程序中，您发出下一个服务的请求，然后
In the event handler of one thing, you make a request of the next service and

66
00:04:09.210 --> 00:04:13.150
在它的事件处理程序中，您发出下一个请求，该请求导致代码
in it's event handler you make the request of the next one that leads to code which

67
00:04:13.150 --> 00:04:17.829
非常易碎，极难维护，性能低，
is extremely brittle, extremely hard to maintain, low performance,

68
00:04:17.829 --> 00:04:19.100
都是坏事。
it's all bad stuff.

69
00:04:21.100 --> 00:04:23.839
然后我们就有机会并行地做事情了。
Then we have the opportunity to do things in parallel.

70
00:04:23.839 --> 00:04:28.540
可能是一个请求传入，我们可以同时访问几个系统
It might be a request comes in and we can go to several systems at the same time

71
00:04:28.540 --> 00:04:33.509
因为请求不相互依赖，所以它们是独立的请求
because the requests are not dependent on each other so they're independent requests

72
00:04:33.509 --> 00:04:38.819
通过并行，我们可以改变
and by going in parallel, we get to change the performance of

73
00:04:38.819 --> 00:04:44.189
这件事很重要，因为不是等待每个人按顺序完成，
the thing significantly because instead of waiting for each to finish sequentially,

74
00:04:44.189 --> 00:04:46.800
我们不需要花那么多时间，我们只需要等待
instead of taking that much time, we only have to wait for

75
00:04:46.800 --> 00:04:51.170
这些东西中最慢的，通常时间要短得多。
the slowest of those things, which is usually a much shorter time.

76
00:04:51.170 --> 00:04:55.350
我们可以显着改进我们的响应处理。
We can significantly improve our response processing.

77
00:04:55.350 --> 00:05:00.283
不幸的是，这些请求中的每一个都可能到来
Unfortunately, each of these requests maybe coming

78
00:05:00.283 --> 00:05:05.009
在意想不到的时间和意想不到的订单回来，你是如何处理的？
back at unexpected times and an unexpected orders and how do you deal with that?

79
00:05:05.009 --> 00:05:09.240
你和一些人可能根本不会回来，你怎么处理这件事？
How do you and some might not come back at all and how do you deal with that?

80
00:05:09.240 --> 00:05:10.610
所以这很难。
And so that's hard.

81
00:05:10.610 --> 00:05:16.800
如果你不知道如何管理，那么天真的事情就是不要同时做。
If you don't know how to manage that naive thing is to not do it in parallel.

82
00:05:16.800 --> 00:05:21.410
相反，使用深度嵌套的事件处理程序按顺序执行，这同样是，
Instead, do it sequentially with deeply nested event handlers, which is, again,

83
00:05:21.410 --> 00:05:22.009
非常可怕。
quite awful.

84
00:05:23.500 --> 00:05:27.079
然后，除此之外，你可能不得不处理有限的时间。
Then in addition to that, you may have to deal with limited time.

85
00:05:27.079 --> 00:05:31.949
您可能有SLA或其他政策，要求我们必须在SO内得到响应
You may have SLAs or other policies which say we have to get a response within so

86
00:05:31.949 --> 00:05:35.649
很多毫秒，如果我们不这样做，我们就得去B计划。
many milliseconds and if we don't, we have to go to plan B.

87
00:05:35.649 --> 00:05:39.990
我们不能只是将请求挂起一段时间。
We can't just keep the request hanging for some amount of time.

88
00:05:39.990 --> 00:05:41.790
然后我们必须处理取消。
And then we have to deal with cancellation.

89
00:05:41.790 --> 00:05:46.500
如果我们去B计划，我们想停止所有不再必要的工作。
If we go to plan B, we want to stop all of the work which is no longer necessary.

90
00:05:46.500 --> 00:05:49.800
如何在深度嵌套的事件处理程序中完成所有这些事情？
How do you do all of those things in deeply nested event handlers?
