WEBVTT

1
00:00:00.025 --> 00:00:03.992
[音乐]
[MUSIC]

2
00:00:03.992 --> 00:00:07.517
&gt；&gt；Douglas：编写一个Collect函数，它接受一个生成器和一个数组，然后
&gt;&gt; Douglas: Write a collect function that takes a generator and an array and

3
00:00:07.517 --> 00:00:11.118
生成一个函数，该函数将收集数组中的结果。
produces a function that will collect the results in the array.

4
00:00:11.118 --> 00:00:14.567
所以，我们要制造一个类似国安局的发电机。
So, we're gonna make a generator that works like the NSA.

5
00:00:14.567 --> 00:00:17.253
它会监视一个功能
It's going to spy on a function and

6
00:00:17.253 --> 00:00:23.550
记录函数返回的所有有趣内容，好吗？
record everything interesting that that function returns, okay?

7
00:00:23.550 --> 00:00:29.182
首先，我们将设置一个空数组，Collect将在其中保存其内容，
First, we'll set up the empty array where collect is gonna keep its stuff,

8
00:00:29.182 --> 00:00:34.289
然后我们将调用Collect，将任何生成器和该数组传递给它，
then we'll call collect, passing it any generator and that array,

9
00:00:34.289 --> 00:00:40.453
它将返回一个生成器，它的工作方式与第一个生成器完全相同，
and it will return a generator, which will work exactly like the first generator,

10
00:00:40.453 --> 00:00:44.854
除了它将记录它返回的所有内容之外
except it will record everything that it returns except for

11
00:00:44.854 --> 00:00:51.468
未定义。&gt；&gt；道格拉斯：那么，
undefined. &gt;&gt; Douglas: So,

12
00:00:51.468 --> 00:00:53.689
我们可以给那个发电机打几次电话，然后
we can call that generator a few times, and

13
00:00:53.689 --> 00:00:57.779
然后我们可以查看数组中的内容，它将捕获这些值。
then we can look at what's in the array and it will have captured those values.

14
00:00:57.779 --> 00:01:01.180
所以，这里是Collect，Collect需要一个发电机，然后
So, here is collect, collect takes a generator and

15
00:01:01.180 --> 00:01:06.221
返回从生成器获取下一个值的函数的数组。
an array that returns a function that gets the next value from the generator.

16
00:01:06.221 --> 00:01:08.447
如果值不是未定义的，
If the value is not undefined,

17
00:01:08.447 --> 00:01:13.939
它将它推到数组的末尾，无论在哪种情况下，它都将返回值。
it pushes it on to the end of the array in either case it will return the value.

18
00:01:14.989 --> 00:01:16.388
那么，谁有用的东西呢？
So, who got something that works?

19
00:01:16.388 --> 00:01:20.539
[笑]这么近？
[LAUGH] So close?

20
00:01:20.539 --> 00:01:23.775
有人做什么有趣的事吗？&gt；&gt；演讲者2：你能回来吗
Anybody do something interesting? &gt;&gt; Speaker 2: Can you just return

21
00:01:23.775 --> 00:01:27.849
array.push值，而不是将返回值放在外部
array.push value instead of having the return value outside

22
00:01:27.849 --> 00:01:32.039
道格拉斯：我不记得是什么了
of the u? &gt;&gt; Douglas: I don't recall what it is

23
00:01:32.039 --> 00:01:33.349
那个数组推回来了。
that array.push returns.

24
00:01:33.349 --> 00:01:35.689
我认为它可能是数组的更新长度。
I think it might be an updated length of the array.

25
00:01:35.689 --> 00:01:36.920
有人知道吗？&gt；&gt；扬声器3：是的，
Does anyone know? &gt;&gt; Speaker 3: Yeah,

26
00:01:36.920 --> 00:01:38.804
听起来不错。&gt；&gt；道格拉斯：是的，所以
it sounds right. &gt;&gt; Douglas: Yeah, so

27
00:01:38.804 --> 00:01:42.280
不幸的是，arra.push还不够聪明，无法做到这一点。
unfortunately array.push isn't smart enough to do that.

28
00:01:45.030 --> 00:01:51.219
还有其他人吗，我们要去下一个吗？
Anybody else, we’re going onto the next one?

29
00:01:55.049 --> 00:01:59.079
编写一个接受生成器和谓词的筛选器函数。
Write a filter function that takes a generator and a predicate.

30
00:01:59.079 --> 00:02:03.569
谓词是返回布尔值TRUE或FALSE的函数，并且
A predicate is a function that returns a boolean true or false and

31
00:02:03.569 --> 00:02:08.120
生成一个生成器，该生成器仅生成谓词批准的值。
produces a generator that produces only the values approved by the predicate.

32
00:02:08.120 --> 00:02:11.800
因此，在本例中，我们将使用第三个函数进行过滤。
So, in this case, we're going to be filtering using the third function.

33
00:02:11.800 --> 00:02:17.500
第三个函数仅在以下情况下返回TRUE
The third function will return true only if

34
00:02:17.500 --> 00:02:22.509
它的参数可以被3整除，所以我们将使用它来选择
Its argument is divisible by 3, so we'll use that to select

35
00:02:22.509 --> 00:02:27.139
生成器给出的序列中的因子3。
factors of 3 from the sequence given by the generator.

36
00:02:27.139 --> 00:02:31.514
所以我们将把FromTo生成器设置为(0，5)，
So we'll have the fromTo generator going to (0, 5),

37
00:02:31.514 --> 00:02:35.889
和第三个函数，它将返回(0，3)和
and the third function, and it will return (0, 3) and

38
00:02:35.889 --> 00:02:40.439
那就是未定义。&gt；&gt；扬声器4：那么，
then undefined. &gt;&gt; Speaker 4: So,

39
00:02:40.439 --> 00:02:44.770
你在问，如果我按顺序调用这个，五次，
you're asking, if I call this sequentially, five times,

40
00:02:44.770 --> 00:02:48.659
我应该只得到零，三，还是未定义的？
I should only get zero, a three, or an undefined?

41
00:02:48.659 --> 00:02:51.069
这些不是我应该得到的前三个结果。
Those arent the first three results I should get.

42
00:02:51.069 --> 00:02:52.038
&gt；&gt；道格拉斯：这些就是结果。
&gt;&gt; Douglas: Those are the results.

43
00:02:53.360 --> 00:02:55.676
&gt；&gt；扬声器4：我打了三次电话
&gt;&gt; Speaker 4: I call the three times

44
00:02:55.676 --> 00:02:59.219
你们自己写的结果。道格拉斯：好的，
the results yourselves write. &gt;&gt; Douglas: Okay,

45
00:02:59.219 --> 00:03:04.270
让我们来看看过滤器，那么每个人都知道他们需要使用一个循环吗？
let's look at filter, so did everybody figure out they need to use a loop?

46
00:03:05.560 --> 00:03:09.949
是的，这是这个的关键，所以非常好。
Yeah, that was a key to this one, so very good.

47
00:03:09.949 --> 00:03:13.580
我们会讲到这一点，所以这里有一种编写过滤器的方法。
We'll get to that, so here's one way to write filter.

48
00:03:13.580 --> 00:03:15.069
好吧，首先，谁有用的东西？
Well, first off, who got something that works?

49
00:03:15.069 --> 00:03:19.235
非常好，所以过滤器需要一个生成器和一个谓词
Very good, so filter takes a generator and a predicate and

50
00:03:19.235 --> 00:03:24.420
返回一个函数，该函数将停留在循环中，调用生成器，
returns a function, which will stay in a loop, calling the generator,

51
00:03:24.420 --> 00:03:28.502
直到它获得谓词批准的值。
until it gets a value which is approved by the predicate.

52
00:03:28.502 --> 00:03:31.836
在这种情况下，它将退出返回值，并且
In which case it will drop out in return the value, and

53
00:03:31.836 --> 00:03:34.093
这是一种可以接受的方式。
that's an acceptable way to do it.

54
00:03:34.093 --> 00:03:39.689
虽然在EF6中，我在EF6中最喜欢的新功能是
Although in EF6, my most favorite new feature in EF6 is going to

55
00:03:39.689 --> 00:03:44.340
是尾递归，或者是适当的尾部调用，这会让我们这样写它。
be tail recursion, or proper tail calls, which would let us write it like this.

56
00:03:45.370 --> 00:03:50.409
我们将有一个递归函数，我称之为recur，并且
We're going to have a recursive function that I'm calling recur, and

57
00:03:50.409 --> 00:03:54.240
它将继续调用自己，直到谓词变为true。
it will continue to call itself until the predicate becomes true.

58
00:03:56.590 --> 00:03:59.550
所以，这就是它自称的地方，而且
So, this is where it calls itself, and

59
00:03:59.550 --> 00:04:04.860
这需要语言中的新功能的原因是，在ES6中，
the reason why this needs a new feature in the language Is that, in ES6,

60
00:04:04.860 --> 00:04:09.919
编译器需要优化该调用。
the compiler is required to optimize that call.

61
00:04:09.919 --> 00:04:13.159
所以，不是先打个电话，然后再回电话，
So, instead of doing a call and then a return,

62
00:04:13.159 --> 00:04:16.259
它将跳回到recur函数。
it will do a jump back to the recur function.

63
00:04:16.259 --> 00:04:19.110
因此，此函数将在同一时间运行，并且
So, this function will run in the same time and

64
00:04:19.110 --> 00:04:22.920
与先前的记忆压力相同。
same memory pressure as the earlier one.

65
00:04:23.930 --> 00:04:28.199
在这一点上，将不再有使用循环而不是递归的优势，
At this point, there will no longer be an advantage to using loops over recursion,

66
00:04:29.300 --> 00:04:35.259
这很棒，所以我真的很期待。
and that's great, so I'm really looking forward to that.

67
00:04:35.259 --> 00:04:37.930
其他人做第三种方法或者
Anybody else do a third approach or

68
00:04:37.930 --> 00:04:39.779
还有别的吗？&gt；&gt；发言人3：我认为应该有
any other? &gt;&gt; Speaker 3: I think there should

69
00:04:39.779 --> 00:04:42.959
成为使用[咳嗽]姿势的一种方式
be a way to use that [COUGH] pose

70
00:04:44.970 --> 00:04:49.959
函数，调用函数上的函数。
function that we wrote earlier, calling a function on a function.

71
00:04:49.959 --> 00:04:52.819
嗯，我们并不是真的对一个函数调用一个函数，但是
Well, we're not really calling a function on a function, but

72
00:04:52.819 --> 00:04:57.379
感觉我们是。&gt；&gt；扬声器4：[听不到]因为
it feels like we are. &gt;&gt; Speaker 4: [INAUDIBLE] because

73
00:04:57.379 --> 00:04:58.899
他们太习惯Python了。
they're so used to Python.

74
00:05:00.079 --> 00:05:04.966
你可以，如果你回头看的话。&gt；&gt；道格拉斯：是的，混淆了
You could, if you look back to it. &gt;&gt; Douglas: Yeah, confused for

75
00:05:04.966 --> 00:05:06.509
有一阵子了。
awhile there.

76
00:05:08.139 --> 00:05:12.670
我实际上认为我们有太多的循环语句。
I actually think that we have too many looping statements.

77
00:05:12.670 --> 00:05:16.870
如果只有我一个人，那就是一个循环，就是这样。
If it were just me, it would be a loop, and that would be it.

78
00:05:16.870 --> 00:05:23.651
你知道，循环括号，所有的事情都会在里面发生。
You know, loop bracket, and everything would happen in that.

79
00:05:23.651 --> 00:05:27.567
是的，因为我发现，嗯，我不再经常使用循环了。
Yeah, because I find, well, I'm not using loops much anymore.

80
00:05:27.567 --> 00:05:31.504
但是，当我这样做的时候，我倾向于打破中间状态，并且
But, when I do, I tend to want to break out of the middle, and

81
00:05:31.504 --> 00:05:35.598
我们有一个循环语法，它说将突破顶部，
we've got a loop syntax, which says will break out of the top,

82
00:05:35.598 --> 00:05:40.829
将打破底部，但那通常不是我要去的地方。
will break out of the bottom, but that's not usually where I'm going.

83
00:05:40.829 --> 00:05:44.300
如果我使用的是这种规则的循环，
If I'm using a loop that is that discipline,

84
00:05:44.300 --> 00:05:45.939
我可能根本不需要使用循环。
I probably don't need to use a loop at all.

85
00:05:48.379 --> 00:05:49.019
还有人吗？
Anybody else?

86
00:05:51.800 --> 00:05:53.769
好的，那么我们要不要继续讲另一个？
Okay, so shall we go on to another one?

87
00:05:53.769 --> 00:05:54.879
当然，有何不可？
Sure, why not?

88
00:05:54.879 --> 00:05:56.730
好的，让我们再做一次，
Okay, so let's do one more,

89
00:05:58.259 --> 00:06:01.259
这一次，我们将把几个函数连接在一起。
this time we're going to concatenate a couple of functions together.

90
00:06:02.490 --> 00:06:05.850
因此，编写一个concat函数，它需要两个生成器和
So, write a concat function that takes two generators and

91
00:06:05.850 --> 00:06:08.470
生成组合其序列的生成器。
produces a generator that combines their sequences.

92
00:06:08.470 --> 00:06:13.036
所以，我们将调用concat，我们将向它传递一个生成器，即
So, we're going to call concat, we're going to pass it a generator, which is

93
00:06:13.036 --> 00:06:18.146
从(2，0)到3，从(2，0)到2，这将给我们一个新的生成器，
from (2, 0) to 3, and from (2, 0) to 2, and that will give us a new generator,

94
00:06:18.146 --> 00:06:23.154
这将产生序列(0，1)，(2，0)，1，然后未定义。
which will produce the sequence (0, 1), (2, 0), 1, and then undefined.

95
00:06:25.564 --> 00:06:29.165
所以，这里是Concat，它需要两个生成器函数。
So, here's concat, it takes two generator functions.

96
00:06:29.165 --> 00:06:34.170
它有一个变量来记住当前生成器函数是什么。
It has a variable to remember what the current generator function is.

97
00:06:34.170 --> 00:06:38.540
它返回一个函数，该函数从当前生成器中获取一个值。
It returns a function which gets a value from the current generator.

98
00:06:38.540 --> 00:06:41.399
如果值不是未定义的，则返回该值。
If a value is not undefined, it returns it.

99
00:06:41.399 --> 00:06:45.490
否则，它将用下一个生成器替换当前的生成器，并且
Otherwise it replaces the current generator with the next generator and

100
00:06:45.490 --> 00:06:46.620
从中返回一个值。
returns a value from that.

101
00:06:47.774 --> 00:06:51.175
那么谁有什么东西能永远起作用呢。
So who got something that works for good.

102
00:06:51.175 --> 00:06:55.593
有没有人采取不同的方法。&gt；&gt；扬声器4：[听不见]
Anyone take a different approach. &gt;&gt; Speaker 4: [INAUDIBLE]

103
00:06:55.593 --> 00:07:02.360
临时发电机
temporary generator.

104
00:07:02.360 --> 00:07:04.586
道格拉斯：因为。
&gt;&gt; Douglas: Because.

105
00:07:04.586 --> 00:07:09.079
明年，当我们有.
Next year, when we have the...

106
00:07:09.079 --> 00:07:12.899
事情，那么我想这样写。
thing, then I want to write it this way.

107
00:07:12.899 --> 00:07:16.720
而我可以使用任意数量的发电机，并且
Whereas I can take any number of generators, and

108
00:07:16.720 --> 00:07:20.949
我将使用我们之前编写的元素函数来帮助我执行步骤
I'm going to be using the element function that we wrote earlier to help me step

109
00:07:20.949 --> 00:07:25.680
通过生成器数组，我将加载下一个生成器。
through that array of generators, and I'll just Load the next one in.

110
00:07:27.420 --> 00:07:30.459
所以这就是为什么，我不是故意炫耀的，但是
So that's why, I didn't mean to show off but but

111
00:07:30.459 --> 00:07:34.740
这就是为什么。&gt；&gt；发言人2：氏族是什么？
that's why. &gt;&gt; Speaker 2: What are the gens?

112
00:07:36.090 --> 00:07:39.764
&gt；&gt；扬声器4：让我们看看前面的
&gt;&gt; Speaker 4: Let's see the previous

113
00:07:39.764 --> 00:07:42.951
滑动。&gt；&gt；扬声器4：层返回
slide. &gt;&gt; Speaker 4: Layer returning

114
00:07:42.951 --> 00:07:47.379
代之以价值。&gt；&gt；Douglas：返回结果
gen instead of value. &gt;&gt; Douglas: returning the result of

115
00:07:47.379 --> 00:07:53.269
大屠杀和所谓的简单价值，因为我认为价值它是通用汽车。
the Holocaust and call easy value as I see value it was G.M.

116
00:07:53.269 --> 00:07:55.959
如果它不成功，你就叫它。
and if it doesn't succeed you're calling it a.

117
00:07:55.959 --> 00:07:59.949
你知道她只是倾向于走到下一台发电机。
You know she just tends to just get to the next generator.

118
00:08:01.029 --> 00:08:02.040
称它为彼此的呼唤
Call it the call that each other

119
00:08:07.879 --> 00:08:13.019
相当艰难的任务一变了因为这是第一次
pretty tough assignment one changes because it's the first

120
00:08:13.019 --> 00:08:17.365
时间三个原因只有一秒时间三个原因
time three cause just one second time three cause

121
00:08:17.365 --> 00:08:23.970
你第三次因为你路过
your third time three cause you're passing

122
00:08:25.120 --> 00:08:29.610
假设你是1到4乘以3，因为Jack Money低于5
suppose you're one to the fourth time three because Jack money gets under five

123
00:08:30.759 --> 00:08:35.909
美分Janda Gentoo返回Gentoo的结果或
cents JANDA Gentoo returns a result of Gentoo or

124
00:08:35.909 --> 00:08:39.169
我们有一个好的。&gt；&gt；扬声器4：尚未
we have a OK. &gt;&gt; Speaker 4: Yet

125
00:08:39.169 --> 00:08:41.250
回来告诉你我期待着回来所以
to return to tell you I was expecting to return so

126
00:08:41.250 --> 00:08:44.309
这也是下一件事。道格拉斯：是的。
That's as well the next stuff. &gt;&gt; Douglas: Yeah.

127
00:08:44.309 --> 00:08:45.149
&gt；&gt；扬声器4：你说的是价值
&gt;&gt; Speaker 4: You said value

128
00:08:45.149 --> 00:08:45.950
等于Gen2。&gt；&gt；道格拉斯：对。
equals gen2. &gt;&gt; Douglas: Right.

129
00:08:45.950 --> 00:08:48.450
我不可能在VF里面做那个生意。
I couldn't have done that business inside of vf.

130
00:08:48.450 --> 00:08:50.769
我本来可以逆转的。&GT；&GT；扬声器4：好的，
I could have reversed it. &gt;&gt; Speaker 4: Okay,

131
00:08:50.769 --> 00:08:51.610
我抓到你了。&gt；&gt；道格拉斯：是的，对。
I gotcha you now. &gt;&gt; Douglas: Yeah, right.

132
00:08:51.610 --> 00:08:55.240
你觉得那样做会更清楚吗？
You think it would have been clearer doing it that way?

133
00:08:55.240 --> 00:08:56.250
&gt；&gt；扬声器4：嗯，我更喜欢有一个
&gt;&gt; Speaker 4: Well, I prefer to have one

134
00:08:56.250 --> 00:09:01.332
我想，还不止两个吧。&GT；&GT；道格拉斯：我会考虑的。
return than two, I guess. &gt;&gt; Douglas: I'll think about that.

135
00:09:01.332 --> 00:09:02.893
&gt；&gt；扬声器2：那么，当您的下一个函数
&gt;&gt; Speaker 2: So, when your next function

136
00:09:02.893 --> 00:09:04.947
你的&GT；&GT；道格拉斯：那么下一个。
your &gt;&gt; Douglas: Then next.

137
00:09:04.947 --> 00:09:07.330
&gt；&gt；扬声器2：[咳嗽]
&gt;&gt; Speaker 2: [COUGH]

138
00:09:07.330 --> 00:09:08.106
元素是什么？
What's element?

139
00:09:08.106 --> 00:09:09.823
&gt；&gt；Douglas：element是我们编写的函数
&gt;&gt; Douglas: Element is a function we wrote

140
00:09:09.823 --> 00:09:12.172
今天早上。&gt；&gt；扬声器2：是的。
this morning. &gt;&gt; Speaker 2: Yeah.

141
00:09:12.172 --> 00:09:14.623
&GT；&GT；道格拉斯：你记得这一点。
&gt;&gt; Douglas: You remember that.

142
00:09:14.623 --> 00:09:15.437
&gt；&gt；扬声器2：弹出，
&gt;&gt; Speaker 2: It pops off,

143
00:09:15.437 --> 00:09:17.961
它跳到下一个。道格拉斯：是的。
it pops off to the next. &gt;&gt; Douglas: Yeah.

144
00:09:17.961 --> 00:09:19.477
&gt；&gt；扬声器2：弹出。
&gt;&gt; Speaker 2: Just pops.

145
00:09:19.477 --> 00:09:21.010
&gt；&gt；Douglas：它返回来自
&gt;&gt; Douglas: It returns the next thing from

146
00:09:21.010 --> 00:09:23.355
一个数组。&gt；&gt；扬声器2：不是因为弹出它。
an array. &gt;&gt; Speaker 2: Not because of pop it.

147
00:09:23.355 --> 00:09:28.134
道格拉斯：你应该，
&gt;&gt; Douglas: You should,

148
00:09:28.134 --> 00:09:34.720
我们做了两次&GT；&GT；扬声器2：是的，就在那里。
we did it twice &gt;&gt; Speaker 2: Yeah, there it is.
