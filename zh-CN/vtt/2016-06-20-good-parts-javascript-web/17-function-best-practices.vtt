WEBVTT

1
00:00:00.025 --> 00:00:04.248
[音乐]
[MUSIC]

2
00:00:04.248 --> 00:00:07.924
&gt；&gt；Douglas Crockford：JavaScript函数具有return语句return语句
&gt;&gt; Douglas Crockford: JavaScript functions have return statements return statement

3
00:00:07.924 --> 00:00:11.869
停止函数的执行，将控制权返回给调用者，并
stops the execution of the function returns control to the caller and

4
00:00:11.869 --> 00:00:13.990
也可以选择返回值。
can also optionally return a value.

5
00:00:15.650 --> 00:00:18.536
包含的RETURN语句可以采用表达式和
Return statement contained can take an expression and

6
00:00:18.536 --> 00:00:21.109
将计算表达式，返回其值或
will evaluate the expression return its value or

7
00:00:21.109 --> 00:00:24.007
您可以有一个不返回任何内容的RETURN语句。
you can have a return statement that returns nothing.

8
00:00:24.007 --> 00:00:26.425
它实际上将返回值undefined或
It will actually return the value undefined or

9
00:00:26.425 --> 00:00:30.579
如果函数落到底部，它将返回未定义的值。
if the function falls through the bottom, it will return the undefined value.

10
00:00:33.445 --> 00:00:37.070
&gt；&gt；Douglas Crockford：我建议您不要在循环中创建函数对象。
&gt;&gt; Douglas Crockford: I recommend that you not make function objects in a loop.

11
00:00:37.070 --> 00:00:41.005
它可能是浪费的，因为每个新的函数对象都是在
It can be wasteful, because every new function object is created on

12
00:00:41.005 --> 00:00:43.776
每次迭代，所以可能会很昂贵。
every iteration, so that could be expensive.

13
00:00:43.776 --> 00:00:48.337
它也可能会让人混淆，因为新函数在循环上闭合
It can also be confusing, because the new function closes over the loops

14
00:00:48.337 --> 00:00:53.219
变量没有超过它们的当前值，这种混淆可能会导致错误。
variables not over their current values and that confusion can lead to bugs.

15
00:00:53.219 --> 00:00:58.334
例如，这里我们有一个for循环，它将循环
For example, here we've got a for loop, which is going to loop over

16
00:00:58.334 --> 00:01:03.088
一个div数组，它将向每个div添加一个单击处理程序，
an array of divs and it's gonna add a click handler to each one,

17
00:01:03.088 --> 00:01:06.947
当点击它时，将警告div的id，并且
which when clicked on will alert the id of the div and

18
00:01:06.947 --> 00:01:11.390
这段代码看起来非常简单，但它会失败。
this code looks very straightforward, but it will fail.

19
00:01:11.390 --> 00:01:15.718
不管你点击哪个分区，它都会失败，
And the way it fails is no matter which div you click on,

20
00:01:15.718 --> 00:01:19.140
它们都将显示相同的ID。
they will all display the same id.

21
00:01:19.140 --> 00:01:20.625
这将是最后一个
It'll be the last one and

22
00:01:20.625 --> 00:01:25.510
这是因为内部函数捕获的是
it's because what's being captured by the inner function is the current value of

23
00:01:25.510 --> 00:01:30.418
div.id不是创建函数时div.id的值。
div.id not not the value of div.id the at the time that the function was created.

24
00:01:30.418 --> 00:01:34.974
所以绕过这一点的方法是根本不使用四个循环，
So the way to get around that is to not use a four loop at all,

25
00:01:34.974 --> 00:01:38.230
每个使用四个并将传入一个函数，
use four each and will pass in a function,

26
00:01:38.230 --> 00:01:43.829
其将接收每个div作为参数并且将正确地提醒。
which will receive each div of as an argument and will alert correctly.

27
00:01:46.770 --> 00:01:50.358
&gt；&gt；Douglas Crockford：我们调用带有配对后缀运算符的函数，
&gt;&gt; Douglas Crockford: We invoke functions with the pairing suffix operator,

28
00:01:50.358 --> 00:01:54.405
它将包含零个或多个逗号分隔的参数，并且
which will surround zero or more comma separated arguments and

29
00:01:54.405 --> 00:01:59.460
这些参数中的每一个都将绑定到函数的一个参数。
each of those arguments will be bound to one of the parameters of the function.

30
00:01:59.460 --> 00:02:01.920
如果使用太多参数调用函数，
If a function is called with too many arguments,

31
00:02:01.920 --> 00:02:03.659
忽略额外的参数。
the extra arguments are ignored.

32
00:02:03.659 --> 00:02:05.560
这不是错误。
It is not an error.

33
00:02:05.560 --> 00:02:08.317
如果调用参数的参数太少，
If an argument is called with too few arguments,

34
00:02:08.317 --> 00:02:11.081
缺少的值将是未定义的值。
the missing values will be the undefined value.

35
00:02:11.081 --> 00:02:14.683
如果没有对参数、其类型或
If there is no explicit type checking on the arguments, on their types or

36
00:02:14.683 --> 00:02:15.639
在他们的数字上。
on their numbers.

37
00:02:15.639 --> 00:02:20.460
所以如果你真的关心那些东西，你需要自己去检查。
So if you really care about that stuff, you need to check it yourself.

38
00:02:20.460 --> 00:02:22.340
一般来说，你不需要这样做。
Generally, you don't have to.

39
00:02:22.340 --> 00:02:24.939
事实证明，JavaScript中的大多数默认值都是正确的。
It turns out most of the defaults in JavaScript are right.

40
00:02:24.939 --> 00:02:30.539
所以如果你不检查，它通常会做正确的事情。
So that if you don't do checking, it'll usually do the right thing anyway.

41
00:02:32.259 --> 00:02:37.638
所以除了正式定义为函数一部分的任何参数之外，
So in addition to any parameters that are formally defined as part of a function,

42
00:02:37.638 --> 00:02:42.305
还有两个额外的伪参数，您也可以访问它们
there are also two bonus pseudo parameters that you can also get access

43
00:02:42.305 --> 00:02:43.906
争论和这个。
to arguments and this.

44
00:02:43.906 --> 00:02:46.192
我不推荐使用它们中的任何一个，但是
I don't recommend using either of them, but

45
00:02:46.192 --> 00:02:48.490
他们在语言中都很受欢迎。
they're both very popular in the language.

46
00:02:48.490 --> 00:02:49.930
所以，我需要描述他们两个。
So, I'd need to describe them both.

47
00:02:49.930 --> 00:02:52.270
我将从论点开始。
I will start with the arguments.

48
00:02:52.270 --> 00:02:56.228
当调用函数时，除了其参数外，它还会获得一个特殊的
When a function is invoked in addition to its parameters, it also gets a special

49
00:02:56.228 --> 00:03:01.060
打印机调用了参数，它包含来自调用的所有参数。
printer called arguments and it contains all of the arguments from the invocation.

50
00:03:01.060 --> 00:03:05.414
所以在parens中传递的所有内容都被称为函数，
So everything that got passed in the parens are called the function,

51
00:03:05.414 --> 00:03:09.030
这些值中的每一个都将在参数组中。
every one of those values will be in the arguments array.

52
00:03:09.030 --> 00:03:12.629
现在参数组的一个问题是，它不是真正的数组，
Now one problem with the arguments array is, it is not really an array,

53
00:03:12.629 --> 00:03:15.455
即使是以JavaScript认为数组的奇怪方式。
even in the weird way that JavaScript thinks of arrays.

54
00:03:15.455 --> 00:03:17.686
它是一个类似数组对象。
It is an array like object.

55
00:03:17.686 --> 00:03:23.818
它是一个具有长度属性的对象，但它不是神奇的长度属性
It's an object that has a length property, but it's not a magical length property and

56
00:03:23.818 --> 00:03:27.610
它没有继承任何有用的数组方法。
it doesn't inherit any of the useful array methods.

57
00:03:27.610 --> 00:03:30.409
所以，这是一件很难处理的事情。
So, it's a difficult thing to work with.

58
00:03:30.409 --> 00:03:34.872
您确实获得了参数dot length，这将是
You do get arguments dot length, which will be the number of arguments that were

59
00:03:34.872 --> 00:03:38.949
实际上通过了，并且与参数之间有一个奇怪的交互。
actually passed and there's a weird interaction with the parameters.

60
00:03:40.180 --> 00:03:46.538
因此，如果将参数更改为零以下，则第一个参数也会更改。
So if you change arguments sub zero, the first parameter also changes.

61
00:03:46.538 --> 00:03:49.860
如果更改第二个参数，则参数sub 1将更改为
If you change the second parameter, then argument sub one changes for

62
00:03:49.860 --> 00:03:51.840
制作JavaScript引擎的人。
the people who make JavaScript engines.

63
00:03:51.840 --> 00:03:55.408
这可能是语言中最令人讨厌的特性，
This is maybe the most hated feature of the language,

64
00:03:55.408 --> 00:03:59.372
因为他们真的很努力想让它走得更快
cuz they're working really hard to try to make it go fast and

65
00:03:59.372 --> 00:04:03.680
当你必须处理像那样的行为时，你不能走得太快。
you can't go fast when you have to mess with behavior like that.

66
00:04:03.680 --> 00:04:06.668
所以，让我给你展示一个如何使用它的例子。
So, let me show you an example of how you could use it.

67
00:04:06.668 --> 00:04:11.097
所以我们得到了一个简单的SUM函数，它将接收一些可变数量的
So we've got a simple sum function, which will receive some variable number of

68
00:04:11.097 --> 00:04:14.020
数字，它会将它们相加并返回总数。
numbers and it will add them up and return the total.

69
00:04:15.889 --> 00:04:20.160
因此，我们将从长度和
So, we're going to get from arguments that length and

70
00:04:20.160 --> 00:04:22.490
我们要添加的东西的数量。
the number of things that we're going to add.

71
00:04:22.490 --> 00:04:26.589
我们会循环进去，我们会得到每一个论点，
We're gonna loop through in and we're gonna get each of those arguments,

72
00:04:26.589 --> 00:04:28.240
并将其加到总和中。
and add it to the total.

73
00:04:28.240 --> 00:04:34.620
注意，我没有在一些中包含任何参数，因为我不需要，我可以这样做。
Notice I didn't include any parameters in some, cuz I didn't need to I could have.

74
00:04:34.620 --> 00:04:39.170
但这并不是必须的，因为我从争论中获得了所有的材料。
But it wasn't necessary, because I'm getting all the material from arguments.

75
00:04:42.840 --> 00:04:46.012
&gt；&gt；Douglas Crockford：所以现在这真的是一件很难做到的事情
&gt;&gt; Douglas Crockford: So now this is a really difficult thing to have

76
00:04:46.012 --> 00:04:50.779
在任何一种语言中，因为它使语言很难谈论。
in any language, because it makes the language hard to talk about.

77
00:04:51.800 --> 00:04:55.209
这就像是与Abbott和Costello结对编程。
It's like pair programming with Abbott and Costello.

78
00:04:55.209 --> 00:04:57.100
所以，请容忍我。
So, bear with me.

79
00:04:57.100 --> 00:05:01.550
因此，this参数包含对调用对象的引用。
So, the this parameter contains a reference to the object of invocation.

80
00:05:02.610 --> 00:05:05.870
这允许方法知道它与什么对象相关。
This allows a method to know what object it is concerned with.

81
00:05:05.870 --> 00:05:09.326
这允许单个函数对象为多个对象提供服务，并且
This allows a single function object to service many objects and

82
00:05:09.326 --> 00:05:11.629
这是原型遗传的关键。
it's the key to prototypal inheritance.

83
00:05:13.779 --> 00:05:17.509
&gt；&gt；Douglas Crockford：在JavaScript中有四种调用函数的方法。
&gt;&gt; Douglas Crockford: There are four ways to call a function in JavaScript.

84
00:05:18.689 --> 00:05:22.314
函数形式，方法形式，构造函数形式和应用形式，
The function form, method form, constructor form and apply form,

85
00:05:22.314 --> 00:05:23.009
四种形式。
four forms.

86
00:05:23.009 --> 00:05:27.403
我认为在一个设计良好的语言中，应该有一种形式，但是
I think in a well-designed language, there should be one form, but

87
00:05:27.403 --> 00:05:31.439
我们有四个，它们的不同之处在于发生了什么。
we've got four and the way they vary is in what happens to this.

88
00:05:33.470 --> 00:05:35.370
因此，让我们从方法表单开始。
So, let's start with the method form.

89
00:05:35.370 --> 00:05:40.290
我们说，方法形成了一些对象点方法名称或
The method form, we say, some object dot method name or

90
00:05:40.290 --> 00:05:45.319
一些对象括号，计算结果为方法名的表达式。
some object bracket, an expression that evaluates to a method name.

91
00:05:45.319 --> 00:05:49.740
当我们以这种方式调用一个函数时，它将被绑定到这个对象上。
When we call a function this way, then this will get bound to this object.

92
00:05:51.730 --> 00:05:56.269
它允许被调用的方法知道它将指向哪个对象
It allows the method that gets called to know which object it's going to

93
00:05:56.269 --> 00:05:58.379
操控。
be manipulating.

94
00:05:58.379 --> 00:06:02.312
在大多数语言中，绑定发生得相当晚，但是
In most languages, the binding of this happens fairly late, but

95
00:06:02.312 --> 00:06:04.610
没有人比JavaScript更晚做这件事。
nobody does it as late as JavaScript.

96
00:06:04.610 --> 00:06:09.444
Java脚本直到调用的那一刻才绑定它，
Java Script doesn't bind this until the moment of invocation,

97
00:06:09.444 --> 00:06:13.742
然后是函数形式，看起来是一样的，
then there's the function form, which looks the same,

98
00:06:13.742 --> 00:06:16.860
只是我们没有对象前缀。
except we don't have an object prefix.

99
00:06:16.860 --> 00:06:20.540
所以，我们只有一些函数值，我们称之为。
So, we just have some function value and we call that.

100
00:06:20.540 --> 00:06:23.733
在这种情况下，这会被反弹到全局对象。
In this case, this gets bounced to the global object.

101
00:06:23.733 --> 00:06:27.988
它是所有全局变量的容器
It's the thing that is the container of all the global variables and

102
00:06:27.988 --> 00:06:32.779
这是一件可怕的事情，因为它泄漏了太多的能力。
that's a terrible thing, because it's leaking way too much capability.

103
00:06:32.779 --> 00:06:35.459
这是一种安全风险，这是一种可靠性风险。
It's a security hazard, it's a reliability hazard.

104
00:06:35.459 --> 00:06:38.490
这是在ES5/严格模式下修复的。
This was sort of fixed in ES5/Strict mode.

105
00:06:41.000 --> 00:06:42.418
&gt；&gt；Douglas Crockford：但不完全是。
&gt;&gt; Douglas Crockford: But not completely.

106
00:06:42.418 --> 00:06:46.149
在ES5/Strict模式下，这将绑定到undefined。
In ES5/Strict mode, this gets bound to undefined.

107
00:06:46.149 --> 00:06:49.810
所以至少我们没有把它和危险的东西绑在一起，
So at least we're not binding it to something dangerous,

108
00:06:49.810 --> 00:06:52.735
但有时也不是你想要的。
but sometimes it's not what you want either.

109
00:06:52.735 --> 00:06:55.951
如果你在一个方法内部有一个内部函数，
That if you have an inner function inside of a method,

110
00:06:55.951 --> 00:06:59.459
您希望内部函数帮助该方法完成其工作。
you want the inner function to help the method do its work.

111
00:06:59.459 --> 00:07:01.434
但是内部函数没有看到这个，
But the inner function doesn't get to see this,

112
00:07:01.434 --> 00:07:03.660
因为内部函数作为函数调用。
because the inner function gets called as a function.

113
00:07:03.660 --> 00:07:07.180
因此，这将要么是全局对象，要么是未定义的。
And so, it's this will be either the global object or undefined.

114
00:07:07.180 --> 00:07:10.855
因此解决方法是在外部函数中，在方法中，
So the workaround is in the outer function, in the method,

115
00:07:10.855 --> 00:07:14.161
您创建一个名为的变量，将其赋值给它，然后
you create a variable called that assign this to it and

116
00:07:14.161 --> 00:07:16.750
然后内部函数可以看到这一点。
then the inner function gets to see that.

117
00:07:21.230 --> 00:07:22.786
&gt；&gt；Douglas Crockford：然后有一个构造函数形式，
&gt;&gt; Douglas Crockford: Then there is a constructor form,

118
00:07:22.786 --> 00:07:25.641
它看起来像函数形式，只是有一个新的前缀。
it looks like the function form, except there is a new prefix.

119
00:07:25.641 --> 00:07:29.067
并且当用新的前缀调用函数时，
And when a function is called with a new prefix,

120
00:07:29.067 --> 00:07:32.588
将创建一个新对象，并将其绑定到该对象。
a new object is created and will be bound to this.

121
00:07:33.709 --> 00:07:38.295
并且如果构造函数没有显式返回值，
And if the constructor function does not have an explicit return value,

122
00:07:38.295 --> 00:07:40.625
那么这将是返回值并且
then this will be the return value and

123
00:07:40.625 --> 00:07:45.601
这是用在伪古典风格，这将在几分钟内到达。
this is used in the pseudo classical style, which will get to in a few minutes.

124
00:07:45.601 --> 00:07:47.420
最后是申请表。
And finally, there is the apply form.

125
00:07:47.420 --> 00:07:53.110
在Apply表单中，调用Function对象的Apply方法，并
In the apply form, you call the apply method of the function object and

126
00:07:53.110 --> 00:07:58.060
您可以指定它的值。
you get to specify what the value of this is going to be.

127
00:07:58.060 --> 00:08:02.574
此外，还可以提供参数组或
In addition, you can also provide either an array of arguments or

128
00:08:02.574 --> 00:08:06.771
您可以提供用逗号分隔的单个参数。
you can provide individual arguments separated by commas.

129
00:08:08.728 --> 00:08:12.300
&gt；&gt；Douglas Crockford：总之，有四种调用形式，函数，
&gt;&gt; Douglas Crockford: So to summarize, there are four invocation forms, function,

130
00:08:12.300 --> 00:08:14.230
方法、构造函数和应用。
method, constructor and apply.

131
00:08:14.230 --> 00:08:17.189
它们各自根据它们对此所做的事情而有所不同。
They each vary according to what they do with this.

132
00:08:17.189 --> 00:08:22.384
再一次，我不推荐使用这个，但这就是大多数
And again, I don't recommend using this at all, but that's how most

133
00:08:22.384 --> 00:08:27.947
人们使用这种语言，几分钟后我将向您展示另一种语言。
people use the language and I'll show you an alternative in a few minutes.

134
00:08:27.947 --> 00:08:29.860
所以，你们都知道递归。
So, you all know about recursion.

135
00:08:29.860 --> 00:08:33.551
这就是当你有一个用自身定义的函数或者
That's when you have a function that is defined in terms of itself or

136
00:08:33.551 --> 00:08:36.546
可以称自己为非常重要的东西。
the can call itself really, really important thing.

137
00:08:36.546 --> 00:08:39.379
我不需要告诉你什么是快速排序，
I don't need to tell you about Quicksort,

138
00:08:39.379 --> 00:08:43.330
这是使用递归的一个重要示例。
that's one of the important examples of using recursion.

139
00:08:43.330 --> 00:08:46.429
JavaScript有一个递归，这很好。
JavaScript has a recursion, which is good.

140
00:08:46.429 --> 00:08:49.509
如果您不熟悉递归函数，
If you're not familiar with recursive functions, I highly,

141
00:08:49.509 --> 00:08:53.240
强烈推荐一本名为“小李斯珀”的书，这本书已经过修订。
highly recommend a book called The Little Lisper, which has been revised.

142
00:08:53.240 --> 00:08:55.269
现在叫做小阴谋家。
It's now called the Little Schemer.

143
00:08:55.269 --> 00:08:59.793
它是基于Scheme语言的，但它实际上并不是关于Scheme的。
It's based on the Scheme language, but it's not really about scheme.

144
00:08:59.793 --> 00:09:04.168
它是关于递归函数，这本书中的所有内容都可以用
It's about recursive functions and everything in that book can be written in

145
00:09:04.168 --> 00:09:08.693
JavaScript和此网页将为您提供进行翻译的关键。
JavaScript and this web page will give you the key to to doing that translation.

146
00:09:08.693 --> 00:09:09.813
强烈推荐。
Highly, highly recommended.

147
00:09:09.813 --> 00:09:14.004
这是一本可以显著改变你的思维方式的书
This is one of those books that can significantly change the way you think in

148
00:09:14.004 --> 00:09:15.078
一种非常好的方式。
a really good way.

149
00:09:18.860 --> 00:09:22.354
&gt；&gt；Douglas Crockford：还有一本书叫做
&gt;&gt; Douglas Crockford: There's another book called The Principles of

150
00:09:22.354 --> 00:09:25.325
编程语言由RC Tennent和
Programming Languages by RC Tennent and

151
00:09:25.325 --> 00:09:30.302
他的原则之一是通信原则
one of his principles is the principle of correspondence in which he

152
00:09:30.302 --> 00:09:35.221
讨论变量在某些语言中如何与参数相似。
talks about how variables are like parameters in some languages.

153
00:09:35.221 --> 00:09:38.424
所以在这里，我们有两个版本的阶乘函数和
So here, we have two versions of the factorial function and

154
00:09:38.424 --> 00:09:42.279
其中一个结果是变量，另一个结果是参数。
one of them result is a variable and the other the result is a parameter.

155
00:09:43.669 --> 00:09:46.460
否则，这两个函数的作用完全相同。
Otherwise, these two functions do exactly the same thing.

156
00:09:47.769 --> 00:09:51.293
因此，这证明了变量和
And so, this demonstrates the similarity of variables and

157
00:09:51.293 --> 00:09:54.542
基于函数构造方式的参数。
parameters based on how the function is constructed.

158
00:09:54.542 --> 00:09:57.588
关于第二个函数的有趣之处是，
The interesting thing about the second function is,

159
00:09:57.588 --> 00:10:01.120
它使用了一个可立即撤销的函数表达式。
it's using an immediately revocable function expression.

160
00:10:01.120 --> 00:10:06.085
所以在这里，我们有一个函数，声明或表达式的函数，这就是
So here, we have a function, declaration or function of expression, which is

161
00:10:06.085 --> 00:10:11.365
创建一个新的Function对象，然后我们立即调用它并传入一个。
creating a new function object, which we then call immediately passing in the one.

162
00:10:11.365 --> 00:10:15.229
所以一般来说，我们可以取任何表达式
So in general, we can take any expression and

163
00:10:15.229 --> 00:10:20.110
将其包装在一个函数中，该函数将返回表达式和
wrap it in a function that will return that expression and

164
00:10:20.110 --> 00:10:26.330
立即调用函数，它与表达式做同样的事情。
call the function immediately and it does the same thing as expression.

165
00:10:26.330 --> 00:10:29.610
它只是更冗长，但它做的是相同的事情。
It's just more verbose, but it does the same thing.

166
00:10:30.610 --> 00:10:34.024
现在，事实证明这在JavaScript中并不适用于所有的值。
Now, turns out this is not true in JavaScript for all values.

167
00:10:34.024 --> 00:10:34.748
例如，
For example,

168
00:10:34.748 --> 00:10:39.039
当您将这些和参数放在不同的函数中时，它们的含义会发生变化。
these and arguments change their meaning when you put them in a different function.

169
00:10:39.039 --> 00:10:43.133
所以它不适用于他们，但它适用于
So it doesn't work for them, but it works for

170
00:10:43.133 --> 00:10:48.320
所有其他表达式，它适用于四个语句。
all other expressions and it works for four statements.

171
00:10:48.320 --> 00:10:52.024
您可以将任意一组语句放在一个函数中，然后
You can take any bunch of statements and put them in a function and

172
00:10:52.024 --> 00:10:56.692
立即打电话，它说，虽然，你已经执行了那些语句，
call immediately and it's says, though, you had executed those statements,

173
00:10:56.692 --> 00:10:59.230
除了var函数break continue和
except that var function break continue and

174
00:10:59.230 --> 00:11:03.168
当您将它们放入另一个函数中时，return会更改它们的含义。
return change their meaning when you put them in another function.

175
00:11:03.168 --> 00:11:08.047
否则，您可以进行这种转换，并且有一些有趣的
Otherwise, you can do this transformation and there are some interesting

176
00:11:08.047 --> 00:11:12.240
由于能够做到这一点，可能会发生的事情。
things that can happen as a result of being being able to do this.

177
00:11:12.240 --> 00:11:15.860
因此，这是您在函数式语言中寻找的特性。
So, this is a feature that you look for in a functional language.
