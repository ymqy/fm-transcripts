WEBVTT

1
00:00:00.000 --> 00:00:04.224
[音乐]
[MUSIC]

2
00:00:04.224 --> 00:00:08.356
&gt；&gt；Douglas：所以我写了一本关于我使用JavaScript和
&gt;&gt; Douglas: And so I wrote my own book about my experience with JavaScript and

3
00:00:08.356 --> 00:00:13.009
使用JSLint(称为JavaScript)：好的部分。
with JSLint which is called JavaScript: The Good Parts.

4
00:00:13.009 --> 00:00:17.039
令人惊讶的是这本书仍然是一本畅销书
And the surprising thing about this book is it is still a bestseller in

5
00:00:17.039 --> 00:00:20.550
它的类别，这对于软件书籍来说是极其罕见的。
its category, which is extremely rare for software books.

6
00:00:20.550 --> 00:00:23.629
大多数软件书籍在印刷之前就已经过时了，
Most software books are obsolete before they're printed,

7
00:00:23.629 --> 00:00:27.969
这是因为在软件中，事情往往变化和翻滚得太快。
and it's because things tend to change and roll over so quickly in software.

8
00:00:27.969 --> 00:00:31.379
但事实证明，我在这本书中说的话是为了
But it turns out the things that I was saying in this book are for

9
00:00:31.379 --> 00:00:32.409
大部分是对的。
the most part right.

10
00:00:33.573 --> 00:00:38.875
所以它仍然是一本相关的书，尽管JavaScript已经通过了
And so it's still a relevant book even though JavaScript has gone through

11
00:00:38.875 --> 00:00:43.935
两个主要的标准修订版，这本书还是相当不错的。
two major standard revisions, this book is still pretty good.

12
00:00:44.994 --> 00:00:50.600
所以并不是所有人都喜欢它，有很多人反对
So it's not universally adored though, there are lots of arguments against

13
00:00:50.600 --> 00:00:55.439
好的部分的想法，如果可以的话，我想浏览一下其中的一些内容。
the idea of good parts and I'd like to run through some of those if I may.

14
00:00:55.439 --> 00:00:58.479
第一个，这只是一个观点的问题，这是你的观点，
The first one, it's just a matter of opinion, it's your opinion,

15
00:00:58.479 --> 00:01:01.520
我的观点不同，一个观点和另一个观点一样好。
my opinions different, one opinions as good as another.

16
00:01:01.520 --> 00:01:08.750
所以，事实证明并非如此，我是JSLint的维护者。
So there, turns out that's not the case, that I am the maintainer of JSLint.

17
00:01:08.750 --> 00:01:12.950
因此，我收到来自世界各地的人的错误报告，告诉我
And as such I get bug reports from people from all over the world telling me I

18
00:01:12.950 --> 00:01:16.159
刚花了两周时间追查这东西。
just spent two weeks chasing this thing down.

19
00:01:16.159 --> 00:01:19.879
这是由于语言语法中的一些奇怪的边缘情况，
And it was due to some weird edge case in the grammar of the language that

20
00:01:19.879 --> 00:01:23.299
从来没有人注意到，它只是让我们变得残废，
no one had ever noticed, and it just crippled us,

21
00:01:23.299 --> 00:01:28.000
在不好的时候伤害我们，你能让JSLint去找吗？
hurt us at a bad time and could you have JSLint look for that?

22
00:01:28.000 --> 00:01:33.210
因为，如果你能做到，那么其他人就再也不用忍受了。
Cuz, if you can then no one else will ever have to endure that.

23
00:01:33.210 --> 00:01:36.409
所以每当有意义的时候，我都会把这些东西结合起来。
So whenever it makes sense to, I incorporate those things.

24
00:01:36.409 --> 00:01:40.640
所以如果你使用的是JSLint，那么你就永远不会体验到这些东西，
So if you're using JSLint, then you will never experience those things,

25
00:01:40.640 --> 00:01:42.750
这不是意见，这是事实。
that is not an opinion, that is a fact.

26
00:01:45.200 --> 00:01:47.109
每个特征都是必不可少的工具，
Every feature is an essential tool,

27
00:01:47.109 --> 00:01:50.750
我需要所有可用的工具来做我的工作。
I need every tool available in order to do my work.

28
00:01:50.750 --> 00:01:55.370
但是，当我们可以证明您可以通过以下方式编写更好的程序时，那就不是真的了
But that's simply not true when we can show that you can write better programs by

29
00:01:55.370 --> 00:01:57.039
没有使用所有功能。
not using all of the features.

30
00:01:57.039 --> 00:02:00.109
因此，如果您可以在不使用特性的情况下编写更好的程序，则该特性
So if you can write a better program without using a feature that feature

31
00:02:00.109 --> 00:02:01.189
不是必须的。
is not essential.

32
00:02:03.549 --> 00:02:07.549
但这个功能有时很有用，这听起来像是一件重要的事情，
But this feature is sometimes useful and that sounds like an important thing,

33
00:02:07.549 --> 00:02:10.319
我需要能够使用它，因为它有时很有用。
I need to be able to use it because it's sometimes useful.

34
00:02:10.319 --> 00:02:14.439
只是有时候一切都是有用的。
Except it turns out everything is sometimes useful.

35
00:02:14.439 --> 00:02:18.039
你无法辨别出什么东西是如此危险，如此有毒，
You cannot identify anything which is so dangerous, so toxic,

36
00:02:18.039 --> 00:02:22.079
如此令人作呕，那有时也不是很有用。
so disgusting, that is not also sometimes useful.

37
00:02:23.930 --> 00:02:29.030
有时有用是一个强有力的陈述，因为它存在。
Sometimes useful is about as strong a statement as it exists.

38
00:02:29.030 --> 00:02:32.329
听起来远不止这些，但事实并非如此，
It sounds like it's a lot more than that but it isn't,

39
00:02:32.329 --> 00:02:34.729
这实际上不是一个论点。
it actually is not an argument.

40
00:02:34.729 --> 00:02:38.045
因此，如果使用某个功能的原因是因为它有时很有用，
So if the reason for using a feature is because it's sometimes useful,

41
00:02:38.045 --> 00:02:39.604
你根本没有论点。
you simply do not have an argument.

42
00:02:39.604 --> 00:02:43.454
我有权使用每一个功能。
I have a right to use every feature.

43
00:02:44.754 --> 00:02:46.454
现在，在这一点上，争论已经改变了。
Now at this point the argument has changed.

44
00:02:46.454 --> 00:02:49.104
我们不再谈论什么是编写程序的最佳方式，
We're no longer talking about what's the best way to write programs,

45
00:02:49.104 --> 00:02:50.954
我们现在谈论的是我们的权利。
we're now talking about our rights.

46
00:02:50.954 --> 00:02:55.978
而且这听起来真的很重要和正义，谈论权利和
And it sounds really important and righteous to be talking about rights and

47
00:02:55.978 --> 00:03:00.935
为[声音]辩护，除非你遵循这个论点得出结论。
defending [SOUND], except if you follow this argument to its conclusion.

48
00:03:00.935 --> 00:03:04.469
最终是这样的，你有权写垃圾吗？
Ultimately it goes like this, do you have the right to write crap?

49
00:03:05.960 --> 00:03:08.180
是的，我有权写垃圾。
Yes I have the right to write crap.

50
00:03:08.180 --> 00:03:11.969
所以现在我们争论的是你有权写垃圾是真的还是
So now we're arguing about do you have the right to write crap is that true or

51
00:03:11.969 --> 00:03:13.969
不，我不知道，我不在乎这不重要。
not, I don't know, I don't care it's not important.

52
00:03:13.969 --> 00:03:17.159
更重要的是你有责任
What's more important is you have a responsibility to

53
00:03:17.159 --> 00:03:19.079
编写工作良好且没有错误的代码。
write code that works well and is free of error.

54
00:03:21.265 --> 00:03:23.873
&GT；&GT；道格拉斯：我需要表达自己的自由，
&gt;&gt; Douglas: I need the freedom to express myself,

55
00:03:23.873 --> 00:03:28.858
我是一个诗人，因为我表达我的诗歌的方式是省略我的分号。
I'm a poet in the way I express my poetry is by leaving out my semicolons.

56
00:03:30.639 --> 00:03:32.949
&gt；&gt；道格拉斯：我需要减少我的击键次数。
&gt;&gt; Douglas: I need to reduce my keystrokes.

57
00:03:34.000 --> 00:03:37.139
这真的是一个非常阴险的大事件，因为我们
This is a really insidious one big again because we

58
00:03:37.139 --> 00:03:40.170
想象一下，我们把大部分时间都花在打字上，但我们没有。
imagine that we spend most of our time typing but we don't.

59
00:03:41.689 --> 00:03:45.560
所以如果你把一年内完成的所有干净的代码，
So if you were to take all the clean finished code you finish in a year,

60
00:03:47.250 --> 00:03:48.280
你可以在一天内打出来。
you could type it in a day.

61
00:03:50.079 --> 00:03:54.039
所以这就提出了一个问题，你用剩下的99%的时间在做什么？
So that raises a question, what are you doing with the other 99% of your time?

62
00:03:57.520 --> 00:03:59.379
击键不是重要的事情。
Keystrokes is not the important thing.

63
00:03:59.379 --> 00:04:03.650
如果我能想出一个办法让你的击键次数增加十倍
If I could figure out a way to increase your keystrokes by a factor of ten and

64
00:04:03.650 --> 00:04:07.219
将你的错误减半，那将是一个巨大的胜利。
cut your errors in half, that would be a huge win.

65
00:04:07.219 --> 00:04:08.939
不幸的是，我没有那个公式
Unfortunately, I don't have that formula for

66
00:04:08.939 --> 00:04:14.610
你，但这就是我们要看的比率。
you but that's the sort of ratios we're looking at.

67
00:04:14.610 --> 00:04:17.600
暗示我会犯错误是一种侮辱
It is an insult to suggest that I would ever make a mistake with

68
00:04:17.600 --> 00:04:19.180
一个危险的特征。
a dangerous feature.

69
00:04:19.180 --> 00:04:22.470
低人一等的人显然会因为这样做而产生问题，但是
Inferior people could obviously have problems by doing that but

70
00:04:24.110 --> 00:04:25.240
我必须有满足感。
I must have satisfaction.

71
00:04:26.810 --> 00:04:29.680
&gt；&gt；Douglas：然后有一个很好的理由添加这些功能
&gt;&gt; Douglas: And then there's a good reason those features were added

72
00:04:29.680 --> 00:04:33.939
对于语言，我可以根据经验告诉你，这绝对不是真的。
to the language and I can tell you from experience, that is absolutely not true.

73
00:04:33.939 --> 00:04:38.529
我见过事情是如何被转换成语言的，而这些事情发生在
I've seen how things get put into languages, and those things happen for

74
00:04:38.529 --> 00:04:40.428
各种各样的原因，但并不是所有的原因都是好的。
all kinds of reasons, and they're not all good ones.

75
00:04:42.149 --> 00:04:46.379
JavaScript的创建者Brendan Eich谈到了脚枪。
The creator of JavaScript, Brendan Eich talks about foot guns.

76
00:04:46.379 --> 00:04:51.558
步枪是你用来射自己脚的语言的一种特征
A foot gun is a feature of the language that you use to shoot yourself in the foot

77
00:04:51.558 --> 00:04:56.201
[声音]他把很多东西放在JavaScript里，我想他后悔了。
[SOUND] and he put a lot of those in JavaScript and I think he regrets it.

78
00:04:56.201 --> 00:04:59.572
他会不时地告诉标准委员会，
And from time to time he would tell the standards committee,

79
00:04:59.572 --> 00:05:04.154
我们不要再增加太多的步枪，他们并不总是听他的。
let's not be adding too many more foot guns and they don't always listen to him.

80
00:05:04.154 --> 00:05:06.345
所以你总能找到更多但是
So you can always find more but

81
00:05:06.345 --> 00:05:10.952
有些人看起来(声音)，我几乎总是怀念看这个。
there are guys who look [SOUND], I almost always miss watch this.

82
00:05:10.952 --> 00:05:15.430
&gt；&gt；[声音]&gt；&gt；扬声器2：[笑声]
&gt;&gt; [SOUND] &gt;&gt; Speaker 2: [LAUGH]

83
00:05:15.430 --> 00:05:16.072
&gt；&gt；道格拉斯：[笑]所以
&gt;&gt; Douglas: [LAUGH] So

84
00:05:16.072 --> 00:05:20.838
编程语言的目的是帮助程序员
the purpose of a programming language is to aid programmers in

85
00:05:20.838 --> 00:05:25.523
制作无错误的程序，这就是全部。
producing error-free programs, that's the whole deal.

86
00:05:25.523 --> 00:05:29.163
所以我们过去认为不可能用
So we used to think that it was not possible to write good programs in

87
00:05:29.163 --> 00:05:33.519
JavaScript是因为它的语言太混乱了，根本不可能，所以
JavaScript because the language was such a mess that just wasn't possible, so

88
00:05:33.519 --> 00:05:35.540
甚至没有理由去尝试。
no reason to even try.

89
00:05:35.540 --> 00:05:38.120
原来那不是真的
Turned out that was not true that

90
00:05:38.120 --> 00:05:42.340
用JavaScript编写好的程序不仅是可能的，而且是必要的。
it is not only possible to write good programs in JavaScript, it is necessary.

91
00:05:42.340 --> 00:05:46.610
使用这种需要的语言很容易脱轨
It is so easy to go off the rails with this language it requires

92
00:05:46.610 --> 00:05:50.139
巨大的纪律，也许比任何其他语言都更有纪律。
tremendous discipline, maybe more discipline than any other language.

93
00:05:50.139 --> 00:05:52.298
所以当你使用这种语言的时候，你真的必须带上它。
So you really have to bring it when you're using this language.

94
00:05:54.389 --> 00:05:58.819
所以在JavaScript中仍然有很多关于Java的混淆，因为
So there's a lot of confusion still about Java in JavaScript because

95
00:05:58.819 --> 00:06:01.879
他们看起来有点相似，他们有相同的名字。
they kind of look similar and they have the same name.

96
00:06:03.379 --> 00:06:07.160
有时我被介绍为Java专家
Sometimes I'm introduced as a Java experts which I am but

97
00:06:07.160 --> 00:06:11.610
我经常被邀请是因为我是JavaScript专家
I'm usually invited because I'm a JavaScript expert and

98
00:06:11.610 --> 00:06:15.194
这类似于我们在“星际迷航”和“星球大战”之间的混淆。
it's similar to the confusion we have between Star Trek and Star Wars.

99
00:06:15.194 --> 00:06:17.809
&gt；&gt；演讲者2：[笑]&gt；&gt；道格拉斯：我们有两门科学
&gt;&gt; Speaker 2: [LAUGH] &gt;&gt; Douglas: We've got two science

100
00:06:17.809 --> 00:06:22.110
名称基本相同的小说专营权。
fiction franchises with basically the same name.

101
00:06:22.110 --> 00:06:26.189
从十英尺外看，他们看起来有点像同一个节目。
And from ten feet away, they kinda look like the same show.

102
00:06:26.189 --> 00:06:28.389
但我们知道它们不是一回事，对吧？
But we know they're not the same thing, right?

103
00:06:28.389 --> 00:06:30.449
差别真的很大。
The differences are really significant.

104
00:06:30.449 --> 00:06:33.240
在“星际迷航”中，你有相位器和光子鱼雷，
In Star Trek, you've got phasers, and photon torpedoes,

105
00:06:33.240 --> 00:06:37.519
你有制服，羽绒规则，所有的规则，对吧？
you've got uniforms, down regulations, everything's regulations, right?

106
00:06:37.519 --> 00:06:41.319
而在“星球大战”中，你有轻型军刀和爆破枪。
Whereas in Star Wars, you've got light sabres and blasters.

107
00:06:41.319 --> 00:06:44.810
你有质子鱼雷，完全不同的鱼雷。
You've got proton torpedoes, completely different torpedoes.

108
00:06:44.810 --> 00:06:48.800
你有沙子，我不喜欢沙子和混乱。
You've got sand, I don't like sand and chaos.

109
00:06:49.829 --> 00:06:52.569
所以你知道哪一个是JavaScript，
So you know which one of these is JavaScript,

110
00:06:52.569 --> 00:06:54.230
显然“星球大战”是对的。
well obviously Star Wars right.

111
00:06:55.475 --> 00:07:00.259
事实上，当您使用JavaScript时，
In fact when you're working with JavaScript,

112
00:07:00.259 --> 00:07:02.329
JavaScript为您提供了一个选择。
JavaScript presents you with a choice.

113
00:07:03.519 --> 00:07:07.461
你可以去绝地或者你可以去加。
You can go Jedi or you can go Jar Jar.

114
00:07:07.461 --> 00:07:12.713
&gt；&gt；扬声器2：[笑]&gt；&gt；道格拉斯：和
&gt;&gt; Speaker 2: [LAUGH] &gt;&gt; Douglas: And

115
00:07:12.713 --> 00:07:15.961
我们的兄弟中有相当多的人喜欢去果酱。
quite a lot of our brothers like to go Jar Jar so.

116
00:07:15.961 --> 00:07:21.341
&gt；&gt；扬声器2：[laugh]&gt；&gt；Douglas：SO
&gt;&gt; Speaker 2: [LAUGH] &gt;&gt; Douglas: So

117
00:07:21.341 --> 00:07:26.254
我观察到的一件事，我观察到的两件事是永不出错的幻想
one thing I've observed, two things I've observed are the fantasy of infallibility

118
00:07:26.254 --> 00:07:28.810
以及无懈可击的徒劳。
and the futility of faultlessness.

119
00:07:28.810 --> 00:07:32.129
我看到了无懈可击的幻想，特别是在年轻人身上，
I see the fantasy of infallibility especially in younger guys,

120
00:07:32.129 --> 00:07:35.055
他们认为自己有这样的技能。
who think they have such that skills.

121
00:07:35.055 --> 00:07:38.189
他们可以在里面写任何垃圾然后他们就能逃脱惩罚，
That they can write just any crap in it and they're gonna get away with it,

122
00:07:38.189 --> 00:07:43.509
他们可以做傻事，一切都会好起来的。
that they can just do stupid and that it's gonna be all right.

123
00:07:43.509 --> 00:07:46.449
然后，无懈可击的徒劳，我在年长的人中看到的更多。
Then, the futility of faultlessness, I see this more among older guys.

124
00:07:46.449 --> 00:07:48.800
男人们已经做了很长时间了。
Guys have been doing this for a long time.

125
00:07:48.800 --> 00:07:56.000
我从来没有见过一个女孩写东西，它永远不会正确，为什么还要尝试呢？
I've never seen a girl write, it's never gonna go right, why even try?

126
00:07:56.000 --> 00:08:03.480
这是两个非常不同的观点，但它们都导致了同样的事情。
Just so two very different perspectives but they both lead to the same thing.

127
00:08:03.480 --> 00:08:07.240
危险驱动的开发，在代码中做疯狂而鲁莽的事情
Danger driven development where you doing crazy reckless stuff in the code

128
00:08:07.240 --> 00:08:12.382
只是为了保持它的趣味性，因为嘿，我们不这样做。
just to keep it interesting cuz hey we don't do that.

129
00:08:12.382 --> 00:08:15.494
别忘了带分号，对吧。
And don't forget your semicolons, right.

130
00:08:15.494 --> 00:08:18.918
所以让编程很难管理的一件事是，
So one of the things that makes programming difficult to manage,

131
00:08:18.918 --> 00:08:20.730
调度的困难。
is the difficulty of scheduling.

132
00:08:20.730 --> 00:08:23.850
通常当我们做某事的时候，我们这样做是为了
That usually when we're doing something, we're doing it for

133
00:08:23.850 --> 00:08:25.360
这是我们第一次这么做
the first time we've ever done it.

134
00:08:25.360 --> 00:08:30.589
所以我们不知道，我们不可能知道要花多长时间，但是
And so we don't know, there's no way we could know how long it's gonna take but

135
00:08:30.589 --> 00:08:32.369
我们将进行猜测和我们的猜测。
we'll make guesses and our guesses.

136
00:08:32.369 --> 00:08:35.690
因为我们是乐观主义者通常都是大错特错的，但是
Cuz we're optimists are usually wildly wrong but

137
00:08:35.690 --> 00:08:41.279
事情就是这样，但更难的是安排第二次。
that's the way it goes but what's even harder is scheduling the second time.

138
00:08:41.279 --> 00:08:46.399
这是时间B，使代码正确工作所需的时间，
Which is the time B, the time it takes to make the code work right,

139
00:08:46.399 --> 00:08:48.330
现在应该是零，对吧。
now that should be zero right.

140
00:08:48.330 --> 00:08:51.700
你应该写它，它应该是正确的，我们就完成了。
You should write it and it should be right and we're done.

141
00:08:51.700 --> 00:08:57.080
但事实并非如此，时间B通常大于时间A，
But that's not the case, that often time B is greater than time A,

142
00:08:57.080 --> 00:09:00.889
我见过时间B是无限的情况。
I've seen cases where time B is infinite.

143
00:09:00.889 --> 00:09:03.389
这就是当代码完成时发生的事情，但是
That's what happens when the codes finished but

144
00:09:03.389 --> 00:09:06.730
然后项目在他们开始工作之前就被取消了。
then the project is cancelled before they can get it to work.

145
00:09:06.730 --> 00:09:13.289
实际上，这种情况发生得太频繁了，所以如果你及时做任何事情
That happens way too often actually, so if you do anything in time

146
00:09:13.289 --> 00:09:19.360
这增加了时间B变大的可能性，你做错了。
A that increases the likelihood of time B being bigger, you're doing it wrong.

147
00:09:19.360 --> 00:09:21.059
这不是节省时间的时候。
That's not the time to be saving time.

148
00:09:22.860 --> 00:09:25.990
因此，我们应该总是花时间编写好代码。
So we should always take the time to code well.

149
00:09:25.990 --> 00:09:29.759
有时会有这样的想法，好吧，我们只是快速地做这件事
Sometimes there's this idea that, well we're just doing this quick and

150
00:09:29.759 --> 00:09:33.009
肮脏的东西，所以让我们只是非常草率，并尽快完成它。
dirty thing so let's just be really sloppy and get it done fast.

151
00:09:34.039 --> 00:09:39.350
除了完成它还意味着它必须工作
Except getting it done still means it has to work and

152
00:09:39.350 --> 00:09:43.230
如果你写得好，让它工作仍然会更容易。
getting it to work is still going to be easier if you write it well.

153
00:09:43.230 --> 00:09:46.789
写好它所花费的时间将会更少
That the time it takes to write it well is going to be less time that

154
00:09:46.789 --> 00:09:49.210
如果写得不好，需要让它正确工作。
takes to make it work right if it's not written well.
