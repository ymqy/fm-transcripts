WEBVTT

1
00:00:00.000 --> 00:00:03.996
[音乐]
[MUSIC]

2
00:00:03.996 --> 00:00:06.506
&gt；&gt；Douglas：所以，这是一个与第一个类似的问题。
&gt;&gt; Douglas: So, this is a problem similar to the first one.

3
00:00:06.506 --> 00:00:11.326
我们将创建一个函数来创建发布订阅对象，并且
We're going to make a function that makes a publish subscribe object, and

4
00:00:11.326 --> 00:00:17.469
它将以正确的顺序可靠地将所有出版物交付给所有订阅者。
it will reliably deliver all publications to all subscribers in the right order.

5
00:00:17.469 --> 00:00:20.960
所以，我们的想法是，我们的系统中可能有多个方面在运行，
So, the idea is that we might have multiple parties running in our system,

6
00:00:20.960 --> 00:00:25.750
他们需要能够相互沟通，我们将为他们提供
and they need to be able to communicate with each other, and we will provide them

7
00:00:25.750 --> 00:00:31.800
它们都将共享的pub子实例，允许它们进行通信。
a pub sub-instance that they will all share, that allows them to communicate.

8
00:00:31.800 --> 00:00:35.090
但是，我们希望确保它正常工作
But, we want to make sure that it works correctly so

9
00:00:35.090 --> 00:00:40.789
它可以正确的顺序可靠地将所有消息传递给每个人。
that it can reliably deliver all the messages to everybody in the right order.

10
00:00:40.789 --> 00:00:41.939
所以，这就是它可能的工作方式。
So, this is how it might work.

11
00:00:41.939 --> 00:00:46.070
我们将有我们的pubsub构造函数，它将创建一个pubsub实例，
We'll have our pubsub constructor, which will make a pubsub instance,

12
00:00:46.070 --> 00:00:47.789
然后我们与所有各方分享。
which we then share with all the parties.

13
00:00:48.929 --> 00:00:52.850
它将在其上具有Subscribe方法，该方法可以接收函数，
It will have a subscribe method on it which can receive a function,

14
00:00:52.850 --> 00:00:58.320
每当有人发布时都会调用它，他们可以通过调用
which will be called whenever somebody publishes, and they can publish by calling

15
00:00:58.320 --> 00:01:03.280
Publish方法，该方法随后将导致调用所有订阅者。
the publish method, which will then cause all of the subscribers to get called.

16
00:01:03.280 --> 00:01:06.159
好的，所以你可以想象
Okay, so you can imagine how you might

17
00:01:06.159 --> 00:01:09.230
实现这样的东西并不是很复杂。
implement something like that it's not very complicated.

18
00:01:09.230 --> 00:01:11.289
下面是一个可能的实现。
Here is a possible implementation.

19
00:01:12.349 --> 00:01:16.590
我们有一个pub子构造函数，它有一个订阅者数组
We've got a pub sub constructor, it has an array of subscribers where it's going to

20
00:01:16.590 --> 00:01:18.810
保留完整的订阅者列表。
keep the full list of subscribers.

21
00:01:18.810 --> 00:01:22.370
它将返回一个包含两个方法的对象。
It will return an object containing two methods.

22
00:01:22.370 --> 00:01:26.060
首先，Subscribe方法将接收一个订阅者，并且
First the subscribe method will receive a subscriber and

23
00:01:26.060 --> 00:01:30.870
将其推送到订阅者列表中，他们的发布方法将
push it onto the subscribers list, and they publish method will

24
00:01:30.870 --> 00:01:35.879
循环遍历所有订阅者，并呼叫每个订阅者并将消息传递给他们。
Loop through all of the subscribers and call each one and give them the message.

25
00:01:35.879 --> 00:01:39.296
好的，看起来很简单，而且
Okay, so looks pretty straightforward, and

26
00:01:39.296 --> 00:01:44.740
不幸的是，它没有做任何我们需要保证的事情。
unfortunately it doesn't do any of the things that we need to guarantee.

27
00:01:46.020 --> 00:01:49.560
可以防止人们发布和订阅。
It is possible to prevent people from publishing and subscribing.

28
00:01:49.560 --> 00:01:55.543
可以，&gt；&gt；Douglas：删除订阅者和
It's possible to, &gt;&gt; Douglas: Remove subscribers and

29
00:01:55.543 --> 00:01:59.450
导致消息被无序传递。
cause messages to get delivered out of order.

30
00:01:59.450 --> 00:02:03.099
这本应防止的一切
Everything that this is supposed to prevent

31
00:02:04.239 --> 00:02:09.240
它会允许的，所以你的工作就是找出攻击者是如何做到这一点的。
It will allow, so your job is to figure out how an attacker can do this.

32
00:02:09.240 --> 00:02:13.336
因此，如果攻击者是其中一个订阅者，并且想要将其搞砸
So, if an attacker is one of the subscribers and wants to screw it up for

33
00:02:13.336 --> 00:02:16.189
所有其他订阅者，他是怎么做到的？
all the other subscribers, how does he do that?

34
00:02:18.929 --> 00:02:20.728
&gt；&gt；扬声器2：他使用了之前的攻击，并且
&gt;&gt; Speaker 2: He used the attack from before, and

35
00:02:20.728 --> 00:02:22.590
清空订阅者，对吗？
empty out the subscribers, right?

36
00:02:23.639 --> 00:02:25.599
&GT；&GT；道格拉斯：这是需要关注的事情，
&gt;&gt; Douglas: That is something to be concerned about,

37
00:02:25.599 --> 00:02:27.969
这次我们没有存储方法。
we don't have a store method this time.

38
00:02:29.090 --> 00:02:33.800
所以，我们没有提供改变推力的方法
So, we don't provide a way of changing the push

39
00:02:33.800 --> 00:02:38.610
属性，但这绝对是
property of the subscribers array, but that's definitely

40
00:02:38.610 --> 00:02:42.780
你想要思考的事情&GT；&GT；演讲者3：什么
something you want to be thinking about &gt;&gt; Speaker 3: Whats

41
00:02:42.780 --> 00:02:44.930
现在发布的功能？
the function now publishing?

42
00:02:44.930 --> 00:02:50.555
对不起，如果您按下一个叫做Publish的函数，
Sorry, if you push a function called publish,

43
00:02:50.555 --> 00:02:58.043
不是因为我们的反应是垃圾。
it's not because our response because it's crap.

44
00:02:58.043 --> 00:03:04.581
如果你推送一个功能，两周的订阅者
If you push a function that two weeks subscribers for

45
00:03:04.581 --> 00:03:09.049
例子是这样的，因为这个。
example is like this because this.

46
00:03:12.169 --> 00:03:13.659
等你找到我
When you get to me,

47
00:03:13.659 --> 00:03:18.210
我刚才推的那个是你叫订阅者眼睛时的一个函数。
the one I just pushed which is a function when you call subscribers eye.

48
00:03:18.210 --> 00:03:23.349
你呼吁出版，你现在可以访问这个。
You call on publication, you now have access to this.

49
00:03:23.349 --> 00:03:24.645
&GT；&GT；道格拉斯：你完全正确。
&gt;&gt; Douglas: You are exactly right.

50
00:03:24.645 --> 00:03:29.171
不幸的是，Powerpoint迫使我强迫您做而不是特定
Unfortunately, Powerpoint compels me to force you to do the instead of particular

51
00:03:29.171 --> 00:03:32.354
订单，所以请记住，我们会回来的，好吗？
order So please remember that we will come back to it okay?

52
00:03:32.354 --> 00:03:35.481
&gt；&gt；[INAUDIBLE]&gt；&gt；Douglas：是的，
&gt;&gt; [INAUDIBLE] &gt;&gt; Douglas: Yeah,

53
00:03:35.481 --> 00:03:38.750
我在这里是PPT的奴隶。
I'm a slave to PowerPoint here.

54
00:03:38.750 --> 00:03:43.085
是的，所以我们不得不这么做。
Yeah, so we're gonna have to do that.

55
00:03:43.085 --> 00:03:44.795
所以我们必须这么做，但是
So we're gonna have to, but

56
00:03:44.795 --> 00:03:48.876
我会再次呼吁你这样做，因为你是绝对正确的。
I will call on you to do that again because you are absolutely right.

57
00:03:48.876 --> 00:03:51.930
&gt；&gt；[INAUDIBLE]&gt；&gt；Douglas：SO
&gt;&gt; [INAUDIBLE] &gt;&gt; Douglas: So

58
00:03:51.930 --> 00:03:57.329
让我们从如何防止其他人接收消息开始。
let's start with how can I prevent other people from receiving messages.

59
00:03:59.430 --> 00:04:00.616
你之前差点就成功了。
You almost had it earlier.

60
00:04:00.616 --> 00:04:04.270
&gt；&gt；Speaker 2：所以一个函数，叫做Publish。
&gt;&gt; Speaker 2: So a function, call it publish.

61
00:04:06.900 --> 00:04:07.710
然后覆盖它。
Then overwrite it.

62
00:04:08.960 --> 00:04:10.752
&GT；&GT；道格拉斯：不，这要容易得多。
&gt;&gt; Douglas: No, it's much easier than that.

63
00:04:13.231 --> 00:04:18.644
&gt；&gt；Speaker 4：这是否会在下次发布时立即失败或
&gt;&gt; Speaker 4: Will this fail immediately on the next publish or

64
00:04:18.644 --> 00:04:24.180
在下一次发布之后的发布之前，它不会失败吗？
will it not fail until the publish after the next publish?

65
00:04:24.180 --> 00:04:30.456
&gt；&gt；道格拉斯：它应该立即失败&gt；&gt；道格拉斯：你会立即失败。
&gt;&gt; Douglas: It should fail immediately &gt;&gt; Douglas: You'll fail instantly.

66
00:04:32.086 --> 00:04:35.079
&gt；&gt；道格拉斯：很抱歉，它将在下一次发布时失败。
&gt;&gt; Douglas: I'm sorry, it will fail on the next publication.

67
00:04:35.079 --> 00:04:40.774
&gt；&gt；扬声器4：我可以设置发布，&gt；&gt；扬声器4：可以吗
&gt;&gt; Speaker 4: I can just set publish, &gt;&gt; Speaker 4: Can I

68
00:04:40.774 --> 00:04:42.629
只是将PUBLISH设置为NULL吗？
just set publish equal to null?

69
00:04:43.939 --> 00:04:48.009
&gt；&gt；Douglas：是的，不幸的是Power Point迫使我
&gt;&gt; Douglas: Yes, unfortunately Power Point compels me to

70
00:04:48.009 --> 00:04:50.750
让你也记住这一点。
ask you to remember that one too.

71
00:04:50.750 --> 00:04:53.680
我试着预测人们拿出这些东西的顺序
I try to anticipate what order people to come up with these

72
00:04:53.680 --> 00:04:55.480
和&gt；&gt；扬声器4：对不起。
and &gt;&gt; Speaker 4: I'm sorry.

73
00:04:55.480 --> 00:04:56.139
&GT；&GT；道格拉斯：不，你很好。
&gt;&gt; Douglas: No, you're good.

74
00:04:56.139 --> 00:05:00.629
&gt；&gt；发言人4：我们的任务是破坏
&gt;&gt; Speaker 4: We're being tasked with sabotaging for

75
00:05:00.629 --> 00:05:05.314
许多以前呼叫过的那些订阅者都是从获取
many all those subscribers who have previously called subscribe from getting

76
00:05:05.314 --> 00:05:09.406
&gt；&gt；扬声器5：出版商时的出版物
&gt;&gt; Speaker 5: Publications when publishers

77
00:05:09.406 --> 00:05:10.985
叫做。
is called.

78
00:05:10.985 --> 00:05:12.149
好吧。
Okay.

79
00:05:12.149 --> 00:05:13.319
&gt；&gt；道格拉斯：好的。
&gt;&gt; Douglas: Okay.

80
00:05:13.319 --> 00:05:17.480
既然你走在我前面让我
So since you're getting way ahead of me let me

81
00:05:17.480 --> 00:05:19.230
让我们先看看我们需要做的那个。
show the one that we need to do first.
