WEBVTT

1
00:00:00.025 --> 00:00:03.653
[音乐]
[MUSIC]

2
00:00:03.653 --> 00:00:06.187
&gt；&gt；Douglas Crockford：JavaScript中的一切都是一个对象，所以数字，
&gt;&gt; Douglas Crockford: Everything in JavaScript is an object, so numbers,

3
00:00:06.187 --> 00:00:09.906
布尔值，字符串，数组，日期，正则表达式和函数，
booleans, strings, arrays, dates, regular expressions and functions,

4
00:00:09.906 --> 00:00:11.050
它们都是物体。
they're all objects.

5
00:00:12.400 --> 00:00:16.561
所以，让我们看看数字，数字是对象，它是一个简单得多的数字
So, let's look at numbers, numbers are objects, it's a much a simpler number

6
00:00:16.561 --> 00:00:20.109
系统比Java中的要好，因为我们没有整数和整数，
system than you have in Java in that we don't have ints and integers,

7
00:00:20.109 --> 00:00:23.070
这两个都没有，你只有数字。
you don't have either of those, you just have numbers.

8
00:00:25.469 --> 00:00:27.929
我们用数字文字做数字。
We make numbers with number literals.

9
00:00:27.929 --> 00:00:31.390
所有这些数字文字都引用同一个对象。
All these number literals refer to the same object.

10
00:00:33.609 --> 00:00:36.453
&gt；&gt；Douglas Crockford：JavaScript中只有一种数字类型，即
&gt;&gt; Douglas Crockford: There's only one number type in JavaScript which is

11
00:00:36.453 --> 00:00:40.716
实际上，这是一件非常好的事情，没有整数类型
actually a very good thing and there are no integer types which is something you

12
00:00:40.716 --> 00:00:43.710
必须习惯，但这其实也是一件好事。
have to get used to but it's actually a good thing too.

13
00:00:44.880 --> 00:00:48.479
问题是我们拥有的一个数字类型是错误的。
The problem is that the one number type we have is the wrong one.

14
00:00:48.479 --> 00:00:53.619
它基于IEEE-754标准中的64位二进制浮点
It's based on 64-bit binary floating point from the IEEE-754 standard

15
00:00:53.619 --> 00:00:57.289
在Java和其他语言中被奇怪地称为Double。
which is strangely called double in Java and other languages.

16
00:00:58.460 --> 00:01:00.380
有人想知道为什么叫双倍吗？
Anybody care to know why it's called double?

17
00:01:00.380 --> 00:01:01.450
为什么他们选择了这样一个愚蠢的名字？
Why they picked such a silly name?

18
00:01:03.640 --> 00:01:05.079
这是来自Fortran的东西。
It's something that comes from Fortran.

19
00:01:06.510 --> 00:01:14.319
Fortran有整数和实数，后来又增加了双精度，
Fortran had integer and real and later they added double precision,

20
00:01:14.319 --> 00:01:19.239
这两个雷亚尔放在一起是为了给你更高的精确度。
which was two reals put together in order to give you more precision.

21
00:01:20.469 --> 00:01:25.210
C采用Fortran的双精度，并将其缩短为双精度。
And C took Fortran's double precision and shortened it to double.

22
00:01:25.210 --> 00:01:27.430
从那以后，其他人都在使用Double。
And everyone else has been using double ever since then.

23
00:01:30.039 --> 00:01:34.849
所以我们没有整型，我很高兴我们没有整型，因为我讨厌整型。
So we don't have ints and I'm glad we don't have ints cuz I hate ints.

24
00:01:34.849 --> 00:01:36.979
int有一些非常奇怪的属性。
Ints have some really strange properties.

25
00:01:36.979 --> 00:01:40.590
例如，我们可以有两个INT，它们都大于零。
For example, we can have two ints which are both greater than zero.

26
00:01:40.590 --> 00:01:45.950
我们可以把它们加在一起，我们可以得到更小的结果
We can add them together and we can get results that are smaller

27
00:01:45.950 --> 00:01:50.930
比原来的数字，这是疯狂的和不可原谅的，以及如何可以
than the original numbers, which is insane and inexcusable, and how can

28
00:01:50.930 --> 00:01:54.520
你对你的系统的正确性和完美性有信心
you have any confidence in the correctness and the perfection of your system

29
00:01:54.520 --> 00:01:58.689
如果它是建立在一个可以做如此荒唐可笑的事情的数字类型上的话？
if it's built on a number type which can do such insanely ridiculous things?

30
00:01:59.719 --> 00:02:03.519
所以JavaScript没有这个缺点，我认为这是很棒的。
So JavaScript does not have this defect in it which I think is brilliant.

31
00:02:06.150 --> 00:02:09.599
所以一般计算机算术的一个问题
So one problem with computer arithmetic in general

32
00:02:09.599 --> 00:02:13.930
结合法是不能成立的，那是因为
is that the Associative Law will not hold, and that's because

33
00:02:15.229 --> 00:02:19.699
计算机数字必然是有限的，而实数不一定是有限的。
computer numbers are necessarily finite and real numbers aren't.

34
00:02:19.699 --> 00:02:23.610
所以在很多情况下，我们只处理近似。
So in many cases we're only dealing with approximations.

35
00:02:23.610 --> 00:02:27.979
当这些值是近似值时，结合性就不成立了。
And when the values are approximate, then associativity doesn't hold.

36
00:02:27.979 --> 00:02:31.501
现在如果你只局限于整数空间，
Now if you just confine to the integer space,

37
00:02:31.501 --> 00:02:37.348
JavaScript整数上升到大约9千万亿，这是相当大的。
JavaScript integers go up to around 9 quadrillion, which is pretty big.

38
00:02:37.348 --> 00:02:43.310
9千万亿比国债还大，所以它很大，对吧？
9 quadrillion is bigger than the national debt, so it's big, right?

39
00:02:43.310 --> 00:02:44.550
这可是大事。
That's big.

40
00:02:44.550 --> 00:02:49.960
所以只要你的整数小于9千万亿，它们就能精确地计算出来。
So as long as your integers are smaller than 9 quadrillion they work out exactly.

41
00:02:49.960 --> 00:02:54.944
当整数达到9千万亿以上时，它们不会做疯狂的环绕
When the integers get above 9 quadrillion they don't do the crazy wrap around

42
00:02:54.944 --> 00:02:57.627
INT做的事情，他们只是变得模糊。
thing that ints do, they just get fuzzy.

43
00:02:57.627 --> 00:03:02.300
所以如果我取一个大于9千万亿的数字并加上1，这就像我
So if I take a number above 9 quadrillion and add 1 to it, it's like I

44
00:03:02.300 --> 00:03:07.310
向其添加0，这不是很好，但它比INT所做的要好得多。
added 0 to it, which is not good but it's much less bad than what ints do.

45
00:03:10.710 --> 00:03:13.622
并且因为计算机算法可以是近似的，
And because computer arithmetic can be approximate,

46
00:03:13.622 --> 00:03:18.219
然后还有一些我们习惯于思考的身份，而这些身份是不能成立的。
then there are identities that we're used to thinking about which don't hold.

47
00:03:18.219 --> 00:03:21.378
所以你需要意识到这一点并保持谨慎。
So you need to be aware of that and cautious.

48
00:03:23.490 --> 00:03:29.962
因此，JavaScript最常报告的bug是0.10+0.20不等于0.30。
So the most reported bug for JavaScript is that 0.10 + 0.20 is not equal to 0.30.

49
00:03:29.962 --> 00:03:34.421
这是因为我们试图表示小数
And that's because we're trying to represent decimal fractions

50
00:03:34.421 --> 00:03:36.610
在二进制浮点中。
in binary floating point.

51
00:03:36.610 --> 00:03:39.270
并且二进制浮点不能准确地表示
And binary floating point cannot accurately represent

52
00:03:39.270 --> 00:03:40.860
大多数小数分数。
most of the decimal fractions.

53
00:03:40.860 --> 00:03:45.840
它只能近似它们，但它用无限近似它们
It can only approximate them, but it approximates them with infinite

54
00:03:45.840 --> 00:03:50.740
重复位模式，但我们不允许有无限长的数字。
repeating bit patterns, but we're not allowed to have infinitely long numbers.

55
00:03:50.740 --> 00:03:55.900
所以它们被截断，所以每个数字都会略有错误。
And so they truncate, and so every number is gonna be slightly wrong.

56
00:03:57.560 --> 00:04:01.329
这只是一个问题，如果你生活在一个使用十进制系统的星球上。
Which is only a problem if you're living on a planet that uses the decimal system.

57
00:04:03.610 --> 00:04:07.765
但是在这样一个星球上，你用这个来计算人们的钱。
But on such a planet, you're counting people's money using this.

58
00:04:07.765 --> 00:04:09.403
当你加别人的钱时，
When you're adding people's money,

59
00:04:09.403 --> 00:04:12.289
他们有一个合理的期望，你会得到正确的金额。
they have a reasonable expectation you're gonna get the right sum.

60
00:04:13.479 --> 00:04:16.589
我们不能保证用二进制浮点得到正确的和，
And we're not guaranteed to get the right sum with binary floating point,

61
00:04:16.589 --> 00:04:17.899
这是个大问题。
which is a huge problem.

62
00:04:20.207 --> 00:04:26.160
&gt；&gt；Douglas Crockford：数字是对象，所以数字有方法。
&gt;&gt; Douglas Crockford: Numbers are objects, and so numbers have methods.

63
00:04:26.160 --> 00:04:28.560
你不必为了获得对象行为而对它们进行装箱。
You don't have to box them in order to get object behavior.

64
00:04:28.560 --> 00:04:29.870
每个数字都已经是一个对象。
Every number is already an object.

65
00:04:31.389 --> 00:04:35.269
每个数字都是从Number.Prototype继承而来的。
Every number inherits from number.prototype.

66
00:04:35.269 --> 00:04:38.610
所以如果我们想要给数字添加新的方法，
So if we wanted to add new methods to numbers,

67
00:04:38.610 --> 00:04:41.649
我们可以通过将它们添加到Number.Prototype来做到这一点。
we can do that by adding them to number.prototype.

68
00:04:41.649 --> 00:04:46.519
这不是应用程序应该做的事情，但它是有用的
This is not something that applications should ever do, but it is a useful

69
00:04:46.519 --> 00:04:51.000
库要做的事情，事实上这就是我们如何发展语言。
thing for libraries to do, and in fact this is how we evolve the language.

70
00:04:51.000 --> 00:04:55.810
因此我们可以将新方法添加到新版本的标准和
So we can add new methods to new versions of the standard and

71
00:04:55.810 --> 00:05:00.350
库可以回填旧的浏览器和旧的实现
libraries can back fill old browsers, and old implementations

72
00:05:00.350 --> 00:05:05.180
只要可以用JavaScript实现新的方法，就可以使用新的东西。
with the new stuff as long as new methods can be implemented in JavaScript.

73
00:05:08.360 --> 00:05:11.879
数字是第一类对象，这意味着数字可以存储在
Numbers are first class objects which means that a number can be stored in

74
00:05:11.879 --> 00:05:16.069
变量，可以作为参数传递，可以从函数返回，并且
a variable, can be passed as a parameter, can be returned from a function and

75
00:05:16.069 --> 00:05:17.980
它可以存储在对象中。
it can be stored in an object.

76
00:05:17.980 --> 00:05:21.579
因为数字本身就是对象，所以它们可以有方法。
And because numbers are themselves objects they can have methods.

77
00:05:24.819 --> 00:05:29.870
JavaScript在使用单独的数学时犯了与Java相同的错误
JavaScript has made the same mistake that Java made in having a separate math

78
00:05:29.870 --> 00:05:34.558
对象或数学容器，用于保持较高的
object or math container for keeping the higher

79
00:05:34.558 --> 00:05:38.629
初等函数。
elementary functions.

80
00:05:38.629 --> 00:05:43.379
这是在Java中完成的，预计未来可能会非常低
This was done in Java anticipating that in the future there might be very low

81
00:05:43.379 --> 00:05:47.610
内存配置，他们希望能够删除数学函数。
memory configurations and they'd wanna be able to remove the math functions.

82
00:05:47.610 --> 00:05:52.322
这并没有发生，因为摩尔定律一直在影响记忆容量，所以
That didn't happen because Moore's Law kept cranking on memory capacity so

83
00:05:52.322 --> 00:05:55.303
事实证明，这并不是一个好的策略。
that turned out not to have been a good strategy.

84
00:05:55.303 --> 00:05:59.048
但它无论如何都不会起作用，因为你会丢弃必要的东西
But it wouldn't have worked anyway because you'd be throwing away essential things

85
00:05:59.048 --> 00:06:00.000
比如地板。
like floor.

86
00:06:00.000 --> 00:06:02.079
没有好的方法可以获得的整数部分
There's no good way to get the integer part of

87
00:06:03.860 --> 00:06:08.990
一个数字，如果你去掉了楼层函数，所以它不可能工作。
a number if you get rid of the floor function so it couldn't have worked.

88
00:06:11.899 --> 00:06:16.620
数学对象中也存储了一些常量。
There are also some constants stored in the math object as well.

89
00:06:19.209 --> 00:06:22.430
所以，最糟糕的一件事，或者是我们从
So, one of the worst, or one of the things that we get from

90
00:06:22.430 --> 00:06:27.149
IEEE格式是一种称为NaN的格式，它代表的不是数字。
the IEEE format is something called NaN, which stands for Not a Number.

91
00:06:27.149 --> 00:06:30.720
这是混淆或错误操作的结果。
It's the result of confusing or erroneous operations.

92
00:06:30.720 --> 00:06:35.060
例如，如果你试图用零除以零，结果是NaN。
For example, if you're trying to divide zero by zero the result is NaN.

93
00:06:35.060 --> 00:06:39.329
NaN是有毒的，这意味着以NaN作为输入的任何算术运算
NaN is toxic, which means that any arithmetic operation with NaN as an input

94
00:06:39.329 --> 00:06:40.680
将NaN作为输出。
will have NaN as an output.

95
00:06:41.689 --> 00:06:46.050
尽管NaN代表的不是一个数字，但它是一个数字。
And despite the fact that NaN stands for Not a Number, it is a number.

96
00:06:46.050 --> 00:06:48.779
如果你问JavaScript，NaN的类型是什么？
If you ask JavaScript, what is the type of NaN?

97
00:06:48.779 --> 00:06:50.310
它说的是数字，它是对的。
It says number and it's right.

98
00:06:52.692 --> 00:06:56.771
&gt；&gt；Douglas Crockford：我讨厌NaN的一点是，NaN不等于
&gt;&gt; Douglas Crockford: The thing I hate about NaN is that NaN is not equal to

99
00:06:56.771 --> 00:07:01.670
包括NaN在内的任何东西，所以NaN等于NaN是假的。
anything including NaN, so NaN equal NaN is false.

100
00:07:01.670 --> 00:07:03.189
让我下地狱的虫子
Which bugs the hell out of me and

101
00:07:03.189 --> 00:07:06.670
更糟糕的是，NaN不等于NaN是真的。
even worse than that is that NaN not equal NaN is true.

102
00:07:06.670 --> 00:07:08.699
我更讨厌这一点。
Which I hate even more.

103
00:07:09.889 --> 00:07:13.944
因此，如果你想知道某个东西是否是NaN，有一个全局isNaN函数。
So if you want to find out if something is NaN, there is a global isNaN function.

104
00:07:15.139 --> 00:07:18.129
你可以把NaN传递给它，它会返回true，这很好。
And you can pass NaN to it and it will return true, which is good.

105
00:07:19.180 --> 00:07:22.389
不幸的是，isNaN也执行类型强制。
Unfortunately, isNaN also does type coercion.

106
00:07:22.389 --> 00:07:25.269
所以如果你向它传递一个类似hello world的字符串，
So if you pass it a string like hello world,

107
00:07:25.269 --> 00:07:28.129
它会尝试将字符串转换为数字。
it'll try to convert the string into a number.

108
00:07:28.129 --> 00:07:32.752
hello world变成的号码是NaN，所以
The number that hello world turns into is NaN, so

109
00:07:32.752 --> 00:07:36.483
你好，世界是南，这不是真的。
hello world is NaN, which is not true.

110
00:07:38.776 --> 00:07:43.090
&gt；&gt；Douglas Crockford：所以自从Fortran以来，我们一直在写声明
&gt;&gt; Douglas Crockford: So ever since Fortran, we've been writing statements

111
00:07:43.090 --> 00:07:48.800
看起来像这样，x=x+1，这是数学上的废话。
that look like this, x = x + 1, which is mathematical nonsense.

112
00:07:48.800 --> 00:07:50.439
所以Algol做对了
So ALGOL got this right.

113
00:07:50.439 --> 00:07:54.220
Algol想出了一个赋值运算符，这样看起来就不那么可笑了，而且
ALGOL came up with an assignment operator so this didn't look so ridiculous, and

114
00:07:54.220 --> 00:07:57.740
BCPL做了和ALGOL相同的事情，这是正确的。
BCPL did the same thing as ALGOL which got it right.

115
00:07:57.740 --> 00:08:00.526
不幸的是汤普森更喜欢这个
Unfortunately Thompson liked this better,

116
00:08:00.526 --> 00:08:05.589
所以我们又回到了它，从那以后我们再也没有进化过。
and so we reverted back to it and we have not evolved away from this since.

117
00:08:05.589 --> 00:08:08.100
所以我们被困在这看起来很疯狂，对吧？
So we're stuck with this and it looks crazy, right?

118
00:08:08.100 --> 00:08:10.149
因为它看起来像一个方程式，但是
Because it looks like an equation but

119
00:08:10.149 --> 00:08:13.752
没有等于x+1的x的值。
there's no value of x which equals x + 1 right.

120
00:08:15.689 --> 00:08:18.560
但是如果你使用的是二进制浮点，
Except it turns out if you're using binary floating point,

121
00:08:20.290 --> 00:08:21.500
有一个值叫做无穷大。
there's a value called infinity.

122
00:08:22.930 --> 00:08:26.889
如果你把1加到无穷大，你就得到了无穷大，所以这实际上是一个等式。
And, if you add one to infinity, you get infinity so this actually is an equation.

123
00:08:26.889 --> 00:08:28.779
有一个值X，这是真的。
There is a value of X for which this is true.

124
00:08:31.040 --> 00:08:35.870
不仅如此，还有一个名为Number.MAX_VALUE的值
And not just that, there's another value called Number.MAX_VALUE

125
00:08:35.870 --> 00:08:40.499
这是一个后面跟着308位数字的数字，这真是一个很大的数字。
which is one followed by 308 digits, that's a really big number.

126
00:08:41.620 --> 00:08:46.440
如果你在JavaScript知道的最大数字上加一，你会认为
And if you add one to the biggest number that JavaScript knows you would think that

127
00:08:46.440 --> 00:08:51.679
将是无穷大，但它不是，它将是MAX_VALUE，所以它成立。
would be infinity but it isn't it, it'll be MAX_VALUE, so it holds.

128
00:08:51.679 --> 00:08:55.052
事实上，对于9千万亿以上的每个数字都是如此。
In fact that is true for every number above 9 quadrillion.

129
00:08:55.052 --> 00:08:58.957
所以这里面有很多值。
So there's a lot of values for which this holds.

130
00:09:00.899 --> 00:09:02.830
&gt；&gt；Douglas Crockford：但不是NaN。
&gt;&gt; Douglas Crockford: But not NaN.

131
00:09:02.830 --> 00:09:07.059
即使NaN加一是NaN，NaN也不等于NaN。
Even though NaN plus one is NaN, NaN is not equal to NaN.

132
00:09:07.059 --> 00:09:12.190
所以我讨厌那个，南，我更讨厌那个。
So I hate that and NaN, I hate that even more.
