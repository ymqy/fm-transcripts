WEBVTT

1
00:00:00.000 --> 00:00:03.883
[音乐]
[MUSIC]

2
00:00:03.883 --> 00:00:05.205
&gt；&gt；Douglas Crockford：我答应过你一些好的部分。
&gt;&gt; Douglas Crockford: I promised you some good parts.

3
00:00:05.205 --> 00:00:07.253
我们终于找到了一个好的部分
We're finally getting to a good part and

4
00:00:07.253 --> 00:00:10.638
这可能是你没有经验的事情。
this is something that you probably don't have experience with.

5
00:00:10.638 --> 00:00:12.548
这就是所谓的结束。
It's something called closure.

6
00:00:12.548 --> 00:00:14.675
它也称为词法作用域或静态作用域。
It's also called Lexical Scoping or Static Scoping.

7
00:00:14.675 --> 00:00:17.868
这是函数的结果，这些函数可以嵌套和
It's a consequence of functions that can nest and

8
00:00:17.868 --> 00:00:21.975
函数是第一类值，JavaScript有它，
functions that are first class values, and JavaScript has it,

9
00:00:21.975 --> 00:00:26.158
并且在实现它们的方式上几乎完全正确，并且
and is almost completely right in the way it implements them, and

10
00:00:26.158 --> 00:00:30.519
这可能是编程语言中最好的特性。
it's maybe the best feature ever put into a programming language.

11
00:00:32.359 --> 00:00:36.862
内部函数的上下文包括外部函数的范围和
The context of an inner function includes the scope of the outer function and

12
00:00:36.862 --> 00:00:41.154
内部函数即使在外部函数具有
the inner function enjoys that context even after the outer function has

13
00:00:41.154 --> 00:00:41.871
回来了。
returned.

14
00:00:41.871 --> 00:00:48.018
我认为这句话对你毫无意义，我理解这一点。
I expect that statement made no sense to you at all and I understand that.

15
00:00:48.018 --> 00:00:52.322
所以，我将不得不分步骤地解释这一点。
So, I'm gonna have to explain this in steps.

16
00:00:52.322 --> 00:00:58.259
因此，我们将从观察到函数作用域类似于块作用域开始。
So, we'll start with the observation that functions scope works like block scope.

17
00:00:58.259 --> 00:01:00.170
因此，您熟悉块作用域的概念。
So, you're familiar with the idea of block scope.

18
00:01:01.259 --> 00:01:05.501
因此，明年，我们可能会在我们的大多数系统中使用let语句。
So next year, we'll probably have let statements in most of our systems.

19
00:01:05.501 --> 00:01:08.371
在这里，我们有两个街区。
And here, we've got two blocks.

20
00:01:08.371 --> 00:01:12.936
一个在另一个内部，内部块可以看到它的变量，并且
One inside of the other and the inner block can see its variables, and

21
00:01:12.936 --> 00:01:15.228
外部块的变量。
the variables of the outer block.

22
00:01:15.228 --> 00:01:17.507
外部块只能看到自己的变量。
The outer block can only see its own variables.

23
00:01:17.507 --> 00:01:21.799
因此，我假设每个人都对块作用域的想法感到满意。
So, I assume everybody is comfortable with the idea of block scope.

24
00:01:21.799 --> 00:01:24.689
我们从1960年就开始这样做了，这很棒。
We've had that since 1960 and it's great.

25
00:01:25.689 --> 00:01:28.007
所以，我们可以对函数做同样的事情。
So, we can do the same thing with functions.

26
00:01:28.007 --> 00:01:31.956
您可以将函数简单地看作是一个带有一点额外内容的块
You can think of a function as simply being a block with a little bit of extra

27
00:01:31.956 --> 00:01:35.539
附加到它的机制，以便将来可以调用它。
mechanism attached to it, so that you can invoke it in the future.

28
00:01:35.539 --> 00:01:40.835
你不需要马上去做，同样的关系也适用。
That you don't have to do it immediately and the same relationships apply.

29
00:01:40.835 --> 00:01:44.123
所以我们得到了黄色函数，它可以看到AND
So we've got the yellow function, which can see a and

30
00:01:44.123 --> 00:01:46.837
B和只能看到a的绿色函数。
b and the green function that can only see a.

31
00:01:46.837 --> 00:01:53.733
完全相同的关系，我们可以将这种关系表示为集合。
Exactly the same relationship and we can represent this relationship as sets.

32
00:01:53.733 --> 00:01:59.573
所以，这是外部函数可以看到的变量集，
So, this is the set of variables that the outer function can see and

33
00:01:59.573 --> 00:02:04.911
这是内部函数可以看到的变量集。
this is the set of variables that the inner function can see.

34
00:02:04.911 --> 00:02:10.153
这里没有什么令人惊讶的，除了我们可以用这样的方式来描述这种关系
Nothing surprising here, except that we can describe this relationship in that

35
00:02:10.153 --> 00:02:15.550
内部函数的变量集包含外部函数的集和
the set of variables of the inner function encloses the set of the outer function and

36
00:02:15.550 --> 00:02:17.808
这就是为什么我们称之为结束。
that's why we call this closure.

37
00:02:20.588 --> 00:02:22.818
&gt；&gt；Douglas Crockford：我们称它为闭合有点太糟糕了，
&gt;&gt; Douglas Crockford: And it's kinda too bad that we call it closure,

38
00:02:22.818 --> 00:02:25.663
因为大多数人认为结束是另一回事，
cuz most people think of closure as meaning something else,

39
00:02:25.663 --> 00:02:27.250
比如报复或者复仇。
like retribution or vengeance.

40
00:02:28.689 --> 00:02:32.490
已经成为受害者，但我得到了一些了结，感觉会很好。
Have been victimized, but I'm getting me some closure and it's gonna feel good.

41
00:02:32.490 --> 00:02:36.030
但这不是那种结束，但这就是我们所说的。
But it's not that kind of closure, but that's what we're calling it.

42
00:02:36.030 --> 00:02:41.229
所以，我们有点被困在这一点上，这似乎是一个简单的想法。
So, we're kind of stuck with that and it seems like a simple idea.

43
00:02:41.229 --> 00:02:46.675
只需添加嵌套函数，它们应该具有明显的关系，
Just add nested functions, which have what should be an obvious relationship,

44
00:02:46.675 --> 00:02:50.437
因为示波器的工作方式，但是花了很长时间，
because of the way that scope works, but it took a long,

45
00:02:50.437 --> 00:02:53.254
这个想法需要很长时间才能得到发展。
long time for this idea to get developed.

46
00:02:53.254 --> 00:02:56.225
所以，你需要一种有三个条件的语言。
So, you needed a language that had three things.

47
00:02:56.225 --> 00:02:58.079
他需要词汇范围。
He needed lexical scoping.

48
00:02:58.079 --> 00:03:02.306
他需要嵌套函数和函数作为第一类值。
He needed nested functions and functions, as first class values.

49
00:03:02.306 --> 00:03:07.225
在很早的时候，我们有三个函数中的两个，
And pretty early on, we got functions that would have two out of three,

50
00:03:07.225 --> 00:03:11.490
但是我们没有得到一个函数，它包含了所有这三个元素，直到Scheme。
but we didn't get a function that had all three until scheme.

51
00:03:11.490 --> 00:03:14.622
计划是麻省理工学院的一项尝试
Scheme was an experiment at MIT in an attempt

52
00:03:14.622 --> 00:03:19.209
去理解卡尔·休伊特在他们70岁出头时的模特。
to understand Carl Hewitt's after model in their early 70s.

53
00:03:19.209 --> 00:03:24.149
实验失败了，因为他们从来没有听懂卡尔在说什么
The experiment failed in that they never did understand what Carl was talking

54
00:03:24.149 --> 00:03:27.949
但是他们确实发现了这种新的编程方式，
about, but they did discover this new way of programming,

55
00:03:27.949 --> 00:03:33.045
我认为这是计算机史上最重要的突破。
which I think was the most important breakthrough in the history of computing.

56
00:03:33.045 --> 00:03:37.036
就像所有真正重要的重大突破一样，
And like all of the really important, significant breakthroughs,

57
00:03:37.036 --> 00:03:39.524
世界根本没有注意到这一点。
the world took no notice of it whatsoever.

58
00:03:39.524 --> 00:03:43.953
事实上，我们花了两代人才最终弄明白
And in fact, it took two generations before we finally figured out

59
00:03:43.953 --> 00:03:48.932
这是一个好主意，并把它带到了主流，但它总是
that this was a good idea and brought it to the mainstream, but it was always

60
00:03:48.932 --> 00:03:54.280
一个好主意和花了这么长时间的原因就是这个问题。
a good idea and the reason it took so long was because of this problem.

61
00:03:54.280 --> 00:03:58.139
所以，我们得到了和以前一样的东西，我们得到了一个内部函数，
So, we've got the same thing we had before where we got an inner function and

62
00:03:58.139 --> 00:03:58.829
外部函数。
an outer function.

63
00:04:00.319 --> 00:04:06.323
但这一次，内部函数在外部函数的执行中幸存下来，
But this time, the inner function survives the execution of the outer function,

64
00:04:06.323 --> 00:04:10.853
因为外部函数返回内部函数。
because the outer function is returning the inner function.

65
00:04:10.853 --> 00:04:15.417
所以我们将调用green函数，它将在堆栈上分配一个。
So we will call the green function, it'll allocate a on the stack.

66
00:04:15.417 --> 00:04:18.209
它将返回一个新函数并退出。
It will return a new function and exit.

67
00:04:19.910 --> 00:04:24.449
现在我们想调用它返回的黄色函数，但是
Now we want to call the yellow function that it returned, but

68
00:04:24.449 --> 00:04:28.000
黄色函数希望访问，但堆栈上不再有。
yellow function wants access to a, but a is no longer on the stack.

69
00:04:28.000 --> 00:04:28.500
砰。
Boom.

70
00:04:30.629 --> 00:04:35.269
我们花了20年，40年的时间才找到解决这个问题的办法。
It took us 20 years, 40 years to figure out what to do about this.

71
00:04:35.269 --> 00:04:37.759
原来解决方案是微不足道的。
Turns out the solution is trivial.

72
00:04:37.759 --> 00:04:41.707
不要使用库存，分配堆上的所有激活记录。
Don't use a stock, allocate all of the activation records on the heap.

73
00:04:41.707 --> 00:04:44.310
找一个好的垃圾收集器，完成。
Get a good garbage collector, done.

74
00:04:44.310 --> 00:04:48.670
真的，真的很容易，但花了很长时间才弄明白。
Really, really easy, but it took a long time to figure this out.

75
00:04:48.670 --> 00:04:49.370
&gt；&gt；演讲者2：你能重复这个解决方案吗？
&gt;&gt; Speaker 2: Can you repeat that solution?

76
00:04:51.279 --> 00:04:55.620
&gt；&gt；Douglas Crockford：是的，不要在堆栈上分配激活记录。
&gt;&gt; Douglas Crockford: Yeah, don't allocate the activation records on the stack.

77
00:04:55.620 --> 00:04:57.417
在堆上分配它们。
Allocate them on the heap.

78
00:04:57.417 --> 00:04:59.927
找一个好的垃圾收集器，完成。
Get a good garbage collector, done.

79
00:05:02.706 --> 00:05:03.805
&GT；&GT；道格拉斯·克罗克福德：就是这样。
&gt;&gt; Douglas Crockford: That's it.

80
00:05:03.805 --> 00:05:07.290
这就是整件事。
That is the whole whole thing.

81
00:05:07.290 --> 00:05:12.764
无论如何，这个想法是在方案中发现的。
So anyway, this idea is discovered in scheme.

82
00:05:12.764 --> 00:05:15.528
需要很长时间才能最终成为主流。
Takes a long time for to finally get to the mainstream.

83
00:05:15.528 --> 00:05:19.997
有没有人碰巧知道把这个想法带到这个想法的第一个语言是什么？
Anybody happen to know what was the first language to bring this idea to

84
00:05:19.997 --> 00:05:21.370
主流是什么？
the mainstream was?

85
00:05:21.370 --> 00:05:24.098
有人吗？
Anybody?

86
00:05:24.098 --> 00:05:25.940
这个JavaScript
This JavaScript.

87
00:05:25.940 --> 00:05:31.720
JavaScript是第一种这样做的语言，紧随其后的是Python和
Javascript was the first language to do this followed quickly by Python and

88
00:05:31.720 --> 00:05:33.197
Ruby，C#明白了
Ruby, C# got it.

89
00:05:33.197 --> 00:05:35.481
最终，C+得到了它。
Eventually, C++ got it.

90
00:05:35.481 --> 00:05:40.629
PHP用一种真正的半途而废的方式做到了这一点，但他们去年才得到它。
PHP does it in a really half-assed way, but they got it just last year.

91
00:05:40.629 --> 00:05:42.800
Java终于得到了它。
Java finally got it.

92
00:05:42.800 --> 00:05:47.278
Java很难跟上他愚蠢的弟弟，但是
Java was having a tough time keeping up with his stupid little brother, but

93
00:05:47.278 --> 00:05:48.567
它终于得到了这个。
it finally got this.

94
00:05:48.567 --> 00:05:52.709
这个想法花了很长时间才成为主流，以至于有一种观点认为，
This idea took so long to get to the mainstream that there was an opinion that,

95
00:05:52.709 --> 00:05:56.564
嗯，它没有进入主流，因为这不是一个好主意。
well, it's not getting to the mainstream, cuz it's not a good idea.

96
00:05:56.564 --> 00:06:00.319
这不是一个好主意的证据是它还没有被采纳，但是
The proof that it's not a good idea is that it hasn't been adopted, but

97
00:06:00.319 --> 00:06:04.202
我们现在正在采用它，我们正在采用它，因为事实证明它是
we're now adopting it and we're adopting it, because it turns out it's

98
00:06:04.202 --> 00:06:07.415
我们现在遇到的很多问题的解决方案。
the solution to a lot of the problems that we're having now.

99
00:06:07.415 --> 00:06:11.216
处理分布式系统和异步性，以及
Dealing with distributed systems and asynchronicity, and

100
00:06:11.216 --> 00:06:16.139
如果您有为您工作的函数，那么我们现在做的事情要容易得多。
the things that we do now much easier if you've got functions working for you.

101
00:06:17.740 --> 00:06:22.600
在这个特定的模式中，我们有一个函数比另一个函数存活，
And this particular pattern where we have a function that survives another function,

102
00:06:22.600 --> 00:06:26.595
返回函数的函数是一个非常强大的重要函数
a function that returns a function is an incredibly powerful important

103
00:06:26.595 --> 00:06:27.540
建筑。
construction.

104
00:06:27.540 --> 00:06:28.937
它非常有用。
It's amazingly useful.

105
00:06:28.937 --> 00:06:33.894
令人惊讶的强大，我们首先用JavaScript获得了它，
Amazingly powerful and we got it and we got it first with JavaScript,

106
00:06:33.894 --> 00:06:35.269
这真是太棒了。
which is amazing.
