WEBVTT

1
00:00:00.000 --> 00:00:03.798
[音乐]
[MUSIC]

2
00:00:03.798 --> 00:00:06.330
&gt；&gt；Douglas Crockford：Array是基本的数据结构之一。
&gt;&gt; Douglas Crockford: Array is one of the fundamental data structures.

3
00:00:06.330 --> 00:00:11.060
它是一系列连续的内存跨度，分为相同大小
It's a contiguous series of span of memory divided into equal sized

4
00:00:11.060 --> 00:00:15.919
插槽，其中每个插槽由一个数字索引，非常快，非常有效。
slots where each slot is indexed by a number, very fast, very efficient.

5
00:00:15.919 --> 00:00:18.379
JavaScript没有类似的东西。
JavaScript doesn't have anything like that.

6
00:00:18.379 --> 00:00:22.589
相反，JavaScript所做的是当JavaScript的第一个版本忘记放置
Instead what JavaScript does is while the first version of JavaScript forgot to put

7
00:00:22.589 --> 00:00:28.390
数组，人们很好地理解了这一点，我们可以只使用一个对象，对吧。
arrays in, and people figured out that well, we can just use an object, right.

8
00:00:28.390 --> 00:00:31.600
我们可以使用括号表示法，我们可以传递数字，将数字转换为
We can use the bracket notation, we can pass numbers, the numbers get turned into

9
00:00:31.600 --> 00:00:37.119
字符串和它的工作方式有点像数组，这仍然是我们所做的。
strings and it all kind of works like an array sort of and that's still what we do.

10
00:00:38.670 --> 00:00:41.429
所以现在有一个数组数据类型。
So there is now an array data type.

11
00:00:41.429 --> 00:00:45.659
它从Object继承，索引被转换为字符串和
It inherits from object and the indices are converted into strings and

12
00:00:45.659 --> 00:00:48.450
用于检索和存储值。
used to retrieve and store values.

13
00:00:48.450 --> 00:00:52.649
好消息是，这对于稀疏数组非常有效。
The good news is, that is extremely efficient for sparse arrays.

14
00:00:52.649 --> 00:00:55.030
不幸的是，我们不做稀疏数组的事情，
Unfortunately, we don't do sparse array stuff,

15
00:00:55.030 --> 00:00:59.039
我们几乎只做密集数组的事情，这是非常低效的。
we're almost exclusively doing dense array stuff and it's very inefficient for that.

16
00:01:00.576 --> 00:01:04.680
它提供的另一个优点是不需要提供长度或
One other advantage it provides is that there is no need to provide a length or

17
00:01:04.680 --> 00:01:06.739
创建数组时键入。
type when creating an array.

18
00:01:06.739 --> 00:01:09.489
我们可以只说空尖括号。
We can just say empty angle brackets.

19
00:01:09.489 --> 00:01:13.349
这是一个新的数组，然后你可以添加任何你想要的东西。
That's a new array and then you can add as much stuff as you want to it.

20
00:01:13.349 --> 00:01:16.870
您不必担心越界错误，因为它实际上并不是
You don't have to worry about out of bounds errors because it's not really

21
00:01:16.870 --> 00:01:18.420
一个数组，它是一个哈希表。
an array, it's a hash table.

22
00:01:18.420 --> 00:01:24.242
所以每个值都是平衡的。&gt；&gt；Douglas Crockford：数组，
So every value is in balance. &gt;&gt; Douglas Crockford: Arrays,

23
00:01:24.242 --> 00:01:27.701
与对象不同，具有特殊的长度属性，并且
unlike objects, have a special length property, and

24
00:01:27.701 --> 00:01:32.289
该属性总是比最高整数下标大1，
that property is always one larger than the highest integer subscript,

25
00:01:32.289 --> 00:01:36.670
其不必与阵列中的元素数量相同。
which is not necessarily the same as number of elements in the array.

26
00:01:39.280 --> 00:01:42.692
所以我们可以用Object literal或Array literal创建一个数组。
So we can make an array with an object literal or with an array literal.

27
00:01:42.692 --> 00:01:48.069
使用括号表示法，
Using the bracket notation,

28
00:01:48.069 --> 00:01:52.719
我们可以用逗号分隔多个表达式，
we can have multiple expressions in there separated by commas,

29
00:01:52.719 --> 00:01:56.469
它们中的每一个都将为元素提供一个值。
each of those will provide a value to an element.

30
00:01:58.099 --> 00:02:02.140
我们可以通过为数组的当前长度赋值来追加到数组
We can append to an array by assigning to it's current length

31
00:02:02.140 --> 00:02:04.219
看起来真的很奇怪，但很管用。
which is really weird looking, but it works.

32
00:02:05.250 --> 00:02:11.252
因此在本例中，myList.length为3，所以我们将分配给它，
So in this case, myList.length is 3, so we'll assign to it,

33
00:02:11.252 --> 00:02:15.807
现在长度将变成3加1，
and the length will now be turned into 3 plus 1,

34
00:02:15.807 --> 00:02:19.783
4.&gt；&gt；Douglas Crockford：数组随附
4. &gt;&gt; Douglas Crockford: Arrays come with

35
00:02:19.783 --> 00:02:22.920
一组比对象更有趣的方法。
a more interesting set of methods than objects have.

36
00:02:22.920 --> 00:02:28.180
对象几乎没有来自object.prototype的有用内容。
Objects have very little useful stuff coming from object.prototype.

37
00:02:28.180 --> 00:02:31.909
这些东西都存储在array.prototype中，更有用的集合。
This stuff is all stored in array.prototype, much more useful set.

38
00:02:31.909 --> 00:02:33.740
我们会看看其中的几个。
We'll look at a couple of these.

39
00:02:33.740 --> 00:02:38.579
例如，有一种排序方法，在这里我们可以获取一个数字数组并
For example, there's sort method, where we can take an array of numbers and

40
00:02:38.579 --> 00:02:40.020
我们可以解决的。
we can sort it.

41
00:02:40.020 --> 00:02:46.856
有人看到这里发生了什么吗？&gt；&gt；扬声器2：[听不见]
So anybody see what's going on here? &gt;&gt; Speaker 2: [INAUDIBLE]

42
00:02:46.856 --> 00:02:47.718
&gt；&gt；Douglas Crockford：但它正在排序
&gt;&gt; Douglas Crockford: But it's sorting on

43
00:02:47.718 --> 00:02:48.329
弦。
the strings.

44
00:02:48.329 --> 00:02:54.731
所以它获取每个数字，将其转换为字符串，然后获取另一个，
So it takes each number, converts it into a string, takes the other one,

45
00:02:54.731 --> 00:03:00.960
将其转换为字符串，比较它们，并在日志时间内完成此操作。
converts it into a string, compares them and it does that in log times.

46
00:03:00.960 --> 00:03:02.270
太可怕了。
It's awful.

47
00:03:02.270 --> 00:03:07.599
所以幸运的是，排序可以
So fortunately, sort can take

48
00:03:07.599 --> 00:03:12.490
一个函数参数，它接收成对的值和
a function argument which receives pairs of values and

49
00:03:12.490 --> 00:03:18.349
它根据它们的相对大小返回负1、0或1。
it returns minus 1, 0 or 1 based on their relative magnitudes.

50
00:03:18.349 --> 00:03:22.670
所以你可以覆盖这个可怕的行为，但是默认情况下它是愚蠢的。
So you can override this terrible behaviour, but It's stupid by default.

51
00:03:25.789 --> 00:03:29.479
您可以从数组中删除元素，但它不会执行您预期的操作。
You can delete an element from an array, but it doesn't do what you expect.

52
00:03:29.479 --> 00:03:33.479
因此，通常需要使用拼接方法来闭合孔。
So usually, you want to use the splice method to close up a hole.

53
00:03:33.479 --> 00:03:35.569
让我来演示一下。
So let me demonstrate that.

54
00:03:35.569 --> 00:03:38.420
这里我们得到了一个包含四个元素的数组
So here we've got an array containing four elements and

55
00:03:38.420 --> 00:03:40.270
我想删除第一个元素。
I want to delete element number one.

56
00:03:40.270 --> 00:03:46.629
这将在其中留下一个空洞，该空洞被标识为未定义的值。
That'll leave a hole in it which is identified as the undefined value.

57
00:03:46.629 --> 00:03:49.840
如果尝试从数组中检索值，并且
If you try to retrieve a value from an array and

58
00:03:49.840 --> 00:03:54.530
它没有该元素，它返回未定义的值。
it doesn't have that element, it returns the undefined value.

59
00:03:54.530 --> 00:03:57.199
因此，如果你想摆脱这种情况，请使用拼接方法。
So if you want to get rid of that, use a splice method.

60
00:03:57.199 --> 00:04:00.610
你说去元素一，删除一个元素。
You say go to element one, delete one element.

61
00:04:00.610 --> 00:04:03.789
然后，您将得到一个更像您预期的数组。
Then you'll get in an array that's more like what you were expecting.

62
00:04:03.789 --> 00:04:07.770
它这样做的方式是删除第一个元素，检索第二个元素，
The way it does that is it deletes element one, it retrieves element two,

63
00:04:07.770 --> 00:04:10.860
删除元素二，将其作为元素一重新插入。
deletes element two, re inserts it as element one.

64
00:04:10.860 --> 00:04:15.919
它转到第三个元素，读取它，删除它，重新插入它作为第二个元素。
It goes to element three, reads it, deletes it, re inserts it as element two.

65
00:04:15.919 --> 00:04:18.875
不快。&gt；&gt；扬声器3：哇。
It's not fast. &gt;&gt; Speaker 3: Whoa.

66
00:04:18.875 --> 00:04:22.259
&gt；&gt；Douglas Crockford：[笑]
&gt;&gt; Douglas Crockford: [LAUGH]

67
00:04:22.259 --> 00:04:23.759
人群中有一种恐惧的表情。
There's a look of horror in the crowd.

68
00:04:26.009 --> 00:04:29.899
好的，因为对象和数组是由相同的材料组成的
Okay, so because objects and arrays are made out of the same stuff in this

69
00:04:29.899 --> 00:04:34.110
语言，原来你只能使用其中一种
language, it turns out that you can use just one of them

70
00:04:34.110 --> 00:04:38.139
大多数时候，这是一个非常糟糕的主意，因为有时它很重要。
most of the time which is a really bad idea because sometimes it matters.

71
00:04:39.230 --> 00:04:43.019
而且因为它有时很重要，我建议，使用正确的。
And because it sometimes matters, I recommend, use the right one.

72
00:04:43.019 --> 00:04:46.079
当名称为任意字符串时使用对象，
Use objects when the names are arbitrary strings,

73
00:04:46.079 --> 00:04:48.889
当名称为连续整数时使用数组。
use arrays when the names are sequential integers.

74
00:04:48.889 --> 00:04:51.819
不要被术语关联数组所迷惑。
Don't be confused by the term Associative Array.

75
00:04:51.819 --> 00:04:54.470
在JavaScript中，关联数组称为对象。
In JavaScript, the Associative Array is called the object.
