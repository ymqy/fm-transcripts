WEBVTT

1
00:00:00.000 --> 00:00:03.902
[音乐]
[MUSIC]

2
00:00:03.902 --> 00:00:06.552
&gt；&gt；Douglas Crockford：所以我也在重新考虑我放进去的东西
&gt;&gt; Douglas Crockford: So I'm also reconsidering things that I had put in in

3
00:00:06.552 --> 00:00:07.700
那本书。
the book.

4
00:00:07.700 --> 00:00:10.759
我当时还认为我说的话是好的吗？
Do I still think the things I said were good then?.

5
00:00:10.759 --> 00:00:12.019
他们现在好吗？
Are they good now?

6
00:00:12.019 --> 00:00:14.439
所以，在书中，我不推荐使用new。
So, in the book, I didn't recommend use of new.

7
00:00:14.439 --> 00:00:18.550
我停止使用它，我建议使用Object.create，事实上，
I stopped using it, I recommended using Object.create instead, and in fact,

8
00:00:18.550 --> 00:00:23.460
我设法将Object.create添加到语言中，这样我就可以使用它了。
I managed to get Object.create added to the language just so that I could use it.

9
00:00:23.460 --> 00:00:27.414
所以，我真的很惊讶地注意到我已经停止使用
So, I was really surprised to kind of notice that I've stopped using

10
00:00:27.414 --> 00:00:33.878
创建对象，这样做的原因是因为我停止了使用它。
Object.create, and the reason for that is because I stopped using this.

11
00:00:35.200 --> 00:00:38.232
如果您不使用这个，那么create不会为您做那么多，而且
If you're not using this, then create doesn't do all that much for you, and

12
00:00:38.232 --> 00:00:42.280
我停止使用这个的原因是因为Adsafe。
the reason I stopped using this was because of ADsafe.

13
00:00:42.280 --> 00:00:46.993
因此，在2007年，有许多实验试图找出如何
So in 2007 there were a number of experiments at trying to figure out how to

14
00:00:46.993 --> 00:00:50.691
将JavaScript转换为一种安全的语言来进行mashup和
turn JavaScript into a secure language for doing mashups and

15
00:00:50.691 --> 00:00:53.500
在第三方交互中。
in third party interaction.

16
00:00:53.500 --> 00:00:58.659
Facebook有FBJS，微软有网络沙箱。
There was FBJS at Facebook, there was web sandbox of Microsoft.

17
00:00:58.659 --> 00:01:04.209
谷歌有Caja项目，还有我自己的Adsafe项目。
There was the Caja project at Google and there was my own ADsafe project.

18
00:01:04.209 --> 00:01:08.367
每个人都在努力解决的难题之一是，
And one of the difficult problems everybody was struggling to solve was,

19
00:01:08.367 --> 00:01:09.847
你怎么处理这件事？
what do you do about this?

20
00:01:09.847 --> 00:01:11.915
因为如果你有办法
Because if you have a method,

21
00:01:11.915 --> 00:01:16.319
这将绑定到感兴趣的对象，这很好。
this will get bound to the object of interest and that's good.

22
00:01:16.319 --> 00:01:18.932
但如果调用与函数相同的方法，
But if you call that same method as a function,

23
00:01:18.932 --> 00:01:22.626
这将绑定到全局对象，从而提供场。
this gets bound to the global object, which gives away the farm.

24
00:01:22.626 --> 00:01:25.974
那你是怎么处理的？
And how do you deal with that?

25
00:01:25.974 --> 00:01:30.774
所以其他三个项目采用的方法是，他们有翻译人员，
And so the approach that the other three projects took wa,s they have translators,

26
00:01:30.774 --> 00:01:33.628
他们阅读JavaScript并编写JavaScript。
they read JavaScript and they write JavaScript.

27
00:01:33.628 --> 00:01:36.466
而且他们写的JavaScript要大得多
And the JavaScript they write is much bigger,

28
00:01:36.466 --> 00:01:41.489
因为他们添加了很多运行时检查和间接检查，以便找到
because they're adding a lot of runtime checking and indirection in order to find

29
00:01:41.489 --> 00:01:46.609
在这种情况下，它会变成一个全局对象，并允许发生不好的事情。
cases where this is turning into a global object and allowing bad things to happen.

30
00:01:48.099 --> 00:01:51.079
我对Adsafe采取的方法要简单得多。
The approach I took with ADsafe was much simpler.

31
00:01:51.079 --> 00:01:53.659
我说，这是违法的。
I said, this is illegal.

32
00:01:53.659 --> 00:01:57.379
所以如果我们看到一个包含这个的程序，我们就会拒绝它，完成，很容易。
So if we see a program with this in it, we reject it, done, easy.

33
00:01:57.379 --> 00:01:59.490
所以我们不会重写程序。
So we don't rewrite the programs.

34
00:01:59.490 --> 00:02:02.930
我们不会让它们更难调试或运行更慢。
We don't make them harder to debug or slower to run.

35
00:02:02.930 --> 00:02:07.469
如果一个程序通过了Adsafe，它就可以全速运行而不需要任何修改。
If a program passes ADsafe, it gets to run at full speed without any modification.

36
00:02:08.545 --> 00:02:10.629
但是Adsafe规则会拒绝
But the ADsafe rules would reject

37
00:02:11.900 --> 00:02:15.150
相当接近Web上所有现有程序的100%。
pretty close to 100% of all existing programs in the Web.

38
00:02:16.340 --> 00:02:20.264
因此，为了使用Adsafe，您必须使用Adsafe方言。
So in order to use ADsafe you had to work in the ADsafe dialect.

39
00:02:21.460 --> 00:02:25.180
所以我决定做个实验，我会用那种方言工作。
So I decided as an experiment, well I'll work in that dialect.

40
00:02:25.180 --> 00:02:27.800
我要看看是什么样子，有多痛苦。
I'll see what it's like and how painful it is.

41
00:02:29.329 --> 00:02:31.418
现在，在与它合作了一段时间之后
Now after working with it for

42
00:02:31.418 --> 00:02:35.688
有一段时间，我真的很惊讶地发现它变得更容易了。
a while I was really surprised to learn that it got easier.

43
00:02:35.688 --> 00:02:39.020
我以为这会是一件艰难的事，我不得不四处走走，但是
That I expected it was gonna be a hardship that I was gonna have to get around, but

44
00:02:39.020 --> 00:02:41.783
它实际上变得更容易了，我的程序也变得更好了。
that it actually got easier and my programs were getting better.

45
00:02:41.783 --> 00:02:46.612
我被迫使用功能模式，因为原型模式
I was forced to use the functional patterns because prototypal patterns

46
00:02:46.612 --> 00:02:51.375
没有，因为我停止使用这个，我真的很喜欢它。
weren't available because I stopped using this and I really liked it.

47
00:02:51.375 --> 00:02:54.883
所以当我对这个模型有信心的时候
And so as I've gained confidence in this model and

48
00:02:54.883 --> 00:02:59.477
我现在已经成为一个完全摆脱这个的倡导者，而且
I've become an advocate now of getting rid of this entirely, and

49
00:02:59.477 --> 00:03:04.090
所有的都是函数，因为那才是好的地方。
going all with functions because that's where the goodness is.

50
00:03:05.319 --> 00:03:07.798
是吗？&gt；&gt；演讲者2：JSLint说了什么
Yeah? &gt;&gt; Speaker 2: What does JSLint say about

51
00:03:07.798 --> 00:03:09.272
这个？&gt；&gt；Douglas Crockford：那么JSLint，
this? &gt;&gt; Douglas Crockford: So JSLint,

52
00:03:09.272 --> 00:03:11.110
这现在是一个选项。
this is now an option.

53
00:03:12.280 --> 00:03:15.919
因此，现在有一个选项，您可以指定哪个选项将禁止警告
So there is now an option that you can specify which will suppress warnings

54
00:03:15.919 --> 00:03:17.400
关于这个。
about this.

55
00:03:17.400 --> 00:03:21.069
我不建议使用该选项，但它确实存在。
I don't recommend using that option but it's there.

56
00:03:21.069 --> 00:03:27.670
我向JSLint添加了用于转换的选项，因为over
I added options to JSLint for a transition, because over

57
00:03:27.670 --> 00:03:31.870
我一直在看的时间，我如何才能使这门语言变得更小更好？
time I'm constantly looking at, how can I make this language smaller and better?

58
00:03:32.889 --> 00:03:36.939
去年我认为可能是个好主意的事情，
And things that I thought were maybe a good idea last year,

59
00:03:36.939 --> 00:03:39.099
今年我想我不确定。
this year I'm thinking I'm not sure.

60
00:03:39.099 --> 00:03:45.400
就像今年，我开始决定贴上“休息”标签可能不是个好主意，
Like this year I'm starting to decide that labeled break is probably a bad idea,

61
00:03:45.400 --> 00:03:49.539
我已经很多年没用过了，我觉得我更适合
that I actually haven't used one in many years and I think I'm better for

62
00:03:49.539 --> 00:03:50.960
很多年没用过了。
not having used one in many years.

63
00:03:50.960 --> 00:03:55.240
因此标记的Break正在进入坏部件列表中。
So that labeled break is on its way onto the bad part list.

64
00:03:56.420 --> 00:04:01.520
但是有些人使用JSLint，当JSLint规则改变时，就会去啊。
But there are people using JSLint who, when JSLint rules change, go aah.

65
00:04:01.520 --> 00:04:04.139
我们习惯了这样做，现在不能这样做。
We're used to doing that and we can't do that now.

66
00:04:04.139 --> 00:04:07.579
所以我增加了选项，这样他们就可以中转了。
So I add the options so that they can transit out.

67
00:04:09.039 --> 00:04:12.750
我们现在只能勉强过关，最终我们会修复我们的代码。
We can just get by for now and eventually we'll fix our code.

68
00:04:12.750 --> 00:04:17.100
除了发生的是人们不修复他们的代码和
Except what happens is people don't fix their code and

69
00:04:17.100 --> 00:04:21.269
他们根据他们可以打开的选项来设计他们的编程风格。
they design their programming style based on what options they can turn on.

70
00:04:22.545 --> 00:04:27.418
所以我现在尝试从JSLint中尽可能多地删除选项，
So I'm trying to remove options now from JSLint as much as I can,

71
00:04:27.418 --> 00:04:30.307
但我最近添加了此选项
but I recently added the this option so

72
00:04:30.307 --> 00:04:35.031
我们可以转机离开。&gt；&gt；扬声器2：您不使用原型
we can transit out. &gt;&gt; Speaker 2: You don't use prototypes at

73
00:04:35.031 --> 00:04:38.019
所有的代码都是你自己写的？&gt；&gt；Douglas Crockford：我没有使用
all in the code you write, you personally? &gt;&gt; Douglas Crockford: I am not using

74
00:04:38.019 --> 00:04:42.860
不再是原型了。&gt；&gt；扬声器2：好的，所以Ben指出
prototypes anymore. &gt;&gt; Speaker 2: Okay, so Ben pointed out

75
00:04:42.860 --> 00:04:47.257
昨天，函数相对于对象的缺点之一是您的所有
yesterday that one of the drawbacks to function versus objects is that all your

76
00:04:47.257 --> 00:04:51.909
函数，你拥有的每个函数，都有一个该函数的实例。
functions, every function you have, there's an instance of that function.

77
00:04:51.909 --> 00:04:53.850
那是函数式编程-&gt；&gt；Douglas Crockford：是的，
That's functional programming that's- &gt;&gt; Douglas Crockford: Yeah,

78
00:04:53.850 --> 00:04:55.159
我们会讨论这个。
we're gonna talk about that.

79
00:04:55.159 --> 00:04:57.136
接下来就是这个。&gt；&gt；扬声器2：好的，
That's coming up next. &gt;&gt; Speaker 2: Okay,

80
00:04:57.136 --> 00:05:03.004
我是想说放弃原型还有其他缺点吗？
I was gonna say are there any other drawbacks to abandoning prototypical?

81
00:05:03.004 --> 00:05:03.896
&GT；&GT；道格拉斯·克罗克福德：就是这个。
&gt;&gt; Douglas Crockford: That's the one.

82
00:05:03.896 --> 00:05:04.704
&gt；&gt；扬声器2：好的。
&gt;&gt; Speaker 2: Okay.

83
00:05:04.704 --> 00:05:05.651
&gt；&gt；Douglas Crockford：所以我停止了
&gt;&gt; Douglas Crockford: So I've stopped

84
00:05:05.651 --> 00:05:07.180
使用NULL。
using null.

85
00:05:07.180 --> 00:05:11.396
JavaScript有两个底值，至少比它应该多一个。
JavaScript has two bottom values, which is at least one more than it should.

86
00:05:11.396 --> 00:05:16.949
所以我停止使用null，我只使用undefined now表示所有内容。
And so I'd stopped using null, I just use undefined now for everything.

87
00:05:16.949 --> 00:05:20.079
即使打字时间更长，这也无关紧要。
Even though it's longer to type it, that doesn't matter.

88
00:05:20.079 --> 00:05:25.228
所以，我不再依赖虚假。
So, and I stopped relying on falsiness.

89
00:05:25.228 --> 00:05:28.194
我过去认为虚伪是个好主意
I used to think that falsiness was a good idea and

90
00:05:28.194 --> 00:05:33.180
我主张进行尽可能小的比较和假设。
I advocated having comparisons and ifs that were as small as possible.

91
00:05:33.180 --> 00:05:37.518
我现在认为这是一个错误，我们应该试着进行比较
I now think that was a mistake, that we should be trying to make comparisons that

92
00:05:37.518 --> 00:05:41.860
尽可能明确，试图聪明地将真实情况分成两部分
are as explicit as possible, trying to intelligently bifurcate the true cases

93
00:05:41.860 --> 00:05:46.668
从虚假案件中。&gt；&gt；Douglas Crockford：我已经停止使用
from the false cases. &gt;&gt; Douglas Crockford: I've stopped using

94
00:05:46.668 --> 00:05:51.088
因为，因为在五年中我们得到了Foreach和Every以及MAP和
for, because in years five we got foreach and every and map and

95
00:05:51.088 --> 00:05:53.990
所有那些人和那些人都很棒。
all those others and those are great.

96
00:05:53.990 --> 00:05:56.788
所以在大多数情况下，我不需要再使用for loop了。
So for most purposes I don't need to use for loops anymore.

97
00:05:58.269 --> 00:06:02.620
我不使用for in，因为我设法将object.key从ES5中取出。
I don't use for in, because I managed to get object.keys out of the ES5.

98
00:06:02.620 --> 00:06:07.245
因此，in无论如何都不会正确工作，因为它总是会疏通
So for in never worked correctly anyway, because it would always dredge through

99
00:06:07.245 --> 00:06:11.190
原型链和所有继承的方法都会出现，
the prototype chain and you get all the inherited methods coming up,

100
00:06:11.190 --> 00:06:13.519
然后你必须过滤掉。
which you would then have to filter out.

101
00:06:13.519 --> 00:06:15.959
因为从来没有正确的工作。
For in never worked right.

102
00:06:17.600 --> 00:06:21.189
所以ES6将会有适当的尾部呼叫，当我们得到尾部呼叫时，
So ES6 will have proper tail calls, and when we get that,

103
00:06:21.189 --> 00:06:24.500
我会停止使用while。&gt；&gt；Douglas Crockford：So
I will stop using while. &gt;&gt; Douglas Crockford: So

104
00:06:24.500 --> 00:06:27.370
下面是重复功能的两个版本。
here are two versions of the repeat function.

105
00:06:27.370 --> 00:06:30.194
repeat接受一个函数作为参数，并且
repeat takes a function as an argument, and

106
00:06:30.194 --> 00:06:32.319
我们将调用它，直到它返回undefined。
we'll call it until it returns undefined.

107
00:06:33.480 --> 00:06:37.769
这是一个使用循环编写的版本，这是一个使用尾递归的版本。
And that's a version written using a loop, and that's a version using tail recursion.

108
00:06:37.769 --> 00:06:38.290
在ES6中，
In ES6,

109
00:06:38.290 --> 00:06:43.590
它们都应该以相同的速度运行，都需要消耗相同的内存量。
these should both run at the same speed, both consuming the same amount of memory.

110
00:06:43.590 --> 00:06:48.699
因此这可能是ES6中实现的最后一个功能，
So this will probably be the last feature implemented in ES6,

111
00:06:48.699 --> 00:06:51.319
所以我还在等它。
so I'm still waiting for it.

112
00:06:51.319 --> 00:06:55.939
但是当它到来的时候，我完成了循环，我会
But when it comes, then I'm done with loops and I'm gonna

113
00:06:55.939 --> 00:06:58.812
从现在开始做尾递归。&gt；&gt；扬声器2：在引擎盖下，
be doing tail recursion from here on out. &gt;&gt; Speaker 2: Under the hood,

114
00:06:58.812 --> 00:07:03.653
为了防止出现这种情况，尾递归看起来像什么
what does tail recursion look like in order to prevent from having this

115
00:07:03.653 --> 00:07:06.569
非常长的堆栈？&gt；&gt；Douglas Crockford：这真的很简单。
extremely long stack? &gt;&gt; Douglas Crockford: It's really simple.

116
00:07:06.569 --> 00:07:13.930
只是这变成了跳转，它就像一个带有参数列表的goto。
Just this turns into jump to, it's like a goto with an argument list.

117
00:07:15.589 --> 00:07:17.829
所以我们跳到重复函数。
So we jump to the repeat function.

118
00:07:17.829 --> 00:07:20.339
所以我们要跳到顶端。
So we're jumping to the top.

119
00:07:20.339 --> 00:07:23.476
如果这有一个新的值，而它没有，
And if this has a new value, which it doesn't,

120
00:07:23.476 --> 00:07:27.177
新值将在这里被赋值，然后我们再来一次。
the new value would get assigned up here and we go again.
