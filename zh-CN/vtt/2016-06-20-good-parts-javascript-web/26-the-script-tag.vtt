WEBVTT

1
00:00:00.025 --> 00:00:04.011
[音乐]
[MUSIC]

2
00:00:04.011 --> 00:00:08.753
&gt；&gt；Douglas Crockford：Brendan发明了脚本标签，因为他有这个问题，
&gt;&gt; Douglas Crockford: Brendan invented the script tag because he had the problem,

3
00:00:08.753 --> 00:00:12.480
你把放在页面上的脚本放在哪里？
where do you put the scripts that go on the page?

4
00:00:12.480 --> 00:00:14.816
由于HTML是文本格式，
And since HTML was a text format,

5
00:00:14.816 --> 00:00:19.250
他决定以文本形式将程序发送到浏览器。
he decided to deliver the programs to the browser in text form.

6
00:00:21.475 --> 00:00:25.885
&gt；&gt；Douglas Crockford：这是不寻常的，因为大多数语言都会提供
&gt;&gt; Douglas Crockford: Which is unusual because most languages will deliver

7
00:00:25.885 --> 00:00:29.030
执行站点的可执行文件。
an executable to the execution site.

8
00:00:30.250 --> 00:00:33.820
JavaScript将源代码交付到执行站点，并且
JavaScript delivers source to the execution site and

9
00:00:33.820 --> 00:00:35.968
就是因为这个问题。
it was because of this problem.

10
00:00:35.968 --> 00:00:41.512
所以当他们开始写作时，他们发现的第一件事
So one of the very first things they found when they started writing

11
00:00:41.512 --> 00:00:46.759
利用JavaScript的页面是当您显示
pages to take advantage of JavaScript was that when you display

12
00:00:46.759 --> 00:00:53.100
Navigator 1和Mosaic上的那些页面，脚本将显示为文本。
those pages on Navigator 1 and on Mosaic, the script would show up as text.

13
00:00:53.100 --> 00:00:57.496
这是因为HTML规则，如果你看到一个标签而你不认识它，
And that was because of the HTML rule, if you see a tag and you don't recognize it,

14
00:00:57.496 --> 00:00:58.469
继续走。
just keep going.

15
00:00:58.469 --> 00:01:02.070
那是非常尴尬的。
And that was hugely embarrassing.

16
00:01:02.070 --> 00:01:05.129
他们不可能回到过去
And there is no way they could go back in time and

17
00:01:05.129 --> 00:01:11.319
告诉那些老的浏览器不要这么做，所以他们想出了这个可怕的黑客。
tell those older browsers not to do that, so they came up with this terrible hack.

18
00:01:11.319 --> 00:01:14.539
他们将脚本包装在HTML注释中。
They wrapped the script in HTML comments.

19
00:01:16.010 --> 00:01:21.370
只要你没有使用减号，那么脚本就会被隐藏
And as long as you're not using a minus minus, then the script will be hidden and

20
00:01:21.370 --> 00:01:22.230
没人会看到的。
no one will see it.

21
00:01:23.670 --> 00:01:25.046
我仍然看到人们这样做。
I still see people doing that.

22
00:01:25.046 --> 00:01:26.879
所以如果你看到有人这么做
So if you see anybody doing that,

23
00:01:26.879 --> 00:01:30.876
告诉他们从1996年开始就没有这个必要了，所以别说了。
tell them this hasn't been necessary since 1996, so knock it off.

24
00:01:33.153 --> 00:01:38.292
&gt；&gt；Douglas Crockford：Microsoft添加了语言属性，因为他们打算
&gt;&gt; Douglas Crockford: Microsoft added a language attribute because they intended

25
00:01:38.292 --> 00:01:43.326
为了去掉JScript并用他们自己的VBScript替换它，
to kill off JScript and replace it with their own VBScript,

26
00:01:43.326 --> 00:01:46.969
VBScript是Visual Basic的一种方言。
VBScript being a dialect of Visual Basic.

27
00:01:48.259 --> 00:01:52.390
但那并没有发生，讽刺的是，
That didn't happen, and the irony is,

28
00:01:52.390 --> 00:01:55.950
它没有发生的原因是因为他们在JScript上做得非常好。
the reason it didn't happen was because they did such a good job on JScript.

29
00:01:55.950 --> 00:02:01.069
如果他们做了惯常的事情，那么JScript
If they'd done their usual thing, then JScript

30
00:02:01.069 --> 00:02:04.370
不会达到临界质量，JavaScript可能会失败，而且
would not have gotten critical mass and JavaScript probably would have failed, and

31
00:02:04.370 --> 00:02:07.170
他们本来有机会偷走市场，但他们没有。
they had a chance to steal the market, but they didn't.

32
00:02:07.170 --> 00:02:11.004
因此，事实证明，JavaScript是唯一种可靠地运行于所有
So as it turned out, JavaScript was the only language that ran reliably on all

33
00:02:11.004 --> 00:02:13.840
浏览器，所以这是每个人都使用的语言。
browsers, and so that was the language everybody used.

34
00:02:13.840 --> 00:02:19.324
我见过的唯一使用VBScript的人是罪犯和广告商。
The only people I've seen using VBScript are criminals and advertisers.

35
00:02:19.324 --> 00:02:21.040
&gt；&gt；扬声器2：[笑]&gt；&gt；Douglas Crockford：其他人
&gt;&gt; Speaker 2: [LAUGH] &gt;&gt; Douglas Crockford: Everybody else

36
00:02:21.040 --> 00:02:22.405
正在使用JavaScript。
is using JavaScript.

37
00:02:24.216 --> 00:02:29.156
他们添加了source属性，这是一个非常好的主意
They added the source attribute which was a really good idea

38
00:02:29.156 --> 00:02:34.210
因为事实证明，你不应该把脚本标签放到页面上。
cuz it turns out, you should not put script tags onto pages.

39
00:02:34.210 --> 00:02:38.229
如果将脚本放入单独的文件中，
If if you put scripts into separate files,

40
00:02:38.229 --> 00:02:42.520
然后它们可以被缩小，它们可以被gzip压缩，它们可以被缓存。
then they can be minified, they can be gzipped, they can be cached.

41
00:02:42.520 --> 00:02:48.039
所有这些对于页面启动性能都非常好，这一点至关重要。
All of which are extremely good for page startup performance, which is critical.

42
00:02:48.039 --> 00:02:51.289
如果你把它们放在页面上，你就得不到任何这些好处。
If you put them on the page, you don't get any of those benefits.

43
00:02:51.289 --> 00:02:54.039
所以所有的东西都应该放在单独的文件中。
So everything should be in separate files.

44
00:02:55.090 --> 00:03:01.020
最后，W3C不喜欢language属性，因为它们不是自己编的。
Then finally W3C didn't like the language attribute because they didn't make it up.

45
00:03:01.020 --> 00:03:05.509
所以他们用自己的东西替换了它，他们说这是必需的。
So they replaced it with their own thing and they say that it's required.

46
00:03:06.729 --> 00:03:11.750
但事实证明，如果您使用的是source属性，并且您应该这样做，
But it turns out, if you're using a source attribute, and you should,

47
00:03:11.750 --> 00:03:16.490
它是关于资产的MIME类型是什么的权威的服务器，
it is the server that is authoritative on what the MIME type of the asset is,

48
00:03:16.490 --> 00:03:18.099
而不是请求它的标签。
not the tag that requested it.

49
00:03:18.099 --> 00:03:21.379
因此浏览器需要忽略它。
So the browsers are required to ignore it.

50
00:03:21.379 --> 00:03:22.800
W3C说它是必需的。
W3C says it's required.

51
00:03:24.060 --> 00:03:27.349
我说不用了，没必要。
I say leave it out, it's not necessary.

52
00:03:27.349 --> 00:03:28.659
只是浪费空间。
It's just a waste of space.

53
00:03:31.170 --> 00:03:36.788
所以，document.write是我希望Brendan Eich有过的最糟糕的想法。
So, document.write is I hope the worst idea Brendan Eich ever has.

54
00:03:38.430 --> 00:03:44.170
他认为与浏览器交互的工作方式是
The way he thought that interaction with the browser was going to work was

55
00:03:45.829 --> 00:03:51.240
JavaScript将在页面递增加载时运行。
that JavaScript would run as the page is being loaded incrementally.

56
00:03:51.240 --> 00:03:53.319
而JavaScript在运行时，
And that JavaScript, as it's running,

57
00:03:53.319 --> 00:03:58.618
可以在解析文档时将新的HTML文本插入到文档中。
can insert new HTML text into the document as it's being parsed.

58
00:04:00.120 --> 00:04:02.780
有点可怕。
Which was kind of awful.

59
00:04:02.780 --> 00:04:07.723
所以我看不到它被用得很多了，除了
So I don't see it being used very much anymore except by

60
00:04:07.723 --> 00:04:11.061
罪犯和广告商，好吗？
criminals and advertisers, okay?

61
00:04:11.061 --> 00:04:11.920
&gt；&gt；扬声器2：[笑]&gt；&gt；道格拉斯·克罗克福德：我明白了
&gt;&gt; Speaker 2: [LAUGH] &gt;&gt; Douglas Crockford: I see

62
00:04:11.920 --> 00:04:13.324
广告商经常使用这个。
advertisers use this a lot.

63
00:04:13.324 --> 00:04:17.160
在网络广告的早期，存在着大量的欺诈行为。
In the early days of web advertising, there was a huge amount of fraud.

64
00:04:17.160 --> 00:04:21.759
所有的广告公司都在互相敲诈。
All the ad companies were ripping each other off.

65
00:04:21.759 --> 00:04:25.949
误报图像视图和其他事情。
Misreporting image views and other things.

66
00:04:25.949 --> 00:04:31.730
所以他们想出了这个协议
So they came up with this agreement that the way

67
00:04:31.730 --> 00:04:37.329
一个广告放置可以工作是你把一些广告脚本放在你的页面上。
an ad placement can work is you put some ad script on your page.

68
00:04:37.329 --> 00:04:41.590
它将对前往广告服务器的脚本标记进行document.write。
It will do a document.write of a script tag going to an ad server.

69
00:04:42.949 --> 00:04:46.790
然后那个将返回代码，该代码将执行以下操作
And that one will then return code which will do

70
00:04:46.790 --> 00:04:50.000
脚本标记转到另一台服务器的document.write。
a document.write of a script tag going to another server.

71
00:04:50.000 --> 00:04:53.425
他们可以做一些这样的事情，去不同的地方
And they can do several of those things, going off to different places and

72
00:04:53.425 --> 00:04:57.840
它允许所有这些不同的公司或机构分别计算这件事。
it allows all of these different companies or agencies to separately count the thing.

73
00:04:57.840 --> 00:05:01.149
这样他们就能在实际发生的事情上达成一致。
So they can all agree on what actually happened.

74
00:05:01.149 --> 00:05:05.009
但其后果之一是他们可能会增加巨大的延迟
But one of the consequences of that is they can add huge delays to

75
00:05:05.009 --> 00:05:06.319
页面的呈现。
the rendering of the page.

76
00:05:06.319 --> 00:05:11.029
因为所有的事情都要等到所有的广告重定向完成，而且
Because everything has to wait until all those ad redirections get finished, and

77
00:05:11.029 --> 00:05:13.420
这也是一个巨大的安全漏洞。
it's also a huge security vulnerability.

78
00:05:13.420 --> 00:05:19.600
因为这些服务器中的任何一个都可以发送他们想要的任何东西。
Because any of those servers can be sending anything they want.

79
00:05:19.600 --> 00:05:22.879
如果他们发送了一些肮脏的东西，就会发生不好的事情
And if they send something nasty, bad things happen and

80
00:05:22.879 --> 00:05:24.990
没有办法防御它。
there's no way to defend against it.

81
00:05:24.990 --> 00:05:26.430
所以这一切都很糟糕。
So that's all pretty awful.

82
00:05:28.459 --> 00:05:30.819
所以我不建议任何人再用它。
So I don't recommend anybody use it ever again.

83
00:05:32.230 --> 00:05:34.949
所以不幸的是你把
So unfortunately where you put

84
00:05:34.949 --> 00:05:39.259
页面上的脚本标记可能会对页面加载时间产生巨大影响。
a script tag on a page can have a huge impact on the page loading time.

85
00:05:41.759 --> 00:05:44.850
放置脚本标签的正确位置应该是头部。
The correct place to put script tags should be in the head.

86
00:05:45.870 --> 00:05:47.199
因为这是元，对吧？
Because it's meta, right?

87
00:05:47.199 --> 00:05:49.159
脚本不是内容，它们是元。
Scripts are not content, they're meta.

88
00:05:49.159 --> 00:05:50.649
所以这就是头的作用。
So that's what the head is for.

89
00:05:52.350 --> 00:05:56.110
不幸的是，浏览器在脚本加载方面极其无能。
Unfortunately, browsers are extremely incompetent at script loading.

90
00:05:57.379 --> 00:06:00.000
所以如果你把脚本放在脑袋里，
And so if you put scripts in the head,

91
00:06:00.000 --> 00:06:05.740
然后所有解析阻塞，直到脚本加载、编译和执行。
then all parsing blocks until the scripts load, compile, and execute.

92
00:06:05.740 --> 00:06:09.872
这意味着如果身体中有任何需要加载的图像，
Which means that if there are any images in the body that need to get loaded,

93
00:06:09.872 --> 00:06:13.555
在所有脚本完成之前，它们甚至不会开始加载。
they don't even start to load until all the scripts are finished.

94
00:06:13.555 --> 00:06:15.699
这可不好。
That's not good.

95
00:06:15.699 --> 00:06:20.930
所以Steve Souders发现我们需要将所有脚本移动到底部
So Steve Souders figured out that we need to move all the scripts to the bottom of

96
00:06:20.930 --> 00:06:23.180
取而代之的是尸体。
the body instead.

97
00:06:23.180 --> 00:06:26.089
这对性能很好，但对可靠性很差，但是
Which is great for performance but terrible for reliability, but

98
00:06:26.089 --> 00:06:26.839
这就是我们现在做的。
that's what we do now.

99
00:06:28.470 --> 00:06:31.750
他还建议我们缩小并gzip脚本文件，
He also recommended that we minify and gzip the script files,

100
00:06:31.750 --> 00:06:33.779
这是非常好的建议。
which is very good advice.

101
00:06:33.779 --> 00:06:37.420
他还建议我们尽可能减少脚本文件的数量
He also recommended that we reduce the number of script files as much as possible

102
00:06:37.420 --> 00:06:39.590
通过将它们连接在一起。
by concatenating them all together.

103
00:06:39.590 --> 00:06:42.812
他们真的是很好的理由来推荐它，因为HTTP令人难以置信地
And they're really good reasons to recommend that because HTTP is incredibly

104
00:06:42.812 --> 00:06:44.439
不能加载脚本文件。
incompetent at loading script files.

105
00:06:44.439 --> 00:06:48.819
因此HTML请求中的串行延迟
And so the serial delays in HTML request

106
00:06:48.819 --> 00:06:54.519
交易对你的伤害真的很大。
transactions really hurt you badly there.

107
00:06:54.519 --> 00:06:59.117
因此Souders建议您可以将所有脚本文件一起计算，
So Souders recommended that you can count meet all of your script files together,

108
00:06:59.117 --> 00:07:04.339
并将它们转换为一个大文件，这样您就可以避免一些HTTP开销。
and turn them into one big file and that way you avoid some of that HTTP overhead.

109
00:07:05.480 --> 00:07:07.439
不幸的是，这会导致其他问题。
Unfortunately, that leads to other problems.

110
00:07:07.439 --> 00:07:11.951
它完全中断缓存，因为每个页面都有不同的
It completely breaks caching because every page will have a different

111
00:07:11.951 --> 00:07:15.100
它将要加载的组合脚本集。
combinatorial set of scripts it's gonna load.

112
00:07:15.100 --> 00:07:17.480
所以有可能
So the likelihood that one

113
00:07:17.480 --> 00:07:20.610
组合脚本文件将再次重用非常低。
combined script file is gonna be reused again is extremely low.

114
00:07:21.750 --> 00:07:27.089
它还引入了错误，因为可能会发生某些错误，
It also introduces bugs because there are certain errors that can happen,

115
00:07:27.089 --> 00:07:30.670
如果您将大量文件放在一起，则这些文件是无法更正的。
which are not correctable if you put lots of files together.

116
00:07:30.670 --> 00:07:35.199
例如，您可能有一个文件是由一个不称职的白痴编写的，他
For example, you might have one file that's written by an incompetent idiot who

117
00:07:35.199 --> 00:07:42.279
依赖于分号插入，并将其连接到其他人的文件上。
depends on semicolon insertion and that's concatenated onto someone else's file.

118
00:07:42.279 --> 00:07:45.970
并且将插入分号的位置不再是
And the place where the semicolon would be inserted is no longer

119
00:07:45.970 --> 00:07:50.540
由于串联而导致插入站点，现在文件失败。
an insertion site because of the concatenation and now the file fails.
