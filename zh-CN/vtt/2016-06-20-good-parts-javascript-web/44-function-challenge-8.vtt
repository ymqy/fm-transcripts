WEBVTT

1
00:00:00.000 --> 00:00:03.746
[音乐]
[MUSIC]

2
00:00:03.746 --> 00:00:06.000
&gt；&gt；Douglas：所以这个将是完全微不足道的。
&gt;&gt; Douglas: So this one's gonna be totally trivial.

3
00:00:06.000 --> 00:00:07.900
所以我会给你解决方案。
So I'm just gonna give you the solution.

4
00:00:07.900 --> 00:00:12.699
我们这么做是因为这会引发下一个问题，好吗？
We're just gonna do this because it's going to set up the next problem, okay?

5
00:00:12.699 --> 00:00:15.990
所以我们将编写一个函数m，它接受一个值并
So we're gonna write a function m that takes a value and

6
00:00:15.990 --> 00:00:19.850
可选的源字符串，并将它们作为对象返回。
an optional source string and returns them as an object.

7
00:00:19.850 --> 00:00:23.364
在这种情况下，不是简单地将内容传递到日志中，
And in this case, instead of simply passing things to the log,

8
00:00:23.364 --> 00:00:28.859
我将使用JSON.stringify来制作对象的字符串
I'm gonna be using JSON.stringify to make strings of the object

9
00:00:28.859 --> 00:00:33.600
因为事实证明object.toString完全没有价值。
because it turns out object.toString is completely worthless.

10
00:00:33.600 --> 00:00:35.859
它不会显示任何有关对象中的内容的信息。
It doesn't show you anything about what's in the object.

11
00:00:38.920 --> 00:00:41.359
只是不值得。
It's just not worth it.

12
00:00:41.359 --> 00:00:44.600
JSON.stringify，另一方面，它在向您展示方面做得相当好
JSON.stringify, on the other hand does a fairly good job of showing you

13
00:00:44.600 --> 00:00:46.159
物体里有什么。
what's in the object.

14
00:00:46.159 --> 00:00:53.469
因此，在这种情况下，m(1)的字符串化是一个值为1且
So, in this case the stringification of m(1) is an object where the value is 1 and

15
00:00:53.469 --> 00:00:58.210
源是字符串1，我们制作字符串的值。
the source is the string 1, we make the string of the value.

16
00:00:59.509 --> 00:01:01.399
如果我们传入第二个参数，
If we pass in a second argument,

17
00:01:02.545 --> 00:01:07.465
那么第二个参数将是source属性。
then that second argument will be the source property.

18
00:01:07.465 --> 00:01:11.835
因此，如果我们传入pi和单词pi，则值将为pi，并且
So if we pass in pi and the word pi, the value will be pi, and

19
00:01:11.835 --> 00:01:12.814
源将是pi。
the source will be pi.

20
00:01:13.944 --> 00:01:18.680
这就是这个函数，这个构造器就是这样做的。
So this is the function, the constructor that does that.

21
00:01:18.680 --> 00:01:19.716
所以继续输入这个，
So go ahead and type this in,

22
00:01:19.716 --> 00:01:22.451
我给你一分钟，然后我们继续，我们将做下一个问题。
I'll give you a minute and then we'll go on and we'll do the next problem.

23
00:01:25.820 --> 00:01:29.959
&gt；&gt；douglas：编写一个函数ADDM，将两个m对象和
&gt;&gt; Douglas: Write a function addm that adds two m objects and

24
00:01:29.959 --> 00:01:32.599
返回m对象。
returns an m object.

25
00:01:32.599 --> 00:01:37.840
所以你可以想象我们可以有一个监管要求，不仅是我们
So you can imagine we could have a regulatory requirement that not only do we

26
00:01:37.840 --> 00:01:45.030
提供结果，我们也提供了关于我们如何获得结果的极端细节。
provide results, we also provide extreme detail on how we obtained the results.

27
00:01:45.030 --> 00:01:47.650
因此，这是一种帮助实现自动化的方法。
So this is a way to help automate that.

28
00:01:47.650 --> 00:01:53.103
因此，如果我将两个m对象相加，我得到一个值为总和的对象
So, if I add two m objects, I get an object where the value is the sum

29
00:01:53.103 --> 00:01:58.853
值，并且源是两个值的级联，
of the values, and the source is the concatenation of the two values,

30
00:01:58.853 --> 00:02:03.742
带着加号的两个来源和他们周围的父母。
of the two sources with a plus sign and parents around them.

31
00:02:08.074 --> 00:02:15.280
&gt；&gt；Douglas：所以，如果我们加上m3和m4，源将是(3+4)。
&gt;&gt; Douglas: So, if we add m3 and m4, the source will be (3 + 4).

32
00:02:17.780 --> 00:02:19.280
PI也发生了类似的事情。
And similar thing happening with PI.

33
00:02:20.599 --> 00:02:22.580
好的，这是ADDM。
Okay, so here is addm.

34
00:02:22.580 --> 00:02:26.090
ADDM接受两个m对象，它返回一个新的m
addm takes two m objects, it returns a new m

35
00:02:28.020 --> 00:02:32.590
对象，其中的值将是两个值和字符串的总和，或者
object where the value will be the sum of the two values and the string, or

36
00:02:32.590 --> 00:02:35.650
源将是源的串联。
the source will be the concatenation of the sources.

37
00:02:35.650 --> 00:02:36.509
那么谁有工作呢？
So who got something works?

38
00:02:37.930 --> 00:02:39.125
有没有人用硬的方法做的？
Did anybody do it the hard way?

39
00:02:39.125 --> 00:02:44.360
是的，对象相关编程的第一条规则，让对象完成工作。
Yeah, first rule of object related programming, let the objects do the work.

40
00:02:44.360 --> 00:02:48.780
我们已经有了一个很好的构造函数，我们想要使用它，因为有机会
We already have a nice constructor and we want to use it because there is a chance

41
00:02:48.780 --> 00:02:50.870
我们可能会改变我的所作所为
that we might change what m does and

42
00:02:50.870 --> 00:02:53.979
所以我们希望所有的实例都能利用这一点。
so we want all of the instances to take advantage of that.

43
00:02:55.270 --> 00:02:56.300
所以如果你没收到这个
So if you didn't get this one,

44
00:02:56.300 --> 00:02:58.375
把它写下来，因为我们下一次需要它。
write it down because we're going to need it for the next one.

45
00:03:11.211 --> 00:03:11.969
道格拉斯：好的，我们准备好了吗？
&gt;&gt; Douglas: Okay, are we ready?

46
00:03:13.439 --> 00:03:19.250
因此，编写一个函数liftm，它接受一个二进制函数并
So, write a function liftm that takes a binary function and

47
00:03:19.250 --> 00:03:23.240
一个字符串并返回作用于m个对象的函数。
a string and returns a function that acts on m objects.

48
00:03:23.240 --> 00:03:25.250
所以我们以前做过这个，对吧？
So we've done this before, right?

49
00:03:25.250 --> 00:03:29.300
如果我们将add函数传递给liftm和
If we passed the add function to liftm and

50
00:03:29.300 --> 00:03:33.539
也是加号字符串，它将产生一个与ADDM完全相同的函数。
also the plus string, it will make a function that works exactly like addm.

51
00:03:35.430 --> 00:03:37.120
我们可以做同样的事情，
And we can do the same thing passing,

52
00:03:37.120 --> 00:03:41.560
乘法、星号或任何二进制函数。
multiply, an asterisk or any binary function.

53
00:03:41.560 --> 00:03:44.370
因此，这将帮助我们实现构建过程的自动化
So this will help us to automate the process of building

54
00:03:44.370 --> 00:03:45.849
这个日志算法系统。
this system of journaling arithmetic.

55
00:03:48.409 --> 00:03:52.711
&gt；&gt；Speaker 2：您需要检查信号源是字符串还是字符串？
&gt;&gt; Speaker 2: Do you need to do the check on the source whether it's string or?

56
00:03:52.711 --> 00:03:56.079
&gt；&gt；道格拉斯：不，如果我们试着把它和字符串连接起来，它将是强制的
&gt;&gt; Douglas: No, if we try to concatenate it with the strings it will be force to be

57
00:03:56.079 --> 00:03:56.622
一根绳子。
a string.

58
00:03:56.622 --> 00:03:58.378
&gt；&gt；演讲者2：你能再展示一次这个问题吗？
&gt;&gt; Speaker 2: Can you show the problem again?

59
00:04:05.992 --> 00:04:07.835
&gt；&gt；道格拉斯：好的，这里是电梯。
&gt;&gt; Douglas: Okay, here is liftm.

60
00:04:07.835 --> 00:04:09.569
liftm接受一个二进制函数，并且
liftm takes a binary function and

61
00:04:09.569 --> 00:04:15.120
一个op字符串，它返回一个接受a和b的函数，它返回一个新的m对象
an op string, it returns a function that takes a and b, it returns a new m object

62
00:04:15.120 --> 00:04:19.514
其中该值将是这两个值上的二元函数的结果，以及
where the value will be the result of the binary function on the two values, and

63
00:04:19.514 --> 00:04:23.540
源将是OP字符串的源的串联。
the source will be the concatenation of the sources of the op string.

64
00:04:23.540 --> 00:04:27.500
那么谁得到了升降机，干得好。
So who got liftm, way to go.

65
00:04:27.500 --> 00:04:30.850
那么，如果你们中有人听说过Monads的话？
So, if any of you ever heard of monads?

66
00:04:30.850 --> 00:04:35.769
Monad，Haskell的人一直在谈论他们，你刚刚做了一个Monad，所以
Monads, the Haskell guys talk about them all the time, you just made a monad so

67
00:04:35.769 --> 00:04:38.930
你可以回家告诉你的孩子，今天做了个单曲。
you can go home and tell your kids, made a monad today.

68
00:04:38.930 --> 00:04:42.050
是他干的，好吧。
He did that, all right.

69
00:04:43.139 --> 00:04:48.189
&gt；&gt；扬声器3：那么，什么是单子？
&gt;&gt; Speaker 3: So, what is a monad?

70
00:04:48.189 --> 00:04:52.610
&gt；&gt；Douglas：那么，monad是一种可以将函数和
&gt;&gt; Douglas: So, a monad is a thing where you can take functions and

71
00:04:52.610 --> 00:04:58.120
将他们提升到一个更高的水平，在那里他们可以拥有或获得一些新的能力。
lift them up to a higher level where they can have or acquire some new capability.

72
00:05:00.220 --> 00:05:04.615
Haskell社区使用它们是因为Haskell中有一个陷阱。
The Haskell community uses them because there's a trap in Haskell.

73
00:05:04.615 --> 00:05:07.920
Haskell是一种设计出色的语言，
Haskell is a brilliantly designed language and

74
00:05:07.920 --> 00:05:11.420
它的特点之一是它不允许任何形式的突变。
one of the characteristics about it is it does not allow any kind of mutation.

75
00:05:12.500 --> 00:05:15.858
所以所有的函数都是数学意义上的纯函数
So all functions are pure functions in the mathematical sense and

76
00:05:15.858 --> 00:05:19.646
这是一件非常有趣的事情，除了如果你的程序不得不
that's a really interesting thing, except that if your programs have to

77
00:05:19.646 --> 00:05:23.757
与现实世界互动，现实世界是不断变异的，对吧？
interact with the real world, the real world is constantly mutating, right?

78
00:05:23.757 --> 00:05:29.057
像帐户余额这样的东西不可能是一个常数，对吧？
And something like a account balance cannot be a constant, right?

79
00:05:29.057 --> 00:05:35.156
它有一个非常，他们甚至不能在一个可变的系统中做IO，对吗？
It's got a very and they can't even do IO in a mutable system, right?

80
00:05:35.156 --> 00:05:36.492
你不能让任何东西进来，
You can't have anything coming in,

81
00:05:36.492 --> 00:05:39.000
你不能让任何东西出去，因为没有什么可以改变。
you can't have anything going out because nothing can ever change.

82
00:05:40.029 --> 00:05:43.855
所以，这样的事情对他们来说真的很难
So, that kind of made things practically real hard for them and

83
00:05:43.855 --> 00:05:48.764
他们会通过使用高阶函数来解决单子的这个技巧
they'd figure out this trick with monads which by using a higher order functions

84
00:05:48.764 --> 00:05:50.278
以及非常聪明的方式，
and really clever ways,

85
00:05:50.278 --> 00:05:55.134
它们可以有突变的外观，但实际上没有发生任何突变。
they can have the appearance of mutation without actually mutating anything.

86
00:05:58.137 --> 00:06:00.735
&gt；&gt；道格拉斯：但那是另一次，不管怎么说，你做了一个，所以
&gt;&gt; Douglas: But that's for another time, anyway you made one of those, so

87
00:06:00.735 --> 00:06:01.600
恭喜你。
congratulations.

88
00:06:01.600 --> 00:06:04.060
所以如果你没有写，如果你没有得到这个函数，
So if you didn't write, if you didn't get this function,

89
00:06:05.360 --> 00:06:09.339
你现在应该有它，因为我们马上就会再次使用它。
you should have it now cuz we're gonna use it again in just a second.

90
00:06:09.339 --> 00:06:10.579
大家都准备好继续生活了吗？
So is everybody ready to move on?

91
00:06:12.839 --> 00:06:14.540
好的，这是下一个问题。
Okay, so here's the next problem.

92
00:06:16.425 --> 00:06:20.920
修改函数liftm，使其生成的函数可以接受
Modify function liftm so that the functions it produces can accept

93
00:06:20.920 --> 00:06:24.410
是数字或m对象的参数。
arguments that are either numbers or m objects.

94
00:06:24.410 --> 00:06:28.000
为了让它更容易使用，你可以传入任何数字，
So to make this a little bit easier to use, you can pass in any number,

95
00:06:28.000 --> 00:06:30.910
您不必首先显式地将其包装为m。
you don't have to explicitly wrap it with m first.

96
00:06:31.939 --> 00:06:37.920
所以我们只需要改变电梯就可以了，好吗？
So and we'll just change liftm to do that, okay?

97
00:06:39.850 --> 00:06:44.110
并使其真正灵活，以便您可以传入一个数字或
And make it really flexible so that you can pass in a number or

98
00:06:44.110 --> 00:06:49.348
一个m对象或两个数字，任何组合都可以工作。
an m object or two m objects or two numbers, any combination will work.

99
00:06:52.279 --> 00:06:53.562
&gt；&gt；扬声器3：您可以选择三个或
&gt;&gt; Speaker 3: You can choose three or

100
00:06:53.562 --> 00:06:54.793
四个参数或&gt；&gt；道格拉斯：不，
four arguments or &gt;&gt; Douglas: No,

101
00:06:54.793 --> 00:06:56.081
这需要两个论点。
it will take two arguments.

102
00:06:56.081 --> 00:06:59.069
&gt；&gt；扬声器3：one，liftm或-&gt；&gt；Douglas：或一个数字。
&gt;&gt; Speaker 3: One, liftm or- &gt;&gt; Douglas: Or a number.

103
00:06:59.069 --> 00:07:01.153
&gt；&gt；扬声器3：或者一个数字，好的。
&gt;&gt; Speaker 3: Or a number, okay.

104
00:07:01.153 --> 00:07:05.860
&gt；&gt；道格拉斯：好的，这里是电梯。
&gt;&gt; Douglas: Okay, here is liftm.

105
00:07:05.860 --> 00:07:07.980
所以我做的改变就在盒子里。
So the change I made was in the box.

106
00:07:07.980 --> 00:07:10.360
我只是看了一下论点的类型。
I just looked at the type of the argument.

107
00:07:10.360 --> 00:07:14.529
如果它是一个数字，我调用m把它变成一个m对象。
And if it is a number, I call m to turn it into an m object.

108
00:07:16.779 --> 00:07:18.850
那么谁有用的东西呢？
So who got something that works?

109
00:07:18.850 --> 00:07:20.225
非常好。是谁做的艰难的事情？
Very good. Who did it the hard way?

110
00:07:20.225 --> 00:07:24.826
&gt；&gt；[INAUDIBLE]&gt；&gt；Douglas：您没有这样做。
&gt;&gt; [INAUDIBLE] &gt;&gt; Douglas: Where you didn't do that.

111
00:07:24.826 --> 00:07:29.759
[笑]是的，所以物体的第一规则。
[LAUGH] Yeah, so first rule of objects.
