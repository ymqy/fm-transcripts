WEBVTT

1
00:00:00.000 --> 00:00:03.922
[音乐]
[MUSIC]

2
00:00:03.922 --> 00:00:06.870
&gt；&gt；Douglas Crockford：这就把我们带到了浏览器。
&gt;&gt; Douglas Crockford: So that brings us to the browser.

3
00:00:06.870 --> 00:00:10.039
所以浏览器平台非常不安全，
So the browser platform is horribly insecure,

4
00:00:10.039 --> 00:00:12.560
20多年后，我们仍在修复它。
we're still fixing it later after over 20 years.

5
00:00:13.720 --> 00:00:18.190
HTML5通过提供强大的新功能使事情变得更糟，而不是更好
HTML5 made things worse instead of better by providing powerful new capabilities to

6
00:00:18.190 --> 00:00:22.649
攻击者在不减轻任何先前存在的弱点的情况下。
the attacker without mitigating any of the preexisting weaknesses.

7
00:00:22.649 --> 00:00:26.600
然而，它仍然是世界上最好的应用程序交付系统。
And yet it is still the world's best application delivery system.

8
00:00:26.600 --> 00:00:29.839
它比其他任何东西都好，包括设计的系统
It is better than everything else including systems that were designed

9
00:00:29.839 --> 00:00:30.640
在网络之后。
after the Web.

10
00:00:30.640 --> 00:00:32.990
每个人都拒绝学习网络的教训。
Everybody refused to learn the Web's lessons.

11
00:00:35.530 --> 00:00:39.340
因此，Web正确的一件事是，几乎所有其他平台
So one of the things that the Web got right, that virtually every other platform

12
00:00:39.340 --> 00:00:44.469
出了错的是网络无过错的受害者安全模式。
has gotten wrong is the web does not have a blame the victim security model.

13
00:00:44.469 --> 00:00:46.700
系统中非常常见的一件事是，
A very common thing in systems is,

14
00:00:46.700 --> 00:00:49.859
如果一个系统必须做出关于安全性的决定
that if a system has to make a decision about security and

15
00:00:49.859 --> 00:00:54.990
没有足够的信息做出正确的决定，它会询问用户。
does not have enough information to make a correct decision, it will ask the user.

16
00:00:54.990 --> 00:00:59.573
并且它将以用户不能理解的语言询问用户。
And it will ask the user in language that the user cannot understand.

17
00:00:59.573 --> 00:01:04.313
如果用户说不，那么它就失败了。
And if the user says no, then it fails.

18
00:01:04.313 --> 00:01:09.469
如果用户说是，那就是用户放弃他们的安全性的错误。
And if the user says yes, it is the users fault for giving up their security.

19
00:01:09.469 --> 00:01:13.219
这不是一个有效的安全模型，但我们一直看到它。
This is not a valid model of security but we see it all the time.

20
00:01:14.250 --> 00:01:17.960
例如，我最近在Android商店买了一个闹钟。
For example, I recently bought an alarm clock at the Android store.

21
00:01:20.000 --> 00:01:22.549
只有在我买下它之后，我才看了一下许可。
And it was only after I bought it, that I looked at the permissions.

22
00:01:22.549 --> 00:01:26.865
它想要的许可之一是无限制地访问互联网。
And one of the permissions it wanted was unlimited access to the internet.

23
00:01:26.865 --> 00:01:27.977
[听不见]等一下
[INAUDIBLE] Wait a minute,

24
00:01:27.977 --> 00:01:31.319
为什么时钟需要无限制地访问互联网？
why does a clock need unlimited access to the internet?

25
00:01:31.319 --> 00:01:36.222
我现在的选择是，让我的时钟泄漏它能在我的
And my choices are now, to let my clock leak everything it can find in my

26
00:01:36.222 --> 00:01:38.729
设备并发送它，谁知道它在哪里。
device and send it who knows where.

27
00:01:38.729 --> 00:01:41.424
或者我花在时钟上的钱用完了，
Or I'm out the money I spent on the clock, and it's just,

28
00:01:41.424 --> 00:01:43.200
这不是一个好的安全模式。
that's not a good model of security.

29
00:01:45.140 --> 00:01:48.650
所以浏览器做对了，
So the thing that the browser got right,

30
00:01:48.650 --> 00:01:53.549
其他的一切都错了，这就是这个问题的答案。
that everything else got wrong was the answer to this question.

31
00:01:53.549 --> 00:01:56.020
程序代表谁的利益？
Whose interest does the program represent?

32
00:01:57.390 --> 00:02:01.605
从计算开始，人们总是假设一个程序
From the beginning of computing it is always been assumed that a program

33
00:02:01.605 --> 00:02:05.902
表示计算机的所有者，或至少表示帐户的所有者。
represents the owner of the machine or at least the owner of the account.

34
00:02:05.902 --> 00:02:10.872
浏览器说不，程序代表一个站点
And the browser says no, the program represents a site and

35
00:02:10.872 --> 00:02:15.039
站点不一定代表用户。
a site does not necessarily represent the user.

36
00:02:16.590 --> 00:02:18.110
这是绝对正确的。
Which was absolutely right.

37
00:02:18.110 --> 00:02:19.920
而其他人都没有发现这一点。
And nobody else has figured that out.

38
00:02:21.650 --> 00:02:24.710
不幸的是，网络做错了很多其他的事情。
Unfortunately the web got a lot of other things wrong.

39
00:02:24.710 --> 00:02:28.170
网络并没有预料到会涉及更多的兴趣
The web didn't anticipate that there could be more interests involved

40
00:02:28.170 --> 00:02:31.079
在一个页面中不仅仅是用户和站点。
in a page than just the user and the site.

41
00:02:31.079 --> 00:02:34.479
并且恶意的一方可以利用编码约定来注入
And that a malicious party can exploit coding conventions to inject

42
00:02:34.479 --> 00:02:35.110
恶意代码。
malicious code.

43
00:02:35.110 --> 00:02:38.710
并且恶意代码获得了站点的所有权利。
And that malicious code gets all of the rights of the site.

44
00:02:38.710 --> 00:02:40.900
这被称为XSS问题。
This is known as the XSS problem.

45
00:02:40.900 --> 00:02:43.610
稍后我们将更多地讨论XSS。
We'll talk more about XSS in a minute.

46
00:02:43.610 --> 00:02:47.460
但是说到这个，我的意思是，你总是听到人们抱怨安全和
But to ground this, I mean, you're always hearing people whining about security and

47
00:02:47.460 --> 00:02:49.539
所有的问题都是多么可怕。
how terrible all the problems are.

48
00:02:49.539 --> 00:02:51.370
让我们说得具体一点。
Let's get really specific.

49
00:02:51.370 --> 00:02:55.009
在这个XSS攻击中，到底会出什么问题呢？
In this XSS attack, what can actually go wrong?

50
00:02:56.079 --> 00:03:02.264
如果攻击者可以将一些脚本放到您的页面上，他能做什么呢？
What can an attacker do, if he can get some script onto your page?

51
00:03:02.264 --> 00:03:06.719
攻击者可以从世界上的任何服务器请求其他脚本。
The attacker can request additional scripts from any server in the world.

52
00:03:06.719 --> 00:03:11.150
一旦它站稳了脚跟，它只需要大约那么多的文字就可以做到这一点，
Once it gets a foothold, and it only needs about that much text in order to do that,

53
00:03:11.150 --> 00:03:13.280
然后它可以获得它想要的所有脚本。
it can then obtain all of the scripts it wants.

54
00:03:14.340 --> 00:03:18.670
浏览器有一个称为同源策略的安全策略，该策略限制
Browsers have a security policy called the same origin policy which limit

55
00:03:18.670 --> 00:03:23.409
浏览器从其他服务器获取数据的能力，但没有限制
the ability of the browser to get data from other servers but there is no limit

56
00:03:23.409 --> 00:03:28.319
关于你可以从世界上最邪恶的服务器上加载多少程序。
at all on how much program you can load from the most evil server in the world.

57
00:03:30.750 --> 00:03:32.426
攻击者可以读取文档。
An attacker can read the document.

58
00:03:32.426 --> 00:03:35.188
攻击者可以看到用户可以看到的一切，
The attacker can see everything the user can see,

59
00:03:35.188 --> 00:03:37.237
甚至是用户看不到的东西。
and even things the user can't see.

60
00:03:37.237 --> 00:03:40.663
攻击者可以看到注释和隐藏字段、cookie
The attacker can see comments and hidden fields, cookies,

61
00:03:40.663 --> 00:03:44.639
我们传输到浏览器的所有东西，攻击者都可以访问。
everything we transmit to the browser, the attacker gets access to.

62
00:03:47.060 --> 00:03:49.759
攻击者可以请求您的服务器和
The attacker can make requests of your server and

63
00:03:49.759 --> 00:03:53.920
您的服务器无法检测到该请求不是由您的应用程序发出的。
your server cannot detect that the request did not originate with your application.

64
00:03:54.979 --> 00:03:56.860
如果您使用SSL，并且
If you're using SSL, and

65
00:03:56.860 --> 00:04:00.349
您应该这样做，攻击者可以访问您的安全连接。
you should, the attacker gets access to your secure connection.

66
00:04:03.770 --> 00:04:08.629
如果您的服务器接受SQL查询，则攻击者可以访问您的数据库。
If your server accepts SQL queries then the attacker gets access to your database.

67
00:04:09.930 --> 00:04:14.860
现在，如果您的服务器正在基于信息构造SQL查询
Now if instead your server is constructing SQL queries based on information

68
00:04:14.860 --> 00:04:19.019
它从浏览器获得的信息，那么您可能只提供访问权限，
that it gets from the browser, then you're only probably giving access,

69
00:04:20.139 --> 00:04:24.980
向攻击者发送到您的数据库，这是因为SQL针对
to the attacker to your database and that's because SQL was optimized for

70
00:04:24.980 --> 00:04:26.365
SQL注入攻击。
SQL injection attacks.

71
00:04:26.365 --> 00:04:30.048
&gt；&gt；扬声器2：[笑]&gt；&gt；道格拉斯·克罗克福德：谢谢。
&gt;&gt; Speaker 2: [LAUGH] &gt;&gt; Douglas Crockford: Thank you.

72
00:04:30.048 --> 00:04:34.730
[笑]攻击者已经
[LAUGH] An attacker has

73
00:04:34.730 --> 00:04:38.290
控制显示器并可以向用户请求信息
control over the display and can request information from the user and

74
00:04:38.290 --> 00:04:42.699
用户无法检测到请求不是源自您的应用程序。
the user cannot detect that the request did not originate with your application.

75
00:04:42.699 --> 00:04:44.930
所以现代浏览器有反网络钓鱼的Chrome。
So modern browsers have anti-phishing chrome.

76
00:04:46.439 --> 00:04:49.899
不幸的是，大多数用户并没有注意到这一点。
And unfortunately most users don't pay any attention to that.

77
00:04:49.899 --> 00:04:54.341
但是如果他们关注它，在这种情况下，浏览器会说，它是
But if they are paying attention to it, in this case, the browser is saying, it's

78
00:04:54.341 --> 00:04:58.728
很好，因为浏览器关心的是HTML从何而来。
good, because all the browser's concerned with is where did the HTML come from.

79
00:04:58.728 --> 00:05:02.274
浏览器不会注意脚本是从哪里来的。
The browser doesn't pay any attention to where did the script come from.

80
00:05:02.274 --> 00:05:04.560
脚本可能来自任何地方，而且
And the script could have come from anywhere, and

81
00:05:04.560 --> 00:05:08.230
造成损坏的是脚本，而不是HTML。
the script is what's gonna cause the damage, not the HTML.

82
00:05:08.230 --> 00:05:12.850
所以在一些网站上知道这一点，每当危险的事情即将发生时，
So knowing this on some sites, whenever something dangerous is about to happen,

83
00:05:12.850 --> 00:05:15.939
他们将要求用户再次键入他们的密码。
they will ask the user to type their password again.

84
00:05:15.939 --> 00:05:18.910
理论上，只有用户才会知道密码。
And the theory is that only the user will know the password.

85
00:05:18.910 --> 00:05:22.420
这样，我们就可以确信这不会发生。
And that way, we can be confident that this is not going on.

86
00:05:22.420 --> 00:05:25.459
除了攻击者可以控制显示之外。
Except that the attacker has control of the display.

87
00:05:25.459 --> 00:05:28.785
因此攻击者可以询问用户，您的密码是什么？
And so the attacker can ask the user, what's your password?

88
00:05:28.785 --> 00:05:32.606
浏览器说，很好，告诉他。
And the browser was saying, good tell him.

89
00:05:32.606 --> 00:05:36.582
所以如果你运营这些网站之一，要求人们重新识别
So if If you're operating one of these sites which asks people to re-identify

90
00:05:36.582 --> 00:05:40.497
在不太可能的时候，你实际上正在做的是训练你的
themselves at unlikely times, what you're actually doing is training your

91
00:05:40.497 --> 00:05:43.630
用户在攻击者得到密码的那一刻就放弃他们的密码
users to give up their passwords the instant the attacker gets

92
00:05:43.630 --> 00:05:48.480
控制。&gt；&gt；Douglas Crockford：那么
control. &gt;&gt; Douglas Crockford: Then

93
00:05:48.480 --> 00:05:52.230
攻击者可以将信息发送到世界上任何地方的服务器。
the attacker can send information to servers anywhere in the world.

94
00:05:52.230 --> 00:05:56.060
他们通过抓取页面，通过与用户交谈所学到的一切，
Everything that they learned by scraping the page, by talking to the user,

95
00:05:56.060 --> 00:05:58.120
通过查询您的数据库，
by querying your database,

96
00:05:58.120 --> 00:06:01.540
然后他们可以把这个发送到这个星球上最邪恶的服务器上。
they can then send this to the most evil server on the planet.

97
00:06:01.540 --> 00:06:06.379
同样，浏览器具有相同的源策略，该策略限制了它们的
Again, the browser has a same origin policy which limits their

98
00:06:06.379 --> 00:06:09.370
能够从其他服务器接收数据，但
ability to receive data from other servers but

99
00:06:09.370 --> 00:06:13.279
它没有限制他们发送所有这些被盗信息的能力。
it puts no limit on their ability to send all of these stolen information.

100
00:06:16.300 --> 00:06:19.379
那么，浏览器，这是不是开始吓坏任何人了？
So, and the browser, is this starting to freak anybody out?

101
00:06:19.379 --> 00:06:22.439
因为我们为什么要在这个平台上做生意？
Because why are we doing business on this platform?

102
00:06:22.439 --> 00:06:24.793
是不是有人-&gt；&gt；扬声器3：[听不见]我只是有点
Is that anyone- &gt;&gt; Speaker 3: [INAUDIBLE] I just kind of

103
00:06:24.793 --> 00:06:27.459
世界课程中有什么。
what's in the world course.

104
00:06:27.459 --> 00:06:30.089
道格拉斯·克罗克福德(Douglas Crockford)：不，
Takes care of all this for us right? &gt;&gt; Douglas Crockford: No, no,

105
00:06:30.089 --> 00:06:31.750
没人会拿走的。&gt；&gt；演讲者3：我真的在等
nobody's taking it. &gt;&gt; Speaker 3: I'm really waiting for

106
00:06:31.750 --> 00:06:37.528
你给我解释一下，我不知道。
you to explain to me, I don't know.

107
00:06:37.528 --> 00:06:42.225
在哪里，我想知道我在做什么。&gt；&gt；Douglas Crockford：我想我是
Where, I wanna know what I'm doing. &gt;&gt; Douglas Crockford: I think I'm

108
00:06:42.225 --> 00:06:43.196
说清楚了。
making it clear.

109
00:06:43.196 --> 00:06:47.110
无论如何，但浏览器不会阻止任何这些。
Anyway but the browser does not prevent any of these.

110
00:06:47.110 --> 00:06:49.659
Web标准需要这些弱点。
Web standards require these weaknesses.

111
00:06:49.659 --> 00:06:53.509
如果你要从头开始建立一个新的网络浏览器。
If you were to build a new web browser from scratch.

112
00:06:54.689 --> 00:06:59.228
如果它没有让你和你的客户接受所有这些
If it didn't subject you and your customers to all of these

113
00:06:59.228 --> 00:07:03.963
潜在的问题，它将不符合标准。
potential problems, it would not be standards compliant.

114
00:07:03.963 --> 00:07:06.637
一次成功的攻击的后果是可怕的，
And the consequences of a successful attack are horrible,

115
00:07:06.637 --> 00:07:10.100
有对客户的伤害或失去信任，有法律责任。
there's harm to customers or loss of trust, there are legal liabilities.

116
00:07:10.100 --> 00:07:13.870
现在甚至有关于过失的刑事责任的讨论，因为
There's even talk now about criminal liabilities for negligence, for

117
00:07:13.870 --> 00:07:15.810
允许人们的身份被盗。
allowing people to have their identity stolen.
