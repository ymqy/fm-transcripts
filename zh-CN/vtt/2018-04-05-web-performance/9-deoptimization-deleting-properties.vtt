WEBVTT

1
00:00:00.774 --> 00:00:01.867
&gt；&gt；steve：让我们玩一些其他的东西。
&gt;&gt; Steve: Let's play
with some other stuff.

2
00:00:04.879 --> 00:00:08.478
&GT；&GT；史蒂夫：我会做所有这些，我会再打一次电话。
&gt;&gt; Steve: I'm gonna do all those,
and I'm gonna call one more time.

3
00:00:16.750 --> 00:00:19.219
&gt；&gt；steve：因为像这样的东西可以做各种各样的事情，对吗？
&gt;&gt; Steve: Because like this thing
can do all sorts of things, right?

4
00:00:19.219 --> 00:00:21.149
加号是通用的。
The plus sign is versatile.

5
00:00:21.149 --> 00:00:23.527
我可以将数字相加并将其植入字符串。
I can add numbers and plant it in strings.

6
00:00:23.527 --> 00:00:27.600
这是JavaScript中最好的函数。
This is the best function in JavaScript.

7
00:00:27.600 --> 00:00:28.795
我们会去做的，我们会这样做的。
We'll go ahead and we'll do that.

8
00:00:31.891 --> 00:00:36.299
&gt；&gt；steve：好的，它被优化了，但我觉得这不是全部。
&gt;&gt; Steve: All right, it was optimized, but
I feel like that wasn't the full story.

9
00:00:36.299 --> 00:00:39.667
对，会发生什么，好吧，
Right, what would happen, all right,

10
00:00:39.667 --> 00:00:45.029
让我做另一面旗帜，这是我们可以一起玩的地方。
let me do another flag and
this is where we can all play together.

11
00:00:45.029 --> 00:00:47.267
有人想猜猜Trace deopt是做什么的吗？
Anyone wanna guess what trace deopt does?

12
00:00:47.267 --> 00:00:48.649
&gt；&gt；扬声器2：否。
&gt;&gt; Speaker 2: No.

13
00:00:48.649 --> 00:00:52.100
&gt；&gt；[笑]。
&gt;&gt; [LAUGH].

14
00:00:52.100 --> 00:00:54.798
&GT；&GT；史蒂夫：在某一点上，你们都喜欢，这就是我们都关注的方式。
&gt;&gt; Steve: At one point you are all like,
this is how we all pay attention.

15
00:00:54.798 --> 00:00:58.851
在某一点上，我将输入TRACE DEOPT或DEPOT。
At one point I am going to type
in like trace deopt, or depot.

16
00:00:58.851 --> 00:01:00.508
因为我已经做过1000次了，
Because I have done it 1,000 times,

17
00:01:00.508 --> 00:01:02.982
我没有理由不在很多人面前做这件事。
there is no reason I wouldn't do
it in front of a lot of people.

18
00:01:02.982 --> 00:01:07.399
当我看起来很困惑为什么事情没有发生时，必须有人打电话给我
Someone has to call me on that one when
I look confused as to why things didn't

19
00:01:07.399 --> 00:01:08.230
工作，好的。
work, okay.

20
00:01:08.230 --> 00:01:09.301
酷，让我们运行它。
Cool, let's run that.

21
00:01:10.359 --> 00:01:12.804
&gt；&gt；steve：这里有一大堆东西。
&gt;&gt; Steve: There's a bunch of stuff here.

22
00:01:12.804 --> 00:01:17.620
去优化函数，有趣。
Deoptimizing the function, interesting.

23
00:01:17.620 --> 00:01:21.795
所以它进行了优化，然后取消了优化。
So it optimized and then it deoptimized.

24
00:01:21.795 --> 00:01:23.340
如果我去掉这条线呢？
What if I take out this line?

25
00:01:26.739 --> 00:01:29.055
它只是优化了。
It only optimized.

26
00:01:29.055 --> 00:01:31.789
我想我们已经准备好做一个假设了。
I think we are ready to make a hypothesis.

27
00:01:31.789 --> 00:01:34.551
顺便说一下我们在做科学。
We're doing science by the way.

28
00:01:34.551 --> 00:01:38.569
酷，所以我们加了两个数字很多次。
Cool, so
we added two numbers a bunch of times.

29
00:01:38.569 --> 00:01:43.525
然后我们添加了两个字符串，这让我们去优化了。
And then we added two strings and
that got us deoptimized.

30
00:01:43.525 --> 00:01:44.978
有人想要一个风险假设吗？
Anyone want a venture hypothesis?

31
00:01:46.900 --> 00:01:50.379
如果没有我有幻灯片不用担心，没有压力。
If not I have slides don't worry,
no pressure.

32
00:01:50.379 --> 00:01:54.936
我只是要为假设敞开大门。
I'm just gonna open the floor for
hypothesis.

33
00:01:54.936 --> 00:01:57.611
有人有吗？
Anyone got one?

34
00:01:57.611 --> 00:02:00.691
好吧，精神上，至少我们有怀疑。
All right, mentally,
like we have suspicions at least.

35
00:02:00.691 --> 00:02:01.456
可能还没准备好。
May not be ready.

36
00:02:01.456 --> 00:02:05.432
我看到人们，他们已经把手举起来，但他们还没有完全准备好。
I see people they've got their hands up
the mouth up but they're not fully ready.

37
00:02:05.432 --> 00:02:06.421
没有错误的答案。
There's no wrong answers.

38
00:02:06.421 --> 00:02:09.359
我的意思是，有错误的答案，因为这是一个算法，这里有科学。
I mean, there are wrong answers cuz this
is an algorithm, there's science here.

39
00:02:09.359 --> 00:02:13.240
但我们是朋友，对吧？
But we're amongst friends, right?

40
00:02:13.240 --> 00:02:16.336
聊天室和这里。
Both chat room and here.

41
00:02:16.336 --> 00:02:21.051
酷，所以我们有一些
Cool, so we have some

42
00:02:21.051 --> 00:02:26.824
假设，非常好。
hypotheses, very nice.

43
00:02:26.824 --> 00:02:29.569
是的，对于那些你在聊天中的人，我看到了问题。
Yeah, for those you're in the chat,
I see the question.

44
00:02:29.569 --> 00:02:32.437
我有一张幻灯片，会很好的。
I got a slide, it's going to be good.

45
00:02:32.437 --> 00:02:36.675
好的，我们看到我们从中得到的两个不同的东西
All right, so we see that the two
different things we're getting out of

46
00:02:36.675 --> 00:02:40.699
去优化不清楚这里发生了什么。
de-optimization unclear
what's happening here.

47
00:02:40.699 --> 00:02:46.670
好的，所以这是一个问题，所以发生了什么，让我们尝试其他的东西。
All right, so that's a problem, so
what happens, let's try something else up.

48
00:02:46.670 --> 00:02:47.862
我要做两次。
I'm gonna do it twice.

49
00:02:51.721 --> 00:02:54.471
&GT；&GT；史蒂夫：我们现在不需要这条线，
&gt;&gt; Steve: We don't need
this line right now,

50
00:02:54.471 --> 00:02:57.502
我们知道这条线是有问题的。
we know that that line is problematic.

51
00:02:57.502 --> 00:03:04.250
我们会继续下去，没有基准。
And we'll go ahead, and no benchmark.

52
00:03:04.250 --> 00:03:06.878
我们现在不要对追踪行动做任何事。
Let's not do anything with
the trace ops right now.

53
00:03:10.253 --> 00:03:13.878
&GT；&GT；史蒂夫：这将需要更长的时间，因为它是，我们正在做两次。
&gt;&gt; Steve: It will take a little longer
cuz it's, we're doing it twice.

54
00:03:15.229 --> 00:03:16.997
令人怀疑的是需要更长的时间。
It's taking suspiciously longer.

55
00:03:20.277 --> 00:03:22.009
&gt；&gt；Steve：我要回去看看这里发生了什么。
&gt;&gt; Steve: I'm gonna go back over and
see what's going on here.

56
00:03:25.271 --> 00:03:26.118
&gt；&gt；steve：我们必须设置。
&gt;&gt; Steve: We have to set.

57
00:03:32.704 --> 00:03:34.015
&gt；&gt；Steve：我们将重新设置迭代。
&gt;&gt; Steve: We'll set
the iterations back up.

58
00:03:38.581 --> 00:03:41.680
&gt；&gt；steve：酷，拍了47张，只是，精神笔记。
&gt;&gt; Steve: Cool, took 47,
just, mental note.

59
00:03:41.680 --> 00:03:43.777
47毫秒
47 milliseconds.

60
00:03:43.777 --> 00:03:45.650
让我们把那条有问题的线放回去。
Let's put that problematic line back in.

61
00:03:48.889 --> 00:03:52.920
好的，差不多，不是双倍，几乎是时间的两倍，对吧？
Okay, almost, not double,
almost double the amount of time, right?

62
00:03:52.920 --> 00:03:57.145
所以即使在中间的某个地方，我们也可以看到，就像有不同的类型
So even somewhere in the middle there we
can see that like having different types

63
00:03:57.145 --> 00:03:59.604
的参数肯定超过了那个函数，
of arguments past that
function definitely,

64
00:03:59.604 --> 00:04:01.700
那里肯定有问题。
there's definitely a problem there.

65
00:04:01.700 --> 00:04:04.340
它肯定引起了某种减速，对吧？
It definitely caused some
kind of slow down, right?

66
00:04:04.340 --> 00:04:05.435
以后再谈这个。
Talk more about this later.

67
00:04:05.435 --> 00:04:06.792
我们现在只是在做心理笔记。
We're just taking mental notes right now.

68
00:04:06.792 --> 00:04:07.681
我们在做科学研究。
We're doing science.

69
00:04:07.681 --> 00:04:13.796
我们在金科玉律下填满我们的实验笔记本
We're filling up our lab notebooks
underneath the golden rules and

70
00:04:13.796 --> 00:04:17.127
我们稍后会做一些测试，酷。
we'll make some test later, cool.

71
00:04:17.127 --> 00:04:21.065
好吧，那绝对，绝对是个问题。
All right, that was definitely,
definitely a problem.

72
00:04:21.065 --> 00:04:23.420
让我们再运行一次代码。
Let's also run the code one more time.

73
00:04:23.420 --> 00:04:28.204
我们要做的另一个节点技巧是，我们将继续
We're gonna do another little
node trick is, we'll go ahead and

74
00:04:28.204 --> 00:04:33.261
我们将使用一些你以前可能没有见过，也许有过的语法。
we're gonna use some syntax you
might not seen before, maybe have.

75
00:04:33.261 --> 00:04:40.829
假设NeverOptimizeFunction(Add)。
It's let's say NeverOptimizeFunction(add).

76
00:04:40.829 --> 00:04:42.909
你喜欢，我为什么要用这个？
Your like, why would I ever use this?

77
00:04:42.909 --> 00:04:47.274
好消息是你不能，这不是真的，
Good news is that you can't,
it's It's not real, it's kind of real,

78
00:04:47.274 --> 00:04:48.932
但这不是真的。
but it's not really real.

79
00:04:48.932 --> 00:04:52.654
所以我们会说节点，我们会说这允许本机语法，
So we'll say node and
we'll say this allow natives syntax,

80
00:04:52.654 --> 00:04:55.286
这基本上是为了调试。
which is basically this is for debugging.

81
00:04:55.286 --> 00:04:58.380
这使您可以将某些标志解析为V8，该标志将继续并
This lets you parse certain flags
to V8 that will go ahead and

82
00:04:58.380 --> 00:05:00.757
让你进一步喜欢调试信息。
get you further like
debugging information.

83
00:05:00.757 --> 00:05:03.701
所以在这里我们想要做的是，我们有效地，
So here what we wanna do is,
we effectively,

84
00:05:03.701 --> 00:05:08.666
我们将使用这个，你看到它的前缀是一个百分号，对吧？
we're gonna use this, you saw it was
prefixed with a percent sign, right?

85
00:05:08.666 --> 00:05:12.571
这是因为这不是有效的JavaScript，它将在启用此标志的情况下工作，
This is cuz that's not valid JavaScript,
that will work with this flag on,

86
00:05:12.571 --> 00:05:16.779
代码不会在没有标志的情况下运行，这基本上是一种触发东西的方式，所以
the code will not run without the flag on,
it's basically a way to trigger stuff so

87
00:05:16.779 --> 00:05:19.129
你可以看到效果。
you can kind of see the effects.

88
00:05:19.129 --> 00:05:23.343
所以我们继续说，
So we'll go ahead, say that,

89
00:05:23.343 --> 00:05:29.509
我将调用Benchmark 235毫秒。
I'll call benchmark 235 milliseconds.

90
00:05:29.509 --> 00:05:32.310
我们之前在41岁时运行过两次，对吗？
We ran it twice before at 41, right?

91
00:05:33.560 --> 00:05:38.882
显然，这种优化是有用的，我们应该完全保留它。
Clearly, that optimization is useful and
we should totally keep it.

92
00:05:38.882 --> 00:05:42.425
是的，如果我们从不优化函数，它肯定会慢很多。
Yeah, if we never optimize the function,
it is definitely way slower.

93
00:05:42.425 --> 00:05:45.077
所以我们知道这里发生了一些事情，即使当我
So we know that there are some
things happening here even when I

94
00:05:45.077 --> 00:05:46.103
去过一次优化。
got deoptimized once.

95
00:05:46.103 --> 00:05:48.600
好像又热起来了。
It seems like got reheated back up.

96
00:05:48.600 --> 00:05:51.711
我们可以看到，不优化它从来都不是一件伟大的事情。
We can see that non optimizing
it ever is not a great thing.

97
00:05:51.711 --> 00:05:54.019
这样也就像是推销。
And like that is also like a sales pitch.

98
00:05:54.019 --> 00:05:55.495
就像这是一个简单的添加功能。
Like this is a simple add function.

99
00:05:55.495 --> 00:05:58.040
你可以想象有多复杂的函数。
You can imagine what a much
more complicated function.

100
00:05:58.040 --> 00:05:59.367
如果我们能优化这些。
If we can optimize those.

101
00:05:59.367 --> 00:06:04.134
您可以看到高达100倍的性能。
You can see up to 100 X more performance.

102
00:06:04.134 --> 00:06:06.696
酷毙了。
Cool.

103
00:06:06.696 --> 00:06:09.629
让我们看得更深一点。
Let's look a little bit deeper.

104
00:06:09.629 --> 00:06:12.480
我们现在实际上要转到另一个文件，这个文件名为add。
We're actually going to go to a different
file now, this one that's called add.

105
00:06:14.699 --> 00:06:17.571
你看这里我们有一个函数。
And you see here we have a function.

106
00:06:17.571 --> 00:06:21.475
我们将在这里使用另一种特殊的本机语法，称为Optimize function on
We're going to use another special native
syntax here called optimize function on

107
00:06:21.475 --> 00:06:22.800
下一个电话。
next call.

108
00:06:22.800 --> 00:06:26.141
有人想大胆猜猜这个函数是做什么的吗？
Anyone want to take a wild
guess what this function does?

109
00:06:26.141 --> 00:06:26.934
免费的。
For the freebie.

110
00:06:26.934 --> 00:06:30.201
[笑]某人[笑]
[LAUGH] Someone [LAUGH].

111
00:06:30.201 --> 00:06:32.574
&gt；&gt；扬声器2：它不会优化下一个Fuinciton？
&gt;&gt; Speaker 2: It doesn't
optimise the next fuinciton?

112
00:06:32.574 --> 00:06:34.654
&gt；&gt；steve：那么下一个函数上的下一个函数呢？
&gt;&gt; Steve: Well the next
function on the next function?

113
00:06:34.654 --> 00:06:35.154
&gt；&gt；扬声器2：是的。史蒂夫：是的。
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Steve: Yeah.

114
00:06:35.154 --> 00:06:36.103
&gt；&gt；扬声器2：第二个呼叫。
&gt;&gt; Speaker 2: The second call.

115
00:06:36.103 --> 00:06:36.744
&gt；&gt；steve：好吧，下一次
&gt;&gt; Steve: Well on the next

116
00:06:36.744 --> 00:06:37.319
打电话。&gt；&gt；扬声器2：好的。
call.
&gt;&gt; Speaker 2: Okay.

117
00:06:37.319 --> 00:06:38.079
&gt；&gt；steve：对。
&gt;&gt; Steve: Right.

118
00:06:38.079 --> 00:06:41.231
此时将对其进行优化。
It will be optimize at that point.

119
00:06:41.231 --> 00:06:45.334
现在我们需要在某一点上允许我
Now we need that allow At one point I'll

120
00:06:45.334 --> 00:06:49.557
也忘了给原住民复数，所以
forget to pluralize natives as well, so

121
00:06:49.557 --> 00:06:55.132
负责这件事的人。曾经和
somebody who's in charge of that one.
Had and

122
00:06:55.132 --> 00:07:00.235
也会，让我们扔
will also,let's throw

123
00:07:00.235 --> 00:07:07.060
在跟踪选项中。酷，我们可以看到它是优化的。
in the trace opt.
Cool, we can see that it was optimized.

124
00:07:07.060 --> 00:07:09.274
即使我们只运行了一次，这也是有意义的。
Which makes sense even
though we only ran it once.

125
00:07:09.274 --> 00:07:12.528
就像函数通常在第一次运行时没有被优化一样，
Like a function usually is not
optimized the first time it is run,

126
00:07:12.528 --> 00:07:15.206
因为去优化室不是免费的。
because going to the optimizing
parlor isn't free.

127
00:07:15.206 --> 00:07:15.769
对吧？
Right?

128
00:07:15.769 --> 00:07:16.889
那里有工作发生。
There's work that happens there.

129
00:07:16.889 --> 00:07:20.096
当我们工作的时候会发生什么？
And what happens when we do work?

130
00:07:20.096 --> 00:07:20.949
这需要一些时间。
It takes some time.

131
00:07:20.949 --> 00:07:22.899
对吧？所以我们希望如果我们要
Right?
So we hope that if we're going to

132
00:07:22.899 --> 00:07:26.221
通过将其发送到优化客厅来完成工作，它会走得更快。
do work by sending it to
the optimizing parlor, it goes faster.

133
00:07:26.221 --> 00:07:29.432
然后如果我们把它变成字符串本身会发生什么。
And then what happens if we
turn this into a string per se.

134
00:07:32.180 --> 00:07:33.961
&gt；&gt；Steve：我们也会跟踪deopt。
&gt;&gt; Steve: We'll also trace deopt.

135
00:07:36.600 --> 00:07:37.846
&gt；&gt；steve：我想我告诉你把事情搞砸了。
&gt;&gt; Steve: I guess i've
ruined it by telling you.

136
00:07:37.846 --> 00:07:41.786
这次我们也会追踪失优化。
We'll also trace
the deoptimizaion this time.

137
00:07:41.786 --> 00:07:46.004
您可以看到，我们在一次调用该函数后就取消了该函数的优化
You can see that we deoptimize that
function just after one time calling it

138
00:07:46.004 --> 00:07:48.519
有一些不同的论点。
with some different arguments.

139
00:07:48.519 --> 00:07:49.040
好吧。
Right.

140
00:07:49.040 --> 00:07:50.389
我们不知道又发生了什么。
We don't know what's happening again.

141
00:07:50.389 --> 00:07:54.199
但我认为我们已经到了准备好的地步，
But I think we are getting to
the point where we are ready to,

142
00:07:54.199 --> 00:07:56.653
就像，想一想这件事。
like, think a little bit about this.

143
00:07:56.653 --> 00:07:57.634
酷毙了。
Cool.

144
00:07:57.634 --> 00:07:59.430
让我们回去谈谈我们刚才看到的。
Let's go back and
talk about what we just saw.

145
00:08:05.379 --> 00:08:08.925
所以这个函数，我们以前见过。
So this function, we've seen it before.

146
00:08:08.925 --> 00:08:11.339
除了这个有语法错误并且不能运行。
Except this one has a syntax error and
won't run.

147
00:08:11.339 --> 00:08:14.100
所以不要看那边。
So don't look at that side.

148
00:08:14.100 --> 00:08:17.319
我们仍然有它去优化编译器。
We still have it went to
the optimizing compiler.

149
00:08:17.319 --> 00:08:19.110
我们有这个更快的版本。
We got this faster version.

150
00:08:19.110 --> 00:08:26.649
一个版本，你知道47毫秒和235之间的区别。
A version that was you know the difference
between 47 milliseconds and 235.

151
00:08:26.649 --> 00:08:31.343
但就像我们看到的那样，正在发生的事情将会发生。
But like that's the stuff that is
happening is going to we saw that.

152
00:08:31.343 --> 00:08:35.006
这是使用我们之前说过的东西，并且
This is using the thing
that we said before, and

153
00:08:35.006 --> 00:08:39.687
有一些要点叫做投机性优化。
there's bullet points called
speculative optimization.

154
00:08:39.687 --> 00:08:42.190
我们使用翻译，因为翻译已经准备好了。
We use the interpreter cuz
the interpreter is ready to go.

155
00:08:42.190 --> 00:08:48.296
但是它不知道关于我们的代码的任何东西，所以它没有Turbofan那么快。
But it doesn't know anything about our
code, so it's not as fast as Turbofan is.

156
00:08:48.296 --> 00:08:50.879
它需要知道的优化编译器。
The optimizing compiler It needs to know.

157
00:08:50.879 --> 00:08:52.850
JavaScript不是类型化语言。
JavaScript is not a typed language.

158
00:08:52.850 --> 00:08:57.029
它不知道它每次都会得到两个数字，对吧。
It doesn't know that it's gonna
get two numbers every time, right.

159
00:08:57.029 --> 00:08:59.889
所以发生的事情就是翻译就像我会处理这件事一样。
So what happens is the interpreter
is like I would handle this.

160
00:08:59.889 --> 00:09:01.032
我会做一堆艰苦的工作。
I would do a bunch of hard work.

161
00:09:01.032 --> 00:09:04.139
我会查清楚一切都会好起来的。
I will look everything up
It's all gonna be fine.

162
00:09:04.139 --> 00:09:06.960
它走在前面，它以缓慢的方式做这件事。
It goes and it gets ahead and
it's doing it the slow way.

163
00:09:06.960 --> 00:09:10.200
最终，就像嘿，它正在生成这些反馈对象
Eventually it's like hey it's generating
these feedback objects that are going

164
00:09:10.200 --> 00:09:13.379
对涡轮风扇来说，我想我已经足够了解人们是怎么称呼它的了
to turbofans like, I think I know enough
about how people are calling this

165
00:09:13.379 --> 00:09:16.029
添加我认为我已经准备好做出决定的函数。
add function that I think that
I'm ready to make the decision.

166
00:09:16.029 --> 00:09:18.322
它总是有两个数字，对吧？
It always gets two numbers, right?

167
00:09:18.322 --> 00:09:22.398
一旦我们对它有了足够的了解，我们就可以假设即使是这片荒无人烟的西部
And once we know enough about it we can
assume that even this untyped wild west of

168
00:09:22.398 --> 00:09:26.043
一种编程语言，是的，没有类型，没有保证，
a programming language That yeah
there's not type, no guarantees,

169
00:09:26.043 --> 00:09:30.120
但我们很确定每次都会通过数字
but we're pretty certain that numbers
are going to get passed in every time and

170
00:09:30.120 --> 00:09:34.090
这就是它成为被优化的候选者的时候。
that's when it becomes a candidate for
being optimized.

171
00:09:34.090 --> 00:09:36.029
如果一根绳子滑进去了呢？
And if a string slips in there?

172
00:09:36.029 --> 00:09:38.138
好吧会发生什么？
All right what happens?

173
00:09:38.138 --> 00:09:43.419
当我[笑]我认为发生的一切都不是真的。
As I [LAUGH] everything I
thought happens isn't true.

174
00:09:43.419 --> 00:09:43.919
对吧？
Right?

175
00:09:45.330 --> 00:09:50.255
所以，在这一点上，我们得到了红色箭头。
So, at that point, we get the red arrow.

176
00:09:50.255 --> 00:09:52.211
对吧？在这一点上就像是，听着，
Right?
And at that point it's like, listen,

177
00:09:52.211 --> 00:09:55.193
我做了所有这些假设，我以为会是数字。
I made all these assumptions,
I thought it was going to be numbers.

178
00:09:55.193 --> 00:09:56.426
我不知道发生了什么
I don't know what's happening any more.

179
00:09:56.426 --> 00:09:58.153
点火你把这个拿回去。
Ignition you take this back.

180
00:09:58.153 --> 00:10:00.577
很明显我处理不了这件事。
I clearly can't handle this.

181
00:10:00.577 --> 00:10:03.113
当我们回到字节码时，对吗？
Which when we go back to the byte code,
right?

182
00:10:03.113 --> 00:10:06.445
优化编译器针对它看到的内容进行优化，但是
The optimizing compiler optimizes for
what it's seen but

183
00:10:06.445 --> 00:10:10.592
如果它看到一些新的有问题的东西，对吧，结果就像
if it sees something new That's
problematic right it turns out that like

184
00:10:10.592 --> 00:10:14.945
有几次它会好的，我已经准备好重新优化，如果这发生得足够多的话
a few times it will alright I'm ready
to re-optimize if that happens enough

185
00:10:14.945 --> 00:10:19.570
因为这样的成本是昂贵的，所以像我这样的去优化编译器是昂贵的
times cuz like that cost is expensive
the de-optimizing compiler which is like I

186
00:10:19.570 --> 00:10:22.970
别再碰这个功能了，明白了吗？
don't touch this function
anymore right you get it?

187
00:10:22.970 --> 00:10:27.282
然后那个数字我现在不会说这个数字因为它改变了但是
Then that number I'm not gonna say the
number right now because it changes but

188
00:10:27.282 --> 00:10:31.327
就像当你在一段时间后变得像Strings一样
like after a certain number of times
of getting like Strings when you were

189
00:10:31.327 --> 00:10:35.837
期望像你这样的数字基本上会在一个像OK Optimize这样的循环中结束
expecting numbers like you would end up in
a basically a loop of like okay optimize

190
00:10:35.837 --> 00:10:40.283
这个函数很酷，它优化了它，好吧，它又变热了，就像优化一样
the function cool it optimizes it alright
it's getting hot again like optimize

191
00:10:40.283 --> 00:10:44.726
函数知道另一个字符串滑进来了，它只会玩那个游戏，所以
the function know another string slipped
in it's only gonna play that game so

192
00:10:44.726 --> 00:10:45.831
很多次对吧？
many times right?

193
00:10:45.831 --> 00:10:49.490
最后，就像我没有优化这个函数，我一直在做这个
And then eventually it's like I don't
optimize this function I've been down this

194
00:10:49.490 --> 00:10:53.080
路我不再感兴趣了，这不再是我的生活。
road I'm not interested anymore
it's not the life I live anymore.

195
00:10:53.080 --> 00:10:56.239
好吧。所以，就像我们的代码有大量的
Right.
So, like if our code has a wild number of

196
00:10:56.239 --> 00:11:01.269
不同的变量，那么它完全有可能放弃。
different variables then it is totally
possible that it just gives up.

197
00:11:02.720 --> 00:11:03.604
酷毙了。
Cool.

198
00:11:03.604 --> 00:11:08.990
所以我们现在知道，我们知道一些关于字符串和数字的知识，对吗？
So we now know, we know a little
about strings and numbers, right?

199
00:11:08.990 --> 00:11:12.639
但显然JavaScript不仅仅是字符串和
But clearly there's more to
JavaScript than strings and

200
00:11:12.639 --> 00:11:17.360
数字，所以我们要跳进去玩更多的代码。
numbers so we're going to jump in and
play around with a little more code.

201
00:11:17.360 --> 00:11:19.587
好吧。我会回答一个问题
All right.
I'll answer one question and

202
00:11:19.587 --> 00:11:21.469
那我们就回去吧
then we'll get back to it.

203
00:11:21.469 --> 00:11:22.161
酷毙了。
Cool.

204
00:11:22.161 --> 00:11:25.798
所以有一个问题，比如一个函数要被调用多少次。
So there was a question of like how
many times a function has to get called.

205
00:11:25.798 --> 00:11:27.118
完全不一定。
That's not necessarily at all.

206
00:11:27.118 --> 00:11:30.365
这取决于有多少次，就像，它不是，改变了。
It depends on how many times,
like, it's not, that changes.

207
00:11:30.365 --> 00:11:34.990
但是，就像，我们不会亲自调用一个函数很多次。
But of the, like, we don't personally
call a function a lot of times.

208
00:11:34.990 --> 00:11:35.705
对吧？
Right?

209
00:11:35.705 --> 00:11:39.125
但我们并不总是，就像我们不写函数并不意味着，
But we don't always, like just cuz we
don't write the function doesn't mean,

210
00:11:39.125 --> 00:11:41.149
就像我们不知道它叫什么，对吧？
like we don't know what it was called,
right?

211
00:11:41.149 --> 00:11:45.403
例如，我们知道在React中渲染方法被称为“Anytime
So for instance, we know in React
that render method is called "Anytime

212
00:11:45.403 --> 00:11:48.134
我们的应用程序中的“State Changes”，对吗？
State Changes" in our application, right?

213
00:11:48.134 --> 00:11:52.528
因此呈现方法可以被调用“Anytime”，特别是如果
So that render method could get
called "anytime", especially if

214
00:11:52.528 --> 00:11:57.769
它在正在传递的应用程序组件中声明。
it's stated in the application
component that's getting passed down.

215
00:11:57.769 --> 00:12:02.136
对，render被调用了，即使我们从未多次编写render。
Right, render's getting called, even if
we never write render more than once.

216
00:12:02.136 --> 00:12:07.197
因此，我们的代码中有些部分最终被调用了很多次，对吗？
So there are parts of our code that
end up getting called a lot, right?

217
00:12:07.197 --> 00:12:11.659
如果你考虑一下我之前展示的我自己的应用程序的火焰图，
If you think about that flame graph that
I showed earlier of my own application,

218
00:12:11.659 --> 00:12:15.337
火焰燃烧得很深，有很多小碎片。
that flame got down and deep and
there were a lot of little pieces.

219
00:12:15.337 --> 00:12:19.581
顶端的部分相当大，但有很多小部分是
The top pieces were pretty big, but there
were a lot of little pieces that were

220
00:12:19.581 --> 00:12:23.692
一次又一次地接到电话，当我去做的时候，我真的很惊讶
getting called repeatedly That I was
actually surprised by when I went to do

221
00:12:23.692 --> 00:12:27.869
调查[INAUDIBLE]有时像我们认为不是的代码
that investigating [INAUDIBLE] so
sometimes like code that we don't think is

222
00:12:27.869 --> 00:12:31.485
与我们的应用程序中的状态更改相比，调用次数很多。
getting called a lot versus state
changes in our application do.

223
00:12:31.485 --> 00:12:32.386
好的，酷。
All right, cool.

224
00:12:32.386 --> 00:12:35.231
因此，让我们看看更多代码重做，
So let's take a look at
some more code redo,

225
00:12:35.231 --> 00:12:36.409
&gt；&gt；[INAUDIBLE]
&gt;&gt; [INAUDIBLE]

226
00:12:36.409 --> 00:12:37.072
&gt；&gt；steve：酷
&gt;&gt; Steve: Cool

227
00:12:37.072 --> 00:12:38.669
&gt；&gt；[INAUDIBLE]
&gt;&gt; [INAUDIBLE]

228
00:12:38.669 --> 00:12:40.023
史蒂夫：是的。
&gt;&gt; Steve: Yeah.

229
00:12:40.023 --> 00:12:42.649
&gt；&gt；Speaker 2：如果您在定义类型时使用类似Flow的东西。
&gt;&gt; Speaker 2: If you're using something
like flow where you're defining the types.

230
00:12:42.649 --> 00:12:46.490
这是他们优化的东西还是可以像处理和意识到的一样？
Is that's something they optimize or
can like handle and like be aware of or?

231
00:12:46.490 --> 00:12:47.731
史蒂夫：是的。
&gt;&gt; Steve: Yes.

232
00:12:47.731 --> 00:12:49.068
这也是一个类似于最近的问题。
That was also a question like recent.

233
00:12:49.068 --> 00:12:50.628
就像你可以强制执行的任何东西一样。
Like anything where you can enforce.

234
00:12:50.628 --> 00:12:55.341
你总是试图交出相同的类型会有效地加快它的速度
That you're always trying to hand the same
types in will effectively speed up It is

235
00:12:55.341 --> 00:13:00.049
你不太可能最终得到不是那种类型的代码，对吧？
less likely that you'll end up with
code that is not of that type, right?

236
00:13:00.049 --> 00:13:02.044
是的，就像我们用打字稿写的一样，它是经过编译的。
Yeah, like we write in TypeScript,
it get's compiled.

237
00:13:02.044 --> 00:13:03.080
它是JavaScript。
It is JavaScript.

238
00:13:03.080 --> 00:13:05.687
会不会有什么事情发生在它两次落下的地方？
Could something happen
where it gets down twice?

239
00:13:05.687 --> 00:13:06.606
完全正确。
Totally.

240
00:13:06.606 --> 00:13:11.131
是的，使用TypeScript，Flow，ReasonML都将肯定
Yeah, using TypeScript, Flow,
ReasonML will all definitely

241
00:13:11.131 --> 00:13:15.676
就像你在帮助涡轮风扇帮助你在这些点上，对吗？
like You are helping turbo fan
help you at those points, right?

242
00:13:15.676 --> 00:13:22.548
因此，在这些情况下会有潜在的性能提升。
So there are potential
performance gains in those cases.

243
00:13:22.548 --> 00:13:27.722
好的，让我们往前跳一跳，我们将
All right, so let's actually go ahead and
jump back in a little bit, we're gonna

244
00:13:27.722 --> 00:13:32.683
稍微改变一下，这样我们就会失去我们的旧时尚添加功能。
change this a little, so we're gonna
lose our good old fashion add function.

245
00:13:32.683 --> 00:13:33.740
我们可以再写一遍。
We could always write it again.

246
00:13:33.740 --> 00:13:36.493
我相信我对这个代码了如指掌。
I feel confident that I know this
code like the back of my hand.

247
00:13:38.169 --> 00:13:40.351
&gt；&gt；steve：好的，酷。
&gt;&gt; Steve: All right, cool.

248
00:13:40.351 --> 00:13:44.946
所以你可以说&gt；&gt；Steve：让我们创建一个JavaScript类。
So you could say
&gt;&gt; Steve: Let's make a JavaScript class.

249
00:13:51.748 --> 00:13:59.091
&gt；&gt；Steve：他们将取x和y&gt；&gt；Steve：this.y=y。
&gt;&gt; Steve: They'll take x and y
&gt;&gt; Steve: This.y = y.

250
00:13:59.091 --> 00:14:02.229
好的，很酷，我们要继续
All right cool and
we're just gonna go ahead and

251
00:14:02.229 --> 00:14:06.035
我们将JSON一串[INAUDIBLE]很多次。
we're gonna JSON a string of
[INAUDIBLE] a bunch of times.

252
00:14:06.035 --> 00:14:15.996
因此，当有迭代时，我们会说&gt；&gt；Steve：等于新的点。
So while there are iterations we'll say
&gt;&gt; Steve: Equals the new point.

253
00:14:15.996 --> 00:14:17.488
2和4。
2 and 4.

254
00:14:17.488 --> 00:14:18.393
我们可以使用迭代次数。
We could use the iteration number.

255
00:14:18.393 --> 00:14:19.827
我们可以做任何我们想做的事。
We could do whatever we want.

256
00:14:19.827 --> 00:14:20.634
这是密码。
It's code.

257
00:14:24.786 --> 00:14:28.302
&gt；&gt；steve：好的，让我们继续，让我们运行它。
&gt;&gt; Steve: All right let's go ahead and
let's run that.

258
00:14:35.730 --> 00:14:37.761
&GT；&GT；史蒂夫：这真的需要很长的时间。
&gt;&gt; Steve: That's taking
a really long time.

259
00:14:37.761 --> 00:14:41.322
你可以看到它花了大约5秒。
You can see it took about 5 seconds.

260
00:14:41.322 --> 00:14:43.389
如果是那样的话，我想我们已经表达了我们的观点。
In that case I think we've made our point.

261
00:14:43.389 --> 00:14:48.485
让我们用稍微少一点的喜欢来继续。
Let's go ahead with like slightly less.

262
00:14:48.485 --> 00:14:49.200
所以，这是一百万。
So, it's a million.

263
00:14:51.649 --> 00:14:53.729
酷毙了。
Cool.

264
00:14:53.729 --> 00:14:57.592
所以在这里我们可以看到大约半秒到课。
So here we can see about
half a second to class.

265
00:14:57.592 --> 00:14:59.207
而且并不容易。
And is not easy.

266
00:14:59.207 --> 00:15:00.539
那里有很多规则。
There's a lot of rules there.

267
00:15:00.539 --> 00:15:02.032
这不是世界上最简单的事情。
It's not the simplest thing in the world.

268
00:15:05.519 --> 00:15:10.873
&gt；&gt；steve：但是假设我们设置了。
&gt;&gt; Steve: But let's say that we set.

269
00:15:10.873 --> 00:15:15.657
它，作为我们的练习，我们会提出一个新的观点，
It, as our exercise, and
we'll make a new point,

270
00:15:15.657 --> 00:15:19.566
我们将设置点y为未定义。
and we'll set point y to be undefined.

271
00:15:19.566 --> 00:15:21.384
对，嗯哼，好的。
Right, mm-hm, okay.

272
00:15:21.384 --> 00:15:23.768
我们再试一次。
We'll try it again.

273
00:15:23.768 --> 00:15:24.648
差不多。
About the same.

274
00:15:24.648 --> 00:15:26.409
对，有一种，它是一台电脑。
Right, there's a like, it's a computer.

275
00:15:26.409 --> 00:15:28.572
有事情在做，事情在电脑上发生。
There are things doing,
things happening on the computer.

276
00:15:28.572 --> 00:15:31.529
你的电脑可能比我的快，看数字略有不同。
Your computer might be faster than mine,
see slightly different numbers.

277
00:15:31.529 --> 00:15:36.503
但总的来说，我们是在同一个球场上，对吧。
But generally speaking,
we're in the same ballpark, right.

278
00:15:36.503 --> 00:15:40.807
好的，那很酷，当我们删除它时会发生什么？
Okay, that's cool,
what happens when we delete that?

279
00:15:40.807 --> 00:15:45.480
我们将继续删除它，而不是将其设置为undefined。
Instead of setting it to undefined,
we'll go ahead and delete it.

280
00:15:47.220 --> 00:15:50.695
差不多，好吧。
About the same, okay.

281
00:15:50.695 --> 00:15:53.320
所以为什么我们可以删除它，我们可以将它设置为undefined。
So why we can delete it we
can set it to undefined.

282
00:15:54.570 --> 00:15:57.386
看起来很有趣。
Seems pretty interesting.

283
00:15:57.386 --> 00:15:58.303
那x呢？
What about x?

284
00:16:02.465 --> 00:16:05.312
&gt；&gt；steve：所以这是未定义的。
&gt;&gt; Steve: So that's undefined.

285
00:16:05.312 --> 00:16:09.210
好的，你看起来很棒，我一遍又一遍地看着同样的数字。
Okay you're like great I'm watching
the same numbers over and over again.

286
00:16:09.210 --> 00:16:10.499
让我们继续删除x。
Let's go ahead and delete x.

287
00:16:16.152 --> 00:16:22.121
&gt；&gt；steve：哇，&gt；&gt；steve：那个镜头。
&gt;&gt; Steve: Wow,
&gt;&gt; Steve: That shot up.

288
00:16:22.121 --> 00:16:23.990
这很有趣对吧？
That's interesting right?

289
00:16:23.990 --> 00:16:24.509
好吧。
Okay.

290
00:16:24.509 --> 00:16:25.448
我们测量了一些东西。
We've measured something.

291
00:16:25.448 --> 00:16:27.226
我们已经注意到这件事已经发生了。
We've noticed that thing has happened.

292
00:16:27.226 --> 00:16:29.159
现在我们必须试着去处理它。
Now we have to try to deal with it.
