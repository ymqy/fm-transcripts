WEBVTT

1
00:00:03.853 --> 00:00:04.655
&gt；&gt；steve kinney：那么让我们开始吧。
&gt;&gt; Steve Kinney: So let's get into it.

2
00:00:04.655 --> 00:00:06.472
准备好了吗？
You ready?

3
00:00:06.472 --> 00:00:08.289
很酷。
Very cool.

4
00:00:08.289 --> 00:00:11.689
所以我们将首先讨论JavaScript性能，正如我所承诺的。
So we're gonna talk about, first,
JavaScript performance, as I promised.

5
00:00:13.119 --> 00:00:15.919
所以Ruby on rails哲学
So the Ruby On Rails philosophy,

6
00:00:15.919 --> 00:00:22.179
是开发人员比速度更快的服务器更昂贵。
was that developers are more
expensive than faster server.

7
00:00:22.179 --> 00:00:25.039
所以创造一种语言，即使它稍微慢一点。
So make a language that even
if it's a little slower.

8
00:00:25.039 --> 00:00:28.829
和一个即使稍微慢一点的框架，也提高了开发人员的生产力。
And a framework that even it's a little
slower, increases developer productivity.

9
00:00:29.969 --> 00:00:32.750
因为你可以把你打算花在十个工程师身上的钱寄出去，
Because you can send the money you were
gonna spend on ten more engineers,

10
00:00:32.750 --> 00:00:35.250
把这东西弄出去，然后买一台更强大的服务器。
to get this thing out the door,
and buy a beefier server.

11
00:00:37.200 --> 00:00:39.009
这是一种哲学。
That's a philosophy.

12
00:00:39.009 --> 00:00:42.189
它不适用于客户端应用程序，
It doesn't work for
client-side applications,

13
00:00:42.189 --> 00:00:46.200
因为我们不能给所有的客户都买新电脑。
because we can't buy all of
our customers new computers.

14
00:00:46.200 --> 00:00:48.890
就像这里，各位，这里有一个奇特的Mac Book Pro。
Like here, everyone,
here's a fancy Mac Book Pro.

15
00:00:48.890 --> 00:00:51.289
给你，我不想解决我自己的性能问题。
Here you go, I don't wanna solve
my own performance issues.

16
00:00:51.289 --> 00:00:54.872
我的意思是你可以这么做，但这可能不是个好主意，
I mean you could do that, but
that's probably not a good idea,

17
00:00:54.872 --> 00:00:57.450
这可能不是一种继续经营的方式。
that's probably not a way
to stay in business.

18
00:00:57.450 --> 00:01:00.960
所以我们必须考虑这些事情。
So we have to think about these things.

19
00:01:00.960 --> 00:01:02.679
我们可以压缩资产。
We can compress assets.

20
00:01:02.679 --> 00:01:04.150
我们可以减少延迟。
We can reduce latency.

21
00:01:04.150 --> 00:01:07.939
但是这个应用程序最终需要运行和构建，并且
But this application's eventually
going to need to be run and built, and

22
00:01:07.939 --> 00:01:10.822
你不能控制它运行的计算机。
you don't get to control,
the computer that it's run on.

23
00:01:10.822 --> 00:01:12.900
所以我们，作为前端工程师，
So we, as Front-End Engineers,

24
00:01:12.900 --> 00:01:16.390
不幸的是，不得不承受这种考虑绩效的负担，
unfortunately, have to bear this
burden of thinking about performance,

25
00:01:16.390 --> 00:01:19.780
因为我们买不到更快的服务器和更强大的机器。
because we can't buy faster servers and
beefier machines.

26
00:01:21.549 --> 00:01:25.180
所以在我给你展示一个网页的大小之前，作为一个整体，
So before I showed you just
the size of a webpage, as a whole,

27
00:01:25.180 --> 00:01:30.810
我们发送的JavaScript的大小也在增长
the size of the JavaScript that
we're sending, is also growing

28
00:01:30.810 --> 00:01:35.609
非常大的比率，对，手机上的500%。
at a very large rate,
right, 500% on mobile.

29
00:01:35.609 --> 00:01:39.914
问题是，有一种哲学，嗯，
The problem is,
there's a philosophy, well,

30
00:01:39.914 --> 00:01:43.379
如果我加入额外的JavaScript Meg
if I chip in an extra meg of JavaScript,

31
00:01:43.379 --> 00:01:48.741
如果我少包含一个JPEG，那应该是相同的，对吧？
if I include one less JPEG,
that should be the same, right?

32
00:01:48.741 --> 00:01:50.299
你只是想要一些。
You just want some of those.

33
00:01:50.299 --> 00:01:53.500
问题是，再一次，JPEG，你把它显示在屏幕上。
The problem is, again,
JPEG, you show it onscreen.

34
00:01:53.500 --> 00:01:56.210
JavaScript，您需要解析和编译它，并且
JavaScript, you need to parse and
compile it, and

35
00:01:56.210 --> 00:01:59.759
在许多应用程序中，这实际上是这里的罪魁祸首。
in a lot of applications,
that's actually the big culprit here.

36
00:01:59.759 --> 00:02:01.750
这是我工作的应用程序。
This is the application I work on.

37
00:02:01.750 --> 00:02:02.920
有几件事需要注意。
There's a few things to notice.

38
00:02:02.920 --> 00:02:06.719
这是加载编辑器，我之前在截图中给你看过的。
This is loading the editor, that I
showed you in that screenshot earlier.

39
00:02:08.419 --> 00:02:11.099
在左下角，
Down in the lower left hand corner,

40
00:02:11.099 --> 00:02:15.610
您可以看到浏览器大部分时间都在哪里。
you can see where the browser
spent most of the time.

41
00:02:15.610 --> 00:02:19.219
那个细小的蓝色条纹正在加载。
That thin little blue stripe is loading.

42
00:02:19.219 --> 00:02:21.159
现在，我在丹佛。
Now, I was in Denver.

43
00:02:21.159 --> 00:02:25.069
数据中心在芝加哥，距离不远。
The data center is in Chicago,
it's not that far to get.

44
00:02:25.069 --> 00:02:29.780
如果我在澳大利亚，或者班加罗尔，或者伦敦，这将是非常不同的。
This would be very different if I was
in Australia, or Bangalore, or London.

45
00:02:29.780 --> 00:02:32.949
但是我离服务器不是太远，这里可能会更近。
But I was not too far from the servers,
it would probably even be closer here.

46
00:02:32.949 --> 00:02:38.120
我花了大部分时间编写脚本，这就是解析和
I spent the majority of the time
scripting, which is parsing and

47
00:02:38.120 --> 00:02:39.969
编译Java脚本。
compiling the Java Script.

48
00:02:39.969 --> 00:02:44.939
还有一点渲染，沿着这些线条画东西。
And a little bit of rendering,
painting stuff along those lines.

49
00:02:44.939 --> 00:02:51.979
顶部的另一部分基本上是CPU在任何给定点所做的事情。
The other part at the top, is basically
what the CPU was doing at any given point.

50
00:02:51.979 --> 00:02:54.353
所以你可以看到黄色正在解析JavaScript，
So you can see that the yellow
is parsing JavaScript,

51
00:02:54.353 --> 00:02:57.356
如果你看下面的饼图，它并不像，哇，
which if you look at the pie chart
down below it's not like, wow,

52
00:02:57.356 --> 00:02:59.539
我不敢相信这两个有很大的不同。
I can't believe that
these are very different.

53
00:02:59.539 --> 00:03:01.449
它们是相对相同的东西。
They're relatively the same thing.

54
00:03:01.449 --> 00:03:05.343
这是很多时候被称为黄色的大鼻涕虫。
And this is a lot of the times
called the big yellow slug.

55
00:03:05.343 --> 00:03:09.519
如果你像Create React应用程序那样做，并且应用程序中没有任何内容
If you do it like a create react app,
and nothing in the application watch and

56
00:03:09.519 --> 00:03:10.750
稍后再看这个。
see this later.

57
00:03:10.750 --> 00:03:12.639
就像你还是会得到一定数量的这个一样，
Like you're still gonna get
a certain amount of this,

58
00:03:12.639 --> 00:03:14.250
因为我们要发送一个JavaScript应用程序。
cuz we're sending
a JavaScript application.

59
00:03:14.250 --> 00:03:16.530
最初，HTML中没有任何内容。
There's nothing in the HTML, originally.

60
00:03:16.530 --> 00:03:19.610
我们发送这个JavaScript应用程序必须弄清楚要做什么。
We send this JavaScript application
has to figure out what to do.

61
00:03:19.610 --> 00:03:26.360
顶部的这些小红条，是我在文学上钉住CPU的时候，对吧？
These little red bars at the top,
are when I literary pegged the CPU, right?

62
00:03:26.360 --> 00:03:30.110
我正在以100%的能力使用它来构建这个。
I was using it at 100%
capacity to build this.

63
00:03:30.110 --> 00:03:34.670
你也可以看到中间有一个图表，叫做火焰图，这是，
You can also see there's this graph in the
middle, called a flame chart, which is,

64
00:03:34.670 --> 00:03:36.800
你已经在顶端，这些顶层的功能。
you've got at the top,
these top level functions.

65
00:03:36.800 --> 00:03:40.539
然后如果这个函数调用一个函数，它在火焰图的下面一层，
Then if that function calls a function,
it's one layer down in the flame chart,

66
00:03:40.539 --> 00:03:45.539
你可以看到我可以滚动[笑]，在这里会发生更多的事情。
and you can see that I could scroll
[LAUGH], and more would happen here.

67
00:03:45.539 --> 00:03:47.909
Chrome实际上真的很好
Chrome is actually really nice,

68
00:03:47.909 --> 00:03:51.650
在右上角的那些红色小三角形中，任何给定的东西
where those little red triangles on
the upper right, of any given thing in

69
00:03:51.650 --> 00:03:54.710
火焰图，这就是Chrome发现你在做一件坏事的地方。
the flame chart, that is where Chrome has
figured out like you're doing a bad thing.

70
00:03:56.069 --> 00:03:58.451
让我告诉你正在做的坏事。
Let me tell you about the bad
thing that you're doing.

71
00:03:58.451 --> 00:04:01.354
有时，它可以给你一些有用的东西，我们稍后会看到这一点。
Sometimes, it can give you something
helpful, we'll see that later.

72
00:04:01.354 --> 00:04:03.955
有时候就像是，不，这太久了，而且
Sometimes it's like, no,
this is just taking too long, and

73
00:04:03.955 --> 00:04:05.354
我想你应该知道这件事。
I think you should know about it.

74
00:04:05.354 --> 00:04:09.305
所以你可以得到很多真正有用的信息。
So you can kinda get a lot of
really useful information.

75
00:04:09.305 --> 00:04:13.076
但我真正想在这张幻灯片上说的是，
But the point that I really
wanna make on this slide,

76
00:04:13.076 --> 00:04:18.331
我的应用程序大部分时间都在运行，它正在解析。
is that most of the time that my
application is running, it's parsing.

77
00:04:18.331 --> 00:04:22.197
我可以gzip更多的资产，我可以把一些东西放在更快，更好的CDN上，并且
I can gzip some more assets, I can put
something on a faster, a better CDN, and

78
00:04:22.197 --> 00:04:23.750
沿着这条线的东西。
stuff along those lines.

79
00:04:23.750 --> 00:04:29.860
但这解决不了2800毫秒，这两个，
But that's not gonna solve
the 2,800 milliseconds, the two,

80
00:04:29.860 --> 00:04:33.319
我花了将近三秒钟，只是解析和编译我的JavaScript。
almost three seconds that I'm spending,
just parsing and compiling my JavaScript.

81
00:04:34.930 --> 00:04:38.120
那么黄色部分发生了什么？
So what is happening in that yellow part?

82
00:04:38.120 --> 00:04:43.175
对，我们觉得，是的，那个黄色的部分，它太大了，应该更小。
Right, we feel like, yeah, that yellow
part, it's too big, it should be smaller.

83
00:04:43.175 --> 00:04:46.959
[笑]好的，这些东西是怎么工作的？
[LAUGH] Right, okay,
how does any of this stuff work?

84
00:04:46.959 --> 00:04:52.209
所以事实证明JavaScript是一种编译语言，
So it turns out that JavaScript
is a compiled language,

85
00:04:52.209 --> 00:04:56.189
就像C或Java一样，它通过编译器输出，
just like C or Java, it is put
through a compiler, and out comes,

86
00:04:56.189 --> 00:04:58.000
一些字节编码器，一些机器代码，对吧。
some byte coder, some machine code, right.

87
00:04:58.000 --> 00:05:01.040
你还有其他的语言是解释语言，它贯穿其中
You have other languages that are
interpreted language where it runs through

88
00:05:01.040 --> 00:05:02.170
它，但JavaScript是编译的。
it, but JavaScript is compiled.

89
00:05:02.170 --> 00:05:04.930
你说，我从来没有用JavaScript编译过。
You're like,
I've never compiled in JavaScript.

90
00:05:04.930 --> 00:05:09.029
我的意思是，你可能已经通过Babel运行它来制作更多不同的JavaScript，但是
I mean, you might've run it through Babel
to make more different JavaScript, but

91
00:05:09.029 --> 00:05:11.560
我从来没有产生过JavaScript的二进制代码。
I have never produced
a binary of JavaScript.

92
00:05:12.899 --> 00:05:15.899
这是因为它使用了一种叫做即时编译的东西。
That's because it uses a thing
called just-in-time compilation.

93
00:05:15.899 --> 00:05:19.588
即编译JavaScript代码，
Which is, the JavaScript code is compiled,

94
00:05:19.588 --> 00:05:24.836
就像在用户的机器上执行它之前的片刻一样。
like moments before it's executed,
on your user's machine.

95
00:05:24.836 --> 00:05:29.860
这就是为什么我们看到了黄色的大鼻涕虫，如果你愿意的话。
And that's why we saw the big yellow slug,
if you will.

96
00:05:29.860 --> 00:05:34.000
所以我们不是在编译它，它是被编译的，只是不是我们做的。
So we're not compiling it,
it is getting compiled, just not by us.

97
00:05:35.529 --> 00:05:36.259
酷毙了。
Cool.

98
00:05:36.259 --> 00:05:39.689
所以及时编译。
So just in time compilation.

99
00:05:39.689 --> 00:05:43.483
它意味着它是编译的，它意味着它是在执行之前编译的。
It means it is compiled, it means it's
compiled moments before execution.

100
00:05:43.483 --> 00:05:45.295
这意味着它发生在我们客户的机器上。
It means it's happening
in our client's machine.

101
00:05:45.295 --> 00:05:48.139
这意味着他们付出了代价，并为我们做了艰苦的工作。
It means that they're paying the cost,
and doing the hard work for us.

102
00:05:49.759 --> 00:05:53.470
好的，那么编译部分发生了什么？
All right, so
what is happening in the compilation part?

103
00:05:53.470 --> 00:05:56.225
我们已经确定这是一个问题。
We've identified it as a problem.

104
00:05:56.225 --> 00:05:59.939
我们要集中精力，每个浏览器都有不同的引擎。
Were gonna focus,
each browser has a different engine.

105
00:05:59.939 --> 00:06:02.288
Chrome有一个名为V8的引擎。
Chrome has an engine called V8.

106
00:06:02.288 --> 00:06:04.166
我相信这也是奥普拉使用的，
I believe that's what Oprah uses as well,

107
00:06:04.166 --> 00:06:06.259
如今，几年前的情况并非如此。
these days,
that wasn't true a few years ago.

108
00:06:07.800 --> 00:06:10.163
Safari有一个叫做JavaScript core的，或者
Safari has one called JavaScript core, or

109
00:06:10.163 --> 00:06:13.588
当他们谈论被称为Nitro的营销材料时。
when their talking about
marketing materials called Nitro.

110
00:06:13.588 --> 00:06:18.165
Firefox有一个叫Spider Monkey的引擎，还有一些其他的引擎
Firefox has one called Spider Monkey, and
there's a few other engines in there,

111
00:06:18.165 --> 00:06:20.103
离子猴子，还有一些其他的。
Ion Monkey, and a few other ones.

112
00:06:21.360 --> 00:06:23.029
有一个叫脉轮的。
Has one called Chakra.

113
00:06:23.029 --> 00:06:26.600
所以每个人都有不同的引擎，他们的工作方式也不同。
So each one has a different engine,
they do work differently.

114
00:06:26.600 --> 00:06:30.389
我们只关注V8，因为我们真的在杂草上
We're gonna just focus on V8,
because getting really in the weeds on

115
00:06:30.389 --> 00:06:34.620
他们之间的差异，可能不是我们时间的最佳利用。
the differences between all of them,
is probably not the best use of our time.

116
00:06:34.620 --> 00:06:36.490
我们正在努力获得这种高水平的理解。
We're trying to get this
high level understanding.

117
00:06:36.490 --> 00:06:40.180
所以我要做的，不是世界上最好的网络标准，但是
So I am going to do, not the best web
standards thing in the world, but

118
00:06:40.180 --> 00:06:43.290
让我们相信V8和Chrome是目前唯一的浏览器。
make believe that V8 and
Chrome is the only browser right now.

119
00:06:43.290 --> 00:06:47.081
不要那样做，那是不礼貌的，但是，[笑]我正在做。
Don't do that, that's rude,
but, [LAUGH] I'm doing it.

120
00:06:47.081 --> 00:06:51.290
所以我们的JavaScript生活在一个叫做云的东西中。
So our JavaScript lives in
this thing called, the cloud.

121
00:06:51.290 --> 00:06:52.800
我不太明白那是什么。
I don't really understand what that is.

122
00:06:52.800 --> 00:06:57.959
但我知道这就是我做网页包构建的地方，我把它放在云中，
But I understand that's where when I do
a web pack build, I put it in the cloud,

123
00:06:57.959 --> 00:07:00.129
它就在那里，人们从那里得到它。
and there it is, and
people get it from there.

124
00:07:00.129 --> 00:07:01.720
除此之外，这是后端团队的问题。
Beyond that,
that's the back end team's problem.

125
00:07:03.589 --> 00:07:05.519
我听说是S3桶。
I've heard it's an S3 bucket.

126
00:07:05.519 --> 00:07:06.709
我不知道。
I don't know.

127
00:07:06.709 --> 00:07:11.906
所以我们将JavaScript发送到浏览器，然后我们必须解析它。
So we send the JavaScript to the browser,
and then we have to parse it.

128
00:07:11.906 --> 00:07:14.930
好的，你给我发了那么长的短信，这是什么意思？
Okay, you've sent me those long
string of text, what does that mean?

129
00:07:14.930 --> 00:07:18.220
我们将其转化为所谓的抽象语法树，
We turn that into what's called
an abstract syntax tree,

130
00:07:18.220 --> 00:07:23.329
这是一个实际的数据结构，代表了这段代码的实际含义。
which is an actual data structure that
represents what this code actually means.

131
00:07:23.329 --> 00:07:26.910
然后转到基线编译器或解释器。
That then goes to a baseline compiler or
an interpreter.

132
00:07:26.910 --> 00:07:29.220
在Chrome中，这些天是一种叫做Ignition的东西。
In Chrome,
these days is a thing called Ignition.

133
00:07:29.220 --> 00:07:32.749
明白了吗？这是V8点火
Get it?
It's V8 Ignition.

134
00:07:32.749 --> 00:07:35.159
嗯哼，他们在这里做一件事。
Mm hm, they're doing a thing here.

135
00:07:35.159 --> 00:07:40.310
谷歌非常擅长确保他们的技术是不可谷歌的。
Google's really good at making sure that
their technologies are un-Googleable.

136
00:07:40.310 --> 00:07:44.324
去吧，作为一门编程语言，祝你好运，尝试谷歌。
Go, as a programming language,
good luck, trying to Google that.

137
00:07:44.324 --> 00:07:47.369
点火和涡轮风扇，这我们将在后面讨论，也不可能
Ignition and turbo fan, which we'll talk
talk about later, also impossible to

138
00:07:47.369 --> 00:07:50.159
谷歌当你在为研讨会做研究时，我并没有变得更好。
Google for when you're doing research for
a workshop, I'm not better.

139
00:07:51.579 --> 00:07:55.247
转换成字节码，由浏览器执行。
That gets turned into byte code,
that gets executed by the browser.

140
00:07:55.247 --> 00:08:01.839
但是等等，还有更多，我们稍后再谈，JavaScript真的很难，
But wait, there's more, we'll talk
about later, JavaScript is really hard,

141
00:08:01.839 --> 00:08:05.399
这是一种动态语言，如果我们能让其中一些更快，那就太好了。
it's this dynamic language, It'd be great,
if we could make some of it faster.

142
00:08:05.399 --> 00:08:07.500
所以里面有第二个编译器。
So there's a second compiler in there.

143
00:08:07.500 --> 00:08:09.470
这个叫涡扇。
This one's called Turbofan.

144
00:08:09.470 --> 00:08:11.459
明白了吗？是一样的。
Get it?
It's the same, yeah.

145
00:08:11.459 --> 00:08:15.870
它是一个优化编译器，然后查看代码，然后
And it's an optimizing compiler,
that then looks at the code, and

146
00:08:15.870 --> 00:08:17.560
试图让它更快。
tries to make it even faster.

147
00:08:19.050 --> 00:08:22.146
这将会吐出，嗯，任何可以优化的代码。
That will spit out, well,
any code that can be optimized.

148
00:08:22.146 --> 00:08:25.290
任何无法优化的代码，与我们之前在解释器中看到的一样。
Any code that can't be optimized, same
thing we saw before with the interpreter.

149
00:08:25.290 --> 00:08:27.300
任何可以优化的代码，
Any code that can be optimized,

150
00:08:27.300 --> 00:08:32.600
转到优化编译器进行优化，无论它在那里做什么。
goes to the optimizing compiler to get
optimized, whatever it does in there.

151
00:08:32.600 --> 00:08:37.490
然后，这就是吐出高度优化的机器码，这是独一无二的
And then, that's spits out highly
optimized machine code, unique to

152
00:08:37.490 --> 00:08:42.559
无论是RM，还是X86，像英特尔，无论是什么，都是在另一端发射的。
that whether it's RM, or X86, like Intel,
whatever, that shoots at the other end.

153
00:08:42.559 --> 00:08:49.584
但有些情况下，你是超级优化的代码，不会有结果的，对吧？
Some cases though, you're super optimized
code, isn't gonna work out, right?

154
00:08:49.584 --> 00:08:52.950
因为我们将讨论的原因，它实际上是无效的。
It's not actually valid for
reasons that we'll talk about.

155
00:08:52.950 --> 00:08:55.919
在这一点上，我们回到使用慢字节码。
At which point,
we go back to using the slow byte code.

156
00:08:55.919 --> 00:08:58.570
所以这是理所当然的，红色的箭头是不好的。
So it stands to reason,
that red arrow's bad.

157
00:08:58.570 --> 00:09:02.070
如果你能在绿色箭头上找到东西，那很好。
If you can get stuff on the green arrow,
that's good.

158
00:09:02.070 --> 00:09:04.179
就像，这就是目标。
And like, that's the goal.

159
00:09:04.179 --> 00:09:08.330
任何时候我们以红色箭头结束，这都不好，对吧？
And any time we end with the red arrow,
that's not good, right?

160
00:09:08.330 --> 00:09:12.615
因此，使您的应用程序更快的一种方法是更多的绿色箭头，
And so, one way to make your application
faster, is more green arrows,

161
00:09:12.615 --> 00:09:13.690
红色箭头较少。
less red arrows.

162
00:09:13.690 --> 00:09:15.440
你们都可以写下来。
You can all write that down.

163
00:09:15.440 --> 00:09:20.110
[笑]少做工作，多用绿色箭头，少用红色箭头。
[LAUGH] Doing less work,
more green arrows, less red arrows.

164
00:09:20.110 --> 00:09:21.720
较短的黄色鼻涕虫。
Shorter yellow slugs.

165
00:09:21.720 --> 00:09:25.250
一周后，这些笔记对你来说没有任何意义，但是
None of those notes will make any
sense to you, a week from now, but

166
00:09:25.250 --> 00:09:27.370
我认为你在这一点上抓住他们是非常重要的。
I think it's really important that
you capture them at this point.
