WEBVTT

1
00:00:00.110 --> 00:00:02.399
&gt；&gt；steve kinney：那么，你告诉我所有的层，
&gt;&gt; Steve Kinney: So,
you told me all layers,

2
00:00:02.399 --> 00:00:05.099
你告诉我对他们没有影响。
you told me I have no impact on them.

3
00:00:05.099 --> 00:00:09.086
这真的很令人沮丧，你可以向浏览器提出建议。
That was really demoralizing,
you can make suggestions to the browser.

4
00:00:09.086 --> 00:00:14.019
它有它的规则，它做它的事情，对，你可以说，
It has its rules, it does its thing,
right, you can say,

5
00:00:14.019 --> 00:00:18.461
嘿，你会考虑把这层变成自己的一层吗？
hey, would you consider
making this its own layer?

6
00:00:18.461 --> 00:00:22.030
对，他们就像，一切都会改变，我只是告诉你。
Right, and they're like,
it's gonna change, I'm just telling you.

7
00:00:22.030 --> 00:00:24.980
一切都会改变，你不会想要重新粉刷，浏览器，
Things are gonna change, you're not gonna
wanna do all that repainting, browser,

8
00:00:24.980 --> 00:00:26.829
我告诉你，对吧？
I'm telling you, right?

9
00:00:26.829 --> 00:00:31.100
您可以说服浏览器并建议它成为自己的层。
You can convince the browser and
recommend that it become its own layer.

10
00:00:31.100 --> 00:00:33.929
因此它的工作方式是一个称为will-change的CSS属性。
And so the way it works is a CSS
property called will-change.

11
00:00:33.929 --> 00:00:36.768
然后无论你认为什么属性都会改变。
And then whatever property
you think is going to change.

12
00:00:36.768 --> 00:00:39.454
我们的很多例子都是侧边栏，我们做了转换。
And a lot of our examples are sidebar,
we did with the transform.

13
00:00:39.454 --> 00:00:43.219
我有，每次我用这个，我觉得它需要太多的争论。
I have, every time I've used this,
I think it takes so much arguments.

14
00:00:43.219 --> 00:00:47.396
每次我使用这个，我一直在使用Transform。
Every time I've used this one,
I'm using transform all the time.

15
00:00:47.396 --> 00:00:50.310
所以这就是我用的例子，
So that's gonna be the example that I use,

16
00:00:50.310 --> 00:00:52.170
因为我想不出另一个好理由。
cuz I couldn't come up with
a good reason for another one.

17
00:00:52.170 --> 00:00:54.679
好吧，这个人的支持率是多少？
All right, what's the support for
this one look like?

18
00:00:54.679 --> 00:01:01.378
IE和Edge不支持它，你会觉得，好吧，他们落后了。
IE and Edge don't support it, and you'll
be like, well, they are lagging behind.

19
00:01:01.378 --> 00:01:05.578
实际上，Edge认为他们的合成原因是这样的
Actually, Edge is of the opinion that
their compositing reasons are so

20
00:01:05.578 --> 00:01:08.835
幸好他们不需要你的建议，对吧？
good that they don't need
your suggestions, right?

21
00:01:08.835 --> 00:01:10.947
[笑]他们并没有落后
[LAUGH] It's not like they're behind,

22
00:01:10.947 --> 00:01:15.438
这对可能提出我过于简单化的情况的人是不公平的。
that's not fair to whoever probably made
that case that I oversimplify like that.

23
00:01:15.438 --> 00:01:18.719
但我们是朋友，这很酷[笑]。
But we're amongst friends,
it's cool [LAUGH].

24
00:01:20.090 --> 00:01:22.789
他们不相信这是必要的，所以他们没有实施它的意图。
They don't believe it's necessary, so
they have no intent on implementing it.

25
00:01:22.789 --> 00:01:24.879
好的部分是，这是一个渐进的增强。
And the nice part is,
this is a progressive enhancement.

26
00:01:24.879 --> 00:01:27.500
这不是说，嗯，我不能使用它，因为我支持IE或Edge，
It's not like, well,
I can't use it cuz I support IE or Edge,

27
00:01:27.500 --> 00:01:28.990
那它就什么都不做了。
it just doesn't do anything then.

28
00:01:28.990 --> 00:01:31.998
[笑]对，没关系，它不会破坏网页，
[LAUGH] Right, it's fine,
it doesn't break the web page,

29
00:01:31.998 --> 00:01:35.323
它没有做错任何事情，在这种情况下，它只是一个无操作。
it doesn't do anything wrong,
it's just a no-op in that case.

30
00:01:35.323 --> 00:01:38.673
然后是Opera Mini，它将你的网页呈现为图像
And then Opera Mini,
it renders your web page as an image and

31
00:01:38.673 --> 00:01:41.557
将其发送到电话，因此它不做任何事情。
sends it to the phone, so
it doesn't do anything.

32
00:01:41.557 --> 00:01:44.840
每次你看到其中一个我可以使用图表，Opera Mini总是红色的。
Every time you see one of these can I
use charts, Opera Mini is always red.

33
00:01:46.370 --> 00:01:49.789
但除此之外，它在其他浏览器上都有很好的支持。
But other than that, it's got pretty good
support across the rest of the browsers.

34
00:01:49.789 --> 00:01:52.030
就像我说的，当它什么都不做的时候，
And like I said,
when it doesn't do anything,

35
00:01:52.030 --> 00:01:55.180
这也很好，因为它什么都不做，不会断裂。
that is also fine cuz then it just
doesn't do anything, it doesn't break.

36
00:01:55.180 --> 00:01:59.920
您可以使用它，并且支持它的浏览器将支持它，
You can use it and
browsers that support it will support it,

37
00:01:59.920 --> 00:02:01.569
浏览器不会，不会。
browsers that don't, don't.

38
00:02:01.569 --> 00:02:05.790
对此有一种古老的方法，就是translateZ。
There was an old hack for
this, which is translateZ.

39
00:02:05.790 --> 00:02:08.849
其是改变元素的3D定位。
Which is to change the 3D
positioning of an element.

40
00:02:08.849 --> 00:02:13.699
你可以看到，我们将它设置为0，这将使它成为自己的层，但是
And you can see, we're setting it to 0,
this will make it its own layer, but

41
00:02:13.699 --> 00:02:14.689
它会强迫它。
it will force it.

42
00:02:14.689 --> 00:02:18.724
Will-Change会更好一点，因为你会提出这样的建议，
will-change is a little bit better because
you make the recommendation saying,

43
00:02:18.724 --> 00:02:21.246
这可能会成为它自己的一层，我只是告诉你。
this may become its own layer,
I'm just telling you.

44
00:02:21.246 --> 00:02:23.564
以前，你就像，那是它自己的一层，做吧，然后
Before, you were like,
that's its own layer, do it, and

45
00:02:23.564 --> 00:02:25.865
你已经欺骗了浏览器来做这件事。
you've tricked the browser into doing it.

46
00:02:25.865 --> 00:02:31.284
你有这种信任关系，但你违反了它，所以这不是很好。
You have this relationship of trust and
you violated it, so that's not great.

47
00:02:31.284 --> 00:02:35.820
所以一般来说，这是一个黑客，这是一种黑客，但是
So generally speaking, this is a hack,
this is kind of a hack, but

48
00:02:35.820 --> 00:02:40.605
这是一个记录的，支持的，推荐的黑客攻击，所以它很好。
it's a documented, supported,
recommended hack, so it's fine.

49
00:02:40.605 --> 00:02:42.860
酷，所以我要做的是，
Cool, so what I'm gonna do is,

50
00:02:42.860 --> 00:02:46.949
我要取下这个页面的非视网膜版本，然后
I'm gonna take that non-retina
version of the page, and

51
00:02:46.949 --> 00:02:53.520
给它Will-Change的CSS属性，我们就会看到它有什么影响。
give it the CSS property of will-change,
and we'll see what effect that has.

52
00:02:53.520 --> 00:02:58.826
&gt；&gt；Steve Kinney：所以如果我在这里进入，这个被调用并转到style.css。
&gt;&gt; Steve Kinney: So if I go in here into,
this one's called and go to style.css.

53
00:02:58.826 --> 00:03:03.829
我要告诉标题，&gt；&gt；steve kinney：和
I'm gonna tell the header,
&gt;&gt; Steve Kinney: And

54
00:03:03.829 --> 00:03:10.310
我要告诉脚注同样的事情。
I'm gonna tell the footer the same thing.

55
00:03:10.310 --> 00:03:15.054
我会回去，&gt；&gt；steve kinney：然后
And I will go back,
&gt;&gt; Steve Kinney: And

56
00:03:15.054 --> 00:03:18.350
不会再重新粉刷了。
no more repaints.

57
00:03:18.350 --> 00:03:21.038
非常酷，所以它起作用了，就像我说的，你得到它是为了
Very cool, and so it works,
like I said, you got it for

58
00:03:21.038 --> 00:03:25.188
如果您使用读取到屏幕，则免费，因为浏览器已对此进行了优化
free if you're using read to screen, cuz
the browser has made that optimization for

59
00:03:25.188 --> 00:03:27.530
你，我没有它，现在它存在了。
you, I didn't have it, and now it exists.

60
00:03:27.530 --> 00:03:31.495
我们将在一秒钟内看一个稍微直观的示例，但是
We're gonna look at a slightly more
intuitive example in a second, but

61
00:03:31.495 --> 00:03:32.426
我们回去吧。
let's go back.

62
00:03:35.466 --> 00:03:38.941
&gt；&gt；steve kinney：这是我做出改变之前的图层，
&gt;&gt; Steve Kinney: So here were
the layers before I made that change,

63
00:03:38.941 --> 00:03:41.719
下面是后面的几层。
here were the layers after.

64
00:03:41.719 --> 00:03:46.264
让我们把这些幻灯片再做两遍，前，后，前，
Let's do those slides two more times,
before, after, before,

65
00:03:46.264 --> 00:03:48.870
之后，对吧，明白重点了吗？
after, right, get the major point?

66
00:03:48.870 --> 00:03:53.050
现在，当我们滚动页面时，底层正在移动。
Now, when we scroll the page,
that underlying layer is moving.

67
00:03:53.050 --> 00:03:56.496
合成器基本上只是移动它，但不是重新绘制它。
The compositor is basically just
moving it, but it's not repainting it.

68
00:03:56.496 --> 00:03:57.954
我们没必要说，嘿，
We don't have to be like, hey,

69
00:03:57.954 --> 00:04:00.860
你现在的样子和你在这张幻灯片里有多少人在一起？
what you look like now with how
much of you's in this slide?

70
00:04:00.860 --> 00:04:04.296
我们只需在页眉和页脚下面上下滑动，
We simply slide it up and
down underneath the header and the footer,

71
00:04:04.296 --> 00:04:05.877
也不会改变。
which also aren't changing.

72
00:04:05.877 --> 00:04:09.293
工作越少，工作越快。
And that's less work, less work is faster.

73
00:04:09.293 --> 00:04:12.752
我们要跳过绘画，我们要跳过布局，
We got to skip painting,
we got to skip layout,

74
00:04:12.752 --> 00:04:16.387
我们直接去了合成器，这很好。
we went directly to compositor,
which is great.

75
00:04:16.387 --> 00:04:22.081
所以，是的，把所有的东西都做成一层，对吧，看起来很棒，把所有的东西都分层。
So yeah, make everything a layer, right,
seems great, layer all the things.

76
00:04:22.081 --> 00:04:25.310
层本身并不是免费的，这又是一组权衡。
Layers themselves aren't free, and
it's, again, a set of trade-offs.

77
00:04:25.310 --> 00:04:28.769
因此，为了浏览器的利益，管理层需要做一定的工作。
So managing layers takes a certain
amount of work on the browser's behalf.

78
00:04:28.769 --> 00:04:32.086
每一层都需要保存在主服务器和主服务器之间的共享内存中
Each layer needs to be kept in
shared memory between the main and

79
00:04:32.086 --> 00:04:33.639
复合螺纹。
composite threads.

80
00:04:33.639 --> 00:04:38.226
当它比绘画快的时候，这是很好的，但是如果你继续
When it's faster than painting,
it's great, but if you go ahead and

81
00:04:38.226 --> 00:04:40.735
你把一切都变成了一层，[笑]。
you make everything a layer, [LAUGH].

82
00:04:40.735 --> 00:04:43.415
如果一切都是一层，那么你就有了这整件事，
If everything is a layer,
then you have this entire thing,

83
00:04:43.415 --> 00:04:45.519
你必须把所有这些都留在记忆里。
you have to keep all of that in memory.

84
00:04:45.519 --> 00:04:49.550
它试图在引擎盖下帮助你，这就像放在括号里
It's trying to help you out under
the hood, this is like putting parentheses

85
00:04:49.550 --> 00:04:53.494
尝试在JavaScript中帮助解析器，对吗？
around everything to try to like help
the parser in JavaScript, right?

86
00:04:53.494 --> 00:04:58.199
如果你选择退出它有用的算法，你就有效地使它毫无用处。
If you opt out of its helpful algorithms,
you've effectively made it useless.

87
00:04:58.199 --> 00:05:03.605
如果一切都要优化，你猜怎么着，没有什么是优化的。
If everything should be optimized,
guess what, nothing is optimized.

88
00:05:03.605 --> 00:05:08.187
我们现在的例子有一个问题，对吧？
And our current example has a problem,
right?

89
00:05:08.187 --> 00:05:12.079
我告诉过你，那些被自动转化的东西会自动得到它们自己的层，对吧？
I told you, things that are transformed
automatically get their own layer, right?

90
00:05:12.079 --> 00:05:15.769
定位在视网膜上的东西会有自己的一层。
Things that are position fixed
on retina get their own layer.

91
00:05:15.769 --> 00:05:18.452
而且，这看起来很奇怪，它被称为意志-改变，但是
Also, it seems weird that
it's called will-change, but

92
00:05:18.452 --> 00:05:20.502
它并没有真正改变什么，对吧？
it didn't really change anything, right?

93
00:05:20.502 --> 00:05:23.995
似乎我一直在对你隐瞒一些事情。
Seems like I've kind of hiding
something from you this entire time.

94
00:05:23.995 --> 00:05:26.408
也就是说，CSS规则非常适合了解，
Which is,
the CSS rules are great for knowing,

95
00:05:26.408 --> 00:05:30.250
浏览器擅长找出自己层的东西。
the browser's good at figuring out
something that is its own layer.

96
00:05:30.250 --> 00:05:33.970
真正有用的是弄清楚，等等，
What will-change is really useful for
is figuring out, wait,

97
00:05:33.970 --> 00:05:37.259
它以前不是自己的层，也不应该是自己的层。
it wasn't its own layer before, and
shouldn't have been its own layer.

98
00:05:37.259 --> 00:05:40.629
但可能很快就需要成为它自己的一层，对吧？
But might need to be its own
layer very shortly, right?

99
00:05:40.629 --> 00:05:43.379
因此，我们再次呈现页面，但随后JavaScript出现并
So again, we render the page,
but then JavaScript shows up and

100
00:05:43.379 --> 00:05:45.329
就像，我要改变一切，对吗？
it's like,
I'm gonna change everything, right?

101
00:05:45.329 --> 00:05:49.180
所以我们知道，嘿，这个盒子，这就是我们要用的例子。
So we know, hey, this box,
that's the example we're gonna use.

102
00:05:49.180 --> 00:05:52.120
但是页面上的这个元素，它是静态的，
But this element on the page,
it was static,

103
00:05:52.120 --> 00:05:54.689
但是用户将要做一些事情。
but the user's about to do something.

104
00:05:54.689 --> 00:05:59.110
我要把它做成CSS transs，我很快就会改变它的样式，对吧，
I am going to make it a CSS trans, I'm
gonna change the styles on it soon, right,

105
00:05:59.110 --> 00:06:00.934
你有两个选择，浏览器。
you have two choices, browser.

106
00:06:00.934 --> 00:06:05.297
无论是A，你都可以在我问你的时候弄清楚所有这些层的东西
Either A, you can figure out all this
layer stuff at the moment I'm asking you

107
00:06:05.297 --> 00:06:07.730
做些事情，或者你可以做好准备，对吧？
to do stuff, or you can get ready, right?

108
00:06:07.730 --> 00:06:10.660
我要告诉你，这个盒子会变，这个元素会变。
I'm gonna tell you that this box is gonna
change, this element is gonna change.

109
00:06:10.660 --> 00:06:14.509
它还没有改变，但是你为什么不，当你什么都不做的时候，
It's not changing yet, but why don't you,
while you're not doing anything else,

110
00:06:14.509 --> 00:06:18.514
提升它到自己的层，所以当它开始的时候，你准备好了吗？
promote it to its own layer, so
when it's time to get going, you're ready?

111
00:06:18.514 --> 00:06:23.209
对，所以这是一个不是很有帮助的例子，对吧。
Right, so this is an example where
it's not super helpful, right.

112
00:06:23.209 --> 00:06:29.182
在这种情况下，我们已经在改造这个侧边栏，所以它已经是它自己的层了。
We're already transforming this sidebar in
this case, so it's already its own layer.

113
00:06:29.182 --> 00:06:35.480
但可能更有用的是说，好吧，
But what might become more
useful is to say, all right,

114
00:06:35.480 --> 00:06:41.917
想象一下顶层的意志-改变不在那里[笑]所以。
imagine that top will-change
isn't up there [LAUGH] so.

115
00:06:44.673 --> 00:06:46.574
&GT；&GT；史蒂夫·金尼：我们将有一个过渡，当他们盘旋时，
&gt;&gt; Steve Kinney: We'll have a transition,
when they hover,

116
00:06:46.574 --> 00:06:48.930
我们知道他们会点击，对吧？
we know that they're gonna click, right?

117
00:06:48.930 --> 00:06:50.949
当他们点击时，我们会添加开放的东西，对吗？
When they click,
we're gonna add the open thing, right?

118
00:06:50.949 --> 00:06:54.465
理论上，只要他们一点击，我们就可以将其提升到自己的层。
We could theoretically promote it to
its own layer as soon as they click.

119
00:06:54.465 --> 00:06:57.957
但当它们盘旋时，很可能会点击，对吧，所以
But when they hover, It's likely that
they're going to click, right, so

120
00:06:57.957 --> 00:07:01.685
这时我们将添加转换，并且我们确实需要在之后清理它。
that's when we'll add the transform, and
we do need to clean it up afterwards.

121
00:07:01.685 --> 00:07:04.310
我们将添加变换，然后它将被提升到它自己的层。
We'll add the transform,
then it'll be promoted to it's own layer.

122
00:07:04.310 --> 00:07:07.947
当他们开始点击时，只需将该层滑过即可。
By the time they get around to clicking,
just slide that layer over.

123
00:07:07.947 --> 00:07:10.870
对，这是一种非常有用的方式。
Right, it's a really
useful way of doing it.
