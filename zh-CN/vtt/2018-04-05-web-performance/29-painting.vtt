WEBVTT

1
00:00:00.110 --> 00:00:01.780
&gt；&gt；steve：好的，我们已经布置好了页面，
&gt;&gt; Steve: All right,
we've laid out the page,

2
00:00:01.780 --> 00:00:03.640
希望我们不再打击DOM了。
hopefully we're not
thrashing the DOM anymore.

3
00:00:05.200 --> 00:00:09.830
我们实际上需要到达最后的两个部分，这两个部分都是在涂抹图层，
We need to actually get to the final two
pieces, which is both painting the layers,

4
00:00:09.830 --> 00:00:13.419
然后找出所有这些的轮廓，看看我们这里是否有一些问题。
and figuring out profiling of all of this,
and seeing if we have some problems here.

5
00:00:16.301 --> 00:00:20.532
&gt；&gt；steve：所以任何时候你改变了不透明度或
&gt;&gt; Steve: So anytime you change
something other than opacity or

6
00:00:20.532 --> 00:00:25.149
CSS变换，你会触发绘画，对吗？
a CSS transform,
you're gonna trigger a paint, right?

7
00:00:25.149 --> 00:00:26.960
这很有趣，所以
And that's kind of interesting, so

8
00:00:26.960 --> 00:00:30.449
似乎有东西可以改变而不需要重新画东西。
it seems like there are thing that can
change without having to redraw things.

9
00:00:31.760 --> 00:00:33.420
就让那个洗刷你一秒钟。
Just let that one wash over you for
a second.

10
00:00:33.420 --> 00:00:36.500
我将在一秒钟内解释它，但只需与之斗争片刻。
I will explain it in a second, but
just struggle with it for a moment.

11
00:00:36.500 --> 00:00:40.799
尝试思考如何改变不透明度或
Of trying to think about how it is
that you can change the opacity or

12
00:00:40.799 --> 00:00:42.840
移动东西而不必重新粉刷。
move stuff around without
having to repaint it.

13
00:00:42.840 --> 00:00:47.340
感觉不对，是不是，仍然是真的，我没有骗你，但是
That doesn't feel right, does it,
it's still true, I'm not lying to you, but

14
00:00:47.340 --> 00:00:49.750
这肯定有点违反直觉。
it's definitely somewhat counterintuitive.

15
00:00:49.750 --> 00:00:51.929
好的，我们画一幅画，告诉浏览器，
All right, we do a paint,
we tell the browser,

16
00:00:51.929 --> 00:00:55.216
浏览器告诉页面上的每个元素绘制自己的图片。
the browser tells every element on
the page to draw a picture of itself.

17
00:00:55.216 --> 00:00:59.954
[笑]我觉得有点好笑，画一张你自己的画
[LAUGH] It's just kind of funny as I think
about it, draw a picture of yourself and

18
00:00:59.954 --> 00:01:00.869
把它给我。
hand it to me.

19
00:01:00.869 --> 00:01:04.590
[笑]然后它把这些放在一起，把页面放在一起。
[LAUGH] And then it takes those and
it puts together the page.

20
00:01:04.590 --> 00:01:07.680
太棒了，它有所有这些信息，
Cool, it has all this information,

21
00:01:07.680 --> 00:01:10.049
所有的东西都知道这个几何图形，因为我们已经完成了布局。
everything knows this geometry
cuz we've done the layout.

22
00:01:10.049 --> 00:01:13.019
我们知道所有的风格是什么，它拥有做这件事所需的所有信息。
We know what all the styles are, it has
all the information it needs to do this.

23
00:01:13.019 --> 00:01:16.965
我之前说过，触发布局总是会触发绘画，
And I said before, triggering
a layout will always trigger a paint,

24
00:01:16.965 --> 00:01:20.340
因为现在有不同的像素要绘制。
because now there's
different pixels to paint.

25
00:01:20.340 --> 00:01:23.400
酷，但是如果你只是在改变颜色，嘿，我只是在改变
Cool, but if you're just changing
colors like, hey, I'm just changing

26
00:01:23.400 --> 00:01:26.789
背景颜色，你不一定需要触发布局。
the background color, you don't
necessarily need to trigger a layout.

27
00:01:26.789 --> 00:01:30.060
所以你可以，每个布局都会导致油漆，但是
So you can have,
every layout is gonna cause a paint, but

28
00:01:30.060 --> 00:01:32.549
并不是每幅画之前都有布局。
not every paint had a layout before it.

29
00:01:32.549 --> 00:01:35.109
对，如果你在改变颜色，那就是重新粉刷。
Right, if you're changing colors,
that's just repainting.

30
00:01:35.109 --> 00:01:38.469
如果你在改变尺寸，那就是布局和绘画。
If you're changing sizes,
that's layout and painting.

31
00:01:38.469 --> 00:01:42.277
所以我们要做的就是弄清楚我们是不是在画不必要的画。
So what we wanna do is figure out
if we're painting unnecessarily.

32
00:01:42.277 --> 00:01:44.496
再说一遍，这就是规则，你需要画多少画就画多少
Again, it's that rule,
paint as much as you need to and

33
00:01:44.496 --> 00:01:45.969
只要你能逃脱惩罚。
as little as you can get away with it.

34
00:01:45.969 --> 00:01:50.128
幸运的是，Chrome有一些非常棒的工具可以查看我们是否正在绘画，所以
Luckily, Chrome has some really great
tools to see if we're painting, so

35
00:01:50.128 --> 00:01:52.156
我们去看看吧。
let's go take a look at that.

36
00:01:52.156 --> 00:01:55.768
&gt；&gt；steve：在一个叫做卡住在顶部的例子中，
&gt;&gt; Steve: So
over in an example called Stuck On Top,

37
00:01:55.768 --> 00:02:02.090
我有经典的粘贴页眉和页脚在底部，对吗？
I have the classic stuck header and
footer at the bottom, right?

38
00:02:02.090 --> 00:02:06.879
我实际上可以继续，如果你不在控制台旁边渲染，
And I can actually go ahead, and if you
don't rendering next to the console,

39
00:02:06.879 --> 00:02:09.620
这三个小点是你的花蕾。
these three little dots
here are your buds.

40
00:02:09.620 --> 00:02:13.879
在那里你去更多的工具&gt；渲染，然后你应该把它放在这里。
Where you go to More Tools &gt; Rendering,
and then you should have it down here.

41
00:02:15.689 --> 00:02:18.760
如果没有，无论是在聊天中还是在这里，如果有人对此有任何问题，
If not, either in the chat or here,
if anyone has a problem with that,

42
00:02:18.760 --> 00:02:21.270
我们下次休息时再处理。
we'll handle it in the next break.

43
00:02:21.270 --> 00:02:23.377
所以我们可以打开油漆闪光，然后
So we can turn on paint flashing, and

44
00:02:23.377 --> 00:02:27.670
当页面被重新涂成绿色时，这会突出显示页面的各个区域。
this highlights areas of the page when
they're being repainted in green.

45
00:02:27.670 --> 00:02:33.640
你可以看到，当我滚动时，我正在重新绘制标题和
And you can see as I scroll around
that I am repainting the header and

46
00:02:33.640 --> 00:02:36.360
每次都是脚注。
footer every time.

47
00:02:36.360 --> 00:02:40.240
如果你这样做而你看不到这一点，那是有原因的。
If you are doing that and
you don't see that, there is a reason.

48
00:02:40.240 --> 00:02:43.319
我们会进入一点，但结果是如果你有一个视网膜屏幕，
We'll get into a little bit, but it turns
out that if you have a retina screen,

49
00:02:43.319 --> 00:02:44.969
你现在不会这样。
that's not happening for you right now.

50
00:02:44.969 --> 00:02:48.372
如果你有一个非视网膜屏幕，它是，对，
If you have a non-retina screen,
it is, right,

51
00:02:48.372 --> 00:02:51.870
这就是为什么我在这个非视网膜设备模式。
that's why I'm in this
non-retina device mode.

52
00:02:51.870 --> 00:02:55.789
我们将看看在视网膜和非视网膜上工作得同样糟糕的其他例子，
We'll look at other examples that work
just as poorly on retina and non-retina,

53
00:02:55.789 --> 00:02:59.069
但这是一个非常简单的例子。
but this is kind of a very
simple example to look at.

54
00:02:59.069 --> 00:03:01.550
我不知道，在我的工作中，除了
And I don't know, at my job,
everyone else except for

55
00:03:01.550 --> 00:03:04.229
我有一个27英寸的迅雷显示器。
me has one of those 27-inch
thunderbolt displays.

56
00:03:04.229 --> 00:03:07.199
所以在手机上，视网膜很好，我们在笔记本电脑前，但是
So on a phone, retina's good to go,
we're in front of our laptops, but

57
00:03:07.199 --> 00:03:09.889
很多时候，当我们连接到监视器上时，它不是视网膜。
a lot of times when we're plugged
into a monitor, it's not retina.

58
00:03:09.889 --> 00:03:14.530
至少在我的世界里，我有一个4k显示器，所以我不知道发生了什么。
At least in my world, I have a 4k display,
so I don't know what's going on.

59
00:03:14.530 --> 00:03:19.009
酷，好吧，所以我们可以看到我们正在重新粉刷。
Cool, all right, so
we can see that we're repainting.

60
00:03:19.009 --> 00:03:20.789
我们不想比我们需要的更多地重新粉刷。
We don't wanna repaint
more than we need to.

61
00:03:20.789 --> 00:03:23.460
问题是，我们能做些什么呢？
And the question is,
what can we do about this?

62
00:03:28.210 --> 00:03:32.312
&gt；&gt；steve：那么，再重复一遍，我们需要画多少就画多少，
&gt;&gt; Steve: So again, to kinda repeat
myself, we paint as much as we need to,

63
00:03:32.312 --> 00:03:34.639
但只要我们能逃脱惩罚。
but as little as we can get away with.

64
00:03:34.639 --> 00:03:40.020
我觉得我画的比我需要的要多，不需要展示那么多。
And I feel like I was painting more than
I needed to, to not show all that much.

65
00:03:40.020 --> 00:03:42.170
所以在我们解决这个问题之前，
So before we can solve this problem,

66
00:03:42.170 --> 00:03:45.804
我们在正在发生的事情中遗漏了一个概念性的部分。
we're missing a conceptual
piece in what's going on.

67
00:03:45.804 --> 00:03:48.280
我说，嘿，我们把一切都安排好，我们计算款式，
I said, hey, we lay everything out,
we calculate the styles,

68
00:03:48.280 --> 00:03:51.900
做所有这一切，告诉一切画自己，把它发送到GPU。
do all that, tell everything to
paint itself, send it to the GPU.

69
00:03:51.900 --> 00:03:54.709
就像，任何时候有人说，是的，只要把它发送到GPU就行了
Like, anytime someone says something like,
yeah, just send it to the GPU and

70
00:03:54.709 --> 00:03:57.110
他们真的会挥手，你应该用怀疑的态度对待他们。
they get really hand wavy,
you should treat them with suspicion.

71
00:03:57.110 --> 00:04:00.923
在这一点上你应该怀疑我，因为我没有
And you should be treating me with
suspicion at this point because I didn't

72
00:04:00.923 --> 00:04:02.930
解释一下这意味着什么，对吧。
explain what that even means, right.
