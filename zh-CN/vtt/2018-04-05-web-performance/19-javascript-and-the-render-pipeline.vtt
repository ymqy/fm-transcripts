WEBVTT

1
00:00:00.140 --> 00:00:04.948
&gt；&gt；steve kinney：除了。&gt；&gt；steve kinney：这会让你非常
&gt;&gt; Steve Kinney: Except.
&gt;&gt; Steve Kinney: That gets you to the very

2
00:00:04.948 --> 00:00:12.381
首先呈现页面，然后我们的朋友出现并更改内容，对吧。
first page render, then our friend
comes along and changes stuff, right.

3
00:00:12.381 --> 00:00:14.018
这会让你进入一个静态页面，
That'll get you to a static page,

4
00:00:14.018 --> 00:00:17.469
如果你是一个内容网站，会让你走到那里的大部分路，对吧。
if you're a content site that will
get you most of the way there, right.

5
00:00:17.469 --> 00:00:23.574
再一次，看到懒惰的Web性能方法，
Again, see the lazy approach
to web performance,

6
00:00:23.574 --> 00:00:26.704
课程的新标题。
new title for the course.

7
00:00:26.704 --> 00:00:31.157
很可能这并不是您最终渲染的唯一时间
So likely that is not the only time
that you are going to end up rendering

8
00:00:31.157 --> 00:00:32.377
那一页，对。
the page, right.

9
00:00:32.377 --> 00:00:35.006
并且大多数用户界面基于
And most user interfaced based

10
00:00:35.006 --> 00:00:39.969
应用程序你经常移动东西，对吧。
applications you're moving
stuff around a lot, right.

11
00:00:39.969 --> 00:00:43.423
这是那里正在发生的大多数事情。
This is the large majority
of what is happening there.

12
00:00:43.423 --> 00:00:46.584
如果你用物体做奇怪的事情
And if you are doing weird
stuff with objects and

13
00:00:46.584 --> 00:00:51.030
管理状态最终结果是您希望显示UI，对吧。
managing state the end result is
you wanna display a UI, right.

14
00:00:51.030 --> 00:00:54.679
您希望基于所有其他JavaScript计算更改UI，这些计算
You want to change the UI based on all of
this other JavaScript calculation that

15
00:00:54.679 --> 00:00:55.463
你在做什么。
you're doing.

16
00:00:55.463 --> 00:00:59.375
因此，JavaScript可以做的影响渲染的事情的不完整列表
So an incomplete list of things that
JavaScript can do that impact rendering

17
00:00:59.375 --> 00:01:02.509
性能是他们可以改变对象的类。
performance is they can change
the class of an object.

18
00:01:02.509 --> 00:01:05.935
这是什么意思，班级2 x大小，对吧，它，
What does that mean,
does the class two x size, right, it,

19
00:01:05.935 --> 00:01:09.510
它会改变它的尺寸吗，它会改变颜色吗？
does it change the dimensions of it,
does it change the color?

20
00:01:09.510 --> 00:01:11.088
我们不知道这是怎么回事
We don't know what that does so

21
00:01:11.088 --> 00:01:14.748
这意味着我们需要重新进行渲染过程的某些部分。
it means we need to do some part of
the rendering process all over again.

22
00:01:14.748 --> 00:01:18.353
我们是否更改了对象的内联样式实际上与
Did we change the inline styles of
the objects is effectively the same as

23
00:01:18.353 --> 00:01:20.471
改变班级，除了更黑暗。
the changing the class, except darker.

24
00:01:20.471 --> 00:01:23.745
以及向页面添加或移除元素，
And adding or
removing elements to the page,

25
00:01:23.745 --> 00:01:27.200
你可能需要重新布局页面，对吧。
you might need to re-lay out the page,
right.

26
00:01:27.200 --> 00:01:28.637
这些都是可能发生的事情。
These are all things that can happen.

27
00:01:28.637 --> 00:01:32.292
对于我们之前看到的所有步骤，好吧，DOM，
And for all the steps we saw before,
okay, the DOM,

28
00:01:32.292 --> 00:01:36.009
CSS对象模型，渲染树，右边。
the CSS object model,
the render tree, right.

29
00:01:36.009 --> 00:01:40.275
我们通常有效地保留DOM，有时还保留CSS对象模型。
We effectively mostly keep around the DOM
and sometimes the CSS object model.

30
00:01:40.275 --> 00:01:42.740
如果您更改样式表，则必须重新计算。
If you change style sheets
that's gotta be recalculated.

31
00:01:42.740 --> 00:01:44.756
但渲染树的其他所有内容都需要重新制作。
But everything else that render
tree needs to be remade.

32
00:01:44.756 --> 00:01:48.566
当渲染树需要重新制作时，我们可能需要重新布局页面。
When the render tree needs to be remade
we probably need to re-layout the page.

33
00:01:48.566 --> 00:01:51.829
当布局改变时，我们可能需要重新绘制页面，对吧。
When layout changes we probably
need to repaint the page, right.

34
00:01:51.829 --> 00:01:57.651
因此，任何时候我们有这些大的影响，我们最终不得不重做很多这项工作。
So anytime we have these big effects we
end up having to redo a lot of this work.

35
00:01:57.651 --> 00:02:00.390
所以这不是一次性的事情，而是很多次的事情。
So it's not a one-time thing,
it's a many times thing.

36
00:02:00.390 --> 00:02:02.118
你可以做一些事情让你真正做到这一点。
And there are some things you
can do that really get you that.

37
00:02:02.118 --> 00:02:05.777
还记得我们在介绍和介绍时沿着顶部的红色条吗？
Remember that red bar along the top
when we were in the introduction and

38
00:02:05.777 --> 00:02:07.578
我们可以说你可以连接CPU？
we could say you could peg the CPU?

39
00:02:07.578 --> 00:02:11.615
在这个过程中你可以做很多事情，因为他们都共享主要的
You can do a lot of stuff in this process
because they're all sharing the main

40
00:02:11.615 --> 00:02:12.570
线程，对。
thread, right.

41
00:02:12.570 --> 00:02:15.980
你的画，你的布局，你的JavaScript都在竞争
Your painting, your layout,
your JavaScript are all competing for

42
00:02:15.980 --> 00:02:17.935
同样的电脑资源，对吧。
the same computer resources, right.

43
00:02:17.935 --> 00:02:21.150
所以把这些都放在一起是很重要的。
So kinda keeping those all
together is important.

44
00:02:21.150 --> 00:02:22.728
这就是渲染管道。
So this is the render pipeline.

45
00:02:22.728 --> 00:02:26.490
JavaScript可以通过添加或来更改页面的样式
Javascript can change the styles
of a page by either adding or

46
00:02:26.490 --> 00:02:31.454
删除类，这可能会更改页面的几何图形和布局。
removing classes, which could change
the geometry and the layout of the page.

47
00:02:31.454 --> 00:02:33.548
可能会改变颜色。
That could change the colors.

48
00:02:33.548 --> 00:02:37.219
就像，好的，当他们悬停时，我想把这个按钮从白色换成蓝色，对吧。
Like, okay, when they hover I wanna change
this button from white to blue, right.

49
00:02:37.219 --> 00:02:39.899
需要你重新粉刷
That's gonna need you to repaint and

50
00:02:39.899 --> 00:02:45.700
然后你需要将所有的新数据发送到GPU来完成，对吧，很酷。
then you need to send all that new data
over to the GPU to get done, right, cool.

51
00:02:45.700 --> 00:02:49.355
所以这些步骤中的每一步都会触发一切改变风格，
So each one of those steps triggers
everything change the style,

52
00:02:49.355 --> 00:02:53.780
更改计算样式所有重新计算都必须发生。
change the computed styles all
that recalculation has to happen.

53
00:02:53.780 --> 00:02:58.109
任何可能改变的东西都可能改变几何形状，也可能没有改变几何形状
Anything could change that may or
may not have changed the geometry

54
00:02:58.109 --> 00:03:01.751
那些东西现在不同了，发送到GPU，酷。
those things are now different,
send it to GPU, cool.

55
00:03:01.751 --> 00:03:05.300
你不需要每次都做这些，对吧。
You don't always need to do all
of those every time, right.

56
00:03:05.300 --> 00:03:08.330
如果您只是更改背景颜色或
In the event that you're just
changing the background color or

57
00:03:08.330 --> 00:03:09.995
对象的不透明度，对。
the opacity of an object, right.

58
00:03:09.995 --> 00:03:12.497
您需要重新布局页面吗？
Do you need to re-lay out the page?

59
00:03:12.497 --> 00:03:14.740
可能不是，对吧。
Probably not, right.

60
00:03:14.740 --> 00:03:19.129
所以有些时候，特别是像不透明度和CSS变换这样的东西，
So there are some times, especially with
stuff like opacity and CSS transforms,

61
00:03:19.129 --> 00:03:21.942
在那里你甚至可以跳过油漆过程。
where you can actually skip
even the paint process.

62
00:03:21.942 --> 00:03:24.300
你可以跳过这个的不同部分。
You can skip different parts of this.

63
00:03:24.300 --> 00:03:27.036
如果窗口调整大小，则不会更改任何样式，因此
If the window resizes,
none of the styles have changed so

64
00:03:27.036 --> 00:03:30.003
理论上你可以保留风格计算，对吧。
you can theoretically keep
the style calculations, right.

65
00:03:30.003 --> 00:03:33.423
只是可能弹性框有不同的规则，您可能需要重新布局或
It's just maybe the flexbox has different
rules you might need to re-layout or

66
00:03:33.423 --> 00:03:34.000
重新粉刷。
re-paint.

67
00:03:34.000 --> 00:03:37.122
所以你并不总是需要做所有的事情，对吧。
So you don't always need
to do all of them, right.

68
00:03:37.122 --> 00:03:39.625
有时候你可以跳过其中的一些，对吧。
Sometimes you can skip a few of them,
right.

69
00:03:39.625 --> 00:03:43.759
这就是整个部分的内容，对吧。
And that's what this whole
section is about, right.

70
00:03:43.759 --> 00:03:45.302
因为不做事，
Because not doing stuff,

71
00:03:45.302 --> 00:03:49.658
跳过整个部分总是比做它们更快，对吧。
skipping entire sections will always
be faster than doing them, right.

72
00:03:49.658 --> 00:03:55.326
同样的推论也适用，对吧，不做的事情比做的快
And the same corollary applies, right,
of not doing stuff is faster than doing

73
00:03:55.326 --> 00:04:00.930
东西，做比你需要的多的东西也可能是有问题的，对吧。
stuff, doing stuff more than you need
to can also be problematic, right.

74
00:04:00.930 --> 00:04:03.140
所以我们想跳过我们可以跳过的东西
So we want to skip
whatever we can skip and

75
00:04:03.140 --> 00:04:06.931
我们绝对不想做任何超出我们需要的事情，对吧。
we definitely don't wanna do anything
more than we need to, right.

76
00:04:06.931 --> 00:04:11.865
再一次，请参见懒惰方法对Web性能的影响，这是本课程的新标题。
Again, see the lazy approach to web
performance, new title for the course.
