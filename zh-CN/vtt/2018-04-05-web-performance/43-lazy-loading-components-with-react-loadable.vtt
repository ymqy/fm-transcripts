WEBVTT

1
00:00:00.900 --> 00:00:02.839
&gt；&gt；steve kinney：那么让我们看看我们是否能摆脱它。
&gt;&gt; Steve Kinney: So
let's see if we can get rid of it.

2
00:00:02.839 --> 00:00:05.474
我最喜欢的库之一叫做
One of my favorite libraries is called

3
00:00:05.474 --> 00:00:12.486
反应可加载。&gt；&gt；steve kinney：和
React Loadable.
&gt;&gt; Steve Kinney: And

4
00:00:12.486 --> 00:00:16.170
React Loadable所做的是它利用了两个方面的优势。
what React Loadable does is it kind
of takes advantage of two things.

5
00:00:16.170 --> 00:00:20.019
Webpack开箱即用支持这种新的ES6语法，
Webpack out of the box
supports this new es6 syntax,

6
00:00:20.019 --> 00:00:22.739
这允许您有一个返回承诺的导入。
which allows you to have
an import that returns a promise.

7
00:00:22.739 --> 00:00:26.489
发生的事情是，你说进口，它会继续去取东西，然后
What happens is, you say import and
it will go ahead and fetch the thing, and

8
00:00:26.489 --> 00:00:31.399
那么当我们获得我们想要的访问权限时，承诺就会得到解决。
then the promise will resolve when we
have the access we're looking for.

9
00:00:31.399 --> 00:00:34.969
所以你会说，稍后去拿这个，一旦你有了它就做代码，对吗？
So you'll be like, go get this later and
do the code once you have it, right?

10
00:00:34.969 --> 00:00:37.170
这就像，这件事的一个关键部分。
Which is like, one key piece of this.

11
00:00:37.170 --> 00:00:40.454
react loadable只是让我们对此进行了非常快速的抽象。
React Loadable just gives us a really
quick abstraction over this.

12
00:00:40.454 --> 00:00:44.789
也就是说，你可以拿一个组件，你知道它有很大的依赖性。
Which is you can take a component that you
know has some pretty big dependencies.

13
00:00:44.789 --> 00:00:50.579
你可以说，嘿，当我们使用这个组件的时候，
And you can say like, hey,
go ahead when we use this component,

14
00:00:50.579 --> 00:00:54.579
去加载，比如请求额外的代码块。
go and load, like ask for
that extra chunk of code.

15
00:00:54.579 --> 00:00:57.810
同时，显示此加载组件。
In the meantime,
show this loading component.

16
00:00:57.810 --> 00:00:59.219
那可能是个旋转器。
That could be a spinner.

17
00:00:59.219 --> 00:01:03.409
很多时候你会看到的模式，特别是你会在Facebook上看到它。
A lot of times you'll see the pattern of,
especially you'll see it in Facebook.

18
00:01:03.409 --> 00:01:07.810
如果你在Facebook加载你的时间线之前打开它，你会看到空的，
If you open Facebook up before it's
loaded your timeline, you see empty ones,

19
00:01:07.810 --> 00:01:09.039
好像那是一种骷髅模型。
like that's kind of skeleton model.

20
00:01:09.039 --> 00:01:12.569
您可以向用户显示表明您正在获得其余内容的内容。
You can show the user something that
indicates you're getting the rest.

21
00:01:12.569 --> 00:01:14.760
然后把它放到合适的地方。
And put it in place then.

22
00:01:14.760 --> 00:01:17.700
好的一点是，如果你只取一次，它就不会再这么做了。
The nice part is, if you fetched it once,
it will never do this again.

23
00:01:17.700 --> 00:01:19.039
你总是只有组件，所以
You will always just have the components,
so

24
00:01:19.039 --> 00:01:21.640
这将是他们第一次提出要求。
this will be the first time they ask for
it.

25
00:01:21.640 --> 00:01:22.810
所以，我要在这里做两件事。
So, I'm gonna do two things here.

26
00:01:23.890 --> 00:01:27.620
我将继续创建一个小的装载器组件，
I'm gonna go ahead and create like
a small little loader component,

27
00:01:27.620 --> 00:01:28.722
这真的很好。
which really good.

28
00:01:28.722 --> 00:01:33.049
这就像是故意取样，应该比我的更好。
It's gonna be like intentionally sample
like, there's should be better than mine.

29
00:01:34.060 --> 00:01:38.099
有没有人想让我调整CSS，因为我很不擅长。
Does anyone wanna me tweak with CSS,
cuz I'm very bad at it.

30
00:01:38.099 --> 00:01:40.115
我们会做一个新的组件，然后
We'll make a new component, and

31
00:01:40.115 --> 00:01:43.519
我们称之为装载。&gt；&gt；steve kinney：和
we'll call it loading.
&gt;&gt; Steve Kinney: And

32
00:01:43.519 --> 00:01:46.150
在实际的应用程序中，您可能有多个加载器。
in a real application,
you might have multiple loaders.

33
00:01:46.150 --> 00:01:48.060
你可能有一个通用的东西是通用的，
You might have a generic one for
things that are generic,

34
00:01:48.060 --> 00:01:50.020
如果您加载的是整个页面。
if it's an entire page
that you're loading.

35
00:01:50.020 --> 00:01:51.490
但你可能会喜欢，因为
But you might have like, for

36
00:01:51.490 --> 00:01:53.960
一个给定的较小的部分，比如一个更合适的部分。
a given smaller piece,
like one that's more appropriate.

37
00:01:53.960 --> 00:01:56.549
我们的不会那么复杂。
Ours is not gonna be that sophisticated.

38
00:01:56.549 --> 00:02:01.320
我们只是简单地导入，
We'll just simply import,

39
00:02:01.320 --> 00:02:04.509
从反应到反应。
react from react.

40
00:02:04.509 --> 00:02:09.901
我们就像世界上最简单的装载
And we'll just make like
the world's simplest loading

41
00:02:09.901 --> 00:02:15.995
组件。&gt；&gt；steve kinney：它将是一个段落，
component.
&gt;&gt; Steve Kinney: It'll be a paragraph,

42
00:02:15.995 --> 00:02:24.550
它会说正在加载。&gt；&gt；steve kinney：再一次，
and it will say loading.
&gt;&gt; Steve Kinney: Again,

43
00:02:24.550 --> 00:02:28.509
就像你的一样，可以说应该更复杂，但是
like yours arguably should
be more sophisticated, but

44
00:02:28.509 --> 00:02:31.409
这不是这件作品的高价值。
that is not the high value of this piece.

45
00:02:31.409 --> 00:02:33.444
好的，整齐。
All right, neat.

46
00:02:33.444 --> 00:02:36.800
现在，让我们拿一些花了我们一些时间的东西。
Now, lets take something
that has taken us some time.

47
00:02:36.800 --> 00:02:38.449
我的想法就像是一面代码镜子。
I think like code mirror.

48
00:02:38.449 --> 00:02:40.870
我们不是反代码镜，我们只是喜欢，不是现在，
We’re not anti code mirror,
we are just like, not now,

49
00:02:40.870 --> 00:02:43.090
我正在尝试加载网页代码镜像，请。
I am trying to load a web
page code mirror, please.

50
00:02:43.090 --> 00:02:46.400
您很大，并且占用了大量的解析时间。
You are large and
you’re taking up a lot of parsing time.

51
00:02:46.400 --> 00:02:48.460
我不需要你。
I don’t need you.

52
00:02:48.460 --> 00:02:49.319
所以我们继续吧。
So lets go ahead.

53
00:02:50.539 --> 00:02:54.280
我的应用程序的结构方式是redux容器模式。
The way my application is structured,
I have the redux container pattern.

54
00:02:54.280 --> 00:02:58.060
所以如果你看一下编辑器，它从我的商店里抓取了一大堆东西
So if you look at the editor, it grabs
a bunch of stuff from my store and

55
00:02:58.060 --> 00:03:00.699
然后传给编辑，对吗？
then passes it to the editor, right?

56
00:03:00.699 --> 00:03:04.250
我很乐意将它传递给编辑器的可加载版本，例如，
I would love to pass it to a loadable
version of the editor like,

57
00:03:04.250 --> 00:03:06.569
在这里，将此数据传递给组件。
here, pass this data to a component.

58
00:03:06.569 --> 00:03:09.030
我一会儿就去拿那些东西。
I'm gonna go fetch that
stuff in a little bit.

59
00:03:09.030 --> 00:03:12.300
所以我要做的是，我要在这里再做一个组件。
So what I'm gonna do,
I'm gonna make one more component here.

60
00:03:12.300 --> 00:03:19.879
我会叫它，可加载编辑器，这将是我的岔路口。
And I'm gonna call it, Loadable Editor and
this is gonna be my fork in the road.

61
00:03:19.879 --> 00:03:23.632
如果已经加载了编辑器组件，请使用它。
If you have the editor component
loaded already, use it.

62
00:03:23.632 --> 00:03:28.300
如果你没有，去拿它，并在同时显示我的加载组件。
If you don't, go get it and show my
loading component in the mean time.

63
00:03:28.300 --> 00:03:31.360
一旦您有了它，请将我切换到编辑器组件。
And once you have it,
switch me over to the editor component.

64
00:03:31.360 --> 00:03:32.109
这说得通吗？
Does that make sense?

65
00:03:33.250 --> 00:03:35.349
很酷，所以让我们继续并快速地编写这个代码。
Cool, so let's go ahead and
code this one up real quick.

66
00:03:35.349 --> 00:03:43.534
所以我们会说，进口反应从‘反应’；。
So we'll say, import React from 'react';.

67
00:03:43.534 --> 00:03:51.651
从‘react-loadable’导入可加载的。
Import Loadable from 'react-loadable'.

68
00:03:53.110 --> 00:04:01.897
我们会说，&gt；&gt；Steve Kinney：LoadableEditor和
And we'll say,
&gt;&gt; Steve Kinney: LoadableEditor and

69
00:04:01.897 --> 00:04:06.713
然后我们采用接受对象的可加载方法。
then we take the loadable
method that takes an object.

70
00:04:06.713 --> 00:04:11.349
那需要
That takes

71
00:04:11.349 --> 00:04:14.819
您想要加载的组件，然后在此期间显示什么。
the component that you want to load and
then what to show in the meantime.

72
00:04:16.329 --> 00:04:22.711
所以我们会说，装载者，&gt；&gt；Steve Kinney：和
So we'll say, loader,
&gt;&gt; Steve Kinney: And

73
00:04:22.711 --> 00:04:27.802
我们只要进口我们需要的。&gt；&gt；steve kinney：和
we'll just import the one that we need.
&gt;&gt; Steve Kinney: And

74
00:04:27.802 --> 00:04:29.379
这是用来处理反应成分的。
this is for
dealing with reaction components.

75
00:04:29.379 --> 00:04:33.079
如果您使用import语句，它将返回一个承诺，然后获取它。
If you use that import statement, it's
gonna return a promise and fetch it then.

76
00:04:33.079 --> 00:04:35.009
你可以将它用于任何类型的代码，
You can use it for any kind of code,

77
00:04:35.009 --> 00:04:36.899
不管它是不是反应成分。
it doesn't matter if it's
a reaction component.

78
00:04:36.899 --> 00:04:39.840
您可以将它用于可能有很多依赖关系的任何事情。
You can use it for anything that
might have a lot of dependencies.

79
00:04:39.840 --> 00:04:42.980
当你会说，去拿这个东西，然后我们就会上前。
When you'll be like, go get this thing,
and then we'll come forward.

80
00:04:42.980 --> 00:04:45.494
所以我们将导入编辑器。
So we'll import the editor.

81
00:04:45.494 --> 00:04:50.394
我们会说加载组件是，
And we'll say that
the loading component is,

82
00:05:05.701 --> 00:05:06.483
&gt；&gt；Steve Kinney：我会的
&gt;&gt; Steve Kinney: I will

83
00:05:06.483 --> 00:05:10.399
导出可加载编辑器。
export the loadable editor.

84
00:05:10.399 --> 00:05:12.110
所以现在，我们有了这个新的组件。
So now, we have this new component.

85
00:05:12.110 --> 00:05:14.050
它有智慧去得到它需要的东西。
It has the smarts to get what it needs.

86
00:05:14.050 --> 00:05:15.009
同时显示装载情况。
Show the loading in the meantime.

87
00:05:15.009 --> 00:05:16.310
我们只需要使用它。
We just need to use it.

88
00:05:16.310 --> 00:05:20.579
所以我们接下来要做的就是进入这个编辑器容器，
So what we'll go ahead and
do is we'll go into this editor container,

89
00:05:20.579 --> 00:05:22.490
我们只是要把它换掉。
and we're just gonna swap it out.

90
00:05:22.490 --> 00:05:27.196
我们会说，&gt；&gt；steve kinney：然后
We'll say,
&gt;&gt; Steve Kinney: And

91
00:05:27.196 --> 00:05:29.653
这实际上不起作用，但我要改名只是为了
this actually doesn't work, but
I'm gonna change the name just to make

92
00:05:29.653 --> 00:05:34.786
一分。&gt；&gt；steve kinney：和
a point.
&gt;&gt; Steve Kinney: And

93
00:05:34.786 --> 00:05:40.430
我们将在React或Redux容器中使用LoadableEditor。
we'll use the LoadableEditor instead
in our React or Redux container.

94
00:05:40.430 --> 00:05:41.409
好的，我们做到了。
All right, so we did it.

95
00:05:42.529 --> 00:05:49.442
让我们，&gt；&gt；steve kinney：去吧
Let's,
&gt;&gt; Steve Kinney: Go ahead and

96
00:05:49.442 --> 00:05:51.939
我必须改变一个设置。
I have to change one setting.

97
00:05:53.000 --> 00:05:55.180
我故意遗漏了这一点，所以你可以看着我做。
I purposely left this out,
so you can watch me do it.

98
00:05:55.180 --> 00:05:57.399
你现在可以看到应用程序崩溃了。
And you can see right
now the app is crashing.

99
00:05:57.399 --> 00:06:00.569
就像，我不明白这个导入语法是什么。
It's like, I don't understand
what this import syntax is.

100
00:06:00.569 --> 00:06:05.759
因此，JavaScript中的新功能在TC39组中经历了一个阶段，
So, new features in JavaScript,
go through a phase in the group TC39,

101
00:06:05.759 --> 00:06:08.279
技术委员会39.
Technical Committee 39.

102
00:06:08.279 --> 00:06:10.079
你可能会问1到38在哪里。
You might ask where are 1 through 38.

103
00:06:10.079 --> 00:06:11.497
我不知道。
I have no idea.

104
00:06:11.497 --> 00:06:12.339
他们是做什么的？
And what do they do?

105
00:06:12.339 --> 00:06:13.000
我不知道。
I don't know.

106
00:06:13.000 --> 00:06:13.839
这都是
This is all part of

107
00:06:13.839 --> 00:06:18.000
正式名称为欧洲计算机制造商协会。
what was formally called the European
Computer Manufacturers Association.

108
00:06:18.000 --> 00:06:22.120
现在刚叫它为什么JavaScript的真名是。
Now just called its why
the real name of JavaScript is.

109
00:06:22.120 --> 00:06:27.769
所以加载，这个导入语法，就是我们所说的第三阶段。
So the loading, this import syntax,
is what we call stage three.

110
00:06:27.769 --> 00:06:31.269
第三阶段意味着语言上没有完全批准，但是
Stage three means not totally
ratified in the language, but

111
00:06:31.269 --> 00:06:35.159
就像是该语言下一个版本的强大候选者。
like pretty much a strong candidate for
the next version of the language.

112
00:06:35.159 --> 00:06:39.220
您将看到Webpack和Babble支持功能
You will see things like,
Webpack and babble support features

113
00:06:39.220 --> 00:06:43.509
几乎很早就完成了，这是可扩展网络宣言的一部分。
that are almost done early, and this is
part of like the extensible web manifesto.

114
00:06:43.509 --> 00:06:46.879
比如，让我们在把这些东西放到开发人员手中之前，尽早把它们拿到手
Of like, let's get these things into
developers hands early before we put them

115
00:06:46.879 --> 00:06:47.750
在语言上。
in the language.

116
00:06:47.750 --> 00:06:50.290
因为如果我们犯了错误或者不去想它
Cuz if we made mistakes or
didn't think about it'd

117
00:06:50.290 --> 00:06:53.980
在语言批准之前获得反馈是很酷的，并且
be cool to get that feedback before
they are ratified in language, and

118
00:06:53.980 --> 00:06:56.670
每个浏览器都必须遵循它们的所有规范。
every browser has to follow
all the spec for them.

119
00:06:56.670 --> 00:06:58.920
所以导入，你需要一个巴别塔插件。
So import,
you do need a babel plugin for this.

120
00:06:58.920 --> 00:07:04.577
如果我们查看JSON包，我们可以看到我已经
If we look in the package JSON,
we can see that I've

121
00:07:04.577 --> 00:07:11.302
得到了这个语法-dynamic-import，这就是我们想要的。
got this syntax-dynamic-import,
which is what we want.

122
00:07:11.302 --> 00:07:14.485
所以继续吧，我们会把它添加到我们的Babel-RC中，
So go ahead and
we'll add that to our babel-rc,

123
00:07:14.485 --> 00:07:17.369
也是。&gt；&gt；steve kinney：和
as well.
&gt;&gt; Steve Kinney: And

124
00:07:17.369 --> 00:07:19.139
我要杀了之前的服务器。
I'm gonna kill that previous server.

125
00:07:20.959 --> 00:07:22.660
它说编译成功了，但我不相信。
It said compiled it successfully,
but I don't believe it.

126
00:07:23.980 --> 00:07:29.449
很可能是，但是，&gt；&gt；steve kinney：那么
It probably did, but,
&gt;&gt; Steve Kinney: Then

127
00:07:29.449 --> 00:07:33.894
我们将刷新页面，&gt；&gt；Steve Kinney：和
we'll refresh the page,
&gt;&gt; Steve Kinney: And

128
00:07:33.894 --> 00:07:42.103
东西会碎的。&gt；&gt；Steve Kinney：转型
things will break.
&gt;&gt; Steve Kinney: Transform

129
00:07:42.103 --> 00:07:47.980
是自动功能。&gt；&gt；Steve Kinney：让我们继续
is autofunction.
&gt;&gt; Steve Kinney: Let's go ahead and

130
00:07:47.980 --> 00:07:49.975
去掉自定义loadash代码
get rid of that custom loadash code from

131
00:07:49.975 --> 00:07:54.168
之前。&gt；&gt；steve kinney：是的，
before.
&gt;&gt; Steve Kinney: Yeah,

132
00:07:54.168 --> 00:07:55.790
我还有Loadash/Transform
I still had loadash/transform.

133
00:07:55.790 --> 00:08:00.490
就像，一个或另一个，我确实喜欢这里的常规装载器，而且
It's like, one or the other,
I do like regular loadash here, and

134
00:08:00.490 --> 00:08:01.370
插件可以工作。
the plug in will work.

135
00:08:01.370 --> 00:08:03.629
但我在那里寻找变形
But I was looking for
the transform from there and

136
00:08:03.629 --> 00:08:08.687
试图找到它。&gt；&gt；Steve Kinney：所以
trying to find its.
&gt;&gt; Steve Kinney: So

137
00:08:08.687 --> 00:08:16.761
我们已经变形了。&gt；&gt；steve kinney：和
we've got transform.
&gt;&gt; Steve Kinney: And

138
00:08:16.761 --> 00:08:17.689
你看我的应用程序在这里。
you see my app is here.

139
00:08:17.689 --> 00:08:22.750
好的，所以这个应用程序在功能上的表现和以前一样。
All right, so the app functionally
behaves the way it did before.

140
00:08:22.750 --> 00:08:25.759
如果你仔细观察，你可以看到那里的小负载。
If you watch for it, you can see
that tiny little loading there.

141
00:08:26.949 --> 00:08:27.720
我给你重放一遍。
I'll replay it for you.

142
00:08:29.230 --> 00:08:30.079
不，那是行不通的。
Nope, that's not gonna work.

143
00:08:31.439 --> 00:08:32.120
从这里重播。
Replay it from here.

144
00:08:33.610 --> 00:08:34.700
要做的事情，仔细观察。
Things to do, watch closely.

145
00:08:34.700 --> 00:08:36.240
我要按编辑按钮，准备好了吗？
I'm gonna hit the Edit button, you ready?

146
00:08:36.240 --> 00:08:39.159
你刚才看到了一堆东西。
You saw a load for a second there.

147
00:08:39.159 --> 00:08:41.909
它最初没有那个代码，它去拿了它，对吧。
It didn't have that code originally,
and it went and got it, right.

148
00:08:41.909 --> 00:08:42.940
如果我有稍微好一点的话，
If I had it slightly nicer,

149
00:08:42.940 --> 00:08:44.929
我可以展示一些看起来几乎像编辑的东西。
I could show something that
almost looked like the editor.

150
00:08:44.929 --> 00:08:46.700
我可以在那里耍一大堆花招，
I could do a whole bunch
of trickery there,

151
00:08:46.700 --> 00:08:49.220
让用户觉得它更快了一点。
to make the user feel like
it's a little snappier.

152
00:08:49.220 --> 00:08:52.830
而且它不在最初的捆绑中，我们去拿了它。
And it wasn't in the initial bundle,
we went and got it.

153
00:08:52.830 --> 00:08:53.701
我们再做一件事。
Let's do one other thing.

154
00:08:53.701 --> 00:08:58.559
我们会重新开始的。&gt；&gt；Steve Kinney：我要走了
We'll start over again.
&gt;&gt; Steve Kinney: I'm going

155
00:08:58.559 --> 00:09:02.344
去网络。
to go to the network.

156
00:09:08.076 --> 00:09:09.562
&gt；&gt；Steve Kinney：我将点击编辑，然后
&gt;&gt; Steve Kinney: I'll hit edit, and

157
00:09:09.562 --> 00:09:14.457
你可以看到，当我们点击编辑器时，我们又得到了两个条目，
you can see that, when we hit the editor,
we got two more entries,

158
00:09:14.457 --> 00:09:17.876
网络选项卡中的两个小条目，对。
two small entries in the network tab,
right.

159
00:09:17.876 --> 00:09:20.090
因为那时我去找了那个编辑。
Cuz that's when I went and
got that editor.

160
00:09:20.090 --> 00:09:26.121
现在，我想向大家展示的是，这个包分析器看起来像什么。
Now, what I want to show you is, what
this looks like with the bundle analyzer.

161
00:09:34.697 --> 00:09:35.793
&gt；&gt；steve kinney：嗯，C就像一个大的
&gt;&gt; Steve Kinney: Well C is like a large

162
00:09:35.793 --> 00:09:40.289
我们，我们有一个捆绑的方式不同，我们把低破折号减少了百分之十。
difference in the way that our, we had
one bundle, we cut down low dash by 10%.

163
00:09:40.289 --> 00:09:41.240
很好，对吧？
That was good, right?

164
00:09:41.240 --> 00:09:42.990
我们对此感觉很好。
We're feeling pretty good about that.

165
00:09:42.990 --> 00:09:46.149
我认为当我们看到下一段代码时会非常有趣。
I think it will really interesting
when we see the next piece of code.

166
00:09:47.759 --> 00:09:49.951
运行可视化行为，
Run acts of visualization,

167
00:09:49.951 --> 00:09:55.895
也就是说，你可以看到，我们现在生产了两个捆绑包，实际上是三个捆绑包。
which is you can see that we're now
producing two bundles, actually three.

168
00:09:55.895 --> 00:10:01.998
这是我们的主要，这是我们最初的应用，现在下降到272，对。
Which is our main, which is our initial
application, is now down to 272, right.

169
00:10:01.998 --> 00:10:05.529
从450。所以现在我们低于300的门槛。
From 450.
So now we're under that 300 threshold.

170
00:10:05.529 --> 00:10:08.129
对，因为我们有代码镜子和你需要的一切。
Right, cuz we have code mirror and
everything you need.

171
00:10:08.129 --> 00:10:10.009
你能去那边吗？
Can you go over there?

172
00:10:10.009 --> 00:10:11.100
我们待会再找你。
We'll get you later.

173
00:10:11.100 --> 00:10:14.029
所以我们得到了初始渲染时间，这些关键资产，所以
So we get that initial render time,
those critical assets, so

174
00:10:14.029 --> 00:10:15.029
用户看到我们的页面。
the user sees our page.

175
00:10:15.029 --> 00:10:17.980
还记得我们一开始谈到的所有统计数据吗？
Remember all those statistics that
we talked about in the beginning?

176
00:10:17.980 --> 00:10:20.029
如果页面需要加载的内容多于要加载的内容，并且
If the page takes more
than whatever to load, and

177
00:10:20.029 --> 00:10:23.159
加载包括解析，正如我们所讨论的。
load includes parsing, as we discussed.

178
00:10:23.159 --> 00:10:25.870
花了这么多时间，然后他们就走了。
It takes all this time to do it,
then they leave.

179
00:10:25.870 --> 00:10:28.610
我们已经说过了，嘿，让我们把你留下来的第一页给你，
We've said, hey, let's get you
the initial page that you stay,

180
00:10:28.610 --> 00:10:31.129
我们稍后会给你剩下的。
and we'll get you the rest later.

181
00:10:31.129 --> 00:10:33.809
所以我们的捆绑现在降到了272。
So our bundle is now down to 272.

182
00:10:33.809 --> 00:10:38.590
整个182，因为有一些组件和
A whole 182,
cuz there was some components and

183
00:10:38.590 --> 00:10:40.360
里面的其他东西也在进行中。
other stuff in there that's
going along as well.

184
00:10:41.759 --> 00:10:44.200
我们会去那里，在那个包裹里。
We'll go there, in that bundle.

185
00:10:44.200 --> 00:10:49.250
我们还会有另一个很小的，里面没有多少东西。
Also we'll have this other tiny one,
which has got not much in it.

186
00:10:49.250 --> 00:10:51.669
我们可以看到它太小了。
We can see it's too small.

187
00:10:51.669 --> 00:10:56.340
我们可以看到，我们已经分出了最大的问题在那里。
We can see that we have already split
out the biggest problem in there.

188
00:10:56.340 --> 00:10:57.889
但我们还可以做更多的事。
But there's more that we can do.

189
00:10:57.889 --> 00:11:00.139
我不知道这是哪个人物实体。
I don't know which
character entity is this.

190
00:11:00.139 --> 00:11:07.049
但我确实知道这个注释解析是什么，它是mark down组件，对吧？
But I do know what this remark parse is,
it's the mark down component, right?

191
00:11:07.049 --> 00:11:10.289
同样，当他们第一次看到初始登录页面时，
And again, when they first see
that initial landing page,

192
00:11:10.289 --> 00:11:11.730
我们不会用那个。
we're not using that.

193
00:11:11.730 --> 00:11:15.350
在他们真正去查看笔记之前，我们不会使用它。
We're not using that until they
actually go to view a note.

194
00:11:15.350 --> 00:11:17.149
那我们现在为什么要发货呢？
So why are we shipping it now?

195
00:11:17.149 --> 00:11:20.230
为什么我们要花钱把它塞进猫的管子里？
Why are we paying the cost of
shoving it through the tube of cats?

196
00:11:20.230 --> 00:11:25.720
为什么我们现在要解析它，而我们可以稍后再做，而不是现在呢？
Why are we parsing it right now,
when we can do it later and not do it now?

197
00:11:25.720 --> 00:11:27.269
那么，让我们看看我对编辑做了什么。
So, let's look at what
I did with the editor.

198
00:11:28.480 --> 00:11:32.600
我做了一个加载组件，它是可重用的，因为它很傻。
I made a loading component,
which is reusable because it's silly.

199
00:11:32.600 --> 00:11:35.509
我做了，我用React Loadable制作了一个组件，基本上
I made, I used react loadable to
make a component that's basically

200
00:11:35.509 --> 00:11:36.590
道路上的岔路口。
a fork in the road.

201
00:11:36.590 --> 00:11:38.370
去拿吧，如果你没有的话。
Go get it, if you don't have it.

202
00:11:38.370 --> 00:11:41.139
同时显示这个正在加载的一个。
Show this loading one in the meantime.

203
00:11:41.139 --> 00:11:43.610
需要注意的重要一点是，它只会获取一次。
The important thing to note is
that it will only fetch that once.

204
00:11:43.610 --> 00:11:45.919
如果我看其他笔记，它已经有编辑器了。
If I watch other notes,
it already has the editor.

205
00:11:45.919 --> 00:11:48.610
它不会再去拿了，这太酷了。
It's not gonna go get it again,
which is super cool.

206
00:11:48.610 --> 00:11:53.120
然后在我的编辑器里
And then in my editor here,

207
00:11:53.120 --> 00:11:55.830
我刚刚换掉了这里的编辑器，换成了可加载的编辑器。
I just swapped out the editor here,
for the loadable editor.
