WEBVTT

1
00:00:00.030 --> 00:00:04.480
&GT；&GT；史蒂夫：但我首先想到的是这里的小旅馆，对吧。
&gt;&gt; Steve: But the first thing I'm thinking
about, is the lodash over here, right.

2
00:00:04.480 --> 00:00:07.586
即使是gzip它也是23千字节，对吧。
Even gzip it's 23 kilobytes, right.

3
00:00:07.586 --> 00:00:10.262
我碰巧知道写了这个应用程序
I happen to know having written the app,

4
00:00:10.262 --> 00:00:13.980
我正好使用了一种来自洛达什的方法，对吧。
that I am using exactly one
method from lodash, right.

5
00:00:15.484 --> 00:00:18.679
因此，因为我包含了来自洛达什的一种方法，
And so
because I included one method from lodash,

6
00:00:18.679 --> 00:00:24.219
我必须得到所有的小旅馆并支付那笔费用。
I have to get all of lodash and
pay that cost.

7
00:00:24.219 --> 00:00:27.350
那么就有一个关于是否使用lodash的争论了？
So then there's an argument
of do use lodash?

8
00:00:27.350 --> 00:00:28.710
你自己写信吗？
Do you write yourself?

9
00:00:28.710 --> 00:00:32.789
比如，你想在证明洛达什之前在那条路上走多久？
Like, how long do you wanna start walking
on that path before you proven lodash?

10
00:00:32.789 --> 00:00:36.179
缓慢但肯定，如果有更好的方法就好了。
Slowly but surely,
if only there was a better way.

11
00:00:36.179 --> 00:00:37.853
有一些图书馆，
There are some libraries,

12
00:00:37.853 --> 00:00:42.084
这将允许你更具体地说明你需要从他们那里得到什么。
that will allow you to be more specific
about what you need from them.

13
00:00:42.084 --> 00:00:47.557
所以我在这里可以做的是，我可以进入代码，让我们来看看
So what I can do here, is I can go into
the code, and let's take a look for

14
00:00:47.557 --> 00:00:52.496
它在哪里，我相信它在注释视图容器中，不是。
where it is, I believe it's in
the note view container, nope.

15
00:00:54.101 --> 00:00:57.168
&gt；&gt；steve：在那里，把它带进来，来自loadash的下划线，
&gt;&gt; Steve: There it is, bring it in,
the underscore from lodash,

16
00:00:57.168 --> 00:01:00.250
它有洛达什做的所有方法，对吗？
which has got all the methods
that lodash does, right?

17
00:01:00.250 --> 00:01:03.119
就像，我不知道这些天洛瓦什有多少种方法，但是
Like, I don't know how many
methods lodash has these days, but

18
00:01:03.119 --> 00:01:06.296
它足以占据我的可视化工具包中的一大块。
it's enough to take up a large
chunk in my bundle of visualizer.

19
00:01:07.924 --> 00:01:10.704
很酷，所以你可以用loadash做这个很酷的事情，
Cool, so it turns out with lodash
you can do this really cool thing,

20
00:01:10.704 --> 00:01:14.215
我使用的都是Transform方法。
where all I'm using is
the transform method.

21
00:01:14.215 --> 00:01:18.155
因为我有一个带有键和值的对象，我需要一个数组，所以
Cuz I have an object with keys and
values, I need an array, so

22
00:01:18.155 --> 00:01:21.164
我使用的是变换方法，我正在将其转化为这种方法。
I'm using the transform method and
I'm turning it into that.

23
00:01:21.164 --> 00:01:28.090
但我能做的是我可以输入ploash/transform，
But what I can do is I can
type lodash/transform,

24
00:01:28.090 --> 00:01:31.760
现在我们称之为变换。
now we'll just call this transform.

25
00:01:31.760 --> 00:01:32.289
我们会处理掉的。
We'll get rid of that.

26
00:01:32.289 --> 00:01:36.424
首先，这意味着我不需要一直输入那个蹩脚的下划线，
First of all, it means I don't have to
type that lame underscore all the time,

27
00:01:36.424 --> 00:01:37.373
所以这是个胜利。
so that's a win.

28
00:01:37.373 --> 00:01:42.031
让我们继续，重建，看看会发生什么。
Let's go ahead, and
rebuild and see what happens.

29
00:01:51.509 --> 00:01:52.070
&gt；&gt；Steve：建筑很有趣。
&gt;&gt; Steve: Building is fun.

30
00:01:57.010 --> 00:02:01.784
&gt；&gt；steve：我的怀疑是，我会得到一个更小的捆绑。
&gt;&gt; Steve: My suspicion,
is that I'm going to get a smaller bundle.

31
00:02:01.784 --> 00:02:03.105
我们将一起看到这一点。
We will see this together.

32
00:02:06.611 --> 00:02:11.750
&gt；&gt；steve：酷，所以在此之前，这就是我们所拥有的，对吧。
&gt;&gt; Steve: Cool, so before,
this is what we had, right.

33
00:02:11.750 --> 00:02:16.629
现在，代码镜像仍然很大并且负责，但是
Now, code mirror still large and
in charge, but

34
00:02:16.629 --> 00:02:21.219
我们用的是相等的。
lodash we're using lodash that is equal.

35
00:02:21.219 --> 00:02:24.379
Transform不仅仅是Transform，它还使用了一些其他的Loadash方法，所以
Transform is not just transform,
it uses some other lodash methods, so

36
00:02:24.379 --> 00:02:26.969
在这里还没有完全脱离险境。
not totally out of the woods here.

37
00:02:26.969 --> 00:02:32.978
但是，我从500千字节开始，这不是我的300千字节的目标，
But, I went from 500 kilobytes
that's not my 300 kilobyte goal,

38
00:02:32.978 --> 00:02:38.002
想一想这个应用程序有多简单，我已经擦肩而过了
and like think about how simple
this app is I already blew past

39
00:02:38.002 --> 00:02:42.949
300像旁边的酒吧，一个标记下来的笔记和一个编辑器。
300 with like aside bar,
a mark down note and an editor.

40
00:02:42.949 --> 00:02:46.135
这意味着我们现在的500人减少到450人，所以
It means the 500 we're now down to 450, so

41
00:02:46.135 --> 00:02:51.128
通过键入大约10个字符，它将我们捆绑包大小的10%剃掉了。
it's shaved 10% of he size of our
bundle by typing like 10 characters.

42
00:02:53.490 --> 00:02:55.409
我把这叫做胜利，对吧？
I'll call that a win, right?

43
00:02:55.409 --> 00:02:58.340
你可能会说，听着，我用了很多洛瓦什，
And you might be like,
listen I use a lot of lodash,

44
00:02:58.340 --> 00:03:02.349
我不会翻阅文件，然后对每一件事都这样做。
I'm not going through the files and
doing that for every single thing.

45
00:03:02.349 --> 00:03:07.324
幸运的是，你可以作弊，这是一种伟大的，有一个巴别塔
Luckily, you can cheat which is
kind of great, there is a babel

46
00:03:07.324 --> 00:03:12.659
插件，当它编译你的代码时，会自动切换出来。
plugin that when it compiles your
code will automatically switch out.

47
00:03:12.659 --> 00:03:14.843
每次你使用loadash
Every time you use lodash for

48
00:03:14.843 --> 00:03:19.670
要求斜杠什么的，只是为你做所有的事情。
the require lodash slash whatever,
and just do it all for you.

49
00:03:19.670 --> 00:03:24.555
我们可以返回这个代码，&gt；&gt；Steve：原样，
We can turn this code back,
&gt;&gt; Steve: The way it was,

50
00:03:24.555 --> 00:03:29.509
因此，再次招致50千字节税。
so again,
incurring that 50 kilobyte tax again.

51
00:03:29.509 --> 00:03:31.727
我把它放在这个json包里，所以
And I have it in this package json, so

52
00:03:31.727 --> 00:03:37.941
您可以看到它&gt；&gt；steve：babel-plugin-loadash，及其
you can see it
&gt;&gt; Steve: Babel-plugin-lodash, and its

53
00:03:37.941 --> 00:03:42.430
唯一的工作就是做我所做的，在你申请的所有文件中为你做，对吗？
sole job is to do what I did, in all the
files of your application for you, right?

54
00:03:42.430 --> 00:03:45.270
因此，如果你有一个大型应用程序，你会说，我
And so, if you have a large
application and you're like, I

55
00:03:45.270 --> 00:03:49.370
我不想手工做这件事，因为我很擅长这件事，而且外面的感觉很好。
don't want to do this by hand because I'm
to good for that and it's very nice out.

56
00:03:49.370 --> 00:03:51.210
你可以安装这个插件，你可以完成。
You can install this plugin and
you can be done.

57
00:03:51.210 --> 00:03:55.421
所以我们会去babelrc，我们会说插件，
So we'll go to the babelrc,
and we'll say plugins,

58
00:03:55.421 --> 00:03:58.800
我也想使用loadash插件。
I would also like to
use the lodash plugin.

59
00:04:02.760 --> 00:04:05.943
&gt；&gt；Steve：所以请记住我把代码改回原来的样子，
&gt;&gt; Steve: So remember I turned
the code back to the way it was,

60
00:04:05.943 --> 00:04:07.942
我最初是从。
I originally started out with.

61
00:04:07.942 --> 00:04:12.479
所以我希望它基本上会在编译时为我重写代码。
And so my hope is that it will basically
rewriting my code for me at compile time.

62
00:04:12.479 --> 00:04:16.086
我认为一个真正有趣的事情将会发生在网络上
I think one of the really interesting
things that's going to happen to the web

63
00:04:16.086 --> 00:04:19.584
在接下来的几年里，也就是在所有事情发生之前
over the next kinda few years, which
is before everything was happening in

64
00:04:19.584 --> 00:04:22.660
浏览器，比如我们在构建管道中可以做多少事情？
the browser, like how much stuff
can we do in the build pipeline?

65
00:04:22.660 --> 00:04:24.519
我们可以做多少事情，多少优化？
How many things,
how many optimizations can we make?

66
00:04:24.519 --> 00:04:29.629
我们之前看到了优化的JS，现在你可以再次看到它了。
We saw optimized JS earlier,
you can see it again now.

67
00:04:29.629 --> 00:04:33.680
你可以看到这些实际上是无法区分的。
You can see these are effectively
indistinguishable.

68
00:04:33.680 --> 00:04:36.930
代码稍有不同，因为我们重写了它。
The code is slightly different
because like we rewrote it.

69
00:04:36.930 --> 00:04:40.865
但我从原始代码开始，我使用了Babel插件，
But I started with the original code,
I used the babel plugin,

70
00:04:40.865 --> 00:04:44.600
我仍然有我的50千字节的储蓄，对吧，太好了。
I still get to have my 50
kilobyte savings, right great.

71
00:04:44.600 --> 00:04:47.939
好吧，但这里还有其他罪犯，
All right, but
there are some other culprits in here,

72
00:04:47.939 --> 00:04:51.189
就像我们都能看到房间里的大象一样。
like we can all see
the elephant in the room here.

73
00:04:51.189 --> 00:04:52.110
现在是谁的问题？
Who's the problem right now?

74
00:04:53.470 --> 00:04:58.334
Codemirror是问题所在，codemirror正在解决
Codemirror is the problem,
codemirror is accounting for

75
00:04:58.334 --> 00:05:04.209
我的标准尺寸，甚至我的js尺寸，狮子分享。
of my par size, or
even my js size, the lions share.

76
00:05:04.209 --> 00:05:08.100
是162千字节，gzip 53，对。
It's pars 162 kilobytes, gzip 53, right.

77
00:05:08.100 --> 00:05:13.309
这又一次，实际上就像我捆绑的三分之一，对吧。
That is again, effectively like
a third of my bundle, right.

78
00:05:13.309 --> 00:05:18.069
再次，如果他们从来不点击编辑，他们将永远不会使用这个代码。
And again, if they never click on edit
they will never even use this code.

79
00:05:18.069 --> 00:05:21.629
他们会交税来赦免它，他们会支付下载它的税，
They will pay the tax to parson it,
they will pay the tax of downloading it,

80
00:05:21.629 --> 00:05:25.629
他们永远不会真正使用它，而且我的应用程序会快得多，而且
they will never actually use it, and
my app would be a lot snappier and

81
00:05:25.629 --> 00:05:27.519
如果我没有这样做，加载速度会更快。
quicker to load if I just didn't do this.
