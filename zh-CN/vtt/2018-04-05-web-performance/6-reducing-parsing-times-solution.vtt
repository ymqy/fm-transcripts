WEBVTT

1
00:00:00.014 --> 00:00:03.620
&gt；&gt；Steve Kinney：所以，基本上就是优化-js试图找出做的方法
&gt;&gt; Steve Kinney: So yeah, basically
optimize-js tries to figure out ways to do

2
00:00:03.620 --> 00:00:05.599
本来会很懒的事情。
things that would have been lazy.

3
00:00:05.599 --> 00:00:07.956
然后是急切解析，跳到急切解析，
And then eager parsed,
to just skip to the eager parsing,

4
00:00:07.956 --> 00:00:09.314
因为做一次更快。
because doing it once is faster.

5
00:00:09.314 --> 00:00:12.141
所以我们可以得到一些不同的图书馆，
So we can grab some different libraries,

6
00:00:12.141 --> 00:00:15.676
拉入jQuery。&gt；&gt；steve kinney：和
pull in jQuery.
&gt;&gt; Steve Kinney: And

7
00:00:15.676 --> 00:00:20.429
您可以看到，在没有优化的情况下，解析花费了16毫秒。
you can see that without optimize,
it took 16 milliseconds to parse.

8
00:00:20.429 --> 00:00:24.969
使用优化，我们减少了一毫秒，或者说几乎减少了两毫秒。
With optimize, we shaved a millisecond
off, or almost two milliseconds off.

9
00:00:24.969 --> 00:00:29.820
你可以抓取Lodash，同样是两毫秒。
You can grab Lodash,
again two milliseconds.

10
00:00:29.820 --> 00:00:35.979
如果我们的目标是把所有东西都放在屏幕上，这是一个库，对吧？
And if we're aiming for getting everything
on the screen, this is one library, right?

11
00:00:35.979 --> 00:00:38.939
继续前进可能真的很有用
It could be really useful to go ahead and

12
00:00:38.939 --> 00:00:41.079
我们刮掉的每一毫秒都很重要。
every one of these milliseconds
that we shave off is important.

13
00:00:41.079 --> 00:00:47.536
这甚至还不是我们的应用程序代码。&gt；&gt；Steve Kinney：ThreeJS
This is not even our application code yet.
&gt;&gt; Steve Kinney: ThreeJS

14
00:00:47.536 --> 00:00:52.113
是不是快了5毫秒，对吧？
is 5 milliseconds faster, right?

15
00:00:52.113 --> 00:00:54.929
所以你说，是的，一直在用它，对吧？
So you were like, yeah,
use it all the time, right?

16
00:00:54.929 --> 00:00:57.609
但这些都是人为的例子，对吧？
But these are, again,
contrived examples, right?

17
00:00:57.609 --> 00:00:59.109
有人在其他浏览器上尝试过吗？
Did anyone try it in other browsers?

18
00:01:00.109 --> 00:01:03.969
你的一些发现是什么？&gt；&gt；学生：Chrome的速度要快得多
What was some of your findings?
&gt;&gt; Student: Chrome is way faster with

19
00:01:03.969 --> 00:01:06.870
jQuery而不是Firefox。&gt；&gt；Steve Kinney：是的，每个人都是
jQuery than Firefox.
&gt;&gt; Steve Kinney: Yeah, each one is

20
00:01:06.870 --> 00:01:09.549
以不同的方式实现，并且在那里做出了一些不同的决定。
implemented differently, and there's some
different decisions that are made there.

21
00:01:10.789 --> 00:01:14.340
所以重要的是不要只测试Chrome，但是
And so it's important to not be
the person only testing Chrome, but

22
00:01:14.340 --> 00:01:16.950
查看其他浏览器。
to look at other browsers as well.

23
00:01:16.950 --> 00:01:19.989
因为这就是一些与测量有关的性能问题
Because this is where some of
the performance stuff with the measuring

24
00:01:19.989 --> 00:01:22.120
变得极其重要。
becomes incredibly important.

25
00:01:22.120 --> 00:01:26.250
所以如果我们拿一堆图书馆，我们运行它，
So if we take a bunch of libraries,
and we run it through,

26
00:01:26.250 --> 00:01:29.180
我们可以在Chrome 55中看到这一点。
we can see that In Chrome 55.

27
00:01:29.180 --> 00:01:33.200
一般来说，在大多数情况下都有明显的改善
Generally speaking there is
a noticeable improvement across most of

28
00:01:33.200 --> 00:01:33.900
应用程序。
the applications.

29
00:01:33.900 --> 00:01:36.939
你就像，运送它，是的，让我们把它放在我们的Webpack构建管道中。
You're like, ship it, yeah, let's put
it in our Webpack build pipeline.

30
00:01:36.939 --> 00:01:39.283
一切都很好，这会很棒的，
Everything's great,
this is gonna be wonderful,

31
00:01:39.283 --> 00:01:42.271
无处不在。&gt；&gt；steve kinney：但是
use it everywhere.
&gt;&gt; Steve Kinney: But

32
00:01:42.271 --> 00:01:47.700
跨库的故事在Edge 14上就不那么简单了，对吗？
the story across libraries is not as
straightforward on Edge 14, right?

33
00:01:48.969 --> 00:01:55.575
我们可以看到，是的，ImmutableJS，有30%的改进，
We can see that, yeah, ImmutableJS,
there's a 30% improvement,

34
00:01:55.575 --> 00:02:01.650
但是如果你使用的是PouchDB，那么它会慢32%，对吧？
but if you're using PouchDB,
well it's 32% slower, right?

35
00:02:01.650 --> 00:02:05.109
如果我们只是遵循这些规则，把这些括号放在每个地方。
And if we just follow these rules,
put these parentheses everywhere.

36
00:02:05.109 --> 00:02:06.469
您可能会使应用程序变慢。
You could be making applications slower.

37
00:02:06.469 --> 00:02:07.959
您可以使应用程序更快，
You can be making applications faster,

38
00:02:07.959 --> 00:02:10.439
这就是为什么测量非常重要。
so that's why it's really
important to measure.

39
00:02:10.439 --> 00:02:15.206
如果我们看一下Safari，我们会得到一个略有不同的故事
We get a slightly different story if
we look in Safari where it's almost

40
00:02:15.206 --> 00:02:17.836
普遍是个坏主意，[笑]对吧？
universally a bad idea, [LAUGH] right?

41
00:02:17.836 --> 00:02:20.759
在大多数情况下，它会使事情变得更慢。
In most cases it is making stuff slower.

42
00:02:20.759 --> 00:02:26.034
这归结到所有这些浏览器的实现细节，对吗？
That comes down to the implementation
details of all of these browsers, right?

43
00:02:26.034 --> 00:02:26.907
所以再一次
And so again,

44
00:02:26.907 --> 00:02:32.120
这个故事的寓意是确保你在测量，对吗？
the kind of moral of the story here is to
make sure that you're measuring, right?

45
00:02:32.120 --> 00:02:35.579
并希望看到这些事情的实际影响和影响。
And looking to see what the actual impacts
and implications of these things are.

46
00:02:35.579 --> 00:02:39.590
而不是仅仅遵循我告诉你的一些规则，或者
Rather than just following
some rule that I told you, or

47
00:02:39.590 --> 00:02:40.789
一些类似的东西。
something along those lines.

48
00:02:40.789 --> 00:02:42.939
用健康的怀疑态度对待我，并且
Treat me with a healthy
dose of skepticism, and

49
00:02:42.939 --> 00:02:44.914
从我嘴里说出来的每一个字，对吗？
every word that's coming out of my mouth,
right?

50
00:02:44.914 --> 00:02:48.711
[笑]把这些话拿来和你的申请做对比，
[LAUGH] Take those words,
measure them against your application,

51
00:02:48.711 --> 00:02:50.937
那就做个决定。&gt；&gt；学生2：我可以问一个简短的问题吗？
then make a decision.
&gt;&gt; Student2: Can I ask a quick question?

52
00:02:50.937 --> 00:02:51.825
&gt；&gt；steve kinney：是的。
&gt;&gt; Steve Kinney: Yeah.

53
00:02:51.825 --> 00:02:52.646
&gt；&gt；学生2：当我们在做
&gt;&gt; Student2: When we're doing

54
00:02:52.646 --> 00:02:55.139
函数声明并将它们包装在括号中。
function declarations and
wrapping them in parens.

55
00:02:55.139 --> 00:03:00.027
如果你使用的是函数表达式，这会有什么不同吗？
If you're using a function expression
instead does that make a difference here?

56
00:03:00.027 --> 00:03:00.560
&gt；&gt；steve kinney：我认为，
&gt;&gt; Steve Kinney: I think,

57
00:03:00.560 --> 00:03:03.156
我保留在这件事上犯错的权利，但是
I reserve the right to
be wrong about this, but

58
00:03:03.156 --> 00:03:05.828
我相信那些也是懒惰的部分。
I believe that those
are also still lazy parts.

59
00:03:05.828 --> 00:03:08.784
但是IFFE，例如那些立即调用的函数表达式，
But IFFEs, for instance, those
immediately invoked function expressions,

60
00:03:08.784 --> 00:03:11.092
我们将它们放在括号中，并立即调用它们。
we wrap them in the parentheses,
and immediately call them.

61
00:03:11.092 --> 00:03:14.519
例如，这些都是开箱即用的急切解析，对吧？
Those, for instance, are eagerly
parsed right out of the box, right?

62
00:03:14.519 --> 00:03:17.269
所以有不同的用例，还有另一种
So there is different use cases,
and the other kind of again

63
00:03:17.269 --> 00:03:20.735
我现在要做的免责声明是很多这些规则的改变，对吗？
disclaimer that I'm gonna make now is
a lot of these rules change, right?

64
00:03:20.735 --> 00:03:23.689
Chrome团队正在努力让这个东西变得更好，对吗？
The Chrome team is working on
making this stuff better, right?

65
00:03:23.689 --> 00:03:26.389
这就是为什么要及早测量，经常测量，对吧？
Which is why measure early,
measure often, right?

66
00:03:26.389 --> 00:03:29.795
当我们到达实际的编译引擎和
When we get to the actual
compiling engine and

67
00:03:29.795 --> 00:03:33.319
它所做的优化，对吧？
the optimizations that it makes, right?

68
00:03:33.319 --> 00:03:36.836
那是一个移动的目标，对，现在有些东西很慢，
That's a moving target, right,
there are things that are slow now,

69
00:03:36.836 --> 00:03:38.451
当ES6最初问世的时候。
when ES6 originally came out.

70
00:03:38.451 --> 00:03:42.250
所有用于浏览器的ES6内容都比ES5内容慢。
All of the ES6 stuff that was for
the browser was slower than the ES5 stuff.

71
00:03:42.250 --> 00:03:46.039
所以很容易，读一篇博客文章，然后
So it would be very easy to
,read a blog post then and

72
00:03:46.039 --> 00:03:48.639
相信ES6天生就比较慢。
believe that ES6 was inherently slower.

73
00:03:48.639 --> 00:03:52.389
它之所以慢，是因为浏览器发明者有十年的时间来优化。
It was slower because browser
inventors had ten years to optimize.

74
00:03:52.389 --> 00:03:55.240
并找出ES5材料的所有边缘情况
And figure out all the edge cases for
the ES5 stuff and

75
00:03:55.240 --> 00:03:57.560
ES6的东西是全新的，对吧？
the ES6 stuff was brand new, right?

76
00:03:57.560 --> 00:04:00.840
三年后，这不再是真的了，对吗？
Three years later,
that is not true anymore right?

77
00:04:00.840 --> 00:04:03.710
因为浏览器供应商正在尝试改进和
Because the browser vendors
are attempting to get better and

78
00:04:03.710 --> 00:04:05.090
用这些东西更快。
faster with these things.

79
00:04:05.090 --> 00:04:07.729
所以一般来说，所有这些东西都是一个移动的目标。
So generally speaking,
all these things are a moving target.

80
00:04:07.729 --> 00:04:11.819
这就是为什么我一直说，在每张幻灯片之间测量几乎是一个节拍。
And that's why I keep saying measure
almost a beat in between every slide.

81
00:04:13.090 --> 00:04:17.540
如果你真的想用这个，如果你的研究进展顺利。
If you did want to use this,
if your research goes well.

82
00:04:17.540 --> 00:04:20.389
您可以看到，您在各个方面都获得了性能提升。
And you can see that you have
performance gains across the board.

83
00:04:20.389 --> 00:04:21.949
还有Webpack插件，
There are also Webpack plugins,

84
00:04:21.949 --> 00:04:25.019
我们也可以将这个插入到您的构建管道中。
we can just insert this into
your build pipeline as well.

85
00:04:26.620 --> 00:04:27.795
只是一些其他的快速，
Just some other quick,

86
00:04:27.795 --> 00:04:32.552
关于解析的可口笔记。&gt；&gt；Steve Kinney：只要我们有
tasty notes on parsing.
&gt;&gt; Steve Kinney: Whenever we have

87
00:04:32.552 --> 00:04:35.415
位于另一个函数内部的函数，
a function that is inside
of another function,

88
00:04:35.415 --> 00:04:39.399
有效地总是被懒惰地解析，对吗？
that is effectively always going
to be lazily parsed, right?

89
00:04:39.399 --> 00:04:44.540
所以如果我们把它移出，它可以在一个单独的拍摄中被解析，
So if we move that out, it can get
parsed in a separate take on it,

90
00:04:44.540 --> 00:04:47.879
在这种情况下，它将获得更好的性能，对吗？
in this case it will get
better performance right?

91
00:04:47.879 --> 00:04:51.480
你可以争辩这是不是意味着，让我们休息15分钟，
You can argue does that mean,
let's take a 15 minute break,

92
00:04:51.480 --> 00:04:55.209
你遍历了巨大的代码库并重构了所有东西吗？
you go through your giant code base and
refactor everything?

93
00:04:55.209 --> 00:04:57.240
可能不是，有一些工具可以帮助你，
Probably not, there are tools
that can help you with this,

94
00:04:57.240 --> 00:05:01.000
我们将在最后讨论，但同样，只是一些需要考虑的东西。
that we'll cover at the end, but again,
just something to kinda think about.
