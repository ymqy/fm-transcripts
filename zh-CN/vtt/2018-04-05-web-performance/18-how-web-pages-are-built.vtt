WEBVTT

1
00:00:02.370 --> 00:00:05.046
&gt；&gt；Steve Kinney：我们编写的JavaScript代码必须在浏览器中执行。
&gt;&gt; Steve Kinney: The JavaScript code that
we write has to execute in the browser.

2
00:00:05.046 --> 00:00:09.250
为了做到这一点，我们需要知道一点关于网页是如何创建和
In order that, we need to know a little
bit about how web pages are created and

3
00:00:09.250 --> 00:00:12.119
它们实际上是如何呈现的，以及它们如何使用界面更新。
how they're actually rendered, and
how they use interface updates.

4
00:00:12.119 --> 00:00:14.599
所以让我们来谈谈网页是如何诞生的。
So let's talk e a little bit
about how web pages are born.

5
00:00:16.629 --> 00:00:21.327
同样，第一步是浏览器向服务器发送GET请求，
Again, the step one is the browser goes
ahead sends get request to a server,

6
00:00:21.327 --> 00:00:23.219
他说，嘿，给我一个网页。
he says, hey, give me a webpage.

7
00:00:25.039 --> 00:00:27.579
我们得到回复，猜猜里面有什么？
We get back a response and
guess what it has in it?

8
00:00:27.579 --> 00:00:31.030
网页，就像典型的HTML一样。
A webpage, like typically HTML.

9
00:00:31.030 --> 00:00:35.106
HTML只是文本的一个很大的刺，可能还有我们需要的其他东西
The HTML is just a big sting of text and
likely has other things that we need to

10
00:00:35.106 --> 00:00:39.021
比如样式表、JavaScript文件等等，对吗？
get like Style Sheets, JavaScript files,
so on and so forth, right?

11
00:00:39.021 --> 00:00:42.500
成为我们正在创建的网页的基础。
Becomes the basis of the webpage
that we're creating.

12
00:00:42.500 --> 00:00:44.859
HTML还需要解析和
That HTML also needs to parsed and

13
00:00:44.859 --> 00:00:47.710
弄清楚这个页面的实际结构是什么，对吧？
figure out like what is the actual
structure of this page, right?

14
00:00:47.710 --> 00:00:50.490
所以我们把HTML解析成一个叫做文档的东西
So we take the HTML and we pars it
into this thing called the document

15
00:00:50.490 --> 00:00:54.789
对象模型，DOM，如果你愿意的话，每个人的朋友。
object model, the DOM if you will,
everyone's friend.

16
00:00:54.789 --> 00:00:58.060
它基本上是从文档开始的页面表示。
Which is basically the representation
of the page starting with the document.

17
00:00:58.060 --> 00:01:01.640
我们得到了HTML标记，头部和主体，等等。
We got the HTML tag, the head and
the body, so on and so forth.

18
00:01:01.640 --> 00:01:04.689
这是一个像大树一样的结构
It's this big tree like structure

19
00:01:04.689 --> 00:01:06.939
这是我们拥有的网页的表示。
that is a representation of
the webpage that we have.

20
00:01:08.069 --> 00:01:11.689
现在前面的例子中，我们看到了获取一些CSS的链接。
Now in the previous example,
we saw that link to go get some CSS.

21
00:01:11.689 --> 00:01:13.274
我们也需要去拿那个。
We need to go fetch that as well.

22
00:01:13.274 --> 00:01:16.031
这显然是一种不同的语言，如果你愿意的话，对吧？
That's obviously a different language,
if you will, right?

23
00:01:16.031 --> 00:01:18.212
而这需要某种程度上的创造，
And that needs to kind of get created,

24
00:01:18.212 --> 00:01:21.430
找出此页面的所有样式规则是什么？
figure out what are all
the styling rules for this page?

25
00:01:21.430 --> 00:01:26.337
它变成了另一个非常相似的原型，叫做CSS对象
And that gets turned into this other very
similar archetype called the CSS object

26
00:01:26.337 --> 00:01:27.109
模特。
model.

27
00:01:27.109 --> 00:01:30.680
所以级联风格的形状对象模型，这是一个大嘴巴。
So the cascading style shape object model,
that's a mouthful.

28
00:01:30.680 --> 00:01:33.991
它基本上就是一棵巨大的树，包含了所有的规则
Which is just basically a giant
tree of all the rules for

29
00:01:33.991 --> 00:01:35.581
我们的页面应该是什么样子。
how our page should look.

30
00:01:35.581 --> 00:01:41.390
在一种情况下，我们有一个完整的网页结构或
So we have in one case is we have
an entire structure of how the web page or

31
00:01:41.390 --> 00:01:43.855
Web应用程序布局。
web application is laid out.

32
00:01:43.855 --> 00:01:46.450
我们还有另一个
And we've got this other one for

33
00:01:46.450 --> 00:01:51.390
一套关于不同事物应该看起来如何不同的规则，对吧？
a set of rules on how different
things should look, right?

34
00:01:51.390 --> 00:01:54.590
这不一定是每个特定元素看起来的样子，
That's not necessarily how
each particular element looks,

35
00:01:54.590 --> 00:01:56.936
但我们要去告诉所有的段落标签。
but we're gonna go tell
all paragraph tags.

36
00:01:56.936 --> 00:01:59.770
所有的事情都很酷，对吧？
All things with the class of cool, right?

37
00:01:59.770 --> 00:02:01.405
这不是语义上的，但我们会遵循它。
That's not semantic, but we'll go with it.

38
00:02:01.405 --> 00:02:04.010
以及我们是如何制定这些规则的。
And how we have all these rules.

39
00:02:04.010 --> 00:02:05.283
我们有这样的世界状况，对吧？
We have that state of the world, right?

40
00:02:05.283 --> 00:02:08.856
所以为了弄清楚页面看起来是什么样子，我们必须获取状态
So in order to figure out what the page
looks like we have to take the state of

41
00:02:08.856 --> 00:02:10.873
世界和关于世界的规则
the world and
the rules about the world and

42
00:02:10.873 --> 00:02:14.780
我们把它们放在一个叫做渲染树的东西里。
we put them together into this
thing called the render tree.

43
00:02:14.780 --> 00:02:17.456
现在你会注意到渲染树，比如，我们不再有那个HTML了，
Now the render tree you'll notice like,
we don't have that HTML anymore and

44
00:02:17.456 --> 00:02:18.620
我们没有头，对吧？
we don't have the head, right?

45
00:02:18.620 --> 00:02:22.074
只有那些部件才会真正出现在页面上，对吧？
It's only the parts that will
actually show up on the page, right?

46
00:02:22.074 --> 00:02:27.323
因为我们不需要担心如何设计我们不会展示的东西，
Because we don't need to worry about how
to style things we're not going to show,

47
00:02:27.323 --> 00:02:27.865
对吧？
right?

48
00:02:27.865 --> 00:02:33.622
所以基本上我们页面的结构以及计算规则。
So basically the structure of our
page along with the computive rules.

49
00:02:33.622 --> 00:02:36.973
它把所有的CSS和所有的规则都搞清楚了
It take all the CSS and
all the rules and figure it all out and

50
00:02:36.973 --> 00:02:41.287
告诉我DOM这一部分的给定元素应该是什么样子，以及
tell me what this given element on this
part of the DOM should look like, and

51
00:02:41.287 --> 00:02:44.800
另一个给定的元素，等等。
this other given element,
so on and so forth.

52
00:02:44.800 --> 00:02:45.992
所以渲染树，再一次，
So the render tree, again,

53
00:02:45.992 --> 00:02:48.741
与页面上的可见对象具有一对一的映射。
has a one-to-one mapping with
the visible objects on the page.

54
00:02:48.741 --> 00:02:52.146
可以将多个规则应用于同一元素。
You can have multiple rules
applied to the same element.

55
00:02:52.146 --> 00:02:55.770
可以将一个规则应用于多个元素。
You could have one rule
applied to multiple elements.

56
00:02:55.770 --> 00:02:56.789
当涉及到渲染树时，
When it comes to the render tree,

57
00:02:56.789 --> 00:02:59.620
这里是所有要显示在页面上的内容。
it's here are all the things that
are gonna show up on the page.

58
00:02:59.620 --> 00:03:02.050
这是他们应该看起来的样子，非常酷。
Here's what they should look like,
very cool.

59
00:03:02.050 --> 00:03:07.009
任何隐藏的东西都不会显示出来，就像你没有显示一样，
Things that anything hidden is not
gonna show like if you do display none,

60
00:03:07.009 --> 00:03:10.229
这不在渲染树上，因为我们不显示它。
that's not on the render tree,
cuz we're not displaying it.

61
00:03:10.229 --> 00:03:11.294
头的事情不会发生。
Things with the head are not gonna happen.

62
00:03:11.294 --> 00:03:14.870
但是像伪元素这样的东西，嘿，把另一个元素放在前面
But things like pseudo elements like,
hey, put this other element before

63
00:03:14.870 --> 00:03:18.060
这另一个，我们写在CSS中，那是在渲染树上。
this other one and we write that in CSS,
that is on the render tree.

64
00:03:18.060 --> 00:03:19.466
所以有点不同
So it's a little bit different.

65
00:03:19.466 --> 00:03:21.165
我们需要把这一切都搞清楚。
And we need to figure that all out.

66
00:03:21.165 --> 00:03:24.909
我们计算出来的过程叫做风格计算。
And the process that we figure that
out is called style calculation.

67
00:03:24.909 --> 00:03:27.729
浏览器查看所有样式和所有元素。
The browser looks at all the styles and
all of the elements.

68
00:03:27.729 --> 00:03:30.300
它找出了应用于这个给定元素的样式。
It figures out what styles
apply to this given element.

69
00:03:30.300 --> 00:03:31.629
适用什么规则？
What rules apply?

70
00:03:31.629 --> 00:03:34.037
好的，两条规则改变了背景颜色，
Okay, two rules are changing
out the background color,

71
00:03:34.037 --> 00:03:35.400
哪一个赢了，对吧？
which one of these win, right?

72
00:03:35.400 --> 00:03:38.539
把它看起来的一切都搞清楚了。
And kind of figures out
everything about how it looks.

73
00:03:38.539 --> 00:03:41.329
所以再一次，这确实导致了两件事。
So again,
this really results in two things.

74
00:03:41.329 --> 00:03:46.688
例如，应用哪些规则，如果两个规则定义相同的属性两次，
Like, which rules apply and if two rules
are defining the same property twice,

75
00:03:46.688 --> 00:03:50.222
哪一个赢了，哪一个有更高的特异性？
which one wins,
which one has higher specificity?

76
00:03:50.222 --> 00:03:53.449
如果它们具有相同的特异性，那么哪个更晚？
If they have the same specificity,
which one came later?

77
00:03:53.449 --> 00:03:54.539
等等。
So on and so forth.

78
00:03:54.539 --> 00:03:57.956
浏览器会发现所有这些，你只要给它一个基本的结构，
The browser will figure that all out,
you just basically give it a structure,

79
00:03:57.956 --> 00:04:00.151
给它一些关于结构的规则，[声音]。
give it some rules about that structure,
[SOUND].

80
00:04:00.151 --> 00:04:03.969
出现一个渲染托盘，准备显示在页面上。
Out comes a render tray ready
to be shown onto the page.

81
00:04:03.969 --> 00:04:06.665
这并不一定会在页面上显示出来，但是
That doesn't necessarily
show it on the page, but

82
00:04:06.665 --> 00:04:09.747
这就像是这一页上的一组说明？
that is like a set of instructions
on what's on this page?

83
00:04:09.747 --> 00:04:10.939
它看起来像什么？
What does it look like?

84
00:04:10.939 --> 00:04:16.132
我们必须记住的另一件事是弄清楚哪些规则适用？
The other thing that we have to keep in
mind is figuring out which rules apply?

85
00:04:16.132 --> 00:04:18.870
因为这可能有点棘手，对吧？
Cuz it can be a little bit tricky, right?

86
00:04:18.870 --> 00:04:23.920
我们可以让CSS中的所有P规则适用于段落，很好。
We could have stuff like all P rules
in CSS apply to the paragraphs, fine.

87
00:04:23.920 --> 00:04:28.372
我们也可以有一些稍微复杂一点的，
We could also have some
a slightly more complicated one,

88
00:04:28.372 --> 00:04:31.000
就像第n个孩子4n-1，对吗？
like nth child 4n- 1, right?

89
00:04:31.000 --> 00:04:33.014
这需要更多的工作才能弄明白。
That takes a little more
work to figure out.

90
00:04:33.014 --> 00:04:35.740
[笑]这并不像这样简单，你是一个段落还是
[LAUGH] That's not as simple as like,
are you a paragraph or

91
00:04:35.740 --> 00:04:37.290
任何沿着这条线的东西。
anything along those lines.

92
00:04:37.290 --> 00:04:39.473
我们得做些工作才能弄明白，对吧？
We have to do work to figure that out,
right?

93
00:04:39.473 --> 00:04:41.694
你几乎可以看到这里的发展方向，
You can almost see where
this is going here,

94
00:04:41.694 --> 00:04:46.079
这是我们必须做更多工作的事情，往往需要更长的时间。
which is things where we have to do more
work tend to take a little bit longer.

95
00:04:46.079 --> 00:04:48.608
所以你做的选择器越复杂，
So the more complicated you
end up making your selectors,

96
00:04:49.990 --> 00:04:52.399
整个过程需要的时间就越长。
the longer this whole
process is going to take.

97
00:04:52.399 --> 00:04:54.949
看起来电脑很快而且所有东西都是免费的，
It seems like computers are fast and
everything is free,

98
00:04:54.949 --> 00:04:58.180
但事实并非如此。
but that's not really the case.

99
00:04:58.180 --> 00:05:01.110
我们做的每一件事都需要一些时间，
Everything we go ahead and
do is gonna take some amount of time,

100
00:05:01.110 --> 00:05:03.985
而且做这件事需要的工作越多，花费的时间也就越多。
and the more work it takes to do it,
the more time it takes.

101
00:05:03.985 --> 00:05:06.732
所以简单的经验法则，类名是超级简单的。
So easy rule of thumb,
class names are super simple.

102
00:05:06.732 --> 00:05:11.363
比如，这有页眉或页脚之类的类吗？
Like, does this have the class of
header or footer, or whatever?

103
00:05:11.363 --> 00:05:12.915
这是一个是或不是的问题。
That's a yes or no question.

104
00:05:12.915 --> 00:05:15.985
这很容易弄明白。
That's very easy to figure out.

105
00:05:15.985 --> 00:05:20.394
但是当我们到达侧边栏页面的时候，
But when we get to the point where
it's going off the page of sidebar,

106
00:05:20.394 --> 00:05:25.579
菜单项的第一个后代，第n个孩子，这需要更长的时间。
the first descendant of menu-item,
the nth-child, that takes a lot longer.

107
00:05:25.579 --> 00:05:30.322
因此，如果可能，您总是可以加快计算所有样式和
So when possible you can always speed up
the time of calculating all the styles and

108
00:05:30.322 --> 00:05:34.449
通过保持尽可能简单来匹配元素，对吗？
matching to the elements by keeping
it as simple as possible, right?

109
00:05:34.449 --> 00:05:38.197
使用类名定义它的任何类型的系统都是BEM或CSS，
Any kind of system where you define it
with class names would be BEM or CSS,

110
00:05:38.197 --> 00:05:40.077
这真的无关紧要，对吧？
it doesn't really matter, right?

111
00:05:40.077 --> 00:05:43.925
但是如果你可以通过定义所有这些状态和类来做到这一点，
But if you can do this by defining
all those states and classes,

112
00:05:43.925 --> 00:05:47.569
总比耍花招快，对吧？
it is always gonna be faster
than doing trickery, right?

113
00:05:47.569 --> 00:05:50.639
因为浏览器读取选择器，如果有一个选择器很酷，
Because the browsers they read the
selectors, if there's one selector cool,

114
00:05:50.639 --> 00:05:51.240
他们准备好出发了。
they're ready to go.

115
00:05:51.240 --> 00:05:53.656
否则，他们必须做更多的计算。
Otherwise, they have to
do more computation.

116
00:05:53.656 --> 00:05:57.120
选择器越少，速度就越快，对吧？
The less selectors,
the faster is going to be, right?

117
00:05:57.120 --> 00:06:01.810
它可以是这样的东西，我需要每隔一排，对吗？
And it could be stuff like well,
I need every fourth row, right?

118
00:06:01.810 --> 00:06:04.560
很酷，但它确实提出了问题。
Very cool, but it does raise the question.

119
00:06:04.560 --> 00:06:06.620
如果你需要用它，就用它。
If you need to use it, use it.

120
00:06:06.620 --> 00:06:10.052
但是如果你说，嘿，我正在从服务器生成这个巨大的表，
But if you're like, hey, I'm generating
this giant table from the server,

121
00:06:10.052 --> 00:06:13.184
服务器是否可以为每四行添加正确的类名，对吗？
can the server put the right class
name on for every fourth row, right?

122
00:06:13.184 --> 00:06:16.514
很酷，然后你可以加快用户浏览器必须做的事情，或者
Cool, then you can speed up what
the user's browser has to do, or

123
00:06:16.514 --> 00:06:19.725
如果你运输的是反应堆，角，或余烬，而且
if you're shipping reactor,
angular, or ember anyway, and

124
00:06:19.725 --> 00:06:23.862
你有一些逻辑，你可以把类放在每隔四行，对吗？
you have some logic in there and you can
put the class on every fourth row, right?

125
00:06:23.862 --> 00:06:25.550
你已经在经历这个过程了。
You're already going through that process.

126
00:06:25.550 --> 00:06:28.149
你最好在那里做，而不是加载额外的工作
You might as well do it there
than loading extra work

127
00:06:28.149 --> 00:06:29.949
到选择器引擎上来找出它。
onto the selector engine to figure it out.

128
00:06:31.149 --> 00:06:33.899
所以我们设计风格，找出适用的规则，然后
So we style,
we figure out what the rules apply, and

129
00:06:33.899 --> 00:06:36.221
然后我们试着把它们放在一起。
then we kind of try to
put them all together.

130
00:06:36.221 --> 00:06:40.483
选择器匹配只需要，好的，这是n中的第四行加1减4。
Selector matching just takes, okay, this
is the fourth row in the n plus 1 minus 4.

131
00:06:40.483 --> 00:06:45.774
它确实有一类非常重要的表行，并计算所有这些。
It does have a class of very important
table row and figuring all that.

132
00:06:45.774 --> 00:06:47.425
当多个选择器应用于一个元素时，
When multiple selectors
apply to an element,

133
00:06:47.425 --> 00:06:49.415
浏览器需要找出谁赢了。
the browser needs to figure out who wins.

134
00:06:49.415 --> 00:06:52.795
显然，加快速度的最快方法就是不去做。
And obviously, the fastest way to
speed that up is not to do it.

135
00:06:54.269 --> 00:06:58.915
所以再一次，如果你可以通过某种方式来命名你的
So again, if you can do this by having
some kind of way that you're naming your

136
00:06:58.915 --> 00:07:03.418
CSS类对所有这些进行描述并测试对象的实际状态，
CSS classes that figures all that and
tests the actual state of the object,

137
00:07:03.418 --> 00:07:05.509
会更快，对吧？
it's going to be faster, right?

138
00:07:05.509 --> 00:07:10.711
我会非常诚实的，尽管，&gt；&gt；steve kinney：风格失效，
I'm gonna be really honest though like,
&gt;&gt; Steve Kinney: Style invalidation,

139
00:07:10.711 --> 00:07:12.560
穿上或脱下东西并不重要。
taking stuff on or
off doesn't matter as much.

140
00:07:12.560 --> 00:07:15.322
这将永远是一个相对较短的部分。
And this will always be
a relatively short part.

141
00:07:15.322 --> 00:07:19.516
如果你注意到，如果你测量计算样式是一个非常重要的部分，
If you notice, if you measure that
calculating styles is a very big part,

142
00:07:19.516 --> 00:07:21.829
当您等待加载初始页面时。
as you wait for the initial page to load.

143
00:07:21.829 --> 00:07:26.992
这些是要寻找的地方，当我们看到其他一些地方时，我的怀疑
These are the places to look for,
my suspicion when we saw some of the other

144
00:07:26.992 --> 00:07:32.670
正在进行的事情是，它可能不是获得初始页面的最长时间。
things going on is it's probably not
the longest for getting the initial page.

145
00:07:32.670 --> 00:07:36.483
解析JavaScript可能是最长的，但有很多这样的规则
Parsing the JavaScript is probably the
longest, but a lot of the kind of rules

146
00:07:36.483 --> 00:07:40.591
从渲染以及如何优化渲染性能，都与以下事实有关
from rendering and how to optimize render
performance, has to do with the fact that

147
00:07:40.591 --> 00:07:44.129
JavaScript代码可能会在第一次加载后更改页面。
JavaScript code is likely gonna change
the page after that first load.

148
00:07:44.129 --> 00:07:46.682
我们怎么做事情，我们怎么做重复的事情，对吗？
And how do we do stuff,
how do we do repeated stuff, right?

149
00:07:46.682 --> 00:07:48.250
如果你想到一部动画，
If you think about an animation,

150
00:07:48.250 --> 00:07:52.250
动画就像他们可能会多次改变页面，对吧？
an animation is like they're changing
the page many times possibly, right?

151
00:07:52.250 --> 00:07:55.946
就像很多事情都归结为一个页面已经被加载了，但这是值得的
And like a lot of it comes down to one
page has been loaded, but it's worthwhile

152
00:07:55.946 --> 00:07:59.816
测量是否在初始加载时看到，计算样式是永远需要的。
measuring if you see on initial load,
calculating the styles is taking forever.

153
00:07:59.816 --> 00:08:03.480
这些是要下去的路径，或者您确实有非常复杂的选择器。
These are the kind of paths to go down or
you do have very complicated selectors.

154
00:08:03.480 --> 00:08:06.259
你是不是有一堆不用的CSS，对吧？
Do you have a bunch of CSS
that you're not using, right?

155
00:08:06.259 --> 00:08:09.660
如果你有一堆不使用的CSS，我们仍然需要检查，对吗？
If you have a bunch of CSS that you're not
using, we still have to check that, right?

156
00:08:09.660 --> 00:08:14.319
将代码从代码库中取出将有助于解决这个问题，对吗？
Getting that code out of your code base
is going to help with that issue, right?

157
00:08:14.319 --> 00:08:17.600
我们稍后会看一些工具，比如自动化，所以
And we'll look at some tools later for
like automating that, so

158
00:08:17.600 --> 00:08:20.600
你不需要用手，看，CSS类。
you don't have to hand,
look, the CSS class.

159
00:08:20.600 --> 00:08:22.810
我想知道它是不是在任何元素上，对吗？
I wonder if it's on any elements, right?

160
00:08:22.810 --> 00:08:25.910
就像好运不会搞砸一样。
Like good luck not messing that up.

161
00:08:25.910 --> 00:08:30.535
因此，就像拥有某种自动化工具一样，它通常是非常有用的。
So like having some kind of like automated
tool it does it is usually really useful.

162
00:08:30.535 --> 00:08:34.198
因此，在失速计算部分的高水平是减少未使用的CSS的数量
So the high level on stall calculation
part is reduce the amount of unused CSS

163
00:08:34.198 --> 00:08:35.350
你要运输的。
the you're shipping.

164
00:08:35.350 --> 00:08:38.514
你拥有的风格越少，需要检查的东西就越少。
The less styles you have,
the less there is to check.

165
00:08:38.514 --> 00:08:41.485
并试图减少影响给定元素的样式的数量
And trying to reduce the number of
styles that effect a given element

166
00:08:41.485 --> 00:08:44.730
通过使用某种可以将内容归结为一个类的系统，对吗？
by using some kind of system that can
boil stuff down to one class, right?

167
00:08:44.730 --> 00:08:47.823
如果你能把这两件事做好，这两件事恰好是有用的
If you can pull those two things off,
those happen to be useful for

168
00:08:47.823 --> 00:08:49.633
还有很多其他的事情，对吧？
a number of other things too, right?

169
00:08:49.633 --> 00:08:54.123
它碰巧很有用，因为这样，不仅浏览器要做的事情更少，
It happens to be useful, cuz like, not
only is that less for the browser to do,

170
00:08:54.123 --> 00:08:57.879
但你通过电线发送的东西也少了，对吧？
but it's also less stuff you're
sending over the wire, right?

171
00:08:59.330 --> 00:09:05.179
对于很多东西来说，它也更容易管理自己的代码库。
It's also, for a lot of the stuff,
easier to manage your own code base.

172
00:09:05.179 --> 00:09:09.970
这些CSS系统，如BEM和CSS，最初并不一定是为
These CSS systems, like BEM and CSS,
were not necessarily originally built for

173
00:09:09.970 --> 00:09:10.539
表演。
performance.

174
00:09:10.539 --> 00:09:13.090
它们是为开发者的理智而设计的，[笑]对吗？
They were built for
developer sanity, [LAUGH] right?

175
00:09:13.090 --> 00:09:15.230
只是碰巧是系统
It just happens to be that systems for

176
00:09:15.230 --> 00:09:19.690
开发人员的理智还可以使您的代码更快。
developer sanity also
make your code faster.

177
00:09:19.690 --> 00:09:22.200
所以一定要注意其中之一。
So definitely kind of look out for
one of those.

178
00:09:22.200 --> 00:09:25.159
好的，在我们弄清楚样式和渲染树之后，然后
All right, so after we figure out
the styles and the render tree, and

179
00:09:25.159 --> 00:09:27.879
我们这整棵树的东西都准备好了，对吧？
we have this entire tree of
stuff ready to go, right?

180
00:09:27.879 --> 00:09:30.629
我们知道页面上将要出现的一切。
We know everything that's
gonna be on the page.

181
00:09:30.629 --> 00:09:33.690
我们有一些关于每件事应该是什么样子的规则。
We have some rules about what
everything should look like.

182
00:09:33.690 --> 00:09:37.053
是时候真正把它放在页面上了，对吧？
It's time to actually put it on the page,
right?

183
00:09:37.053 --> 00:09:40.142
我们将在一秒钟内更深入地讨论这个问题。
And we’re gonna go into this one
a little more in depth in a second.

184
00:09:40.142 --> 00:09:41.951
我们将完成所有其他步骤，并且
We’re gonna go through
all the other steps, and

185
00:09:41.951 --> 00:09:43.373
然后我们再回到那个问题上。
then we’re gonna round back to that.

186
00:09:43.373 --> 00:09:45.460
但这比看起来要棘手，对吧？
But this is trickier than it seems, right?

187
00:09:45.460 --> 00:09:47.971
你必须基本上找出每个元素的大小，
You have to basically find out
the size of every element,

188
00:09:47.971 --> 00:09:51.653
当你会打破一条新的线，一切之间的关系，对吗？
when you would break to a new line, the
relationship between everything, right?

189
00:09:51.653 --> 00:09:56.220
这一点都不奇怪，这很复杂，而且需要一段时间，对吧？
It should be no surprise that this is
complicated, and it takes a while, right?

190
00:09:56.220 --> 00:09:57.695
不过，我们稍后会回到这个问题上。
We will round back to this
in a little bit though.

191
00:09:57.695 --> 00:10:00.361
所以你知道这些元素是什么样子的。
So you know what the elements look like.

192
00:10:00.361 --> 00:10:02.489
你知道他们在页面上的位置。
You know where they go on the page.

193
00:10:02.489 --> 00:10:04.456
是时候去做了，对吧？
It's time to make them, right?

194
00:10:04.456 --> 00:10:08.832
所以在绘画的过程中，你会得到所有关于它看起来像什么的信息，
So the process of painting, you take all
the information about what it looks like,

195
00:10:08.832 --> 00:10:13.022
您可以获取有关其去向的信息，这些信息会多次影响大小
you take the information about where it
goes which a lot of times affects the size

196
00:10:13.022 --> 00:10:13.879
对吧？
of it, right?

197
00:10:13.879 --> 00:10:14.496
就像它将是宽度的50%。
Like it's gonna be 50% of the width.

198
00:10:14.496 --> 00:10:19.129
嗯，在你知道有多少像素之前，你必须布局页面，对吗？
Well, you gotta lay out the page before
you know how many pixels that is, right?

199
00:10:19.129 --> 00:10:22.519
一旦你弄清楚了所有事情的走向并弄明白了所有的规则，
Once you've figured out where everything
goes and have all the rules figured out,

200
00:10:22.519 --> 00:10:23.837
然后你就可以继续画了。
then you can go ahead and paint.

201
00:10:23.837 --> 00:10:28.270
这基本上意味着采用这个元素，对，这是一系列规则和
Which basically means take this element,
right, which is a bunch of rules and

202
00:10:28.270 --> 00:10:32.450
定位数据，然后把它变成一张别人可以看到的图片，对吗？
location data, and turn it into
a picture that somebody can see, right?

203
00:10:32.450 --> 00:10:36.206
这就是把它变成位图图像的过程，对吗？
So that's the process of like turning
it into a bitmap image, right?

204
00:10:36.206 --> 00:10:39.120
所以它从一棵树和所有的东西就像一张图片。
So it goes from a tree and
all the stuff to like a picture.

205
00:10:39.120 --> 00:10:41.581
你还没完全完，对吧？
You're not totally done yet, right?

206
00:10:41.581 --> 00:10:42.909
你有照片。
You have pictures.

207
00:10:43.940 --> 00:10:48.207
有照片并不一定能完成工作，对吧？
Having pictures does not necessarily
get the job done, right?

208
00:10:48.207 --> 00:10:50.033
在你拿到照片后
After you have the pictures,

209
00:10:50.033 --> 00:10:55.086
你需要将它们实际发送到GPU以便放到屏幕上，对吗？
you need to actually send them to the GPU
in order to be put onto the screen, right?

210
00:10:55.086 --> 00:10:59.039
关于这一点有一些规则，我们稍后会谈到。
And there's some rules about this that
we'll kind of talk about in a little bit.

211
00:10:59.039 --> 00:11:02.820
一旦做到这一点，你就准备好在互联网上赚取数百万美元
And once that, then you're ready
to just make Internet millions and

212
00:11:02.820 --> 00:11:03.409
你可以走了。
you're good to go.
