WEBVTT

1
00:00:00.000 --> 00:00:02.060
&gt；&gt；Steve：所以我们谈了一点关于风格计算的问题。
&gt;&gt; Steve: So we talked a little
bit about style calculations.

2
00:00:02.060 --> 00:00:06.139
这个链条的下一部分是布局和回流。
The next part of that chain
was layouts and reflows.

3
00:00:06.139 --> 00:00:10.660
对，就像布局是有效的OK回流是有效的WE
Right, like a layout is effectively
ok a reflows is effectively a we

4
00:00:10.660 --> 00:00:12.720
页面的布局。
layout of the page.

5
00:00:12.720 --> 00:00:15.500
你用JavaScript改变了一些东西，不是吗？
You changed something with
JavaScript didn't you, right?

6
00:00:15.500 --> 00:00:19.250
或者通过调整窗口的大小，因为我不知道当你做前端时
Or by resizing the window because I don't
know if whenever you make a front end

7
00:00:19.250 --> 00:00:22.879
网页，非技术人员所做的第一件事就是查看它是否通过
webpage, the first thing a nontechnical
person does is see if it's responsive by

8
00:00:22.879 --> 00:00:26.559
抓住一边，多次使窗户变小或变大。
grabbing the side and making the window
small and large a bunch of times.

9
00:00:26.559 --> 00:00:27.879
技术人员也会这样做。
Also technical people do that.

10
00:00:27.879 --> 00:00:28.460
我就是这么做的。
I do that.

11
00:00:28.460 --> 00:00:32.064
我理解Chrome中所有响应性设计工具的位置，我不在乎。
I understand where all the responsive
design tools are in Chrome, I don't care.

12
00:00:32.064 --> 00:00:38.090
[笑]所以，布局是第一次，一次回流
[LAUGH] So,
layout is the first time, a reflow

13
00:00:38.090 --> 00:00:43.710
是一个经常使用的词，事情发生了变化，我需要更新布局。
is a word frequently used for, things have
changed, I need to update the layout.

14
00:00:43.710 --> 00:00:49.219
布局可能非常昂贵，它们通常是主要原因之一
A layout can be really, really expensive
and they're usually one of the main causes

15
00:00:49.219 --> 00:00:54.100
JavaScript，这会降低渲染速度，对吗？
of JavaScript,
that slow down rendering, right?

16
00:00:54.100 --> 00:00:57.329
因为，是的，如果你做得太多，那就有问题了。
Because, yeah, if you do it too much,
that's problematic.

17
00:00:57.329 --> 00:01:00.545
再次考虑页面上的所有元素，每个列表项，
Again think about all of the elements
on the page, every list item,

18
00:01:00.545 --> 00:01:03.649
每个文本节点，所有内容，每个图像。
every text node, everything, every image.

19
00:01:03.649 --> 00:01:05.040
这是很多工作。
It's a lot of work.

20
00:01:05.040 --> 00:01:07.519
我甚至不知道它是如何在它完成的时间内完成的。
I don't even know how it gets it
done in the time that it does.

21
00:01:07.519 --> 00:01:08.549
有点令人印象深刻，就像，
It's kind of impressive, like,

22
00:01:08.549 --> 00:01:14.510
我认为这主要是因为我们已经有29年了，或者现在我认为网络是，
I think it's mostly that we've had like
29 years or now I think the web is,

23
00:01:14.510 --> 00:01:18.599
29年来这样做的经验，使它相当快。
29 years of experience doing this,
has made it decently fast.

24
00:01:18.599 --> 00:01:19.500
但就像难以置信一样。
But like it's incredible.

25
00:01:19.500 --> 00:01:23.504
你可以实际上，有一些YouTube视频显示维基百科，或者
You can actually, there are some
YouTube videos that show Wikipedia, or

26
00:01:23.504 --> 00:01:27.710
对于其他几个有效的页面，Firefox的过程是通过布局来完成的。
a few other pages effectively, the process
of Firefox goes through laying it out.

27
00:01:27.710 --> 00:01:29.739
就像好的，有一个h1，它在div里面。
It's like okay,
there's an H1 it's inside of a div.

28
00:01:29.739 --> 00:01:32.890
它不断地移动它，改变大小，调整东西，
And it keeps having to move it around and
change the size and adjust stuff and

29
00:01:32.890 --> 00:01:33.688
这很吸引人。
it's fascinating.

30
00:01:35.340 --> 00:01:36.569
所以之前提到过这一点。
So kind of mentioned this before.

31
00:01:36.569 --> 00:01:39.689
只要元素的几何图形发生更改，浏览器就必须回流
Whenever the geometry of an element
changes the browser has to reflow

32
00:01:39.689 --> 00:01:41.159
那一页对吧？
the page, right?

33
00:01:43.310 --> 00:01:47.590
就像，实际上在浏览器中发生的情况是非常不同的，对吧。
Like, how that actually happens like in
the browsers is very different, right.

34
00:01:47.590 --> 00:01:49.310
好像这真的无关紧要。
Like it doesn't really matter.

35
00:01:49.310 --> 00:01:52.900
我们要讨论的主要问题是在你不需要的时候不去做，
The major points we're going to touch on
is not doing it when you don't need to,

36
00:01:54.420 --> 00:01:56.299
这是最大的，对吧？
it's the largest one, right?

37
00:01:56.299 --> 00:02:00.209
但是对于每个不同的引擎，实际的过程是非常不同的。
But the actual process is very
different for every different engine.

38
00:02:00.209 --> 00:02:02.840
所以，你需要知道的关于回流的事情。
So, things that you need
to know about a reflow.

39
00:02:02.840 --> 00:02:05.280
回流就是我们所说的阻塞操作。
A reflow is what we call
a blocking operation.

40
00:02:05.280 --> 00:02:07.498
当我们向外转播页面时，其他一切都会停止。
Everything else stops when
we're relaying out the page.

41
00:02:07.498 --> 00:02:09.900
你的JavaScript都没有运行，什么都没有，对吧？
None of your JavaScript is running,
nothing, right?

42
00:02:09.900 --> 00:02:11.099
我们正在回流页面。
We are reflowing the page.

43
00:02:11.099 --> 00:02:12.919
这就是我们现在正在做的事情。
That is the thing that
we are doing right now.

44
00:02:12.919 --> 00:02:15.099
停止一切直到完成。
Stop everything until that is done.

45
00:02:15.099 --> 00:02:18.340
显然，如果我没有把这一点说得足够清楚，那就很难了。
And obviously if I haven't made
this clear enough, it's hard.

46
00:02:18.340 --> 00:02:22.935
而且它需要很多资源，而且不快也不容易。
And it takes a lot of resources and
it's not fast or easy.

47
00:02:22.935 --> 00:02:26.610
如果你经常这么做，猜猜谁会注意到，对吧。
And if you do it a lot,
guess who's gonna notice, right.

48
00:02:26.610 --> 00:02:28.500
我们尝试做的很多事情是，因为
A lot of the stuff we're trying to do is,
for

49
00:02:28.500 --> 00:02:31.520
很多网络表现的东西，如果我们把工作做好了，
a lot of this web performance stuff,
if we're doing our jobs well,

50
00:02:31.520 --> 00:02:34.620
用户应该永远不会注意到我们正在做任何事情。
the user should never notice
that we're doing anything.

51
00:02:34.620 --> 00:02:41.152
用户从不去，他们隐含在他们的大脑里去喜欢，我喜欢这一面。
Users never go, they implicitly in
their brains go like, I like this side.

52
00:02:41.152 --> 00:02:43.819
他们不知道表现是原因。
They don't know that
performance is the reason why.

53
00:02:43.819 --> 00:02:48.170
但是，如果你这边的表现很糟糕，他们知道，[笑]对吗？
But, if performance on your side is
terrible, they know, [LAUGH] right?

54
00:02:48.170 --> 00:02:52.000
如果用户注意到了性能，通常是您把它搞砸了，对吗？
If users notice the performance, it's
usually that you're messing it up, right?

55
00:02:52.000 --> 00:02:53.310
所以你最终会在一个循环中做这件事。
So you end up doing this in a loop.

56
00:02:53.310 --> 00:02:55.530
会很明显的，会很糟糕。
It's gonna be noticeable,
it's gonna be bad.

57
00:02:55.530 --> 00:02:57.442
我们基本上不想让人们注意到我们。
And we basically don't
want people to notice us.

58
00:02:59.689 --> 00:03:02.342
&gt；&gt；Steve：COO，l是唯一要保留的东西
&gt;&gt; Steve: Coo,l the only thing to keep in

59
00:03:02.342 --> 00:03:05.370
思想是元素的回流。
mind is that reflow of an element.

60
00:03:05.370 --> 00:03:08.090
我对这些话很小心，对吧。
I'm very careful with these words, right.

61
00:03:08.090 --> 00:03:12.219
元素的回流导致其父级和子级的回流。
Reflow of an element causes the reflow
of its parents and children.

62
00:03:12.219 --> 00:03:13.764
想想你对一棵树的了解。
Think about what you know about a tree.

63
00:03:13.764 --> 00:03:18.219
[笑]如果你回流所有的孩子
[LAUGH] If you reflow
all of the children and

64
00:03:18.219 --> 00:03:22.069
然后你回流父母，他们回流孩子。
then you reflow the parents and
they reflow the children.

65
00:03:22.069 --> 00:03:25.250
纯粹的大多数时间，有一些边缘的情况下，你只能逃脱
Pure most the time, there are some edge
cases where you can get away with only

66
00:03:25.250 --> 00:03:28.960
必须回流其中的一部分，我们将讨论其中一些。
having to reflow part of it and
we'll talk a little about some of those.

67
00:03:28.960 --> 00:03:32.280
但一般说来，这是用来说
But generally speaking that is code for
saying

68
00:03:32.280 --> 00:03:36.500
你碰了一样东西，你就碰了所有东西，对吧，这从技术上讲是事实。
you touch one thing you touch everything,
right, this is technically the truth.

69
00:03:36.500 --> 00:03:41.259
但更多时候我会说95%的时间你回流一件东西，
But really more often I would say
95% of the time you reflow a thing,

70
00:03:41.259 --> 00:03:42.889
你在回流一切。
you're reflowing everything.

71
00:03:42.889 --> 00:03:44.520
祝你好运。
Good luck.

72
00:03:44.520 --> 00:03:47.539
所以，好的，我们知道回流是昂贵的。
So, okay,
we know that reflows are expensive.

73
00:03:47.539 --> 00:03:52.055
避免它们不一定是公平的，因为有时你确实需要改变
Avoiding them is not necessarily fair
cuz sometimes you do need to change

74
00:03:52.055 --> 00:03:53.985
页面的那一层，对吧？
the layer of the page, right?

75
00:03:53.985 --> 00:03:57.979
所以，它是你所需要的，也是尽可能少的可以逃脱的东西。
So, it's as much as you need and as little
as can get away with kind of thing.

76
00:03:57.979 --> 00:04:00.000
那么是什么导致了回流呢？
So what causes a reflow?

77
00:04:00.000 --> 00:04:05.580
这里有一个不完整的列表，是的，小字体是一个笑话，[笑]对吗？
Here is a incomplete list and yes,
the small font is a joke, [LAUGH] right?

78
00:04:05.580 --> 00:04:09.150
这是一种将尽可能多的内容放在这张幻灯片上的方法，对吗？
It's a way to put as much on
this slide as possible, right?

79
00:04:09.150 --> 00:04:11.770
调整窗口大小、更改字体、更改内容、添加或
Resizing the window, changing the font,
changing the content, adding or

80
00:04:11.770 --> 00:04:14.620
删除样式表，添加或删除类，添加或删除元素。
removing a stylesheet, adding or removing
classes, adding or removing elements.

81
00:04:14.620 --> 00:04:18.110
改变方向，就像你把手机从肖像带到横向，
Changing the orientation, like when you
take the phone from portrait to landscape,

82
00:04:18.110 --> 00:04:20.439
显然，就像这样重排页面。
obviously, like that reflows the page.

83
00:04:20.439 --> 00:04:21.920
计算大小或位置。
Calculating size or position.

84
00:04:21.920 --> 00:04:23.129
那个很有趣。
That one's interesting.

85
00:04:23.129 --> 00:04:25.050
试图找出大小或
The simple act of trying
to figure out the size or

86
00:04:25.050 --> 00:04:27.490
某物的位置，导致回流。
position of something, causes a reflow.

87
00:04:28.639 --> 00:04:29.639
令人着迷。
Fascinating.

88
00:04:29.639 --> 00:04:33.509
改变大小或位置，就像是的，当然会导致回流。
Changing the size or position, like yeah,
of course that causes a reflow.

89
00:04:34.779 --> 00:04:37.654
当你回流并改变一堆东西的大小时，
And when you reflow and
you change the size of a bunch of stuff,

90
00:04:37.654 --> 00:04:39.047
猜猜你下一步要做什么？
guess what you got to do next?

91
00:04:39.047 --> 00:04:41.917
对，你得重新粉刷，因为你现在需要
Right, you got to repaint,
because you now need

92
00:04:41.917 --> 00:04:46.470
如果您更改了蓝色元素的大小，则将更多像素绘制为蓝色。
to paint more pixels blue if it's a blue
element that you changed the size of.

93
00:04:46.470 --> 00:04:49.220
或多或少，我会给你一个提示。
More or less, I'll give you a hint.

94
00:04:52.009 --> 00:04:54.810
布局是渲染管道中第二昂贵的部分。
Layout is the second most expensive
part of the rendering pipeline.

95
00:04:54.810 --> 00:04:57.792
你想猜猜第一个是什么吗？
Would you like to take a guess
at what the first one is?

96
00:04:57.792 --> 00:05:02.759
绘画，每次你回流，每次你做布局，你必须做的
Painting,and for every time you reflow
every time you do a layout you have to do

97
00:05:02.759 --> 00:05:07.009
一种油漆，你猜怎么着，他们通常都是成套来的。
a paint, guess what, they always
come usually as a package deal.

98
00:05:07.009 --> 00:05:09.483
那么问题是我们如何避免这种情况呢？
So questions how do we avoid this?

99
00:05:09.483 --> 00:05:13.569
是的，你可以尝试，如果不能逃脱它的改变，就像最低级别的
Yeah,you can try like if can't get away
with it changing like the lowest levels of

100
00:05:13.569 --> 00:05:16.189
DOM树而不是整个页面回流，
the DOM trees and
not get that whole page reflow,

101
00:05:16.189 --> 00:05:21.410
比如让您将容器元素从600像素宽更改为800像素宽，
like give you change the container element
from 600 pixel wide to 800 pixels wide,

102
00:05:21.410 --> 00:05:23.899
里面的一切都会改变。
everything inside of it is gonna change.

103
00:05:23.899 --> 00:05:26.839
有时候你可以改变一个小得多的子集，但是
There are times when you can get away
with changing a much smaller subset but

104
00:05:26.839 --> 00:05:31.050
将您的更改保持在尽可能低的树下。
keeping your changes as low
down the tree as possible.

105
00:05:31.050 --> 00:05:33.490
停止修改内嵌样式就可以了，对吧？
Stop modying in-line styles will do it,
right?

106
00:05:33.490 --> 00:05:36.558
你改变得越少，就越不能触发这些东西。
The less you change,
the less you can trigger this stuff.

107
00:05:36.558 --> 00:05:39.606
我认为真正有趣的是交易的流畅性
I think a really interesting one
is the trade the smoothness for

108
00:05:39.606 --> 00:05:42.259
速度，如果你正在做一个JavaScript动画。
speed if you're doing
an animation in JavaScript.

109
00:05:42.259 --> 00:05:43.534
我们稍后再谈如何，
We'll talk later about how,

110
00:05:43.534 --> 00:05:47.262
你可能不应该用JavaScript制作动画，但有时你需要这样做。
you probably shouldn't be doing animations
in JavaScript but sometimes you need to.

111
00:05:47.262 --> 00:05:51.906
但需要考虑的是，我们之前谈过，
But the thing to think about is,
we talked a little bit before,

112
00:05:51.906 --> 00:05:56.480
你的目标是每秒60帧。
the ideal you're aiming for
60 frames a second.

113
00:05:56.480 --> 00:05:58.340
16毫秒对吗？
At 16 milliseconds right?

114
00:05:58.340 --> 00:05:59.689
你看起来很酷。
You're like yeah cool.

115
00:05:59.689 --> 00:06:05.000
所以在每一个小像素上，我希望这个动画是平滑的。
So on every little pixel I want
this animation to be smooth.

116
00:06:05.000 --> 00:06:07.899
我想让每一个像素都有动画，对吗？
I want to animate every single pixel,
right?

117
00:06:07.899 --> 00:06:10.040
如果这需要比你的16毫秒更长的时间
If that takes longer than
your 16 milliseconds and

118
00:06:10.040 --> 00:06:13.410
你会错过那个画面的，对吧？
you're going to miss that frame, right?

119
00:06:13.410 --> 00:06:15.245
因为你触发了所有的回流。
Because you're triggering all this reflow.

120
00:06:15.245 --> 00:06:19.620
你最好一次移动那个盒子三个像素，对吧？
You're better off moving that box
three pixels at a time, right?

121
00:06:19.620 --> 00:06:22.379
因为你实际上不会错过那么多帧。
Because you wouldn't have
actually missed as many frames.

122
00:06:22.379 --> 00:06:26.680
所以有时候，把动画写得更简朴一些会让它更快
So sometimes, writing the animation to
be a little bit jankier makes it faster

123
00:06:26.680 --> 00:06:30.281
因为你不会错过下一帧要画的画面。
because you don't miss the next
frame that's gonna be painted.

124
00:06:30.281 --> 00:06:34.279
另一种是避免表格布局，这是有意义的
The other one is avoiding table layouts,
that kinds of makes sense for

125
00:06:34.279 --> 00:06:38.101
有很多原因，有一个像我写类似的电子邮件，相信我。
a lot of reasons, one like I write
similar emails, just trust me.

126
00:06:38.101 --> 00:06:42.173
[笑]好吧，这里的桌子很难，但另一部分就像，
[LAUGH] All right, a table here is hard,
but the other part is like,

127
00:06:42.173 --> 00:06:44.281
如果列和表变得更宽，
if a column and a table gets wider,

128
00:06:44.281 --> 00:06:48.675
你认为它上面和下面的其他细胞会发生什么？
what do you think happens like every
other cell above it, and below it?

129
00:06:48.675 --> 00:06:50.694
它必须给予，你知道回流。
It's got to give, you know reflowed.

130
00:06:50.694 --> 00:06:53.930
表的效果，定义它周围的一切。
A table effects,
everything around it by definition.

131
00:06:53.930 --> 00:06:57.730
然后击倒操纵，这一个，如果你使用的是一个框架，
And then batting down manipulation,
this one, if you're using a framework,

132
00:06:57.730 --> 00:07:00.120
你实际上是免费得到的，对吧。
you effectively getting it for
free, right.

133
00:07:00.120 --> 00:07:02.970
这就是造成反应的原因，对吧？
This is what makes React, React, right?

134
00:07:02.970 --> 00:07:05.060
它使Ember，和棱角分明，
It's what makes Ember, Ember, and Angular,

135
00:07:05.060 --> 00:07:08.519
角度，就是他们知道如何获取你的应用程序的状态。
Angular, is that they figure out how
to take the state of your application.

136
00:07:08.519 --> 00:07:10.600
并尽可能少地更改页面，
And do the bare minimum
of changing the page,

137
00:07:10.600 --> 00:07:13.139
并且尽可能高效地做，对吗？
and doing it as efficiently as possible,
right?

138
00:07:13.139 --> 00:07:15.778
所以，而不是，我将把所有这些加起来。
So, rather than, I'm gonna add all these.

139
00:07:15.778 --> 00:07:17.579
就像，你会改变你的应用程序中的一大堆东西。
Like, you'll change a bunch
of stuff in your application.

140
00:07:17.579 --> 00:07:19.930
它会找出一种形式上的方法来做到这一点。
It will figure out a pro
forma way to do that.

141
00:07:19.930 --> 00:07:23.199
这就像是我们的很多框架
That is like legitimately
what a lot of our frameworks

142
00:07:23.199 --> 00:07:25.029
会带到谈判桌上，对吧？
are bringing to the table, right?

143
00:07:25.029 --> 00:07:28.319
是，我们将允许您对应用程序的状态进行一系列更改，
Is the, we will let you make a bunch of
changes to the state of your application,

144
00:07:28.319 --> 00:07:30.040
我们将找到一种有效的渲染方式。
we will figure out an efficient
way of rendering it.

145
00:07:30.040 --> 00:07:32.850
如果你没有使用框架，这是你的，对吗？
If you're not using a framework,
this is on you, right?

146
00:07:32.850 --> 00:07:35.279
而且，就像不使用框架一样，总是很难做到的。
And like not using a framework
is always a toss up.

147
00:07:35.279 --> 00:07:39.540
就像框架一样，我们也会付出代价，稍后我们会看到这一点。
Like Frameworks come with a cost,
that we'll see in a little bit.

148
00:07:39.540 --> 00:07:41.009
对，他们不是免费的。
Right, they're not free.

149
00:07:41.009 --> 00:07:43.673
你必须写得像它们是建立在JavaScript之上的，
You have to write like they
are built on JavaScript,

150
00:07:43.673 --> 00:07:47.132
我们知道我们必须分离JavaScript并执行JavaScript。
we know that we have to part
JavaScript and execute the JavaScript.

151
00:07:47.132 --> 00:07:50.048
他们做了很多必须是一般性的假设。
And that they make a lot of
assumptions that have to be general.

152
00:07:50.048 --> 00:07:52.552
给定的框架必须对您有好处，因为它适用于
A given framework has to be as good for
you as it is for

153
00:07:52.552 --> 00:07:54.139
坐在你旁边的人。
the person sitting next to you.

154
00:07:54.139 --> 00:07:56.060
这意味着他们有点像所有行业的杰克，
Which means that they're are kind
of like Jack of all trades,

155
00:07:56.060 --> 00:07:57.829
他们在做最好的假设。
they're making best case assumptions.

156
00:07:57.829 --> 00:08:00.120
如果你要微调的话。
If you were going to fine tune stuff.

157
00:08:00.120 --> 00:08:03.319
是的，就像你可能比你用Reaction做得更快，但是
Yeah, like you could probably make
it faster than if you used react but

158
00:08:03.319 --> 00:08:07.180
你必须在所有事情上都这样做，很多时候我们做的交易
you'd have to do that for everything and
a lot of times we make the trade off of

159
00:08:07.180 --> 00:08:11.540
一个框架在大多数情况下为我们做出正确的决定，对吗？
a framework making good decisions for
us most of the time right?

160
00:08:11.540 --> 00:08:15.471
所以就像我们经常让他们对吗？
So that like we make
them more often right?

161
00:08:15.471 --> 00:08:18.004
然后反驳课间休息事件，也就是说，如果你是这样的话，
And then debouncing recess events,
which is, if you are,

162
00:08:18.004 --> 00:08:21.740
有一个没有事件的场景，它正在侦听要调整窗口大小的窗口。
have an eventless scenario that's
listening for the window to resize.

163
00:08:21.740 --> 00:08:26.629
通常对我来说，如果我使用SVG进行数据可视化，就会发生这种情况
Typically for me, this happens if I'm
making a data visualization with an SVG

164
00:08:26.629 --> 00:08:31.560
我想改变所有东西的宽度，就像窗口调整大小一样。
and I want to change the width of
everything, like when the window resizes.

165
00:08:31.560 --> 00:08:32.980
他们通常拖着它。
They usually dragging it.

166
00:08:32.980 --> 00:08:35.192
所以通常你不想重复这样做。
So usually you dont want
to do it repeatedly.

167
00:08:35.192 --> 00:08:38.278
你说，好吧，我必须拖拽它，让我经常这样做，
You say, okay, I have to drag it and
let me do this every so often,

168
00:08:38.278 --> 00:08:39.639
你会有更少的回流。
you'll have less reflows.
