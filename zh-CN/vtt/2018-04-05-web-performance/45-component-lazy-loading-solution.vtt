WEBVTT

1
00:00:00.040 --> 00:00:03.350
&gt；&gt；steve kinney：完成这个实际上是一样的，
&gt;&gt; Steve Kinney: Getting this
done is effectively the same,

2
00:00:03.350 --> 00:00:04.240
就像我们上次做的一样。
as what we did last time.

3
00:00:04.240 --> 00:00:07.780
我们将制作一个可加载的注释视图组件。
We'll make a loadable note view component.

4
00:00:18.067 --> 00:00:19.839
&gt；&gt；Steve Kinney：在JS。
&gt;&gt; Steve Kinney: At JS.

5
00:00:19.839 --> 00:00:23.370
我实际上要从前一个做一个小的剪切和粘贴动作。
I'm actually gonna do a little cut and
paste action from the previous one.

6
00:00:25.620 --> 00:00:27.390
因此，进口反应和可加载。
And so, import react and loadable.

7
00:00:27.390 --> 00:00:28.859
我们将使用相同的加载组件。
We're gonna use the same
loading component.

8
00:00:28.859 --> 00:00:32.799
就像我之前说的，你并不局限于一个加载组件。
Like I said before, you're not
limited to one loading component.

9
00:00:32.799 --> 00:00:34.820
不同的UI具有不同的形状。
Different pieces of UI
have different shape.

10
00:00:34.820 --> 00:00:37.490
也许它是一个旋转器，也许它是一个东西的骨架。
Maybe it's a spinner,
maybe it's a skeleton of a thing.

11
00:00:37.490 --> 00:00:41.740
我会更多地定制我的装载机。
I would be a little bit more
customized with my loading ones.

12
00:00:41.740 --> 00:00:44.479
但对于这个，我认为它会起作用。
But for this, I think it'll work.

13
00:00:44.479 --> 00:00:49.585
在这种情况下，我们实际上要
In this case, we're actually gonna

14
00:00:49.585 --> 00:00:53.872
带上NoteView，酷。
bring in the NoteView, cool.

15
00:00:53.872 --> 00:00:56.982
然后，在NoteView容器中，我将把这个换成，
And then, in the NoteView container,
I'm just gonna swap this out for the,

16
00:01:00.831 --> 00:01:05.730
&gt；&gt；Steve Kinney：LoadableNoteView，酷。
&gt;&gt; Steve Kinney: LoadableNoteView, cool.

17
00:01:05.730 --> 00:01:08.670
让我们看看在这里的行动。
Let's take a look at
that in action over here.

18
00:01:09.769 --> 00:01:13.120
我实际上要回到最初的页面。
I'm actually gonna go
back to the initial page.

19
00:01:15.539 --> 00:01:17.189
我们可以继续。
And, we can go ahead.

20
00:01:18.400 --> 00:01:19.670
我简要地看到了加载。
I briefly see loading.

21
00:01:19.670 --> 00:01:21.500
我得到下一个组件。
I get the next component.

22
00:01:21.500 --> 00:01:25.920
然后，我点击编辑，我逐步加载每个组件，因为我需要它。
And then, I hit Edit, I load each
component progressively, as I need it.

23
00:01:25.920 --> 00:01:32.319
我之前提到的一些事情，但我想强调一点，是不是
Kinda thing I mentioned earlier, but
I wanna highlight a little bit, is that

24
00:01:32.319 --> 00:01:36.430
IMPORT语法不是特定于REACT的，也不是任何特定的。
the import syntax is not react-specific,
it's not anything-specific.

25
00:01:36.430 --> 00:01:39.979
我可以使用导入进行加载，只需load-dash，或者
I could have used the import for
loading, just load-dash, or

26
00:01:39.979 --> 00:01:41.250
任何沿着这条线的东西。
anything along those lines.

27
00:01:41.250 --> 00:01:43.120
你说你想导入什么文件。
You say what file you want to import.

28
00:01:43.120 --> 00:01:46.750
你得到了一个承诺，无论默认是什么，它都可以解决，或者
You get back a promise that resolves
with whatever the default is, or

29
00:01:46.750 --> 00:01:48.219
整个包裹都在那里。
the entire package is there.

30
00:01:48.219 --> 00:01:50.370
所以这可能是，这些是反应成分。
So this could be,
these are reaction components.

31
00:01:50.370 --> 00:01:52.140
这可能是任何东西。
This could be anything.

32
00:01:52.140 --> 00:01:54.629
并且您不必使用React-Load。
And you don't have to use react-loadable.

33
00:01:54.629 --> 00:01:57.120
你可以在任何你想要的地方使用这个代码。
You can use this code wherever you want.

34
00:01:57.120 --> 00:02:00.530
所以我可以，例如，实现一个类似于，
So I could, for instance,
implement a feature which is like,

35
00:02:00.530 --> 00:02:05.109
嘿，听着，我知道如果他们去了笔记视图，
hey, listen,
I know that if they went to the note view,

36
00:02:05.109 --> 00:02:07.790
他们下一步可能会去找编辑。
that they're probably gonna
wanna go to the editor next.

37
00:02:07.790 --> 00:02:12.169
所以当组件挂载时，我可以说组件挂载了，
So when that component does mount,
I can say component did mount,

38
00:02:12.169 --> 00:02:14.810
导入下一个文件，提前启动。
import the next file,
kick that off beforehand.

39
00:02:14.810 --> 00:02:17.567
有效地预取任何这些资产。
Effectively prefetching
any of those assets.

40
00:02:17.567 --> 00:02:19.618
让我们来快速旋转一下。
Let's actually take that for
a spin real quick.

41
00:02:21.490 --> 00:02:23.270
因此，我们将转到注释视图。
So we'll go to the note view.

42
00:02:23.270 --> 00:02:27.170
我只想稍微进行一下重构，
I'm going to just slight a refactoring,

43
00:02:27.170 --> 00:02:29.270
因为这是那些无状态功能组件之一。
cuz this is one of those
stateless functional components.

44
00:02:31.670 --> 00:02:35.270
我们就在这里把这些都拿走。
We'll grab all of this right here.

45
00:02:36.819 --> 00:02:39.939
我们会说，实际上坚持住。
And we'll say, actually hold on.

46
00:02:39.939 --> 00:02:43.088
稍等一下，Class NoteView。
Give me one second, Class NoteView.

47
00:02:46.030 --> 00:02:49.937
&gt；&gt；Steve Kinney：Extensions React.Component。
&gt;&gt; Steve Kinney: Extends React.Component.

48
00:02:52.800 --> 00:02:54.983
&gt；&gt；Steve Kinney：放回render方法。
&gt;&gt; Steve Kinney: Put back
in the render method.

49
00:03:03.128 --> 00:03:05.252
&gt；&gt；Steve Kinney：是的，这就是为什么我变成了无状态函数，
&gt;&gt; Steve Kinney: Yeah, this is why
I turned into a stateless function,

50
00:03:05.252 --> 00:03:08.360
因为每隔[INAUDIBLE]，您应该使其成为无状态功能组件。
cuz every [INAUDIBLE], you should make
that a stateless functional component.

51
00:03:08.360 --> 00:03:10.896
我就像，你离我远点。
I'm like, you leave me alone.

52
00:03:10.896 --> 00:03:15.750
我们会说，组件DidMount。
We'll say, component DidMount.

53
00:03:15.750 --> 00:03:20.189
在这里，这就是我们可以开始加载编辑器的地方，在这种情况下。
And in here, this is where we can actually
begin to load the editor, in this case.

54
00:03:20.189 --> 00:03:27.588
所以我们会说，&gt；&gt；steve kinney：现在，
So we'll say,
&gt;&gt; Steve Kinney: Now,

55
00:03:27.588 --> 00:03:32.496
如果我立即需要编辑器代码，我可以说，我可以这样做，
if I needed the editor code immediately,
I could say then, and I could have,

56
00:03:32.496 --> 00:03:37.349
如果是一个常规文件，开始使用它，在这里，我甚至可以使用Async Await。
if is a regular file, begin to use it,
and here, I can even use async await.

57
00:03:37.349 --> 00:03:40.599
所以我可以说异步加载任何东西，并开始使用它。
So I can say async load whatever,
and begin to use it.

58
00:03:40.599 --> 00:03:41.990
在这种情况下，我真的不知道。
In this case, I really don't.

59
00:03:41.990 --> 00:03:46.129
这基本上就是一个预取队列，也就是，我说，嘿，
This is basically just a prefetch queue,
which is, I'm saying, hey,

60
00:03:46.129 --> 00:03:49.139
如果他们加载了这个注释视图，他们可能会想下一步加载编辑器。
if they loaded this note view, they're
probably gonna wanna load the editor next.

61
00:03:49.139 --> 00:03:50.979
那你干嘛不把那玩意儿卸了？
So why don't you kick off that load?

62
00:03:50.979 --> 00:03:54.750
所以现在，希望他们不会看到任何加载时间，
So now, hopefully, they won't see
any load times, what so ever,

63
00:03:54.750 --> 00:03:57.793
当它从无视图转到编辑器时，
when it comes from going from
the no view to the editor,

64
00:03:57.793 --> 00:04:00.860
因为我们实际上已经提前开始了。
cuz we will in fact have kicked that off,
beforehand.

65
00:04:00.860 --> 00:04:03.048
所以让我们继续，并尝试一下。
So let's go ahead, and try that out.

66
00:04:09.527 --> 00:04:11.253
&gt；&gt；steve kinney：我们实际上将返回一个。
&gt;&gt; Steve Kinney: We'll
actually go back one.

67
00:04:11.253 --> 00:04:12.854
酷毙了。
Cool.

68
00:04:18.202 --> 00:04:21.279
&gt；&gt；steve kinney：哦，有东西在生我的气。
&gt;&gt; Steve Kinney: Oops,
something is angry with me.

69
00:04:23.680 --> 00:04:26.810
如果你不导出每个文件的内容，你会有麻烦的。
If you don't export stuff every file,
you'll get in trouble.

70
00:04:29.098 --> 00:04:32.668
&gt；&gt；Steve Kinney：支持默认注释视图。
&gt;&gt; Steve Kinney: Support
default Note view.

71
00:04:35.856 --> 00:04:36.750
&gt；&gt；steve kinney：酷。
&gt;&gt; Steve Kinney: Cool.

72
00:04:36.750 --> 00:04:39.149
所以我实际上要回到起点，
So I'm actually go back to the beginning,

73
00:04:39.149 --> 00:04:42.829
并将在我们执行此操作时突出显示一些额外的工具。
and will highlight some extra
tools while we're doing this.

74
00:04:42.829 --> 00:04:45.639
我一开始就提到，是的，很酷，
I mentioned in the beginning that,
yeah cool,

75
00:04:45.639 --> 00:04:49.365
你在一台有快速互联网连接的昂贵电脑上，你就像，
you're on an expensive computer with a
fast Internet connection, and you're like,

76
00:04:49.365 --> 00:04:53.209
对于我的用户来说，重150是一件很棒的事情，看看其中的任何一件是什么样子的。
it'd be great to be heavy in 150 for
my users, and see what any of that's like.

77
00:04:53.209 --> 00:04:57.329
所以你可以在网络窗格中做什么，
So what you can do in the network pane,

78
00:04:57.329 --> 00:05:01.430
实际上你可以模拟不同的网络连接。
is you can actually simulate
different network connections.

79
00:05:01.430 --> 00:05:06.091
像快速3G，慢速3G和离线，并沿这些线添加一堆东西。
Like fast 3G, slow 3G, and offline, and
add a bunch of stuff along those lines.

80
00:05:06.091 --> 00:05:08.548
实际上在表演部分还有一个，
And there's actually another
one in the performance section,

81
00:05:08.548 --> 00:05:09.875
我认为这真的很强大。
which I think is really powerful.

82
00:05:09.875 --> 00:05:12.750
您还可以调节CPU。
You can also throttle the CPU.

83
00:05:12.750 --> 00:05:15.574
所以你想象一下在一个速度较慢的移动设备上是什么样子，
So you wanna imagine what it's
like on a slower mobile device,

84
00:05:15.574 --> 00:05:19.129
你可以慢4倍或6倍慢，这是令人难以置信的酷。
you can go to 4x slower or
6x slower, which is incredibly cool.

85
00:05:19.129 --> 00:05:21.810
只有在开发工具打开时才会出现这些情况，所以
And those will only be true
when the dev tools are open, so

86
00:05:21.810 --> 00:05:24.079
如果你忘了关掉它，一切都会好起来的。
if you forget to turn it off,
it's gonna be okay.

87
00:05:24.079 --> 00:05:29.105
但是为了说明一点，我想在这里做的是，我想改变这一点
But just to make a point, what I
wanna do here, is I wanna change this

88
00:05:29.105 --> 00:05:34.233
也许再多一点，让互联网慢一点。
to maybe just a little bit more,
slow the Internet down a little bit.

89
00:05:36.077 --> 00:05:37.391
&gt；&gt；Steve Kinney：酷，所以我们正在加载。
&gt;&gt; Steve Kinney: Cool, so we're loading.

90
00:05:37.391 --> 00:05:40.379
你可以看到，当我点击这个，它有点慢。
You can see when I click on this,
it's a little bit slower.

91
00:05:40.379 --> 00:05:41.240
我们装了子弹。
We loaded it.

92
00:05:41.240 --> 00:05:43.180
我们可以看到，我也加载了一些额外的捆绑包。
We can see,
I've also loaded some additional bundles.

93
00:05:43.180 --> 00:05:45.367
当我点击编辑，它立即在那里。
When I hit Edit, it's instantly there.

94
00:05:45.367 --> 00:05:47.620
我预取了编辑。
I prefetched the editor.

95
00:05:47.620 --> 00:05:50.709
现在，这是正确的事情吗，你应该这样做，在每个组成部分？
Now, is that the right thing to do and
should you do it, in every component?

96
00:05:50.709 --> 00:05:53.622
好的，如果你在[INAUDIBLE]数量的同时在每个单独的成分中做它，
Well, if you do it in every single
component while [INAUDIBLE] amounts,

97
00:05:53.622 --> 00:05:57.250
你将有效地加载整个非洲[INAUDIBLE]他们要去的地方。
you will effective loaded the entire
Africa [INAUDIBLE] where they're going.

98
00:05:57.250 --> 00:05:59.600
所以你必须对此有点[INAUDIBLE]，但是
So you have to be a little
[INAUDIBLE] about it, but

99
00:05:59.600 --> 00:06:05.050
理论上，通过预取这些资产，可以减少一些加载时间。
you can theoretically reduce some of that
loading time, by prefetching those assets.

100
00:06:05.050 --> 00:06:06.589
这不是一个特定的反应。
This is not a react specific thing.

101
00:06:06.589 --> 00:06:10.620
这是您可以使用Webpack和许多其他加载程序执行的JavaScript操作。
This is a JavaScript thing that you can do
with Webpack, and a lot of other loaders.

102
00:06:10.620 --> 00:06:13.839
但是，是的，你可以得到你需要的东西，这不在最初的捆绑包中。
But yeah, you can get stuff as you need
it, which is not in the initial bundle.

103
00:06:13.839 --> 00:06:18.060
但是你可以开始，预取，这样看起来你没有这样做。
But you can then kick off, prefetching, so
that it seems like you're not doing that.

104
00:06:18.060 --> 00:06:21.439
所以有效地，你得到了你的蛋糕，也吃了它。
So effectively, you get to have your cake,
and eat it too.

105
00:06:21.439 --> 00:06:24.399
因为我做了，这就像世界变化对我们做的一样，对吧。
Because I do it, it's the same thing
as world change did for us, right.

106
00:06:24.399 --> 00:06:27.569
去拿东西，准备好，在我们需要之前，
Going and getting the thing, and
getting ready for it, before we need it,

107
00:06:27.569 --> 00:06:29.850
给用户一种瞬间的感觉。
gives that kind of
an instantaneous feel to the user.

108
00:06:29.850 --> 00:06:33.276
在他们不需要的地方，我们减少了最低的时间，通过获得最初的
Where they don't have to, we cut down
on the low time, by getting the initial

109
00:06:33.276 --> 00:06:37.540
捆绑较小，但我们最初支付的价格，这是对应用程序的响应时间。
bundle smaller, but we originally pay the
price, which is response time to an app.

110
00:06:37.540 --> 00:06:40.569
因为现在我必须去拿它，特别是在一个较慢的连接上。
Cuz now I have to go get it,
especially on a slower connection.

111
00:06:40.569 --> 00:06:45.259
但在这种情况下，使用预取，我们既可以缩短加载时间，也可以缩短加载时间
But in this case, with prefetching,
we can both shrink our load times and

112
00:06:45.259 --> 00:06:48.600
缩短我们的响应时间，这真的，真的很酷。
shrink our response times,
which is really, really cool.

113
00:06:48.600 --> 00:06:50.696
让我们去看看我们最终生产的捆绑包。
Let's go take a look at the bundle
that we ended up producing.

114
00:07:00.348 --> 00:07:03.800
&gt；&gt；Steve Kinney：我们希望看到的是又一个创建的捆绑包，并且
&gt;&gt; Steve Kinney: And what we hope to see,
is yet another bundle created, and

115
00:07:03.800 --> 00:07:07.339
我们会得到一些关于我们最终做了什么的统计数据。
we'll kind of get some statistics
on what we ended up doing.

116
00:07:07.339 --> 00:07:12.389
但是简单的说，我们实际上没有，如果你也包括我说的话，
But simply, we actually didn't,
if you also include me saying words,

117
00:07:12.389 --> 00:07:14.660
我们并没有花很多时间来实现这一点。
we didn't spend a lot of
time implementing this.

118
00:07:14.660 --> 00:07:18.259
然而，我们最初削减了三分之一的捆绑后，削减了十分之一
Yet, we initially cut down a third of
our bundle after cutting down a tenth of

119
00:07:18.259 --> 00:07:19.163
我们的包裹。
our bundle.

120
00:07:19.163 --> 00:07:24.720
使用代码错误以及使用它的组件成为它们自己的捆绑包。
Using a codemirror, and the components
that use it, become their own bundle.

121
00:07:24.720 --> 00:07:30.430
我现在通过线路发送的实际主包是187千字节。
My actual main bundle that I'm sending
over the wire now, is 187 kilobytes.

122
00:07:30.430 --> 00:07:34.420
对，这只是初始金额的一小部分。
Right, that is a fraction
of the initial amount.

123
00:07:34.420 --> 00:07:39.409
有人想问我，那300千字节的目的是什么，
Somebody that tried to ask me for like,
what is the purpose of that 300 kilobytes,

124
00:07:39.409 --> 00:07:41.230
只是沙子里的一条线。
it's just a line in the sand.

125
00:07:41.230 --> 00:07:44.350
这只是一个目标，让每个块低于300千字节。
It's just a goal to get each
chunk under 300 kilobytes.

126
00:07:44.350 --> 00:07:48.850
阿里亚奥斯马尼，实际上他的目标是设定为100千字节。
Aria Osmani, actually has his
goal set at 100 kilobytes.

127
00:07:48.850 --> 00:07:52.930
对，这看起来是不可行的，但我们已经很接近了。
Right, which seems undoable,
but we've got pretty close.

128
00:07:52.930 --> 00:07:56.185
现在我承认，这里没有太多东西可以剪掉了。
Now granted, there's not like
a lot left to cut out here.

129
00:07:56.185 --> 00:07:59.610
我可以做，我可以做一些事情，比如触发它。
I could do it,
I could do something like trigger it.

130
00:07:59.610 --> 00:08:03.959
我可能对我们的懒惰负载有反应，但我们现在正在尝试。
I probably get reaction about our
lazy load, but we're trying now.

131
00:08:03.959 --> 00:08:06.649
但它真的很酷。
But it is kind of really cool.

132
00:08:06.649 --> 00:08:12.939
我们能够相对快速和相当容易地看到显著的收益。
We're able to see significant gains
relatively quickly, and fairly easily.

133
00:08:12.939 --> 00:08:16.218
然后，看看我们如何预加载和预刷新资产，
And then, see how we could preload and
prefresh assets,

134
00:08:16.218 --> 00:08:19.098
使我们的用户有效地看不到这一点。
to make this effectively
invisible to our users.

135
00:08:29.122 --> 00:08:30.470
&gt；&gt；steve kinney：请稍等。有点超前了
&gt;&gt; Steve Kinney: One moment.
Got a little ahead of myself in

136
00:08:30.470 --> 00:08:31.120
那里的幻灯片。
the slides there.

137
00:08:32.789 --> 00:08:34.120
好了我们回来了。
All right, we're back.

138
00:08:34.120 --> 00:08:37.970
所以我确实想把这一点带回家，再多一点。
So I do wanna drive this point home,
a little bit more.

139
00:08:37.970 --> 00:08:39.409
没关系，酷。
Which is okay, cool.

140
00:08:39.409 --> 00:08:40.580
这是一个反应应用程序。
It's a react app.

141
00:08:40.580 --> 00:08:45.019
但我有一个大角度的应用程序，或者任何类似的东西。
But I have a big angular app,
or anything along those lines.

142
00:08:45.019 --> 00:08:48.491
或者琥珀色应用程序或主干应用程序。
Or an amber app or a backbone app.

143
00:08:48.491 --> 00:08:53.085
所以，我觉得最初的几次我听到了所有这些懒惰的负载和
And so, I feel like the first few times
I heard about all this lazy load and

144
00:08:53.085 --> 00:08:58.067
代码分裂，我就像，我不知所措，这永远不会发生。
code splitting, I was like, I'm
overwhelmed, this is never gonna happen.

145
00:08:58.067 --> 00:09:01.210
我们重写一下，我会完全实现这一切。
We do a rewrite,
I'll totally implement all of this.

146
00:09:01.210 --> 00:09:04.669
但是，我们可以看到我们所需要做的就是拿一个给定的组件，
But, we can see that all we need
to do is take a given component,

147
00:09:04.669 --> 00:09:07.129
使用REACT LOADABLE之类的东西，并将其交换出去，对吗？
use something like react loadable,
and swap it out, right?

148
00:09:07.129 --> 00:09:10.320
这是你可以去做的事情，你可以明天在你的应用程序中做。
This is something you can go, and
you can do tomorrow in your application.

149
00:09:10.320 --> 00:09:12.690
然后开始弄明白，做捆绑，想象它。
And start figuring out,
do the bundle, visualize it.

150
00:09:12.690 --> 00:09:16.529
最大的痛苦是什么，哪里是最痛苦的，对吧？
What are the biggest pieces of pain,
where's the most agony, right?

151
00:09:16.529 --> 00:09:19.539
这可能不是最大的一个，但如果你知道，这是一个频繁
It may not be the biggest one in there,
but if you know that that is a frequently

152
00:09:19.539 --> 00:09:22.389
装载一个或低挂水果，你可以明天实施这个。
loaded one or low hanging fruit,
you could implement this tomorrow.

153
00:09:22.389 --> 00:09:24.840
而且不仅仅是具体的反应。
And it's not just react specific.

154
00:09:24.840 --> 00:09:27.350
这是另一个[INAUDIBLE]网格。
This is another [INAUDIBLE] grid.

155
00:09:27.350 --> 00:09:32.110
这是他们在实现这个之后分离出来的代码库。
This is their split out code base,
after they've implemented this.

156
00:09:32.110 --> 00:09:33.990
还有一个骨干应用程序。
And there are a backbone app.

157
00:09:33.990 --> 00:09:37.164
对，主要是放在提线木偶上。
Right, it's back on a marionette mostly.

158
00:09:37.164 --> 00:09:41.450
骨干来自于这些奇特的工具出现之前的一段时间。
Backbone comes from a time before
any of these fancy tools existed.

159
00:09:41.450 --> 00:09:43.649
所以如果他们可以在他们的应用程序中做到这一点，并且
So if they can do this with
their application, and

160
00:09:43.649 --> 00:09:45.779
他们没花太长时间。
it did not take them very long.

161
00:09:45.779 --> 00:09:49.269
所以你可以看到他们仍然有一个初始包。
So you can see that they
still have an initial bundle.

162
00:09:49.269 --> 00:09:54.389
主束实际上是从左数第二个沿着顶部。
The main bundle is, actually that
second from the left at along the top.

163
00:09:54.389 --> 00:09:56.200
所以他们现在立即加载D3。
And so they're now loading D3,
immediately.

164
00:09:56.200 --> 00:09:59.129
他们现在正在立即加载jQuery，对吧。
They're now loading jQuery immediately,
right.

165
00:09:59.129 --> 00:10:02.340
他们只是加载他们需要的片段来获得初始页面，然后作为
They're just loading the pieces they need
to get the initial page up, and then as

166
00:10:02.340 --> 00:10:05.580
你四处导航，他们可以给你他们可能需要的所有不同的东西，
you navigate around, they can get you all
the different things that they might need,

167
00:10:05.580 --> 00:10:08.620
所有不同的，比如SCSS文件。
all the different, like SCSS files.

168
00:10:08.620 --> 00:10:12.190
如果他们确实需要jQuery或D3，可以获得这些。
If they do need jQuery or
D3 that can get those.

169
00:10:12.190 --> 00:10:15.450
如果另一个包需要相同的包，那么您已经加载了它。
And if another bundle requires the same
one, you've already loaded it.

170
00:10:15.450 --> 00:10:18.120
所以你并不是每次都交这种税，
So it's not like you pay this
tax of getting it every time,

171
00:10:18.120 --> 00:10:19.779
它只是在逐步加载应用程序。
it's just progressively loading the app.

172
00:10:19.779 --> 00:10:22.659
你记忆中的一切，都会留下来，所以
Everything you have in memory, stays, so

173
00:10:22.659 --> 00:10:25.009
您不必支付网络负载成本。
you don't have to pay
that network load cost.

174
00:10:25.009 --> 00:10:27.279
你可以降低你的初始负荷成本，
You get to cut down on
your initial load cost,

175
00:10:27.279 --> 00:10:29.980
并且您可以减少最初的解析成本。
and you get to cut down on
your initial parsing cost.

176
00:10:29.980 --> 00:10:33.520
所以所有我们试图解决的事情，在今天的课程中。
So all of the kinda things we were trying
to solve for, over the course today.

177
00:10:33.520 --> 00:10:35.773
就像渲染一样，仍然是你需要处理的事情，
Like rendering, can still be
a thing that you need to deal with,

178
00:10:35.773 --> 00:10:37.519
因为那就是你改变了世界。
cuz that's you changing the world.

179
00:10:37.519 --> 00:10:42.730
但是，通过转移更少的代码，我们的代码更快，对吧，
But, by shifting less code,
our code is faster, right,

180
00:10:42.730 --> 00:10:45.100
因为我们做的事情少了。
cuz we're doing less of something.

181
00:10:45.100 --> 00:10:48.149
所以这就是可视化的一种。
So this is the kind of the visualization.

182
00:10:48.149 --> 00:10:52.588
您可以看到它们的主包是39千字节。
You can see that their main
bundle is 39 kilobytes.

183
00:10:53.870 --> 00:10:57.600
对，这就是他们通过线路传送的初始代码位。
Right, that's it for the initial bit
of code that they ship over the wire.

184
00:10:57.600 --> 00:11:02.090
然后他们得到他们需要的碎片，缓慢但可靠。
And then they get pieces as they
need them, slowly but surely.
