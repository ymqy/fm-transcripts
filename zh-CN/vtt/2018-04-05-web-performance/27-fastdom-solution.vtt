WEBVTT

1
00:00:00.000 --> 00:00:04.799
&gt；&gt；Steve：所以我们的目标就是像使用FastDOM一样发出呼喊
&gt;&gt; Steve: So our goal was to then just
give a shout out like using FastDOM to

2
00:00:04.799 --> 00:00:06.892
比如加速这些箱子。
like speed up these boxes.

3
00:00:06.892 --> 00:00:11.521
在我们看到我们有一个大问题之前，我们通过分离所有的东西来解决它。
Before we saw we had a big problem,
we solved it by separating everything.

4
00:00:11.521 --> 00:00:13.939
我们想要做的是回到我们的原始代码，因为，再一次，
What wanna do is kind of go back to
our original code because, again,

5
00:00:13.939 --> 00:00:15.647
我们试图解决的问题是，
the problem that we're
trying to solve here is,

6
00:00:15.647 --> 00:00:17.542
是的，如果你能把它分开很酷，那就去做，对吧。
yeah, if you could separate it cool,
do it, right.

7
00:00:17.542 --> 00:00:20.876
但是如果你有一个功能，那就是非常
But if you have one
function that's being very

8
00:00:20.876 --> 00:00:25.245
负责所有的阅读和写作。
responsible about doing all of
its reading and its writing.

9
00:00:25.245 --> 00:00:29.007
然后你有另一个函数，它们被彼此调用，
And then you have another function and
they get called after each other,

10
00:00:29.007 --> 00:00:30.123
你刚才做了什么？
what did you just do?

11
00:00:30.123 --> 00:00:32.380
你读了一堆，你写了一堆，你读了一堆，你写了一堆，对吧？
You read a bunch, you wrote a bunch, you
read a bunch, you wrote a bunch, right?

12
00:00:32.380 --> 00:00:34.646
在给定的函数中，您可以完全优化它，但是
In a given function,
you could totally optimize this, but

13
00:00:34.646 --> 00:00:36.082
在您的应用程序中？
across your application?

14
00:00:36.082 --> 00:00:38.901
除非你是故意的，
It's gonna happen unless
you are purposely,

15
00:00:38.901 --> 00:00:42.378
除非你有某种抽象来管理它。
unless you have some kind of
abstraction managing this.

16
00:00:42.378 --> 00:00:45.140
所以我们将回到更接近我们的原始代码的东西。
So we'll go back to something
a little closer to our original code.

17
00:00:47.649 --> 00:00:53.468
所以让我们把这个处理掉，
So let's get rid of this,

18
00:00:53.468 --> 00:01:00.881
去吧把那个放回去。
go ahead and put that back there.

19
00:01:00.881 --> 00:01:02.920
实际上也抓住了那条线。
Actually grab that line as well.

20
00:01:04.530 --> 00:01:06.843
我也可以在双倍宽度上保持这一切。
I could keep that all on
the double width as well.

21
00:01:06.843 --> 00:01:12.614
我只是，把它改成这样更容易。
I just, was easier to change it like this.

22
00:01:12.614 --> 00:01:18.051
所以在这里我们可以继续，我们可以说
So here we can go ahead and we could say

23
00:01:18.051 --> 00:01:23.322
最终是快速测量。
fastdom.measure, eventually.

24
00:01:23.322 --> 00:01:24.867
给它一个函数来测量它。
Give it a function to measure it.

25
00:01:31.054 --> 00:01:35.724
&gt；&gt；Steve：然后我们可以通过说
&gt;&gt; Steve: And
then we could schedule a write by saying

26
00:01:35.724 --> 00:01:39.893
快写，或者说是变异。
fastdom.write, or mutate rather.

27
00:01:52.852 --> 00:01:54.311
&gt；&gt；steve：酷，去做吧。
&gt;&gt; Steve: Cool, go ahead and do it.

28
00:01:54.311 --> 00:01:55.491
看看能不能用。
See if it works.

29
00:01:55.491 --> 00:01:58.632
没有犯任何错误，这是一个受欢迎的变化。
Didn't make any mistakes
which is a welcome change.

30
00:02:03.350 --> 00:02:05.280
&gt；&gt；Steve：我们将打开它，转到性能。
&gt;&gt; Steve: We'll open it up,
go to performance.

31
00:02:05.280 --> 00:02:06.203
我们要测量它。
We're going to measure it.

32
00:02:10.298 --> 00:02:12.040
&gt；&gt；steve：它会停止的。
&gt;&gt; Steve: And it will stop.

33
00:02:12.040 --> 00:02:16.027
你可以看到，就像我注意到的第一件事是有一点，
And you can see like first thing
I notice is there's a little,

34
00:02:16.027 --> 00:02:18.262
那里有点小颠簸，对吧？
some little bumps there, right?

35
00:02:18.262 --> 00:02:20.513
不是那么大的钉子。
It's not that big spike.

36
00:02:20.513 --> 00:02:23.552
但是动画，是的，我们可以在那里锁定整个线程。
But the animation, yeah,
we can lock up the entire thread there.

37
00:02:23.552 --> 00:02:25.372
多次按下一个按钮，
With hitting a button multiple times,

38
00:02:25.372 --> 00:02:29.189
简单的事实是，我没有达到每秒60帧的速度，这一点很有帮助。
the simple fact that I am not hitting
it 60 frames per second is helpful.

39
00:02:29.189 --> 00:02:36.731
但是我们继续，拿一个在这里，看看它。
But we go ahead, grab one of these here,
take a look at it.

40
00:02:36.731 --> 00:02:39.491
而且我们绝对不会再打击这个领域了。
And we are definitely not
thrashing the dom anymore.

41
00:02:39.491 --> 00:02:41.122
好的，所以这是一种有用的方式，
All right, so it's a useful way to,

42
00:02:41.122 --> 00:02:43.396
我们有一个问题，我们可以应用解决方案。
we have a problem we can
kind of apply the solution.

43
00:02:43.396 --> 00:02:47.430
因为是的，去找出你的代码可以采用的每一条代码路径
Cuz yeah, going and figuring out every
code path that your code can take and

44
00:02:47.430 --> 00:02:50.574
确保两个函数不会在
making sure two functions
aren't doing their own thing in

45
00:02:50.574 --> 00:02:52.259
与世隔绝将会很难。
isolation is going to be hard.

46
00:02:52.259 --> 00:02:56.480
但是我们有一个抽象，我们只记录我们所有的测量和
But we have an abstraction where we
just record all of our measurements and

47
00:02:56.480 --> 00:03:01.330
然后我们将所有的变种批处理在一起，我们可以相当容易地解决这个问题。
then we batch all of our mutates together,
we can solve this problem fairly easily.
