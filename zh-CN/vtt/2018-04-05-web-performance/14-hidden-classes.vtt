WEBVTT

1
00:00:00.130 --> 00:00:01.560
&gt；&gt；steve kinney：所以当我们去
&gt;&gt; Steve Kinney: So when we go and

2
00:00:01.560 --> 00:00:05.379
访问对象上的属性我们做这个称为动态查找的事情。
access a property on an object we do
this thing called Dynamic Lookup.

3
00:00:05.379 --> 00:00:09.750
也就是说，好的，我不知道x是否在这个物体上。
Which is, okay,
I don't know if x is on this object.

4
00:00:09.750 --> 00:00:12.300
我不知道它是不是在这个原型上，对吧？
I don't know if it's on this prototype,
right?

5
00:00:12.300 --> 00:00:14.009
我不知道什么是。
I don't know what anything is.

6
00:00:14.009 --> 00:00:16.030
我必须弄清楚所有这些东西。
I've gotta figure out all this stuff.

7
00:00:16.030 --> 00:00:17.763
所以点火开始并读出。
And so the ignition goes and reads it.

8
00:00:17.763 --> 00:00:22.461
点火解释器打开所有的说明书读数，
The ignition interpreter opens up
the spec reads through everything,

9
00:00:22.461 --> 00:00:26.239
所有这些都能工作并试图找出答案，对吗？
does all this work and
tries to figure it out, right?

10
00:00:26.239 --> 00:00:28.620
这样做很慢，对吧？
Doing that is slow, right?

11
00:00:28.620 --> 00:00:32.609
而且计算机擅长做我们不想做的重复性工作，但是
And computers are good at doing repetitive
work that we don't wanna do but

12
00:00:32.609 --> 00:00:35.409
他们也善于记住事情而不去做。
they're also good at remembering
things and not doing it.

13
00:00:35.409 --> 00:00:38.189
再一次，你可以看到它的发展方向，
And again you can see where this is going,

14
00:00:38.189 --> 00:00:41.770
做事情不比做事情快，对吧？
not doing stuff faster than doing stuff,
right?

15
00:00:41.770 --> 00:00:46.770
所以V8所做的就是它保留了一个秘密类型的系统
So what V8 does is it keeps
a secret type system that it

16
00:00:46.770 --> 00:00:49.369
不会在背后告诉你。
doesn't tell you about behind your back.

17
00:00:49.369 --> 00:00:53.500
所以就像，听着，你之前问过我这个物体的x。
So it's like, listen, you asked me for
x on this object before.

18
00:00:53.500 --> 00:00:54.670
我查过了。
I have looked it up.

19
00:00:54.670 --> 00:00:55.429
我已经看过规则了。
I've read the rules.

20
00:00:55.429 --> 00:00:56.280
我知道它在哪里。
I know where it is.

21
00:00:56.280 --> 00:00:58.039
内存中有这么多位。
It's this many bits over in memory.

22
00:00:58.039 --> 00:00:59.890
好吧，我不会再这么做了。
Fine, I'm not doing this again.

23
00:00:59.890 --> 00:01:04.859
对，而且速度很快，也是非常危险的。
Right and that's fast,
it's also incredibly dangerous.

24
00:01:04.859 --> 00:01:08.120
所有你看到的东西都像巨人
All of the things that you see like giant

25
00:01:08.120 --> 00:01:10.640
系统架构被破坏，比如Spectrum。
system architectures being
compromised like Spectrum.

26
00:01:10.640 --> 00:01:14.310
这就像当我们读取记忆时，我们不应该读取它，如果它是坏的，对吗？
It's like when we read memory we shouldn't
read from it's if it's bad right?

27
00:01:14.310 --> 00:01:18.390
所以如果你搞错了，那可能是一场全面的崩溃，所以
So if you get that wrong that
could be a full crash, so

28
00:01:18.390 --> 00:01:23.189
你可以猜到它在如何做到这一点上会非常保守，对吗？
you can guess that it's gonna be pretty
conservative in how it does that, right?

29
00:01:23.189 --> 00:01:27.069
所以这就是为什么我们看到事情走上不同道路的原因。
So that's why we saw cases where
things went down different paths.

30
00:01:27.069 --> 00:01:31.069
就像(笑)我来查，没事的。
It was like [LAUGH] I'll do the lookup,
it's fine.

31
00:01:31.069 --> 00:01:33.030
但一切都是一样的，
But things where everything
was exactly the same,

32
00:01:33.030 --> 00:01:34.229
就好像我知道这个东西。
it was like I know about this object.

33
00:01:34.229 --> 00:01:35.530
我做过这件事。我读过规则手册
I've done this.
I've read the rulebook,

34
00:01:35.530 --> 00:01:37.299
我以前见过这种物体。
I've seen this kind of object before.

35
00:01:37.299 --> 00:01:40.549
我知道该怎么做，我会为你做得更快。
I know what to do,
I will do it faster for you.

36
00:01:40.549 --> 00:01:42.450
所以让我们来看看一些东西。
So let's actually look at some stuff.

37
00:01:42.450 --> 00:01:45.390
好的，所以每件事都有一个叫做Hidden Class的东西。
All right, so everything gets
this thing called a Hidden Class.

38
00:01:45.390 --> 00:01:48.120
这就是它在Chrome中的名字，它在Firefox中被称为不同的东西，
That's what it's called in Chrome, it's
called something different in Firefox,

39
00:01:48.120 --> 00:01:49.430
它在Safari中被称为不同的东西。
it's called something different in Safari.

40
00:01:49.430 --> 00:01:52.390
我们现在要使用Hidden Class，因为为什么不使用。
We're going to use Hidden Class
right now because why not.

41
00:01:52.390 --> 00:01:56.159
因为它是隐藏的，看起来像是一把小斗篷和一把匕首，谁不喜欢呢？
Because its hidden, it seems like a little
cloak and dagger, who doesn't like that?

42
00:01:56.159 --> 00:01:59.579
好的，我们创建一个对象，它有一个隐藏的类，我们称它为C0。
All right, so we make an object, it's
got the hidden class, we'll call it C0.

43
00:01:59.579 --> 00:02:03.519
它其实有个奇怪的长名字，我们不会用的。
It's actually got some weird long
name that we're not gonna use.

44
00:02:03.519 --> 00:02:05.109
对吧？C0似乎对我们有好处。
RIght?
C0 seems good for us.

45
00:02:06.340 --> 00:02:08.050
我们向其添加y属性。
We add a y property to it.

46
00:02:08.050 --> 00:02:10.930
好的，现在这是一个不同的行动，就像它有一个不同的形状。
All right, now it's a different op,
like it's got a different shape to it.

47
00:02:10.930 --> 00:02:11.439
对吧？
Right?

48
00:02:11.439 --> 00:02:13.710
现在是C1。
It's now C1.

49
00:02:13.710 --> 00:02:15.770
它经过了这条路。
And it went through this path.

50
00:02:15.770 --> 00:02:17.930
你可以从C0转到C1，对吗？
You can go from C0 to C1, right?

51
00:02:17.930 --> 00:02:19.420
但如果我们一开始就像它既有x又有
But if we started off
like it has both x and

52
00:02:19.420 --> 00:02:23.199
Y，那是它自己的不同的隐藏类。
y, that's it's own different hidden class.

53
00:02:23.199 --> 00:02:25.009
好像我们不知道似的。
Like we don't know.

54
00:02:25.009 --> 00:02:27.170
秩序很重要。
The order matters.

55
00:02:27.170 --> 00:02:29.659
属性添加到对象的顺序
The order in which the properties
got added to the object

56
00:02:29.659 --> 00:02:32.560
当我们查查财产是什么的时候很重要。
matters when we look
up what a property is.

57
00:02:32.560 --> 00:02:36.115
所以如果一个物体到达的路径
So if the path that an object
went down to get to

58
00:02:36.115 --> 00:02:39.400
所具有的属性是不同的。
the properties that is has is different.

59
00:02:39.400 --> 00:02:41.699
我们无法使用查找的缓存版本。
We can't use the cached
version of the lookup.

60
00:02:41.699 --> 00:02:44.639
我们必须继续前进，每次都要经历这个过程。
We have to go ahead and
go through the process every time.

61
00:02:46.259 --> 00:02:48.780
所以就像你只能在链条上前进，你不能，
So like you can only move forward
in the chain, you can not,

62
00:02:48.780 --> 00:02:49.979
就像我们从C0到C1一样。
like we went from C0 to C1.

63
00:02:49.979 --> 00:02:51.372
你不能从C1开始。
You can't start at C1.

64
00:02:51.372 --> 00:02:54.039
如果你从C0开始
If you start at C0 and

65
00:02:54.039 --> 00:02:58.539
你去C1，如果你从别的地方开始，你必须走你自己的路。
you go to C1, if you start off somewhere
else, you got to go down your own path.

66
00:02:58.539 --> 00:03:00.939
你只能在这个链条上前进。
You can only move forward in this chain.

67
00:03:02.039 --> 00:03:07.039
所以你有C0，我们有属性，变成C1。
So you have C0,
we have the property, becomes C1.

68
00:03:07.039 --> 00:03:07.939
别理它。
Ignore that.

69
00:03:07.939 --> 00:03:08.854
是的，修好下一张幻灯片。
Yeah, fix the next slide.

70
00:03:08.854 --> 00:03:14.659
[笑]如果是同样的属性，那么我们直接去C2。
[LAUGH] If it's the same property
then we go directly to C2.

71
00:03:14.659 --> 00:03:19.610
对，如果我们删除另一个属性，那么它就会变成自己的属性，而如果我们删除另一个属性
Right and if we delete another property
then that moves to it's own versus if we

72
00:03:19.610 --> 00:03:23.689
从上面的对象中删除了相同的属性，这是一个不同的路径，对吗？
deleted that same property from the above
object that's a different path, right?

73
00:03:23.689 --> 00:03:25.840
除非事物以同样的方式创造，
Unless things are created the same way,

74
00:03:25.840 --> 00:03:31.120
他们走的是同一条路，VA不会试图想象他们是同一件事。
they go down the same path VA doesn't try
to imagine that they are the same thing.

75
00:03:31.120 --> 00:03:34.379
所以当我们试图思考我们如何制造我们的物体时，这是很有用的
So that's useful when we try to think
about how we make our objects and

76
00:03:34.379 --> 00:03:36.319
我们对我们的对象所做的。
what we do to our objects.

77
00:03:36.319 --> 00:03:39.469
如果我们能让他们沿着同样的道路前进
If we can keep them going
along the same path and

78
00:03:39.469 --> 00:03:41.629
我们以非常系统的方式做事。
we do things in a very systematic way.

79
00:03:41.629 --> 00:03:42.680
所以当我们为
So when we make functions for

80
00:03:42.680 --> 00:03:47.360
做事情VS函数每次都以相同的方式运行VS在这里
doing things vs the functions going to
run the same way every time vs here

81
00:03:47.360 --> 00:03:51.479
我将以这种方式随意编写代码，而在这里我将以另一种方式来做。
I'm gonna willy-nilly code it this way and
here I'm gonna do it this other way.

82
00:03:51.479 --> 00:03:55.189
你可以选择自己不参与其中的一些事情。
You can opt yourself out
of some of these things.

83
00:03:55.189 --> 00:04:00.889
很酷，所以我们之前在一些代码中看到了它。
Cool, so we saw it with some code earlier.

84
00:04:00.889 --> 00:04:05.280
还记得我是如何拥有那5000万美元，而它是另一种类型的吗？
Remember how I had that 50 million and
it was a different type?

85
00:04:05.280 --> 00:04:08.030
那很奇怪对吧？
That was weird, right?

86
00:04:08.030 --> 00:04:10.509
让我们实际谈谈它所经历的过程。
Let's actually talk about
the process that it goes through.

87
00:04:11.889 --> 00:04:13.259
当对象从未被创建时，
When an object has never been created,

88
00:04:13.259 --> 00:04:18.000
我们以前从未见过那处房产，在那里他们都在工作
we've never seen that property before,
where it both works for

89
00:04:18.000 --> 00:04:21.240
推测性优化以及这些隐藏类。
the speculative optimization as
well as these hidden classes.

90
00:04:21.240 --> 00:04:25.000
就像，我们不知道x是什么，我以前从未见过它。
It's like, we don't know what x is,
I've never seen it before.

91
00:04:25.000 --> 00:04:27.370
就像薛定谔的类型。
It's like Schroedinger's type.

92
00:04:27.370 --> 00:04:30.459
没有，因为我们从未见过它，也没有任何信息。
It's None, because we've never seen it and
we have no information.

93
00:04:30.459 --> 00:04:33.340
当我们第一次看到它时，我们要么看到它是一个数字。
The first time we see it,
we either see that it's a number.

94
00:04:33.340 --> 00:04:38.350
这要么是一个很长的数字，要么就是我们所说的SignedSmall，
Which is either a really long number,
or what we call a SignedSmall,

95
00:04:38.350 --> 00:04:43.779
一个很小的数字，或者是一个字符串或者这个叫做BigInt的东西。
a small number, or it's a string or
this thing called a BigInt.

96
00:04:43.779 --> 00:04:45.490
这是第二阶段的提案
Which is a stage two proposal for

97
00:04:45.490 --> 00:04:48.240
实际上拥有在JavaScript中有意义的大数字。
actually having large numbers
that make sense in JavaScript.

98
00:04:48.240 --> 00:04:51.009
想象一下现在还不存在。
Just imagine that one doesn't exist for
now.

99
00:04:52.159 --> 00:04:55.019
所以一旦你成为一个分配给小的数字或者
And so once you become either
a number assigned small or

100
00:04:55.019 --> 00:04:57.470
字符串在推测性优化中，很酷。
string in that speculative optimization,
cool.

101
00:04:57.470 --> 00:04:59.870
只能在此晶格上向前移动。
You can only move forward on this lattice.

102
00:04:59.870 --> 00:05:02.764
数字或古怪基本上就是，你知道那些事情，
Number or oddball is basically,
you know those things,

103
00:05:02.764 --> 00:05:05.298
你有没有读过那些博客帖子，他们就像是，
you ever read those blog posts and
they're like,

104
00:05:05.298 --> 00:05:08.393
JavaScript搞砸了，因为true加上true等于2。
JavaScript's messed up because
true plus true equals two.

105
00:05:08.393 --> 00:05:12.738
因为TRUE在技术上是1，而FALSE在技术上是0，RIGHT和
Right cuz true is technically 1 and
false is technically 0, right and

106
00:05:12.738 --> 00:05:14.557
所有那种僵硬的权利。
all that kind of stiff right.

107
00:05:14.557 --> 00:05:19.278
如果我们第二次看到数字1和true，它是一个数字或
If we saw the number one and
true a second time, it's a number or

108
00:05:19.278 --> 00:05:25.264
这是一个没有定义的奇怪的东西，所有这些最终都是一样的东西。
it's an oddball no undefined, any of these
all end up being kind of same thing.

109
00:05:25.264 --> 00:05:29.384
所以，是的，我们看到每一种都在适当的位置。
So yeah we see each of
those kind of in place.

110
00:05:29.384 --> 00:05:32.909
但如果你看到一次数字和第二次看到的字符串，
But if you saw the number once and
a string the second time,

111
00:05:32.909 --> 00:05:34.149
那我们就不知道发生了什么
then we don't know what's going on.

112
00:05:34.149 --> 00:05:34.810
什么都行。
It's any.

113
00:05:34.810 --> 00:05:38.639
我们不能，在这一点上，我们要么更接近多态，要么
We can't, at this point, we get
either closer to that polymorphism or

114
00:05:38.639 --> 00:05:39.800
变质作用对吧？
metamorphism, right?

115
00:05:39.800 --> 00:05:42.240
我们不能跟踪这些东西是什么，对吧？
We can't keep track of what
these things are, right?

116
00:05:42.240 --> 00:05:44.699
所以事情就像是经过了这个过程。
So things kind of like
move through this process.
