WEBVTT

1
00:00:00.000 --> 00:00:02.295
&gt；&gt；扬声器1：这叫做布局抖动。
&gt;&gt; Speaker 1: It's
called layout thrashing.

2
00:00:02.295 --> 00:00:06.418
真正的术语是强制同步布局。
The real term is forced
synchronous layout.

3
00:00:06.418 --> 00:00:08.811
我们称它为布局颠簸，因为让我们看看真的很酷。
We're gonna call it layout thrashing,
because let's see really cool.

4
00:00:08.811 --> 00:00:12.864
让我们实话实说，就像当你有一件事叫做布局颠覆和
Let's be really honest like when you have
one thing called layout thrashing and

5
00:00:12.864 --> 00:00:15.346
另一个称为强制同步布局，
another one called forced
synchronous layout,

6
00:00:15.346 --> 00:00:17.481
你每次都选择布局颠簸。
you choose layout thrashing every time.

7
00:00:17.481 --> 00:00:22.038
因此，您可以执行一系列操作，导致浏览器停止并计算
So there's a set of things you can do that
cause the browser to stop and calculate

8
00:00:22.038 --> 00:00:26.469
风格和布局，就像我们看到的一样，询问它就是其中之一。
style, and layout, and as we saw like
asking about it is one of those things.

9
00:00:26.469 --> 00:00:29.954
这是我的应用程序中的一些代码，我只是从字面上
This is some code from my
application where I just literally

10
00:00:29.954 --> 00:00:32.531
在编辑器中做了第一件可能的事，
did the first possible
thing in the editor,

11
00:00:32.531 --> 00:00:36.420
我们有一个按钮模块，就像呼吁行动按钮一样。
which we have a button module
like the call to action button.

12
00:00:36.420 --> 00:00:40.412
然后我点击了一个录音，我把它拖了进来，我停止了录音。
And I hit a recording, I dragged it in and
I stopped the recording.

13
00:00:40.412 --> 00:00:44.198
因为我的整个计划就是喜欢踢来踢去，他们有很多可以找到的例子
Cuz my whole plan was to like kick around,
they have a lot to find an example and

14
00:00:44.198 --> 00:00:46.072
一个现实世界的应用程序向你展示。
a real world application to show you.

15
00:00:46.072 --> 00:00:49.603
结果，这真的是我做的第一件事。
Turned out, it was literally
the first thing that I did.

16
00:00:49.603 --> 00:00:53.633
你可以看到，就像Chrome可以检测到它一样，
You can see that like if
Chrome can detect it,

17
00:00:53.633 --> 00:00:57.463
它会在上面放一个红色的小三角形。
it will put a little
red triangle up there.

18
00:00:57.463 --> 00:00:59.442
就像是告诉你，嘿，
And like basically tell you, hey,

19
00:00:59.442 --> 00:01:02.551
第四次回流可能是瓶颈的表现。
a fourth reflow is a likely
performance of bottle neck.

20
00:01:02.551 --> 00:01:04.210
就像是我抓到你这么做。
It's like I caught you doing this.

21
00:01:04.210 --> 00:01:06.174
我觉得你应该知道
I think you should know about it and

22
00:01:06.174 --> 00:01:09.031
你可以看到所有这些东西都在适当的地方。
you can kind of like see
all of that stuff in place.

23
00:01:09.031 --> 00:01:12.834
因此，即使在大型应用程序中，它们也是我的第一件事
So like even in a large application like
they was literally the first thing that I

24
00:01:12.834 --> 00:01:15.582
我试过了，但我并不是去寻找一个异教徒的流动。
tried, it wasn't like I went looking for
a pagery flow.

25
00:01:15.582 --> 00:01:20.073
我确实去寻找了一个异教徒的流动。
I did go looking for a pagery flow.

26
00:01:20.073 --> 00:01:23.549
它立即找到了它，节省了我一大堆工作[笑]，但是
It saved me a bunch of work [LAUGH]
by finding it immediately, but

27
00:01:23.549 --> 00:01:26.646
谈论这件事对我的道德权威没有帮助。
it didn't help my moral
authority talking about this.

28
00:01:26.646 --> 00:01:30.668
但这是我在那里发现的第一件事。
But it was the very first
thing that I found in there.

29
00:01:30.668 --> 00:01:32.371
所以其中一种定义，
So one of the kind of definitions,

30
00:01:32.371 --> 00:01:37.250
布局颠簸发生在JavaScript剧烈的时候，这就是为什么我选择了这句话。
layout thrashing occurs when JavaScript
violently, that's why I picked this quote.

31
00:01:37.250 --> 00:01:41.490
写入，然后多次从DOM读取，导致文档回流。
Writes, then reads from the DOM multiple
times, causing document reflows.

32
00:01:41.490 --> 00:01:46.912
所以，是的，每次我们阅读的时候，我们都必须弄清楚所有东西的大小。
So yeah, every time we read like we have
to figure out the size of everything.

33
00:01:46.912 --> 00:01:51.581
然后一旦它获得最新的信息，也许只读一次。
And then once it gets the most up to date
information, maybe just reads it once.

34
00:01:51.581 --> 00:01:52.609
酷，没什么大不了的。
Cool, no big deal.

35
00:01:53.930 --> 00:01:58.861
问题是浏览器很聪明，你想那是什么问题？
The problem is the browser is smart,
you're like what kind of problem is that?

36
00:01:58.861 --> 00:02:00.284
如果你改变了一堆东西，
If you change a bunch of stuff,

37
00:02:00.284 --> 00:02:04.293
浏览器有点像，记得我们说过，像移动操作是很好的。
the browser kind of like remember we
said like budging manipulation was good.

38
00:02:04.293 --> 00:02:07.551
浏览器也有效地试图做到这一点。
The browsers effectively
trying to do that, as well.

39
00:02:07.551 --> 00:02:08.881
你可以改变一大堆员工。
You can change a whole bunch of staff.

40
00:02:08.881 --> 00:02:13.742
像我这样的浏览器直到像这样的每16毫秒才会生成新的帧
The browsers like I don't make new frames
until like every 16 milliseconds like

41
00:02:13.742 --> 00:02:15.091
让他们拥有吧。
let them have that it.

42
00:02:15.091 --> 00:02:20.079
当我准备画下一幅画的时候，我会忘记什么变化，
When I'm getting ready to draw the next
frame, I'm gonna forgot what change,

43
00:02:20.079 --> 00:02:21.722
然后我转发页面。
then I relayout the page.

44
00:02:21.722 --> 00:02:24.180
你这里的问题是我们改变了一些东西。
The problem that you have
here is we changed something.

45
00:02:24.180 --> 00:02:27.140
我们测量它，我们改变一些东西，我们测量它。
And we measure it,
we change something and we measure it.

46
00:02:27.140 --> 00:02:30.259
就像浏览器不知道，它想要得到你，
Like the browser doesn't know,
it wants to get you,

47
00:02:30.259 --> 00:02:33.461
它不想给出那个酒吧的宽度。
it doesn't want to give what
the width was of that bar.

48
00:02:33.461 --> 00:02:36.574
上次渲染时，你改变了一些东西。
Last time it rendered,
you changed something.

49
00:02:36.574 --> 00:02:39.143
它想给你提供最新的信息，
It wants to get you the most
up to date information,

50
00:02:39.143 --> 00:02:42.259
因为那个盒子可能不在你想的地方了。
cuz that box might not be
where you think it is anymore.

51
00:02:42.259 --> 00:02:47.323
所以每次你测量的时候，如果你上次测量的时候有什么变化，
So every time you measure, if anything has
changed from the last time you measured,

52
00:02:47.323 --> 00:02:51.831
浏览器必须经过并且想要了解世界的新状态。
the browser has to go through and like
figure out the new state of the world.

53
00:02:51.831 --> 00:02:54.081
当然，这不是很好吗？
Sure, is that not great?

54
00:02:54.081 --> 00:02:58.573
显然，但问题出在哪里是在一个循环中。
Obviously, but
where it became a problem was in a loop.

55
00:02:58.573 --> 00:02:59.362
我们检查了，我们改变了。
We checked, we changed.

56
00:02:59.362 --> 00:03:00.360
我们检查了，我们改变了。
We checked, we changed.

57
00:03:00.360 --> 00:03:03.632
这导致我们重新计算样式布局，重新计算样式布局。
Which caused we recalculate style lay out,
recalculate style lay out.

58
00:03:03.632 --> 00:03:07.979
每当你看到其中的模式，就像有时你在迭代和
Whenever you kind of see that pattern in
there like sometimes you are iterating and

59
00:03:07.979 --> 00:03:11.705
这很自然，但你看到他就像一个长长的街区在那里。
it's natural, but you saw that for
h was like one long block in there.

60
00:03:11.705 --> 00:03:16.002
当你看到这些模式，你注意到你吹过了16毫秒
When you see those patterns and you notice
you're blowing through the 16 milliseconds

61
00:03:16.002 --> 00:03:17.616
对于一个框架，你有一个问题。
for a frame, you have a problem.

62
00:03:17.616 --> 00:03:22.681
如果Chrome Like在这种情况下给了你一个红色的小东西，
And if Chrome like goes as far as to give
you the little red thing in that case,

63
00:03:22.681 --> 00:03:25.056
你真的知道你有问题
you truly know you have a problem and

64
00:03:25.056 --> 00:03:28.401
这是首先要寻找的东西之一。
this is kind of one of
the first things to look for.

65
00:03:28.401 --> 00:03:32.795
所以，是的，浏览器基本上是想弄清楚它是否需要进行新的更新
So yeah, the browser basically wants to
figure out if it has to get new updated

66
00:03:32.795 --> 00:03:36.252
每次更改后的布局信息。
layout information after every
time you change something.

67
00:03:36.252 --> 00:03:38.182
你问它东西，它不知道。
You asked it for stuff, it didn't know.

68
00:03:38.182 --> 00:03:39.052
它试图弄清楚。
It tried to figure it out.

69
00:03:39.052 --> 00:03:42.540
所以它停止了，它回流了页面，给你提供了信息。
So it stopped, it reflowed the page and
got you the information.

70
00:03:42.540 --> 00:03:44.091
那我们怎么解决这个问题？
So how do we solve this?

71
00:03:44.091 --> 00:03:47.727
嗯，我们之前在代码中看到了一个解决方案。
Well, we saw a solution
in the code before.

72
00:03:47.727 --> 00:03:51.014
如果你把所有的阅读和写作分开，
If you separate all the reading
from all the writing,

73
00:03:51.014 --> 00:03:53.801
你应该像读很多遍一样好。
you should be good like
read a bunch of times.

74
00:03:53.801 --> 00:03:57.629
不要更改页面，获取所需的所有信息，然后继续
Don't change the page, get all of the
information you need, then go ahead and

75
00:03:57.629 --> 00:03:58.680
更改页面。
do the page changes.

76
00:03:58.680 --> 00:04:02.731
所以就像循环中的第一个代码会触发布局脱粒。
So like the first code in a loop
would've triggered layout threshing.

77
00:04:02.731 --> 00:04:04.646
第二个，我们读了一堆
The second one, we read a bunch and

78
00:04:04.646 --> 00:04:08.530
然后我们根据这些信息写一堆这样的东西。
then we write a bunch like
based on that information.

79
00:04:08.530 --> 00:04:11.560
它将为我们表演。
It is going to be performing for us.
