WEBVTT

1
00:00:00.190 --> 00:00:02.640
&gt；&gt；扬声器1：关于吊装的最后一个注意事项。
&gt;&gt; Speaker 1: One last note on hoisting.

2
00:00:02.640 --> 00:00:04.570
你们中的一些人以前听过这句话，
Some of you have heard the phrase before,

3
00:00:04.570 --> 00:00:08.330
让不提升关于块范围。
let doesn't hoist with respect to the block scope.

4
00:00:08.330 --> 00:00:13.070
因为当你写这样的代码时，老师在第2行的作业
Because when you write code like this, the teacher assignment on line 2

5
00:00:13.070 --> 00:00:17.699
会抛出一个错误，一个所谓的TDZ错误，临时死区错误，好吗？
will throw an error, a so-called TDZ error, temporal dead zone error, okay?

6
00:00:19.339 --> 00:00:21.690
这句话，让我们不要举起，
This statement, let doesn't hoist,

7
00:00:21.690 --> 00:00:25.280
是出于好的精神，但它是不准确的。
is meant in good spirit, but it is inaccurate.

8
00:00:26.539 --> 00:00:30.012
我可以向你证明这是不准确的，因为我们已经看到
And I can prove to you that it's inaccurate, because we've already seen

9
00:00:30.012 --> 00:00:32.868
提升的概念，我们已经看到了一个代码示例。
a notion of hoisting and we've already seen a code example.

10
00:00:32.868 --> 00:00:38.921
如果老师没有被提升，因此还不存在于范围内，
Where if teacher didn't get hoisted and therefore didn't exist in the scope yet,

11
00:00:38.921 --> 00:00:42.219
那么程序的行为就会有所不同。
then the program would behave differently.

12
00:00:42.219 --> 00:00:44.030
所以这里有一个这样的例子。
So here is such an example.

13
00:00:45.409 --> 00:00:50.090
在这段代码中，如果第5行的老师没有主持，
In this code, if the teacher on line 5 did not host,

14
00:00:50.090 --> 00:00:52.469
然后第4行应该打印出“Kyle”。
then line 4 should print out "Kyle".

15
00:00:53.979 --> 00:00:57.969
因为在第4行没有教师，它应该转到外部范围和
Because there is no teacher as of line 4 and it should go to the outer scope and

16
00:00:57.969 --> 00:01:00.209
找到第1行中的变量。
find the variable from line 1.

17
00:01:01.490 --> 00:01:04.560
但此代码仍然抛出TDZ错误，并且
But this code still throws a TDZ error, and

18
00:01:04.560 --> 00:01:08.569
它仍然抛出TDZ错误的原因是因为let和consts仍然提升。
the reason it still throws a TDZ error is because lets and consts still hoist.

19
00:01:09.909 --> 00:01:12.159
但它们的升降方式是不同的。
But there is a difference between how they hoist.

20
00:01:13.260 --> 00:01:17.769
第一，let和const只提升到一个块，而vars提升到一个函数。
Number one, lets and consts only hoist to a block, whereas vars hoist to a function.

21
00:01:17.769 --> 00:01:21.725
但是第二，这是更重要的事情，
But number two, and this is the more important thing,

22
00:01:21.725 --> 00:01:26.713
var和let const之间区别是var，当它创建
the difference between var and let const is that var, when it creates

23
00:01:26.713 --> 00:01:31.798
它的变量，并在编译时为您的作用域制定计划。
its variables and has the plan during the compile time for your scope.

24
00:01:31.798 --> 00:01:36.604
它说在这个范围内会有一个叫做教师的变量，
And it says there's gonna be a variable called teacher in this scope,

25
00:01:36.604 --> 00:01:41.098
它还说当作用域开始时，将其初始化为undefined。
it also says when the scope starts, initialize it to undefined.

26
00:01:42.686 --> 00:01:47.756
&gt；&gt；Speaker 1：当let将其变量提升到其块范围内时，它表示
&gt;&gt; Speaker 1: When let hoists its variables into its block scope it says

27
00:01:47.756 --> 00:01:53.359
创建一个名为Teacher的位置，但不要初始化它。
create a location called teacher, but don't initialize it.

28
00:01:54.599 --> 00:01:56.810
它处于未初始化状态，
It is in an uninitialized state,

29
00:01:58.359 --> 00:02:00.759
未初始化与未定义不同。
uninitialized being different than undefined.

30
00:02:01.849 --> 00:02:05.230
未初始化意味着您还不能触摸它。
Uninitialized meaning you can't touch it yet.

31
00:02:05.230 --> 00:02:10.312
直到您在该块中遇到let或
And it doesn't get initialized until in that block you run across the let or

32
00:02:10.312 --> 00:02:12.014
常量声明。
the const declaration.

33
00:02:16.068 --> 00:02:17.603
&GT；&GT；扬声器1：所以这些绝对是吊装的，
&gt;&gt; Speaker 1: So these absolutely do hoist,

34
00:02:17.603 --> 00:02:21.747
这就是为什么我们仍然收到TDZ错误，只是它们没有初始化。
which is why we still get a TDZ error, it's just that they don't get initialized.

35
00:02:25.719 --> 00:02:30.250
&gt；&gt；扬声器1：顺便问一下，有时有人问我为什么TDZ错误？
&gt;&gt; Speaker 1: By the way, I sometimes get asked why the TDZ error?

36
00:02:30.250 --> 00:02:31.509
他们为什么犯了一个错误？
Why did they make this an error?

37
00:02:32.920 --> 00:02:36.670
它的细微差别比你可能意识到的要多得多。
It is much more nuance than you might realize.

38
00:02:36.670 --> 00:02:40.849
我过去认为在这种情况下TDZ错误的主要原因
I used to believe that the primary reason for the TDZ error in this scenario

39
00:02:40.849 --> 00:02:45.889
本质上是，TC39试图让你成为社会工程师。
was that, essentially, TC39 was trying to socially engineer you.

40
00:02:45.889 --> 00:02:50.620
停止在作用域中早于声明变量的位置为变量赋值。
To stop assigning to variables earlier in scopes than where you've declared them.

41
00:02:50.620 --> 00:02:55.009
同样，我大体上同意这一点，但当一种语言是如此的时候，我会有点恼火
Which again, I generally agree with, but I'm a little annoyed when a language is so

42
00:02:55.009 --> 00:02:58.170
粗暴地表达自己的观点，好吗？
heavy handed with its opinions, okay?

43
00:02:58.170 --> 00:03:00.990
所以我大体上会同意这一点，而且我过去只是有点胡说八道
So I generally would agree with that, and I used to just sort of chaff

44
00:03:00.990 --> 00:03:04.389
一想到他们会强迫我做出那个决定。
at the idea that they would have forced me into that decision.

45
00:03:06.090 --> 00:03:07.819
但事实证明，这比那要细微得多。
But turns out it's much more nuance than that.

46
00:03:08.884 --> 00:03:13.400
这几乎是学术细微差别的高度，
This is almost the height of kind of academic nuance,

47
00:03:13.400 --> 00:03:17.579
但我会和你分享它，让你对TDZ有一个完整的看法。
but I'll share it with you so that you have the full perspective on TDZ.

48
00:03:18.759 --> 00:03:23.879
TDZ存在的原因甚至不是因为let，TDZ存在是因为const。
The reason TDZ exists is not even for let, TDZ exists because of const.

49
00:03:24.939 --> 00:03:28.590
考虑在块范围内附加const。
Think about const being attached inside of a block scope.

50
00:03:28.590 --> 00:03:32.590
想象一下，如果const将自身初始化为undefined。
Imagine if const initialized itself to undefined.

51
00:03:33.729 --> 00:03:38.770
然后在块的第1行，您对该变量执行console.log，然后
And then on line 1 of a block, you did console.log of that variable and

52
00:03:38.770 --> 00:03:44.409
您看到它未定义，然后您看到它的值为42。
you saw it undefined, and then later you saw it with the value 42.

53
00:03:44.409 --> 00:03:49.229
从技术上讲，const在两个不同的时间有两个不同的值，
Technically, that const would have had two different values at two different times,

54
00:03:49.229 --> 00:03:52.539
这在学术上违反了常量的概念。
which academically violates the concept of a const.

55
00:03:53.569 --> 00:03:58.750
所以他们说我们必须防止你在作用域的早期访问变量
So they said we have to prevent you from accessing a variable earlier in the scope

56
00:03:58.750 --> 00:04:02.189
当它被分配一个且只有一个值时，所以
than when it's been assigned that one and only one value, so

57
00:04:02.189 --> 00:04:05.389
在中间状态下你不能观察到它。
that you can't observe it in that intermediate state.

58
00:04:06.479 --> 00:04:10.533
所以他们为const发明了TDZ，然后他们说，
So they invented TDZ for const and then they said, well,

59
00:04:10.533 --> 00:04:14.937
如果我们要为const做，我们也可以为let做。
if we're gonna do it for const, we might as well do it for let.

60
00:04:14.937 --> 00:04:17.839
&gt；&gt；扬声器2：[听不到]&gt；&gt；扬声器1：这是事实。
&gt;&gt; Speaker 2: [INAUDIBLE] &gt;&gt; Speaker 1: That's the fact.

61
00:04:19.490 --> 00:04:23.860
所以让我们有一个TDZ，因为const在学术上需要一个TDZ。
So let's have a TDZ, because const academically needed a TDZ.

62
00:04:25.170 --> 00:04:26.370
我的建议？
My advice?

63
00:04:26.370 --> 00:04:31.000
就像我之前说的，把你所有的字母，或者如果你真的坚持
Just exactly as I said before, put all your lets, or if you really insist on

64
00:04:31.000 --> 00:04:34.930
冒号，把他们都放在最顶端，在第一行。
colons, put them all at the very top of the block, on the very first line.

65
00:04:34.930 --> 00:04:37.000
然后你就永远无法观察到TDZ了
And then you'll never be able to observe a TDZ.

66
00:04:37.000 --> 00:04:41.189
[笑]不要把它们串在那些范围内，那是个坏主意。
[LAUGH] Don't string them throughout those scopes, that's a bad idea.

67
00:04:42.310 --> 00:04:45.000
这样我们就不会说话了
Just so that we don't say things,

68
00:04:45.000 --> 00:04:48.680
有些人有时会在这些话题上与我意见相左。
and I have people that sometimes will disagree with me on these topics.

69
00:04:48.680 --> 00:04:54.326
这样我们就能完全清楚这个话题是不是或者
And just so that we're entirely clear on this topic of whether or

70
00:04:54.326 --> 00:04:56.529
不让不升起。
not let doesn't hoist.

71
00:04:56.529 --> 00:05:01.459
这里实际上是在规范中，它说变量是在它们的
Here is actually in the spec where it says that the variables are created when their

72
00:05:01.459 --> 00:05:04.620
实例化包含词汇环境。
containing lexical environment is instantiated.

73
00:05:04.620 --> 00:05:08.610
在计算词法绑定时，而不是在创建变量时。
When the lexical binding is evaluated, not when the variable's created.

74
00:05:09.910 --> 00:05:11.464
所以它就在说明书里。
So it's right there in the spec.

75
00:05:11.464 --> 00:05:15.814
最近有一场很大的推特大战，人们告诉我错了
There was a big Twitter war recently where people were telling me that I was wrong on

76
00:05:15.814 --> 00:05:18.829
说明书上就是这么说的。
this, and that's what it says in the spec.

77
00:05:18.829 --> 00:05:21.209
即使我们可能希望有不同的心理模型，
Even though we might like to have different mental models for it,

78
00:05:21.209 --> 00:05:22.098
说明书上是这么说的。
it's what it says in the spec.

79
00:05:23.180 --> 00:05:26.079
&gt；&gt；Speaker 3：为什么函数表达式不提升？
&gt;&gt; Speaker 3: Why do function expressions not hoist?

80
00:05:27.589 --> 00:05:31.720
我们可以在编译时与运行时的上下文中讨论这一点吗？
Could we talk about that in the context of compile time versus run time?

81
00:05:31.720 --> 00:05:32.720
&gt；&gt；扬声器1：好的。&gt；&gt；扬声器3：发生的事情
&gt;&gt; Speaker 1: Okay. &gt;&gt; Speaker 3: Things that happen for

82
00:05:32.720 --> 00:05:33.409
函数表达式。
the function expression.

83
00:05:33.409 --> 00:05:34.990
&gt；&gt；演讲者1：是的，这是一个好问题。
&gt;&gt; Speaker 1: Yeah, that's a good question.

84
00:05:34.990 --> 00:05:38.590
所以我不知道我能不能找到那张幻灯片，但如果你回想起来，
So I don't know if I could find the slide, but if you recall back,

85
00:05:38.590 --> 00:05:42.399
当您将函数表达式赋给变量时，
when you assign a function expression to a variable,

86
00:05:42.399 --> 00:05:48.220
变量装饰本身提升了，但赋值是运行时的事情。
the variables decoration itself hoisted, but the assignment is a run time thing.

87
00:05:48.220 --> 00:05:53.480
想象一下JavaScript对可执行代码重新排序的想法。
Imagine mentally the idea of JavaScript reordering your executable code.

88
00:05:53.480 --> 00:05:56.220
我们很快就会陷入混乱，对吧？
We would quickly descend into chaos, right?

89
00:05:56.220 --> 00:06:02.310
所以可执行代码不能在概念上重新排序，只能是声明性代码。
So executable code can't conceptually be reordered, only declarative code.

90
00:06:02.310 --> 00:06:07.230
所以我们可以说有一个叫X的东西，或者一个叫老师的东西，还有
So we can say that there is a thing called X, or a thing called teacher, and

91
00:06:07.230 --> 00:06:12.889
即使有一个叫做X的东西，它也会引用这个函数作用域。
even there is a thing called X that's gonna reference this function scope.

92
00:06:12.889 --> 00:06:14.600
我们可以声明性地做到这一点。
We can do that declaratively.

93
00:06:14.600 --> 00:06:19.629
但如果它是可以作为执行操作观察到的东西
But if it's something that is literally observable as an execution operation

94
00:06:19.629 --> 00:06:23.189
在程序中，不能提升，不能在编译时发生。
in a program, that can't hoist, that can't happen at compile time.

95
00:06:23.189 --> 00:06:24.199
它必须在运行时发生。
It has to happen at run time.

96
00:06:24.199 --> 00:06:28.610
它必须发生在程序中通常会发生的地方。
And it has to happen where in the program it would normally happen.

97
00:06:28.610 --> 00:06:32.009
否则，您将永远无法预测您的JavaScript。
Otherwise you would never be able to predict your JavaScript.

98
00:06:32.009 --> 00:06:36.829
&gt；&gt；Speaker 3：因此，如果在运行时指定函数表达式
&gt;&gt; Speaker 3: So at run time if you're assigning a function expression

99
00:06:36.829 --> 00:06:39.680
针对可变目标，
to a variable targeting,

100
00:06:41.300 --> 00:06:45.560
那么在该运行时过程中是否创建了一个新的作用域？
then is a new scope created during that run time process?

101
00:06:45.560 --> 00:06:46.699
&gt；&gt；演讲者1：好吧，让我们把话说清楚。
&gt;&gt; Speaker 1: Well, let's be clear.

102
00:06:46.699 --> 00:06:51.050
你问的是一个非常重要的问题，但上面有两层。
You're asking a very important question, but there's this two layered on top.

103
00:06:51.050 --> 00:06:53.529
第一，编译时仍然处理函数。
Number one, compile time still handled the function.

104
00:06:54.689 --> 00:06:56.090
它没有推迟处理，
It didn't defer handling,

105
00:06:56.090 --> 00:06:58.300
它不像它说的那样，我不知道那里有一个函数。
it's not like it said I don't know that there's a function there.

106
00:06:58.300 --> 00:07:00.737
它仍然是一个函数，它仍然需要有一个计划，
It's still a function, it still has to have a plan,

107
00:07:00.737 --> 00:07:05.449
它的彩色弹珠和所有其他东西的地图。
a map for its colored marbles and all of that other stuff.

108
00:07:05.449 --> 00:07:08.930
没有发生的是它在编译时没有得到，
What didn't happen is it didn't get, at compile time,

109
00:07:08.930 --> 00:07:14.889
与作用域中的某个标识符关联，但它仍然被编译了，好吗？
associated with some identifier in the scope, but it still got compiled, okay?

110
00:07:14.889 --> 00:07:15.920
所以这是第一位。
So that's number one.

111
00:07:15.920 --> 00:07:20.403
第二，所有功能都有其范围的计划，直到，
Number two, all functions have a plan for their scope, until,

112
00:07:20.403 --> 00:07:22.819
每次他们被处死。
and every time they get executed.

113
00:07:22.819 --> 00:07:27.374
因此，无论它是声明还是表达式，当它被执行时
So whether it was a declaration or an expression, when it gets executed is when

114
00:07:27.374 --> 00:07:30.754
整个地图绘制计划在记忆中变成了真实的东西，而且
that whole mapper plan becomes a real thing in memory, and

115
00:07:30.754 --> 00:07:33.519
每次它被执行，情况就是这样。
every time it gets executed, that is the case.

116
00:07:34.529 --> 00:07:37.170
所以这在声明和表达式之间没有区别。
So that's no different between declarations or expressions.
