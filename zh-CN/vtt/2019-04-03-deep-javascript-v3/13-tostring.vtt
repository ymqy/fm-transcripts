WEBVTT

1
00:00:00.030 --> 00:00:03.450
&gt；&gt；Kyle Simpson：那么让我们谈谈下一个抽象操作。
&gt;&gt; Kyle Simpson: So let's talk then about the next abstract operation.

2
00:00:03.450 --> 00:00:05.772
它叫做toString。
It's called toString.

3
00:00:05.772 --> 00:00:10.513
toString抽象操作就像它听起来一样。
The toString abstract operation does what it sounds like.

4
00:00:10.513 --> 00:00:13.050
标签上很有描述性。
It's very descriptive on the label.

5
00:00:13.050 --> 00:00:15.199
它可以接受任何值
It takes any value and

6
00:00:15.199 --> 00:00:20.260
以字符串形式为我们提供该值的表示。
gives us the representation of that value in string form.

7
00:00:20.260 --> 00:00:22.980
几乎每一个你能想象的价值都至少有一些
And almost every value that you can imagine has at least some

8
00:00:22.980 --> 00:00:25.989
一种字符串形式的表示。
kind of representation in string form.

9
00:00:25.989 --> 00:00:31.314
顺便说一句，在括号中我注意到了实际的spec部分，因为它们
By the way in the parentheses I'm noting the actual spec sections as they

10
00:00:31.314 --> 00:00:36.298
目前存在于ES2018版本中。
exist currently in the version at this moment which is ES2018.

11
00:00:36.298 --> 00:00:41.000
他们对ES2019规范进行了投票，它将在今年晚些时候发布。
They voted on the ES2019 spec and it'll come out a little bit later this year.

12
00:00:41.000 --> 00:00:45.039
希望这些区号中的大多数不会改变，但那些是
Hopefully most of these section numbers won't change but those are for

13
00:00:45.039 --> 00:00:46.420
ES2018规格。
the ES2018 specs.

14
00:00:46.420 --> 00:00:48.070
好的，toString操作。
Okay so the toString opperation.

15
00:00:49.179 --> 00:00:53.399
让我来给你们展示一些事情的例子，
Boiling down a bunch of details let me just show you some examples of things and

16
00:00:53.399 --> 00:00:56.079
他们最终产生的字符串表示。
what they end up producing as a string representation.

17
00:00:56.079 --> 00:00:58.789
在大多数情况下，这些都是您所期望的。
And for the most part these are exactly what you'd expect.

18
00:00:58.789 --> 00:01:01.740
如果您有一个NULL值，并且您最终执行了toString
If you had a null value and you ended up doing that toString

19
00:01:01.740 --> 00:01:04.599
抽象操作在某种程度上，你会得到引用空。
abstract operation in some way, you'd get quote null.

20
00:01:04.599 --> 00:01:10.569
未定义的，真的，假的，浮点数，甚至是零都是一样的。
Same thing with undefined, true false, floating point numbers, even the zero.

21
00:01:10.569 --> 00:01:13.789
当我们看到负零时，事情变得有点奇怪，记住这一点。
Things get a little strange when we look at the negative zero, remember that.

22
00:01:13.789 --> 00:01:18.069
我们已经看到了它的谎言，负零谎言的toString操作和
We already saw that it lies, the toString operation for negative zero lies and

23
00:01:18.069 --> 00:01:20.210
生成报价，零。
produces a quote, zero.

24
00:01:20.210 --> 00:01:22.010
所以这是一个角落的案例
So that's one of the corner cases and

25
00:01:22.010 --> 00:01:23.569
稍后我们将更多地讨论角落案例。
we'll talk more about corner cases in a bit.

26
00:01:25.484 --> 00:01:30.250
好的，如果我们对一个对象调用toString，记住它将调用
All right so if we call toString on an object remember it's going to invoke

27
00:01:30.250 --> 00:01:33.870
带有字符串提示的toPrimitive。
the toPrimitive with the string hint.

28
00:01:33.870 --> 00:01:35.310
那我们能得到什么？
So what's that going to give us?

29
00:01:35.310 --> 00:01:39.109
记住，它最终会先调用toString，然后
Remember that's gonna end up calling toString first and

30
00:01:39.109 --> 00:01:41.819
如果它存在，那么它将使用valueOf。
if it's present and then it's going to use valueOf.

31
00:01:41.819 --> 00:01:43.549
这就是它的顺序。
That's the order that it does.

32
00:01:43.549 --> 00:01:46.180
那么在某个特定的物体上会是什么样子呢？
So what's that gonna look like on some particular object?

33
00:01:46.180 --> 00:01:51.020
嗯，如果它是一个数组，例如，数组有一个默认的toString，
Well, if it's an array, for example, arrays have a default toString,

34
00:01:51.020 --> 00:01:55.409
它序列化数组的表示。
which serializes the representation of the array.

35
00:01:55.409 --> 00:01:57.420
这是一个有点奇怪的序列化，
It's a bit of a strange serialization,

36
00:01:57.420 --> 00:02:00.879
在我看来，因为他们把括号去掉了。
in my opinion, because they're leaving off the brackets.

37
00:02:00.879 --> 00:02:06.060
因此，如果序列化了一个空数组，就会得到一个空字符串。
So if you serialized a empty array, you get an empty string.

38
00:02:06.060 --> 00:02:08.330
我认为那是一个非常愚蠢的决定。
I think that was a really dumb decision.

39
00:02:08.330 --> 00:02:10.879
我不知道他们为什么不用括号。
I don't know why they left off the brackets.

40
00:02:10.879 --> 00:02:13.800
因为事实证明，有很多东西可以序列化为字符串。
Because it turns out, there's a bunch of things that can serialize to strings.

41
00:02:13.800 --> 00:02:18.259
那么我怎么知道它是否是空数组呢？
So how am I supposed to know whether it was an empty array?

42
00:02:18.259 --> 00:02:20.469
但无论如何，这就是它的工作原理。
But nevertheless, this is how it works.

43
00:02:20.469 --> 00:02:24.300
数组上的内置toString去掉了括号。
The built-in toString on arrays leaves off the brackets.

44
00:02:24.300 --> 00:02:26.396
如果我们有一个包含一些内容的数组，
If we have an array with some contents in it,

45
00:02:26.396 --> 00:02:29.530
它将显示这些内容，除非它们是空的和未定义的。
it'll show those contents unless they're null and undefined.

46
00:02:29.530 --> 00:02:33.650
更奇怪的是，它的toString定义。
And this is even weirder, the toString definition for this.

47
00:02:33.650 --> 00:02:37.025
前几天我实际上只是在读规范，我想他们到底为什么
I actually was just reading the spec the other day and I was like why on earth they

48
00:02:37.025 --> 00:02:42.490
这样做，空值和取消定义，当它们出现在数组中时，就会被忽略。
do this, nulls and undefines, when they show up in arrays just get left out.

49
00:02:44.030 --> 00:02:45.180
我的意思是他们现在就在那里。
I mean they're there presently.

50
00:02:45.180 --> 00:02:46.300
你可以看到那里有一个逗号。
You can see there's a comma there.

51
00:02:46.300 --> 00:02:48.829
他们目前在那里的位置，但是
They're there presently in terms of position, but

52
00:02:48.829 --> 00:02:53.475
它们不表示为空值和取消定义方式为空值和
they're not represented as nulls and undefines the way null and

53
00:02:53.475 --> 00:02:57.883
取消定义toString何时执行。
undefine when toStrings do.

54
00:02:58.969 --> 00:03:01.628
在我看来，这是一种奇怪的矛盾。
In my opinion, a bizarre inconsistency.

55
00:03:03.379 --> 00:03:07.806
从本质上讲，数组到字符串的转换就像您可以在开发中使用它一样
Essentially, array to stringification is like maybe you could use it in the dev

56
00:03:07.806 --> 00:03:12.231
控制台，但我永远不会在我的程序中使用这样的东西，因为所有这些
console but I would never use something like this in my program because all these

57
00:03:12.231 --> 00:03:14.301
其行为的怪异角落案例。
weird corner cases of its behavior.

58
00:03:17.201 --> 00:03:18.530
&gt；&gt；Kyle Simpson：关于对象呢？
&gt;&gt; Kyle Simpson: What about on objects?

59
00:03:18.530 --> 00:03:21.689
我相信你们都看过这个括号物体的东西就像，
I'm sure you've all seen the bracket object object thing which is like,

60
00:03:21.689 --> 00:03:22.969
那到底是什么？
what on earth is that?

61
00:03:22.969 --> 00:03:28.229
Prototype对象上的默认toString是to
The default toString on the object of prototype is to

62
00:03:28.229 --> 00:03:29.900
做那个括号的事。
do that whole bracket thing.

63
00:03:29.900 --> 00:03:34.750
而这个，让我在这里咆哮一小会儿，他们到底为什么
And this, let me just rant for just a micro moment here, why on earth did they

64
00:03:34.750 --> 00:03:38.840
去掉数组的方括号，把方括号放在对象上？
leave off the square brackets for arrays and put the square brackets on objects?

65
00:03:39.870 --> 00:03:42.889
谁来给我解释一下，到底是什么。
Somebody explain that to me, what on earth.

66
00:03:44.079 --> 00:03:44.659
疯子。
Bonkers.

67
00:03:44.659 --> 00:03:48.719
好的，但回到现实一会儿。
Okay but back to reality for a moment.

68
00:03:48.719 --> 00:03:52.370
它做了方括号，做了一个小写的对象
It does the square brackets, it does a lower case object and

69
00:03:52.370 --> 00:03:55.877
然后它把这个东西放进去，这个东西叫做字符串标签。
then it puts in this thing which is called the string tag.

70
00:03:55.877 --> 00:03:59.490
事实证明，您实际上可以覆盖String标记
And it turns out you can actually override the string tag for

71
00:03:59.490 --> 00:04:02.680
使用ES6符号的任何您自己的自定义对象。
any of your own custom objects using an ES6 symbol.

72
00:04:02.680 --> 00:04:05.430
你可以，它叫做toString标签，你可以改变它。
You can, it's called toString tag and you can change it.

73
00:04:05.430 --> 00:04:10.490
因此您可以将其从字符串中Object Thhere更改为
So you could change it from saying Object there in that string to saying

74
00:04:10.490 --> 00:04:13.169
我最喜欢的号码，或者你想说的任何东西。
my favorite number, or whatever you want it to say.

75
00:04:13.169 --> 00:04:15.323
这是元编程的事情，但这是可能的。
That's a meta programming thing but it is possible to do.

76
00:04:15.323 --> 00:04:20.139
因此对象对于所有默认对象都有默认字符串标记。
So that Object there is the default string tag for all default objects.

77
00:04:20.139 --> 00:04:22.509
然后toString方法接受该字符串标记并
And then the toString method takes that string tag and

78
00:04:22.509 --> 00:04:24.470
把其他垃圾包起来。
wraps this other junk around it.

79
00:04:24.470 --> 00:04:28.310
如果超越toString方法，则可以完全控制
If you over ride the toString method, you can completely control

80
00:04:28.310 --> 00:04:31.500
你希望你的对象的约束看起来像什么。
what you want the stringtification of your object to look like.

81
00:04:31.500 --> 00:04:34.629
在本例中，我让它旋转，只返回一个字符串X。
In this case, I'm making it turn, return just a string X.

82
00:04:36.180 --> 00:04:41.240
顺便说一下，我使用了这个方法，我定义了一个toString方法，
I have used this by the way, I have defined a toString method,

83
00:04:41.240 --> 00:04:44.750
但我把它定义为一种Getter
but I've defined it as a getter so

84
00:04:44.750 --> 00:04:49.879
它可以在字符串标记中动态返回。
that it can be dynamically returned in the string tag.

85
00:04:49.879 --> 00:04:52.980
我以这样的方式定义了它，这样，在一个对象上，
I've defined this in such a way so that, on an object,

86
00:04:52.980 --> 00:04:54.230
我也不是一直都这样。
and I don't do this all the time.

87
00:04:54.230 --> 00:04:56.781
但是如果我试图理解一个对象的上下文中是什么，
But if I'm trying to understand what's in the context of an object,

88
00:04:56.781 --> 00:04:59.279
对象对我没有帮助。
object Object is not helpful to me.

89
00:04:59.279 --> 00:05:04.370
但是您可以覆盖它，并告诉它JSON-stringify对象和
But you can override it, and tell it to JSON-stringify the object and

90
00:05:04.370 --> 00:05:06.889
打印这些结果，这样更好。
print those results, and that is much nicer.

91
00:05:06.889 --> 00:05:08.290
因此您可以覆盖toString，
So you can override a toString,

92
00:05:08.290 --> 00:05:11.100
或字符串标记，以在开发控制台中帮助您。
or the string tag, to help you in the dev console.

93
00:05:11.100 --> 00:05:14.439
但同样，这不是我通常会做的那种元编程
But again, this is not the sort of metaprogramming I would typically do

94
00:05:14.439 --> 00:05:15.589
在我的程序中。
much in my programs.
