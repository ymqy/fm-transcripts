WEBVTT

1
00:00:00.000 --> 00:00:01.730
&GT；&GT；Kyle Simpson：有一种相信的诱惑，并且
&gt;&gt; Kyle Simpson: There is a temptation to believe, and

2
00:00:01.730 --> 00:00:05.610
这是社区中的一种邪教感觉，
it's sort of a cult feeling among the community,

3
00:00:05.610 --> 00:00:11.169
大多数开发人员倾向于认为隐式机制是神奇的。
most developers tend to think that implicit mechanisms are magical.

4
00:00:11.169 --> 00:00:14.779
当一些事情发生在幕后，而它并不明显，
That when something happens underneath the scenes, and it wasn't obvious,

5
00:00:14.779 --> 00:00:16.256
那就是某种魔法
then it's some sort of magic.

6
00:00:16.256 --> 00:00:21.719
我们倾向于把魔法等同于邪恶，
And we tend to equate magic with bad, evil,

7
00:00:21.719 --> 00:00:26.056
这样不好，因为我不能理解发生了什么。
like this is not good because I can't understand what's happening.

8
00:00:26.056 --> 00:00:31.460
这就是为什么反强制的前景
And this is a predominant reason why that anti-coercion prospective

9
00:00:31.460 --> 00:00:37.960
存在是因为人们觉得强迫的隐蔽性是没落的
exists is because people feel like the implicitness of coercion is the downfall

10
00:00:37.960 --> 00:00:43.490
其中他们指出了Java或C+之类的类型转换的显性。
where they point to explicitness of type casting in something like Java or C++.

11
00:00:43.490 --> 00:00:44.409
然后他们说
And then they say,

12
00:00:44.409 --> 00:00:49.789
您永远不会自动将整数转换为浮点数或其他任何形式。
you would never automatically convert an integer into a float or whatever.

13
00:00:49.789 --> 00:00:53.722
但是JavaScript做了所有这种自动的事情，然后他们说，好吧，
But JavaScript does all this sort of automatic stuff and then they say, well,

14
00:00:53.722 --> 00:00:57.020
这是JavaScript的一个弱点，因为它既神奇又糟糕。
that's a weakness of JavaScript because it's magical and bad.

15
00:00:57.020 --> 00:00:58.820
我不认为是这两件事中的任何一件，
I don't think it's either of those things,

16
00:00:58.820 --> 00:01:01.750
我认为我们应该把含蓄看作抽象。
I think that we should think about implicitness as abstraction.

17
00:01:03.280 --> 00:01:06.879
并不是所有的抽象都是好的，但是一些抽象是必要的。
Not all abstractions are good, but some abstractions are necessary.

18
00:01:08.859 --> 00:01:12.640
隐含，我们这里不是在处理函数式编程。
Implicitness, and we're not dealing with functional programming here.

19
00:01:12.640 --> 00:01:15.219
这不是这个课程，那是不同的课程。
This is not this course, that's a different course.

20
00:01:15.219 --> 00:01:19.069
这里有一个插头，你可以查看我的函数式编程课程。
Here's a plug, you can check on my functional programming course.

21
00:01:19.069 --> 00:01:23.250
但在函数式编程中，您可以到处使用抽象。
But within functional programming, you use abstraction all over the place.

22
00:01:23.250 --> 00:01:27.109
事实证明，声明性编码风格实际上更隐含。
And it turns out that the declarative style of coding is actually more implicit.

23
00:01:29.170 --> 00:01:32.908
所以含蓄并不是坏事，它是阻碍的恰当用法。
So implicitness is not bad, it is the proper usage of obstruction.

24
00:01:34.020 --> 00:01:39.750
换句话说，我们想隐藏关键的不必要的细节，为什么？
In other words, we want to hide key unnecessary details, why?

25
00:01:39.750 --> 00:01:43.329
因为这会让读者重新关注重要的东西。
Because that re-focuses the reader on the important stuff.

26
00:01:43.329 --> 00:01:48.340
我们不是用他们不需要的东西来分散他们的注意力。
We're not distracting them with the stuff that they don't need.

27
00:01:48.340 --> 00:01:49.331
我们想聚焦他们。
We wanna focus them.

28
00:01:49.331 --> 00:01:52.579
我们想通过重新聚焦来增加代码的清晰度。
We wanna increase the clarity of the code by re-focusing.

29
00:01:52.579 --> 00:01:58.030
所以JavaScript类型系统的一些隐含本质是粗略的，
So some of the implicit nature of JavaScript's type system is sketchy,

30
00:01:59.030 --> 00:02:00.900
但其中一些是相当有用的。
but some of it is quite useful.

31
00:02:00.900 --> 00:02:02.010
比如拳击。
For example, the boxing.

32
00:02:02.010 --> 00:02:05.599
这是隐含的，但也非常有用，因为不得不
That's implicit, but also very useful, because the distraction of having to

33
00:02:05.599 --> 00:02:09.490
在大多数情况下，我会争辩说，把它扔进一个物体并不是，
cast it into an object isn't, what I would argue in most cases,

34
00:02:09.490 --> 00:02:12.199
读者不需要的不必要的细节。
an unnecessary detail that the reader doesn't need.

35
00:02:13.680 --> 00:02:16.670
这实际上是JavaScript的DNA。
And that's actually at the DNA of JavaScript.

36
00:02:16.670 --> 00:02:19.590
JavaScript具有如此低的进入壁垒的部分原因
Part of the reason JavaScript has such a low barrier to entry

37
00:02:19.590 --> 00:02:23.060
是因为它不会强迫读者处理一堆不必要的细节。
is because it doesn't force the reader to deal with a bunch of unnecessary detail.

38
00:02:24.569 --> 00:02:27.378
它背叛了JavaScript的DNA来暗示所有这些隐含的
It betrays JavaScript's DNA to suggest that all those implicit

39
00:02:27.378 --> 00:02:29.156
有些事情是我们应该避免的。
things are things that we should avoid.

40
00:02:31.788 --> 00:02:35.586
&gt；&gt；Kyle Simpson：所以在这里，如果我写字符串是为了让它非常明显，我是
&gt;&gt; Kyle Simpson: So here, if I'm writing string to make it super obvious that I'm

41
00:02:35.586 --> 00:02:40.439
把这东西弄成一根绳子，我不知道，我觉得这会让人分心。
gonna make this thing into a string, I don't know, I think that's distracting.

42
00:02:40.439 --> 00:02:43.789
我想我会把号码放进去
I think I would just drop in the number and

43
00:02:43.789 --> 00:02:47.500
非常高兴，因为我知道这个数字永远不会出现在任何一个角落里
be perfectly happy, because I know that number is never in any of those corner

44
00:02:47.500 --> 00:02:48.878
有些事情可能会很奇怪。
cases where something could be weird.

45
00:02:50.379 --> 00:02:54.639
例如，也许我已经检查过，以确保num Students不是NaN。
Maybe I've already checked to make sure that num students is not nan, for example.

46
00:02:55.900 --> 00:03:00.221
所有其他的数字，它可能不是负零和
All the other numbers that it could possibly be other than negative zero and

47
00:03:00.221 --> 00:03:04.139
南，这些是我唯一需要担心的角落案件。
nan, those are my only corner cases that I need to worry about here.

48
00:03:05.159 --> 00:03:08.699
因此，如果我有处理这些角落情况的if语句，那么这行
So if I have if statements that deal with those corner cases, then this line of

49
00:03:08.699 --> 00:03:12.830
代码，第4行，实际上是更好的沟通，因为它适当地让
code, line 4, is actually better communication, cuz it properly lets

50
00:03:12.830 --> 00:03:17.085
JavaScript抽象了当时不需要处理的细节。
JavaScript abstract the detail that's not necessary to deal with at that moment.

51
00:03:17.085 --> 00:03:19.949
这是另一个例子，小于运算符，
Here's another example, the less than operator,

52
00:03:19.949 --> 00:03:22.818
我们讨论了它是如何将事物强制成数字的。
we talked about how it coerces things into numbers.

53
00:03:24.449 --> 00:03:25.840
有时你想继续前进
Sometimes you wanna go ahead and

54
00:03:25.840 --> 00:03:29.729
确保它们都是一个数字，这样你就不会得到一些奇怪的东西。
make sure that both of them are a number so that you don't get something weird.

55
00:03:29.729 --> 00:03:34.819
例如，如果它们都是字符串，则不会将它们都转换为数字。
For example, if both of them are strings, it doesn't turn them both into numbers.

56
00:03:34.819 --> 00:03:37.990
小于运算符进行字母数字比较。
The less than operator does an alphanumeric comparison.

57
00:03:39.050 --> 00:03:42.710
所以有一个角落的情况，如果你可能有一个小于适用于两个
So there's a corner case, if you could possibly have a less than applied to two

58
00:03:42.710 --> 00:03:46.389
字符串，您可能希望首先确定它们都是数字。
strings, you probably do wanna make sure that they're both numbers first.

59
00:03:46.389 --> 00:03:49.659
但如果我在代码的某个地方，我知道其中至少有一个是
But if I'm in a place of the code where I know at least one of them is

60
00:03:49.659 --> 00:03:50.789
肯定是个数字？
definitely a number?

61
00:03:52.460 --> 00:03:55.729
好吧，那么，我知道另一个会变成一个数字，所以可能不是
Well then, I know the other one's gonna become a number, so maybe it's not

62
00:03:55.729 --> 00:03:59.729
为了迫使你读到我让他们两个都是数字的事实。
necessary to force you to read the fact that I'm making them both numbers.

63
00:03:59.729 --> 00:04:03.240
也许它是好的，让小于操作符做强制形式。
Maybe it's okay, to let that less than operator do the coercion form.

64
00:04:04.360 --> 00:04:06.479
这些不是硬性规定，
These are not hard and fast rules,

65
00:04:06.479 --> 00:04:10.229
这些都是试图训练你这样思考和分析。
these are trying to train you to think like this to analyze.

66
00:04:10.229 --> 00:04:14.530
如果你在一个地方，你可以选择使用强制手段，但是
And if you are in a place where you have the choice to use coercion but

67
00:04:14.530 --> 00:04:18.759
这并不明显，这是在你的职权范围内，使它显而易见。
it's not obvious, it's within your purview to make it obvious.

68
00:04:20.269 --> 00:04:22.410
很明显他们都是数字和
Make it obvious that they're both numbers and

69
00:04:22.410 --> 00:04:24.850
因此，我不需要担心显式转换它们。
therefore, I don't need to worry about explicitly casting them.

70
00:04:24.850 --> 00:04:27.569
很明显它们都是数字。
It's just already obvious that they're both numbers.

71
00:04:27.569 --> 00:04:31.591
如果您传达了这个意图，它就不会绊倒代码的其他读取器。
If you communicate that intent, it's not gonna trip up other readers of the code.

72
00:04:35.778 --> 00:04:37.182
&gt；&gt；Kyle Simpson：真的，问题是，
&gt;&gt; Kyle Simpson: Really, the question is,

73
00:04:37.182 --> 00:04:40.310
显示这些额外的细节对读者有没有帮助？
is showing these extra details helpful to the reader or not?

74
00:04:41.579 --> 00:04:42.971
有时是，有时不是。
Sometimes yes, sometimes no.

75
00:04:45.826 --> 00:04:51.422
&GT；&GT；凯尔·辛普森：基本上，我要求你们成为批判性的，分析性的思想家，
&gt;&gt; Kyle Simpson: Basically, I'm asking you to be critical, analytical thinkers,

76
00:04:51.422 --> 00:04:55.189
做一名工程师而不是代码猴子，好吗？
to be an engineer and not a code monkey, okay?
