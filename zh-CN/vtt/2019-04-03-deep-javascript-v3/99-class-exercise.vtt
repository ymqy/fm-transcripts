WEBVTT

1
00:00:00.050 --> 00:00:03.819
&gt；&gt；Kyle Simpson：在本单元的最后一次练习中，我们将查看和
&gt;&gt; Kyle Simpson: In our final exercise of this unit, we're gonna look at and

2
00:00:03.819 --> 00:00:05.700
使用class关键字进行练习。
practice with the class keyword.

3
00:00:06.809 --> 00:00:15.000
您将把名称空间对象重构为使用类系统。
You're going to be refactoring a namespace object into using a class system.

4
00:00:15.000 --> 00:00:18.403
因此，如果您有一个带有this aware编码的命名空间模式，并且
So if you had a namespace pattern with the this aware coding and

5
00:00:18.403 --> 00:00:22.332
您希望改为使用类语法来尝试组织该代码，
you wanted to instead use the class syntax to try to organize that code,

6
00:00:22.332 --> 00:00:26.609
然后我们将把它重构成类语法。
then we're gonna be refactoring it into that class syntax.

7
00:00:26.609 --> 00:00:31.260
特别是在这里，我们将利用类扩展。
In particular, here, we're gonna take advantage of the class extends.

8
00:00:31.260 --> 00:00:33.829
所以有几个功能
So there are a couple of functions

9
00:00:33.829 --> 00:00:37.780
在此命名空间的定义中不知道这一点。
within the definition of this namespace that are not this aware.

10
00:00:37.780 --> 00:00:41.689
他们没有理由特别关注
And there's no reason for them to be specifically on

11
00:00:41.689 --> 00:00:46.219
这个我们称之为工作坊的特殊物体。
this particular object that we're calling workshop.

12
00:00:46.219 --> 00:00:47.850
他们本质上是帮手。
They are essentially helpers.

13
00:00:47.850 --> 00:00:50.490
所以我们要做的是有一个名为helpers的父类。
So what we're gonna do is have a parent class called helpers.

14
00:00:50.490 --> 00:00:54.088
然后，我们将有一个扩展帮助器的子类，并且
And then, we're gonna have a child class that extends helpers, and

15
00:00:54.088 --> 00:00:57.500
那个儿童班就是那个将被称为工作坊的班级
that child class is the one that's gonna be called workshop, and

16
00:00:57.500 --> 00:00:59.192
它将继承这些帮助者。
it will inherit those helpers.

17
00:00:59.192 --> 00:01:00.585
所以换句话说，
So in other words,

18
00:01:00.585 --> 00:01:06.010
它将通过继承组成以访问这些帮助者。
it will compose through inheritance to have access to those helpers.

19
00:01:06.010 --> 00:01:09.810
而那些人不需要被如此束缚，因为他们并没有意识到这一点。
And those won't need to be this bound, because they aren't this aware.

20
00:01:09.810 --> 00:01:14.460
如果您查看ex JS，您会注意到您有一个名称空间对象。
If you look at the EX JS, you'll notice that you have a namespaced object.

21
00:01:14.460 --> 00:01:18.269
所有方法前面都有这个点引用。
All the methods with all the this dot references in front of them.

22
00:01:18.269 --> 00:01:22.305
而且你确实有一些地方你的函数并没有意识到这一点，所以
And you do have some places where you have functions that are not this aware, so

23
00:01:22.305 --> 00:01:23.415
他们没有被捆绑。
they're not bound.

24
00:01:23.415 --> 00:01:25.915
但是你还有其他的地方可以约束他们，而且
But you have other places where they are bound, and

25
00:01:25.915 --> 00:01:30.620
你需要确保一旦你连接了一个类系统，这些仍然可以工作。
you need to make sure that those are still working once you wire up a class system.

26
00:01:30.620 --> 00:01:34.329
所以这里的想法是不是在一个对象上定义所有这些东西，
So the idea here is instead of defining all these things on an object,

27
00:01:34.329 --> 00:01:37.979
您将在一个类中将所有这些定义为方法，并且
you're gonna be defining all of these as methods in a class, and

28
00:01:37.979 --> 00:01:41.299
然后实例化该类并使用它。
then instantiating that class and using it.

29
00:01:41.299 --> 00:01:47.783
这就是课堂练习的内容。
So that's the substance of the exercise on class.

30
00:01:47.783 --> 00:01:50.960
我们将在几分钟后回来讨论该解决方案。
We'll be back in a few minutes to talk through that solution.

31
00:01:50.960 --> 00:01:52.572
一如既往，如果你卡住了
As always, if you get stuck and

32
00:01:52.572 --> 00:01:56.299
你需要一个提示，你可以检查出解决方案在EX点固定文件。
you need a hint, you can check out the solution in the ex dot fixed file.

33
00:01:57.719 --> 00:02:01.212
&gt；&gt；扬声器2：所以听起来像是要分解成这些感知对象，
&gt;&gt; Speaker 2: So it sounds like for breaking down into this aware objects,

34
00:02:01.212 --> 00:02:04.224
基本原理不是关于大小和可读性，而是
the rationale is less about size and readability and

35
00:02:04.224 --> 00:02:08.552
更多关于分离关注点的地方，你会想要每一个，有点-
more about the separation of concerns where you would want each, kind of-

36
00:02:08.552 --> 00:02:09.213
&gt；&gt；Kyle Simpson：是的。
&gt;&gt; Kyle Simpson: Yes.

37
00:02:09.213 --> 00:02:11.900
&gt；&gt；扬声器2：好的，酷。你回到指导逻辑
&gt;&gt; Speaker 2: Okay, cool. You going back to the guiding logic

38
00:02:11.900 --> 00:02:15.919
结构的，对象开始和结束的位置。
of the structuring, where an object begins and ends for this composition.

39
00:02:15.919 --> 00:02:16.688
&gt；&gt；Kyle Simpson：是的。&gt；&gt；发言人2：这个代表团。
&gt;&gt; Kyle Simpson: Yeah. &gt;&gt; Speaker 2: This delegation.

40
00:02:17.719 --> 00:02:21.689
&gt；&gt；Kyle Simpson：我认为这是真实的，完全独立于你是选择还是
&gt;&gt; Kyle Simpson: I think that's true entirely separate of whether you choose or

41
00:02:21.689 --> 00:02:23.889
您可以选择类，或者选择模块，或者
you choose classes or you choose modules or

42
00:02:23.889 --> 00:02:26.289
你可以选择其他的组织模式。
you choose some other organization pattern.

43
00:02:26.289 --> 00:02:30.150
我认为你应该问什么在逻辑上可以结合在一起
I think you should be asking what logically fits together and

44
00:02:30.150 --> 00:02:32.352
试着拥有最小的碎片。
try to have the smallest pieces.

45
00:02:32.352 --> 00:02:39.515
我的意思是，我不一定总是喜欢单一责任原则，
I mean, I don't necessarily always go to like the single responsibility principle,

46
00:02:39.515 --> 00:02:44.139
但这是一个合理的方向，对吗？
but that is a reasonable place to head towards, right?

47
00:02:44.139 --> 00:02:51.979
把这看作是一个指导原则是合理的。
It's reasonable to think about that as like a guiding principle.

48
00:02:51.979 --> 00:02:54.759
如果这个东西在做一堆不同的事情，也许那应该
That if this thing is doing a bunch of different stuff, maybe that should

49
00:02:54.759 --> 00:02:57.289
只是做几件不同的事情，做那些不同的作品。
just be several different things doing those different pieces.
