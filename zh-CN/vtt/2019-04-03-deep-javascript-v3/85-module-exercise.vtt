WEBVTT

1
00:00:00.000 --> 00:00:03.875
&gt；&gt；Kyle Simpson：让我们深入练习这个模块模式
&gt;&gt; Kyle Simpson: Let's dive into an exercise to practice this module pattern

2
00:00:03.875 --> 00:00:06.009
我们刚刚得知的。
that we've just learned about.

3
00:00:06.009 --> 00:00:10.848
在本练习中，您将重构一些管理
In this exercise, you are gonna be refactoring some code that manages

4
00:00:10.848 --> 00:00:13.638
车间的注册记录。
the enrollment records for a workshop.

5
00:00:13.638 --> 00:00:16.399
你不会改变功能，但是
You're not gonna be changing the functionality, but

6
00:00:16.399 --> 00:00:20.478
您将重新排列代码，以使用我们所学到的经典或
you are gonna be rearranging the code, to use what we learned about the classic or

7
00:00:20.478 --> 00:00:22.106
显示模块模式。
the revealing module pattern.

8
00:00:22.106 --> 00:00:24.047
顺便说一下，作为奖励，
As a bonus, by the way,

9
00:00:24.047 --> 00:00:29.678
也可以尝试使用ES6模块语法重写它，
feel free to also try re-writing this using the ES6 module syntax,

10
00:00:29.678 --> 00:00:34.451
在您完成练习的原始版本之后。
after you've done the original version of the exercise.

11
00:00:34.451 --> 00:00:40.857
所以，你的说明放在这里，它应该是相当直接的，但是
So, your instructions are laid out here, it should be fairly straightforward but

12
00:00:40.857 --> 00:00:45.709
您的说明包括定义模块工厂函数
your instructions include defining a module factory function

13
00:00:45.709 --> 00:00:49.645
称为定义工作坊，它将制作和
called defineWorkshop, that's going to make and

14
00:00:49.645 --> 00:00:54.789
返回那些代表公共API的对象实例。
return those object instances that represent the public API's.

15
00:00:54.789 --> 00:00:59.779
这五个方法或函数是需要在公共API上公开的，
These five methods or functions are what needs to be exposed on the public API,

16
00:00:59.779 --> 00:01:03.265
你最终会定义这些函数。
and you're going to end up defining those functions.

17
00:01:03.265 --> 00:01:05.155
所以这些是不存在的。
So these are ones that don't exist.

18
00:01:05.155 --> 00:01:08.612
您将在公共API中公开它们，然后定义它们。
You're gonna expose them in the public API and then define them.

19
00:01:08.612 --> 00:01:12.876
然后您将移动currentEnrollment和StudentRecords
And you're going to move the currentEnrollment and studentRecords

20
00:01:12.876 --> 00:01:17.736
数组添加到模块中，但它们需要是模块内部的空数组。
arrays into the module, but they need to be empty arrays inside of the module.

21
00:01:17.736 --> 00:01:21.989
然后从外部使用addStudent和
And then you're going to from the outside use the addStudent and

22
00:01:21.989 --> 00:01:27.121
entrlStudent函数将数据推送到模块实例中，好吗？
enrollStudent functions to push the data into your module instance, okay?

23
00:01:27.121 --> 00:01:32.299
所以我们不会把数据嵌入到一个毫无意义的模块中，
So we're not gonna embed data into a module that doesn't make any sense,

24
00:01:32.299 --> 00:01:34.566
或者将数据硬编码到模块中。
or hard code data into a module.

25
00:01:34.566 --> 00:01:41.253
因此，您将在这里将所有这些对数组的赋值更改为函数调用。
So you'll change all of those assignments to the array into function calls here.

26
00:01:41.253 --> 00:01:46.060
然后我们将使用定义的工作坊来制作一个模块
And then we're going to use that defineWorkshop to make a module

27
00:01:46.060 --> 00:01:48.026
实例名为Deep JS。
instance called deepJS.

28
00:01:48.026 --> 00:01:53.209
然后我们将多次调用Deep JS.addStudent来添加学生记录，
Then we'll call deepJS.addstudent multiple times to add in the student records,

29
00:01:53.209 --> 00:01:57.376
我们将多次调用Deep JS.entrlStudent来注册它们。
we'll call deepJS.enrollStudent several times to enroll them.

30
00:01:57.376 --> 00:02:04.128
然后我们将更改对其他可执行文件的引用，
And then we will change the references to the other executables,

31
00:02:04.128 --> 00:02:09.175
到它们在Deep JS模块API上的对应部分。
to their counterparts on the deepJS module API.

32
00:02:09.175 --> 00:02:11.313
这就是对你正在做的事情的概述。
So that's an overview of what you're doing.

33
00:02:11.313 --> 00:02:15.412
如果你看一下EXJS文件，这就是它看起来的样子，
if you look at the EXJS file, this is what it looks like,

34
00:02:15.412 --> 00:02:21.275
功能在底部，通常它们被拆分并提升。
the functions are at the bottom, and generally they are split out and hoisted.

35
00:02:21.275 --> 00:02:26.478
你只是简单地接受这个文件，而不是改变它本身的行为，
And you're simply taking this file not changing it's behavior per se,

36
00:02:26.478 --> 00:02:28.873
但将其格式化为模块。
but formatting this as a module.

37
00:02:28.873 --> 00:02:32.438
你试图在这里获得的好处是
The take away that you're trying to get here is the advantages of

38
00:02:32.438 --> 00:02:36.875
模块模式隐藏了不需要公开的细节。
the module pattern, are hiding details that aren't necessary to be exposed.

39
00:02:36.875 --> 00:02:38.389
没有必要
It is not necessary for

40
00:02:38.389 --> 00:02:43.417
任何人都知道数组是跟踪当前注册的对象。
anybody to know that an array is what is tracking the current enrollments.

41
00:02:43.417 --> 00:02:47.194
或者有一组跟踪当前学生记录的对象。
Or that there's an array of objects tracking the current student records.

42
00:02:47.194 --> 00:02:49.405
这是一个实现细节，并且
That is an implementation detail, and

43
00:02:49.405 --> 00:02:53.158
所有的软件工程都告诉我们应该隐藏起来。
all manner of software engineering tells that ought to be hidden.

44
00:02:53.158 --> 00:02:56.903
这样它就可以在将来被重构，这样它就不会被滥用。
So that it can be future refactored, so that it can't be abused.

45
00:02:56.903 --> 00:03:01.478
所以这里的想法是使用模型模式来隐藏必要的细节，
So the idea here is use the model pattern to hide the details that are necessary,

46
00:03:01.478 --> 00:03:04.770
只公开那些必要的公共IP方法。
only expose those public IP methods that's necessary.
