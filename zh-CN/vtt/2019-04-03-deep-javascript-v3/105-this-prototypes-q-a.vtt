WEBVTT

1
00:00:00.420 --> 00:00:02.970
&gt；&gt；Speaker 2：如果函数已使用BIND绑定
&gt;&gt; Speaker 2: If function is already bound using bind

2
00:00:02.970 --> 00:00:05.459
以后可以反弹到不同的对象。
can be rebound to a different object later.

3
00:00:06.650 --> 00:00:11.199
&gt；&gt；Kyle Simpson：好的，在我们这个单元之前的讨论中，
&gt;&gt; Kyle Simpson: Okay, so in our this discussion a bit earlier in this unit,

4
00:00:11.199 --> 00:00:14.550
我们谈到了一个尚未绑定的函数，
we talked about the idea that a function that is not yet bound,

5
00:00:14.550 --> 00:00:19.859
你可以调用它的绑定并产生一个所谓的硬绑定函数，好吗？
you can call that bind on it and produces a so called hardbound function, all right?

6
00:00:19.859 --> 00:00:25.710
该硬绑定函数固定到您说要将其绑定到的上下文，
That hardbound function is fixed to the context that you said to bind it to,

7
00:00:25.710 --> 00:00:29.690
只有一种可能的方法来覆盖该绑定。
and there's only one possible way to override that binding.

8
00:00:29.690 --> 00:00:32.329
您不能再次调用.bind，但是
You cannot call .bind on it again, but

9
00:00:32.329 --> 00:00:36.350
您可以使用新的关键字调用它，这将产生以下效果
you could invoke it with a new key word, which would have the effect of

10
00:00:36.350 --> 00:00:40.479
将其此行为覆盖为新构造的对象。
overriding its this behavior to be a newly constructed object.

11
00:00:41.570 --> 00:00:45.100
所以这个问题的答案只能通过new关键字。
So the answer to that question is only via the new keyword.

12
00:00:45.100 --> 00:00:49.420
你不能在其他地方调用.绑定和重新绑定它。
You cannot recall.bind and rebind it somewhere else.

13
00:00:52.000 --> 00:00:55.192
&gt；&gt；Speaker 2：如果在箭头函数中定义变量，
&gt;&gt; Speaker 2: If you define a variable inside an arrow function,

14
00:00:55.192 --> 00:00:59.509
变量的作用域是箭头函数还是父作用域？
is that variable scoped to the arrow function or to the parent scope?

15
00:01:00.780 --> 00:01:01.820
&gt；&gt；Kyle Simpson：好问题。
&gt;&gt; Kyle Simpson: Good question.

16
00:01:01.820 --> 00:01:05.180
箭头函数确实有词法作用域。
Arrow functions do have lexical scope.

17
00:01:05.180 --> 00:01:07.000
他们只是没有这个关键字。
They just don't have this keyword.

18
00:01:07.000 --> 00:01:09.989
我见过很多地方人们说
I've seen actually a number of places where people say

19
00:01:09.989 --> 00:01:11.900
箭头函数没有作用域。
that arrow functions don't have scope.

20
00:01:11.900 --> 00:01:13.489
他们绝对有范围。
They absolutely have scope.

21
00:01:13.489 --> 00:01:15.870
它们是词法的，就像任何其他函数一样。
They are lexical just like any other function.

22
00:01:15.870 --> 00:01:19.569
因此，如果在箭头函数中定义变量，则与定义
So if you define a variable inside of an arrow function it's exactly like defining

23
00:01:19.569 --> 00:01:22.289
任何其他类型的函数中的任何其他变量。
any other variable in any other kind of function.

24
00:01:22.289 --> 00:01:26.510
这两者之间唯一的区别，真的，就是常规的区别
The only difference between those two, really, is the difference of regular

25
00:01:26.510 --> 00:01:31.439
函数定义this关键字，箭头函数不定义this关键字。
functions define a this keyword, and arrow functions don't define a this keyword.

26
00:01:31.439 --> 00:01:36.353
&gt；&gt；Speaker 2：在this was回调的情况下，这个值是否取决于
&gt;&gt; Speaker 2: In the case of the this were callback, does the value of this depend

27
00:01:36.353 --> 00:01:40.500
关于高阶函数如何调用回调？
upon how the higher order function calls the callback?

28
00:01:43.390 --> 00:01:46.740
&gt；&gt；Kyle Simpson：是的，呼叫地点是唯一重要的事情。
&gt;&gt; Kyle Simpson: Yes, the call site is the only thing that matters.

29
00:01:46.740 --> 00:01:50.545
因此，如果您将函数传递到例如.map中，
So if you pass a function into say .map,

30
00:01:50.545 --> 00:01:56.560
map如何调用回调是决定其this绑定的唯一因素。
how .map invokes your callback is the only thing that determines its this binding.

31
00:01:56.560 --> 00:02:00.248
除非传入了硬绑定函数，在这种情况下，
Unless you have passed in a hardbound function, in which case,

32
00:02:00.248 --> 00:02:02.719
您的硬绑定优先。
your hard binding has taking precedence.

33
00:02:02.719 --> 00:02:04.248
但是.map内部，
But .map internally,

34
00:02:04.248 --> 00:02:09.719
你可以把它想象成调用cb，打开，闭合的圆括号，或者类似的东西。
you can think of it as calling CB open closed parentheses or something like that.

35
00:02:09.719 --> 00:02:12.389
那个调用站点没有绑定这个。
That call site isn't binding of this.

36
00:02:13.419 --> 00:02:19.013
所以，是的，绝对是你的高阶函数，你的array.map或过滤器，
So yes, absolutely your high order functions, your array.map or filter,

37
00:02:19.013 --> 00:02:24.259
所有那些绝对都有这种细微差别或怪癖，
all those, those all absolutely have this nuance or this quirk to it that

38
00:02:24.259 --> 00:02:30.588
它们如何调用您的函数完全决定了这个上下文将是什么。
how they invoke your function entirely determines what the this context will be.

39
00:02:30.588 --> 00:02:32.870
&gt；&gt；扬声器2：当您设置Dunder Proto时会发生什么？
&gt;&gt; Speaker 2: What happens when you set dunder proto?

40
00:02:34.439 --> 00:02:35.509
&gt；&gt；Kyle Simpson：好问题。
&gt;&gt; Kyle Simpson: Good question.

41
00:02:35.509 --> 00:02:40.259
对于您来说，使用Dunder Proto作为setter并不常见。
It is not very common for you to use the Dunder Proto as a setter.

42
00:02:40.259 --> 00:02:43.689
从技术上讲，它既是一种获得者，也是一种设定者。
It is technically both a getter and a setter.

43
00:02:43.689 --> 00:02:47.270
它几乎总是被用来引用它。
It is almost always used just to reference it.

44
00:02:47.270 --> 00:02:49.139
我会说一般说来，
And I would say generally speaking,

45
00:02:49.139 --> 00:02:54.159
这是一种重新连接对象原型链的反模式。
it's sort of an anti-pattern to rewire the prototype chain of an object.

46
00:02:54.159 --> 00:02:59.079
但在ES6中，Dunder Proto也是正式的东西
But as of ES6, dunder proto is officially also something

47
00:02:59.079 --> 00:03:04.210
它可以设置从一个对象到另一个对象的原型链接。
that can set the proto linkage from one object to a different object.

48
00:03:04.210 --> 00:03:07.699
所以如果你有一个链接在这里的对象A
So if you have an object A that's linked over here and

49
00:03:07.699 --> 00:03:11.400
然后你决定，我想把这个物体原型链接到这里，
then later you decide, I want that object prototype linked over here,

50
00:03:11.400 --> 00:03:14.909
您可以使用Dunder proto作为设置器来更改它。
you can use dunder proto as a setter to change it.

51
00:03:14.909 --> 00:03:17.920
还有一个实用程序
And there's also a utility or

52
00:03:17.920 --> 00:03:22.599
称为object.setPrototypeOf的API版本。
an API version of that called object.setPrototypeOf.

53
00:03:22.599 --> 00:03:25.949
这将允许你拿起任何物体并重新布线。
Which will allow you to take any any object and rewire it.

54
00:03:25.949 --> 00:03:30.804
我想说，0.001%的情况下，你有没有看到有人重新接线
I would say 0.001% of the time do you ever see anybody rewiring

55
00:03:30.804 --> 00:03:35.060
原型链，但是是的，你绝对可以做它们
prototype chains, but yes, you absolutely can do them and

56
00:03:35.060 --> 00:03:40.187
在某些情况下，它实际上可能非常强大和有用。
it might in fact be very powerful and useful in certain circumstances.

57
00:03:44.288 --> 00:03:45.899
&gt；&gt；Speaker 2：做原型对象，
&gt;&gt; Speaker 2: Do the prototype objects,

58
00:03:45.899 --> 00:03:49.188
每个功能都预装了方块？
the squares come pre-installed with every function?

59
00:03:52.900 --> 00:03:55.099
&gt；&gt；Kyle Simpson：所以问题是。
&gt;&gt; Kyle Simpson: So the question is.

60
00:03:55.099 --> 00:04:00.080
在我正在绘制的图表中，我们为一个函数画了一个圆。
In the diagram that I was drawing, where we drew a circle for a function.

61
00:04:00.080 --> 00:04:03.590
然后我们在这里画了一个正方形，这是它的点原型。
And then we drew a square over here, which was its dot prototype.

62
00:04:03.590 --> 00:04:08.280
常规函数有点原型，箭头函数没有。
Regular functions have dot prototypes, arrow functions do not.

63
00:04:08.280 --> 00:04:12.650
所以如果我们有一个正则函数，它是一个声明，它是一个表达式，
So if we have a regular function, it's a declaration, it's an expression,

64
00:04:12.650 --> 00:04:14.189
它是匿名的，它的名字。
it's anonymous, its name.

65
00:04:14.189 --> 00:04:16.930
所有这些都会有一个正方形。
All of those are always gonna have a square.

66
00:04:16.930 --> 00:04:20.470
但是如果你做一个箭头函数它就不会有原型了，
But if you make an arrow function it's not gonna have a prototype,

67
00:04:20.470 --> 00:04:24.370
这就是为什么当你对它调用new时，它失败了。
which is why by the way when you call new on it, it fails.

68
00:04:24.370 --> 00:04:26.470
因为它不是构造函数。
Because it is not a constructor.

69
00:04:26.470 --> 00:04:30.329
它没有原型，所以不能用new关键字构造它。
It doesn't have a prototype so it can't be constructed with the new keyword.

70
00:04:30.329 --> 00:04:34.340
&gt；&gt；演讲者3：这只是一个附带问题，因为你说要使用关键字
&gt;&gt; Speaker 3: It just a side question because you said use the keyword

71
00:04:34.340 --> 00:04:35.629
也是超级的。
super also.

72
00:04:35.629 --> 00:04:38.042
它也可以用作原型吗？
Can it be used as a prototype too?

73
00:04:38.042 --> 00:04:38.610
&gt；&gt；Kyle Simpson：好问题。
&gt;&gt; Kyle Simpson: Good question.

74
00:04:38.610 --> 00:04:43.269
所以超级关键字，能够在类之外使用，
So the super keyword, is able to used outside of classes,

75
00:04:43.269 --> 00:04:45.759
当你处理对象和它们的方法时。
when you're dealing with objects and their methods.

76
00:04:45.759 --> 00:04:47.689
所以你可以去拿一个物体
So you could go and take one object and

77
00:04:47.689 --> 00:04:51.149
使用原型链接将其连接到另一个对象。
wire it up to another object with the prototype linkage.

78
00:04:51.149 --> 00:04:53.019
我们会稍稍看一下这个模式。
We're gonna look at that pattern in a bit.

79
00:04:53.019 --> 00:04:56.370
制作没有类链接的对象的想法。
The idea of making objects that are linked without classes.

80
00:04:56.370 --> 00:05:00.199
从技术上讲，你可以在这些方法中使用一个超级来
And you could use technically a super inside one of those methods to

81
00:05:00.199 --> 00:05:02.800
参考原型链的一些东西。
refer to something of the prototype chain.

82
00:05:02.800 --> 00:05:06.839
警告是超级关键字不是动态绑定的，
The caveat is that the super keyword is not dynamically bound,

83
00:05:06.839 --> 00:05:12.329
它是静态绑定的，这意味着您实际上必须创建一个对象
it is statically bound which means to use that you actually have to create an object

84
00:05:12.329 --> 00:05:17.540
与其中的方法一起使用literal，并且必须在此时将其链接到对象。
literal with the method in it, and it has to at that moment be linked to the object.

85
00:05:17.540 --> 00:05:22.369
所以换句话说，你不能拿一个物体，改变它的原型，然后
So in other words, you won't be able to take one object, change its prototype, and

86
00:05:22.369 --> 00:05:25.370
神奇地有超级参考另一个。
magically have super refer to the other one.

87
00:05:25.370 --> 00:05:30.209
它在第一次创建时被静态绑定到任何链接的地方。
It is statically bound the first time it's created to wherever it's linked.

88
00:05:30.209 --> 00:05:32.980
但是，是的，您可以在Object文字内部使用超级
But yes, you can use super inside of object literals

89
00:05:32.980 --> 00:05:35.829
只要它们是简明的方法形式。
as long as they are the concise method form.
