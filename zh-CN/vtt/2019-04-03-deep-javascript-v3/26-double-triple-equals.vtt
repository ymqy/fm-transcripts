WEBVTT

1
00:00:00.190 --> 00:00:03.640
&GT；&GT；Kyle Simpson：因为我一直在提出强制的理由，这是其中一件事
&gt;&gt; Kyle Simpson: As I've been making this case for coercion, one of the things that

2
00:00:03.640 --> 00:00:07.700
可能一直浮现在你的脑海里，是的，但是胁迫
may have been floating in the back of your mind is, yeah, but the coercion

3
00:00:07.700 --> 00:00:12.859
我遇到的问题不是加号运算符，也不是if语句。
problem that I have is not with the plus operator, or an if statement.

4
00:00:12.859 --> 00:00:16.420
大多数人似乎都有很大的强制问题
The big coercion problems that most people seem to have

5
00:00:16.420 --> 00:00:19.370
似乎以相等检查为中心。
seem to center around equality checking.

6
00:00:19.370 --> 00:00:23.510
同样的信息，我对所有的胁迫都会申请
And the same message that I have for all of coercion is going to apply for

7
00:00:23.510 --> 00:00:25.320
强制平等。
coercive equality as well.

8
00:00:25.320 --> 00:00:30.160
但我想具体探讨一些关于=对=的问题，
But I wanna dig specifically into some issues about the == versus ===,

9
00:00:30.160 --> 00:00:33.390
因为这真的是大多数人关注的地方
since this is really the place where most people focus their attention

10
00:00:33.390 --> 00:00:35.119
当他们谈论强制的时候。
when they talk about coercion.

11
00:00:35.119 --> 00:00:39.573
事实上，大多数人都没有想过强迫任何其他地方
In fact most people haven't thought about coercion any other place

12
00:00:39.573 --> 00:00:42.409
不同于=与=。
other than the == verse the ===.

13
00:00:42.409 --> 00:00:46.390
所以还有一些进一步的解剖。
So there's some further dissection.

14
00:00:48.320 --> 00:00:53.164
那么你们中有多少人听说过=和之间的区别
So how many of you have heard before that the difference between == and

15
00:00:53.164 --> 00:00:57.527
=检查所谓的松散相等和
=== is that == checks the value so called loose equality and

16
00:00:57.527 --> 00:01:02.780
=检查所谓严格相等类型中的值？
=== checks the value in the type so called strict equality?

17
00:01:02.780 --> 00:01:05.060
这是非常普遍的。
This is extremely common.

18
00:01:05.060 --> 00:01:11.189
不幸的是，尽管听起来真的很好，但事实并非如此。
And unfortunately even though it sounds really good it's not exactly the case.

19
00:01:11.189 --> 00:01:12.859
这不是真正的区别。
That's not exactly the difference.

20
00:01:12.859 --> 00:01:17.930
这不仅仅是学术上的细微差别。
And it's not just an academic nuance here.

21
00:01:17.930 --> 00:01:22.030
这种差异确实改变了我们对公用事业的看法，
The difference really changes our perspective on the utility,

22
00:01:22.030 --> 00:01:26.430
这两种机制在我们的语言中的目的。
the purpose of these two mechanisms in our language.

23
00:01:26.430 --> 00:01:31.460
所以，我真的认为如果你试图理解你的代码，
So, I really think that if you're trying to understand your code,

24
00:01:31.460 --> 00:01:34.099
关键是你要学会像JavaScript一样思考，
it's critical that you learn to think like JavaScript,

25
00:01:34.099 --> 00:01:35.900
这就是论文一直在进行的。
that's sort of been the thesis going along.

26
00:01:35.900 --> 00:01:39.299
同样的道理也适用于双等和三等，也就是说，
And the same is true for double equals and triple equals, that just saying,

27
00:01:39.299 --> 00:01:42.849
嗯，这是一种似乎检查类型，而另一个不检查。
well, it's sort of one seems to check the type and the other doesn't.

28
00:01:42.849 --> 00:01:46.299
这在某些情况下可能会帮你度过难关，但是
That may get you by in some circumstances, but

29
00:01:46.299 --> 00:01:50.509
在其他情况下，它会导致完全不同的结论。
in other circumstances it leads you to completely different conclusions.

30
00:01:50.509 --> 00:01:54.370
与我们所做的所有其他事情都是一致的，让我们看看规范。
So consistent with everything else that we've done, let's look at the spec.

31
00:01:54.370 --> 00:01:55.870
这是规格
This is the spec for

32
00:01:55.870 --> 00:02:00.590
所谓的抽象相等比较，就是双重相等。
what is called abstract equality comparison, which is the double equals.

33
00:02:00.590 --> 00:02:05.109
如果Double Equals仅检查值，而Triple Equals检查值并
And if double equals only checks the value and triple equals checks the value and

34
00:02:05.109 --> 00:02:08.500
类型，那么为什么写在算法的最顶端，
the type, then why write up here at the very top of the algorithm,

35
00:02:08.500 --> 00:02:12.719
非常快的事情，检查x和y的类型了吗？
the very fast thing, are the types of x and y checked?

36
00:02:12.719 --> 00:02:15.060
我们马上就可以揭穿这个神话
Immediately we can debunk the myth

37
00:02:15.060 --> 00:02:18.389
这两者的区别在于类型是否相同。
that the difference between these two is whether the types are the same.

38
00:02:18.389 --> 00:02:19.770
这不是区别。
That isn't the difference.

39
00:02:19.770 --> 00:02:22.620
他们都检查了类型，只是
They both checked the types, it's just that

40
00:02:22.620 --> 00:02:26.415
一个人对这个信息做了一些不同于另一个人的事情，好吗？
one does something different with that information than the other one, okay?

41
00:02:26.415 --> 00:02:30.930
所以第一，正如我们一直说的那样，真理的来源总是规格。
So number 1, the source of truth is always the spec, as we keep saying.

42
00:02:30.930 --> 00:02:36.310
如果你选择坚持不完全正确的心智模式
And if you choose to persist in not completely correct mental models

43
00:02:36.310 --> 00:02:41.800
在某些情况下似乎是有效的，最终时间跨度越长，
that seem to work in some scenarios, eventually the longer the time span goes,

44
00:02:41.800 --> 00:02:44.860
最终你会遇到一个不同的情况，
eventually you'll run into a case where you're in a different scenario,

45
00:02:44.860 --> 00:02:48.079
你的心智模型崩溃了，现在你迷失了。
your mental model is busted, and now you're lost.

46
00:02:48.079 --> 00:02:50.949
我认为最好有一个正确的心智模型。
I think it's better to have the correct mental model.

47
00:02:50.949 --> 00:02:54.099
就像我为您引用的规范的其他地方一样，这是
Just like the other places of the spec that I have cited for you, this is

48
00:02:54.099 --> 00:03:00.449
一种使用if语句和然后语句以及变量和操作的算法。
an algorithm with if statements and then statements and variables and operations.

49
00:03:00.449 --> 00:03:03.550
因此，作为开发人员，您可以理解这一点。
So it's something that you as a developer can understand.

50
00:03:03.550 --> 00:03:07.830
绝大多数JavaScript开发人员从来没有读过这一节。
The vast majority of JavaScript developers have never once read this section.

51
00:03:07.830 --> 00:03:11.400
他们所听到的关于双等号的一切都是这么说的
All they've ever heard about the double equals is what is said

52
00:03:11.400 --> 00:03:14.430
在线关于双等分，在书中有关于双等分的内容。
online about double equals and in books about double equals.

53
00:03:14.430 --> 00:03:16.969
几乎从不引用规范所说的内容。
Which is almost never citing what the spec talks about.

54
00:03:16.969 --> 00:03:22.889
但只是引用了一些轶事证据来解释为什么他们认为这是值得的。
But only citing some anecdotal evidence why they think it's worthy.

55
00:03:22.889 --> 00:03:27.060
所以阅读规范会很有用。
So reading the spec can be useful.

56
00:03:27.060 --> 00:03:31.590
例如，如果我有一个字符串Frank，我已经将它赋给了一个变量，并且
For example, if I have a string, Frank, that I've assigned to one variable, and

57
00:03:31.590 --> 00:03:35.680
然后我创建了另一个副本，本质上，这就是第2行上发生的事情，
then I create another copy, essentially, that's what's happening on line 2,

58
00:03:35.680 --> 00:03:37.650
所以现在我有两条线。
so now I have two strings.

59
00:03:37.650 --> 00:03:44.199
如果在第7行，我试着问这两个是不是相等，就像我在第7行和第8行一样。
And if on line 7 I try to ask if those two are equal, like I am on line 7 and line 8.

60
00:03:44.199 --> 00:03:46.170
在这两种情况下，它们是相等的。
In both cases, they are equal.

61
00:03:47.610 --> 00:03:54.469
因为事实证明，当类型匹配时，它们会执行=。
Because it turns out that when the types match, then they do the ===.

62
00:03:54.469 --> 00:03:55.469
双等于和
The double equals and

63
00:03:55.469 --> 00:03:59.490
当类型匹配时，三元组等于完全相同。
the triple equals are exactly identical when the types match.

64
00:03:59.490 --> 00:04:01.008
绝对没有区别。
There is absolutely no difference.

65
00:04:01.008 --> 00:04:02.449
说明书上是这么说的。
And the spec says so.

66
00:04:02.449 --> 00:04:04.939
当类型匹配时，执行三重等于。
When the types match, do the triple equals.

67
00:04:04.939 --> 00:04:06.900
这就是我刚才为你强调的。
That's what I just highlighted for you.

68
00:04:06.900 --> 00:04:08.159
我们可以在代码中看到这一点。
And we can see that in code.

69
00:04:08.159 --> 00:04:13.039
在值类型已经匹配的任何地方，顺便说一下，如我
In any place where the value types already match, and by the way, as I

70
00:04:13.039 --> 00:04:17.879
已经说了很多次了，你应该试着让值类型变得明显，并且
said a bunch of times already, you should try to have the value types obvious, and

71
00:04:17.879 --> 00:04:21.069
理想情况下，您应该让它们尽可能匹配。
ideally, you should have them matching as much as possible.

72
00:04:22.300 --> 00:04:25.050
这并不意味着你永远不能被强迫，但是
That doesn't mean you can never have coercion, but

73
00:04:25.050 --> 00:04:28.660
你不应该在很多地方做比较。
you shouldn't have lots of places where you're doing comparisons.

74
00:04:28.660 --> 00:04:31.139
你当然不应该做相等的比较和
You certainly shouldn't be doing equality comparisons and

75
00:04:31.139 --> 00:04:33.990
完全不知道类型是什么。
have absolutely no idea what the types are.

76
00:04:33.990 --> 00:04:38.040
对我来说有趣的是，许多人似乎认为这是不可能的
It's interesting to me that many people seem to suggest that it is impossible for

77
00:04:38.040 --> 00:04:42.959
他们编程并了解在这种比较中可能会出现什么类型。
them to program and understand what types could be coming in to this comparison.

78
00:04:42.959 --> 00:04:47.050
我不知道你怎么能在没有某种意义的情况下写出任何算法
And I don't know how you can write any algorithm without having some sense of

79
00:04:47.050 --> 00:04:49.959
这些总是数字，这些总是字符串。
well these are always numbers and these are always strings.

80
00:04:49.959 --> 00:04:51.590
你怎么能说，我不知道？
How can you say, well I have no idea?

81
00:04:51.590 --> 00:04:53.129
它可能是一个数组，它可能是空的。
It could be an array it could be null.

82
00:04:53.129 --> 00:04:55.199
我不知道可能是什么。
I have no idea what it could possibly be.

83
00:04:56.870 --> 00:05:02.079
即使你不知道，这并不意味着它必须保持这种状态。
And even if you don't know, that doesn't mean that it has to stay that way.

84
00:05:02.079 --> 00:05:04.139
您可以选择重新设计代码，以便
You can choose to redesign your code so

85
00:05:04.139 --> 00:05:08.110
你缩小了那些不同种类的地方的表面积
that you've narrowed the surface area of places where those different kinds

86
00:05:08.110 --> 00:05:12.279
类型可以相互匹配，可以相互交织。
of types can intermatch, can interweave with each other.

87
00:05:12.279 --> 00:05:16.720
你已经缩小了那些存在强制的角落案件。
You've narrowed those corner cases that exist with coercion.

88
00:05:16.720 --> 00:05:21.149
所以我不会写一个可以接受NULL，未定义字符串的函数，
So I wouldn't write a function that could take null, undefined string,

89
00:05:21.149 --> 00:05:24.365
Number、Object、Array和14个其他类型，以及
number, object, array, and 14 other types, and

90
00:05:24.365 --> 00:05:28.024
然后所有人都将它们与a=进行比较，这很可笑，对吧？
then all compare them with a ==, that's ludicy, right?

91
00:05:28.024 --> 00:05:32.112
但我会写一个函数，可以接受字符串和数字
But I would write a function that could take strings and numbers and

92
00:05:32.112 --> 00:05:33.725
将它们与a=进行比较。
compare them with a ==.

93
00:05:33.725 --> 00:05:35.519
因为有一个非常有名的
Because there's a very known and

94
00:05:35.519 --> 00:05:39.019
要解决的潜在拐角案例的小子集。
small subset of potential corner cases to work around.

95
00:05:39.019 --> 00:05:41.180
如果你注意的话，这些都是可以避免的。
And those are avoidable if you pay attention.

96
00:05:42.740 --> 00:05:47.985
因此，在类型已经匹配的情况下，=和=是相同的。
So in the case where the types already match, == and === are the same.

97
00:05:47.985 --> 00:05:50.090
那么=在做什么呢？
So what is === doing?

98
00:05:50.090 --> 00:05:55.110
嗯，它也在检查类型，如果它们不相同，它就是假的。
Well, it's also checking the types, and if they're not the same, it's false.

99
00:05:55.110 --> 00:05:56.870
值是什么并不重要，
It doesn't matter what the values are,

100
00:05:56.870 --> 00:05:59.843
如果类型不同，它不做任何其他事情。
if the types are different, it doesn't do anything else.

101
00:05:59.843 --> 00:06:02.550
它有点短路，然后说，
It sorta short-circuits and says,

102
00:06:02.550 --> 00:06:06.300
如果类型不同，它们不可能是相等的。
if the types are different there's no possible way that they could be equal.

103
00:06:07.910 --> 00:06:11.100
如果你考虑一下双等号会做什么，
If you think about that with respect to what double equals is gonna do,

104
00:06:11.100 --> 00:06:12.990
我们一会儿就来看一下。
which we're gonna look at in just a moment.

105
00:06:12.990 --> 00:06:16.966
从本质上讲，严格平等和严格平等之间的真正区别
Essentially the real difference between strict equality and

106
00:06:16.966 --> 00:06:22.096
松散的平等就是我们是否会允许任何强迫的发生。
loose equality is whether or not we're going to to allow any coercion to occur.

107
00:06:22.096 --> 00:06:25.718
那么，如果类型相同，我们严格平等会做什么呢？
So what us Strict Equality is gonna do if the types are the same?

108
00:06:25.718 --> 00:06:29.658
好的，如果他们是nans，就会返回false，
Well it's going to, return false if they're NaNs,

109
00:06:29.658 --> 00:06:33.810
因为记住它应该是关于Nans的谎言。
because remember it's supposed to lie about NaNs.

110
00:06:33.810 --> 00:06:38.090
如果有负零，它将返回真，因为它应该是谎言
And it's gonna return true if there's a negative zero because it's supposed to lie

111
00:06:38.090 --> 00:06:39.959
关于负零。
about negative zeros.

112
00:06:39.959 --> 00:06:42.560
但只有在类型已经匹配的情况下，它才会说谎。
But it only does the lies if the types already match.

113
00:06:42.560 --> 00:06:45.090
否则，它会显示FALSE，并且根本没有检查任何内容。
Otherwise, it says false and it didn't check anything at all.

114
00:06:46.629 --> 00:06:49.230
所以也许更合适的说法是
So maybe the more appropriate statement would be

115
00:06:49.230 --> 00:06:53.180
他们都检查类型，其中一个提前停止，另一个不检查。
that they both check the types one of them stops early and one of them doesn't.

116
00:06:53.180 --> 00:06:57.810
或者换一种方式说，不同的是我们是否允许强迫。
Or said a different way, the difference is whether we allow coercion.

117
00:06:57.810 --> 00:07:01.540
所以在这里，我有两个物体，好吗？
So here, I have two objects, all right?

118
00:07:01.540 --> 00:07:05.199
它们具有相同的结构和表面上相同的价值。
They have the same structure and ostensibly the same value.

119
00:07:05.199 --> 00:07:06.860
但它们不是同一个物体。
But they are not the same object.

120
00:07:06.860 --> 00:07:08.670
它们是两个不同的物体。
They are two different objects.

121
00:07:08.670 --> 00:07:13.779
很多时候人们对JavaScript内置的等式检查感到困惑
A lot of times people get confused with JavaScript's built in equality checking

122
00:07:13.779 --> 00:07:16.680
它在某种程度上不是结构性的，
that it's somehow not structural in nature,

123
00:07:16.680 --> 00:07:19.300
它不像深层断言检查那样
that it doesn't do like a deep assertion check that

124
00:07:19.300 --> 00:07:23.389
一个对象的结构与另一个对象的结构完全相同。
the structure of one object is exactly the same as a structure of another object.

125
00:07:23.389 --> 00:07:26.910
也许有这样的语言，但我不知道
Maybe there are languages like that, but I don't know

126
00:07:26.910 --> 00:07:31.560
这是一种流行的东西，在一种语言中被内置到操作符中。
of that to be a prevailing thing that's built into an operator in a language.

127
00:07:31.560 --> 00:07:36.449
大多数操作员似乎都在做JavaScript所做的事情，即身份比较。
Most operators seem to do what JavaScript does, which is identity comparison.

128
00:07:36.449 --> 00:07:41.194
如果Workshop1和Workshop 2指向字面上相同的对象引用，则
If workshop1 and workshop 2 pointed at literally the same object reference then

129
00:07:41.194 --> 00:07:44.300
他们的身份会是一样的，你就会变成真的。
their identity would be the same and you'd get true.

130
00:07:44.300 --> 00:07:49.170
但在这个特殊的情况下，他们不是平等的，好吗？
But in this particular case, they're not equal, okay?

131
00:07:49.170 --> 00:07:54.697
所以无论=还是=都不会返回真，因为它们是不同的对象。
So neither == nor === is gonna return a true because they are different objects.

132
00:07:54.697 --> 00:07:56.740
大家跟我来？
Everybody follow me?

133
00:07:56.740 --> 00:07:58.850
它们是不同的物体，它们不一样。
They're different objects, they are not the same.

134
00:07:58.850 --> 00:08:00.406
所以你用哪一个并不重要，
And so it doesn't matter which one you use,

135
00:08:00.406 --> 00:08:01.889
你还是会得到同样的结果。
you're still gonna get the same result.

136
00:08:05.829 --> 00:08:06.720
&gt；&gt；Kyle Simpson：换句话说，
&gt;&gt; Kyle Simpson: So in other words,

137
00:08:06.720 --> 00:08:09.850
当类型不同时，=将允许强制。
the == is going to allow coercion when the types were different.

138
00:08:09.850 --> 00:08:13.959
并且当类型相同时，=将不允许强制。
And the === is going to disallow coercion when the types are the same.
