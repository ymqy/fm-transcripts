WEBVTT

1
00:00:00.090 --> 00:00:02.750
&gt；&gt；Kyle Simpson：在课程概述中，我们讨论了JavaScript具有
&gt;&gt; Kyle Simpson: In the course overview we talked about JavaScript having

2
00:00:02.750 --> 00:00:04.690
三个核心支柱。
three core pillars.

3
00:00:04.690 --> 00:00:08.839
其中一个重要的核心支柱是范围系统，
And one of those important core pillars is the scopes system,

4
00:00:08.839 --> 00:00:11.130
JavaScript如何处理作用域。
how JavaScript deals with scope.

5
00:00:11.130 --> 00:00:15.480
具体地说，就像我们在这堂课中看到的那样，它的名字是词法范围。
Specifically, the name for that, as we'll see in this lecture, is lexical scope.

6
00:00:15.480 --> 00:00:19.329
那么，JavaScript的词法范围机制是什么呢？
So what is the lexical scope mechanism of JavaScript?

7
00:00:19.329 --> 00:00:23.890
正如你在这里看到的，目标是引导我们走向一种模式
And as you see here, the goal is to lead us towards a pattern

8
00:00:23.890 --> 00:00:26.820
的代码来改进我们的代码组织。
of code that improves our code organization.

9
00:00:26.820 --> 00:00:30.940
所以我们需要理解词法范围以便我们能够理解闭包，并且
So we need to understand lexical scope so that we can understand closure, and

10
00:00:30.940 --> 00:00:34.479
我们需要理解闭包，这样我们才能理解模块模式。
we need to understand closure so that we can understand the module pattern.

11
00:00:34.479 --> 00:00:37.158
这就是我们这个讨论单元的目标。
So that is our goal for this unit of discussion.

12
00:00:37.158 --> 00:00:39.200
我们开始吧。
Let's dive in.

13
00:00:39.200 --> 00:00:42.619
好吧，范围是我们寻找东西的地方。
All right, scope is where we look for things.

14
00:00:42.619 --> 00:00:46.049
这是你第一个关于这个话题的“你需要知道什么”的定义。
That's your first what-you-need-to-know definition on this topic.

15
00:00:46.049 --> 00:00:47.219
这是要找的地方
It's where to look for

16
00:00:47.219 --> 00:00:51.939
事情，但这个定义应该在你的脑海中提出几个问题。
things, but that definition should ask a couple of questions in your mind.

17
00:00:51.939 --> 00:00:54.710
第一，我们要找的是什么？
Number one, what is it that we are looking for?

18
00:00:54.710 --> 00:00:57.109
所以非常简单，我们在寻找标识符。
So very simply, we're looking for identifiers.

19
00:00:57.109 --> 00:01:01.070
在这里，您可以看到分配给的x，或者
Here you see an x that's being assigned to, or

20
00:01:01.070 --> 00:01:03.679
y是从中检索的值。
a y that's being a value retrieved from.

21
00:01:03.679 --> 00:01:04.849
不管你意识到这一点还是
Whether you realize this or

22
00:01:04.849 --> 00:01:10.579
不是，所有变量都在程序中的这两个角色中的一个中。
not, all variables are in one of those two roles in your program.

23
00:01:10.579 --> 00:01:15.400
所有变量要么接受某个值的赋值，要么
All variables are either receiving the assignment of some value, or

24
00:01:15.400 --> 00:01:18.480
您正在从变量中检索值。
you are retrieving a value from the variable.

25
00:01:18.480 --> 00:01:22.890
就是这样，在我们的程序中没有其他变量存在。
That's it, there's no other existence for variables in our programs than that.

26
00:01:23.909 --> 00:01:26.019
所以我们现在做的是，我们从根本上说，
So what we're doing is, we're fundamentally,

27
00:01:26.019 --> 00:01:28.950
当我们处理代码时，当作用域
when we're processing our code, when the scope is being

28
00:01:28.950 --> 00:01:33.020
由JavaScript引擎处理，本质上是问题，
processed by the JavaScript engine, it's essentially asking the question,

29
00:01:33.020 --> 00:01:36.560
当我看到这个变量时，首先，它在什么位置？
when I see this variable, first of all, what position is it in?

30
00:01:36.560 --> 00:01:39.691
第二，它属于什么范围？
And secondly, what scope does it belong to?

31
00:01:39.691 --> 00:01:40.829
换句话说，
In other words,

32
00:01:40.829 --> 00:01:47.229
这基本上就像是将大理石与其颜色编码的桶相匹配的游戏。
this is basically like a game of matching marbles to their color-coded buckets.

33
00:01:47.229 --> 00:01:51.099
如果您考虑JavaScript引擎处理代码的方式，
If you think about the way a JavaScript engine processes the code,

34
00:01:51.099 --> 00:01:55.319
它会找到一个变量，它会说，嗯，这是一个绿色的大理石，所以
it's going to find a variable and it's gonna say, hmm, this is a green marble so

35
00:01:55.319 --> 00:01:56.599
放在绿色的桶里。
it goes in the green bucket.

36
00:01:56.599 --> 00:02:00.700
这是一个红色的大理石，所以它放进了红色的桶里。
And this is a red marble, so it goes into the red bucket.

37
00:02:00.700 --> 00:02:04.090
所以从根本上说，这是一个分类有色大理石的游戏。
So it's fundamentally a game of sorting colored marbles.

38
00:02:04.090 --> 00:02:06.209
这是我能在谷歌上找到的最好的图片。
This was the best picture I could find on Google.

39
00:02:06.209 --> 00:02:09.599
我可以找到彩色的桶或者我可以找到彩色的弹珠，
I could either find colored buckets or I could find colored marbles,

40
00:02:09.599 --> 00:02:10.740
我找不到他们在一起。
I couldn't find them together.

41
00:02:10.740 --> 00:02:13.531
所以给你，彩色水桶，好吗？
So here you go, colored buckets, okay?

42
00:02:13.531 --> 00:02:18.151
好吧，但这个定义有些微妙之处
All right, but there's something nuanced about that definition that

43
00:02:18.151 --> 00:02:22.231
可能并不是那么明显，这就是这个处理
may not be all that obvious, which is that this processing that

44
00:02:22.231 --> 00:02:26.090
我们谈论的是JavaScript中的一个实际步骤。
we're talking about is an actual step within JavaScript.

45
00:02:26.090 --> 00:02:29.319
它不是简单地与执行内联。
It's not simply inlined with the execution.

46
00:02:29.319 --> 00:02:34.091
人们非常普遍地认为JavaScript是自上而下运行的，
It's extremely common for people to think about JavaScript as running top down,

47
00:02:34.091 --> 00:02:35.689
一行地执行。
line by line, executing.

48
00:02:35.689 --> 00:02:40.533
因为当我们想到解释程序或动态脚本程序时，
Because when we think of interpreted programs, or dynamic scripted programs,

49
00:02:40.533 --> 00:02:45.292
我们通常认为它们是逐行执行，自上而下。
we generally think of them as executing line by line, top down.

50
00:02:45.292 --> 00:02:49.201
所以当我向你们断言JavaScript不是一种解释语言时，
And so when I assert to you that JavaScript is not an interpreted language,

51
00:02:49.201 --> 00:02:52.602
但实际上是一种编译语言，
but is in fact actually a compiled language,

52
00:02:52.602 --> 00:02:56.412
这可能不适合你的整个心智模型，因为你可能习惯于
that may not fit with your whole mental model because you're probably used to

53
00:02:56.412 --> 00:03:00.346
考虑逐行的JavaScript解释。
thinking of line-by-line JavaScript interpretation.

54
00:03:00.346 --> 00:03:04.936
所以让我向你们证明JavaScript实际上是经过编译的，或者至少，
So let me prove to you that JavaScript is, in fact, compiled, or at least,

55
00:03:04.936 --> 00:03:07.006
正如我们所说，它被解析了。
as we would say, it's parsed.

56
00:03:07.006 --> 00:03:12.686
在执行之前必须发生一些处理步骤。
That there's some processing step that has to happen before execution has occurred.

57
00:03:12.686 --> 00:03:16.189
如果您曾经编写过JavaScript，语法错误。
If you have ever written a JavaScript, syntax error.

58
00:03:16.189 --> 00:03:20.460
留了一个逗号，有一个额外的圆括号，或花括号中的某处，然后
Left off a comma, had an extra parenthesis, or curly brace somewhere, and

59
00:03:20.460 --> 00:03:24.870
然后你试着运行这个程序，你立即得到了一个语法错误。
then you try to run the program, and you immediately got a syntax error.

60
00:03:24.870 --> 00:03:29.569
也就是说，假设您在第10行有语法错误，但是您立即
That is, say you have a syntax error on line 10, but you immediately

61
00:03:29.569 --> 00:03:34.449
在第1行到第9行执行之前将该错误报告给您。
get that error reported to you before lines 1 through 9 have executed.

62
00:03:34.449 --> 00:03:39.050
你可能从来没有停下来问过，但这个问题值得一问。
You may never have stopped to ask, but the question bears asking.

63
00:03:39.050 --> 00:03:44.319
JavaScript怎么可能知道第10行的语法错误
How is it possible that JavaScript knew about the syntax error on line 10

64
00:03:44.319 --> 00:03:49.504
在执行第1行到第9行之前，除非JavaScript实际执行了
before executing lines 1 through 9, unless JavaScript actually went

65
00:03:49.504 --> 00:03:54.788
首先通过处理步骤，而不是简单地执行自上而下？
through a processing step first as opposed to simply executing top down?

66
00:03:54.788 --> 00:03:59.939
有一些处理步骤，那么该处理步骤看起来像什么呢？
There was some processing step, so what does that processing step look like?

67
00:03:59.939 --> 00:04:04.000
嗯，我是一个老编译器理论的书呆子为我的计算机科学一天。
Well, I'm an old compiler theory nerd for my computer science day.

68
00:04:04.000 --> 00:04:07.580
我是那种为了好玩而写编译器的怪人，
I am one of those weird folks that writes compilers for fun,

69
00:04:07.580 --> 00:04:09.590
我喜欢做这类事情。
I enjoy doing that sort of stuff.

70
00:04:09.590 --> 00:04:16.139
因此在编译器理论中，编译器基本上有四个阶段。
And so in compiler theory, there are essentially four stages to a compiler.

71
00:04:16.139 --> 00:04:19.319
有时前两个组合成一个阶段，有时它们是分开的，
Sometimes the first two are combined into one stage, sometimes they're separate,

72
00:04:19.319 --> 00:04:20.480
我的课本把它们分开了。
my textbook had them separate.

73
00:04:20.480 --> 00:04:22.870
所以有词法分析和标记化。
So there's lexing and tokenization.

74
00:04:22.870 --> 00:04:24.139
有语法分析，
There's parsing,

75
00:04:24.139 --> 00:04:29.077
它将令牌流转换为所谓的抽象语法树。
which turns the stream of tokens into what's called an abstract syntax tree.

76
00:04:29.077 --> 00:04:33.254
然后最后一步是所谓的代码生成，取一个抽象的
And then the last step is what's called code generation, taking an abstract

77
00:04:33.254 --> 00:04:37.949
语法树并产生程序某种其他可执行形式。
syntax tree and producing some kind of other executable form of that program.

78
00:04:37.949 --> 00:04:42.829
基本上就是，57个字，给你一个计算机科学学位，对吧，
That's basically, in 57 words, a computer science degree for you, right,

79
00:04:42.829 --> 00:04:45.571
或者至少对你来说是编译器理论，对吧？
or at least compiler theory for you, right?

80
00:04:45.571 --> 00:04:50.449
这就是我们的程序如何从其文本代码和
That is how our program gets processed from its textual code and

81
00:04:50.449 --> 00:04:56.829
将源文件格式化为可以执行的某种表示形式。
your source format into some kind of representation that can be executed.

82
00:04:56.829 --> 00:05:00.230
现在，很多人认为JavaScript不能被编译，因为我
Now, a lot of people think, well, JavaScript can't be compiled because I

83
00:05:00.230 --> 00:05:03.579
不要在我的开发机器上运行编译器
don't run a compiler on my development machine and

84
00:05:03.579 --> 00:05:08.180
然后将编译后的代码发送到其他位置。
then ship off the compiled code to some other location.

85
00:05:08.180 --> 00:05:11.279
换句话说，很多人认为
So in other words, a lot of people think about this difference between

86
00:05:11.279 --> 00:05:16.620
解释和编译为二进制的分布模型。
interpreted and compiled as the distribution model for the binary.

87
00:05:16.620 --> 00:05:20.274
但这并不是真正需要考虑的正确轴心。
But that's not really the right axis to be thinking about.

88
00:05:20.274 --> 00:05:25.399
右轴是，代码在执行之前是否处理过？
The right axis is, is the code processed before it is executed or not?

89
00:05:25.399 --> 00:05:28.000
我们确实有存在的语言
We do have languages that exist which

90
00:05:28.000 --> 00:05:30.649
通常不会在执行之前进行处理。
generally don't get processing before execution.

91
00:05:30.649 --> 00:05:32.199
例如，Bash脚本。
For example, Bash script.

92
00:05:32.199 --> 00:05:36.091
在Bash脚本中，如果您在第4行、第1行、第2行和第4行上编写了格式错误的命令
In a Bash script, if you write a malformed command on line 4, lines 1, 2, and

93
00:05:36.091 --> 00:05:36.966
3个人要跑了
3 are gonna run.

94
00:05:36.966 --> 00:05:39.221
当4号线出现故障时，可能会把事情搞砸，
And when line 4 fails that might screw stuff up,

95
00:05:39.221 --> 00:05:41.659
因为你想取消[笑]行1，2和3。
because you wanna undo [LAUGH] lines 1, 2, and 3.

96
00:05:41.659 --> 00:05:46.360
这在类似于真正的脚本语言的东西中是一个永久的问题。
This is a perpetual problem in something like a true scripting language.

97
00:05:46.360 --> 00:05:47.310
但在JavaScript中，
But in JavaScript,

98
00:05:47.310 --> 00:05:51.920
如果在第10行有语法错误，那么第1行到第9行什么都不会发生。
if you have a syntax error on line 10 nothing happens on lines 1 through 9.

99
00:05:51.920 --> 00:05:57.269
必须对其进行处理，以检查它是否是格式良好、格式正确的程序。
It has to be processed to check that it's a well-formed, correctly formed, program.

100
00:05:57.269 --> 00:05:59.889
所以这是经过这些编译步骤。
So this is going through these compilation steps.

101
00:05:59.889 --> 00:06:02.709
我提出这个编译理论的原因是
And the reason I bring up this compiler theory to talk to you

102
00:06:02.709 --> 00:06:06.819
JavaScript是一种编译语言是因为我们需要考虑
about JavaScript being a compiled language is because we need to think about

103
00:06:06.819 --> 00:06:10.779
当所有这些大理石桶分类发生时。
when all this marble bucket sorting happens.

104
00:06:10.779 --> 00:06:15.370
如果你想一下这个大理石桶排序的事情是在运行时发生的，
If you think about this marble bucket sorting stuff is happening at runtime,

105
00:06:15.370 --> 00:06:18.860
事实证明，这不仅是一个不准确的心智模型，而且
it turns out that not only is that an inaccurate mental model, but

106
00:06:18.860 --> 00:06:21.930
事实证明，它会在您的程序中产生bug，因为
it turns out it can create bugs within your program because

107
00:06:21.930 --> 00:06:25.329
你假设某件事是真的，而某件事是不同的。
you assume something to be true and something is different.

108
00:06:25.329 --> 00:06:28.310
那个分歧还记得法律吗？
That divergence, remember the law?

109
00:06:28.310 --> 00:06:31.339
这是一个分歧，你认为一些事情和
This is a divergence where you think something and

110
00:06:31.339 --> 00:06:32.649
计算机在想别的事情。
the computer thinks something else.

111
00:06:32.649 --> 00:06:34.180
猜猜谁赢了？
And guess who wins?

112
00:06:34.180 --> 00:06:35.790
电脑，好吗？
The computer, okay?

113
00:06:35.790 --> 00:06:38.949
所以我们想要做的是试着像电脑一样调整我们的大脑，
So what we wanna do is try to align our brains more like the computer,

114
00:06:38.949 --> 00:06:41.430
我们想像一个编译器一样思考。
we want to think like a compiler.

115
00:06:41.430 --> 00:06:45.129
好消息是，尽管我们将讨论一点点编译器
The good news is that even though we're gonna talk a little bit about compiler

116
00:06:45.129 --> 00:06:48.909
理论上，有一大堆我们要完全掩饰的东西。
theory, there's a whole bunch of it that we're gonna completely gloss over.

117
00:06:48.909 --> 00:06:52.149
一大堆复杂性对于这个讨论并不重要。
Bunch of complexity that is not important for this discussion.

118
00:06:52.149 --> 00:06:55.629
但有一件事很重要，那就是我们的大理石分类。
But the one thing that is important is our marble sorting.

119
00:06:55.629 --> 00:06:57.370
大理石分类是很重要的。
Marble sorting is the thing.

120
00:06:57.370 --> 00:07:02.629
本质上是隐喻地处理我们的作用域并将所有
It is essentially that metaphorically is processing of our scopes and putting all

121
00:07:02.629 --> 00:07:07.600
这些标识符，即彩色大理石，放入它们正确的桶中。
of these identifiers, that is the colored marbles, into their correct buckets.

122
00:07:07.600 --> 00:07:11.209
所以在我们执行之前处理首先发生的方式，
So the way that processing first happens before we execute,

123
00:07:11.209 --> 00:07:15.384
是有一个阶段，在这个阶段，它经历了所有的编译，
is that there is a stage where it goes through all of that compilation,

124
00:07:15.384 --> 00:07:20.221
它经历了所有的解析，并生成了这个抽象语法树。
It goes through all of that parsing, and it produces this abstract syntax tree.

125
00:07:20.221 --> 00:07:25.084
但从本质上讲，它也产生了词汇环境的计划。
But it also produces, essentially, a plan for the lexical environment.

126
00:07:25.084 --> 00:07:29.226
也就是说，所有的词汇范围都在哪里，以及其中会有什么弹珠，
That is, where all the lexical scopes are, and what marbles are gonna be in them,

127
00:07:29.226 --> 00:07:30.449
什么标识符。
what identifiers.

128
00:07:30.449 --> 00:07:35.370
它准备这个计划，这是可执行代码
It prepares this plan, and that is the executable code that is

129
00:07:35.370 --> 00:07:40.720
交给JavaScript引擎的另一部分执行，好吗？
handed off to be executed by the other part of the JavaScript engine, okay?

130
00:07:40.720 --> 00:07:45.029
现在，有些人会说，例如，Java，嗯，这是一个编译的
Now, some people would say, for example, Java, well, that's a compiled

131
00:07:45.029 --> 00:07:49.659
语言，因为我编译了它，然后他们发布了一个字节码。
language because I compile it and then they distribute a bytecode.

132
00:07:49.659 --> 00:07:53.560
事实证明，JavaScript几乎做了同样的事情。
It turns out, JavaScript does almost the same thing.

133
00:07:53.560 --> 00:07:58.672
有一个解析器可以解析您的JavaScript源代码，它生成，
There is a parser that parses through your JavaScript source code, and it produces,

134
00:07:58.672 --> 00:08:03.723
本质上，是一种与字节码没有什么不同的中间表示。
in essence, an intermediate representation not that dissimilar from a bytecode.

135
00:08:03.723 --> 00:08:06.466
并将其传递给JavaScript虚拟机，
And it hands it off to the JavaScript virtual machine,

136
00:08:06.466 --> 00:08:09.980
它嵌入在相同的JavaScript引擎中。
which is embedded inside of the same JavaScript engine.

137
00:08:09.980 --> 00:08:13.194
它解释了所有的东西，它解释的事情之一是，
And it interprets all that stuff, and one of the things that it interprets is,

138
00:08:13.194 --> 00:08:17.100
每当它进入一个作用域，它就会创建所有的弹珠
whenever it enters a scope it creates all the marbles

139
00:08:17.100 --> 00:08:18.994
根据程序让它做的事情。
according to what the program told it to do.

140
00:08:18.994 --> 00:08:24.384
所以不管你喜欢不喜欢编译器理论，我们都要考虑
So whether you like compiler theory or not, we have to think about

141
00:08:24.384 --> 00:08:29.610
JavaScript作为两遍系统而不是单遍系统。
JavaScript as a two-pass system rather than a single-pass.

142
00:08:29.610 --> 00:08:33.066
如果你认为它只是一个单一的通过，你最终不得不做所有
If you think it only as a single-pass, you end up having to do all

143
00:08:33.066 --> 00:08:37.033
其他种类的扭曲，以避免对您的程序进行不正确的分析。
sorts of other contortions to avoid incorrect analysis of your program.

144
00:08:37.033 --> 00:08:40.750
我还看到了一些bug，人们在这些bug中考虑了作用域
And I have seen a number of bugs where people have thought about scoping

145
00:08:40.750 --> 00:08:41.577
错误地。
incorrectly.

146
00:08:41.577 --> 00:08:44.219
所以我们要确保我们挖进去拿到这个。
So we wanna make sure we dig in and get this.

147
00:08:44.219 --> 00:08:47.743
当我们处理我们的代码时会发生什么，我称之为编译，
What happens when we process our code, which I would call compilation,

148
00:08:47.743 --> 00:08:50.594
如果你觉得把它叫做解析更好，没关系。
if you feel better calling it parsing, doesn't matter.

149
00:08:50.594 --> 00:08:54.071
但我们会先处理代码，然后设置作用域，然后
But we are gonna process the code first, and set up the scopes, and

150
00:08:54.071 --> 00:08:56.879
然后我们要执行它，好吗？
then we are gonna execute it, okay?

151
00:08:56.879 --> 00:09:00.159
我想知道，或者我想谈谈，那些水桶是从哪里来的。
And I wanna understand, or I wanna talk about, where those buckets come from.

152
00:09:00.159 --> 00:09:03.809
那么，如果标识符是大理石，那么桶是什么？
So if the identifiers are the marbles, what are the buckets?

153
00:09:03.809 --> 00:09:07.440
嗯，水桶是我们的范围单位。
Well, the buckets are our units of scope.

154
00:09:07.440 --> 00:09:12.320
在JavaScript中，我们主要有函数，但我们现在也有块。
And in JavaScript we primarily have functions, but we also now have blocks.

155
00:09:12.320 --> 00:09:14.690
从几年前的ES6开始，我们就有了数据块。
As of ES6, a few years ago, we have blocks.

156
00:09:14.690 --> 00:09:18.470
所以你有函数和块，这些是作用域的单位。
So you have functions and you have blocks, those are the units of scope.

157
00:09:19.519 --> 00:09:21.750
这就是JavaScript组织它们的方式。
That's how JavaScript organizes them.

158
00:09:21.750 --> 00:09:23.539
那些是我们的水桶，还有
Those are our buckets, and

159
00:09:23.539 --> 00:09:28.139
当我们在处理代码时遇到这些作用域时，我们就会创建这些作用域。
we create those whenever we encounter those scopes as we process the code.

160
00:09:28.139 --> 00:09:30.139
然后，我们有弹珠。
And then, we have the marbles.

161
00:09:30.139 --> 00:09:35.639
每当我们看到大理石在我们的程序中被引用时，我们就创建它们，
We create those every time we see a marble being referenced in our program,

162
00:09:35.639 --> 00:09:38.539
我们为它创建一个大理石，并将其放入适当的桶中。
we create a marble for it and drop it in the appropriate bucket.
