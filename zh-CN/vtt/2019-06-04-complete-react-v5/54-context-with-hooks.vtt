WEBVTT

1
00:00:00.720 --> 00:00:02.878
>> Brian Holt: 我现在想让你去
&gt;&gt; Brian Holt: So I want you now to go to

2
00:00:02.878 --> 00:00:07.796
SearchParams.js， >> Brian Holt: And
SearchParams.js,
&gt;&gt; Brian Holt: And

3
00:00:07.796 --> 00:00:11.220
我们会把所有按钮都用我们的理论
we're gonna make all the buttons
use our ThemeContext.

4
00:00:13.099 --> 00:00:21.115
因此，在此处，我希望您从 "./ThemeContext" 中导入 ThemeContext 。
So at the top here, I want you to import
ThemeContext from './ThemeContext'.

5
00:00:24.768 --> 00:00:30.158
>> Brian Holt: 我们还会从 React 中获取另一个叫做 useContext的挂钩。
&gt;&gt; Brian Holt: And we're also gonna get
another hook from React called useContext.

6
00:00:37.371 --> 00:00:40.716
布莱恩 - 霍尔特: 好的，然后在宠物下面
&gt;&gt; Brian Holt: Okay, and
then up here underneath pets,

7
00:00:40.716 --> 00:00:44.039
我们会说康斯特主题
we're gonna say const Theme.

8
00:00:44.039 --> 00:00:47.289
记住这也有一个 setTheme 。
And keep in mind that this also
comes with a setTheme as well.

9
00:00:48.689 --> 00:00:51.829
但我们不会用这个 setTheme ，所以我就不去抓它了。
But we're not gonna use the setTheme,
so I'm just not gonna grab it.

10
00:00:51.829 --> 00:00:59.542
因此， const [theme] = useContext >> Brian Holt: (ThemeContext)。
So const [theme] = useContext
&gt;&gt; Brian Holt: (ThemeContext).

11
00:01:03.759 --> 00:01:07.180
>> Brian Holt: 因此， ThemeContext 可能是什么。
&gt;&gt; Brian Holt: So again,
ThemeContext could be anything.

12
00:01:07.180 --> 00:01:09.799
这可能是对象，不一定是数组或
This could be an object, it doesn't
necessarily have to be an array or

13
00:01:09.799 --> 00:01:10.719
一个钩子什么的
a hook or anything like that.

14
00:01:10.719 --> 00:01:14.206
他们只是方便地使用对方
They're just convenient to
use with each other, but

15
00:01:14.206 --> 00:01:16.460
他们比那更有弹性
they are more flexible than that.

16
00:01:19.956 --> 00:01:23.683
>> Brian Holt: 现在，我有这个主题，可供使用，
&gt;&gt; Brian Holt: So now, I have this theme,
which is available to use,

17
00:01:23.683 --> 00:01:26.045
所以我要按我的按钮
so I'm gonna go down to my button.

18
00:01:30.652 --> 00:01:35.020
>> Brian Holt: 此处，在此 " 提交 " 按钮中，我将表示样式 = 和
&gt;&gt; Brian Holt: Here, at this Submit
button, I'm gonna say style = and

19
00:01:35.020 --> 00:01:38.491
就像一个专业的直插式 CSS 一样
just do some inline CSS
like a professional.

20
00:01:38.491 --> 00:01:41.057
开个玩笑别这么做
[LAUGH] Just kidding, don't do this.

21
00:01:44.468 --> 00:01:47.243
>> Brian Holt: 因此，通常，您希望这是颜色: 空白或
&gt;&gt; Brian Holt: So typically, you would
expect this to be color: blank or

22
00:01:47.243 --> 00:01:48.725
那样的东西对吧
something like that, right?

23
00:01:48.725 --> 00:01:52.289
React 使其更容易一些，您可以将其保留为对象。
React makes it a little bit easier,
that you can just keep it an object.

24
00:01:52.289 --> 00:01:55.620
所以我只能说颜色: 主题。
So I'm just gonna say
color: theme like that.

25
00:01:57.520 --> 00:01:59.974
现在注意的是两条大的，但是
Now notice there are two curly
braces next to each other, but

26
00:01:59.974 --> 00:02:05.129
发现它们的颜色不同，因为这是一个物体，对吧 ?
notice they're colored differently,
that's because this is an object, right?

27
00:02:05.129 --> 00:02:08.960
这是 JX 的 JavaScript 表达式。
And this is the JavaScript
expression from JSX thing.

28
00:02:08.960 --> 00:02:12.520
所以彼此相邻的两条小牙套都没有什么特别的
So it's not that two curly braces next
to each other have any sort of special

29
00:02:12.520 --> 00:02:13.419
在 JSX中的含义。
meaning in JSX.

30
00:02:13.419 --> 00:02:15.378
这就是看起来的样子
That just happens to be how that looks.

31
00:02:24.389 --> 00:02:29.389
>> Brian Holt: 好的，现在，如果你过去看看我们的项目。
&gt;&gt; Brian Holt: Okay, so, now if you
go over and look at our project.

32
00:02:31.159 --> 00:02:33.659
抱歉，您不需要颜色，需要背景色。
Sorry, you don't want color,
you want background color.

33
00:02:33.659 --> 00:02:35.039
我是说通知还有效吧
I mean notice it still worked, right?

34
00:02:35.039 --> 00:02:37.490
这个颜色是蓝色的，但这不是我想要的。
The color of this is blue, but
that's not what I intended.

35
00:02:37.490 --> 00:02:42.667
我想让它成为背景色。
I intended this to be backgroundColor.

36
00:02:44.150 --> 00:02:46.147
> > 布莱恩 - 霍尔特: 然后你就会去，现在是深蓝色的。
&gt;&gt; Brian Holt: And there you go,
now it's dark blue.

37
00:02:50.878 --> 00:02:54.414
>> Brian Holt: 我们来谈谈，我的意思是，很明显，这是很多种仪式
&gt;&gt; Brian Holt: Let's talk about, I mean,
obviously this was a lot of ritual to

38
00:02:54.414 --> 00:02:58.889
从中获益很少，但让我们来谈谈为什么这很重要。
get very little benefit out of it, but
let's talk about why this was important.

39
00:02:58.889 --> 00:03:04.599
我在上面有 App.js ，对，在这个主题提供程序中。
I have App.js here on the top, right,
which I've wrapped in this theme provider.

40
00:03:04.599 --> 00:03:09.819
然后在 SearchParams 里面，我没有把任何东西都传给 SearchParams。
And then inside of SearchParams, notice I
haven't passed anything into SearchParams.

41
00:03:09.819 --> 00:03:13.893
通常你得做点什么
Typically, you would have
had to do something like

42
00:03:13.893 --> 00:03:16.743
themeColor = {theme}，对吗 ?
themeColor = {theme}, right?

43
00:03:16.743 --> 00:03:19.911
你也得做同样的事情然后把它传递给每个人
And you'd have to do the same thing with
details and pass it into every individual

44
00:03:19.911 --> 00:03:22.759
从主题中读取的应用程序的内容，对吗 ?
piece of your application that
read from the theme, right?

45
00:03:22.759 --> 00:03:25.431
那是负担对吧
That's burdensome, right?

46
00:03:25.431 --> 00:03:29.120
你会得到某种程度的负担而不是有用的，对吧 ?
You get to a certain point where it gets
more burdensome than it's useful, right?

47
00:03:29.120 --> 00:03:33.420
所以这就是这些背景非常有用的地方。
So that's where these
contexts are super useful.

48
00:03:33.420 --> 00:03:37.400
而不是把它明确地传递给 SearchParams
That instead of having to pass
this explicitly into SearchParams,

49
00:03:37.400 --> 00:03:41.420
现在我可以进入 SearchParams了
now I can go into SearchParams.

50
00:03:42.719 --> 00:03:47.469
SearchParams ，我可以从上下文中读出来。
SearchParams, and
I can read off of the context.

51
00:03:47.469 --> 00:03:52.780
现在我可以在我和
Now I could have infinite
layers between me and

52
00:03:52.780 --> 00:03:54.819
提供给你还是有用的对吧
the provider and it still works, right?

53
00:03:54.819 --> 00:03:58.219
正好是有提供者的直系人
It just happens to be that it's the
immediate parent that has a provider but

54
00:03:58.219 --> 00:04:00.623
可能有 17 层
there could be 17 layers.

55
00:04:01.810 --> 00:04:06.896
实际上，如果你看一下你的资源管理器里的路由器代码，
And actually, if you look at the reach
router code inside of your Explorer,

56
00:04:06.896 --> 00:04:11.205
让我们看看现在的情况， " 检查元件" 。
let's actually just look at that
right now, Inspect Element.

57
00:04:11.205 --> 00:04:14.705
它们在任何地方都使用上下文。
React, they use context everywhere.

58
00:04:17.822 --> 00:04:21.423
>> Brian Holt: 因此，您可以看到引用的上下文提供程序，
&gt;&gt; Brian Holt: So you can see there
are context provider for ref,

59
00:04:21.423 --> 00:04:22.889
上下文使用者。
context consumer.

60
00:04:23.910 --> 00:04:27.268
他们在这里有一堆东西上下文消费者
They have a bunch of stuff in here,
context consumer,

61
00:04:27.268 --> 00:04:29.750
上下文使用者，上下文提供程序。
context consumer, context provider.

62
00:04:29.750 --> 00:04:34.137
有一群消费者和提供者。
There's a bunch of layers of consumers and
providers.

63
00:04:34.137 --> 00:04:39.606
这一切都与背景有关。
That all has to do with context.

64
00:04:43.307 --> 00:04:47.677
>> Brian Holt: 这真的很容易和 useContext 一起使用，这是一个钩子，对吧 ?
&gt;&gt; Brian Holt: So it's really easy to use
with useContext, which is a hook, right?

65
00:04:49.879 --> 00:04:51.786
>> Brian Holt: 在我们开始讨论如何处理类之前，
&gt;&gt; Brian Holt: Before we move
on to how to deal with classes,

66
00:04:51.786 --> 00:04:54.461
有人对你目前的情况有什么疑问吗
does anyone have any questions
about what you've seen so far?

67
00:04:57.326 --> 00:05:03.259
>> 扬声器 2: 要使用 useContext ，上下文提供程序必须是父代吗 ?
&gt;&gt; Speaker 2: So to use the useContext,
the context provider has to be a parent?

68
00:05:05.480 --> 00:05:05.980
>> Brian Holt: 对。
&gt;&gt; Brian Holt: Yep.
