WEBVTT

1
00:00:00.100 --> 00:00:05.429
>> Brian Holt: 错误边界是挂钩无法执行的两个操作之一。
&gt;&gt; Brian Holt: Error boundaries is one
of two things that hooks cannot do.

2
00:00:05.429 --> 00:00:08.601
您不能在不使用类的情况下执行错误边界。
You cannot do error boundaries
without using classes.

3
00:00:08.601 --> 00:00:14.730
所以这其实是一个非常重要的一个，所以我们来看看这个。
So this is actually a pretty critical one,
so let's go ahead and take a look at this.

4
00:00:15.839 --> 00:00:18.989
因此，这些 API 响应中的一些可能具有
So some of these API responses
could potentially have

5
00:00:18.989 --> 00:00:20.219
里面的错误对吧
errors inside of them, right?

6
00:00:20.219 --> 00:00:23.757
我们不控制这个 API，是来自第三方，对，所以
We don't control this API,
it's coming from a third party, right, so

7
00:00:23.757 --> 00:00:27.704
我们要小心处理错误和处理格式不正确的数据
we wanna be extra careful with handling
errors and handling malformatted data.

8
00:00:27.704 --> 00:00:32.091
因此，错误边界将允许您捕获这些错误中的一些错误
And so error boundaries are going to
allow you to capture some of these errors

9
00:00:32.091 --> 00:00:34.500
不要毁了你的节目对吧
without crashing your program, right?

10
00:00:36.890 --> 00:00:45.188
因此，我希望您在此处创建名为 errorboundary.js的新文件。
So I want you to make a new file
here called errorboundary.js.

11
00:00:49.067 --> 00:00:50.841
> > 布莱恩 - 霍尔特: 我现在就告诉你
&gt;&gt; Brian Holt: And
I'm just gonna tell you right now,

12
00:00:50.841 --> 00:00:52.412
这主要是码头的代码
this is mostly code from the docs.

13
00:00:54.500 --> 00:01:04.180
>> Brian Holt: 我只保留 reactjs.org/docs/error-boundaries.html。
&gt;&gt; Brian Holt: I'll just keep the
reactjs.org/docs/error-boundaries.html.

14
00:01:06.340 --> 00:01:10.140
好了我们要从雷法进口
Okay, we're gonna import React from React.

15
00:01:12.509 --> 00:01:21.021
>> Brian Holt: 我们将从 @reach/router 导入链接。
&gt;&gt; Brian Holt: And we're gonna
import a link from @reach/router.

16
00:01:24.364 --> 00:01:28.361
>> Brian Holt: 所以我要说，类 ErrorBoundary，
&gt;&gt; Brian Holt: So here I'm going to say,
class ErrorBoundary,

17
00:01:28.361 --> 00:01:33.031
那些看起来很奇怪的词中的一个
one of those words that looks
weird the more you look at it.

18
00:01:33.031 --> 00:01:35.099
扩展数据块。
Extends.

19
00:01:35.099 --> 00:01:37.310
我们一直在做 React.component 但是
So we've been doing React.component, but

20
00:01:37.310 --> 00:01:39.870
我要展示你能做到这一点的不同方式
I'm gonna show just a different
way that you could do this.

21
00:01:39.870 --> 00:01:47.770
您也可以在此处放置组件，例如，例如扩展组件。
You can also put ,Component here like
this and just say extends Component.

22
00:01:53.039 --> 00:01:55.180
没错我们只是在抽离组件
Works the same way right,
we're just pulling out component,

23
00:01:55.180 --> 00:01:58.400
这样做并不一定有好处
there's no necessarily
benefit to doing it this way.

24
00:01:58.400 --> 00:01:59.939
你会看到很多人这样做
You'll just see a lot of
people do it this way.

25
00:01:59.939 --> 00:02:01.073
只是想给你看这个
Just wanted to show you that.

26
00:02:04.688 --> 00:02:10.683
>> Brian Holt: 好，我们会说状态 = hasError， false。
&gt;&gt; Brian Holt: Okay,
we're gonna say state = hasError, false.

27
00:02:15.584 --> 00:02:20.061
>> Brian Holt: 好的，下一个要写的东西是静态的
&gt;&gt; Brian Holt: Okay, the next thing
we're going to write is static

28
00:02:20.061 --> 00:02:22.717
getDerivedStateFromError。
getDerivedStateFromError.

29
00:02:27.991 --> 00:02:31.050
>> Brian Holt: 我们将返回 hasError: true。
&gt;&gt; Brian Holt: And
we're just gonna return hasError: true.

30
00:02:32.379 --> 00:02:35.721
>> Brian Holt: hasError: true。
&gt;&gt; Brian Holt: hasError: true.

31
00:02:35.721 --> 00:02:41.420
你可以更深入了解如何做到这一点，但我们不打算这样做。
You could be more sophisticated about
how you do this, but we're not going to.

32
00:02:44.490 --> 00:02:47.843
然后我们就会在上面说 componentDidCatch 。
And then we're going to say
componentDidCatch that top one there.

33
00:02:51.598 --> 00:02:53.709
> > Brian Holt: 我们将返回错误和
&gt;&gt; Brian Holt: And
we're going to get back the error and

34
00:02:53.709 --> 00:02:55.810
关于该错误的信息。
the info about the error from that.

35
00:02:55.810 --> 00:02:58.331
这些都是 React 方法。
These are all React methods.

36
00:02:58.331 --> 00:03:03.104
现在我们要做的就是
And here all we're going
to do is going to say

37
00:03:03.104 --> 00:03:08.781
console.error， ErrorBoundary 捕获错误。
console.error, ErrorBoundary
caught an error.

38
00:03:12.402 --> 00:03:15.719
>> Brian Holt: 然后我们会记录错误和信息。
&gt;&gt; Brian Holt: And then we're just
gonna log out error and info.

39
00:03:15.719 --> 00:03:20.408
但如果你有 Azure Monitor 或 Track JS 或 Century 之类的东西
But if you had something here like
Azure Monitor or Track JS or Century or

40
00:03:20.408 --> 00:03:21.894
就像这样
something like that,

41
00:03:21.894 --> 00:03:26.990
你应该把它送去分层联合伐木公司
you probably just send that off to
the tiered consolidated logging service.

42
00:03:30.234 --> 00:03:34.793
> > Brian Holt: 好的，然后我们会说回来，对不起，
&gt;&gt; Brian Holt: Okay, and
then here we're gonna say return, sorry,

43
00:03:34.793 --> 00:03:36.890
渲染，渲染。
render rather, render.

44
00:03:41.026 --> 00:03:44.301
> > Brian Holt: 我们会说
&gt;&gt; Brian Holt: And we're gonna say,

45
00:03:44.301 --> 00:03:49.997
如果 this.state.hasError ，那么返回。
If this.state.hasError, return.

46
00:03:53.612 --> 00:03:57.332
>> Brian Holt: 一个 h1 ，再一次，您可能在这方面有更好的 UI ，但是
&gt;&gt; Brian Holt: An h1, and again, you'd
probably have better UI around this, but

47
00:03:57.332 --> 00:04:01.645
我们只会归还一个上面写着这个列表有错误的 h1
we're just gonna return a h1 that says,
there was an error with this listing.

48
00:04:03.932 --> 00:04:07.746
>> Brian Holt: 链接到等号。
&gt;&gt; Brian Holt: Link to equals.

49
00:04:07.746 --> 00:04:10.086
我要带他们回家
I'm just going to have them link to home.

50
00:04:10.086 --> 00:04:17.867
单击此处以返回主页或
Click here to go back to the home page or

51
00:04:17.867 --> 00:04:22.005
等待 5 秒
wait five seconds.

52
00:04:26.161 --> 00:04:29.516
>> Brian Holt: 为用户提供一些信息，比如，
&gt;&gt; Brian Holt: So just to give the user
a bit of information, like hey there's

53
00:04:29.516 --> 00:04:33.908
在这里发生错误我们会把你重定向到主页上
an error here, just so you know, we're
gonna redirect you back to the homepage.

54
00:04:35.411 --> 00:04:38.228
>> Brian Holt: 否则，所有要做的只是通过所有
&gt;&gt; Brian Holt: Otherwise, all you're
going to do is just pass through all of

55
00:04:38.228 --> 00:04:40.540
要穿过的组件对吗
the components that are coming through,
right?

56
00:04:40.540 --> 00:04:44.019
所以它就像一个错误的边界坐在一个组件之上如果有
So it's just like an error boundary that
sits above a component and if there's

57
00:04:44.019 --> 00:04:47.949
一个错误，它对它有什么影响，否则它是通过的吗 ?
an error, it does something about it,
otherwise it's a pass-through right?

58
00:04:47.949 --> 00:04:53.144
所以你就会说回你的孩子
So you just going to say
return this.props.children.

59
00:04:56.149 --> 00:05:00.483
>> Brian Holt: So this.props.子代将是它是否包含在
&gt;&gt; Brian Holt: So this.props.children
is going to be whether it was contained

60
00:05:00.483 --> 00:05:02.226
组件的内部。
inside of the component.

61
00:05:02.226 --> 00:05:05.290
举个例子，我们在这里有链接组件，对吗 ?
So for example, we have the link
component right here, right?

62
00:05:06.500 --> 00:05:11.100
链接的 " this.sprops.c童子 " 将单击此处，对吗 ?
The children, "this.props.children"
of link would be click here, right?

63
00:05:11.100 --> 00:05:14.995
是你把它放进去的
It's whatever you put inside of it.

64
00:05:14.995 --> 00:05:16.759
有道理吗
Does that make sense?

65
00:05:16.759 --> 00:05:18.764
所以如果我在里面有一堆组件的话
So if I had like a bunch
of components inside of it,

66
00:05:18.764 --> 00:05:22.970
this.sprops.子代将是其内部的所有组件。
this.props.children will be all
of those components inside of it.

67
00:05:24.310 --> 00:05:31.535
好，最后，导出缺省 ErrorBoundary。
Okay, and then last thing,
export default ErrorBoundary.

68
00:05:36.937 --> 00:05:40.319
>> Brian Holt: 这是一种高级 React 用例权限吗 ?
&gt;&gt; Brian Holt: It's kind of
an advanced React use case right?

69
00:05:40.319 --> 00:05:44.605
这并不总是对您有用。
This is not always going to be useful for
you.

70
00:05:44.605 --> 00:05:46.920
我不认为我在 Netflix上工作的时候
I don't think the entire time
I was working at Netflix,

71
00:05:46.920 --> 00:05:48.257
我们曾经使用过错误的边界
we ever used error boundaries.

72
00:05:52.786 --> 00:05:55.040
> > 布莱恩 - 霍尔特: 这很漂亮，就是这样打破的。
&gt;&gt; Brian Holt: This is prettier,
that's breaking it up this way.

73
00:05:55.040 --> 00:05:59.060
所以如果这看起来很奇怪，那就是它从那里来的地方。
So if that looks weird,
that's where its coming from.

74
00:05:59.060 --> 00:06:01.408
这就是如何将其分解为多行的方式。
This is how you can like
break it into multiple lines.

75
00:06:05.285 --> 00:06:10.839
>> 扬声器 2: 这样会捕获在其任何子代中发生的错误吗 ?
&gt;&gt; Speaker 2: So this will catch an error
that occurs in any of its children?

76
00:06:10.839 --> 00:06:11.339
>> Brian Holt: 完全正确。
&gt;&gt; Brian Holt: Exactly.

77
00:06:12.740 --> 00:06:15.095
>> 扬声器 2: 为什么要返回this.props.子代?
&gt;&gt; Speaker 2: Why do we need
to return this.props.children?

78
00:06:17.300 --> 00:06:23.216
>> Brian Holt: 始终必须在呈示方法中返回某些内容。
&gt;&gt; Brian Holt: You always have to return
something inside of a render method.

79
00:06:23.216 --> 00:06:24.228
所以如果我有这个
So if I have this,

80
00:06:24.228 --> 00:06:28.709
有一种潜在的权利不会归还任何东西对吗
there's a potential right that this
wouldn't return anything, right?

81
00:06:28.709 --> 00:06:31.910
这意味着它基本上是在吃孩子们。
Which means it would be
basically eating the children.

82
00:06:31.910 --> 00:06:34.540
这种说法真的很奇怪，对吧 ?
That's a really weird way of saying that,
right?

83
00:06:34.540 --> 00:06:36.490
但这不会让孩子们产生影响。
But it would not be
rendering out the children.

84
00:06:36.490 --> 00:06:40.629
所以它要经过对，它必须要经过一些东西，然后再经过
So it has to pass through right, it has to
take something and then pass it through to

85
00:06:40.629 --> 00:06:44.110
否则它就会被挡住在那里
the other side, otherwise it would
just be blocking it right there.
