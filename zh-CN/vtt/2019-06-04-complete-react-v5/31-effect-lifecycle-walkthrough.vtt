WEBVTT

1
00:00:00.040 --> 00:00:01.639
>> Brian Holt: 让我们在整个周期中工作。
&gt;&gt; Brian Holt: Let's work
through this whole cycle.

2
00:00:01.639 --> 00:00:05.264
我知道我在这里已经采取了很多步骤。
I recognize that I have
introduced a lot of steps here.

3
00:00:05.264 --> 00:00:10.227
所以让我们在整个过程中
So let's work through the entire
cycle of beginning to end

4
00:00:10.227 --> 00:00:12.769
发生了什么好吗
of what happens here, okay?

5
00:00:12.769 --> 00:00:16.539
首先我在这儿有搜索的地方对吧
First thing,
I have search params here, right?

6
00:00:19.019 --> 00:00:21.379
所以这是第一次呈现。
So this gets rendered for the first time.

7
00:00:21.379 --> 00:00:24.000
得到这些信息把这些钩子都设置好
It gets all this information,
sets all these hooks up so

8
00:00:24.000 --> 00:00:26.920
第一位是西雅图华盛顿
the first location is Seattle, Washington.

9
00:00:26.920 --> 00:00:31.375
Breed 将会是一个空的数组动物将会成为一只狗
Breed is gonna be an empty array and
animal is going to be a dog, and

10
00:00:31.375 --> 00:00:34.456
会有一个空的串对吧
breed is going to be an empty string,
right?

11
00:00:37.234 --> 00:00:39.240
>> Brian Holt: 然后将调度此 useEffect，但是
&gt;&gt; Brian Holt: It's then going
to schedule this useEffect, but

12
00:00:39.240 --> 00:00:41.259
这事还没发生对吧
this is not actually gonna happen yet,
right?

13
00:00:41.259 --> 00:00:44.799
此操作不会在第一个呈示时运行，行吗 ?
This does not run on the first render,
okay?

14
00:00:44.799 --> 00:00:47.597
然后它将返回所有这些标记，
Then it's going to return
all of this markup,

15
00:00:49.688 --> 00:00:50.380
>> Brian Holt: 对吧 ?
&gt;&gt; Brian Holt: Right?

16
00:00:50.380 --> 00:00:54.362
然后它就会把所有这些都呈现给 DOM
Then its going to finish that, it's
going to render that all to the DOM so

17
00:00:54.362 --> 00:00:57.119
用户会先看到这一切的好吗
the user's going to see all of this first,
okay?

18
00:00:58.829 --> 00:01:02.850
之后，它将会运行调度效果。
Then after that,
it's going to run the schedule effect.

19
00:01:04.200 --> 00:01:06.189
记住你能在这里产生 10 个效应对吧
Keep in mind you can have
ten effects in here, right?

20
00:01:06.189 --> 00:01:08.920
现在我们只有一个效应，但是你可以在这里产生很多影响。
Right now we just have one effect,
but you can have many effects in here.

21
00:01:10.960 --> 00:01:16.474
所以在第一次渲染之后，它就会在这里调用这个函数。
So after the first render, it's going
to call this function right here.

22
00:01:18.992 --> 00:01:22.105
>> Brian Holt: 因此，这将分隔为空数组。
&gt;&gt; Brian Holt: So this is going
to separates to be empty array.

23
00:01:22.105 --> 00:01:24.322
它会导致单独的字符串。
It's gonna cause separate
to be an empty string.

24
00:01:27.075 --> 00:01:27.603
> > Brian Holt: 然后，
&gt;&gt; Brian Holt: And then,

25
00:01:27.603 --> 00:01:31.638
它会向 API， >> Brian Holt: 用动物，
it's gonna go out to the API,
&gt;&gt; Brian Holt: With animal,

26
00:01:31.638 --> 00:01:36.870
它会从 API 中恢复，然后会调用 setBreeds。
and it's going to get breeds back from the
API, and then it's gonna call setBreeds.

27
00:01:36.870 --> 00:01:38.990
但是记住这需要一些时间，对吧 ?
But keep in mind,
this is gonna take some time, right?

28
00:01:38.990 --> 00:01:41.358
这将会是第二次或者类似的事情，对吧 ?
This will take a second or
something like that, right?

29
00:01:41.358 --> 00:01:43.923
接下来会发生什么呢 ?
So what's gonna happen is
it's going to render, and

30
00:01:43.923 --> 00:01:47.570
然后再等这个从 API的品种串回来
then a second later once this comes back
with the breed strings from the API,

31
00:01:47.570 --> 00:01:49.929
这会导致另一人重新呈现对吧
it's gonna cause another re-render, right?

32
00:01:49.929 --> 00:01:53.609
但是这里唯一改变的是品种
But, the only thing that's
changed here is breeds.

33
00:01:55.799 --> 00:01:59.579
这一特殊影响是否取决于品种?
Does this particular
effect depend on breeds?

34
00:02:01.010 --> 00:02:01.829
没有，对吧 ?
No, right?

35
00:02:01.829 --> 00:02:03.739
所以下次不会再重述了吧
So it doesn't re-render the next time,
right?

36
00:02:03.739 --> 00:02:07.349
因为品种变了但动物， setBreed 和 setBreeds
Because breeds changed, but
animal, setBreed, and setBreeds,

37
00:02:07.349 --> 00:02:09.159
都没有变化对吧
none of these changed, right?

38
00:02:09.159 --> 00:02:12.770
所以它只运行一次，然后就完成了，好吗 ?
So it just runs that effect once and
then it's done, okay?

39
00:02:14.210 --> 00:02:18.292
所以现在，我要在地点第二次去，对吧 ?
So now, fathom for a second that go and
I type in the location, right?

40
00:02:18.292 --> 00:02:20.479
现在，位置已更新。
So now location is updated state.

41
00:02:20.479 --> 00:02:25.250
它会在这里使用，它说嘿，有动物的 setBreed 或者
And it goes here to useEffect and
it says hey, has animal setBreed or

42
00:02:25.250 --> 00:02:28.620
自从上次我运行这种效应以来， setBreeds 变了吗 ?
setBreeds changed since last
time I ran this effect?

43
00:02:30.289 --> 00:02:31.460
没有，对吧 ?
No, right?

44
00:02:31.460 --> 00:02:36.650
因此，它不会将此影响安排为再次运行，到目前为止还不错吗 ?
So it does not schedule this
effect to run again, good so far?

45
00:02:39.920 --> 00:02:47.115
好，然后我进去，我选择动物，它是狗，现在它是猫。
Okay, then I go in and I select animal
to be, it was dog and now it's cat.

46
00:02:47.115 --> 00:02:50.848
所以它会重新呈现但它说
So it's gonna re-render but it says,

47
00:02:50.848 --> 00:02:54.930
哎，动物变了，是吧 ?
hey, did animal change, it did, right?

48
00:02:54.930 --> 00:02:56.870
我把它从狗变成了猫
I changed it from dog to cat.

49
00:02:56.870 --> 00:03:01.144
所以它会立即将它设置为空数组，并且
So it's gonna set immediately set
breeds to be empty array, and

50
00:03:01.144 --> 00:03:05.733
空字符串将调用该 API，请重新获取新种
empty string is going to then call
the API, get the new breeds back and

51
00:03:05.733 --> 00:03:08.610
在那之后它就会重新呈现
it's gonna re-render again after that.

52
00:03:11.320 --> 00:03:12.673
>> Brian Holt: 这有道理吗 ?
&gt;&gt; Brian Holt: That makes sense?

53
00:03:14.836 --> 00:03:16.270
>> Brian Holt: 因此，这就是使用状态和
&gt;&gt; Brian Holt: So this is how useState and

54
00:03:16.270 --> 00:03:20.258
useEffects 协同工作，以管理此类状态更新。
useEffects work together to kind of
manage these kind of state updates.

55
00:03:23.227 --> 00:03:27.885
>> 扬声器 2: 对于确定是否为
&gt;&gt; Speaker 2: So for
the dependency array that determines if

56
00:03:27.885 --> 00:03:31.955
useEffect 运行，该函数运行。
useEffect is run, that functions run.

57
00:03:31.955 --> 00:03:35.957
当我们放进 setBreed 和 setBreeds时
When we put in setBreed and setBreeds,

58
00:03:35.957 --> 00:03:44.341
我们只是说如果他们重新分配了就会重新运行
we're just saying basically if those were
reassigned and then it would rerun it.

59
00:03:44.341 --> 00:03:45.560
>> Brian Holt: 你把这件事提起来很有趣。
&gt;&gt; Brian Holt: That's funny
that you bring this up.

60
00:03:45.560 --> 00:03:49.090
我和几个 React 进行了一段时间的讨论
I had an at-length discussion
with a couple of the React

61
00:03:49.090 --> 00:03:53.729
核心团队成员我觉得这很傻因为这永远不会改变
core team members of I think that's silly,
because that's never gonna change.

62
00:03:53.729 --> 00:03:56.250
他们基本上说，我们不管，还是去做。
And they basically said,
we don't care, do it anyway.

63
00:03:58.409 --> 00:04:02.629
我觉得这样更好，因为这更清楚你的意图，对吧 ?
I would think this is better because this
is more clear about your intention, right?

64
00:04:02.629 --> 00:04:04.974
只在动物运行时运行。
Only at run when animal runs.

65
00:04:04.974 --> 00:04:08.956
但你会得到一个错误， >> Brian Holt: SetBreed 需要
But you're gonna get an error of,
&gt;&gt; Brian Holt: SetBreed needs to

66
00:04:08.956 --> 00:04:09.469
在那里
be in there.

67
00:04:11.419 --> 00:04:14.650
所以我放弃了这就是社区所做的
So I gave up,
this is what the community's doing,

68
00:04:14.650 --> 00:04:16.009
所以我在教你社区的工作
so I'm teaching you what
the community's doing.

69
00:04:18.560 --> 00:04:21.737
我是说理论上这不是个坏主意对吧
I mean, in theory,
it's not a bad idea, right?

70
00:04:21.737 --> 00:04:26.247
我想理论上是可以更新的之类的
I guess in theory it could be updated or
something like that, but whatever,

71
00:04:26.247 --> 00:04:27.170
我不知道我不知道
I don't know.

72
00:04:27.170 --> 00:04:28.160
>> 扬声器 3: 所以它只是在寻找
&gt;&gt; Speaker 3: So it's just looking for

73
00:04:28.160 --> 00:04:33.090
您在该功能中使用的任何外部变量吗 ?
any external variable that
you're using in that function?

74
00:04:33.090 --> 00:04:38.930
> > Brian Holt: 对，这里的想法是我有 setBreed，对吧 ?
&gt;&gt; Brian Holt: Right, so the idea here
being that I have setBreed, right?

75
00:04:38.930 --> 00:04:43.507
如果我使用 setBreed 因为它是在这里定义的
And if I'm using setBreed because
it's defined in here inside of this

76
00:04:43.507 --> 00:04:48.007
功能本身就意味着如果这个 setBreed 的任何时间都改变了
function itself, that means if any
time this setBreed does change,

77
00:04:48.007 --> 00:04:50.050
它应该重新运行效果。
it should re-run the effect.

78
00:04:50.050 --> 00:04:51.920
这就是动物对吧
Which is true of Animal, right?

79
00:04:51.920 --> 00:04:55.485
我在这里用动物所以任何动物都改变了
I'm using Animal here, so
any time that Animal changes,

80
00:04:55.485 --> 00:04:57.319
我需要重新发挥作用。
I need to re-run the effect.

81
00:04:57.319 --> 00:05:01.040
这就是他们在追的东西，这会救你的，对吧 ?
So that's what they're chasing after,
this will save you bugs, right?

82
00:05:01.040 --> 00:05:02.831
因为如果我没有动物在这里
Because if I didn't have Animal in here,

83
00:05:02.831 --> 00:05:04.889
其实这件事对你很有利
actually this would be
a good thing to show you.

84
00:05:04.889 --> 00:05:08.583
所以如果我带动物离开这里它会第一次请求
So if I take Animal out of here,
it will request it the first time, and

85
00:05:08.583 --> 00:05:11.093
我要去找澳大利亚牧羊人对吧
I'm gonna get Australian shepherd, right?

86
00:05:11.093 --> 00:05:16.529
但如果我把它改为猫它就不会更新了
But if I change this to be cat now,
it's not gonna update.

87
00:05:16.529 --> 00:05:20.189
对，因为它不可能回到 API 上，因为它认为我是好的，
Right, because it's not gonna go back to
the API because it thinks like, I'm good,

88
00:05:20.189 --> 00:05:23.170
对，我不需要改变，因为，我不依赖动物。
right, I don't have to change,
because, I don't depend on animal.
