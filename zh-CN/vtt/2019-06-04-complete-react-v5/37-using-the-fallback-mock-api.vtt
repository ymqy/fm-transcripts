WEBVTT

1
00:00:00.040 --> 00:00:03.240
>> Brian Holt: 因此，您实际上可以使整个研讨会完全脱机，
&gt;&gt; Brian Holt: So you can actually do
this entire workshop totally offline,

2
00:00:03.240 --> 00:00:04.799
这对你也很有用
which is useful to you as well.

3
00:00:04.799 --> 00:00:09.186
这是否有时我们的 IT 人员可能有问题
Whether that's maybe sometimes
our IT guy might have an issue or

4
00:00:09.186 --> 00:00:13.016
你不在一个有互联网接入的地方
you're just not in a place
where have internet access.

5
00:00:13.016 --> 00:00:16.963
在这种情况下，我们实际上已使 API 客户机工作 100% 脱机。
In that case, we've actually made it so
the API client works 100% offline.

6
00:00:16.963 --> 00:00:21.079
所以我要向你们展示如何使这一工作更快地完成。
So I'm going to show you how to
make that work really quickly.

7
00:00:21.079 --> 00:00:25.030
你想做的第一件事就是这里的命令
The first thing that you're gonna
wanna run is this command right here,

8
00:00:25.030 --> 00:00:26.725
npm install-D 交叉 env。
npm install-D cross-env.

9
00:00:26.725 --> 00:00:31.420
这是为了确保环境变量在 Linux中一致，
This is to make sure that environmental
variables were consistently across Linux,

10
00:00:31.420 --> 00:00:34.850
还有麦克和窗户那就去吧
and Mac, and Window, so
go ahead and do that.

11
00:00:36.109 --> 00:00:41.029
转至命令行。
Go to your command line.

12
00:00:41.029 --> 00:00:47.085
去你的项目我们叫我们收养我
Go to your projects,
which we called ours adopt me,

13
00:00:47.085 --> 00:00:51.222
并执行 npm install-D 交叉 env。
and do npm install-D cross-env.

14
00:01:00.203 --> 00:01:02.929
> > Brian Holt: 好的，一旦您安装了该工具，
&gt;&gt; Brian Holt: Okay,
once you have that tool installed,

15
00:01:02.929 --> 00:01:06.591
那我要你把这个放进你的包里
then I want you to put this
inside of your package.json.

16
00:01:06.591 --> 00:01:10.180
"dev:mock":cross -env PET_MOCK=模拟。
"dev:mock": cross-env PET_MOCK=mock.

17
00:01:10.180 --> 00:01:14.840
这是用于 API 前进并使用模拟数据的信号。
This is the signal for
the API to go ahead and use the mock data.

18
00:01:14.840 --> 00:01:17.489
然后执行 npm 运行 dev。
And then do npm run dev.

19
00:01:18.560 --> 00:01:21.890
这只会执行同样的命令，但它会在不同的环境中运行。
And this will just do the same command but
it'll run it in a different environment.

20
00:01:21.890 --> 00:01:23.920
这才是你要做的
And that's all that's going to do for you.

21
00:01:23.920 --> 00:01:33.918
所以我要复制并粘贴这个 > > Brian Holt: Into my package.json。
So I'm just going to copy and paste this
&gt;&gt; Brian Holt: Into my package.json.

22
00:01:33.918 --> 00:01:38.909
所以我已经在这里了但我要告诉你们这就是它所在的地方
So I actually have it already here but
I'll just show you this is where it is.

23
00:01:38.909 --> 00:01:41.360
我把它放进去
And I'll just put that in there.

24
00:01:44.763 --> 00:01:47.822
>> Brian Holt: 现在，如果我说 npm 运行 dev:mock，
&gt;&gt; Brian Holt: Now,
if I say npm run dev:mock,

25
00:01:47.822 --> 00:01:51.546
一切都一样
everything will work exactly the same.

26
00:01:56.847 --> 00:01:59.135
>> Brian Holt: 除所有数据都将被嘲笑外，
&gt;&gt; Brian Holt: Except all
the data will be mocked,

27
00:01:59.135 --> 00:02:01.581
这意味着它永远不会点击 API。
which means it will never hit the API.

28
00:02:01.581 --> 00:02:06.635
所以如果我要到这里来刷新页面
So if I go here to this,
refresh the page, and

29
00:02:06.635 --> 00:02:12.373
你可以看到我的数据是非森森的对吧
there you can see I have nonsensical data,
right?

30
00:02:12.373 --> 00:02:15.899
现在，这只是返回给您的随机数据。
Now, this is just returning
to you random data.

31
00:02:15.899 --> 00:02:20.542
好消息是它是决定性的如果我去的话
The good news is that it is deterministic
in the sense that if I go to,

32
00:02:20.542 --> 00:02:24.213
通知说这第二个叫 Jewelery
notice that this second one
here is called Jewelery.

33
00:02:24.213 --> 00:02:29.674
如果我去 Cat ，它会给我一套不同的品种。
And if I go to Cat,
it will give me a different set of breeds.

34
00:02:29.674 --> 00:02:34.829
但如果我回去做狗， >> Brian Holt:
But if I go back to dog,
&gt;&gt; Brian Holt: It gives

35
00:02:34.829 --> 00:02:39.030
我也有同样的数据，所以它可以可靠的和随机的东西一样。
me the same set of data as well, so it's
dependably the same list of random things.

36
00:02:41.300 --> 00:02:45.259
所以如果你有我做的同样的问题那就是它不是在一个模拟的
So if you had the same problem that I did,
which is that it wasn't building in a mock

37
00:02:45.259 --> 00:02:50.050
方式，只是除去，或者
mode, just do remove, or rather,

38
00:02:50.050 --> 00:02:54.030
要执行的操作是您只想删除高速缓存和
what you want to do is you just
want to delete the cache and

39
00:02:54.030 --> 00:02:57.250
dist 目录，因为有时解析处于陌生状态。
dist directories because sometimes
parse gets in a strange state.

40
00:02:58.949 --> 00:03:02.650
所以如果你只强调这两者并说删除的话，
So if you just highlight those two and
say delete, and

41
00:03:02.650 --> 00:03:05.539
然后重新运行 dev: 模拟，所有内容都应正确构建。
then rerun dev: mock,
everything should build correctly.
