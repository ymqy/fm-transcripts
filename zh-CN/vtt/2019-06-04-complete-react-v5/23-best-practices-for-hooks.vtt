WEBVTT

1
00:00:00.110 --> 00:00:03.470
>> Brian Holt: 我需要你做的最基本的关键
&gt;&gt; Brian Holt: An absolutely fundamental
key thing that I need you to

2
00:00:03.470 --> 00:00:08.103
现在真正了解的是钩子是永远不会进入的
really understand right now with hooks is
they never go inside of if statements,

3
00:00:08.103 --> 00:00:10.730
他们从不进去做循环之类的事
and they never go inside for
loops or anything like that.

4
00:00:12.630 --> 00:00:15.999
为甚么呢 ? 所以我不能说
Why?
So I can't say like,

5
00:00:15.999 --> 00:00:21.547
如果有什么我做不到的
if (something), I can't do this.

6
00:00:21.547 --> 00:00:25.289
这事没问题千万别这样
This is not okay, never do this.

7
00:00:25.289 --> 00:00:26.942
挂钩工作的方式是
The way that hooks work is,

8
00:00:26.942 --> 00:00:31.239
基本上他们都在跟踪你在制造钩子的顺序
basically, they're keeping track of
the order that you're creating hooks.

9
00:00:31.239 --> 00:00:34.179
所以如果我有另一个钩子，比如比如说
So if I have another hook underneath this,
like for example, like for

10
00:00:34.179 --> 00:00:36.729
动物和 setAnimal
the animal, and setAnimal.

11
00:00:37.899 --> 00:00:40.229
我们会让这只狗或类似的东西
And we'll make this dog or
something like that.

12
00:00:41.770 --> 00:00:45.210
他们跟踪每个个体状态的方式是
The way that they're keeping track
of each individual piece of state is

13
00:00:45.210 --> 00:00:48.520
他们在跟踪你把这些东西叫的顺序对吧
they're keeping track of the order that
you're calling these things in, right?

14
00:00:49.530 --> 00:00:54.008
所以如果我把这些事情说不出来或者如果我有一个声明的话
So if I call these things out of order or
if I have an if statement, and then,

15
00:00:54.008 --> 00:00:56.000
让我们想象吧 [ INAUDIBLE]
let's just imagine [INAUDIBLE],

16
00:00:56.000 --> 00:01:01.450
如果情况 >> Brian Holt: 如果为 true
if something
&gt;&gt; Brian Holt: If this is true

17
00:01:01.450 --> 00:01:05.210
第一次呼叫和第二次通话是假的，这将是第一件事，
on the first call and false in the second
call, this will be the first thing called,

18
00:01:05.210 --> 00:01:08.168
这意味着这将会得到地点而不是动物
which means that this is going to
get location instead of animal,

19
00:01:08.168 --> 00:01:09.930
这会把一切都搞砸了
which is going to mess up everything.

20
00:01:11.849 --> 00:01:15.200
所以就算你无视国家的情况
So even if you're ignoring
what is in useState,

21
00:01:16.439 --> 00:01:19.882
您仍必须在 if 语句之外调用 useState ( 在 for 循环之外 ) 。
you still have to call useState outside of
the if statement, outside of a for loop.

22
00:01:19.882 --> 00:01:22.549
所以我要向你介绍一个 EL Synch 规则
So I'm actually gonna introduce
you to an EL Synch rule

23
00:01:22.549 --> 00:01:23.859
想让你这么做
that want to make you do that.

24
00:01:25.120 --> 00:01:29.397
但我想强调的是你不能
But I just want to very much underscore
the fact that you cannot put in

25
00:01:29.397 --> 00:01:32.400
一个 if 语句，您不能将其放入 for 循环或
an if statement and
you cannot put in a for loop or

26
00:01:32.400 --> 00:01:36.024
任何一种条件或不可预测的逻辑
really any sort of conditional or
unpredictable logic.

27
00:01:38.921 --> 00:01:41.847
>> Brian Holt: 不可避免地，此时的某个人将会向我提问，但
&gt;&gt; Brian Holt: Inevitably, someone at this
point in time is going to ask me like, but

28
00:01:41.847 --> 00:01:44.439
如果我仔细地说它是按顺序来的
what if I'm very careful that
it's called in the same order?

29
00:01:45.479 --> 00:01:48.539
别这样我就会找到你然后我就会羞辱你
Just don't, I will find you and
then I will shame you.

30
00:01:48.539 --> 00:01:50.829
开玩笑的我不知道但求你别这样
[LAUGH] Just kidding,
I don't know, but please don't.

31
00:01:52.689 --> 00:01:56.640
它其实是在码头上强调的，所以它就像从来没有做过一样。
It's actually underscored in the docs, so
it's just something like just never do it.

32
00:01:58.039 --> 00:02:00.686
总是能确保他们在外面
Always make sure that
they're outside of that.

33
00:02:02.715 --> 00:02:05.382
>> Brian Holt: 这适用于所有挂钩，而不仅仅是使用状态，
&gt;&gt; Brian Holt: And this applies
to all hooks, not just useState,

34
00:02:05.382 --> 00:02:06.560
所有钩子都是一般的
all hooks in general.

35
00:02:07.730 --> 00:02:10.409
确保您始终在使用某些内容，对吗 ?
Make sure you are always
using use something, right?

36
00:02:10.409 --> 00:02:15.270
如果你要用这个公约
That's a convention that React,
if you use this convention,

37
00:02:15.270 --> 00:02:18.090
然后 ES 可以帮你执行一些规则
then the ES can help you
enforce some of these rules,
