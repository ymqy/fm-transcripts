WEBVTT

1
00:00:00.450 --> 00:00:02.399
>> Brian Holt: 让我们谈谈上下文是什么。
&gt;&gt; Brian Holt: Let's talk
about what context is.

2
00:00:02.399 --> 00:00:06.459
在这个课程的第一个版本中，我根本没有教过任何内容，
In the first versions of this course
I didn't teach context at all,

3
00:00:06.459 --> 00:00:07.969
因为它是一个不稳定的 API
because it used to be an unstable API.

4
00:00:09.779 --> 00:00:13.246
此课程中的第四个课程作为一个稳定的 API 来实现，因此
With version four of this course
it landed as a stable API and so

5
00:00:13.246 --> 00:00:17.059
它现在其实是你有时候想用的东西。
it's actually now something that
you might want to use sometimes.

6
00:00:18.670 --> 00:00:22.210
所以，让我们谈谈为什么它可能有用。
So, let's talk about why it
could potentially be useful.

7
00:00:22.210 --> 00:00:24.783
有时您会像全局应用程序状态一样
Sometimes you'll have like
global applications state and

8
00:00:24.783 --> 00:00:28.190
一个很好的例子就是用户登录信息。
a really good example of this would be
something like user log in information.

9
00:00:28.190 --> 00:00:31.961
所以，也许你在 Netflix.com 当一个用户从路线浏览到
So, maybe you are in Netflix.com and
as a user navigates from route to route to

10
00:00:31.961 --> 00:00:35.235
路由，每个页面都将使用该用户的数据。
route, every single page is gonna
use pieces of that user's data.

11
00:00:35.235 --> 00:00:37.115
您应该在此处显示电子邮件，
You should display the email here,

12
00:00:37.115 --> 00:00:39.686
你在这里展示他们的用户喜好
you show them their user
preferences over here,

13
00:00:39.686 --> 00:00:43.838
向他们显示您将从用户登录所获得的所有信息。
you show them all this information that
you would get from the user logging in.

14
00:00:43.838 --> 00:00:45.859
现在我给你展示的所有工具
Right now with all the tools
that I've shown you,

15
00:00:45.859 --> 00:00:48.603
你要做的就是把所有信息都放进应用程序点 JS
what you would do is you'd put all
the information into app dot JS and

16
00:00:48.603 --> 00:00:50.600
你就会把它传给每个孩子
you would just pass it
into every single child.

17
00:00:50.600 --> 00:00:54.170
然后你就会有这个问题我们称之为道具钻井
Then, you would kind of have this
problem we would call prop drilling

18
00:00:54.170 --> 00:00:57.960
如果你要把父母的财产交给孩子
where you would have to take the property
from the parent, pass it into the child,

19
00:00:57.960 --> 00:00:59.929
从父代获取属性，将其传递到子代。
take the property from the parent,
pass it into the child.

20
00:00:59.929 --> 00:01:03.359
所以在多个层面上，都是很烦人的。
So on and so forth down multiple levels,
it's annoying.

21
00:01:03.359 --> 00:01:07.260
它也很有用，因为您可以通过应用程序查看数据流，但是
It's also useful because you can see the
flow of data through your application, but

22
00:01:07.260 --> 00:01:10.359
在任何地方都要为用户数据做任何事情都是很烦人的
it's annoying to have to do it
everywhere for something like user data,

23
00:01:10.359 --> 00:01:13.760
因为应用程序的每个部分都将联系您的用户数据。
because every part of your application
is going to touch your user data.

24
00:01:13.760 --> 00:01:15.510
你知道这有什么问题吗
You kind of get where this is the problem?

25
00:01:16.930 --> 00:01:20.560
我们一直在用雷德克斯来解决这个问题。
Where we have been solving that
is using redux, historically.

26
00:01:20.560 --> 00:01:23.680
Redux 通常是您在旁边有此数据存储器。
Redux is typically you have
this data store on the side and

27
00:01:23.680 --> 00:01:26.590
您将所有信息输入到数据存储器中，
you feed all the information
into the data store and

28
00:01:26.590 --> 00:01:29.109
那么应用程序的每个部分都可以从 redux 存储中读取。
then every part of your application
can read from the redux store.

29
00:01:30.359 --> 00:01:31.250
Redux 很难
Redux is hard.

30
00:01:31.250 --> 00:01:35.599
我们会在中间的反应中进行
We'll actually go over it
in intermediate React, but

31
00:01:35.599 --> 00:01:39.530
这类事情很难而且经常会被过度杀戮
it's hard and often overkill for
these sort of things.

32
00:01:39.530 --> 00:01:43.719
还有一件新事物是你可以使用的叫做 " 上下文 " 的新事物
There's another thing that's new to
React called Context that you can use,

33
00:01:43.719 --> 00:01:45.930
你可以把这些都加载到
that you can load these into basically

34
00:01:47.539 --> 00:01:51.840
整个 React 应用程序可以使用和更新的数据存储器。
a data store that your entire React
application can use and update.

35
00:01:51.840 --> 00:01:54.069
但知道那是一把双刃剑对吧
But just know that's kind of
a double edged sword, right?

36
00:01:54.069 --> 00:01:57.659
你在利用 React 的明显优势
You're taking out the advantage
of React of being explicit, and

37
00:01:57.659 --> 00:02:00.143
现在一切都是隐性的，对吧 ?
now everything kind of has
implicit dependencies, right?

38
00:02:00.143 --> 00:02:01.370
这很困难
It's hard.

39
00:02:01.370 --> 00:02:06.343
那么让我们， >> Brian Holt: 我们去看看
So let's,
&gt;&gt; Brian Holt: Let's go take a look

40
00:02:06.343 --> 00:02:07.191
你是怎么做到的
at how you do that.

41
00:02:09.603 --> 00:02:13.451
>> Brian Holt: 因此，我希望您在此创建新的文件
&gt;&gt; Brian Holt: So
I want you to make a new file here and

42
00:02:13.451 --> 00:02:17.682
我要你把它叫做 ThemeContex.js
I want you to call it ThemeContext.js.

43
00:02:22.938 --> 00:02:26.587
> > Brian Holt: 好的，这里很短，很甜。
&gt;&gt; Brian Holt: Okay,
gonna be short and sweet here.

44
00:02:26.587 --> 00:02:30.028
我们要为申请做个主题
We're gonna make a theme for
our application.

45
00:02:30.028 --> 00:02:36.615
因此，导入，创建上下文，从反应开始。
So import, create context, from react.

46
00:02:39.021 --> 00:02:44.504
>> Brian Holt: 我将说 const ThemeContext = React.createContext 和
&gt;&gt; Brian Holt: I'm gonna say const
ThemeContext = React.createContext and

47
00:02:44.504 --> 00:02:48.058
我们会给它一个钩状的形状
we're gonna give it a hook-like shape,

48
00:02:48.058 --> 00:02:54.060
因为我们要在里面贴个钩子
because we're actually going to
stick a hook inside of here.

49
00:02:54.060 --> 00:02:56.490
但是你知道，你可以在上下文中做任何事情。
But just so you know,
you can stick anything in context.

50
00:02:56.490 --> 00:03:01.129
它可以是一个对象，它可以是函数，它可以是一个字符串，一个数字，
It can be an object, it can be function,
it can be a string, a number,

51
00:03:01.129 --> 00:03:01.930
不管你想要什么
whatever you want.

52
00:03:01.930 --> 00:03:04.020
但我们实际上是要在那里贴一个钩子。
But we're actually going to
literally stick a hook in there.

53
00:03:05.219 --> 00:03:07.502
所以我们要放绿色
So, we're gonna put green, or

54
00:03:07.502 --> 00:03:11.739
任何您喜欢的 CSS 名称和功能。
whatever your favorite CSS name color is,
and a function.

55
00:03:13.885 --> 00:03:16.789
>> Brian Holt: 现在，我为什么会得到这个空函数?
&gt;&gt; Brian Holt: Now,
why did I get this empty function?

56
00:03:16.789 --> 00:03:21.710
这实际上是一个占位符，所以它会使用这个特殊的
This is actually a placeholder,
so it will use this particular

57
00:03:21.710 --> 00:03:25.110
如果它没有上面的提供程序，但它永远不应该发生。
function if it has no provider above
it but this should never happen.

58
00:03:26.370 --> 00:03:29.490
这对你未来的自我是更公正的说明。
So this is actually more just notes for
your future self.

59
00:03:29.490 --> 00:03:33.599
这就是这看起来的样子，这才是钩子的样子。
This is what this looks like and
this is what a hook looks like.

60
00:03:33.599 --> 00:03:36.560
它有国家，有一个更新者。
It has the state and it has an updater.

61
00:03:36.560 --> 00:03:38.366
在这种情况下，更新者什么都不做，所以
In this case,
the updater doesn't do anything, so

62
00:03:38.366 --> 00:03:39.563
我们只是给它一个空虚的功能
we just give it an empty function.

63
00:03:42.004 --> 00:03:44.432
>> Brian Holt: 有意义吗 ?
&gt;&gt; Brian Holt: Make sense?

64
00:03:44.432 --> 00:03:46.376
我们不想要 React.createContext。
And we don't want React.createContext.

65
00:03:46.376 --> 00:03:48.081
我们只需要这样的 createContext 。
We just want createContext like that.

66
00:03:51.792 --> 00:03:55.264
> > Brian Holt: 好的，然后在下面下面，
&gt;&gt; Brian Holt: Okay, and
then down here at the bottom,

67
00:03:55.264 --> 00:03:58.442
仅导出缺省 ThemeContext。
just export default ThemeContext.

68
00:04:01.812 --> 00:04:03.616
> > Brian Holt: 现在我们创建了上下文，
&gt;&gt; Brian Holt: So
now we've created the context,

69
00:04:03.616 --> 00:04:06.093
现在我们要把它用在我们的 app.js里
now we're gonna go use
it inside of our app.js.

70
00:04:07.300 --> 00:04:12.252
好吗 ? 不需要 app.js
Okay?
Instead of app.js we want

71
00:04:12.252 --> 00:04:17.055
您要导入 themeContext
you to import themeContext

72
00:04:17.055 --> 00:04:21.273
来自 /themeContext。
from /themeContext.

73
00:04:21.273 --> 00:04:26.579
在我们要创建的应用程序中，我们也需要使用状态来进行反应。
Here inside of app we're going to create,
we also need use state from react.

74
00:04:26.579 --> 00:04:27.906
所以请从这里开始使用状态。
So get use state from up here.

75
00:04:27.906 --> 00:04:29.906
使用状态。
Use state.

76
00:04:32.613 --> 00:04:36.752
>> Brian Holt: 我们会说， >> Brian Holt: Const
&gt;&gt; Brian Holt: And we're gonna say,
&gt;&gt; Brian Holt: Const

77
00:04:36.752 --> 00:04:41.396
themeHook = useState。
themeHook = useState.

78
00:04:41.396 --> 00:04:42.976
我们必须给它一些默认值。
And we have to give it
some default values.

79
00:04:42.976 --> 00:04:46.023
因此，要显示缺省值不同，
So just to show that
the default value is different,

80
00:04:46.023 --> 00:04:47.968
我要把深蓝色放在这里
I'm gonna put dark blue in here.

81
00:04:51.451 --> 00:04:54.077
> > Brian Holt: 现在记住我们通常都在做，
&gt;&gt; Brian Holt: Now remember
we normally have been doing,

82
00:04:56.095 --> 00:04:58.877
>> Brian Holt: 此处的颜色和 setColor 。
&gt;&gt; Brian Holt: color and setColor here.

83
00:04:58.877 --> 00:05:02.009
就像这里的钩子如果你还记得以前的事
Like this right here with hooks if you
remember from earlier in the course.

84
00:05:03.410 --> 00:05:07.908
但现在我们要把整个阵列称为 " 神虎克 "
But right now we're just gonna grab
the whole array and call it themeHook.

85
00:05:11.658 --> 00:05:14.279
> > 布莱恩 - 霍尔特:
&gt;&gt; Brian Holt: And then I'm gonna
wrap everything inside of here,

86
00:05:14.279 --> 00:05:16.550
在 StrictMode 的内部。
inside of StrictMode here.

87
00:05:16.550 --> 00:05:22.947
ThemeContext ，然后您说值 = themeHook。
ThemeContext and
then you say value = themeHook.

88
00:05:33.348 --> 00:05:38.518
>> Brian Holt: 因此，现在我们在这里做了什么，对不起，你必须做
&gt;&gt; Brian Holt: So now what we've
done here, sorry, you have to do

89
00:05:38.518 --> 00:05:44.428
这两个 .Provider ， .Provider上的 ThemeContext 。
ThemeContext on both of these .Provider,
.Provider.

90
00:05:44.428 --> 00:05:44.928
嗯。
Yeah.

91
00:05:51.069 --> 00:05:54.271
>> Brian Holt: 因此在第 22 行和第 12 行引入
&gt;&gt; Brian Holt: So on line 22 and
line 12 there introduce

92
00:05:54.271 --> 00:06:01.425
Themecontext.provider， >> Brian Holt: 因此
Themecontext.provider,
&gt;&gt; Brian Holt: So

93
00:06:01.425 --> 00:06:05.961
我们在这里所做的一切
what we've done here is now
everything inside of here has

94
00:06:05.961 --> 00:06:09.843
可作为全局应用提供此主题。
available as a global app
state this themeHook.

95
00:06:12.795 --> 00:06:15.843
>> Brian Holt: 现在，我可以有两个不同的主题挂钩供应商，
&gt;&gt; Brian Holt: Now, I could have two
different theme hook providers where they

96
00:06:15.843 --> 00:06:18.850
可以具有搜索参数，并且详细信息具有不同的提供程序。
can have search params and
details have different providers.

97
00:06:18.850 --> 00:06:22.490
它们可以有不同的价值。
And they could have these
value be different things.

98
00:06:22.490 --> 00:06:25.649
所以实际上，你可以在上下文和
So there's actually a lot of flexibility
that you can do with context and

99
00:06:25.649 --> 00:06:27.360
我从没用过
I just never use it.

100
00:06:27.360 --> 00:06:31.050
所以我认为有用的唯一方法就是
So, the only thing that I find useful is
providing like the entire application with

101
00:06:31.050 --> 00:06:34.740
一个全局应用程序状态，但是您可以执行一些 fanciness 。
a global application state but
there is some fanciness that you can do.
