WEBVTT

1
00:00:00.100 --> 00:00:03.669
>> 布莱恩 - 霍尔特: 我们之前说过的都是钩子，对吧 ?
&gt;&gt; Brian Holt: All we've talked about so
far are hooks, right?

2
00:00:03.669 --> 00:00:06.860
如何使用挂钩状态 ?
How to do state with hooks?

3
00:00:06.860 --> 00:00:09.122
它被称为无状态功能组件
It used to be called stateless
functional components and

4
00:00:09.122 --> 00:00:11.064
现在人们只称其为功能组件
now people just call
them function components.

5
00:00:11.064 --> 00:00:14.669
但如果你看到这些术语，那就意味着同样的事情，对吧 ?
But if you see that terminology,
those mean the same thing, right?

6
00:00:14.669 --> 00:00:18.022
这就意味着一个不是一类的功能。
It just means that a function
that's not a class.

7
00:00:18.022 --> 00:00:21.297
我要教你怎么做其他的类零件
I'm going to show you how to do the other
way of doing components which are class

8
00:00:21.297 --> 00:00:22.690
组件。
components.

9
00:00:22.690 --> 00:00:26.614
它们在一个最相似的方面发挥作用
And they function in one
most ways very similarly and

10
00:00:26.614 --> 00:00:29.295
以其他方式换种方式
in other ways, a bit differently.

11
00:00:30.516 --> 00:00:34.764
>> Brian Holt: 因此，我们将使详细信息页面成为类组件。
&gt;&gt; Brian Holt: So we're gonna make
the details page be a class component.

12
00:00:36.698 --> 00:00:42.067
>> Brian Holt: 我接下来要做的是 :
&gt;&gt; Brian Holt: So what I'm gonna do here
is I'm gonna say class Details extends

13
00:00:42.067 --> 00:00:47.509
React.Component， >> Brian Holt: 好吗 ?
React.Component,
&gt;&gt; Brian Holt: Okay?

14
00:00:48.691 --> 00:00:51.475
>> Brian Holt: 因此，这是 JavaScript 类。
&gt;&gt; Brian Holt: So,
this is a JavaScript class.

15
00:00:51.475 --> 00:00:53.304
这事还没啥特别的对吧
There's nothing special about this yet,
right?

16
00:00:53.304 --> 00:00:56.655
它扩展了 React.Component ，这意味着它有一些继承
It extends React.Component which means
that it has some inheritance that it's

17
00:00:56.655 --> 00:00:58.807
能从反应成分中得到
gonna get from a react component.

18
00:00:58.807 --> 00:01:01.281
>> Brian Holt: 但除了这一点，它的工作方式也相对相同。
&gt;&gt; Brian Holt: But other than that,
it works relatively the same way.

19
00:01:01.281 --> 00:01:05.996
每个类组件的一个硬需求都必须具有呈示方法。
The one hard requirement of every class
component is it must have a render method.

20
00:01:07.531 --> 00:01:09.433
>> Brian Holt: 除非您具有呈示方法，否则它将不起作用。
&gt;&gt; Brian Holt: It will not work
unless you have a render method.

21
00:01:13.650 --> 00:01:18.081
>> Brian Holt: 然后，此呈示方法主要工作于函数方式
&gt;&gt; Brian Holt: And then this render
method works mostly like how a function

22
00:01:18.081 --> 00:01:20.126
组件工作，对吗 ?
component works, right?

23
00:01:23.039 --> 00:01:25.805
> > 布莱恩 - 霍特( Brian Holt ) :
&gt;&gt; Brian Holt: So
one thing to keep in mind as well is that,

24
00:01:27.680 --> 00:01:28.984
>> Brian Holt: 不能使用挂钩
&gt;&gt; Brian Holt: You can't use hooks

25
00:01:28.984 --> 00:01:30.527
有课对吧
with classes, right?

26
00:01:30.527 --> 00:01:34.466
因此，使用状态仅仅只是在类组件中不起作用。
So use state will just simply not
function inside of a class component.

27
00:01:42.665 --> 00:01:46.037
> > Brian Holt: 好的， >> Brian Holt: 因此，
&gt;&gt; Brian Holt: Okay,
&gt;&gt; Brian Holt: So,

28
00:01:46.037 --> 00:01:49.414
我们会在这里用每秒的渲染方法
we're gonna put in a render
method here in just a second.

29
00:01:52.774 --> 00:01:56.134
>> Brian Holt: 但让我们继续输入组件 DidMount。
&gt;&gt; Brian Holt: But let's go ahead and
put in a componentDidMount.

30
00:01:58.515 --> 00:02:01.637
>> Brian Holt: 所以，组件，你可以在这里看到它会尝试
&gt;&gt; Brian Holt: So, component, you can see
here that it's actually gonna try and

31
00:02:01.637 --> 00:02:04.873
我知道它是从 React.Component公司来的
complete it for me cuz it knows
it's coming from React.Component,

32
00:02:04.873 --> 00:02:06.909
这就是它对所有这些方法的认识
that's how it knows all of these methods.

33
00:02:08.373 --> 00:02:11.262
>> Brian Holt: 这些方法称为生命周期方法。
&gt;&gt; Brian Holt: These
are called lifecycle methods.

34
00:02:11.262 --> 00:02:15.638
>> Brian Holt: 今天，我们将讨论 componentDidMount。
&gt;&gt; Brian Holt: And, right today,
we're gonna talk about componentDidMount.

35
00:02:15.638 --> 00:02:20.146
componentDidMount 是一种非常相似的使用效果，即
And componentDidMount is a very, very
similar to use effect in the sense that it

36
00:02:20.146 --> 00:02:22.855
当它第一次启动时就会运行，但是它会停止。
runs when it first start up,
but then it stops.

37
00:02:22.855 --> 00:02:25.977
之后就不会再跑了好吗
It doesn't run anymore after that, okay?

38
00:02:25.977 --> 00:02:28.889
鉴于使用效果，您必须为其提供依赖关系以及类似的内容。
Whereas use effect, you have to give it
the dependencies and things like that.

39
00:02:28.889 --> 00:02:33.100
ComponentDidMount 就像我第一次创建时就会这么做
ComponentDidMount just as like I'm gonna
do this once when I first get created and

40
00:02:33.100 --> 00:02:35.188
那我就做这件事好吗
then I'm done doing this thing, okay?

41
00:02:35.188 --> 00:02:38.485
这就是我们要用 componentDidMount做的事情。
So that's what we're gonna
do with componentDidMount.

42
00:02:40.290 --> 00:02:43.808
>> Brian Holt: ComponentDidMount 用于执行 Ajax 请求之类的操作，
&gt;&gt; Brian Holt: ComponentDidMount is useful
for things like doing Ajax request,

43
00:02:43.808 --> 00:02:47.921
这正是我们要做的正确的，当有人加载页面时。
which is exactly what we're gonna do,
right, when someone loads the page.

44
00:02:47.921 --> 00:02:51.691
我们要去 API ，从 API 中获取宠物信息，对吧 ?
We wanna go to the API and get the pet
information back from the API, right?.

45
00:02:52.698 --> 00:02:58.896
> > Brian Holt: 所以，当我们说宠物时，这正是我们要做的事情，
&gt;&gt; Brian Holt: So, that's exactly
what we're gonna do when we say pet,

46
00:02:58.896 --> 00:03:07.260
我们将从宠物主人/宠物进口的宠物进口
which we are going to import that from
import pet from frontendmasters/pet.

47
00:03:10.385 --> 00:03:15.543
> > Brian Holt: 我想说的是，动物，它是一个单一的动物。
&gt;&gt; Brian Holt: I wanna say pet.animal,
it's a single animal.

48
00:03:16.830 --> 00:03:19.039
> > Brian Holt: 然后我们将通过它。
&gt;&gt; Brian Holt: And
then we're going to pass it.

49
00:03:19.039 --> 00:03:21.800
我们想把我们从这里得到的身份
We want to pass that the ID
that we're getting from here,

50
00:03:21.800 --> 00:03:27.050
我喜欢 /details/1 ，对吧 ?
I like it from /details/1, right?

51
00:03:27.050 --> 00:03:29.741
我们想把它的号码 1 号过去
We wanna pass it this number
1 right there, right,

52
00:03:29.741 --> 00:03:32.420
从 URL中获取的标识。
that ID that we're getting from the URL.

53
00:03:32.420 --> 00:03:39.519
所以我们要用它的方式来解决这个问题
So the way we're gonna do
that is with this.props.id.

54
00:03:39.519 --> 00:03:43.579
所以不要把它当作我们的职责
So rather than getting that in as
an argument like we were with functions it

55
00:03:43.579 --> 00:03:44.891
都是我的道具
comes up this.props.

56
00:03:44.891 --> 00:03:48.545
你可以保证任何从父母通过的东西
You can be assured that anything that's
passing from the parents is gonna come

57
00:03:48.545 --> 00:03:49.629
从你的道具中
in from this.props.

58
00:03:49.629 --> 00:03:53.692
要记住这件事道具就是它的不可改变的
The one thing to keep in mind
with this.props is its immutable,

59
00:03:53.692 --> 00:03:55.129
你不能改变它
you can't change it.

60
00:03:55.129 --> 00:03:59.408
所以孩子从父母那里得到道具，不能改变他们，
So, a child receives props from its
parents, and it can't change them,

61
00:03:59.408 --> 00:04:01.206
只能读，对吧 ?
it can only read them, right?

62
00:04:01.206 --> 00:04:02.822
它们在这个意义上是只读的。
They're read-only in that sense.

63
00:04:04.223 --> 00:04:06.087
>> Brian Holt: 这是否有意义，对。
&gt;&gt; Brian Holt: Does that make sense, yeah.

64
00:04:09.277 --> 00:04:11.265
>> Brian Holt: 好的，之后，这是一个承诺。
&gt;&gt; Brian Holt: Okay, and
then after that, this is a promise.

65
00:04:11.265 --> 00:04:16.334
我先说然后我们要把动物从 API中收回来
I'm gonna say .then and we're gonna
get the animal back from the API.

66
00:04:20.853 --> 00:04:22.254
>> Brian Holt: 这里有一对功能。
&gt;&gt; Brian Holt: It's a pair function here.

67
00:04:24.838 --> 00:04:27.778
> > Brian Holt: 我们会说 this.setState 。
&gt;&gt; Brian Holt: And
we're gonna say this.setState.

68
00:04:30.300 --> 00:04:35.891
>> Brian Holt: 我们将获取名为 animal.name的名称。
&gt;&gt; Brian Holt: And we're going to get
the name is going to be animal.name.

69
00:04:39.052 --> 00:04:41.536
> > 布莱恩 - 霍尔特:
&gt;&gt; Brian Holt: You could
put like a return here,

70
00:04:41.536 --> 00:04:45.310
它就会停止给你所有的红线
it'll just stop giving
you all the red lines.

71
00:04:45.310 --> 00:04:47.750
我们会在第二个方面解决这条红线的问题
We'll fix that in a second and
I'm just getting sick of the red lines.

72
00:04:47.750 --> 00:04:52.237
[ LAUGH] >> Brian Holt: 名称，
[LAUGH]
&gt;&gt; Brian Holt: Name,

73
00:04:53.706 --> 00:04:55.872
>> Brian Holt: Animal.name 将执行，
&gt;&gt; Brian Holt: Animal.name will do,

74
00:04:55.872 --> 00:04:59.776
动物 is， >> Brian Holt: Animal.type。
animal is,
&gt;&gt; Brian Holt: Animal.type.

75
00:05:05.880 --> 00:05:09.444
>> Brian Holt: 此处将执行将作为模板字符串的位置，因为我们有
&gt;&gt; Brian Holt: Here will do location which
will be a template string because we have

76
00:05:09.444 --> 00:05:11.454
把几件事放在一起
to put a couple things together here.

77
00:05:14.214 --> 00:05:19.214
>> Brian Holt: 我们将执行 animal.contact.address.city 。
&gt;&gt; Brian Holt: We're gonna do
animal.contact.address.city.

78
00:05:20.740 --> 00:05:28.826
>> Brian Holt: Space， animal.contact.address.state。
&gt;&gt; Brian Holt: Space,
animal.contact.address.state.

79
00:05:35.240 --> 00:05:40.233
>> Brian Holt: 描述将为 animal.description。
&gt;&gt; Brian Holt: Description
will be animal.description.

80
00:05:43.572 --> 00:05:50.922
>> Brian Holt: 媒体将为动画。
&gt;&gt; Brian Holt: And
the media will be animal.photos.

81
00:05:53.752 --> 00:06:01.473
>> Brian Holt: 而且品种将是 animal.breeds.primary 。
&gt;&gt; Brian Holt: And
breed will be animal.breeds.primary.

82
00:06:03.793 --> 00:06:08.112
> > 布莱恩 - 霍尔特: 接下来我们要做的就是
&gt;&gt; Brian Holt: And then the other thing
that we're gonna do here is we're gonna

83
00:06:08.112 --> 00:06:09.634
say，装入 false。
say, loading false.

84
00:06:14.192 --> 00:06:16.810
> > Brian Holt: 我们会说，加载错误。
&gt;&gt; Brian Holt: So
we're gonna say, loading false.

85
00:06:17.829 --> 00:06:20.720
当我们第一次加载页面时，我们会将其置于加载状态，
So, when we first load the page,
we're gonna put it in a loading state,

86
00:06:20.720 --> 00:06:23.490
你正在从 API 中攫取某些东西对吧
right cuz you're grabbing
something from the API, right?

87
00:06:23.490 --> 00:06:26.009
当这从 API回来的时候
And then whenever this
comes back from the API,

88
00:06:26.009 --> 00:06:28.399
我们要把它装成假的
we're going to set that to loading false.

89
00:06:28.399 --> 00:06:32.324
现在我们要把它装到一个装载状态
Now the way that we're gonna set it to
be a loading state is we're gonna say

90
00:06:32.324 --> 00:06:33.540
就是这里的建造者
constructor up here.

91
00:06:35.238 --> 00:06:39.840
>> Brian Holt: 让我们说，构造函数和构造函数将在道具中使用。
&gt;&gt; Brian Holt: Let's say, constructor,
and constructor will take in the props.

92
00:06:39.840 --> 00:06:41.980
你得说超级道具
And you have to say super props.

93
00:06:41.980 --> 00:06:46.350
这只是某种形式的一种奇怪的仪式
This is just something kinda, it's
an odd ritual that you just have to do.

94
00:06:46.350 --> 00:06:48.090
它将用属性来构造
It's going to be constructed
with properties, and

95
00:06:48.090 --> 00:06:51.389
你得把这些属性处理起来，对吧 ?
you have to handle those
properties up to react, right?

96
00:06:51.389 --> 00:06:52.290
这就是我的工作
So that's what this does.

97
00:06:52.290 --> 00:06:53.411
超级道具说
The super props says,

98
00:06:53.411 --> 00:06:57.105
hey 调用作为 React.Component的父类上的构造函数。
hey call the constructor on my parent
class which is a React.Component.

99
00:06:57.105 --> 00:06:59.512
有道理吗
Is that make sense?

100
00:06:59.512 --> 00:07:01.173
如果你不这样做反应会对你大喊喊叫
If you don't do this,
react will yell at you.

101
00:07:01.173 --> 00:07:02.872
所以只要习惯就好了
So, just get used to doing it.

102
00:07:05.095 --> 00:07:08.295
> > Brian Holt: 好的，在这里，我要设定一个初始阶段，
&gt;&gt; Brian Holt: Okay, here,
I'm gonna set an initial stage,

103
00:07:08.295 --> 00:07:14.163
其中一些会说 : 状态 =， >> Brian Holt: 正在装入，
some would say this.state =,
&gt;&gt; Brian Holt: Loading,

104
00:07:14.163 --> 00:07:18.637
oops， >> Brian Holt: True。
oops,
&gt;&gt; Brian Holt: True.

105
00:07:21.831 --> 00:07:25.454
>> Brian Holt: 因此，让我们谈谈 this.state 与 this.props 的关系。
&gt;&gt; Brian Holt: So let's talk about
this.state versus to this.props.

106
00:07:25.454 --> 00:07:29.653
This.props 是您从父级收到的信息
This.props is information that you get
from your parent class that's handed

107
00:07:29.653 --> 00:07:30.805
对你来说是吧
down to you, right?

108
00:07:30.805 --> 00:07:35.047
这又是以前通过参数发生的事情。
This is, again,
what was coming in via parameters before.

109
00:07:35.047 --> 00:07:36.709
现在我们又没有钩子了
Now again, we don't have hooks.

110
00:07:36.709 --> 00:07:40.564
所以我们没有办法用钩子来保持有状态的事情，对吧 ?
So we don't have any way to keep
stateful things using hooks, right?

111
00:07:40.564 --> 00:07:44.913
因此，我们使用类组件使用 this.state的方式。
So the way that we do that with class
components as using this.state.

112
00:07:44.913 --> 00:07:47.720
this.props immutable ，仅来自父代。
Whereas this.props immutable and
only comes from the parent.

113
00:07:47.720 --> 00:07:50.430
This.state 在类中是自包含的。
This.state is self-contained
within the class.

114
00:07:50.430 --> 00:07:57.665
因此，任何其他组件都无法修改其状态，它是它自己的状态的主人，对吗 ?
So no other components can modify its
state, its master of its own state, right?

115
00:07:59.872 --> 00:08:01.449
>> Brian Holt: 在此特定情况下，
&gt;&gt; Brian Holt: So in this particular case,

116
00:08:01.449 --> 00:08:05.132
我就像在创造第一组国家一样
I'm instantiating it like I'm
creating the first set of state but

117
00:08:05.132 --> 00:08:08.649
然后我就会和你一起去
everything after that I'll do
with this.setState, right?

118
00:08:08.649 --> 00:08:12.949
所以我在这里叫这个 .setState 之后，会在这里更新这个状态，对吗 ?
So after I call this .setState here, this
will update this state up here, right?

119
00:08:12.949 --> 00:08:16.490
这会让我们从这些东西中得到新的状态，对吧 ?
So this will get a bunch of new
state from all this stuff, right?

120
00:08:16.490 --> 00:08:19.944
然后，此装入 true将设置为装入 false。
And then this loading true,
will be set to loading false.

121
00:08:23.154 --> 00:08:24.279
>> Brian Holt: 有意义吗 ?
&gt;&gt; Brian Holt: Make sense?

122
00:08:24.279 --> 00:08:28.245
好了当我打电话给这个国家的时候
Okay, so the thing to know about
when I call this .setState,

123
00:08:28.245 --> 00:08:31.389
这就是所谓的肤浅的，是吧 ?
this is what's called a shallow merge,
right?

124
00:08:31.389 --> 00:08:36.193
所以，我的意思是，它甚至可能只是说对象，
So, I mean,
it might even literally just says Object,

125
00:08:36.193 --> 00:08:40.500
你可以忽略它只展示它的内容
you can ignore this but
just showing what it does.

126
00:08:40.500 --> 00:08:45.313
对象分配， >> Brian Holt: oldState，
Object assign,
&gt;&gt; Brian Holt: oldState,

127
00:08:47.100 --> 00:08:48.171
>> Brian Holt: newState，对吗 ?
&gt;&gt; Brian Holt: newState, right?

128
00:08:49.327 --> 00:08:52.289
> > Brian Holt: 因此，这意味着如果这些碰撞中有任何碰撞，
&gt;&gt; Brian Holt: So that basically what
that means is if any of these collide,

129
00:08:52.289 --> 00:08:55.730
就像这个，这个就写这个，对吧 ?
like this one does with this one,
it will over write this one, right?

130
00:08:55.730 --> 00:08:58.538
但其他一切都只是添加剂
But everything else will just be additive.

131
00:08:58.538 --> 00:09:05.062
所以如果有其他事情， >> Brian Holt: 这个
So if this had some other thing,
&gt;&gt; Brian Holt: This

132
00:09:05.062 --> 00:09:08.326
不会被覆盖，这之后还会存在，对吧 ?
would not be overwritten,
this would still exist afterwards, right?

133
00:09:08.326 --> 00:09:09.578
但很肤浅对吧
But it is shallow, right?

134
00:09:09.578 --> 00:09:13.056
所以如果我有深度的嵌套对象，就不会被覆盖了，对，所以
So if I have deeply nested objects,
those won't get overwritten, right, so

135
00:09:13.056 --> 00:09:14.279
它才是最顶层的
it just does the top level.

136
00:09:17.955 --> 00:09:20.681
>> Brian Holt: 这就是如何使用类组件的状态。
&gt;&gt; Brian Holt: And that's how you
do state with class components.

137
00:09:20.681 --> 00:09:23.833
这就是我一直在做状态，直到钩子出现的时候。
This is how I've been doing state for
a really long time until hooks came along.

138
00:09:26.650 --> 00:09:28.602
> > 布莱恩 - 霍尔特:
&gt;&gt; Brian Holt: Something
else I wanna call out here,

139
00:09:28.602 --> 00:09:32.209
请注意此处的箭头函数，而不是此处的函数。
notice these an arrow function here
instead of saying function here.

140
00:09:35.710 --> 00:09:39.153
>> Brian Holt: 你可能注意到我使用了很多的箭头函数
&gt;&gt; Brian Holt: You’ve probably noticed
that I use a lot of arrow functions just

141
00:09:39.153 --> 00:09:43.195
根据我编码的性质在这个地方它实际上是必需的
by the nature of how I code, this in
this place, it's actually required.

142
00:09:44.451 --> 00:09:45.933
> > 布莱恩 - 霍尔特: 我不想说
&gt;&gt; Brian Holt: I don't wanna say required,

143
00:09:45.933 --> 00:09:48.434
如果你不这样做就很难了
it's very difficult if
you don't do it this way.

144
00:09:49.551 --> 00:09:50.385
>> Brian Holt: 为什么 ?
&gt;&gt; Brian Holt: So why?

145
00:09:50.385 --> 00:09:52.090
为什么会有这个问题呢 ?
Why is this a problem here?

146
00:09:52.090 --> 00:09:55.169
如果我把功能放在这里是什么
Well, if I put a function here,
what is this?

147
00:09:57.174 --> 00:09:58.837
>> Brian Holt: 答案不是你想要的。
&gt;&gt; Brian Holt: The answer is not
what you would want it to be.

148
00:09:58.837 --> 00:10:01.597
我不知道这会是什么但
[LAUGH] I don't actually
know it's gonna be, but

149
00:10:01.597 --> 00:10:05.559
这不可能是你想要的对吧
it's not gonna be what
you'd want it to be, right?

150
00:10:05.559 --> 00:10:08.889
当我在此处放置函数时，它会在调用此函数时创建新的上下文。
When I put function here, it creates
a new context when this is invoked.

151
00:10:08.889 --> 00:10:12.440
This.then 将在其他地方调用。
This.then is going to be
invoked somewhere else.

152
00:10:12.440 --> 00:10:15.159
这可能是 " 窗口 " ，可能是承诺本身。
That might be Window,
it might be the promise itself.

153
00:10:15.159 --> 00:10:17.519
我不知道它是怎么被调用的
I'm not actually sure
what it gets invoked on.

154
00:10:17.519 --> 00:10:23.480
但是，如果我执行一个箭头函数，将会得到这个结果。
But, if I do an arrow function
instead this will get.

155
00:10:23.480 --> 00:10:26.470
它不会创建一个新的上下文，即箭头的功能，
It will not create a new context,
which is what arrow functions do,

156
00:10:26.470 --> 00:10:28.570
他们不会创造新的环境对吧
they don't create new contexts, right?

157
00:10:28.570 --> 00:10:30.561
这将是正确的。
So this will be correct.

158
00:10:33.351 --> 00:10:34.350
>> Brian Holt: 这是否有意义 ?
&gt;&gt; Brian Holt: Does that make sense?

159
00:10:36.582 --> 00:10:39.850
>> Brian Holt: 一些经典要素，这是非常重要的，对吧 ?
&gt;&gt; Brian Holt: Some of classic components,
what this is very important, right?

160
00:10:39.850 --> 00:10:42.932
这其实是他们选择挂钩方向的原因之一
It's actually one of the reasons why they
chose to go the directions of hooks is

161
00:10:42.932 --> 00:10:44.767
因为这很难教，对吧 ?
because this is kind of hard to teach,
right?

162
00:10:45.835 --> 00:10:46.665
>> Brian Holt: 可以。
&gt;&gt; Brian Holt: It can be.

163
00:10:48.086 --> 00:10:51.129
>> Brian Holt: 就像你需要知道的几件事一样。
&gt;&gt; Brian Holt: There's just like a handful
of things that you need to be aware of.

164
00:10:51.129 --> 00:10:53.941
我想，在这之后，它很可能已经过去了。
And I think after that it's
pretty to move past what this is.

165
00:10:56.033 --> 00:11:02.399
>> Brian Holt: 并且，您也可以放入 then，您可以放入 console.error。
&gt;&gt; Brian Holt: And, you can also put here
in the then, you can put console.error.

166
00:11:02.399 --> 00:11:05.355
因此，如果 API 中存在任何错误，那么它将仅将其记录到控制台。
So if there's any errors in the API, so
it will just log it out to the console.

167
00:11:09.604 --> 00:11:11.991
>> Brian Holt: 您应该具有更好的错误处理方式，对吗 ?
&gt;&gt; Brian Holt: You should have better
error handling than this, right?

168
00:11:11.991 --> 00:11:13.676
您应该将其报告给您的服务，并且
You should report it to your service and

169
00:11:13.676 --> 00:11:16.309
显示您的错误是一些有用的错误消息。
show that your error are some
useful error message.

170
00:11:16.309 --> 00:11:18.778
这不是错误处理的过程。
This is not a course on error handling.

171
00:11:18.778 --> 00:11:20.509
他们有这方面的课程你应该小心点
They have a course on that,
you should watch that.

172
00:11:20.509 --> 00:11:21.094
[ 笑声]
[LAUGH]
