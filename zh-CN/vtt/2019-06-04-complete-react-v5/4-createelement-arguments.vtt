WEBVTT

1
00:00:00.050 --> 00:00:00.744
>> Brian Holt: 目前的问题 ?
&gt;&gt; Brian Holt: Questions so far?

2
00:00:00.744 --> 00:00:01.893
嗯。 >> 扬声器 2: 是，所以
Yeah.
&gt;&gt; Speaker 2: Yeah, so

3
00:00:01.893 --> 00:00:07.343
我相信 12 行，还没有呈现 div id 根吗 ?
I believe on line 12 you still have
that div id root not rendered?

4
00:00:07.343 --> 00:00:08.457
11 号线路抱歉
On line 11, sorry.

5
00:00:08.457 --> 00:00:09.009
>> Brian Holt: 对。
&gt;&gt; Brian Holt: Yep.

6
00:00:09.009 --> 00:00:10.486
>> 演讲者 2: 在哪里 ?
&gt;&gt; Speaker 2: Where did that go?

7
00:00:10.486 --> 00:00:11.740
>> Brian Holt: 未呈现的位置?
&gt;&gt; Brian Holt: Where did
the not rendered go?

8
00:00:11.740 --> 00:00:12.444
>> 扬声器 2: 是。
&gt;&gt; Speaker 2: Yeah.

9
00:00:12.444 --> 00:00:14.784
>> Brian Holt: 当你说呈现时，就像这里
&gt;&gt; Brian Holt: When you say render,
like here,

10
00:00:14.784 --> 00:00:17.966
它会把里面的任何东西都炸掉
it blows away anything
that's inside of it.

11
00:00:17.966 --> 00:00:18.763
所以它只会覆盖它
So it just overrides it.

12
00:00:18.763 --> 00:00:23.137
举个例子，比如说我放进来，
So for example, like if I put in here,

13
00:00:23.137 --> 00:00:29.722
抛出新错误， >> Brian Holt: And
throw new Error,
&gt;&gt; Brian Holt: And

14
00:00:29.722 --> 00:00:34.414
然后我回到这里你会看到它其实是蓝色的
then I go back over here,
you'll see it actually just blue it away.

15
00:00:34.414 --> 00:00:36.706
还在虚张声势
It's still blued away.

16
00:00:40.695 --> 00:00:42.656
> > Brian Holt: 因为它确实试图渲染，但让我们
&gt;&gt; Brian Holt: Because it did
try to render it, but let's,

17
00:00:42.656 --> 00:00:46.566
如果你把它放在外面， >> Brian Holt: 那么
actually if you put it outside of that,
&gt;&gt; Brian Holt: Then

18
00:00:46.566 --> 00:00:47.990
它会不会被渲染的对吧
it'll say not rendered, right?

19
00:00:47.990 --> 00:00:51.585
因为它没被清除
Because it didn't get cleared out.

20
00:00:51.585 --> 00:00:55.057
因此，这有助于了解您的 JavaScript 正在装入。
So this just kind of helps to see
that your JavaScript is loading.

21
00:00:55.057 --> 00:00:57.792
不是，只是我做的事，不一定是最好的做法
Not, it's just something I do, it's not
necessarily like a best practice or

22
00:00:57.792 --> 00:00:58.545
任何类似的事情
anything like that.

23
00:01:01.429 --> 00:01:03.331
>> Brian Holt: 这是最佳的错误。
&gt;&gt; Brian Holt: This is the best
error right here, by the way.

24
00:01:07.710 --> 00:01:08.938
>> Brian Holt: 好的，其他问题?
&gt;&gt; Brian Holt: Okay, other questions?

25
00:01:08.938 --> 00:01:10.396
嗯。
Yeah.

26
00:01:10.396 --> 00:01:15.585
>> 扬声器 3: 在应用程序声明中，您将返回我所使用的内容
&gt;&gt; Speaker 3: In your app declaration
you have it returns something which I'm

27
00:01:15.585 --> 00:01:21.941
假设当你在后台运行的时候，任何神奇的 React 都在做。
assuming is whatever magic React is doing
when you run that in the background.

28
00:01:21.941 --> 00:01:26.680
然后我们又在另一个 " React.create " 元素中传递
But then we're passing at
another React.create element?

29
00:01:26.680 --> 00:01:27.864
这有什么用
What's up with that?

30
00:01:27.864 --> 00:01:29.793
>> Brian Holt: 是，好的问题。
&gt;&gt; Brian Holt: Yeah, good question.

31
00:01:29.793 --> 00:01:34.569
所以，让我们谈谈 React.create 元素获取的三个参数
So let's talk about the three parameters
that React.create element gets

32
00:01:34.569 --> 00:01:37.537
第一个是什么标签，对吧 ?
the first one is what kind of tag is it,
right?

33
00:01:37.537 --> 00:01:41.259
你可以在这里看到，我给它打了 3 次， reet.createElement。
So you can see here, I've called it
three times, react.createElement.

34
00:01:41.259 --> 00:01:44.424
我在这儿打过电话我在这儿打过电话
I've called it here, I've called
it here and I've called it here.

35
00:01:46.256 --> 00:01:48.126
>> Brian Holt: 第一个是什么元素。
&gt;&gt; Brian Holt: The first one
is what kind of element it is.

36
00:01:48.126 --> 00:01:52.822
这是一个 div ，这是一个 h1，这就是所谓的组合组件，
This is a div, this is an h1, and this is
what you would call a composite component,

37
00:01:52.822 --> 00:01:56.873
这就是你和我创作的组件对吧
which is a fancy way of saying a component
that you and I created, right?

38
00:01:56.873 --> 00:02:01.775
第二个，现在是空对象，空对象，
The second, which right now is
an empty object, empty object, and

39
00:02:01.775 --> 00:02:06.075
没有定义我们只是没在这里定义对吧
undefined, cuz we're just
not defining it here, right?

40
00:02:06.075 --> 00:02:09.644
您要提供组件的所有属性。
Is all of the attributes that
you want to give the component.

41
00:02:09.644 --> 00:02:14.104
所以如果我想让这件事
So if I wanted this to
have ID of something

42
00:02:14.104 --> 00:02:20.641
重要的， >> Brian Holt: 现在
important,
&gt;&gt; Brian Holt: Now

43
00:02:20.641 --> 00:02:24.201
这个标识将被传递到这个区
this ID is going to be
passed into this div.

44
00:02:24.201 --> 00:02:28.384
为了证明我的意思如果我刷新一下然后过来
So just to prove my point,
if I refresh and come over here, and

45
00:02:28.384 --> 00:02:30.235
我看 " 检查元件"
I look at Inspect Element,

46
00:02:30.235 --> 00:02:35.317
你可以在这里看到这个现在其实有一个重要的概念。
you can see here that this now actually
has an idea of something important.

47
00:02:35.317 --> 00:02:38.765
好的，这是 DOM 元素上要放置的属性。
All right, so this is the attributes that
are gonna be put on the DOM element.

48
00:02:38.765 --> 00:02:43.668
或者如果我把它给应用，这将是
Or if I gave it to app,
this is going to be the attributes that

49
00:02:43.668 --> 00:02:47.409
将会进入我可以使用的应用
are going to pass down
into app that I can use.

50
00:02:47.409 --> 00:02:50.231
我们一会儿再谈这个
We'll talk about that in a second.

51
00:02:50.231 --> 00:02:55.413
但只要说这就是你想要传递给孩子的东西
But suffice to say this is whatever you
want to pass into the child element,

52
00:02:55.413 --> 00:02:57.067
这件案子里的
in this case, the div.

53
00:02:57.067 --> 00:03:01.264
第三个是孩子。
The third one is the children.

54
00:03:01.264 --> 00:03:06.229
这里的 div 是 h1，好吗 ?
So inside of div here is an h1, all right?

55
00:03:06.229 --> 00:03:11.129
所以这第三个是什么，都是你的孩子
And so that's what this third one is,
it's whatever children you

56
00:03:11.129 --> 00:03:15.342
要被传递到这个特定的元素，对吗 ?
want to be passed into this
particular element, right?

57
00:03:15.342 --> 00:03:20.396
那么，在这种情况下， h1 的子代只是针对 " 采用我 " 的文本，对吗 ?
So in this case, the children of the h1
is just to text Adopt Me, right?

58
00:03:20.396 --> 00:03:23.344
但我完全可以在这里停车的对吧
But I totally could have
pulled a span in here, right?

59
00:03:23.344 --> 00:03:24.949
或者类似的东西
Or something like that.

60
00:03:24.949 --> 00:03:29.758
现在，这可以是奇异的，也可以是数组。
Now, this can be either singular,
or this can also be an array.

61
00:03:29.758 --> 00:03:34.393
Czz 一个 DIV 可以有 15 个孩子，对吧 ?
Cuz a DIV can have 15 children, right?

62
00:03:34.393 --> 00:03:38.371
所以我也可以，就这么做吧
So here I could also have,
let's just do it for

63
00:03:38.371 --> 00:03:44.009
有趣的， >> Brian Holt: 好吗 ?
fun,
&gt;&gt; Brian Holt: Okay?

64
00:03:44.009 --> 00:03:45.932
现在我有两个人收养我
Now I have two h1s with Adopt Me,

65
00:03:45.932 --> 00:03:50.420
所以如果我回到这里，你可以看到有两个 h1s 被传递到这个。
so if I go back over here, you can see
that there are two h1s passed into this.

66
00:03:52.512 --> 00:03:54.364
> > Brian Holt: 在技术上，这不一定是数组，
&gt;&gt; Brian Holt: So technically
this doesn't have to be an array,

67
00:03:54.364 --> 00:03:57.066
你可以在所有参数中通过这些参数，它仍然有效。
you can actually just pass these in
all the parameters, it still works.

68
00:03:58.911 --> 00:04:02.413
>> Brian Holt: 它叫做变量 Verity，它是一个愚蠢的计算机科学
&gt;&gt; Brian Holt: It's called variable
verity, which is a stupid computer science

69
00:04:02.413 --> 00:04:05.175
我学会了我想给你留下的印象
word that I learned and
I wanted to impress you with.

70
00:04:06.490 --> 00:04:10.445
>> Brian Holt: 这就意味着它可以接受更多的额外的周边和
&gt;&gt; Brian Holt: It just means that it
can accept as many extra perimeters and

71
00:04:10.445 --> 00:04:12.907
它会把所有孩子都用作孩子
it'll use all of those as children.

72
00:04:12.907 --> 00:04:17.129
现在我在你的大脑模型中将它作为一个数组，因为它会使它更简单
Now I would say in your brain model this
as an array because it'll make it simpler

73
00:04:17.129 --> 00:04:21.418
因为我们不会再像这样写那么久了
in your brain, because we will not be
writing React like this for very long, so.

74
00:04:21.418 --> 00:04:27.249
我想指出的是，在网上有人为我提出这个问题之前。
Just wanted to point that out, before
someone online points it out for me.

75
00:04:30.519 --> 00:04:32.105
> > 布莱恩 - 霍尔特: 好的，我们要回去了
&gt;&gt; Brian Holt: Okay, so
we're gonna go back to this.
