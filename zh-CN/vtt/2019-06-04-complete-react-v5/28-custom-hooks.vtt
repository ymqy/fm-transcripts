WEBVTT

1
00:00:00.050 --> 00:00:01.639
>> Brian Holt: 在开始请求使用 API 之前，
&gt;&gt; Brian Holt: Before we get
to requesting against the API,

2
00:00:01.639 --> 00:00:05.019
我想告诉你怎么处理那些叫做习惯挂钩的东西
I wanna show you how to do with
something that's called a custom hook.

3
00:00:07.120 --> 00:00:10.660
所以现在我们都在这个地方使用过使用状态
So right now we've just been using
useState all over the place, but

4
00:00:10.660 --> 00:00:18.670
如果你注意到动物的 HTML 或者这个动物和品种
if you notice HTML for animal, or
this one here right animal and breed.

5
00:00:18.670 --> 00:00:21.679
这几乎是一样的，对，就像这样，
These are almost the same thing,
right, to the point that like,

6
00:00:21.679 --> 00:00:24.489
如果我们能有一点可以重复使用的话就好了
it'd be nice if we could have
some sort of like reusable bit.

7
00:00:24.489 --> 00:00:26.943
这就像是我们的下拉菜单
That would do like a drop-down for us, and

8
00:00:26.943 --> 00:00:30.018
我们不需要做这首歌和环境
we didn't have to do all this song and
circumstance.

9
00:00:30.018 --> 00:00:34.189
我们可以把它们保持在一起，所以我们还是去做吧。
And we could maintain them together,
so let's actually go do that.

10
00:00:35.280 --> 00:00:40.243
因此，请在此处创建新文件，并将其称为 useDropdown.js。
So make a new file here,
and call it useDropdown.js.

11
00:00:42.862 --> 00:00:45.962
>> Brian Holt: 好的，在此，您想从 "反应"中导入 React 。
&gt;&gt; Brian Holt: Okay,
here you wanna import React from 'react'.

12
00:00:49.610 --> 00:00:51.661
> > Brian Holt: 我们还会使用 useState。
&gt;&gt; Brian Holt: And
we're also gonna use useState.

13
00:00:57.402 --> 00:00:59.984
> > 布莱恩 - 霍尔特: 好的，然后我要说康斯特 useDropdown，
&gt;&gt; Brian Holt: Okay, and
then I'm gonna say const useDropdown,

14
00:00:59.984 --> 00:01:02.590
这就是我们要创造的钩子
this is gonna be our hook
that we're gonna create.

15
00:01:02.590 --> 00:01:07.750
它会被标记为某种默认状态
And it's gonna take in a label,
some sort of default state,

16
00:01:07.750 --> 00:01:11.909
还有一些可供选择的选项清单
and some sort of a list of
options to put in there.

17
00:01:16.337 --> 00:01:24.224
>> Brian Holt: 然后在底部，我们将导出缺省 useDropdown。
&gt;&gt; Brian Holt: Then down at the bottom
we're going to export default useDropdown.

18
00:01:24.224 --> 00:01:26.933
所以我们要说康斯特州
So we're gonna say const state,
useState, so

19
00:01:26.933 --> 00:01:29.724
我们就像个一般的下拉菜单
we're gonna make this
like a generic dropdown.

20
00:01:31.897 --> 00:01:33.147
>> Brian Holt: 因此不是使用状态，但是
&gt;&gt; Brian Holt: So not useState but

21
00:01:33.147 --> 00:01:39.354
setState >> Brian Holt: Equals useState ，以及
setState
&gt;&gt; Brian Holt: Equals useState, and

22
00:01:39.354 --> 00:01:45.838
缺省状态将为它们传入的任何状态，因此缺省状态为 " 缺省状态 " 。
the default state of this is going to be
whatever they pass in, so default state.

23
00:01:50.222 --> 00:01:53.920
>> Brian Holt: 我们会获得某种身份标识，因此您只需要
&gt;&gt; Brian Holt: We're gonna get some
sort of ID, so you just need it to be

24
00:01:53.920 --> 00:01:58.276
一些独特的东西，因为我们要给东西钥匙，
something unique, because we have
to give things keys and such.

25
00:01:58.276 --> 00:02:02.757
所以我要用模板的绳子所以我要用背叉
So I'm gonna use template strings,
so I'm gonna use backticks,

26
00:02:02.757 --> 00:02:06.209
backticks 是键盘上的旁边的 1 。
backticks are the ones next
to 1 on your keyboard.

27
00:02:06.209 --> 00:02:11.098
然后我们会说用下去的花括号
Then we'll say use-drop
down-$ curly braces and

28
00:02:11.098 --> 00:02:15.330
那么 JavaScript 表达式可以在此处进行。
then JavaScript expressions
can go in here.

29
00:02:15.330 --> 00:02:19.634
所以我想说的是 label.replace
So, I'm gonna say, label.replace, so

30
00:02:19.634 --> 00:02:25.745
将任何空格从字符串中取出，并使其为小写。
take any spaces out of the string and
also make it lowercase.

31
00:02:28.163 --> 00:02:33.896
>> Brian Holt: 因此，如果此处的标签类似于 Best Dogs ，那么
&gt;&gt; Brian Holt: So like if label here
was something like Best Dogs Ever or

32
00:02:33.896 --> 00:02:37.069
那样的东西对吧
something like that, right?

33
00:02:37.069 --> 00:02:43.346
这会让这个 > > 布莱恩 - 霍尔特:
What this would do is it would make this
&gt;&gt; Brian Holt: Look like that,

34
00:02:43.346 --> 00:02:47.000
对，这就是这里的产出，对吧 ?
right, that's what this
would output there, right?

35
00:02:47.000 --> 00:02:49.219
不管它是否可读，都是独一无二的事情。
Doesn't matter that it's readable,
it just matters that it's unique.

36
00:02:55.471 --> 00:02:59.618
>> Brian Holt: 好的，然后我们将调用的组件
&gt;&gt; Brian Holt: Okay, and then the
component that we're gonna make is called

37
00:02:59.618 --> 00:03:03.550
a Dropdown，因此 const Dropdown 等于一个箭头函数。
a Dropdown, so
const Dropdown equals an arrow function.

38
00:03:03.550 --> 00:03:08.407
我们要用那个隐式的回报
And we're just gonna use that
implicit return again with

39
00:03:08.407 --> 00:03:13.174
圆括号，等号 htmlFor 等于标识。
the parentheses,
equals label htmlFor equals the ID.

40
00:03:19.209 --> 00:03:24.371
>> Brian Holt: 然后在这里，这会有一个 ID，我们需要贴上标签
&gt;&gt; Brian Holt: And then here, this is
gonna have an ID, we need to put a label

41
00:03:24.371 --> 00:03:29.957
这里的标签是从参数中进来的
inside of that label which is
coming in here from the parameters.

42
00:03:29.957 --> 00:03:32.365
然后我们把它放进去
And then we're gonna put
a select inside of that.

43
00:03:35.140 --> 00:03:41.158
>> Brian Holt: 我们也要给它选择一个 ID ，所以 id = [id]，
&gt;&gt; Brian Holt: And we have to give that
select an ID as well, so id= [id],

44
00:03:41.158 --> 00:03:46.237
值 = 我们在此处创建的状态，因此状态。
value = state which we created up here,
so state.

45
00:03:49.162 --> 00:03:54.701
>> Brian Holt: OnChange，我们将呼叫 e 和
&gt;&gt; Brian Holt: OnChange,
we're going to call e and

46
00:03:54.701 --> 00:04:02.935
我们要把 setState 设置为 e.target.value。
we're gonna say to setState
to be e.target.value.

47
00:04:02.935 --> 00:04:09.663
然后模糊的同一件事，翁布卢
And then the same thing for blur, onBlur.

48
00:04:14.639 --> 00:04:22.053
> > Brian Holt: 然后我们还得给它禁用的东西，
&gt;&gt; Brian Holt: And then we have to
give it that disabled thing as well,

49
00:04:22.053 --> 00:04:29.629
禁用等于 options.length 三重 = 0。
disabled equals options.length triple = 0.

50
00:04:29.629 --> 00:04:34.470
我们要给它一个选项，那就是没有价值，对吧 ?
Here we're gonna give it an option of all,
which is gonna have no value, right?

51
00:04:34.470 --> 00:04:38.550
这意味着什么时候一切都不会有任何选择
Which means it's going to have
nothing selective when it's on all.

52
00:04:41.459 --> 00:04:46.290
然后我们就会说 " options.map " ，用地图做同样的事。
And then here we're gonna say options.map
and do the same thing with map.

53
00:04:46.290 --> 00:04:51.466
这将是一些选项中的某个项目，我们将继续使用项目。
So this is gonna be some item in the array
of some option, we'll stick with item.

54
00:04:51.466 --> 00:04:57.091
使用带括号的隐式返回和
Use our implicit return
with parentheses and

55
00:04:57.091 --> 00:05:03.163
表示选项键=[item]， value=[item]，
say option key=[item], value=[item],

56
00:05:03.163 --> 00:05:07.466
然后就在那儿了
and then item right there as well.

57
00:05:24.576 --> 00:05:27.204
>> Brian Holt: 请让我的括号完全匹配，然后开始。
&gt;&gt; Brian Holt: Get my parentheses
all matched up, here we go.

58
00:05:32.677 --> 00:05:35.355
>> Brian Holt: 现在我们有一个通用的下拉组件，对吗 ?
&gt;&gt; Brian Holt: So now we have this
generic drop down component, right?

59
00:05:35.355 --> 00:05:39.935
这将会成为一个标签，一些默认的状态选项和
That's gonna take in a label,
some default state options and

60
00:05:39.935 --> 00:05:42.055
make 一个下拉组件。
make a dropdown component.

61
00:05:42.055 --> 00:05:48.536
所以现在我们要在下面回到这里
So now what we're going to
return down here at the bottom,

62
00:05:48.536 --> 00:05:54.110
我们要归还国家的" 下拉"
is we're gonna return the state,
the Dropdown.

63
00:05:54.110 --> 00:05:58.673
然后我们也会返回这个设定状态的功能。
And then we're also gonna return
this setState function as well.

64
00:06:03.480 --> 00:06:07.742
> > Brian Holt: 就像这样，现在我们就像用了一个钩子一样，
&gt;&gt; Brian Holt: Like that, and now we
can use this just like we used a hook,

65
00:06:07.742 --> 00:06:11.268
因为这会给我们国家的
because this is gonna give us the state.

66
00:06:11.268 --> 00:06:14.956
Dropdown会处理所有状态的设置和取消状态，对吧 ?
The Dropdown's gonna handle all of the
setting and unsetting of the state, right?

67
00:06:14.956 --> 00:06:19.209
然后，在稍后的情况下，我们将返回此 setState 函数。
And then just in case as well for later,
we're gonna return this setState function.

68
00:06:19.209 --> 00:06:22.620
因此，除了使用 Dropdown之外，我们还可以以编程方式对其进行更新。
So that we can programmatically update it,
in addition to using the Dropdown.

69
00:06:22.620 --> 00:06:25.612
所以我知道这有点抽象
So I understand this is a little abstract,

70
00:06:25.612 --> 00:06:29.696
我们已经把动物 Dropdown 和繁殖的 Dropdown 都带走了
we've taken the animal Dropdown and
the breed Dropdown.

71
00:06:29.696 --> 00:06:35.370
然后我们就把它变成了这种一般的 Dropdown hook。
And then we've just formed it into
this kind of generic Dropdown hook.

72
00:06:38.252 --> 00:06:39.887
>> Brian Holt: 到目前为止还好吗 ?
&gt;&gt; Brian Holt: Good so far?

73
00:06:39.887 --> 00:06:43.887
好吧那我们就去找搜索程序吧
All right, so let's go ahead and
go back to the search params.

74
00:06:47.019 --> 00:06:51.793
> > Brian Holt: 我们要做的，不是做动物和 setAnimal，
&gt;&gt; Brian Holt: And what we're gonna do,
instead of doing animal and setAnimal,

75
00:06:51.793 --> 00:06:55.213
我们要做的是我们会说 const.
what we're gonna do is
we're gonna say const.

76
00:06:59.579 --> 00:07:04.685
> > 布莱恩 - 霍尔特: 首先你要把上面的东西进口
&gt;&gt; Brian Holt: First thing is
you have to import up top,

77
00:07:04.685 --> 00:07:10.555
因此，请从 ./useDropdown 中导入 useDropown 。
so Import useDropown from ./useDropdown.

78
00:07:10.555 --> 00:07:16.266
我们还需要养狗我们就能追踪到
We still need breeds so
we'll keep track of that,

79
00:07:16.266 --> 00:07:21.163
但现在我们要做的就是
but now what we're gonna do is we're gonna

80
00:07:21.163 --> 00:07:26.069
说 const [动物，动物下拉 ] 。
say const [animal, animalDropdown].

81
00:07:26.069 --> 00:07:30.733
我们现在就把它放在那个位置
And we'll actually just
leave it at that for now,

82
00:07:30.733 --> 00:07:35.961
= 使用 DropDown ，我们将给动物贴上标签。
= useDropDown, and
we'll give it Animals the label.

83
00:07:37.901 --> 00:07:40.161
> > Brian Holt: 我们会把它作为默认状态，
&gt;&gt; Brian Holt: We'll give it
dog as the default state,

84
00:07:40.161 --> 00:07:43.629
我们会把动物作为选择的选项清单
and we'll give it Animals as
a list of options to choose from.

85
00:07:46.909 --> 00:07:52.716
然后我们会说 const， >> Brian Holt: Breed，
Then for breeds we're gonna say const,
&gt;&gt; Brian Holt: Breed,

86
00:07:52.716 --> 00:07:58.074
BreedDropdown 我们把它留给我们
BreedDropdown and
we'll leave it at that for

87
00:07:58.074 --> 00:08:02.728
现在等于 useDropdown 和 "Breed"
now equals useDropdown with "Breed"

88
00:08:02.728 --> 00:08:08.529
空字符串作为缺省状态，是吗 ?
empty string as a default state, right?

89
00:08:08.529 --> 00:08:15.750
然后，我们会从 API 中重新处理这一问题，这只是第二次。
And breeds which again we'll handle this
from the API here is just a second later.

90
00:08:16.889 --> 00:08:19.490
所以现在我把这只动物下拉下来了
So now I have this animal Dropdown and
this breed drop down, so

91
00:08:19.490 --> 00:08:23.250
而不是把所有这些标签都用在这里
rather than having all of this
label stuff here for that.

92
00:08:23.250 --> 00:08:25.829
我要删除动物我要删除 Breed
I'm gonna delete Animal and
I'm gonna delete Breed.

93
00:08:28.862 --> 00:08:31.577
>> Brian Holt: 所以现在我就有一个位置不同，
&gt;&gt; Brian Holt: So now I just have
the location one, which is different,

94
00:08:31.577 --> 00:08:33.739
我们现在不想做那种普通的
we don't wanna make
that generic right now.

95
00:08:33.739 --> 00:08:40.063
但最酷的是我有一个动画部和一个 BreedDropdown。
But what's cool is I just have
an AnimalDropdown and a BreedDropdown.

96
00:08:43.363 --> 00:08:46.024
> > Brian Holt: 我认为这很酷，
&gt;&gt; Brian Holt: And
that's pretty cool in my opinion,

97
00:08:46.024 --> 00:08:51.606
我们已经把这个逻辑取出来了我们把它引出来了
we've kinda taken out this logic, we
extracted it out to this useDropdown hook.

98
00:08:51.606 --> 00:08:55.456
现在我们把这些小动画公司
And now we just get these
little AnimalDropdown,

99
00:08:55.456 --> 00:08:59.129
BreedDropddown ，自我包含的下拉列表。
BreedDropddown, self contained dropdowns.

100
00:08:59.129 --> 00:09:00.570
所以如果我救了这个
So if I save this and

101
00:09:00.570 --> 00:09:05.350
我回到自己的代码，这一切都和现在一样。
I go back over to my code this all
works exactly the same way now.

102
00:09:05.350 --> 00:09:12.741
但它使用的是这种共享的通用类，或者类似的钩子。
But it's using this kind of shared
generic class, or hook, as it were.

103
00:09:15.649 --> 00:09:18.671
>> Brian Holt: 现在我可以写各种各样的单元
&gt;&gt; Brian Holt: And what's great about
this is now I can write all sorts of unit

104
00:09:18.671 --> 00:09:20.889
测试我可以把这些都用在这里
tests,and I can use this
all over the place.

105
00:09:20.889 --> 00:09:24.840
我可以向我的未来保证这是一个非常好的作品
And I can kinda guarantee to my future
self that this is a really good piece of

106
00:09:24.840 --> 00:09:27.488
可以反复重复使用的代码。
code that I can reuse over and
over and over again.

107
00:09:32.424 --> 00:09:36.519
>> Brian Holt: 现在我们有一大堆关于未使用的变量的错误，
&gt;&gt; Brian Holt: Now we have a bunch
of errors around unused variables,

108
00:09:36.519 --> 00:09:42.139
我们会暂时解决的但你应该现在就知道了
we will fix this momentarily, but
you should expect to see that right now.
