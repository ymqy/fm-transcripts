WEBVTT

1
00:00:00.120 --> 00:00:03.160
> > Brian Holt: 现在我想向你们展示如何做点什么，在我看来，
&gt;&gt; Brian Holt: Now I wanna show you
how to do something, in my opinion,

2
00:00:03.160 --> 00:00:03.740
这里挺酷的
pretty cool here.

3
00:00:03.740 --> 00:00:07.969
这有点烦琐
This is a bit burdensome, to have

4
00:00:07.969 --> 00:00:11.939
写出一个构造函数，构造一个这样的状态。
to write out a constructor and
construct a state like this.

5
00:00:11.939 --> 00:00:15.939
也就是， TypeScript 不能弄明白，对吧 ?
It also is,
TypeScript can't figure this out, right?

6
00:00:17.809 --> 00:00:20.550
这样做的更好方式是我想让你动作快点
And so there's a better way of doing
this that I wanna show you really quick,

7
00:00:20.550 --> 00:00:22.300
以实例化您的状态。
to instantiate your state.

8
00:00:23.690 --> 00:00:26.640
如果您控制了 Bobel 配置，那么可以执行此操作。
If you have control of your Babel config,
then you can do this.

9
00:00:26.640 --> 00:00:31.923
如果不是的话，你可能不会，所以超级
If not, then you may not,
so it would be super

10
00:00:31.923 --> 00:00:38.472
如果我们只能执行状态 = { load:true }，那么有用。
useful if we could just do
state = { loading: true }.

11
00:00:45.456 --> 00:00:47.549
> > Brian Holt: 如果你能那样做，那岂不是更棒吗 ?
&gt;&gt; Brian Holt: Wouldn't that be a lot
nicer, if you could just do it that way?

12
00:00:48.700 --> 00:00:49.689
其实你可以的
Well, you actually can.

13
00:00:50.990 --> 00:00:57.549
但事实是这实际上是
But the thing is that this
is actually a proposal for

14
00:00:57.549 --> 00:01:01.750
一个 JavaScript，它其实还不是一个真正的东西，但是你可以让它工作。
a JavaScript, and it's not actually a real
thing quite yet, but you can make it work.

15
00:01:01.750 --> 00:01:04.242
所以这会用 JavaScript来降落
So this will land in JavaScript,

16
00:01:04.242 --> 00:01:08.882
我认为它实际上是在 2019 年或 2020年着陆。
I think it's actually going
to land in 2019 or 2020.

17
00:01:08.882 --> 00:01:13.060
所以我要给你们展示如何修改你的巴贝尔配置 ( 如果你必须的话 ) 。
So I'm gonna show you how to modify your
Babel config, if you have to, with React.

18
00:01:14.379 --> 00:01:18.444
所以我需要你做的第一件事就是在这里打开你的指挥线路。
So the first thing I need you to
do is open your command line here.

19
00:01:21.152 --> 00:01:22.876
>> Brian Holt: 你可以在这里看到，支持
&gt;&gt; Brian Holt: So
you can see here it says, Support for

20
00:01:22.876 --> 00:01:27.180
当前未启用实验语法 "classProperties" 。
the experimental syntax 'classProperties'
isn't currently enabled.

21
00:01:27.180 --> 00:01:29.137
然后我们就能动作快点了
And we're just gonna go
enable that really quick.

22
00:01:34.112 --> 00:01:36.563
>> Brian Holt: 因此，我希望您执行 npm 安装 -D，并且
&gt;&gt; Brian Holt: So
I want you to do npm install -D, and

23
00:01:36.563 --> 00:01:40.170
你要安装一些东西来做这个工作。
you have to install quite a few
things to make this work.

24
00:01:40.170 --> 00:01:48.703
babel-eslint @babel/core @babel/preset-env
babel-eslint @babel/core @babel/preset-env

25
00:01:48.703 --> 00:01:57.237
@babel/plugin-plug-in-class-properties。
@babel/plugin-proposal-class-properties.

26
00:01:57.237 --> 00:02:00.314
我不知道这些我很抱歉
I don't name these, I'm very sorry.

27
00:02:00.314 --> 00:02:04.695
@babel/ 预设置反应。
And @babel/preset-react.

28
00:02:09.473 --> 00:02:11.021
>> Brian Holt: 你现在都在打字吗 ?
&gt;&gt; Brian Holt: You're all
done typing that now?

29
00:02:11.021 --> 00:02:13.002
我只是开个玩笑这很有需要
I'm just kidding, it's a lot to type.

30
00:02:20.146 --> 00:02:21.493
>> Brian Holt: 那么这里发生了什么 ?
&gt;&gt; Brian Holt: So what's going on here?

31
00:02:23.493 --> 00:02:26.522
> > 布莱恩 - 霍尔特: 这些东西都建在包裹里
&gt;&gt; Brian Holt: All this
stuff is built into Parcel,

32
00:02:26.522 --> 00:02:30.979
而派塞尔一直在为我们处理这个问题
and Parcel has just been handling this for
us.

33
00:02:30.979 --> 00:02:34.670
但是，它给了我们一个逃跑的舱门，如果我们有定制的需求，
However, it gives us the escape
hatch that if we have custom needs,

34
00:02:34.670 --> 00:02:37.229
在这件案子里我们是因为没有这个
which in this case we do because
it doesn't have this one,

35
00:02:37.229 --> 00:02:40.891
@babel/plugin-pl建议书-class-properties
the
@babel/plugin-proposal-class-properties

36
00:02:40.891 --> 00:02:46.990
我们可以说，嘿包裹，用我们的配置，而不是你的配置。
,that we can say, hey Parcel,
use our config instead of your config.

37
00:02:46.990 --> 00:02:52.889
他们的配置是基本的，让我们以现代的 JavaScript为目标，
Their config is basically like,
let's target modern JavaScript,

38
00:02:52.889 --> 00:02:58.610
基本上，已经用有效的 JavaScript 提供的所有内容。
basically, everything that has
already shipped with valid JavaScript.

39
00:02:58.610 --> 00:03:03.870
一般来说我不会说船要做实验用的 JavaScript
In general, I don't say ship to
production experimental JavaScript,

40
00:03:03.870 --> 00:03:06.490
除了我没问题因为这个肯定会降落的
except I'm okay with this one because
this one's definitely gonna land.

41
00:03:06.490 --> 00:03:10.179
事实上我相信它已经降落了如果我记错的话
In fact, I believe it has already landed,
and if I remember reading correctly,

42
00:03:10.179 --> 00:03:11.168
上周它降落了
last week it landed.

43
00:03:14.674 --> 00:03:17.881
>> Brian Holt: 但总的来说，这会咬你的屁股。
&gt;&gt; Brian Holt: But in general,
that can bite you in the butt.

44
00:03:17.881 --> 00:03:20.626
所以我们会安装这个
So we'll install that.

45
00:03:23.897 --> 00:03:26.683
>> Brian Holt: 需要花费第二个时间来完成所有这些内容。
&gt;&gt; Brian Holt: It should take a second
to go through and load all that stuff.

46
00:03:37.014 --> 00:03:40.266
>> 布莱恩 - 霍特( Brian Holt) : 我想，当这一过程完成时，它就完成了。
&gt;&gt; Brian Holt: And I guess while this
is finishing, there, it finished.

47
00:03:42.067 --> 00:03:46.641
>> Brian Holt: 因此，我希望您在此处创建新文件。
&gt;&gt; Brian Holt: So
I want you to create a new file here.

48
00:03:46.641 --> 00:03:50.710
我想让你把它叫做点，而不是在源头里面，在收养我的里面，
And I want you to call it dot,
not inside the source, inside of adopt me,

49
00:03:50.710 --> 00:03:52.596
项目的根目录。
the root directory the project.

50
00:03:52.596 --> 00:03:55.486
给它打电话巴伯 rc
Call it .babelrc.

51
00:03:58.736 --> 00:04:00.967
>> Brian Holt: 好的，使用了。
&gt;&gt; Brian Holt: Okay, yes, used on.

52
00:04:03.987 --> 00:04:09.019
> > Brian Holt: 好的，在这里，我想让你把预置
&gt;&gt; Brian Holt: Okay, inside of here
I want you to put presets, and

53
00:04:09.019 --> 00:04:13.938
然后我们就把两个东西放在预集里
then we're gonna put two
things here in presets.

54
00:04:13.938 --> 00:04:19.355
其中之一是 @babel/preset 反应。
One of them's gonna be,
@babel/preset-react.

55
00:04:19.355 --> 00:04:25.023
其中一个是 @babel/preset-env。
And one of these is gonna
be @babel/preset-env.

56
00:04:27.781 --> 00:04:32.954
>> Brian Holt: 根据我们的信息，我们将放置插件，并且
&gt;&gt; Brian Holt: Under that
we're gonna put plugins, and

57
00:04:32.954 --> 00:04:42.869
在此我们将放置 @babel/plugin-plug-in -class-properties。
inside of that we'll put
@babel/plugin-proposal-class-properties.

58
00:04:47.949 --> 00:04:50.603
>> 布莱恩 - 霍尔特: 让我们来谈谈这两件事情。
&gt;&gt; Brian Holt: So let's talk
about what those two things are.

59
00:04:50.603 --> 00:04:55.148
巴贝反应会带来所有你需要的东西
presets babel react is brings with
it all the things that you need to

60
00:04:55.148 --> 00:04:57.024
错位的雷法对吧
transpile React, right?

61
00:04:57.024 --> 00:05:03.050
因此，在理解 JSX 时，它也会带来流量。
So in understanding JSX,
it also brings Flow.

62
00:05:03.050 --> 00:05:08.341
不是我们正在使用流，而是包含在针对 React的预置中。
Not that we're using Flow at all, but
that is included in the preset for React.

63
00:05:08.341 --> 00:05:10.589
这就是 JSX周围的一系列的情况。
It's a bunch of transpilations around JSX.

64
00:05:11.970 --> 00:05:16.750
@babel/preset-env，这是
@babel/preset-env, this is

65
00:05:16.750 --> 00:05:22.418
一个漂亮的，我应该提一下，一个预设就是一组插件，对吧 ?
a pretty, and I should mention that,
a preset is a group of plugins, right?

66
00:05:23.800 --> 00:05:26.779
所以在这件案子里我们要带来一个转变
So in this case we're bringing
one transformation, but

67
00:05:26.779 --> 00:05:30.389
我们预设的是一堆插件，就是一堆转换。
our preset is a bunch of plugins,
which is a bunch of transformations.

68
00:05:30.389 --> 00:05:35.480
这将为您指定的环境转码。
This will transpile your code for
the environment that you specify.

69
00:05:35.480 --> 00:05:39.079
幸运的是你和我已经指定了一个环境
So luckily, you and I have already
specified an environment, and

70
00:05:39.079 --> 00:05:42.060
就在我们的包里
that is in our package.json.

71
00:05:42.060 --> 00:05:43.137
还记得我们什么时候做的吗
Remember when we did this?

72
00:05:45.228 --> 00:05:50.302
>> Brian Holt: 因此，这个预置-env 将会查看此浏览器列表，并表示凉爽。
&gt;&gt; Brian Holt: So this preset-env is gonna
look at this browsers list, and say, cool.

73
00:05:50.302 --> 00:05:53.884
我要把所有的 JavaScript 都转了这样就能在这些浏览器里工作了
I'm gonna transpile all the JavaScript so
it works in these browsers.

74
00:05:56.591 --> 00:06:00.000
>> Brian Holt: 这样做不会有太多的原因，因为 JavaScript 的 cuz 工作在
&gt;&gt; Brian Holt: So that won't be very many
things because, cuz of JavaScript works in

75
00:06:00.000 --> 00:06:03.194
这些浏览器是因为这些都是非常新的浏览器，好吗 ?
these browsers because these
are very very new browsers, okay?

76
00:06:06.029 --> 00:06:07.339
> > Brian Holt: 但你还能做些很酷的事情。
&gt;&gt; Brian Holt: But
there's pretty cool stuff you can do.

77
00:06:07.339 --> 00:06:11.810
实际上，您可以将 Google Analytics 导入到预先设置的环境中，并且
You can actually import your
Google Analytics into preset-env, and

78
00:06:11.810 --> 00:06:15.000
它会特别为你的用户而转，对吧 ?
it will actually transpile it
specifically for your users, right?

79
00:06:15.000 --> 00:06:17.819
你可以说，嘿，这是我的谷歌分析。
So you can say, hey,
here's my Google Analytics.

80
00:06:17.819 --> 00:06:20.553
移植它，使 99% 的人可以看到我的网站。
Transpile it so that 99% of
these people can see my website.

81
00:06:22.711 --> 00:06:24.648
>> Brian Holt: 已构建到浏览器列表包中。
&gt;&gt; Brian Holt: That's built
into the browserlist package.

82
00:06:24.648 --> 00:06:27.959
我们今天不会这么做但这是有可能的
We're not gonna do that today,
but it is possible.

83
00:06:27.959 --> 00:06:31.160
好的，然后这里的插件，这才是真正允许的
Okay, and then the plugins here,
this is what's actually going to allow

84
00:06:31.160 --> 00:06:35.709
我们要做的就是我刚刚给你看的那个语法好吗
us to do that syntax that
I just showed you, okay?

85
00:06:35.709 --> 00:06:38.090
我需要你再做一件事
I need you to do one more thing here.

86
00:06:38.090 --> 00:06:40.319
所以把这个给你的 .babelrc
So save this to your .babelrc.

87
00:06:40.319 --> 00:06:48.029
我需要您打开 .eslintrc 文件，并且我们必须添加解析器选项。
I need you to open you .eslintrc file,
and we have to add a parser option.

88
00:06:50.019 --> 00:06:56.470
所以我需要你帮我把你的孩子给我
So parser, and
I need you to put babel-eslint.

89
00:06:56.470 --> 00:06:57.932
所以在这一点上
So up to this point,

90
00:06:57.932 --> 00:07:03.105
埃斯特林特已经能够理解我们一直使用的所有代码
eslint has been able to understand
all the code that we have been using.

91
00:07:03.105 --> 00:07:08.778
但现在我们又增加了一个新的实验特征
But now we've added a new experimental
feature that eslint would choke on,

92
00:07:08.778 --> 00:07:12.778
所以我们得说用巴贝尔来理解这个代码
so we have to say,
use Babel to understand this code.

93
00:07:12.778 --> 00:07:14.230
这都是这么做的
And that's all this does.

94
00:07:18.615 --> 00:07:22.697
>> 布莱恩 - 霍尔特( Brian Holt) : 现在，这似乎是一种使用一个功能的礼节，但
&gt;&gt; Brian Holt: Now, this might seem like
a lot of ritual to use one feature, but

95
00:07:22.697 --> 00:07:26.949
我通常不会只为一个这样的功能而去做。
I typically wouldn't do it just for
one feature like this.

96
00:07:26.949 --> 00:07:31.417
但这对如何使用 Babel 有更多的指导意义
But this is actually to be more
instructive on how to use Babel and

97
00:07:31.417 --> 00:07:32.752
包裹在一起
Parcel together.

98
00:07:37.086 --> 00:07:41.949
> > Brian Holt: 好的，现在你把 17 线放在那里，
&gt;&gt; Brian Holt: Okay, so
now that you've put in that line 17 there,

99
00:07:41.949 --> 00:07:45.680
我们回到我们的 " SearchParams " 页面
let's go back to our SearchParams page.

100
00:07:45.680 --> 00:07:49.769
现在，不是 SearchParams，而是详细信息。
And now, not SearchParams,
we were on Details rather.

101
00:07:51.769 --> 00:07:53.081
现在这样挺好的
Now it's fine with this.

102
00:07:56.920 --> 00:07:58.319
>> Brian Holt: 很酷，对吧 ?
&gt;&gt; Brian Holt: Pretty cool, right?

103
00:08:03.512 --> 00:08:09.007
> > Brian Holt: 现在，如果我没有错的话，你应该可以说。
&gt;&gt; Brian Holt: Now, if I'm not mistaken,
you should be able to say this.state.,

104
00:08:09.007 --> 00:08:13.060
然后就知道你在上面装货了
and then it knows that you
have loading on there.

105
00:08:13.060 --> 00:08:17.134
这是因为现在 TypeScript 可以理解您的组件，对吗 ?
That's because now TypeScript can
understand your component, right?

106
00:08:17.134 --> 00:08:21.838
它不知道你有媒体，有繁殖，有负荷量，
Notice it doesn't actually know that you
have media, and breed, and load, and

107
00:08:21.838 --> 00:08:25.937
有些其他的因为我们在这里没有把它实例化
some of these other ones,
because we didn't instantiate it up here.

108
00:08:25.937 --> 00:08:30.418
但是 TypeScript 现在有能力去运行代码和理解，好的，
But TypeScript has the ability now to go
and run on your code and understand, okay,

109
00:08:30.418 --> 00:08:32.659
你有这些东西在你的组件上
you have these things on your component.

110
00:08:32.659 --> 00:08:35.470
我可以给你自动完成这些东西
I can autocomplete these things for you.

111
00:08:35.470 --> 00:08:38.485
所以如果我想在这里设定名字就像这样
So if I want in here and
set name: blink like that, just set and

112
00:08:38.485 --> 00:08:41.220
实例化为某种缺省情况。
instantiate to be some
sort of default thing.

113
00:08:41.220 --> 00:08:45.504
这就意味着我可以来这儿说
That means I can come down here and
say, this.state., and

114
00:08:45.504 --> 00:08:48.366
那么现在通知名字也在这里
then notice now a name is in here as well.

115
00:08:51.366 --> 00:08:55.642
>> Brian Holt: 这是 TypeScript 的魔力，以及针对该问题的 VS 代码。
&gt;&gt; Brian Holt: It's the magic of
TypeScript, and VS Code for that matter.

116
00:09:01.760 --> 00:09:02.596
> > Brian Holt: 我们稍后会了解到的。
&gt;&gt; Brian Holt: We'll get to that later,
though.

117
00:09:02.596 --> 00:09:04.884
有一段关于 TypeScript 的部分，因此。
There's a whole section on TypeScript, so.

118
00:09:15.255 --> 00:09:16.129
>> Brian Holt: 如果不起作用呢 ?
&gt;&gt; Brian Holt: What if it doesn't work?

119
00:09:17.970 --> 00:09:21.303
我开玩笑的 让我们看看这里发生了什么
I'm just kidding.
[LAUGH] Let's see what happened here.

120
00:09:23.177 --> 00:09:26.984
>> Brian Holt: 此 .state.returt ，是否在某处保留了 this.state ?
&gt;&gt; Brian Holt: This .state.return,
did I leave a this.state in somewhere?

121
00:09:26.984 --> 00:09:28.863
是啊太奇怪了
Yeah, that's weird.

122
00:09:31.717 --> 00:09:33.283
>> Brian Holt: 有了。
&gt;&gt; Brian Holt: There it goes.

123
00:09:33.283 --> 00:09:37.158
那只是给我看这个名字之类的
That was just for
me showing this.name and stuff like that,

124
00:09:37.158 --> 00:09:39.895
比把它裹在那条线上
prettier than just wrap it onto that line.

125
00:09:48.815 --> 00:09:49.495
> > 布莱恩 - 霍尔特: 酷，好，
&gt;&gt; Brian Holt: Cool, so yeah,

126
00:09:49.495 --> 00:09:51.947
现在还在和公共阶层的财产合作
now that's still working with
the public class property.

127
00:09:51.947 --> 00:09:57.470
这就是所谓的。
It's actually what that's called.
