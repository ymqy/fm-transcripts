WEBVTT

1
00:00:00.240 --> 00:00:04.371
>> Brian Holt: 因此，让我们快速转换 app.js ，但我们不希望这样做。
&gt;&gt; Brian Holt: So let's go convert app.js
really quick, cuz we don't want this to

2
00:00:04.371 --> 00:00:12.300
是， >> Brian Holt: 我们只是希望它是 JSX。
be,
&gt;&gt; Brian Holt: Just we want it to be JSX.

3
00:00:13.759 --> 00:00:14.699
所以我要说回来
So I'm gonna say return.

4
00:00:16.846 --> 00:00:20.545
我们先讲一下括号，为什么我把括号放在这里呢 ?
Let's talk about the parentheses for just
a second, why do I put parentheses here?

5
00:00:20.545 --> 00:00:25.019
如果我只说回话然后再做点新的事
Well, if I just say return and
then put something on a new line, and

6
00:00:25.019 --> 00:00:27.000
我把它放在一条新线上，让它更容易阅读。
I put it on a new line so
it's easier to read.

7
00:00:28.800 --> 00:00:32.850
那么 JavaScript 的工作方式是如果它看到一条新的线
Well, the way the JavaScript
works is if it sees a new line,

8
00:00:32.850 --> 00:00:34.100
就在这里结束
it just ends it right here.

9
00:00:34.100 --> 00:00:37.020
所以它实际上是这样运作的，就在那里，对吧 ?
So it actually works like that,
where it just ends, right?

10
00:00:37.020 --> 00:00:40.884
所以如果我把这个包围在括号里
So if I surround this in parenthesis,
it's saying hey,

11
00:00:40.884 --> 00:00:44.195
我还没结束呢继续下去
I'm not done yet,
continue on to the next line.

12
00:00:46.472 --> 00:00:51.737
>> Brian Holt: 好，因此 h1>采用
&gt;&gt; Brian Holt: Okay, and so h1&gt;Adopt

13
00:00:51.737 --> 00:00:55.759
我就像这样
Me!, like that.

14
00:00:55.759 --> 00:00:59.229
现在我想用我在这里做的宠物组件对吧
And then now I wanna use this Pet
component that I made up here, right?

15
00:01:00.990 --> 00:01:01.990
那我要怎么用这个
So how am I gonna use that?

16
00:01:03.429 --> 00:01:06.040
这就像这样佩特
Well, it works like this, Pet.

17
00:01:06.040 --> 00:01:09.719
所以我实际上可以用一个合成组件，就像它是真实的 HTML，
So I actually can use a composite
component as if it was real HTML,

18
00:01:09.719 --> 00:01:10.359
这很酷
which is really cool.

19
00:01:11.909 --> 00:01:15.140
如果我想在这里加上那个 ID 的话
And then if I wanted to
add that ID back here, so

20
00:01:15.140 --> 00:01:19.960
这个 ID 是，我叫它重要的，对，就像这样。
this ID would be, I called it
something important, right, like that.

21
00:01:21.239 --> 00:01:26.152
此方法的工作方式与属性或属性相同
That works the same way, and
attributes or properties for

22
00:01:26.152 --> 00:01:32.680
这个宠物组件的工作方式是一样的所以我可以说名字叫 " Luna"
this pet component works exactly the same
way, so I can say name = "Luna",

23
00:01:34.490 --> 00:01:38.237
>> Brian Holt: Animal = "Bird"或 no，
&gt;&gt; Brian Holt: Animal = "Bird", or no,

24
00:01:38.237 --> 00:01:43.409
" 犬" ，并繁殖 " Havanese"。
"Dog", and breed = "Havanese".

25
00:01:49.287 --> 00:01:54.650
>> Brian Holt: 现在，你看到了这个自我封闭的标签，对吗 ?
&gt;&gt; Brian Holt: Now, you see this
self-closing tag thing, right?

26
00:01:54.650 --> 00:01:58.069
我知道 HTML 是很有选择性的而且我经常把它放外面
I know in HTML that that's optional and
frequently I leave it out, cuz again,

27
00:01:58.069 --> 00:02:00.640
我很懒也不喜欢那种东西
I'm lazy and don't type things like that.

28
00:02:00.640 --> 00:02:04.939
但我要告诉你，在 JSX 中，他们是必需的，对吗 ?
But I'll tell you that in JSX they
actually are required, right?

29
00:02:04.939 --> 00:02:08.710
您需要让 JSX 知道这是一个自动关闭的标记，因此
You need to let JSX know that
this is a self-closing tag so

30
00:02:08.710 --> 00:02:10.139
你得把它放在后面
you have to put that trailing slash.

31
00:02:12.159 --> 00:02:14.004
好吧我要放三个
Okay, I'm gonna put three of those.

32
00:02:14.004 --> 00:02:17.466
这就是 " 百事可乐 "
This was "Pepper",

33
00:02:17.466 --> 00:02:22.568
" 鸟人 "" 鸡尾酒 "
"Bird", "Cockatiel", and

34
00:02:22.568 --> 00:02:28.417
这就是 " Doink" 混合 "Cat"
this was "Doink", mixed "Cat".

35
00:02:35.524 --> 00:02:37.288
> > 布莱恩 - 霍尔特:
&gt;&gt; Brian Holt: What is kinda fun though,

36
00:02:37.288 --> 00:02:42.599
还有 JX 你甚至可以做自我关闭的潜水夫
with JSX you can even do self-closing
divs as well, like that.

37
00:02:42.599 --> 00:02:48.194
这在 HTML 中是不合法的，但在 JSX 中是合法的，这很有趣。
Which is not legal in HTML but
is legal in JSX, which is kinda fun.

38
00:02:51.445 --> 00:02:53.229
> > Brian Holt: 实际上， Prettier 会为您做。
&gt;&gt; Brian Holt: And actually,
Prettier will just do it for you.

39
00:02:53.229 --> 00:03:00.075
如果我这样做，当我拯救的时候，就像是，不，你真的是说，这挺有趣的。
If I do that, when I save, it's like, no,
you really meant that, which is kinda fun.

40
00:03:01.864 --> 00:03:05.740
>> 扬声器 2: 因此 JSX 将执行此操作并将其转换为 React.create，
&gt;&gt; Speaker 2: So JSX would take this and
turn it into a React.create,

41
00:03:05.740 --> 00:03:10.691
第一个自变量是 div，第二个是 emptyObject，
with the first argument being div,
the second one being emptyObject,

42
00:03:10.691 --> 00:03:15.419
第三个是 React.nett 的列表
and the third one being a list of
React.creates with all of those?

43
00:03:15.419 --> 00:03:16.349
>> Brian Holt: 对。
&gt;&gt; Brian Holt: Yep.

44
00:03:16.349 --> 00:03:20.030
>> 演讲者 2: 因此写作的好处是什么
&gt;&gt; Speaker 2: So
what's the benefit of writing

45
00:03:20.030 --> 00:03:23.969
XML 将其转换为 JavaScript，以将其转换为 HTML?
XML to turn it into JavaScript,
to turn it into HTML?

46
00:03:23.969 --> 00:03:25.151
>> Brian Holt: 对。 >> 扬声器 2: 为什么不只是
&gt;&gt; Brian Holt: Yep.
&gt;&gt; Speaker 2: Why don't it just

47
00:03:25.151 --> 00:03:25.699
写 HTML?
write HTML?

48
00:03:32.106 --> 00:03:35.320
>> Brian Holt: 最终，这是某种类型的模板，对吧 ?
&gt;&gt; Brian Holt: Ultimately,
this is a template of some sort, right?

49
00:03:35.320 --> 00:03:37.026
有点错误的对吧
Kind of falsely so, right?

50
00:03:37.026 --> 00:03:40.520
它不是一个模板，实际上只是函数调用。
Cuz it's not actually a template,
it's actually just function calls.

51
00:03:40.520 --> 00:03:42.039
但是在最后，这其实是势在必行的，
But in the end,
this is actually imperative,

52
00:03:42.039 --> 00:03:43.930
因为它被处死了对吧
cuz it's being executed, right?

53
00:03:43.930 --> 00:03:49.009
虽然 HTML 是声明式的，但它不是您可以执行的内容，对吗 ?
Whereas HTML is declarative,
it's not something you can execute, right?

54
00:03:49.009 --> 00:03:52.770
那么到目前为止我所展示的一切，都是非常静态的数据，对吗 ?
So everything I've shown you so far,
this is all very static data, right?

55
00:03:52.770 --> 00:03:56.180
但你可以想象到这里而不是像 Luna 一样
But you can imagine here,
instead of having Luna equal this,

56
00:03:56.180 --> 00:04:00.289
我可能有 API 结果对吧
I could have API result, right?

57
00:04:00.289 --> 00:04:03.050
现在我可以把动态信息传递给宠物
And now I can pass dynamic
information into Pet.

58
00:04:03.050 --> 00:04:06.449
它让我有能力操纵这个
It gives me the power of
JavaScript to manipulate this.

59
00:04:06.449 --> 00:04:07.492
这能回答你的问题吗
Does that answer your question?

60
00:04:07.492 --> 00:04:08.013
>> 演讲者 2: 是的，谢谢。
&gt;&gt; Speaker 2: Yeah, thank you.

61
00:04:08.013 --> 00:04:08.700
>> Brian Holt: Cool， yep.
&gt;&gt; Brian Holt: Cool, yep.

62
00:04:12.020 --> 00:04:15.062
>> Brian Holt: 实际上，沿着这些线，我觉得我跳过了
&gt;&gt; Brian Holt: So actually, along those
lines, I think something that I skipped

63
00:04:15.062 --> 00:04:17.505
解释是这里的花括号
over explaining were the curly
braces over here, and

64
00:04:17.505 --> 00:04:19.259
让我们尽快解决这个问题
let's address that really quickly.

65
00:04:20.629 --> 00:04:24.649
所以现在如果我过去看看我的网站
So right now, if I go over and
look at my site,

66
00:04:24.649 --> 00:04:27.889
我觉得一切都要修复了，等等，还有一件事要解决。
I think everything should be fixed again,
hold on, one more thing to fix here.

67
00:04:27.889 --> 00:04:33.151
与其在此处创建 React.create 链接，请使此应用程序成为类似的应用程序。
Rather than having a React.create link
down here, make this app like that.

68
00:04:36.793 --> 00:04:38.401
> > Brian Holt: 再次，第 31 行，
&gt;&gt; Brian Holt: So again, line 31 there,

69
00:04:38.401 --> 00:04:41.084
只要让React.打造一个这样的应用
just make that React.create
an App like that.

70
00:04:45.346 --> 00:04:49.952
> > 布莱恩 - 霍尔特: 好吧，既然我已经这样做了，
&gt;&gt; Brian Holt: Okay, so
now that I've done that,

71
00:04:49.952 --> 00:04:53.209
回到 Pet.js
go back over to Pet.js.

72
00:04:53.209 --> 00:04:56.230
如果我去我的应用程序，希望它还在运行。
And if I go over to my app,
hopefully it's still running.

73
00:04:56.230 --> 00:04:57.540
不不是那个那个
No, not that one, this one.

74
00:04:58.540 --> 00:04:59.889
我阻止它跑了吗
Did I stop it from running?

75
00:04:59.889 --> 00:05:01.783
我做了， npm 跑了。
I did, npm run dev.

76
00:05:15.273 --> 00:05:16.475
>> Brian Holt: 刷新页面。
&gt;&gt; Brian Holt: Refresh the page.

77
00:05:16.475 --> 00:05:18.985
我有 Luna， Pepper和 Doink，对吧 ?
So I have Luna, Pepper, and Doink, right?

78
00:05:20.574 --> 00:05:25.004
如果我在这儿把花括号去掉怎么办
What happens if I remove
the curly braces here?

79
00:05:28.213 --> 00:05:30.654
> > 布莱恩 - 霍尔特: 现在真的是名字了，对吧 ?
&gt;&gt; Brian Holt: Now it's literally
gonna be the name, right?

80
00:05:30.654 --> 00:05:31.593
所以如果我救了这个
So if I save this and

81
00:05:31.593 --> 00:05:35.560
回到这里你会看到上面写着名字的对吧
go back over here you'll see that it says
literally the word name here, right?

82
00:05:35.560 --> 00:05:40.034
那么花括号的是你让 JSX 知道这事
So what the curly braces do is
you're letting JSX know this is

83
00:05:40.034 --> 00:05:42.590
此处是 JavaScript 表达式。
a JavaScript expression in here.

84
00:05:42.590 --> 00:05:46.038
而术语表达式意味着任何可以在
And the term expression means anything
that can be on the right side of

85
00:05:46.038 --> 00:05:46.879
任务。
an assignment.

86
00:05:46.879 --> 00:05:50.612
所以如果我说 const x = 什么
So if I say const x = something,

87
00:05:50.612 --> 00:05:56.715
让我们说吧 >> Brian Holt: 我
let's just say,
&gt;&gt; Brian Holt: I

88
00:05:56.715 --> 00:06:01.663
不知道， named.toUpperCase}，对吧 ?
don't know, named.toUpperCase}, right?

89
00:06:01.663 --> 00:06:06.170
任何可以在等号右边出现的东西
So anything that can be on the right
side of an equals sign here,

90
00:06:06.170 --> 00:06:08.731
这被认为是一种表达方式。
this is considered an expression.

91
00:06:10.694 --> 00:06:11.439
>> Brian Holt: 例如，
&gt;&gt; Brian Holt: So for example,

92
00:06:11.439 --> 00:06:14.660
你不能在右边有一个声明对吧
you can't have an if statement
on the right side of it, right?

93
00:06:14.660 --> 00:06:17.069
所以 const y = if，
So a const y = if,

94
00:06:17.069 --> 00:06:21.019
这不起作用，因为一个表达式和一个语句是不同的，对吗 ?
this doesn't work because an expression
and a statement are different, right?

95
00:06:21.019 --> 00:06:22.329
一个说法是完整的，对吧 ?
A statement is a whole idea, right?

96
00:06:22.329 --> 00:06:25.970
因此所有第 3 行都将被视为一个语句，但是
So all of line three would be
considered one statement, but

97
00:06:25.970 --> 00:06:28.459
这里的一切都被认为是一种表达方式
everything here on the right side
is considered an expression.

98
00:06:30.040 --> 00:06:31.689
这种界定是否有意义 ?
Does that delineation make sense?

99
00:06:32.769 --> 00:06:38.139
好的，所以在这里，我可以说， . toUpperCase ，并引用该权限
Okay, so that means here inside of name, I
can say .toUpperCase and invoke that right

100
00:06:38.139 --> 00:06:42.879
在这里，或者这可能是在援引动物，功能之类的，或者
here, or this could be invoking animal,
the function, or something like that, or

101
00:06:42.879 --> 00:06:48.079
这个可以是 + 动物，对吧 ?
this can be + animal, right?

102
00:06:48.079 --> 00:06:50.110
所以任何东西都能在一个等号的右边
So anything that can be on the right
side of an equal sign, but

103
00:06:50.110 --> 00:06:52.209
我不能在里面放一个完整的声明
I can't put a full if statement in there.

104
00:06:52.209 --> 00:06:53.840
但是你可以用长长的，对吧 ?
But you can use ternaries, right?

105
00:06:53.840 --> 00:06:56.276
可爱的长长的胸骨在技术上是表达的
Cuz ternaries are technically expressions,
and

106
00:06:56.276 --> 00:06:58.790
一个三元的问题就像问号的问题。
a ternary is like the question mark thing.

107
00:06:58.790 --> 00:06:59.911
我待会儿用
I'll use them later.

108
00:06:59.911 --> 00:07:03.139
他们很有趣或者不好玩，取决于你问谁。
They're fun or not fun,
depending on who you ask.

109
00:07:03.139 --> 00:07:04.649
我觉得他们很有趣
I think they're fun.

110
00:07:04.649 --> 00:07:08.728
所以反正现在我都搞砸了，对，所以
So anyway, and again, yeah,
now I've messed up everything, right, so

111
00:07:08.728 --> 00:07:13.353
现在卢娜都是大写的你有 HavaneseDog 和 CockatielBird，对吧 ?
now Luna is all capitalized, and you have
HavaneseDog and CockatielBird, right?

112
00:07:15.737 --> 00:07:17.920
>> Brian Holt: 这就是这些内容的内容。
&gt;&gt; Brian Holt: So
that's what those are about.

113
00:07:17.920 --> 00:07:22.882
它只是一个卷曲的大支柱，就是这样运作的。
And it's just a single curly brace there,
that's how it works.

114
00:07:28.425 --> 00:07:29.682
>> Brian Holt: 这样你就可以
&gt;&gt; Brian Holt: And so you can mix and

115
00:07:29.682 --> 00:07:32.653
我也可以有这样的名字
match them too, so
I could have name like that.

116
00:07:32.653 --> 00:07:35.605
如果我回到这里，它的名字叫 Luna，名字叫 Pepper ，
And if I go back here,
it says Name: Luna, Name: Pepper, and

117
00:07:35.605 --> 00:07:37.350
都是为了你的
it does that concatenation for you.
