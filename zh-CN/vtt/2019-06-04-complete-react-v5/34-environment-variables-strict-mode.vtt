WEBVTT

1
00:00:00.060 --> 00:00:01.730
> > 布莱恩: 我想在这里说几件事。
&gt;&gt; Brian: There's a couple things
that I wanna call out here.

2
00:00:01.730 --> 00:00:05.184
重要的是当你编代码的时候
One of the big things is when
you're compiling your code,

3
00:00:05.184 --> 00:00:08.435
设置 NODE_ENV 非常重要。
it's really important that
you set the NODE_ENV..

4
00:00:08.435 --> 00:00:09.436
现在的好消息是
Now, the good news for

5
00:00:09.436 --> 00:00:12.304
如果你是在利用包裹派塞尔就会处理好这个
you is if you're using Parcel,
Parcel just takes care of this.

6
00:00:12.304 --> 00:00:16.859
因此，当您处于开发方式时，它会将其保留在 NODE_ENV=development中。
So when you're in development mode,
it'll keep it in NODE_ENV=development.

7
00:00:16.859 --> 00:00:23.378
然后当你做 Parcel 构建 index.html 时，它会将它设置为生产。
And then when you do a Parcel build
index.html, it'll set that to production.

8
00:00:23.378 --> 00:00:26.016
使用 Web pack 和浏览器文件，您需要更明确一点。
With Web pack and browser file,
you need to be a little more explicit.

9
00:00:28.475 --> 00:00:31.184
>> 布莱恩: 你这样做的原因是当你处于开发模式时
&gt;&gt; Brian: So the reason why you do this
is when you're in development mode,

10
00:00:31.184 --> 00:00:32.972
它会给你更多的描述性错误
it'll give you more descriptive errors.

11
00:00:32.972 --> 00:00:36.759
它会帮你的
It'll kind of help you along the way.

12
00:00:38.640 --> 00:00:40.405
它会阻止你做坏事
It'll prevent you from doing bad things.

13
00:00:40.405 --> 00:00:42.295
然后当你把它放进生产模式时
And then,
when you put it in production mode,

14
00:00:42.295 --> 00:00:44.195
它会像你想要的一样减掉代码
it cuts out as much code as you want or
as it can.

15
00:00:44.195 --> 00:00:49.219
因此，它删除了所有调试代码，使其变得更小更快。
So it drops all of the debugging code,
which makes it smaller and faster.

16
00:00:49.219 --> 00:00:50.969
但是您没有得到有用的错误消息。
But you don't get
the useful error messages.

17
00:00:50.969 --> 00:00:51.990
您不获取源映射。
You don't get source maps.

18
00:00:51.990 --> 00:00:53.939
你不会得到一些帮助你编写代码的东西。
You don't get a bunch of the stuff
that helps you write code.

19
00:00:55.079 --> 00:00:58.527
所以确定这些东西都是在适当的地方
So it's just key to make sure that both of
those things are set in the appropriate

20
00:00:58.527 --> 00:00:59.258
环境。
environments.

21
00:01:02.877 --> 00:01:04.448
> > 布莱恩: 斯拉克，把这个搞砸了，
&gt;&gt; Brian: Slack, famously messed this up,

22
00:01:04.448 --> 00:01:07.890
他们将长期的发展环境运来
that they were shipping the development
environment for a long time.

23
00:01:07.890 --> 00:01:12.471
所以值得关注的是它的大小是它的四倍
So it's worth keeping an eye on
cuz it's four times larger and

24
00:01:12.471 --> 00:01:16.887
如果您使用开发环境，那么会降低 40 倍。
40 times slower if you use
the development environment.

25
00:01:19.792 --> 00:01:21.159
> > 布莱恩: 好的，严格的方式
&gt;&gt; Brian: Okay, strict mode,

26
00:01:21.159 --> 00:01:25.900
您可以在 React.Strict 中合并整个应用程序。
there's a thing that you can wrap
entire application in React.Strict.

27
00:01:25.900 --> 00:01:31.025
这将会为您提供帮助，帮助您将来的应用证明。
And what this will do for you is it'll
help you future proof your application.

28
00:01:31.025 --> 00:01:34.889
所以， React 有一些事情是他们想去戒除的。
So React has some things that
they're trying to deprecate.

29
00:01:34.889 --> 00:01:39.242
如果你做了 React.Strict ，它就不允许你再使用它们了。
And if you do React.Strict,
it won't allow you to use them anymore.

30
00:01:39.242 --> 00:01:41.640
而如果你没有严格的反应
Whereas if you don't have
React in strict mode,

31
00:01:41.640 --> 00:01:45.334
它会让你用这些东西很快就会被废弃
it'll let you use these things that
they're going to shortly deprecate.

32
00:01:45.334 --> 00:01:49.162
最酷的是它是一个组件，所以你可以在
And the cool thing is it's a component, so
you can make part of your application in

33
00:01:49.162 --> 00:01:51.286
严格方式和部分方式不严格。
strict mode and
part of it not in strict mode.

34
00:01:51.286 --> 00:01:53.127
所以如果你有新的部分申请
So if you have a new
part of your application,

35
00:01:53.127 --> 00:01:54.438
你可以用严格的方式
you can put that in strict mode.

36
00:01:54.438 --> 00:01:58.264
如果你有一个旧的部分会使用 React的旧部分
And if you have an old part that
does use the old part of React,

37
00:01:58.264 --> 00:02:00.977
你仍然可以没有严格的方式
you can still have that
not in strict mode.

38
00:02:00.977 --> 00:02:02.698
让你看看如何做到这一点。
So just to show you how to do that.

39
00:02:02.698 --> 00:02:05.010
事实上，我们可以做得非常快，把它裹起来。
In fact, we can just do it really
quick and leave it in wrap.

40
00:02:05.010 --> 00:02:10.247
转至 wrapper.JS ，然后在此处
Go to wrap.JS, and just here you

41
00:02:10.247 --> 00:02:15.090
可以说 React.StrictMode。
can say React.StrictMode.

42
00:02:15.090 --> 00:02:16.719
我想我的笔记搞错了
I guess I got that wrong in my notes.

43
00:02:16.719 --> 00:02:19.085
所以 React.StrictMode 就像这样
So yeah, React.StrictMode like that.

44
00:02:24.271 --> 00:02:27.836
>> Brian: React.StrictMode 不呈现任何内容，它不添加任何页面权重
&gt;&gt; Brian: React.StrictMode doesn't render
anything, it doesn't add any page weight

45
00:02:27.836 --> 00:02:31.909
或者任何类似的东西，这样做是完全可以的。
or anything like that, so this is
totally fine to ship this to production.

46
00:02:31.909 --> 00:02:34.639
在生产中，这只会无所作为，严格的模式。
In production, this will just do nothing,
the strict mode part of it.

47
00:02:36.050 --> 00:02:39.240
但是现在，如果我们尝试做任何事情，比如使用任何不稳定的 API 或
But now, if we try and do anything
like use any of the unstable APIs or

48
00:02:39.240 --> 00:02:40.045
就像这样
something like that,

49
00:02:40.045 --> 00:02:43.389
它会给你更多关于你不想做的事情的警告
it'll give you additional warnings
about things that you don't want to do.

50
00:02:44.479 --> 00:02:47.550
所以我们是用 JavaScript来教你最新的
So we're teaching you all
the latest in JavaScript.

51
00:02:47.550 --> 00:02:49.629
因此，我们不会触发任何这些警告。
So we won't trigger any of these warnings.

52
00:02:49.629 --> 00:02:52.539
但是如果您在旧应用程序中，那么这可能很有用。
But if you're in legacy applications,
this can be helpful.
