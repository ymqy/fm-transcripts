WEBVTT

1
00:00:00.890 --> 00:00:05.677
迈克 · 诺斯: 这是另一个非常非常重要的部分
&gt;&gt; Mike North: So this is another very,
very important section in terms of

2
00:00:05.677 --> 00:00:10.574
形成了正确的打字稿工作方式的心理模型。
forming the right mental model
about how TypeScript works.

3
00:00:10.574 --> 00:00:16.085
我给这个声明命名为合并，但是这个我们会看很多,
And I've titled the declaration merging,
but this we're gonna look a lot,

4
00:00:16.085 --> 00:00:20.917
深入研究 Visual Studio 代码的工具提示如何为我们提供
look deeply into how Visual Studio
codes' ToolTips provide us with

5
00:00:20.917 --> 00:00:26.173
我们可以利用这些信息来判断某件东西是否有价值,
information that we can use to figure
out whether some thing's of value,

6
00:00:26.173 --> 00:00:28.411
不管是什么类型的东西。
whether some thing's a type.

7
00:00:31.214 --> 00:00:35.734
迈克 · 诺斯: 另外，这有助于我们理解如何放少量
&gt;&gt; Mike North: Additionally, this helps
us understand how we can put put little

8
00:00:35.734 --> 00:00:39.924
修复了顶部的库或不完美的类型信息，或
fixes on top of libraries or
imperfect type information, or

9
00:00:39.924 --> 00:00:44.963
也许你想要一个还不存在的原型。
maybe you want to prototype something and
types don't exist for it yet.

10
00:00:44.963 --> 00:00:50.628
这可以帮助您增加应用程序中的一些现有类型信息。
This helps you augment some of
the existing type information in your app.

11
00:00:50.628 --> 00:00:52.877
让我们来看一下音符的第八部分。
So let's look at Section 8 of the notes.

12
00:01:01.453 --> 00:01:05.480
在打字稿应用程序中，标识符就是
&gt;&gt; Mike North: In TypeScript app,
identifiers and just think of these as

13
00:01:05.480 --> 00:01:11.000
你可以导出的东西，内部类型脚本来调用这些符号。
things that you could export, internally
types script to call these symbols.

14
00:01:11.000 --> 00:01:15.265
标识符最多可以与三个东西相关联。
Identifiers can be associated
with up to three things.

15
00:01:15.265 --> 00:01:18.441
值、类型或命名空间。
A value, a type or namespace.

16
00:01:18.441 --> 00:01:23.408
这是一个我们还没有讨论过的名称空间，但是在
A namespace we haven't talked about yet,
but it's pretty simple in

17
00:01:23.408 --> 00:01:28.474
它有点像一个对象，它有一个类型和一个值。
that it's sort of like an object in
that it has a type and it has a value.

18
00:01:28.474 --> 00:01:33.796
所以在这种情况下我们可以做 baz.biz。
So in this situation we could do baz.biz.

19
00:01:33.796 --> 00:01:40.264
它只是一个集合，所有的东西都融合在一起。
It's just sort of a collection
of stuff all merged together.

20
00:01:40.264 --> 00:01:43.823
本身不值得报道，而且
Not really worth covering on its own, and

21
00:01:43.823 --> 00:01:48.718
作为描述事物的工具越来越不受欢迎。
increasingly less popular as
a tool to describe things.

22
00:01:48.718 --> 00:01:52.444
所以我要向你们展示如何给出一个符号,
So I'm gonna show you how, given a symbol,

23
00:01:52.444 --> 00:01:56.191
你可以测试它是否可以作为一种类型。
you can test whether it
can be used as a type.

24
00:01:56.191 --> 00:01:57.787
我们已经这样做了。
And we've already been doing this.

25
00:01:57.787 --> 00:02:03.753
对不起，我们要先测试一个值，这是非常直观的。
Sorry, we're gonna test for a value first,
and this is very intuitive.

26
00:02:03.753 --> 00:02:08.558
你应该能够完成某种任务。
You should be able to complete
an assignment of some sort.

27
00:02:08.558 --> 00:02:14.340
如果它是一个值，变量应该能够保存它。
If it's a value,
a variable should be able to hold it.

28
00:02:14.340 --> 00:02:16.658
如果你在这里得到一个类型错误，有些事情是错误的。
If you get a type error here,
something is wrong.

29
00:02:16.658 --> 00:02:18.127
让我们用接口来试试。
Let's try it with the interface.

30
00:02:20.245 --> 00:02:20.824
迈克 · 诺斯: 不好。
&gt;&gt; Mike North: No good.

31
00:02:20.824 --> 00:02:25.122
Bar 只是指一个类型，但是它在这里被用作一个值，所以
Bar only refers to a type but
it's used as a value here, so

32
00:02:25.122 --> 00:02:29.349
这是一个有效的测试，看看是否是一个值。
this is an effective test to
see if something is a value.

33
00:02:29.349 --> 00:02:31.237
如何测试某物是否是一种类型？
How to test if something is a type?

34
00:02:31.237 --> 00:02:36.811
尝试使用它作为一个类型，尝试使用它在左手边的一个等于，或如果
Try to use it as a type, try to use it on
the left-hand side of an equals, or if

35
00:02:36.811 --> 00:02:42.647
这是一个你甚至不需要做的左手动作
it's a left you don't even have to do that
&gt;&gt; Mike North: So

36
00:02:42.647 --> 00:02:47.646
如果你能成功地做到这一点，酒吧可以被视为类型。
if you can do that successfully,
bar can be regarded as type.

37
00:02:47.646 --> 00:02:52.146
要测试某物是否与名称空间相关联,
To test whether something is
associated with a namespace,

38
00:02:52.146 --> 00:02:55.841
你得依靠工具提示才能做到。
you're gonna have to rely on ToolTips for
that.

39
00:02:57.954 --> 00:03:02.080
迈克 · 诺斯: 请注意，这三样东西都是重要的
&gt;&gt; Mike North: And just note that all
three of these things are importable and

40
00:03:02.080 --> 00:03:03.038
可出口的。
exportable.

41
00:03:03.038 --> 00:03:04.250
这就是我们的界面。
There's our interface.

42
00:03:04.250 --> 00:03:08.712
这就是我们的价值，迈克 · 诺斯: 这就是我们的名称空间。
There's our value,
&gt;&gt; Mike North: And there's our namespace.

43
00:03:08.712 --> 00:03:14.656
所以现在我们有了一些可以应用的测试,
So now, we kind of have the tests
we can apply to things,

44
00:03:14.656 --> 00:03:18.078
搞清楚到底发生了什么。
to figure out what's going on.

45
00:03:18.078 --> 00:03:21.449
所以函数和变量，它们是纯粹的值。
So functions and variables,
they are purely values.

46
00:03:21.449 --> 00:03:26.893
只能使用类型查询提取值的类型。
You can only extract the type
of a value using a type query.

47
00:03:29.754 --> 00:03:32.831
界面只是类型。
&gt;&gt; Mike North: Interfaces are only types.

48
00:03:32.831 --> 00:03:36.383
如果我们想在这里完成任务,
If we try to complete an assignment here,

49
00:03:36.383 --> 00:03:40.038
我们得到了同样的错误，我们看到了上面。
we get the same error
we were seeing above.

50
00:03:40.038 --> 00:03:43.574
地址只是指一种类型，并在这里作为一个值使用。
Address only refers to a type, and
is being used as a value here.

51
00:03:43.574 --> 00:03:48.079
这就是有趣的地方,
Classes, this is where
things get interesting,

52
00:03:48.079 --> 00:03:54.742
它们通过了值测试和类型测试，这就是现在的情况。
they pass both the value and the type
tests, and here's what is going on.

53
00:03:54.742 --> 00:04:02.099
一方面，类是生成实例的工厂，对吗？
On one hand, a class is a factory
to produce instances, right?

54
00:04:02.099 --> 00:04:03.774
它有一个构造函数。
It has a constructor.

55
00:04:03.774 --> 00:04:05.258
它有一个原型。
It has a prototype.

56
00:04:05.258 --> 00:04:10.324
最近我认为 JavaScript，你现在甚至可以做到这一点。
Recently I think JavaScript,
you can even do this now.

57
00:04:15.659 --> 00:04:17.389
迈克 · 诺斯: 我们可以有静态成员，对吗？
&gt;&gt; Mike North: We can have static members,
right?

58
00:04:17.389 --> 00:04:19.487
我们可以在课堂上直接访问这个。
Where we can access this
right off of the class.

59
00:04:25.649 --> 00:04:30.095
Mike North: 所以这些都与实例的工厂有关。
&gt;&gt; Mike North: So this is all associated
with the factory of instances.

60
00:04:30.095 --> 00:04:34.766
另一方面，使用这个作为类型
On the other hand, using this as a type

61
00:04:34.766 --> 00:04:39.591
描述了实例本身。
describes the instances themselves.

62
00:04:39.591 --> 00:04:44.961
它几乎可以用作实例的接口。
It can be used as almost like
an interface for the instance.

63
00:04:44.961 --> 00:04:51.018
所以我们可以看到这个符号接触工程在这两个位置。
So we can see this symbol
contact works in both positions.

64
00:04:51.018 --> 00:04:53.646
在这里我们可以捕捉到类本身。
Up here we can capture the class itself.

65
00:04:53.646 --> 00:04:57.117
在这里我们可以把它当作一种类型。
Down here we can use it as a type.

66
00:04:57.117 --> 00:04:59.120
所以它几乎占据了两个位置。
So it kind of occupies both slots.

67
00:05:02.937 --> 00:05:07.949
迈克 · 诺斯: 当声明有相同的名字时，他们似乎都堆在最上面
&gt;&gt; Mike North: When declarations have
the same name they kinda all stack on top

68
00:05:07.949 --> 00:05:12.774
如果你把事情安排得恰到好处,
of each other, and
if you arrange things just the right way,

69
00:05:12.774 --> 00:05:17.805
主要是你没有与其他价值观相冲突的价值观。
mainly you don't have values
that collide with other values.

70
00:05:17.805 --> 00:05:22.579
你可以得到这样的东西,
You can end up with something
that looks like this,

71
00:05:22.579 --> 00:05:27.689
当我们导出相册的时候，看看这个工具提示,
where when we export album,
and look at this tool tip,

72
00:05:27.689 --> 00:05:31.687
这是一个值、一个类型和一个名称空间,
this is a value, a type, and a namespace,

73
00:05:31.687 --> 00:05:38.269
都堆在一起，都在同一个标志上。
all stacked on top of each other,
all riding along on the same symbol.

74
00:05:38.269 --> 00:05:39.076
这里就是,
This is where,

75
00:05:39.076 --> 00:05:42.752
比如我不希望你掩盖工具提示中的信息。
like I don't want you to gloss over
the information in your ToolTips.

76
00:05:42.752 --> 00:05:47.115
这告诉你很多，这告诉你，它是一个类，有一个接口
This tells you a lot, this tells you,
it's a class, there's an interface

77
00:05:47.115 --> 00:05:51.019
使用相同的名称扩展该类，并且有一个名称空间。
of the same name that augments that
class and there's a namespace.

78
00:05:51.019 --> 00:05:56.189
所以我们可以通过这里的类型测试，也就是说，我们甚至不需要
So we could pass the type test here and
that is to, we wouldn't even need

79
00:05:56.189 --> 00:06:01.459
接口为了做到这一点，因为类有一个类型本身。
the interface in order to do that cuz
the class has a type in and of itself.

80
00:06:01.459 --> 00:06:06.168
接口只是在类的顶部合并，并且
The interface just merges
on top of the class, and

81
00:06:06.168 --> 00:06:11.663
这意味着如果我们有另一张专辑，一张新专辑,
that means that if we had
another album here, a new album,

82
00:06:11.663 --> 00:06:19.307
然后是 al2点，我们可以看到界面添加了这个属性艺术家。
and then al2 dot, we can see that the
interface has added this property artist.

83
00:06:19.307 --> 00:06:23.023
如果有人忘记了，这就是你要做的
This is what you do is if
someone has forgotten t

84
00:06:23.023 --> 00:06:27.042
为库添加类型信息。
add something in type information for
a library.

85
00:06:27.042 --> 00:06:30.752
你可以通过一个接口堆栈在那之上，并且
You could through an interface
kind of stack on top of that, and

86
00:06:30.752 --> 00:06:33.488
它通过你的整个应用程序在全球范围内应用。
it applies globally
through your entire app.

87
00:06:33.488 --> 00:06:38.048
所以类型信息只有一个存放范围。
So there's only sort of one scope for
where type information is held.

88
00:06:38.048 --> 00:06:44.295
它不是以单个模块为基础的，它是整个应用程序的整体。
It's not on a per module basis,
it is holistically throughout the app.

89
00:06:44.295 --> 00:06:46.245
演讲者2: 即使没有进口或出口？
&gt;&gt; Speaker 2: Even without importing or
exporting it?

90
00:06:46.245 --> 00:06:49.389
迈克 · 诺斯: 即使不进口也不出口，那是什么？
&gt;&gt; Mike North: Even without importing or
exporting, what is that?

91
00:06:49.389 --> 00:06:52.148
扬声器2: 如果你在你的级别做一个覆盖，但是
&gt;&gt; Speaker 2: If you do
an override in your level, but

92
00:06:52.148 --> 00:06:57.593
你是从外面引进来的，你是说它还在使用？
you imported from outside somewhere,
you're saying it's still appwide?

93
00:06:57.593 --> 00:07:04.999
迈克 · 诺斯: 是的，你所做的修改将在全世界范围内发生。
&gt;&gt; Mike North: Yes, the modification
you make will happen appwide.

94
00:07:04.999 --> 00:07:09.305
这很重要，因为你可能想让你所有的
And this is important because
you might wanna make all of your

95
00:07:09.305 --> 00:07:14.464
在一个文件中进行修改，然后在其他地方进行修改。
modifications in one file, and
then have that, take a fact elsewhere.

96
00:07:14.464 --> 00:07:19.514
有些东西，比如全局变量的类型，会非常不方便
There are certain things like types for
globals, that would be really inconvenient

97
00:07:19.514 --> 00:07:23.656
试图进口和再出口，因为没有这个概念。
to try to import and re-export
because there's no concept of that.

98
00:07:23.656 --> 00:07:28.627
或者 Mocha 的好例子，它会在里面描述,
Good examples that would jQuery or
Mocha, which it makes describe in it,

99
00:07:28.627 --> 00:07:33.528
这些是全局函数，不需要专门导入。
those are global functions that you
don't have to exclusively import.

100
00:07:37.685 --> 00:07:42.697
迈克 · 诺斯: 所以名称空间，它们有自己的位置，我们可以
&gt;&gt; Mike North: So namespaces, they have
kind of their own spot in that we can

101
00:07:42.697 --> 00:07:49.002
在这个工具提示中，名称空间既不是类也不是接口，对吗？
see on this ToolTip a namespace is
neither a class nor an interface, right?

102
00:07:49.002 --> 00:07:54.071
这是它自己的东西，也是这个东西出口的一部分。
It's its own thing and
it's part of this thing being exported.

103
00:07:54.071 --> 00:07:56.956
它们可以与类或函数合并。
They can be merged with classes or
functions.

104
00:07:56.956 --> 00:08:02.454
这是一个类的例子，我们可以看到我们有地址簿。
So here's an example of a class where
we can see we've got address book.

105
00:08:02.454 --> 00:08:07.187
我们在这里所做的，相当于
And what we're doing here,
this is equivalent to what some

106
00:08:07.187 --> 00:08:12.204
语言可以称之为内部类,
languages would call an inner
class where you've got sort of,

107
00:08:12.204 --> 00:08:17.425
你有一个相对于父类的名称空间的类。
you have a class that is namespace
with respect to a parent class.

108
00:08:17.425 --> 00:08:23.992
所以当我们呼叫我们的新用户时，我们必须说 addressBook.ABContact。
So when we call our new,
we're having to say addressBook.ABContact.

109
00:08:26.283 --> 00:08:31.065
Mike North: 之所以允许这样做是因为名称空间的作用
&gt;&gt; Mike North: The reason that this is
allowed is because a namespace serves

110
00:08:31.065 --> 00:08:34.835
把东西粘在什么东西上，对吗？
to sort of tack things onto something,
right?

111
00:08:34.835 --> 00:08:38.980
它只是把 AB 联系人加到了通讯录上。
It's just tacking AB
contact onto address book.

112
00:08:38.980 --> 00:08:41.908
这里没有模棱两可的语法。
And there's not ambiguous syntax here.

113
00:08:41.908 --> 00:08:45.975
地址簿是唯一可以被调用的东西，对吗？
Address book is only something
that can be invoked, right?

114
00:08:45.975 --> 00:08:49.956
因为构造函数是一个函数。
Cuz the constructor is a function.

115
00:08:49.956 --> 00:08:56.317
所以如果我们引入一个碰撞，我们就会遇到这样的问题。
So if we were to introduce a collision,
we'd run into problems like this.

116
00:08:56.317 --> 00:08:58.099
所以现在我们有两件事。
So now we've got two things.

117
00:08:58.099 --> 00:09:01.875
比如 addressbook.ABContact。
Like addressbook.ABContact.

118
00:09:01.875 --> 00:09:03.355
是一根绳子吗？
Is it a string?

119
00:09:03.355 --> 00:09:04.714
这是一门课吗？
Is it a class?

120
00:09:04.714 --> 00:09:07.629
有些事情需要解决。
Something's got to get resolved here.

121
00:09:07.629 --> 00:09:12.940
但是它很大程度上是这个类的静态的一面。
But it like, it is largely
the static side of this class.

122
00:09:17.663 --> 00:09:22.073
类似地，因为它与类一起工作，我们可以期待它会
&gt;&gt; Mike North: Similarly, because it works
with classes, we can expect that it will

123
00:09:22.073 --> 00:09:25.909
函数和类只是函数，对吗？
work for functions and
classes are just functions, right?

124
00:09:25.909 --> 00:09:27.275
他们是工厂。
They're factories.

125
00:09:27.275 --> 00:09:31.197
我们使用 new 关键字来调用类。
We invoke classes by
using the new keyword.

126
00:09:31.197 --> 00:09:35.775
同样的，我们也可以这样使用格式。
And so
similarly we can use format this way.

127
00:09:35.775 --> 00:09:41.999
但是我们也储存了这种内部格式的货币，对吗。
But we've also stored this currency
which is used inside format, right?.

128
00:09:41.999 --> 00:09:44.345
所以它可以引用这里的名称空间。
So it can kind of reference
the namespace here.

129
00:09:44.345 --> 00:09:47.482
这里没有碰撞。
And there is no collision here.

130
00:09:47.482 --> 00:09:49.552
我们可以调用函数或者
We either invoke the function or

131
00:09:49.552 --> 00:09:53.773
我们使用一些附加在函数上的东西。
we use some of these things that
we've tacked onto the function.

132
00:09:55.268 --> 00:09:59.231
迈克 · 诺斯: 我想让你从我的精神世界中吸取一些东西
&gt;&gt; Mike North: In terms of the things I
want you to takeaway with from my mental

133
00:09:59.231 --> 00:10:02.436
模特的视角，知道什么是类型
model perspective,
knowing what's the type and

134
00:10:02.436 --> 00:10:05.883
知道它的价值，会让你走很长的路。
knowing what's the value,
will take you a long way.

135
00:10:05.883 --> 00:10:11.440
知道什么可以增强界面和知道什么
And knowing what can be augmented
interfaces versus knowing what

136
00:10:11.440 --> 00:10:17.208
你有点必须离开时，他们的类型定义，值。
you kinda have to leave alone when
their defined in types, values.

137
00:10:17.208 --> 00:10:22.568
因此，一旦你有了一个很难的值，你就不能覆盖它，因为
So once you have a value like it's hard,
you can't overwrite that because that

138
00:10:22.568 --> 00:10:28.100
当接口是公平的竞争对手时，它会与 JavaScript 的行为方式发生冲突。
would conflict with the way JavaScript
behaves, when interfaces are fair game.
